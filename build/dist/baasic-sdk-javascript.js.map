{"version":3,"sources":["webpack:///webpack/universalModuleDefinition","webpack:///baasic-sdk-javascript.js","webpack:///webpack/bootstrap 24d9c7b289d724cf5ab0","webpack:///./~/inversify/lib/inversify.js","webpack:///./~/tslib/tslib.es6.js","webpack:///./src/common/index.ts","webpack:///./src/core/contracts/index.ts","webpack:///./src/httpApi/index.ts","webpack:///./src/modules/commerce/index.ts","webpack:///./src/modules/article/index.ts","webpack:///./src/modules/notifications/index.ts","webpack:///./src/modules/userProfile/index.ts","webpack:///./~/inversify/lib/constants/metadata_keys.js","webpack:///./src/modules/membership/index.ts","webpack:///./src/modules/metering/index.ts","webpack:///./~/inversify/lib/planning/metadata.js","webpack:///./~/inversify/lib/constants/error_msgs.js","webpack:///./~/inversify/lib/annotation/decorator_utils.js","webpack:///./~/inversify/lib/constants/literal_types.js","webpack:///./src/modules/mediaVault/index.ts","webpack:///./~/inversify/lib/utils/guid.js","webpack:///./src/modules/file/index.ts","webpack:///./src/modules/dynamicResource/index.ts","webpack:///./~/inversify/lib/utils/serialization.js","webpack:///./src/modules/templating/index.ts","webpack:///./src/modules/valueSet/index.ts","webpack:///./~/inversify/lib/syntax/binding_on_syntax.js","webpack:///./~/inversify/lib/syntax/binding_when_syntax.js","webpack:///./src/modules/applicationSettings/index.ts","webpack:///./src/modules/keyValue/index.ts","webpack:///./~/inversify/lib/planning/target.js","webpack:///./~/inversify/lib/syntax/binding_when_on_syntax.js","webpack:///./~/inversify/lib/syntax/constraint_helpers.js","webpack:///./src/common/diModule.ts","webpack:///./src/core/index.ts","webpack:///./src/httpApi/diModule.ts","webpack:///./src/modules/article/articleClient.ts","webpack:///./src/modules/commerce/lookups/index.ts","webpack:///./src/baasicApp.ts","webpack:///./src/diModule.ts","webpack:///./src/index.ts","webpack:///./~/inversify/lib/annotation/inject.js","webpack:///./~/inversify/lib/annotation/injectable.js","webpack:///./~/inversify/lib/annotation/multi_inject.js","webpack:///./~/inversify/lib/annotation/named.js","webpack:///./~/inversify/lib/annotation/optional.js","webpack:///./~/inversify/lib/annotation/tagged.js","webpack:///./~/inversify/lib/annotation/target_name.js","webpack:///./~/inversify/lib/annotation/unmanaged.js","webpack:///./~/inversify/lib/bindings/binding.js","webpack:///./~/inversify/lib/bindings/binding_count.js","webpack:///./~/inversify/lib/container/container.js","webpack:///./~/inversify/lib/container/container_module.js","webpack:///./~/inversify/lib/container/container_snapshot.js","webpack:///./~/inversify/lib/container/lookup.js","webpack:///./~/inversify/lib/planning/context.js","webpack:///./~/inversify/lib/planning/plan.js","webpack:///./~/inversify/lib/planning/planner.js","webpack:///./~/inversify/lib/planning/queryable_string.js","webpack:///./~/inversify/lib/planning/reflection_utils.js","webpack:///./~/inversify/lib/planning/request.js","webpack:///./~/inversify/lib/resolution/instantiation.js","webpack:///./~/inversify/lib/resolution/resolver.js","webpack:///./~/inversify/lib/syntax/binding_in_syntax.js","webpack:///./~/inversify/lib/syntax/binding_in_when_on_syntax.js","webpack:///./~/inversify/lib/syntax/binding_to_syntax.js","webpack:///./src/common/IHALParser.ts","webpack:///./src/common/baseRoute.ts","webpack:///./src/common/contracts/IACL.ts","webpack:///./src/common/contracts/IACLAction.ts","webpack:///./src/common/contracts/IACLOptions.ts","webpack:///./src/common/contracts/IACLPolicy.ts","webpack:///./src/common/contracts/IACLRole.ts","webpack:///./src/common/contracts/IACLUser.ts","webpack:///./src/common/contracts/IGetRequestOptions.ts","webpack:///./src/common/contracts/IModel.ts","webpack:///./src/common/contracts/IOptions.ts","webpack:///./src/common/contracts/IQueryModel.ts","webpack:///./src/common/contracts/IQueryOptions.ts","webpack:///./src/common/contracts/IResponse.ts","webpack:///./src/common/contracts/index.ts","webpack:///./src/common/halParser.ts","webpack:///./src/common/modelMapper.ts","webpack:///./src/common/utility.ts","webpack:///./src/core/browserEvents/browserEventHandler.ts","webpack:///./src/core/browserEvents/index.ts","webpack:///./src/core/contracts/IAppOptions.ts","webpack:///./src/core/contracts/IBaasicApp.ts","webpack:///./src/core/contracts/IBaasicAppOptions.ts","webpack:///./src/core/contracts/IBaasicOptions.ts","webpack:///./src/core/contracts/IDefaultStorageConfig.ts","webpack:///./src/core/contracts/IEventHandler.ts","webpack:///./src/core/contracts/IStorageHandler.ts","webpack:///./src/core/contracts/IToken.ts","webpack:///./src/core/contracts/ITokenHandler.ts","webpack:///./src/core/contracts/IUser.ts","webpack:///./src/core/contracts/IUserHandler.ts","webpack:///./src/core/contracts/diModule.ts","webpack:///./src/core/diModule.ts","webpack:///./src/core/localStorage/LocalStorageHandler.ts","webpack:///./src/core/localStorage/index.ts","webpack:///./src/core/tokenHandler.ts","webpack:///./src/core/userHandler.ts","webpack:///./src/httpApi/IHttpClient.ts","webpack:///./src/httpApi/IHttpHeaders.ts","webpack:///./src/httpApi/IHttpRequest.ts","webpack:///./src/httpApi/IHttpResponse.ts","webpack:///./src/httpApi/baasicApiClient.ts","webpack:///./src/httpApi/jQuery/index.ts","webpack:///./src/httpApi/jQuery/jQueryHttpClient.ts","webpack:///./src/modules/applicationSettings/applicationSettingsClient.ts","webpack:///./src/modules/applicationSettings/applicationSettingsRoute.ts","webpack:///./src/modules/applicationSettings/diModule.ts","webpack:///./src/modules/article/alphabet.ts","webpack:///./src/modules/article/articleACLClient.ts","webpack:///./src/modules/article/articleACLRoute.ts","webpack:///./src/modules/article/articleCommentRepliesClient.ts","webpack:///./src/modules/article/articleCommentRepliesRoute.ts","webpack:///./src/modules/article/articleCommentsClient.ts","webpack:///./src/modules/article/articleCommentsRoute.ts","webpack:///./src/modules/article/articleComments/InstanceCommentsClient.ts","webpack:///./src/modules/article/articleComments/InstanceCommentsRepliesClient.ts","webpack:///./src/modules/article/articleComments/InstanceCommentsRepliesRoute.ts","webpack:///./src/modules/article/articleComments/InstanceCommentsRoute.ts","webpack:///./src/modules/article/articleComments/index.ts","webpack:///./src/modules/article/articleFilesBatchClient.ts","webpack:///./src/modules/article/articleFilesBatchRoute.ts","webpack:///./src/modules/article/articleFilesClient.ts","webpack:///./src/modules/article/articleFilesRoute.ts","webpack:///./src/modules/article/articleFilesStreamsClient.ts","webpack:///./src/modules/article/articleFilesStreamsRoute.ts","webpack:///./src/modules/article/articleFiles/InstanceFilesBatchClient.ts","webpack:///./src/modules/article/articleFiles/InstanceFilesBatchRoute.ts","webpack:///./src/modules/article/articleFiles/InstanceFilesClient.ts","webpack:///./src/modules/article/articleFiles/InstanceFilesRoute.ts","webpack:///./src/modules/article/articleFiles/InstanceFilesStreamsClient.ts","webpack:///./src/modules/article/articleFiles/InstanceFilesStreamsRoute.ts","webpack:///./src/modules/article/articleFiles/index.ts","webpack:///./src/modules/article/articleRatingsClient.ts","webpack:///./src/modules/article/articleRatingsRoute.ts","webpack:///./src/modules/article/articleRatings/InstanceRatingsClient.ts","webpack:///./src/modules/article/articleRatings/InstanceRatingsRoute.ts","webpack:///./src/modules/article/articleRatings/index.ts","webpack:///./src/modules/article/articleRoute.ts","webpack:///./src/modules/article/articleSettingsClient.ts","webpack:///./src/modules/article/articleSettingsRoute.ts","webpack:///./src/modules/article/articleSubscriptionsClient.ts","webpack:///./src/modules/article/articleSubscriptionsRoute.ts","webpack:///./src/modules/article/articleSubscriptions/InstanceSubscriptionsClient.ts","webpack:///./src/modules/article/articleSubscriptions/InstanceSubscriptionsRoute.ts","webpack:///./src/modules/article/articleSubscriptions/SubscriptionsArticleClient.ts","webpack:///./src/modules/article/articleSubscriptions/SubscriptionsArticleRoute.ts","webpack:///./src/modules/article/articleSubscriptions/SubscriptionsCommentReportedClient.ts","webpack:///./src/modules/article/articleSubscriptions/SubscriptionsCommentReportedRoute.ts","webpack:///./src/modules/article/articleSubscriptions/SubscriptionsCommentRequiresModerationClient.ts","webpack:///./src/modules/article/articleSubscriptions/SubscriptionsCommentRequiresModerationRoute.ts","webpack:///./src/modules/article/articleSubscriptions/index.ts","webpack:///./src/modules/article/articleTagsClient.ts","webpack:///./src/modules/article/articleTagsRoute.ts","webpack:///./src/modules/article/articleTagsSubscriptionsClient.ts","webpack:///./src/modules/article/articleTagsSubscriptionsRoute.ts","webpack:///./src/modules/article/articleTags/InstanceTagsClient.ts","webpack:///./src/modules/article/articleTags/InstanceTagsRoute.ts","webpack:///./src/modules/article/articleTags/index.ts","webpack:///./src/modules/article/articleUtility.ts","webpack:///./src/modules/article/constants.ts","webpack:///./src/modules/article/diModule.ts","webpack:///./src/modules/article/root.ts","webpack:///./src/modules/commerce/commerceClient.ts","webpack:///./src/modules/commerce/commerceRoute.ts","webpack:///./src/modules/commerce/customer/commerceCustomerClient.ts","webpack:///./src/modules/commerce/customer/commerceCustomerPaymentMethodClient.ts","webpack:///./src/modules/commerce/customer/commerceCustomerPaymentMethodRoute.ts","webpack:///./src/modules/commerce/customer/commerceCustomerRoute.ts","webpack:///./src/modules/commerce/customer/index.ts","webpack:///./src/modules/commerce/diModule.ts","webpack:///./src/modules/commerce/invoice/commerceInvoiceClient.ts","webpack:///./src/modules/commerce/invoice/commerceInvoiceRoute.ts","webpack:///./src/modules/commerce/invoice/commerceInvoiceStreamsClient.ts","webpack:///./src/modules/commerce/invoice/commerceInvoiceStreamsRoute.ts","webpack:///./src/modules/commerce/invoice/index.ts","webpack:///./src/modules/commerce/lookups/addressType/commerceLookupsAddressTypeBatchClient.ts","webpack:///./src/modules/commerce/lookups/addressType/commerceLookupsAddressTypeBatchRoute.ts","webpack:///./src/modules/commerce/lookups/addressType/commerceLookupsAddressTypeClient.ts","webpack:///./src/modules/commerce/lookups/addressType/commerceLookupsAddressTypeRoute.ts","webpack:///./src/modules/commerce/lookups/addressType/index.ts","webpack:///./src/modules/commerce/lookups/countryState/commerceLookupsCountryStateBatchClient.ts","webpack:///./src/modules/commerce/lookups/countryState/commerceLookupsCountryStateBatchRoute.ts","webpack:///./src/modules/commerce/lookups/countryState/commerceLookupsCountryStateClient.ts","webpack:///./src/modules/commerce/lookups/countryState/commerceLookupsCountryStateRoute.ts","webpack:///./src/modules/commerce/lookups/countryState/index.ts","webpack:///./src/modules/commerce/lookups/country/commerceLookupsCountryBatchClient.ts","webpack:///./src/modules/commerce/lookups/country/commerceLookupsCountryBatchRoute.ts","webpack:///./src/modules/commerce/lookups/country/commerceLookupsCountryClient.ts","webpack:///./src/modules/commerce/lookups/country/commerceLookupsCountryRoute.ts","webpack:///./src/modules/commerce/lookups/country/index.ts","webpack:///./src/modules/commerce/lookups/invoiceStatus/commerceLookupsInvoiceStatusBatchClient.ts","webpack:///./src/modules/commerce/lookups/invoiceStatus/commerceLookupsInvoiceStatusBatchRoute.ts","webpack:///./src/modules/commerce/lookups/invoiceStatus/commerceLookupsInvoiceStatusClient.ts","webpack:///./src/modules/commerce/lookups/invoiceStatus/commerceLookupsInvoiceStatusRoute.ts","webpack:///./src/modules/commerce/lookups/invoiceStatus/index.ts","webpack:///./src/modules/commerce/lookups/lookups.ts","webpack:///./src/modules/commerce/lookups/paymentMethod/commerceLookupsPaymentMethodBatchClient.ts","webpack:///./src/modules/commerce/lookups/paymentMethod/commerceLookupsPaymentMethodBatchRoute.ts","webpack:///./src/modules/commerce/lookups/paymentMethod/commerceLookupsPaymentMethodClient.ts","webpack:///./src/modules/commerce/lookups/paymentMethod/commerceLookupsPaymentMethodRoute.ts","webpack:///./src/modules/commerce/lookups/paymentMethod/index.ts","webpack:///./src/modules/commerce/lookups/paymentTransactionStatus/commerceLookupsPaymentTransactionStatusBatchClient.ts","webpack:///./src/modules/commerce/lookups/paymentTransactionStatus/commerceLookupsPaymentTransactionStatusBatchRoute.ts","webpack:///./src/modules/commerce/lookups/paymentTransactionStatus/commerceLookupsPaymentTransactionStatusClient.ts","webpack:///./src/modules/commerce/lookups/paymentTransactionStatus/commerceLookupsPaymentTransactionStatusRoute.ts","webpack:///./src/modules/commerce/lookups/paymentTransactionStatus/index.ts","webpack:///./src/modules/commerce/lookups/recurringCyclePeriodType/commerceLookupsRecurringCyclePeriodTypeBatchClient.ts","webpack:///./src/modules/commerce/lookups/recurringCyclePeriodType/commerceLookupsRecurringCyclePeriodTypeBatchRoute.ts","webpack:///./src/modules/commerce/lookups/recurringCyclePeriodType/commerceLookupsRecurringCyclePeriodTypeClient.ts","webpack:///./src/modules/commerce/lookups/recurringCyclePeriodType/commerceLookupsRecurringCyclePeriodTypeRoute.ts","webpack:///./src/modules/commerce/lookups/recurringCyclePeriodType/index.ts","webpack:///./src/modules/commerce/lookups/subscriptionStatus/commerceLookupsSubscriptionStatusBatchClient.ts","webpack:///./src/modules/commerce/lookups/subscriptionStatus/commerceLookupsSubscriptionStatusBatchRoute.ts","webpack:///./src/modules/commerce/lookups/subscriptionStatus/commerceLookupsSubscriptionStatusClient.ts","webpack:///./src/modules/commerce/lookups/subscriptionStatus/commerceLookupsSubscriptionStatusRoute.ts","webpack:///./src/modules/commerce/lookups/subscriptionStatus/index.ts","webpack:///./src/modules/commerce/paymentTransaction/commercePaymentTransactionClient.ts","webpack:///./src/modules/commerce/paymentTransaction/commercePaymentTransactionRoute.ts","webpack:///./src/modules/commerce/paymentTransaction/index.ts","webpack:///./src/modules/commerce/product/commerceProductClient.ts","webpack:///./src/modules/commerce/product/commerceProductRoute.ts","webpack:///./src/modules/commerce/product/index.ts","webpack:///./src/modules/dynamicResource/diModule.ts","webpack:///./src/modules/dynamicResource/dynamicResourceACLClient.ts","webpack:///./src/modules/dynamicResource/dynamicResourceACLRoute.ts","webpack:///./src/modules/dynamicResource/dynamicResourceClient.ts","webpack:///./src/modules/dynamicResource/dynamicResourceRoute.ts","webpack:///./src/modules/dynamicResource/dynamicSchemaClient.ts","webpack:///./src/modules/dynamicResource/dynamicSchemaRoute.ts","webpack:///./src/modules/file/diModule.ts","webpack:///./src/modules/file/filesACLClient.ts","webpack:///./src/modules/file/filesACLRoute.ts","webpack:///./src/modules/file/filesBatchClient.ts","webpack:///./src/modules/file/filesBatchRoute.ts","webpack:///./src/modules/file/filesClient.ts","webpack:///./src/modules/file/filesRoute.ts","webpack:///./src/modules/file/filesStreamsClient.ts","webpack:///./src/modules/file/filesStreamsRoute.ts","webpack:///./src/modules/index.ts","webpack:///./src/modules/keyValue/diModule.ts","webpack:///./src/modules/keyValue/keyValueClient.ts","webpack:///./src/modules/keyValue/keyValueRoute.ts","webpack:///./src/modules/mediaVault/MediaVaultBatchClient.ts","webpack:///./src/modules/mediaVault/MediaVaultBatchRoute.ts","webpack:///./src/modules/mediaVault/MediaVaultClient.ts","webpack:///./src/modules/mediaVault/MediaVaultProcessingProviderSettingsClient.ts","webpack:///./src/modules/mediaVault/MediaVaultProcessingProviderSettingsRoute.ts","webpack:///./src/modules/mediaVault/MediaVaultRoute.ts","webpack:///./src/modules/mediaVault/MediaVaultSettingsClient.ts","webpack:///./src/modules/mediaVault/MediaVaultSettingsRoute.ts","webpack:///./src/modules/mediaVault/MediaVaultStreamsClient.ts","webpack:///./src/modules/mediaVault/MediaVaultStreamsRoute.ts","webpack:///./src/modules/mediaVault/diModule.ts","webpack:///./src/modules/membership/diModule.ts","webpack:///./src/modules/membership/loginClient.ts","webpack:///./src/modules/membership/loginRoute.ts","webpack:///./src/modules/membership/loginSocialClient.ts","webpack:///./src/modules/membership/loginSocialRoute.ts","webpack:///./src/modules/membership/lookupClient.ts","webpack:///./src/modules/membership/lookupRoute.ts","webpack:///./src/modules/membership/passwordRecoveryClient.ts","webpack:///./src/modules/membership/passwordRecoveryRoute.ts","webpack:///./src/modules/membership/permissionClient.ts","webpack:///./src/modules/membership/permissionRoute.ts","webpack:///./src/modules/membership/registerClient.ts","webpack:///./src/modules/membership/registerRoute.ts","webpack:///./src/modules/membership/roleClient.ts","webpack:///./src/modules/membership/roleRoute.ts","webpack:///./src/modules/membership/root.ts","webpack:///./src/modules/membership/userClient.ts","webpack:///./src/modules/membership/userRoute.ts","webpack:///./src/modules/membership/userSocialLoginClient.ts","webpack:///./src/modules/membership/userSocialLoginRoute.ts","webpack:///./src/modules/metering/diModule.ts","webpack:///./src/modules/metering/meteringACLClient.ts","webpack:///./src/modules/metering/meteringACLRoute.ts","webpack:///./src/modules/metering/meteringBatchClient.ts","webpack:///./src/modules/metering/meteringBatchRoute.ts","webpack:///./src/modules/metering/meteringCategoryBatchClient.ts","webpack:///./src/modules/metering/meteringCategoryBatchRoute.ts","webpack:///./src/modules/metering/meteringCategoryClient.ts","webpack:///./src/modules/metering/meteringCategoryRoute.ts","webpack:///./src/modules/metering/meteringClient.ts","webpack:///./src/modules/metering/meteringRoute.ts","webpack:///./src/modules/metering/meteringSettingsClient.ts","webpack:///./src/modules/metering/meteringSettingsRoute.ts","webpack:///./src/modules/metering/meteringStatisticsClient.ts","webpack:///./src/modules/metering/meteringStatisticsRoute.ts","webpack:///./src/modules/notifications/diModule.ts","webpack:///./src/modules/notifications/notificationsClient.ts","webpack:///./src/modules/notifications/notificationsPublishBatchClient.ts","webpack:///./src/modules/notifications/notificationsPublishBatchRoute.ts","webpack:///./src/modules/notifications/notificationsPublishClient.ts","webpack:///./src/modules/notifications/notificationsPublishRoute.ts","webpack:///./src/modules/notifications/notificationsRegistrationsAnonymousBatchClient.ts","webpack:///./src/modules/notifications/notificationsRegistrationsAnonymousBatchRoute.ts","webpack:///./src/modules/notifications/notificationsRegistrationsAnonymousClient.ts","webpack:///./src/modules/notifications/notificationsRegistrationsAnonymousRoute.ts","webpack:///./src/modules/notifications/notificationsRegistrationsClient.ts","webpack:///./src/modules/notifications/notificationsRegistrationsRoute.ts","webpack:///./src/modules/notifications/notificationsRegistrationsUsersBatchClient.ts","webpack:///./src/modules/notifications/notificationsRegistrationsUsersBatchRoute.ts","webpack:///./src/modules/notifications/notificationsRegistrationsUsersClient.ts","webpack:///./src/modules/notifications/notificationsRegistrationsUsersRoute.ts","webpack:///./src/modules/notifications/notificationsRoute.ts","webpack:///./src/modules/notifications/notificationsSettingsClient.ts","webpack:///./src/modules/notifications/notificationsSettingsRoute.ts","webpack:///./src/modules/notifications/notificationsSubscriptionsAnonymousBatchClient.ts","webpack:///./src/modules/notifications/notificationsSubscriptionsAnonymousBatchRoute.ts","webpack:///./src/modules/notifications/notificationsSubscriptionsAnonymousClient.ts","webpack:///./src/modules/notifications/notificationsSubscriptionsAnonymousRoute.ts","webpack:///./src/modules/notifications/notificationsSubscriptionsClient.ts","webpack:///./src/modules/notifications/notificationsSubscriptionsRoute.ts","webpack:///./src/modules/notifications/notificationsSubscriptionsUsersBatchClient.ts","webpack:///./src/modules/notifications/notificationsSubscriptionsUsersBatchRoute.ts","webpack:///./src/modules/notifications/notificationsSubscriptionsUsersClient.ts","webpack:///./src/modules/notifications/notificationsSubscriptionsUsersRoute.ts","webpack:///./src/modules/templating/diModule.ts","webpack:///./src/modules/templating/templatingBatchClient.ts","webpack:///./src/modules/templating/templatingBatchRoute.ts","webpack:///./src/modules/templating/templatingClient.ts","webpack:///./src/modules/templating/templatingRoute.ts","webpack:///./src/modules/userProfile/companyBatchClient.ts","webpack:///./src/modules/userProfile/companyBatchRoute.ts","webpack:///./src/modules/userProfile/companyClient.ts","webpack:///./src/modules/userProfile/companyRoute.ts","webpack:///./src/modules/userProfile/diModule.ts","webpack:///./src/modules/userProfile/organizationBatchClient.ts","webpack:///./src/modules/userProfile/organizationBatchRoute.ts","webpack:///./src/modules/userProfile/organizationClient.ts","webpack:///./src/modules/userProfile/organizationRoute.ts","webpack:///./src/modules/userProfile/root.ts","webpack:///./src/modules/userProfile/skillBatchClient.ts","webpack:///./src/modules/userProfile/skillBatchRoute.ts","webpack:///./src/modules/userProfile/skillClient.ts","webpack:///./src/modules/userProfile/skillRoute.ts","webpack:///./src/modules/userProfile/userEducationClient.ts","webpack:///./src/modules/userProfile/userEducationRoute.ts","webpack:///./src/modules/userProfile/userProfileACLClient.ts","webpack:///./src/modules/userProfile/userProfileACLRoute.ts","webpack:///./src/modules/userProfile/userProfileAvatarClient.ts","webpack:///./src/modules/userProfile/userProfileAvatarRoute.ts","webpack:///./src/modules/userProfile/userProfileAvatarStreamsClient.ts","webpack:///./src/modules/userProfile/userProfileAvatarStreamsRoute.ts","webpack:///./src/modules/userProfile/userProfileClient.ts","webpack:///./src/modules/userProfile/userProfileRoute.ts","webpack:///./src/modules/userProfile/userSkillClient.ts","webpack:///./src/modules/userProfile/userSkillRoute.ts","webpack:///./src/modules/userProfile/userWorkClient.ts","webpack:///./src/modules/userProfile/userWorkRoute.ts","webpack:///./src/modules/valueSet/diModule.ts","webpack:///./src/modules/valueSet/valueSetClient.ts","webpack:///./src/modules/valueSet/valueSetItemClient.ts","webpack:///./src/modules/valueSet/valueSetItemRoute.ts","webpack:///./src/modules/valueSet/valueSetRoute.ts","webpack:///./~/uritemplate/bin/uritemplate.js"],"names":["root","factory","exports","module","define","amd","this","modules","__webpack_require__","moduleId","installedModules","i","l","call","m","c","value","d","name","getter","o","Object","defineProperty","configurable","enumerable","get","n","__esModule","object","property","prototype","hasOwnProperty","p","s","container_1","Container","container_module_1","ContainerModule","injectable_1","injectable","tagged_1","tagged","named_1","named","inject_1","inject","optional_1","optional","unmanaged_1","unmanaged","multi_inject_1","multiInject","target_name_1","targetName","guid_1","guid","decorator_utils_1","decorate","constraint_helpers_1","traverseAncerstors","taggedConstraint","namedConstraint","typeConstraint","serialization_1","getServiceIdentifierAsString","__webpack_exports__","__extends","b","__","constructor","extendStatics","create","__rest","e","t","indexOf","getOwnPropertySymbols","length","__decorate","decorators","target","key","desc","arguments","r","getOwnPropertyDescriptor","Reflect","__param","paramIndex","decorator","__metadata","metadataKey","metadataValue","metadata","__awaiter","thisArg","_arguments","P","generator","Promise","resolve","reject","fulfilled","step","next","rejected","throw","result","done","then","apply","__generator","body","verb","v","op","f","TypeError","_","y","label","ops","pop","trys","push","g","sent","return","Symbol","iterator","__exportStar","__values","__read","ar","error","__spread","concat","__asyncGenerator","a","q","resume","shift","settle","delegate","fulfill","asyncIterator","__asyncDelegator","__asyncValues","__assign","setPrototypeOf","__proto__","Array","assign","__export","diModule_1","commonDIModule","diModule","diModule_2","TYPES","httpDIModule","httpTYPES","NAMED_TAG","NAME_TAG","UNMANAGED_TAG","OPTIONAL_TAG","INJECT_TAG","MULTI_INJECT_TAG","TAGGED","TAGGED_PROP","PARAM_TYPES","DESIGN_PARAM_TYPES","METADATA_KEY","Metadata","toString","DUPLICATED_INJECTABLE_DECORATOR","DUPLICATED_METADATA","NULL_ARGUMENT","KEY_NOT_FOUND","AMBIGUOUS_MATCH","CANNOT_UNBIND","NOT_REGISTERED","MISSING_INJECTABLE_ANNOTATION","MISSING_INJECT_ANNOTATION","CIRCULAR_DEPENDENCY","NOT_IMPLEMENTED","INVALID_BINDING_TYPE","NO_MORE_SNAPSHOTS_AVAILABLE","INVALID_MIDDLEWARE_RETURN","INVALID_FUNCTION_BINDING","INVALID_TO_SELF_VALUE","INVALID_DECORATOR_OPERATION","ARGUMENTS_LENGTH_MISMATCH_1","ARGUMENTS_LENGTH_MISMATCH_2","CONTAINER_OPTIONS_MUST_BE_AN_OBJECT","CONTAINER_OPTIONS_INVALID_DEFAULT_SCOPE","INVALID_BINDING_PROPERTY","tagParameter","annotationTarget","propertyName","parameterIndex","_tagParameterOrProperty","tagProperty","paramsOrPropertiesMetadata","isParameterDecorator","undefined","Error","ERROR_MSGS","hasOwnMetadata","getMetadata","paramOrPropertyMetadata","isArray","defineMetadata","_decorate","_param","BindingScopeEnum","Singleton","Transient","BindingTypeEnum","ConstantValue","Constructor","DynamicValue","Factory","Function","Instance","Invalid","Provider","TargetTypeEnum","ClassProperty","ConstructorArgument","Variable","s4","Math","floor","random","substring","serviceIdentifier","_serviceIdentifier","listRegisteredBindingsForServiceIdentifier","container","getBindings","registeredBindingsList","registeredBindings","forEach","binding","implementationType","getFunctionName","constraint","metaData","circularDependencyToException","request","previousServiceIdentifiers","parentServiceIdentifier","childRequests","childRequest","childServiceIdentifier","services","reduce","prev","curr","listMetadataForTarget","serviceIdentifierString","isTagged","isNamed","m_1","namedTag","getNamedTag","otherTags","getCustomTags","tag","name_1","match","binding_when_syntax_1","BindingOnSyntax","_binding","onActivation","handler","BindingWhenSyntax","binding_on_syntax_1","when","whenTargetNamed","whenTargetIsDefault","whenTargetTagged","whenInjectedInto","parent","parentRequest","whenParentNamed","whenParentTagged","whenAnyAncestorIs","ancestor","whenNoAncestorIs","whenAnyAncestorNamed","whenNoAncestorNamed","whenAnyAncestorTagged","whenNoAncestorTagged","whenAnyAncestorMatches","whenNoAncestorMatches","metadata_1","queryable_string_1","Target","type","namedOrTagged","QueryableString","metadataItem","hasTag","matchesArray","matchesTag","some","isOptional","filter","matchesNamedTag","_this","BindingWhenOnSyntax","_bindingWhenSyntax","_bindingOnSyntax","bindings","inversify_1","_1","Utility","ModelMapper","IHALParser","bind","to","toConstantValue","HALParser","coreDIModule","ApiClient","IHttpClient","tslib_1","common_1","httpApi_1","ArticleClient","articleInstanceCommentsClient","articleInstanceFilesClient","articleInstanceRatingsClient","articleInstanceTagsClient","articleInstanceSubscriptionsClient","articleRoute","articleACLClient","apiClient","utility","articleUtility","BaasicArticleUtility","statuses","ArticleStatus","commentStatuses","CommentStatus","find","options","routeDefinition","id","data","post","createParams","update","put","updateParams","saveDraft","isUndefined","remove","delete","archive","restore","unpublish","publish","articleOptions","purge","ArticleInstanceCommentsClient","ArticleInstanceFilesClient","ArticleInstanceRatingsClient","ArticleInstanceTagsClient","ArticleInstanceSubscriptionsClient","ArticleRoute","ArticleACLClient","_a","_b","_c","_d","_e","_f","_g","_h","contracts_1","core_1","BaasicApp","apiKey","opt","settings","extendAs","defaultSettings","DIModule","init","tokenHandler","kernel","ITokenHandler","userHandler","IUserHandler","eventHandler","IEventHandler","membershipModule","Membership","Root","applicationSettingModule","ApplicationSettings","ApplicationSettingsClient","keyValueModule","KeyValue","KeyValueClient","valueSetModule","ValueSet","ValueSetClient","userProfileModule","UserProfile","templatingModule","Templating","TemplatingClient","meteringModule","Metering","MeteringClient","mediaVaultModule","MediaVault","MediaVaultClient","fileModule","Files","FilesClient","dynamicResourceModule","DynamicResource","DynamicResourceClient","notificationModule","Notifications","NotificationsClient","articleModule","Article","commerceModule","Commerce","CommerceClient","getAccessToken","TokenTypes","Access","updateAccessToken","store","getApiKey","getApiUrl","apiUrl","getUser","setUser","userInfo","useSSL","apiRootUrl","apiVersion","enableHALJSON","jQuery_1","localStorage_1","browserEvents_1","diModules","app","appOptions","URL","IAppOptions","IBaasicAppOptions","bindHandler","httpClient","JQueryHttpClient","bindHandlerWithOptions","IStorageHandler","IDefaultStorageConfig","storageHandler","LocalStorageHandler","BrowserEventHandler","IBaasicApp","_i","modules_1","addModule","load","defaultBinding","optionType","mod","IHttpHeaders","IHttpRequest","IHttpResponse","IBaasicOptions","IToken","IUser","targetKey","index","ERRORS_MSGS","types","literal_types_1","Binding","defaultScope","activated","scope","cache","provider","dynamicValue","clone","BindingCount","MultipleBindingsAvailable","NoBindingsAvailable","OnlyOneBindingAvailable","binding_1","lookup_1","planner_1","resolver_1","binding_to_syntax_1","container_snapshot_1","containerOptions","_bindingDictionary","Lookup","_snapshots","_middleware","merge","container1","container2","copyDictionary","origing","destination","traverse","add","bindingDictionary","getBindingDictionary","bindingDictionary1","bindingDictionary2","setModuleId","bindingToSyntax","getBindFunction","_bind","getUnbindFunction","unbind","getIsboundFunction","isBound","getRebindFunction","_rebind","rebind","bindFunction","unbindFunction","isboundFunction","rebindFunction","registry","unload","conditionFactory","expected","item","condition","removeByCondition","BindingToSyntax","unbindAll","hasKey","isBoundNamed","isBoundTagged","createMockRequest","snapshot","ContainerSnapshot","of","middleware","createChild","child","applyMiddleware","middlewares","initial","_planAndResolve","_get","getTagged","getNamed","getAll","getAllTagged","getAllNamed","avoidConstraints","isMultiInject","targetType","defaultArgs","contextInterceptor","context","args","plan","_map","Map","getMap","entry","set","entries","updatedEntries","has","copy","func","Context","addPlan","Plan","parentContext","rootRequest","cntnr","_createTarget","injectMetadata","target_1","tagMetadata","_getActiveBindings","activeBindings","request_1","Request","_validateActiveBindingCount","binding_count_1","msg","_createSubRequests","childRequest_1","plan_2","plan_1","addChildRequest","subChildRequest","reflection_utils_1","getDependencies","dependency","RangeError","message","context_1","str","startsWith","searchString","endsWith","reverseString","reverseSearchString","split","reverse","join","contains","equals","compareString","constructorName","targets","getTargets","baseClassDepencencyCount","getBaseClassDepencencyCount","isBaseClass","serviceIdentifiers","getConstructorArgsAsTargets","getClassPropsAsTargets","constructorArgsMetadata","constructorLength","targetMetadata","formatTargetMetadata","serviceIndentifier","hasInjectAnnotations","isObject","isFunction","isUnknownType","classPropsMetadata","keys","baseConstructor","getPrototypeOf","baseTargets","map","unmanagedCount","dependencyCount","targetMetadataMap","_injectProperties","instance","resolveRequest","propertyInjectionsRequests","propertyInjections","injection","_createInstance","Func","injections","resolveInstance","constr","_resolveRequest","targetIsAnAray","targetParentIsNotAnArray","isSingleton","instantiation_1","binding_when_on_syntax_1","BindingInSyntax","inSingletonScope","inTransientScope","binding_in_syntax_1","BindingInWhenOnSyntax","_bindingInSyntax","binding_in_when_on_syntax_1","toSelf","self","toDynamicValue","toConstructor","toFactory","toFunction","bindingWhenOnSyntax","toAutoFactory","toProvider","uritemplate","BaseRoute","modelMapper","baseFind","route","params","findParams","parse","expand","baseGet","propName","getParams","baseCreate","baseUpdate","linkName","link","model","modelPropertyName","links","href","extend","baseDelete","removeParams","prop","deleteParams","Parser","ns","__bind","removeNamespace","fn","me","substr","Link","Links","Resource","hal","json","_embedded","_links","embedded","em","resourceLinks","_len","_results","lk","console","log","profile","templated","title","idPropertyName","FindParams","sort","orderBy","orderDirection","searchQuery","search","page","pageNumber","rpp","pageSize","KeyParams","ModelParams","OrderByArray","values","orderType","dstObj","srcObj","newObj","srcObj_1","obj","unshift","application","messageBusKey","jQueryLoaded","window","jQuery","triggerEvent","eventName","event","$","Event","document","trigger","CustomEvent","dispatchEvent","createEvent","initEvent","doc","createEventObject","eventType","fireEvent","addEvent","on","addEventListener","attachEvent","initEventing","pushMessage","JSON","stringify","originalEvent","newValue","Refresh","TokenHandler","UserHandler","config","localStorage","getHandler","parseKey","keyGenerator","clear","removeItem","setItem","getItem","messageTypes","tokenExpired","tokenUpdated","tokenKey","token","userAccessTokenTimerHandle","setExpirationTimer","anyToken","access_token","expires_in","sliding_window","tokenUrl","access_url_token","token_type","syncToken","triggerTokenExpired","triggerTokenUpdated","expireTime","expiresIn","Date","getTime","setTimeout","newToken","clearTimeout","slidingWindow","userChanged","userInfoKey","user","isAuthenticated","halParser","wwwAuthenticateTokenizer","ws","quotedString","RegExp","createPromise","url","compileUrl","headers","authToken","headerExists","promise","contentType","getHeader","toLowerCase","response","wwwAuthenticate","parseWWWAuthenticateHeader","scheme","details","error_description","internalRequest","patch","rootUrl","method","unquote","replace","header","tokens","wwwAutheniticate","parseHeaders","arrayOfLines","line","keyValue","trim","jqueryParams","xhrFields","withCredentials","ajax","textStatus","jqXHR","statusText","statusCode","status","getAllResponseHeaders","errorThrown","responseText","responseXML","deferFn","deferred","Deferred","applicationSettingsRoute","ApplicationSettingsRoute","_super","getRoute","updateRoute","ALPHABET","aa","ae","ao","au","av","ay","dz","h","hv","j","k","lj","nj","oi","ou","oo","ss","tz","u","vy","w","x","z","","articleACLRoute","removeByUser","articleId","action","deleteByUser","removeByRole","role","deleteByRole","ArticleACLRoute","deleteByUserRoute","deleteByRoleRoute","accessAction","ArticleCommentRepliesClient","articleCommentRepliesRoute","approve","unapprove","flag","unflag","report","unreport","spam","unspam","ArticleCommentRepliesRoute","findRoute","createRoute","deleteRoute","approveRoute","unapproveRoute","flagRoute","unflagRoute","reportRoute","unreportRoute","spamRoute","unspamRoute","ArticleCommentsClient","articleCommentRepliesClient","articleCommentsRoute","ArticleCommentsRoute","articleInstanceCommentsRoute","articleInstanceCommentsRepliesClient","commentId","removeAll","deleteAll","ArticleInstanceCommentsRoute","ArticleInstanceCommentRepliesClient","articleInstanceCommentRepliesRoute","replyId","ArticleInstanceCommentRepliesRoute","deleteAllRoute","ArticleFilesBatchClient","articleFilesBatchRoute","unlink","ArticleFilesBatchRoute","unlinkRoute","linkRoute","ArticleFilesClient","articleFilesRoute","articleFilesStreamsClient","ArticleFilesRoute","ArticleFilesStreamsClient","articleFilesStreamsRoute","ArticleFilesStreamsRoute","getBlob","Accept","stream","formData","FormData","append","Content-Type","ArticleInstanceFilesBatchClient","articleInstanceFilesBatchRoute","ArticleInstanceFilesBatchRoute","articleInstanceFilesRoute","articleInstanceFilesStreamsClient","unlinkByArticle","ArticleInstanceFilesRoute","ArticleInstanceFilesStreamsClient","articleInstanceFilesStreamsRoute","unlinkByArticleRoute","ArticleInstanceFilesStreamsRoute","ArticleRatingsClient","articleRatingsRoute","findByUser","username","ArticleRatingsRoute","findByUserRoute","articleInstanceRatingsRoute","ArticleInstanceRatingsRoute","articleSubscriptionsRoute","articleInstanceTagsRoute","publishRoute","purgeRoute","archiveRoute","restoreRoute","unpublishRoute","startDate","getStartDate","endDate","getEndDate","toISOString","ArticleSubscriptionsRoute","ArticleInstanceTagsRoute","ArticleSettingsClient","articleSettingsRoute","ArticleSettingsRoute","ArticleSubscriptionsClient","subscribe","isSubscribed","unSubscribe","subscribeRoute","isSubscribedRoute","unSubscribeRoute","articleSubscriptionsCommentReportedClient","articleSubscriptionsArticleClient","articleSubscriptionsCommentRequiresModerationClient","articleInstanceSubscriptionsRoute","ArticleSubscriptionsCommentReportedClient","ArticleSubscriptionsArticleClient","ArticleSubscriptionsCommentRequiresModerationClient","ArticleInstanceSubscriptionsRoute","articleSubscriptionsCommentReportedRoute","articleSubscriptionsArticleRoute","articleSubscriptionsCommentRequiresModerationRoute","ArticleSubscriptionsCommentReportedRoute","ArticleSubscriptionsArticleRoute","ArticleSubscriptionsCommentRequiresModerationRoute","article","subscribeParams","unSubscribed","ArticleTagsClient","articleTagsRoute","articleTagsSubscriptionsClient","ArticleTagsRoute","ArticleTagsSubscriptionsClient","articleTagsSubscriptionsRoute","ArticleTagsSubscriptionsRoute","replaceDiacritics","letter","toSlug","updateSlug","resource","newSlug","slug","none","published","draft","approved","reported","flagged","unapproved","articles","comments","files","ratings","subscriptions","tags","commerceCustomerClient","commerceInvoiceClient","commerceProductClient","commercePaymentTransactionClient","lookup","commerceRoute","validateVAT","countryCode","vatId","preprocess","cancel","CommerceCustomerClient","CommerceInvoiceClient","CommerceProductClient","CommercePaymentTransactionClient","Lookups","CommerceRoute","validateVATRoute","preprocessRoute","cancelRoute","commerceCustomerPaymentMethodClient","commerceCustomerRoute","CommerceCustomerPaymentMethodClient","CommerceCustomerRoute","commerceCustomerPaymentMethodRoute","CommerceCustomerPaymentMethodRoute","CommerceInvoiceRoute","CommerceInvoiceStreamsClient","CommerceInvoiceStreamsRoute","CommercePaymentTransactionRoute","CommerceProductRoute","CommerceLookupsAddressTypesBatchClient","CommerceLookupsAddressTypeBatchRoute","CommerceLookupsAddressTypesClient","CommerceLookupsAddressTypeRoute","CommerceLookupsCountryBatchClient","CommerceLookupsCountryBatchRoute","CommerceLookupsCountryClient","CommerceLookupsCountryRoute","CommerceLookupsCountryStateBatchClient","CommerceLookupsCountryStateBatchRoute","CommerceLookupsCountryStateClient","CommerceLookupsCountryStateRoute","CommerceLookupsPaymentMethodBatchClient","CommerceLookupsPaymentMethodBatchRoute","CommerceLookupsPaymentMethodClient","CommerceLookupsPaymentMethodRoute","CommerceLookupsPaymentTransactionStatusBatchClient","CommerceLookupsPaymentTransactionStatusBatchRoute","CommerceLookupsPaymentTransactionStatusClient","CommerceLookupsPaymentTransactionStatusRoute","CommerceLookupsRecurringCyclePeriodTypeBatchClient","CommerceLookupsRecurringCyclePeriodTypeBatchRoute","CommerceLookupsRecurringCyclePeriodTypeClient","CommerceLookupsRecurringCyclePeriodTypeRoute","CommerceLookupsSubscriptionStatusBatchClient","CommerceLookupsSubscriptionStatusBatchRoute","CommerceLookupsSubscriptionStatusClient","CommerceLookupsSubscriptionStatusRoute","CommerceLookupsInvoiceStatusBatchRoute","CommerceLookupsInvoiceStatusRoute","CommerceLookupsInvoiceStatusBatchClient","CommerceLookupsInvoiceStatusClient","commerceInvoiceRoute","commerceInvoiceStreamsClient","commerceInvoiceStreamsRoute","commerceLookupsAddressTypeBatchRoute","ids","commerceLookupsAddressTypeRoute","commerceLookupsAddressTypesBatchClient","commerceLookupsCountryStateBatchRoute","commerceLookupsCountryStateRoute","commerceLookupsCountryStateBatchClient","commerceCountryStateBatchRoute","commerceLookupsCountryBatchRoute","commerceLookupsCountryRoute","commerceLookupsCountryBatchClient","commerceCountryBatchRoute","commerceLookupsInvoiceStatusBatchRoute","commerceLookupsInvoiceStatusBatchClient","commerceLookupsInvoiceStatusRoute","basicCommerceLookupsInvoiceStatusBatchRoute","_2","addressTypes","countries","countryStates","paymentMethods","paymentTransactionStatuses","recurringCyclePeriodTypes","subscriptionStatuses","invoiceStatuses","commerceLookupsPaymentMethodBatchRoute","commerceLookupsPaymentMethodBatchClient","commerceLookupsPaymentMethodRoute","basicCommerceLookupsPaymentMethodBatchRoute","commerceLookupsPaymentTransactionStatusBatchRoute","commerceLookupsPaymentTransactionStatusBatchClient","commerceLookupsPaymentTransactionStatusRoute","basicCommerceLookupsPaymentTransactionStatusBatchRoute","commerceLookupsRecurringCyclePeriodTypeBatchRoute","commerceLookupsRecurringCyclePeriodTypeBatchClient","commerceLookupsRecurringCyclePeriodTypeRoute","basicCommerceLookupsRecurringCyclePeriodTypeBatchRoute","commerceLookupsSubscriptionStatusBatchRoute","commerceLookupsSubscriptionStatusBatchClient","commerceLookupsSubscriptionStatusRoute","basicCommerceLookupsSubscriptionStatusBatchRoute","commercePaymentTransactionRoute","commerceProductRoute","DynamicResourceACLClient","DynamicResourceACLRoute","DynamicResourceRoute","DynamicSchemaClient","DynamicSchemaRoute","dynamicResourceACLRoute","dynamicResourceRoute","dynamicResourceACLClient","dynamicSchemaClient","schemaName","dynamicSchemaRoute","patchRoute","generate","generateRoute","FilesACLClient","FilesACLRoute","FilesBatchRoute","FilesBatchClient","FilesRoute","FilesStreamsRoute","FilesStreamsClient","filesACLRoute","filesBatchRoute","filesRoute","filesStreamsClient","filesBatchClient","filesACLClient","filesStreamsRoute","path","KeyValueRoute","keyValueRoute","MediaVaultBatchClient","mediaVaultBatchRoute","MediaVaultBatchRoute","mediaVaultRoute","mediaVaultStreamsClient","mediaVaultBatchClient","mediaVaultSettingsClient","mediaVaultProcessingProviderSettingsClient","MediaVaultRoute","MediaVaultStreamsClient","MediaVaultSettingsClient","MediaVaultProcessingProviderSettingsClient","mediaVaultProcessingProviderSettingsRoute","MediaVaultProcessingProviderSettingsRoute","mediaVaultStreamsRoute","mediaVaultSettingsRoute","MediaVaultStreamsRoute","MediaVaultSettingsRoute","LoginRoute","LoginClient","LoginSocialRoute","LoginSocialClient","PasswordRecoveryClient","PasswordRecoveryRoute","RegisterClient","RegisterRoute","RoleClient","RoleRoute","UserSocialLoginClient","UserSocialLoginRoute","UserClient","UserRoute","PermissionRoute","PermissionClient","LookupRoute","LookupClient","loginRoute","login","loginData","transformData","grant_type","password","loadUserData","logout","items","encodeURIComponent","loginSocialRoute","returnUrl","parseResponse","parseUrlParams","oAuthToken","oauth_token","oAuthVerifier","oauth_verifier","code","urlParams","pl","decode","decodeURIComponent","query","location","exec","postRoute","lookupRoute","getResponseData","embed","responseData","embeds","passwordRecoveryRoute","requestReset","passwordRecovery","reset","permissionRoute","permissionHash","section","getActions","getPermissionSubjects","queue","getUsers","collection","membCollection","element","membershipItem","userName","getRoles","roleName","all","membershipCollection","createPermission","actions","permission","dirty","newAction","checked","findPermission","permissionCollection","isEmpty","exists","togglePermission","requestPermission","operation","getModulePermissions","hasPermission","firstCharToLowerCase","read","full","resetPermissions","authorization","userContainer","permissions","sectionPermissions","text","char","getActionsRoute","getRolesRoute","getUsersRoute","removeRoute","subject","abrv","registerRoute","activate","activateRoute","roleRoute","loginSocial","register","lookups","userRoute","userSocialLoginClient","unlock","lock","disapprove","changePassword","userSocialLoginRoute","existsRoute","changePasswordRoute","unlockRoute","lockRoute","disapproveRoute","MeteringACLClient","MeteringACLRoute","MeteringBatchClient","MeteringBatchRoute","MeteringCategoryBatchClient","MeteringCategoryBatchRoute","MeteringCategoryRoute","MeteringCategoryClient","MeteringRoute","MeteringSettingsRoute","MeteringSettingsClient","MeteringStatisticsClient","MeteringStatisticsRoute","meteringACLRoute","meteringBatchRoute","meteringCategoryBatchRoute","meteringCategoryRoute","meteringCategoryBatchClient","meteringRoute","meteringBatchClient","meteringStatisticsClient","meteringACLClient","meteringCategoryClient","meteringSettingsClient","meteringStatisticsRoute","meteringSettingsRoute","NotificationsPublishBatchClient","NotificationsPublishBatchRoute","NotificationsPublishRoute","NotificationsPublishClient","NotificationsRegistrationsAnonymousBatchClient","NotificationsRegistrationsAnonymousBatchRoute","NotificationsRegistrationsAnonymousClient","NotificationsRegistrationsAnonymousRoute","NotificationsRegistrationsRoute","NotificationsRegistrationsUsersBatchRoute","NotificationsRegistrationsUsersBatchClient","NotificationsRegistrationsUsersClient","NotificationsRegistrationsUsersRoute","NotificationsRoute","NotificationsRegistrationsClient","NotificationsSubscriptionsClient","NotificationsSubscriptionsRoute","NotificationsSubscriptionsAnonymousBatchClient","NotificationsSubscriptionsAnonymousBatchRoute","NotificationsSubscriptionsAnonymousRoute","NotificationsSubscriptionsAnonymousClient","NotificationsSubscriptionsUsersRoute","NotificationsSubscriptionsUsersBatchClient","NotificationsSubscriptionsUsersBatchRoute","NotificationsSubscriptionsUsersClient","NotificationsSettingsRoute","NotificationsSettingsClient","notificationsPublishClient","basicNotificationsSubscriptionsClient","notificationsRegistrationsClient","notificationsSettingsClient","notificationsRoute","notificationsPublishBatchRoute","notificationsPublishRoute","notificationsPublishBatchClient","batch","notificationsRegistrationsAnonymousBatchRoute","notificationsRegistrationsAnonymousRoute","notificationsRegistrationsAnonymousBatchClient","notificationsRegistrationsRoute","notificationsRegistrationsAnonymousClient","notificationsRegistrationsUsersClient","notificationsRegistrationsUsersRoute","notificationsRegistrationsUsersBatchRoute","notificationsRegistrationsUsersBatchClient","basicNotificationsSubscriptionsRoute","notificationsSettingsRoute","notificationsSubscriptionsAnonymousBatchRoute","notificationsSubscriptionsAnonymousRoute","notificationsSubscriptionsAnonymousBatchClient","notificationsSubscriptionsRoute","notificationsSubscriptionsAnonymousClient","notificationsSubscriptionsUsersClient","notificationsSubscriptionsUsersRoute","notificationsSubscriptionsUsersBatchRoute","TemplatingBatchClient","TemplatingBatchRoute","TemplatingRoute","templatingBatchRoute","templatingRoute","templatingBatchClient","CompanyBatchClient","companyBatchRoute","CompanyBatchRoute","CompanyClient","companyBatchClient","companyRoute","CompanyRoute","OrganizationBatchClient","OrganizationBatchRoute","OrganizationClient","OrganizationRoute","SkillBatchClient","SkillBatchRoute","SkillClient","SkillRoute","UserEducationClient","UserEducationRoute","UserProfileACLClient","UserProfileACLRoute","UserProfileAvatarClient","UserProfileAvatarRoute","UserProfileAvatarStreamsClient","UserProfileAvatarStreamsRoute","UserProfileClient","UserProfileRoute","UserSkillClient","UserSkillRoute","UserWorkClient","UserWorkRoute","organizationBatchRoute","organizationRoute","organizationBatchClient","company","organization","skill","skillBatchRoute","skillRoute","skillBatchClient","userEducationRoute","userProfileACLRoute","profileId","userProfileAvatarRoute","userProfileAvatarStreamsClient","userProfileAvatarStreamsRoute","filename","userProfileACLClient","userProfileRoute","userEducationClient","userProfileAvatarClient","userSkillClient","userWorkClient","userSkillRoute","userWorkRoute","ValueSetItemClient","ValueSetItemRoute","ValueSetRoute","valueSetRoute","valueSetItemClient","setName","valueSetItemRoute","exportCallback","isDefined","objectHelper","UriTemplateError","isString","isNumber","isBoolean","arr","separator","first","mapper","predicate","deepFreezeUsingObjectFreeze","freeze","deepFreeze","charHelper","isAlpha","chr","isDigit","isHexDigit","pctEncoder","encodeCharacter","octet","octets","utf8","encode","charCodeAt","toUpperCase","isPercentDigitDigit","start","charAt","parseHex2","parseInt","isPctEncoded","firstCharCode","numBytes","byteNumber","isValidFollowingCharCode","pctCharAt","startIndex","utf8CharCode","unescape","charCode","rfcCharHelper","isVarchar","isUnreserved","isReserved","encodingHelper","passReserved","encodePassReserved","encodeLiteralCharacter","literal","encodeLiteral","operators","symbol","bySymbol","ifEmpty","valueOf","LiteralExpression","parseExpression","expressionText","closeVarname","varname","varnameStart","position","varspec","exploded","maxLength","closeMaxLength","maxLengthStart","operator","varspecs","operatorText","character","VariableExpression","uriTemplateText","expressions","braceOpenIndex","literalStart","templateText","UriTemplate","prettyPrint","propertyArray","expandSimpleValue","valueDefined","nameValue","expandNotExploded","expandExplodedNamed","listElement","tmp","expandExplodedUnnamed","variables","expanded"],"mappings":"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","file":"baasic-sdk-javascript.js","sourcesContent":["(function webpackUniversalModuleDefinition(root, factory) {\n\tif(typeof exports === 'object' && typeof module === 'object')\n\t\tmodule.exports = factory();\n\telse if(typeof define === 'function' && define.amd)\n\t\tdefine([], factory);\n\telse if(typeof exports === 'object')\n\t\texports[\"baasicSdkJavaScript\"] = factory();\n\telse\n\t\troot[\"baasicSdkJavaScript\"] = factory();\n})(this, function() {\nreturn \n\n\n// WEBPACK FOOTER //\n// webpack/universalModuleDefinition","(function webpackUniversalModuleDefinition(root, factory) {\n\tif(typeof exports === 'object' && typeof module === 'object')\n\t\tmodule.exports = factory();\n\telse if(typeof define === 'function' && define.amd)\n\t\tdefine([], factory);\n\telse if(typeof exports === 'object')\n\t\texports[\"baasicSdkJavaScript\"] = factory();\n\telse\n\t\troot[\"baasicSdkJavaScript\"] = factory();\n})(this, function() {\nreturn /******/ (function(modules) { // webpackBootstrap\n/******/ \t// The module cache\n/******/ \tvar installedModules = {};\n/******/\n/******/ \t// The require function\n/******/ \tfunction __webpack_require__(moduleId) {\n/******/\n/******/ \t\t// Check if module is in cache\n/******/ \t\tif(installedModules[moduleId])\n/******/ \t\t\treturn installedModules[moduleId].exports;\n/******/\n/******/ \t\t// Create a new module (and put it into the cache)\n/******/ \t\tvar module = installedModules[moduleId] = {\n/******/ \t\t\ti: moduleId,\n/******/ \t\t\tl: false,\n/******/ \t\t\texports: {}\n/******/ \t\t};\n/******/\n/******/ \t\t// Execute the module function\n/******/ \t\tmodules[moduleId].call(module.exports, module, module.exports, __webpack_require__);\n/******/\n/******/ \t\t// Flag the module as loaded\n/******/ \t\tmodule.l = true;\n/******/\n/******/ \t\t// Return the exports of the module\n/******/ \t\treturn module.exports;\n/******/ \t}\n/******/\n/******/\n/******/ \t// expose the modules object (__webpack_modules__)\n/******/ \t__webpack_require__.m = modules;\n/******/\n/******/ \t// expose the module cache\n/******/ \t__webpack_require__.c = installedModules;\n/******/\n/******/ \t// identity function for calling harmony imports with the correct context\n/******/ \t__webpack_require__.i = function(value) { return value; };\n/******/\n/******/ \t// define getter function for harmony exports\n/******/ \t__webpack_require__.d = function(exports, name, getter) {\n/******/ \t\tif(!__webpack_require__.o(exports, name)) {\n/******/ \t\t\tObject.defineProperty(exports, name, {\n/******/ \t\t\t\tconfigurable: false,\n/******/ \t\t\t\tenumerable: true,\n/******/ \t\t\t\tget: getter\n/******/ \t\t\t});\n/******/ \t\t}\n/******/ \t};\n/******/\n/******/ \t// getDefaultExport function for compatibility with non-harmony modules\n/******/ \t__webpack_require__.n = function(module) {\n/******/ \t\tvar getter = module && module.__esModule ?\n/******/ \t\t\tfunction getDefault() { return module['default']; } :\n/******/ \t\t\tfunction getModuleExports() { return module; };\n/******/ \t\t__webpack_require__.d(getter, 'a', getter);\n/******/ \t\treturn getter;\n/******/ \t};\n/******/\n/******/ \t// Object.prototype.hasOwnProperty.call\n/******/ \t__webpack_require__.o = function(object, property) { return Object.prototype.hasOwnProperty.call(object, property); };\n/******/\n/******/ \t// __webpack_public_path__\n/******/ \t__webpack_require__.p = \"\";\n/******/\n/******/ \t// Load entry module and return exports\n/******/ \treturn __webpack_require__(__webpack_require__.s = 37);\n/******/ })\n/************************************************************************/\n/******/ ([\n/* 0 */\n/***/ (function(module, exports, __webpack_require__) {\n\n\"use strict\";\n\nvar container_1 = __webpack_require__(48);\nexports.Container = container_1.Container;\nvar container_module_1 = __webpack_require__(49);\nexports.ContainerModule = container_module_1.ContainerModule;\nvar injectable_1 = __webpack_require__(39);\nexports.injectable = injectable_1.injectable;\nvar tagged_1 = __webpack_require__(43);\nexports.tagged = tagged_1.tagged;\nvar named_1 = __webpack_require__(41);\nexports.named = named_1.named;\nvar inject_1 = __webpack_require__(38);\nexports.inject = inject_1.inject;\nvar optional_1 = __webpack_require__(42);\nexports.optional = optional_1.optional;\nvar unmanaged_1 = __webpack_require__(45);\nexports.unmanaged = unmanaged_1.unmanaged;\nvar multi_inject_1 = __webpack_require__(40);\nexports.multiInject = multi_inject_1.multiInject;\nvar target_name_1 = __webpack_require__(44);\nexports.targetName = target_name_1.targetName;\nvar guid_1 = __webpack_require__(17);\nexports.guid = guid_1.guid;\nvar decorator_utils_1 = __webpack_require__(14);\nexports.decorate = decorator_utils_1.decorate;\nvar constraint_helpers_1 = __webpack_require__(29);\nexports.traverseAncerstors = constraint_helpers_1.traverseAncerstors;\nexports.taggedConstraint = constraint_helpers_1.taggedConstraint;\nexports.namedConstraint = constraint_helpers_1.namedConstraint;\nexports.typeConstraint = constraint_helpers_1.typeConstraint;\nvar serialization_1 = __webpack_require__(20);\nexports.getServiceIdentifierAsString = serialization_1.getServiceIdentifierAsString;\n\n\n/***/ }),\n/* 1 */\n/***/ (function(module, __webpack_exports__, __webpack_require__) {\n\n\"use strict\";\nObject.defineProperty(__webpack_exports__, \"__esModule\", { value: true });\n/* harmony export (immutable) */ __webpack_exports__[\"__extends\"] = __extends;\n/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, \"__assign\", function() { return __assign; });\n/* harmony export (immutable) */ __webpack_exports__[\"__rest\"] = __rest;\n/* harmony export (immutable) */ __webpack_exports__[\"__decorate\"] = __decorate;\n/* harmony export (immutable) */ __webpack_exports__[\"__param\"] = __param;\n/* harmony export (immutable) */ __webpack_exports__[\"__metadata\"] = __metadata;\n/* harmony export (immutable) */ __webpack_exports__[\"__awaiter\"] = __awaiter;\n/* harmony export (immutable) */ __webpack_exports__[\"__generator\"] = __generator;\n/* harmony export (immutable) */ __webpack_exports__[\"__exportStar\"] = __exportStar;\n/* harmony export (immutable) */ __webpack_exports__[\"__values\"] = __values;\n/* harmony export (immutable) */ __webpack_exports__[\"__read\"] = __read;\n/* harmony export (immutable) */ __webpack_exports__[\"__spread\"] = __spread;\n/* harmony export (immutable) */ __webpack_exports__[\"__asyncGenerator\"] = __asyncGenerator;\n/* harmony export (immutable) */ __webpack_exports__[\"__asyncDelegator\"] = __asyncDelegator;\n/* harmony export (immutable) */ __webpack_exports__[\"__asyncValues\"] = __asyncValues;\n/*! *****************************************************************************\r\nCopyright (c) Microsoft Corporation. All rights reserved.\r\nLicensed under the Apache License, Version 2.0 (the \"License\"); you may not use\r\nthis file except in compliance with the License. You may obtain a copy of the\r\nLicense at http://www.apache.org/licenses/LICENSE-2.0\r\n\r\nTHIS CODE IS PROVIDED ON AN *AS IS* BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\r\nKIND, EITHER EXPRESS OR IMPLIED, INCLUDING WITHOUT LIMITATION ANY IMPLIED\r\nWARRANTIES OR CONDITIONS OF TITLE, FITNESS FOR A PARTICULAR PURPOSE,\r\nMERCHANTABLITY OR NON-INFRINGEMENT.\r\n\r\nSee the Apache Version 2.0 License for specific language governing permissions\r\nand limitations under the License.\r\n***************************************************************************** */\r\n/* global Reflect, Promise */\r\n\r\nvar extendStatics = Object.setPrototypeOf ||\r\n    ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||\r\n    function (d, b) { for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p]; };\r\n\r\nfunction __extends(d, b) {\r\n    extendStatics(d, b);\r\n    function __() { this.constructor = d; }\r\n    d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());\r\n}\r\n\r\nvar __assign = Object.assign || function __assign(t) {\r\n    for (var s, i = 1, n = arguments.length; i < n; i++) {\r\n        s = arguments[i];\r\n        for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p)) t[p] = s[p];\r\n    }\r\n    return t;\r\n};\r\n\r\nfunction __rest(s, e) {\r\n    var t = {};\r\n    for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p) && e.indexOf(p) < 0)\r\n        t[p] = s[p];\r\n    if (s != null && typeof Object.getOwnPropertySymbols === \"function\")\r\n        for (var i = 0, p = Object.getOwnPropertySymbols(s); i < p.length; i++) if (e.indexOf(p[i]) < 0)\r\n            t[p[i]] = s[p[i]];\r\n    return t;\r\n}\r\n\r\nfunction __decorate(decorators, target, key, desc) {\r\n    var c = arguments.length, r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;\r\n    if (typeof Reflect === \"object\" && typeof Reflect.decorate === \"function\") r = Reflect.decorate(decorators, target, key, desc);\r\n    else for (var i = decorators.length - 1; i >= 0; i--) if (d = decorators[i]) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;\r\n    return c > 3 && r && Object.defineProperty(target, key, r), r;\r\n}\r\n\r\nfunction __param(paramIndex, decorator) {\r\n    return function (target, key) { decorator(target, key, paramIndex); }\r\n}\r\n\r\nfunction __metadata(metadataKey, metadataValue) {\r\n    if (typeof Reflect === \"object\" && typeof Reflect.metadata === \"function\") return Reflect.metadata(metadataKey, metadataValue);\r\n}\r\n\r\nfunction __awaiter(thisArg, _arguments, P, generator) {\r\n    return new (P || (P = Promise))(function (resolve, reject) {\r\n        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }\r\n        function rejected(value) { try { step(generator.throw(value)); } catch (e) { reject(e); } }\r\n        function step(result) { result.done ? resolve(result.value) : new P(function (resolve) { resolve(result.value); }).then(fulfilled, rejected); }\r\n        step((generator = generator.apply(thisArg, _arguments || [])).next());\r\n    });\r\n}\r\n\r\nfunction __generator(thisArg, body) {\r\n    var _ = { label: 0, sent: function() { if (t[0] & 1) throw t[1]; return t[1]; }, trys: [], ops: [] }, f, y, t, g;\r\n    return g = { next: verb(0), \"throw\": verb(1), \"return\": verb(2) }, typeof Symbol === \"function\" && (g[Symbol.iterator] = function() { return this; }), g;\r\n    function verb(n) { return function (v) { return step([n, v]); }; }\r\n    function step(op) {\r\n        if (f) throw new TypeError(\"Generator is already executing.\");\r\n        while (_) try {\r\n            if (f = 1, y && (t = y[op[0] & 2 ? \"return\" : op[0] ? \"throw\" : \"next\"]) && !(t = t.call(y, op[1])).done) return t;\r\n            if (y = 0, t) op = [0, t.value];\r\n            switch (op[0]) {\r\n                case 0: case 1: t = op; break;\r\n                case 4: _.label++; return { value: op[1], done: false };\r\n                case 5: _.label++; y = op[1]; op = [0]; continue;\r\n                case 7: op = _.ops.pop(); _.trys.pop(); continue;\r\n                default:\r\n                    if (!(t = _.trys, t = t.length > 0 && t[t.length - 1]) && (op[0] === 6 || op[0] === 2)) { _ = 0; continue; }\r\n                    if (op[0] === 3 && (!t || (op[1] > t[0] && op[1] < t[3]))) { _.label = op[1]; break; }\r\n                    if (op[0] === 6 && _.label < t[1]) { _.label = t[1]; t = op; break; }\r\n                    if (t && _.label < t[2]) { _.label = t[2]; _.ops.push(op); break; }\r\n                    if (t[2]) _.ops.pop();\r\n                    _.trys.pop(); continue;\r\n            }\r\n            op = body.call(thisArg, _);\r\n        } catch (e) { op = [6, e]; y = 0; } finally { f = t = 0; }\r\n        if (op[0] & 5) throw op[1]; return { value: op[0] ? op[1] : void 0, done: true };\r\n    }\r\n}\r\n\r\nfunction __exportStar(m, exports) {\r\n    for (var p in m) if (!exports.hasOwnProperty(p)) exports[p] = m[p];\r\n}\r\n\r\nfunction __values(o) {\r\n    var m = typeof Symbol === \"function\" && o[Symbol.iterator], i = 0;\r\n    if (m) return m.call(o);\r\n    return {\r\n        next: function () {\r\n            if (o && i >= o.length) o = void 0;\r\n            return { value: o && o[i++], done: !o };\r\n        }\r\n    };\r\n};\r\n\r\nfunction __read(o, n) {\r\n    var m = typeof Symbol === \"function\" && o[Symbol.iterator];\r\n    if (!m) return o;\r\n    var i = m.call(o), r, ar = [], e;\r\n    try {\r\n        while ((n === void 0 || n-- > 0) && !(r = i.next()).done) ar.push(r.value);\r\n    }\r\n    catch (error) { e = { error: error }; }\r\n    finally {\r\n        try {\r\n            if (r && !r.done && (m = i[\"return\"])) m.call(i);\r\n        }\r\n        finally { if (e) throw e.error; }\r\n    }\r\n    return ar;\r\n};\r\n\r\nfunction __spread() {\r\n    for (var ar = [], i = 0; i < arguments.length; i++)\r\n        ar = ar.concat(__read(arguments[i]));\r\n    return ar;\r\n};\r\n\r\nfunction __asyncGenerator(thisArg, _arguments, generator) {\r\n    if (!Symbol.asyncIterator) throw new TypeError(\"Symbol.asyncIterator is not defined.\");\r\n    var g = generator.apply(thisArg, _arguments || []), q = [], c, i;\r\n    return i = { next: verb(\"next\"), \"throw\": verb(\"throw\"), \"return\": verb(\"return\") }, i[Symbol.asyncIterator] = function () { return this; }, i;\r\n    function verb(n) { return function (v) { return new Promise(function (a, b) { q.push([n, v, a, b]), next(); }); }; }\r\n    function next() { if (!c && q.length) resume((c = q.shift())[0], c[1]); }\r\n    function resume(n, v) { try { step(g[n](v)); } catch (e) { settle(c[3], e); } }\r\n    function step(r) { r.done ? settle(c[2], r) : r.value[0] === \"yield\" ? settle(c[2], { value: r.value[1], done: false }) : Promise.resolve(r.value[1]).then(r.value[0] === \"delegate\" ? delegate : fulfill, reject); }\r\n    function delegate(r) { step(r.done ? r : { value: [\"yield\", r.value], done: false }); }\r\n    function fulfill(value) { resume(\"next\", value); }\r\n    function reject(value) { resume(\"throw\", value); }\r\n    function settle(f, v) { c = void 0, f(v), next(); }\r\n};\r\n\r\nfunction __asyncDelegator(o) {\r\n    var i = { next: verb(\"next\"), \"throw\": verb(\"throw\", function (e) { throw e; }), \"return\": verb(\"return\", function (v) { return { value: v, done: true }; }) };\r\n    return o = __asyncValues(o), i[Symbol.iterator] = function () { return this; }, i;\r\n    function verb(n, f) { return function (v) { return { value: [\"delegate\", (o[n] || f).call(o, v)], done: false }; }; }\r\n};\r\n\r\nfunction __asyncValues(o) {\r\n    if (!Symbol.asyncIterator) throw new TypeError(\"Symbol.asyncIterator is not defined.\");\r\n    var m = o[Symbol.asyncIterator];\r\n    return m ? m.call(o) : typeof __values === \"function\" ? __values(o) : o[Symbol.iterator]();\r\n};\n\n/***/ }),\n/* 2 */\n/***/ (function(module, exports, __webpack_require__) {\n\n\"use strict\";\n\r\nfunction __export(m) {\r\n    for (var p in m) if (!exports.hasOwnProperty(p)) exports[p] = m[p];\r\n}\r\nObject.defineProperty(exports, \"__esModule\", { value: true });\r\n__export(__webpack_require__(63));\r\nvar diModule_1 = __webpack_require__(30);\r\nexports.commonDIModule = diModule_1.diModule;\r\nvar diModule_2 = __webpack_require__(30);\r\nexports.TYPES = diModule_2.TYPES;\r\n__export(__webpack_require__(80));\r\n__export(__webpack_require__(79));\r\n__export(__webpack_require__(64));\r\n__export(__webpack_require__(78));\r\n__export(__webpack_require__(77));\r\n\n\n/***/ }),\n/* 3 */\n/***/ (function(module, exports, __webpack_require__) {\n\n\"use strict\";\n\r\nfunction __export(m) {\r\n    for (var p in m) if (!exports.hasOwnProperty(p)) exports[p] = m[p];\r\n}\r\nObject.defineProperty(exports, \"__esModule\", { value: true });\r\n__export(__webpack_require__(89));\r\n__export(__webpack_require__(88));\r\n__export(__webpack_require__(90));\r\n__export(__webpack_require__(91));\r\n__export(__webpack_require__(92));\r\n__export(__webpack_require__(93));\r\n__export(__webpack_require__(87));\r\n__export(__webpack_require__(86));\r\n__export(__webpack_require__(85));\r\n__export(__webpack_require__(83));\r\n__export(__webpack_require__(84));\r\n__export(__webpack_require__(94));\r\n\n\n/***/ }),\n/* 4 */\n/***/ (function(module, exports, __webpack_require__) {\n\n\"use strict\";\n\r\nfunction __export(m) {\r\n    for (var p in m) if (!exports.hasOwnProperty(p)) exports[p] = m[p];\r\n}\r\nObject.defineProperty(exports, \"__esModule\", { value: true });\r\nvar diModule_1 = __webpack_require__(32);\r\nexports.httpDIModule = diModule_1.diModule;\r\nvar diModule_2 = __webpack_require__(32);\r\nexports.httpTYPES = diModule_2.TYPES;\r\n__export(__webpack_require__(101));\r\n__export(__webpack_require__(102));\r\n__export(__webpack_require__(103));\r\n__export(__webpack_require__(100));\r\n__export(__webpack_require__(104));\r\n\n\n/***/ }),\n/* 5 */\n/***/ (function(module, exports, __webpack_require__) {\n\n\"use strict\";\n\r\nfunction __export(m) {\r\n    for (var p in m) if (!exports.hasOwnProperty(p)) exports[p] = m[p];\r\n}\r\nObject.defineProperty(exports, \"__esModule\", { value: true });\r\n__export(__webpack_require__(172));\r\n__export(__webpack_require__(166));\r\n__export(__webpack_require__(165));\r\n__export(__webpack_require__(34));\r\n__export(__webpack_require__(171));\r\n__export(__webpack_require__(177));\r\n__export(__webpack_require__(221));\r\n__export(__webpack_require__(224));\r\n\n\n/***/ }),\n/* 6 */\n/***/ (function(module, exports, __webpack_require__) {\n\n\"use strict\";\n\r\nfunction __export(m) {\r\n    for (var p in m) if (!exports.hasOwnProperty(p)) exports[p] = m[p];\r\n}\r\nObject.defineProperty(exports, \"__esModule\", { value: true });\r\n__export(__webpack_require__(163));\r\n__export(__webpack_require__(110));\r\n__export(__webpack_require__(162));\r\n__export(__webpack_require__(161));\r\n__export(__webpack_require__(33));\r\n__export(__webpack_require__(153));\r\n__export(__webpack_require__(139));\r\n__export(__webpack_require__(160));\r\n__export(__webpack_require__(121));\r\n__export(__webpack_require__(134));\r\n__export(__webpack_require__(112));\r\n__export(__webpack_require__(111));\r\n__export(__webpack_require__(114));\r\n__export(__webpack_require__(113));\r\n__export(__webpack_require__(116));\r\n__export(__webpack_require__(115));\r\n__export(__webpack_require__(123));\r\n__export(__webpack_require__(122));\r\n__export(__webpack_require__(127));\r\n__export(__webpack_require__(126));\r\n__export(__webpack_require__(125));\r\n__export(__webpack_require__(124));\r\n__export(__webpack_require__(136));\r\n__export(__webpack_require__(135));\r\n__export(__webpack_require__(142));\r\n__export(__webpack_require__(141));\r\n__export(__webpack_require__(157));\r\n__export(__webpack_require__(156));\r\n__export(__webpack_require__(155));\r\n__export(__webpack_require__(154));\r\n__export(__webpack_require__(144));\r\n__export(__webpack_require__(143));\r\n__export(__webpack_require__(140));\r\n__export(__webpack_require__(33));\r\n__export(__webpack_require__(164));\r\n\n\n/***/ }),\n/* 7 */\n/***/ (function(module, exports, __webpack_require__) {\n\n\"use strict\";\n\r\nfunction __export(m) {\r\n    for (var p in m) if (!exports.hasOwnProperty(p)) exports[p] = m[p];\r\n}\r\nObject.defineProperty(exports, \"__esModule\", { value: true });\r\n__export(__webpack_require__(291));\r\n__export(__webpack_require__(294));\r\n__export(__webpack_require__(293));\r\n__export(__webpack_require__(296));\r\n__export(__webpack_require__(295));\r\n__export(__webpack_require__(298));\r\n__export(__webpack_require__(297));\r\n__export(__webpack_require__(300));\r\n__export(__webpack_require__(299));\r\n__export(__webpack_require__(304));\r\n__export(__webpack_require__(303));\r\n__export(__webpack_require__(306));\r\n__export(__webpack_require__(305));\r\n__export(__webpack_require__(302));\r\n__export(__webpack_require__(301));\r\n__export(__webpack_require__(317));\r\n__export(__webpack_require__(316));\r\n__export(__webpack_require__(311));\r\n__export(__webpack_require__(310));\r\n__export(__webpack_require__(313));\r\n__export(__webpack_require__(312));\r\n__export(__webpack_require__(319));\r\n__export(__webpack_require__(318));\r\n__export(__webpack_require__(315));\r\n__export(__webpack_require__(314));\r\n__export(__webpack_require__(309));\r\n__export(__webpack_require__(308));\r\n__export(__webpack_require__(307));\r\n__export(__webpack_require__(292));\r\n\n\n/***/ }),\n/* 8 */\n/***/ (function(module, exports, __webpack_require__) {\n\n\"use strict\";\n\r\nfunction __export(m) {\r\n    for (var p in m) if (!exports.hasOwnProperty(p)) exports[p] = m[p];\r\n}\r\nObject.defineProperty(exports, \"__esModule\", { value: true });\r\n__export(__webpack_require__(329));\r\n__export(__webpack_require__(326));\r\n__export(__webpack_require__(325));\r\n__export(__webpack_require__(328));\r\n__export(__webpack_require__(327));\r\n__export(__webpack_require__(331));\r\n__export(__webpack_require__(330));\r\n__export(__webpack_require__(333));\r\n__export(__webpack_require__(332));\r\n__export(__webpack_require__(336));\r\n__export(__webpack_require__(335));\r\n__export(__webpack_require__(338));\r\n__export(__webpack_require__(337));\r\n__export(__webpack_require__(340));\r\n__export(__webpack_require__(339));\r\n__export(__webpack_require__(346));\r\n__export(__webpack_require__(345));\r\n__export(__webpack_require__(344));\r\n__export(__webpack_require__(343));\r\n__export(__webpack_require__(342));\r\n__export(__webpack_require__(341));\r\n__export(__webpack_require__(348));\r\n__export(__webpack_require__(347));\r\n__export(__webpack_require__(350));\r\n__export(__webpack_require__(349));\r\n__export(__webpack_require__(352));\r\n__export(__webpack_require__(351));\r\n__export(__webpack_require__(334));\r\n\n\n/***/ }),\n/* 9 */\n/***/ (function(module, exports, __webpack_require__) {\n\n\"use strict\";\n\nexports.NAMED_TAG = \"named\";\nexports.NAME_TAG = \"name\";\nexports.UNMANAGED_TAG = \"unmanaged\";\nexports.OPTIONAL_TAG = \"optional\";\nexports.INJECT_TAG = \"inject\";\nexports.MULTI_INJECT_TAG = \"multi_inject\";\nexports.TAGGED = \"inversify:tagged\";\nexports.TAGGED_PROP = \"inversify:tagged_props\";\nexports.PARAM_TYPES = \"inversify:paramtypes\";\nexports.DESIGN_PARAM_TYPES = \"design:paramtypes\";\n\n\n/***/ }),\n/* 10 */\n/***/ (function(module, exports, __webpack_require__) {\n\n\"use strict\";\n\r\nfunction __export(m) {\r\n    for (var p in m) if (!exports.hasOwnProperty(p)) exports[p] = m[p];\r\n}\r\nObject.defineProperty(exports, \"__esModule\", { value: true });\r\n__export(__webpack_require__(256));\r\n__export(__webpack_require__(260));\r\n__export(__webpack_require__(259));\r\n__export(__webpack_require__(258));\r\n__export(__webpack_require__(257));\r\n__export(__webpack_require__(264));\r\n__export(__webpack_require__(263));\r\n__export(__webpack_require__(268));\r\n__export(__webpack_require__(267));\r\n__export(__webpack_require__(270));\r\n__export(__webpack_require__(269));\r\n__export(__webpack_require__(275));\r\n__export(__webpack_require__(273));\r\n__export(__webpack_require__(274));\r\n__export(__webpack_require__(272));\r\n__export(__webpack_require__(266));\r\n__export(__webpack_require__(265));\r\n__export(__webpack_require__(262));\r\n__export(__webpack_require__(261));\r\n__export(__webpack_require__(271));\r\n\n\n/***/ }),\n/* 11 */\n/***/ (function(module, exports, __webpack_require__) {\n\n\"use strict\";\n\r\nfunction __export(m) {\r\n    for (var p in m) if (!exports.hasOwnProperty(p)) exports[p] = m[p];\r\n}\r\nObject.defineProperty(exports, \"__esModule\", { value: true });\r\n__export(__webpack_require__(276));\r\n__export(__webpack_require__(282));\r\n__export(__webpack_require__(281));\r\n__export(__webpack_require__(284));\r\n__export(__webpack_require__(283));\r\n__export(__webpack_require__(280));\r\n__export(__webpack_require__(279));\r\n__export(__webpack_require__(290));\r\n__export(__webpack_require__(289));\r\n__export(__webpack_require__(278));\r\n__export(__webpack_require__(277));\r\n__export(__webpack_require__(286));\r\n__export(__webpack_require__(285));\r\n__export(__webpack_require__(288));\r\n__export(__webpack_require__(287));\r\n\n\n/***/ }),\n/* 12 */\n/***/ (function(module, exports, __webpack_require__) {\n\n\"use strict\";\n\nvar METADATA_KEY = __webpack_require__(9);\nvar Metadata = (function () {\n    function Metadata(key, value) {\n        this.key = key;\n        this.value = value;\n    }\n    Metadata.prototype.toString = function () {\n        if (this.key === METADATA_KEY.NAMED_TAG) {\n            return \"named: \" + this.value.toString() + \" \";\n        }\n        else {\n            return \"tagged: { key:\" + this.key.toString() + \", value: \" + this.value + \" }\";\n        }\n    };\n    return Metadata;\n}());\nexports.Metadata = Metadata;\n\n\n/***/ }),\n/* 13 */\n/***/ (function(module, exports, __webpack_require__) {\n\n\"use strict\";\n\nexports.DUPLICATED_INJECTABLE_DECORATOR = \"Cannot apply @injectable decorator multiple times.\";\nexports.DUPLICATED_METADATA = \"Metadata key was used more than once in a parameter:\";\nexports.NULL_ARGUMENT = \"NULL argument\";\nexports.KEY_NOT_FOUND = \"Key Not Found\";\nexports.AMBIGUOUS_MATCH = \"Ambiguous match found for serviceIdentifier:\";\nexports.CANNOT_UNBIND = \"Could not unbind serviceIdentifier:\";\nexports.NOT_REGISTERED = \"No matching bindings found for serviceIdentifier:\";\nexports.MISSING_INJECTABLE_ANNOTATION = \"Missing required @injectable annotation in:\";\nexports.MISSING_INJECT_ANNOTATION = \"Missing required @inject or @multiInject annotation in:\";\nexports.CIRCULAR_DEPENDENCY = \"Circular dependency found:\";\nexports.NOT_IMPLEMENTED = \"Sorry, this feature is not fully implemented yet.\";\nexports.INVALID_BINDING_TYPE = \"Invalid binding type:\";\nexports.NO_MORE_SNAPSHOTS_AVAILABLE = \"No snapshot available to restore.\";\nexports.INVALID_MIDDLEWARE_RETURN = \"Invalid return type in middleware. Middleware must return!\";\nexports.INVALID_FUNCTION_BINDING = \"Value provided to function binding must be a function!\";\nexports.INVALID_TO_SELF_VALUE = \"The toSelf function can only be applied when a constructor is \" +\n    \"used as service identifier\";\nexports.INVALID_DECORATOR_OPERATION = \"The @inject @multiInject @tagged and @named decorators \" +\n    \"must be applied to the parameters of a class constructor or a class property.\";\nexports.ARGUMENTS_LENGTH_MISMATCH_1 = \"The number of constructor arguments in the derived class \";\nexports.ARGUMENTS_LENGTH_MISMATCH_2 = \" must be >= than the number of constructor arguments of its base class.\";\nexports.CONTAINER_OPTIONS_MUST_BE_AN_OBJECT = \"Invalid Container constructor argument. Container options \" +\n    \"must be an object.\";\nexports.CONTAINER_OPTIONS_INVALID_DEFAULT_SCOPE = \"Invalid Container option. Default scope must \" +\n    \"be a string ('singleton' or 'transient').\";\nexports.INVALID_BINDING_PROPERTY = \"TODO\";\n\n\n/***/ }),\n/* 14 */\n/***/ (function(module, exports, __webpack_require__) {\n\n\"use strict\";\n\nvar METADATA_KEY = __webpack_require__(9);\nvar ERROR_MSGS = __webpack_require__(13);\nfunction tagParameter(annotationTarget, propertyName, parameterIndex, metadata) {\n    var metadataKey = METADATA_KEY.TAGGED;\n    _tagParameterOrProperty(metadataKey, annotationTarget, propertyName, metadata, parameterIndex);\n}\nexports.tagParameter = tagParameter;\nfunction tagProperty(annotationTarget, propertyName, metadata) {\n    var metadataKey = METADATA_KEY.TAGGED_PROP;\n    _tagParameterOrProperty(metadataKey, annotationTarget.constructor, propertyName, metadata);\n}\nexports.tagProperty = tagProperty;\nfunction _tagParameterOrProperty(metadataKey, annotationTarget, propertyName, metadata, parameterIndex) {\n    var paramsOrPropertiesMetadata = {};\n    var isParameterDecorator = (typeof parameterIndex === \"number\");\n    var key = (parameterIndex !== undefined && isParameterDecorator) ? parameterIndex.toString() : propertyName;\n    if (isParameterDecorator === true && propertyName !== undefined) {\n        throw new Error(ERROR_MSGS.INVALID_DECORATOR_OPERATION);\n    }\n    if (Reflect.hasOwnMetadata(metadataKey, annotationTarget) === true) {\n        paramsOrPropertiesMetadata = Reflect.getMetadata(metadataKey, annotationTarget);\n    }\n    var paramOrPropertyMetadata = paramsOrPropertiesMetadata[key];\n    if (Array.isArray(paramOrPropertyMetadata) !== true) {\n        paramOrPropertyMetadata = [];\n    }\n    else {\n        for (var i = 0; i < paramOrPropertyMetadata.length; i++) {\n            var m = paramOrPropertyMetadata[i];\n            if (m.key === metadata.key) {\n                throw new Error(ERROR_MSGS.DUPLICATED_METADATA + \" \" + m.key);\n            }\n        }\n    }\n    paramOrPropertyMetadata.push(metadata);\n    paramsOrPropertiesMetadata[key] = paramOrPropertyMetadata;\n    Reflect.defineMetadata(metadataKey, paramsOrPropertiesMetadata, annotationTarget);\n}\nfunction _decorate(decorators, target) {\n    Reflect.decorate(decorators, target);\n}\nfunction _param(paramIndex, decorator) {\n    return function (target, key) { decorator(target, key, paramIndex); };\n}\nfunction decorate(decorator, target, parameterIndex) {\n    if (typeof parameterIndex === \"number\") {\n        _decorate([_param(parameterIndex, decorator)], target);\n    }\n    else {\n        _decorate([decorator], target);\n    }\n}\nexports.decorate = decorate;\n\n\n/***/ }),\n/* 15 */\n/***/ (function(module, exports, __webpack_require__) {\n\n\"use strict\";\n\nvar BindingScopeEnum = {\n    Singleton: \"Singleton\",\n    Transient: \"Transient\"\n};\nexports.BindingScopeEnum = BindingScopeEnum;\nvar BindingTypeEnum = {\n    ConstantValue: \"ConstantValue\",\n    Constructor: \"Constructor\",\n    DynamicValue: \"DynamicValue\",\n    Factory: \"Factory\",\n    Function: \"Function\",\n    Instance: \"Instance\",\n    Invalid: \"Invalid\",\n    Provider: \"Provider\"\n};\nexports.BindingTypeEnum = BindingTypeEnum;\nvar TargetTypeEnum = {\n    ClassProperty: \"ClassProperty\",\n    ConstructorArgument: \"ConstructorArgument\",\n    Variable: \"Variable\"\n};\nexports.TargetTypeEnum = TargetTypeEnum;\n\n\n/***/ }),\n/* 16 */\n/***/ (function(module, exports, __webpack_require__) {\n\n\"use strict\";\n\r\nfunction __export(m) {\r\n    for (var p in m) if (!exports.hasOwnProperty(p)) exports[p] = m[p];\r\n}\r\nObject.defineProperty(exports, \"__esModule\", { value: true });\r\n__export(__webpack_require__(255));\r\n__export(__webpack_require__(254));\r\n__export(__webpack_require__(253));\r\n__export(__webpack_require__(246));\r\n__export(__webpack_require__(245));\r\n__export(__webpack_require__(252));\r\n__export(__webpack_require__(251));\r\n__export(__webpack_require__(249));\r\n__export(__webpack_require__(248));\r\n__export(__webpack_require__(250));\r\n__export(__webpack_require__(247));\r\n\n\n/***/ }),\n/* 17 */\n/***/ (function(module, exports, __webpack_require__) {\n\n\"use strict\";\n\nfunction guid() {\n    function s4() {\n        return Math.floor((1 + Math.random()) * 0x10000)\n            .toString(16)\n            .substring(1);\n    }\n    return s4() + s4() + \"-\" + s4() + \"-\" + s4() + \"-\" +\n        s4() + \"-\" + s4() + s4() + s4();\n}\nexports.guid = guid;\n\n\n/***/ }),\n/* 18 */\n/***/ (function(module, exports, __webpack_require__) {\n\n\"use strict\";\n\r\nfunction __export(m) {\r\n    for (var p in m) if (!exports.hasOwnProperty(p)) exports[p] = m[p];\r\n}\r\nObject.defineProperty(exports, \"__esModule\", { value: true });\r\n__export(__webpack_require__(232));\r\n__export(__webpack_require__(240));\r\n__export(__webpack_require__(239));\r\n__export(__webpack_require__(236));\r\n__export(__webpack_require__(235));\r\n__export(__webpack_require__(234));\r\n__export(__webpack_require__(233));\r\n__export(__webpack_require__(238));\r\n__export(__webpack_require__(237));\r\n\n\n/***/ }),\n/* 19 */\n/***/ (function(module, exports, __webpack_require__) {\n\n\"use strict\";\n\r\nfunction __export(m) {\r\n    for (var p in m) if (!exports.hasOwnProperty(p)) exports[p] = m[p];\r\n}\r\nObject.defineProperty(exports, \"__esModule\", { value: true });\r\n__export(__webpack_require__(225));\r\n__export(__webpack_require__(231));\r\n__export(__webpack_require__(230));\r\n__export(__webpack_require__(227));\r\n__export(__webpack_require__(226));\r\n__export(__webpack_require__(229));\r\n__export(__webpack_require__(228));\r\n\n\n/***/ }),\n/* 20 */\n/***/ (function(module, exports, __webpack_require__) {\n\n\"use strict\";\n\nvar ERROR_MSGS = __webpack_require__(13);\nfunction getServiceIdentifierAsString(serviceIdentifier) {\n    if (typeof serviceIdentifier === \"function\") {\n        var _serviceIdentifier = serviceIdentifier;\n        return _serviceIdentifier.name;\n    }\n    else if (typeof serviceIdentifier === \"symbol\") {\n        return serviceIdentifier.toString();\n    }\n    else {\n        var _serviceIdentifier = serviceIdentifier;\n        return _serviceIdentifier;\n    }\n}\nexports.getServiceIdentifierAsString = getServiceIdentifierAsString;\nfunction listRegisteredBindingsForServiceIdentifier(container, serviceIdentifier, getBindings) {\n    var registeredBindingsList = \"\";\n    var registeredBindings = getBindings(container, serviceIdentifier);\n    if (registeredBindings.length !== 0) {\n        registeredBindingsList = \"\\nRegistered bindings:\";\n        registeredBindings.forEach(function (binding) {\n            var name = \"Object\";\n            if (binding.implementationType !== null) {\n                name = getFunctionName(binding.implementationType);\n            }\n            registeredBindingsList = registeredBindingsList + \"\\n \" + name;\n            if (binding.constraint.metaData) {\n                registeredBindingsList = registeredBindingsList + \" - \" + binding.constraint.metaData;\n            }\n        });\n    }\n    return registeredBindingsList;\n}\nexports.listRegisteredBindingsForServiceIdentifier = listRegisteredBindingsForServiceIdentifier;\nfunction circularDependencyToException(request, previousServiceIdentifiers) {\n    if (previousServiceIdentifiers === void 0) { previousServiceIdentifiers = []; }\n    var parentServiceIdentifier = getServiceIdentifierAsString(request.serviceIdentifier);\n    previousServiceIdentifiers.push(parentServiceIdentifier);\n    request.childRequests.forEach(function (childRequest) {\n        var childServiceIdentifier = getServiceIdentifierAsString(childRequest.serviceIdentifier);\n        if (previousServiceIdentifiers.indexOf(childServiceIdentifier) === -1) {\n            if (childRequest.childRequests.length > 0) {\n                circularDependencyToException(childRequest, previousServiceIdentifiers);\n            }\n            else {\n                previousServiceIdentifiers.push(childServiceIdentifier);\n            }\n        }\n        else {\n            previousServiceIdentifiers.push(childServiceIdentifier);\n            var services = previousServiceIdentifiers.reduce(function (prev, curr) {\n                return (prev !== \"\") ? prev + \" -> \" + curr : \"\" + curr;\n            }, \"\");\n            throw new Error(ERROR_MSGS.CIRCULAR_DEPENDENCY + \" \" + services);\n        }\n    });\n}\nexports.circularDependencyToException = circularDependencyToException;\nfunction listMetadataForTarget(serviceIdentifierString, target) {\n    if (target.isTagged() || target.isNamed()) {\n        var m_1 = \"\";\n        var namedTag = target.getNamedTag();\n        var otherTags = target.getCustomTags();\n        if (namedTag !== null) {\n            m_1 += namedTag.toString() + \"\\n\";\n        }\n        if (otherTags !== null) {\n            otherTags.forEach(function (tag) {\n                m_1 += tag.toString() + \"\\n\";\n            });\n        }\n        return \" \" + serviceIdentifierString + \"\\n \" + serviceIdentifierString + \" - \" + m_1;\n    }\n    else {\n        return \" \" + serviceIdentifierString;\n    }\n}\nexports.listMetadataForTarget = listMetadataForTarget;\nfunction getFunctionName(v) {\n    if (v.name) {\n        return v.name;\n    }\n    else {\n        var name_1 = v.toString();\n        var match = name_1.match(/^function\\s*([^\\s(]+)/);\n        return match ? match[1] : \"Anonymous function: \" + name_1;\n    }\n}\nexports.getFunctionName = getFunctionName;\n\n\n/***/ }),\n/* 21 */\n/***/ (function(module, exports, __webpack_require__) {\n\n\"use strict\";\n\r\nfunction __export(m) {\r\n    for (var p in m) if (!exports.hasOwnProperty(p)) exports[p] = m[p];\r\n}\r\nObject.defineProperty(exports, \"__esModule\", { value: true });\r\n__export(__webpack_require__(320));\r\n__export(__webpack_require__(322));\r\n__export(__webpack_require__(321));\r\n__export(__webpack_require__(324));\r\n__export(__webpack_require__(323));\r\n\n\n/***/ }),\n/* 22 */\n/***/ (function(module, exports, __webpack_require__) {\n\n\"use strict\";\n\r\nfunction __export(m) {\r\n    for (var p in m) if (!exports.hasOwnProperty(p)) exports[p] = m[p];\r\n}\r\nObject.defineProperty(exports, \"__esModule\", { value: true });\r\n__export(__webpack_require__(353));\r\n__export(__webpack_require__(356));\r\n__export(__webpack_require__(355));\r\n__export(__webpack_require__(357));\r\n__export(__webpack_require__(354));\r\n\n\n/***/ }),\n/* 23 */\n/***/ (function(module, exports, __webpack_require__) {\n\n\"use strict\";\n\nvar binding_when_syntax_1 = __webpack_require__(24);\nvar BindingOnSyntax = (function () {\n    function BindingOnSyntax(binding) {\n        this._binding = binding;\n    }\n    BindingOnSyntax.prototype.onActivation = function (handler) {\n        this._binding.onActivation = handler;\n        return new binding_when_syntax_1.BindingWhenSyntax(this._binding);\n    };\n    return BindingOnSyntax;\n}());\nexports.BindingOnSyntax = BindingOnSyntax;\n\n\n/***/ }),\n/* 24 */\n/***/ (function(module, exports, __webpack_require__) {\n\n\"use strict\";\n\nvar binding_on_syntax_1 = __webpack_require__(23);\nvar constraint_helpers_1 = __webpack_require__(29);\nvar BindingWhenSyntax = (function () {\n    function BindingWhenSyntax(binding) {\n        this._binding = binding;\n    }\n    BindingWhenSyntax.prototype.when = function (constraint) {\n        this._binding.constraint = constraint;\n        return new binding_on_syntax_1.BindingOnSyntax(this._binding);\n    };\n    BindingWhenSyntax.prototype.whenTargetNamed = function (name) {\n        this._binding.constraint = constraint_helpers_1.namedConstraint(name);\n        return new binding_on_syntax_1.BindingOnSyntax(this._binding);\n    };\n    BindingWhenSyntax.prototype.whenTargetIsDefault = function () {\n        this._binding.constraint = function (request) {\n            var targetIsDefault = (request.target !== null) &&\n                (request.target.isNamed() === false) &&\n                (request.target.isTagged() === false);\n            return targetIsDefault;\n        };\n        return new binding_on_syntax_1.BindingOnSyntax(this._binding);\n    };\n    BindingWhenSyntax.prototype.whenTargetTagged = function (tag, value) {\n        this._binding.constraint = constraint_helpers_1.taggedConstraint(tag)(value);\n        return new binding_on_syntax_1.BindingOnSyntax(this._binding);\n    };\n    BindingWhenSyntax.prototype.whenInjectedInto = function (parent) {\n        this._binding.constraint = function (request) {\n            return constraint_helpers_1.typeConstraint(parent)(request.parentRequest);\n        };\n        return new binding_on_syntax_1.BindingOnSyntax(this._binding);\n    };\n    BindingWhenSyntax.prototype.whenParentNamed = function (name) {\n        this._binding.constraint = function (request) {\n            return constraint_helpers_1.namedConstraint(name)(request.parentRequest);\n        };\n        return new binding_on_syntax_1.BindingOnSyntax(this._binding);\n    };\n    BindingWhenSyntax.prototype.whenParentTagged = function (tag, value) {\n        this._binding.constraint = function (request) {\n            return constraint_helpers_1.taggedConstraint(tag)(value)(request.parentRequest);\n        };\n        return new binding_on_syntax_1.BindingOnSyntax(this._binding);\n    };\n    BindingWhenSyntax.prototype.whenAnyAncestorIs = function (ancestor) {\n        this._binding.constraint = function (request) {\n            return constraint_helpers_1.traverseAncerstors(request, constraint_helpers_1.typeConstraint(ancestor));\n        };\n        return new binding_on_syntax_1.BindingOnSyntax(this._binding);\n    };\n    BindingWhenSyntax.prototype.whenNoAncestorIs = function (ancestor) {\n        this._binding.constraint = function (request) {\n            return !constraint_helpers_1.traverseAncerstors(request, constraint_helpers_1.typeConstraint(ancestor));\n        };\n        return new binding_on_syntax_1.BindingOnSyntax(this._binding);\n    };\n    BindingWhenSyntax.prototype.whenAnyAncestorNamed = function (name) {\n        this._binding.constraint = function (request) {\n            return constraint_helpers_1.traverseAncerstors(request, constraint_helpers_1.namedConstraint(name));\n        };\n        return new binding_on_syntax_1.BindingOnSyntax(this._binding);\n    };\n    BindingWhenSyntax.prototype.whenNoAncestorNamed = function (name) {\n        this._binding.constraint = function (request) {\n            return !constraint_helpers_1.traverseAncerstors(request, constraint_helpers_1.namedConstraint(name));\n        };\n        return new binding_on_syntax_1.BindingOnSyntax(this._binding);\n    };\n    BindingWhenSyntax.prototype.whenAnyAncestorTagged = function (tag, value) {\n        this._binding.constraint = function (request) {\n            return constraint_helpers_1.traverseAncerstors(request, constraint_helpers_1.taggedConstraint(tag)(value));\n        };\n        return new binding_on_syntax_1.BindingOnSyntax(this._binding);\n    };\n    BindingWhenSyntax.prototype.whenNoAncestorTagged = function (tag, value) {\n        this._binding.constraint = function (request) {\n            return !constraint_helpers_1.traverseAncerstors(request, constraint_helpers_1.taggedConstraint(tag)(value));\n        };\n        return new binding_on_syntax_1.BindingOnSyntax(this._binding);\n    };\n    BindingWhenSyntax.prototype.whenAnyAncestorMatches = function (constraint) {\n        this._binding.constraint = function (request) {\n            return constraint_helpers_1.traverseAncerstors(request, constraint);\n        };\n        return new binding_on_syntax_1.BindingOnSyntax(this._binding);\n    };\n    BindingWhenSyntax.prototype.whenNoAncestorMatches = function (constraint) {\n        this._binding.constraint = function (request) {\n            return !constraint_helpers_1.traverseAncerstors(request, constraint);\n        };\n        return new binding_on_syntax_1.BindingOnSyntax(this._binding);\n    };\n    return BindingWhenSyntax;\n}());\nexports.BindingWhenSyntax = BindingWhenSyntax;\n\n\n/***/ }),\n/* 25 */\n/***/ (function(module, exports, __webpack_require__) {\n\n\"use strict\";\n\r\nfunction __export(m) {\r\n    for (var p in m) if (!exports.hasOwnProperty(p)) exports[p] = m[p];\r\n}\r\nObject.defineProperty(exports, \"__esModule\", { value: true });\r\n__export(__webpack_require__(109));\r\n__export(__webpack_require__(108));\r\n__export(__webpack_require__(107));\r\n\n\n/***/ }),\n/* 26 */\n/***/ (function(module, exports, __webpack_require__) {\n\n\"use strict\";\n\r\nfunction __export(m) {\r\n    for (var p in m) if (!exports.hasOwnProperty(p)) exports[p] = m[p];\r\n}\r\nObject.defineProperty(exports, \"__esModule\", { value: true });\r\n__export(__webpack_require__(242));\r\n__export(__webpack_require__(244));\r\n__export(__webpack_require__(243));\r\n\n\n/***/ }),\n/* 27 */\n/***/ (function(module, exports, __webpack_require__) {\n\n\"use strict\";\n\nvar metadata_1 = __webpack_require__(12);\nvar queryable_string_1 = __webpack_require__(55);\nvar guid_1 = __webpack_require__(17);\nvar METADATA_KEY = __webpack_require__(9);\nvar Target = (function () {\n    function Target(type, name, serviceIdentifier, namedOrTagged) {\n        this.guid = guid_1.guid();\n        this.type = type;\n        this.serviceIdentifier = serviceIdentifier;\n        this.name = new queryable_string_1.QueryableString(name || \"\");\n        this.metadata = new Array();\n        var metadataItem = null;\n        if (typeof namedOrTagged === \"string\") {\n            metadataItem = new metadata_1.Metadata(METADATA_KEY.NAMED_TAG, namedOrTagged);\n        }\n        else if (namedOrTagged instanceof metadata_1.Metadata) {\n            metadataItem = namedOrTagged;\n        }\n        if (metadataItem !== null) {\n            this.metadata.push(metadataItem);\n        }\n    }\n    Target.prototype.hasTag = function (key) {\n        for (var i = 0; i < this.metadata.length; i++) {\n            var m = this.metadata[i];\n            if (m.key === key) {\n                return true;\n            }\n        }\n        return false;\n    };\n    Target.prototype.isArray = function () {\n        return this.hasTag(METADATA_KEY.MULTI_INJECT_TAG);\n    };\n    Target.prototype.matchesArray = function (name) {\n        return this.matchesTag(METADATA_KEY.MULTI_INJECT_TAG)(name);\n    };\n    Target.prototype.isNamed = function () {\n        return this.hasTag(METADATA_KEY.NAMED_TAG);\n    };\n    Target.prototype.isTagged = function () {\n        return this.metadata.some(function (m) {\n            return (m.key !== METADATA_KEY.INJECT_TAG) &&\n                (m.key !== METADATA_KEY.MULTI_INJECT_TAG) &&\n                (m.key !== METADATA_KEY.NAME_TAG) &&\n                (m.key !== METADATA_KEY.UNMANAGED_TAG) &&\n                (m.key !== METADATA_KEY.NAMED_TAG);\n        });\n    };\n    Target.prototype.isOptional = function () {\n        return this.matchesTag(METADATA_KEY.OPTIONAL_TAG)(true);\n    };\n    Target.prototype.getNamedTag = function () {\n        if (this.isNamed()) {\n            return this.metadata.filter(function (m) { return m.key === METADATA_KEY.NAMED_TAG; })[0];\n        }\n        return null;\n    };\n    Target.prototype.getCustomTags = function () {\n        if (this.isTagged()) {\n            return this.metadata.filter(function (m) {\n                return (m.key !== METADATA_KEY.INJECT_TAG) &&\n                    (m.key !== METADATA_KEY.MULTI_INJECT_TAG) &&\n                    (m.key !== METADATA_KEY.NAME_TAG) &&\n                    (m.key !== METADATA_KEY.UNMANAGED_TAG) &&\n                    (m.key !== METADATA_KEY.NAMED_TAG);\n            });\n        }\n        return null;\n    };\n    Target.prototype.matchesNamedTag = function (name) {\n        return this.matchesTag(METADATA_KEY.NAMED_TAG)(name);\n    };\n    Target.prototype.matchesTag = function (key) {\n        var _this = this;\n        return function (value) {\n            for (var i = 0; i < _this.metadata.length; i++) {\n                var m = _this.metadata[i];\n                if (m.key === key && m.value === value) {\n                    return true;\n                }\n            }\n            return false;\n        };\n    };\n    return Target;\n}());\nexports.Target = Target;\n\n\n/***/ }),\n/* 28 */\n/***/ (function(module, exports, __webpack_require__) {\n\n\"use strict\";\n\nvar binding_when_syntax_1 = __webpack_require__(24);\nvar binding_on_syntax_1 = __webpack_require__(23);\nvar BindingWhenOnSyntax = (function () {\n    function BindingWhenOnSyntax(binding) {\n        this._binding = binding;\n        this._bindingWhenSyntax = new binding_when_syntax_1.BindingWhenSyntax(this._binding);\n        this._bindingOnSyntax = new binding_on_syntax_1.BindingOnSyntax(this._binding);\n    }\n    BindingWhenOnSyntax.prototype.when = function (constraint) {\n        return this._bindingWhenSyntax.when(constraint);\n    };\n    BindingWhenOnSyntax.prototype.whenTargetNamed = function (name) {\n        return this._bindingWhenSyntax.whenTargetNamed(name);\n    };\n    BindingWhenOnSyntax.prototype.whenTargetIsDefault = function () {\n        return this._bindingWhenSyntax.whenTargetIsDefault();\n    };\n    BindingWhenOnSyntax.prototype.whenTargetTagged = function (tag, value) {\n        return this._bindingWhenSyntax.whenTargetTagged(tag, value);\n    };\n    BindingWhenOnSyntax.prototype.whenInjectedInto = function (parent) {\n        return this._bindingWhenSyntax.whenInjectedInto(parent);\n    };\n    BindingWhenOnSyntax.prototype.whenParentNamed = function (name) {\n        return this._bindingWhenSyntax.whenParentNamed(name);\n    };\n    BindingWhenOnSyntax.prototype.whenParentTagged = function (tag, value) {\n        return this._bindingWhenSyntax.whenParentTagged(tag, value);\n    };\n    BindingWhenOnSyntax.prototype.whenAnyAncestorIs = function (ancestor) {\n        return this._bindingWhenSyntax.whenAnyAncestorIs(ancestor);\n    };\n    BindingWhenOnSyntax.prototype.whenNoAncestorIs = function (ancestor) {\n        return this._bindingWhenSyntax.whenNoAncestorIs(ancestor);\n    };\n    BindingWhenOnSyntax.prototype.whenAnyAncestorNamed = function (name) {\n        return this._bindingWhenSyntax.whenAnyAncestorNamed(name);\n    };\n    BindingWhenOnSyntax.prototype.whenAnyAncestorTagged = function (tag, value) {\n        return this._bindingWhenSyntax.whenAnyAncestorTagged(tag, value);\n    };\n    BindingWhenOnSyntax.prototype.whenNoAncestorNamed = function (name) {\n        return this._bindingWhenSyntax.whenNoAncestorNamed(name);\n    };\n    BindingWhenOnSyntax.prototype.whenNoAncestorTagged = function (tag, value) {\n        return this._bindingWhenSyntax.whenNoAncestorTagged(tag, value);\n    };\n    BindingWhenOnSyntax.prototype.whenAnyAncestorMatches = function (constraint) {\n        return this._bindingWhenSyntax.whenAnyAncestorMatches(constraint);\n    };\n    BindingWhenOnSyntax.prototype.whenNoAncestorMatches = function (constraint) {\n        return this._bindingWhenSyntax.whenNoAncestorMatches(constraint);\n    };\n    BindingWhenOnSyntax.prototype.onActivation = function (handler) {\n        return this._bindingOnSyntax.onActivation(handler);\n    };\n    return BindingWhenOnSyntax;\n}());\nexports.BindingWhenOnSyntax = BindingWhenOnSyntax;\n\n\n/***/ }),\n/* 29 */\n/***/ (function(module, exports, __webpack_require__) {\n\n\"use strict\";\n\nvar metadata_1 = __webpack_require__(12);\nvar METADATA_KEY = __webpack_require__(9);\nvar traverseAncerstors = function (request, constraint) {\n    var parent = request.parentRequest;\n    if (parent !== null) {\n        return constraint(parent) ? true : traverseAncerstors(parent, constraint);\n    }\n    else {\n        return false;\n    }\n};\nexports.traverseAncerstors = traverseAncerstors;\nvar taggedConstraint = function (key) { return function (value) {\n    var constraint = function (request) {\n        return request !== null && request.target !== null && request.target.matchesTag(key)(value);\n    };\n    constraint.metaData = new metadata_1.Metadata(key, value);\n    return constraint;\n}; };\nexports.taggedConstraint = taggedConstraint;\nvar namedConstraint = taggedConstraint(METADATA_KEY.NAMED_TAG);\nexports.namedConstraint = namedConstraint;\nvar typeConstraint = function (type) { return function (request) {\n    var binding = null;\n    if (request !== null) {\n        binding = request.bindings[0];\n        if (typeof type === \"string\") {\n            var serviceIdentifier = binding.serviceIdentifier;\n            return serviceIdentifier === type;\n        }\n        else {\n            var constructor = request.bindings[0].implementationType;\n            return type === constructor;\n        }\n    }\n    return false;\n}; };\nexports.typeConstraint = typeConstraint;\n\n\n/***/ }),\n/* 30 */\n/***/ (function(module, exports, __webpack_require__) {\n\n\"use strict\";\n\r\nObject.defineProperty(exports, \"__esModule\", { value: true });\r\nvar inversify_1 = __webpack_require__(0);\r\nvar _1 = __webpack_require__(2);\r\nvar TYPES = {\r\n    Utility: Symbol(\"Utility\"),\r\n    ModelMapper: Symbol(\"ModelMapper\"),\r\n    IHALParser: Symbol(\"IHALParser\")\r\n};\r\nexports.TYPES = TYPES;\r\nvar diModule = new inversify_1.ContainerModule(function (bind) {\r\n    bind(TYPES.Utility).to(_1.Utility);\r\n    bind(TYPES.ModelMapper).to(_1.ModelMapper);\r\n    bind(TYPES.IHALParser).toConstantValue(_1.HALParser);\r\n});\r\nexports.diModule = diModule;\r\n\n\n/***/ }),\n/* 31 */\n/***/ (function(module, exports, __webpack_require__) {\n\n\"use strict\";\n\r\nfunction __export(m) {\r\n    for (var p in m) if (!exports.hasOwnProperty(p)) exports[p] = m[p];\r\n}\r\nObject.defineProperty(exports, \"__esModule\", { value: true });\r\n__export(__webpack_require__(98));\r\n__export(__webpack_require__(99));\r\nvar diModule_1 = __webpack_require__(95);\r\nexports.coreDIModule = diModule_1.diModule;\r\n\n\n/***/ }),\n/* 32 */\n/***/ (function(module, exports, __webpack_require__) {\n\n\"use strict\";\n\r\nObject.defineProperty(exports, \"__esModule\", { value: true });\r\nvar inversify_1 = __webpack_require__(0);\r\nvar _1 = __webpack_require__(4);\r\nvar TYPES = {\r\n    ApiClient: Symbol(\"ApiClient\"),\r\n    IHttpClient: Symbol(\"IHttpClient\")\r\n};\r\nexports.TYPES = TYPES;\r\nvar diModule = new inversify_1.ContainerModule(function (bind) {\r\n    bind(TYPES.ApiClient).to(_1.ApiClient);\r\n});\r\nexports.diModule = diModule;\r\n\n\n/***/ }),\n/* 33 */\n/***/ (function(module, exports, __webpack_require__) {\n\n\"use strict\";\n/* globals module */\r\n/**\r\n * @module articleClient\r\n * @description  Articles Client provides an easy way to consume  Articles REST API end-points. In order to obtain needed routes `articleClient` uses `articleRoute`.\r\n */\r\n\r\nObject.defineProperty(exports, \"__esModule\", { value: true });\r\nvar tslib_1 = __webpack_require__(1);\r\nvar inversify_1 = __webpack_require__(0);\r\n;\r\nvar common_1 = __webpack_require__(2);\r\nvar httpApi_1 = __webpack_require__(4);\r\nvar _1 = __webpack_require__(6);\r\nvar ArticleClient = (function () {\r\n    function ArticleClient(articleInstanceCommentsClient, articleInstanceFilesClient, articleInstanceRatingsClient, articleInstanceTagsClient, articleInstanceSubscriptionsClient, articleRoute, articleACLClient, apiClient) {\r\n        this.articleInstanceCommentsClient = articleInstanceCommentsClient;\r\n        this.articleInstanceFilesClient = articleInstanceFilesClient;\r\n        this.articleInstanceRatingsClient = articleInstanceRatingsClient;\r\n        this.articleInstanceTagsClient = articleInstanceTagsClient;\r\n        this.articleInstanceSubscriptionsClient = articleInstanceSubscriptionsClient;\r\n        this.articleRoute = articleRoute;\r\n        this.articleACLClient = articleACLClient;\r\n        this.apiClient = apiClient;\r\n        this.utility = new common_1.Utility();\r\n        this.articleUtility = new _1.BaasicArticleUtility();\r\n        this.statuses = _1.ArticleStatus;\r\n        this.commentStatuses = _1.CommentStatus;\r\n    }\r\n    Object.defineProperty(ArticleClient.prototype, \"routeDefinition\", {\r\n        /**\r\n         * Provides direct access to `articleRoute`.\r\n         * @method\r\n         * @example articleClient.routeDefinition.get();\r\n         **/\r\n        get: function () {\r\n            return this.articleRoute;\r\n        },\r\n        enumerable: true,\r\n        configurable: true\r\n    });\r\n    Object.defineProperty(ArticleClient.prototype, \"comments\", {\r\n        get: function () {\r\n            return this.articleInstanceCommentsClient;\r\n        },\r\n        enumerable: true,\r\n        configurable: true\r\n    });\r\n    Object.defineProperty(ArticleClient.prototype, \"files\", {\r\n        get: function () {\r\n            return this.articleInstanceFilesClient;\r\n        },\r\n        enumerable: true,\r\n        configurable: true\r\n    });\r\n    Object.defineProperty(ArticleClient.prototype, \"tags\", {\r\n        get: function () {\r\n            return this.articleInstanceTagsClient;\r\n        },\r\n        enumerable: true,\r\n        configurable: true\r\n    });\r\n    Object.defineProperty(ArticleClient.prototype, \"ratings\", {\r\n        get: function () {\r\n            return this.articleInstanceRatingsClient;\r\n        },\r\n        enumerable: true,\r\n        configurable: true\r\n    });\r\n    Object.defineProperty(ArticleClient.prototype, \"subscriptions\", {\r\n        get: function () {\r\n            return this.articleInstanceSubscriptionsClient;\r\n        },\r\n        enumerable: true,\r\n        configurable: true\r\n    });\r\n    Object.defineProperty(ArticleClient.prototype, \"acl\", {\r\n        get: function () {\r\n            return this.articleACLClient;\r\n        },\r\n        enumerable: true,\r\n        configurable: true\r\n    });\r\n    /**\r\n     * Returns a promise that is resolved once the find action has been performed. Success response returns a list of article resources matching the given criteria.\r\n     * @method\r\n     * @param options A promise that is resolved once the find action has been performed.\r\n     * @returns A promise that is resolved once the find action has been performed.\r\n     * @example articleClient.find({\r\n                    pageNumber : 1,\r\n                    pageSize : 10,\r\n                    orderBy : '<field>',\r\n                    orderDirection : '<asc|desc>',\r\n                    search : '<search-phrase>'\r\n                })\r\n                .then(function (collection) {\r\n                    // perform success action here\r\n                },\r\n                 function (response, status, headers, config) {\r\n                     // perform error handling here\r\n                });\r\n     **/\r\n    ArticleClient.prototype.find = function (options) {\r\n        return this.apiClient.get(this.routeDefinition.find(options));\r\n    };\r\n    /**\r\n     * Returns a promise that is resolved once the get action has been performed. Success response returns a single article resource.\r\n     * @method\r\n     * @param id Article slug or id which uniquely identifies article resource that needs to be retrieved.\r\n     * @param options Options object that contains embed items.\r\n     * @returns a promise that is resolved once the get action has been performed.\r\n     * @example articleClient.get('<article-id>')\r\n                    .then(function (data) {\r\n                        // perform success action here\r\n                    },\r\n                     function (response, status, headers, config) {\r\n                         // perform error handling here\r\n                    });\r\n     **/\r\n    ArticleClient.prototype.get = function (id, options) {\r\n        return this.apiClient.get(this.articleRoute.get(id, options));\r\n    };\r\n    /**\r\n     * Returns a promise that is resolved once the create article action has been performed, this action creates a new article resource.\r\n     * @method\r\n     * @param data An article object that needs to be inserted into the system.\r\n     * @returns a promise that is resolved once the create article action has been performed.\r\n     * @example articleClient.create({\r\n                    publishDate : new Date(),\r\n                    title : '<title>',\r\n                    content : '<content>',\r\n                    slug : '',\r\n                    status : baasicArticleService.statuses.draft,\r\n                    $tags : ['<tag1>', '<tag2>']\r\n                })\r\n                .then(function (data) {\r\n                    // perform success action here\r\n                },\r\n                 function (response, status, headers, config) {\r\n                     // perform error handling here\r\n                });\r\n     **/\r\n    ArticleClient.prototype.create = function (data) {\r\n        return this.apiClient.post(this.routeDefinition.create(), this.routeDefinition.createParams(data));\r\n    };\r\n    /**\r\n     * Returns a promise that is resolved once the update article action has been performed; this action updates an article resource. This route uses HAL enabled objects to obtain routes and therefore it doesn't apply `articleRoute` route template. Here is an example of how a route can be obtained from HAL enabled objects:\r\n     * ```\r\n     * let params = modelMapper.updateParams(article);\r\n     * let uri = params['model'].links('put').href;\r\n     * ```\r\n     * @method\r\n     * @param data An article object that needs to be updated into the system.\r\n     * @returns A promise that is resolved once the update article action has been performed.\r\n     * @example // article is a resource previously fetched using get action.\r\n                    article.title = '<title>';\r\n                    articleClient.update(article)\r\n                        .then(function (data) {\r\n                            // perform success action here\r\n                        },\r\n                         function (response, status, headers, config) {\r\n                             // perform error handling here\r\n                        });\r\n     **/\r\n    ArticleClient.prototype.update = function (data) {\r\n        return this.apiClient.put(this.routeDefinition.update(data), this.routeDefinition.updateParams(data));\r\n    };\r\n    /**\r\n     * Returns a promise that is resolved once the saveDraft article action has been performed. This action saves an article with \"draft\" status. If an article does not exist it will create a new article resource otherwise it will update an existing article resource.\r\n     * @method\r\n     * @param data An article object that needs to be inserted into the system.\r\n     * @returns A promise that is resolved once the saveDraft article action has been performed.\r\n     * @example // article is a resource previously fetched using get action.\r\n                        articleClient.saveDraft(article)\r\n                            .then(function (data) {\r\n                                // perform success action here\r\n                            },\r\n                             function (response, status, headers, config) {\r\n                                 // perform error handling here\r\n                            });\r\n     **/\r\n    ArticleClient.prototype.saveDraft = function (data) {\r\n        if (this.utility.isUndefined(data.id)) {\r\n            // Create new draft\r\n            return this.create(data);\r\n        }\r\n        // Update draft\r\n        return this.update(data);\r\n    };\r\n    /**\r\n     * Returns a promise that is resolved once the remove article action has been performed. If the action is successfully completed, the article resource will be permanently removed from the system. This route uses HAL enabled objects to obtain routes and therefore it doesn't apply `articleRoute` route template. Here is an example of how a route can be obtained from HAL enabled objects:\r\n     * ```\r\n     * let params = modelMapper.removeParams(article);\r\n     * let uri = params['model'].links('delete').href;\r\n     * ```\r\n     * @method\r\n     * @param data An article object that needs to be removed from the system.\r\n     * @returns A promise that is resolved once the remove article action has been performed.\r\n     * @example // article is a resource previously fetched using get action.\r\n                    articleClient.remove(article)\r\n                        .then(function (data) {\r\n                            // perform success action here\r\n                        },\r\n                         function (response, status, headers, config) {\r\n                             // perform error handling here\r\n                        });\r\n     **/\r\n    ArticleClient.prototype.remove = function (data) {\r\n        return this.apiClient.delete(this.routeDefinition.delete(data));\r\n    };\r\n    /**\r\n     * Returns a promise that is resolved once the archive article action has been performed. This action sets the status of an article from \"published\" to \"archive\". This route uses HAL enabled objects to obtain routes and therefore it doesn't apply `articleRoute` route template. Here is an example of how a route can be obtained from HAL enabled objects:\r\n     * ```\r\n     * let params = modelMapper.updateParams(article);\r\n     * let uri = params['model'].links('archive').href;\r\n     * ```\r\n     * @method\r\n     * @param data An article object.\r\n     * @param options Notification options.\r\n     * @returns A promise that is resolved once the archive article action has been performed.\r\n     * @example // article is a resource previously fetched using get action.\r\n                    articleClient.archive(article, articleOptions)\r\n                        .then(function (data) {\r\n                            // perform success action here\r\n                        },\r\n                         function (response, status, headers, config) {\r\n                             // perform error handling here\r\n                        });\r\n     **/\r\n    ArticleClient.prototype.archive = function (data, options) {\r\n        return this.apiClient.put(this.routeDefinition.archive(data), this.routeDefinition.updateParams(options));\r\n    };\r\n    /**\r\n     * Returns a promise that is resolved once the restore article action has been performed. This action sets the status of an article from \"archive\" to \"published\". This route uses HAL enabled objects to obtain routes and therefore it doesn't apply `baasicArticleRouteService` route template. Here is an example of how a route can be obtained from HAL enabled objects:\r\n     * ```\r\n     * let params = modelMapper.updateParams(article);\r\n     * let uri = params['model'].links('restore').href;\r\n     * ```\r\n     * @method\r\n     * @param data Article object.\r\n     * @returns A promise that is resolved once the restore article action has been performed.\r\n     * @example // article is a resource previously fetched using get action.\r\n                        articleClient.restore(article)\r\n                            .then(function (data) {\r\n                                // perform success action here\r\n                            },\r\n                             function (response, status, headers, config) {\r\n                                 // perform error handling here\r\n                            });\r\n     **/\r\n    ArticleClient.prototype.restore = function (data) {\r\n        return this.apiClient.put(this.routeDefinition.restore(data), this.routeDefinition.updateParams(data));\r\n    };\r\n    /**\r\n     * Returns a promise that is resolved once the unpublish article action has been performed. This action sets the status of an article from \"published\" to \"draft\". This route uses HAL enabled objects to obtain routes and therefore it doesn't apply `articleRoute` route template. Here is an example of how a route can be obtained from HAL enabled objects:\r\n     * ```\r\n     * let params = modelMapper.updateParams(article);\r\n     * let uri = params['model'].links('unpublish').href;\r\n     * ```\r\n     * @method\r\n     * @param data An article object.\r\n     * @returns A promise that is resolved once the unpublish article action has been performed.\r\n     * @example \t// article is a resource previously fetched using get action.\r\n                        articleClient.unpublish(article)\r\n                            .then(function (data) {\r\n                                // perform success action here\r\n                            },\r\n                             function (response, status, headers, config) {\r\n                                 // perform error handling here\r\n                            });\r\n     **/\r\n    ArticleClient.prototype.unpublish = function (data) {\r\n        return this.apiClient.put(this.routeDefinition.unpublish(data), this.routeDefinition.updateParams(data));\r\n    };\r\n    /**\r\n     * Returns a promise that is resolved once the publish article action has been performed. This action sets the status of an article from \"draft\" to \"published\".\r\n     * @method\r\n     * @param data An article object.\r\n     * @param articleOptions Notification options.\r\n     * @returns A promise that is resolved once the unpublish article action has been performed.\r\n     * @example articleClient.publish(article, articleOptions)\r\n                    .then(function (data) {\r\n                        // perform success action here\r\n                    },\r\n                     function (response, status, headers, config) {\r\n                         // perform error handling here\r\n                    });\r\n     **/\r\n    ArticleClient.prototype.publish = function (data, articleOptions) {\r\n        return this.apiClient.put(this.routeDefinition.publish(data), this.routeDefinition.updateParams(articleOptions));\r\n    };\r\n    /**\r\n     * Returns a promise that is resolved once the purge articles action has been performed. Please note that all article resources will be deleted from the system once the action is successfully completed and therefore it can only be executed by user assigned to account owner role.\r\n     * @method\r\n     * @example articleClient.purge({})\r\n                    .then(function (data) {\r\n                        // perform success action here\r\n                    },\r\n                     function (response, status, headers, config) {\r\n                         // perform error handling here\r\n                    });\r\n     **/\r\n    ArticleClient.prototype.purge = function (options) {\r\n        return this.apiClient.delete(this.routeDefinition.purge(options));\r\n    };\r\n    return ArticleClient;\r\n}());\r\nArticleClient = tslib_1.__decorate([\r\n    inversify_1.injectable(),\r\n    tslib_1.__param(0, inversify_1.inject(_1.TYPES.ArticleInstanceCommentsClient)),\r\n    tslib_1.__param(1, inversify_1.inject(_1.TYPES.ArticleInstanceFilesClient)),\r\n    tslib_1.__param(2, inversify_1.inject(_1.TYPES.ArticleInstanceRatingsClient)),\r\n    tslib_1.__param(3, inversify_1.inject(_1.TYPES.ArticleInstanceTagsClient)),\r\n    tslib_1.__param(4, inversify_1.inject(_1.TYPES.ArticleInstanceSubscriptionsClient)),\r\n    tslib_1.__param(5, inversify_1.inject(_1.TYPES.ArticleRoute)),\r\n    tslib_1.__param(6, inversify_1.inject(_1.TYPES.ArticleACLClient)),\r\n    tslib_1.__param(7, inversify_1.inject(httpApi_1.httpTYPES.ApiClient)),\r\n    tslib_1.__metadata(\"design:paramtypes\", [typeof (_a = typeof _1.ArticleInstanceCommentsClient !== \"undefined\" && _1.ArticleInstanceCommentsClient) === \"function\" && _a || Object, typeof (_b = typeof _1.ArticleInstanceFilesClient !== \"undefined\" && _1.ArticleInstanceFilesClient) === \"function\" && _b || Object, typeof (_c = typeof _1.ArticleInstanceRatingsClient !== \"undefined\" && _1.ArticleInstanceRatingsClient) === \"function\" && _c || Object, typeof (_d = typeof _1.ArticleInstanceTagsClient !== \"undefined\" && _1.ArticleInstanceTagsClient) === \"function\" && _d || Object, typeof (_e = typeof _1.ArticleInstanceSubscriptionsClient !== \"undefined\" && _1.ArticleInstanceSubscriptionsClient) === \"function\" && _e || Object, typeof (_f = typeof _1.ArticleRoute !== \"undefined\" && _1.ArticleRoute) === \"function\" && _f || Object, typeof (_g = typeof _1.ArticleACLClient !== \"undefined\" && _1.ArticleACLClient) === \"function\" && _g || Object, typeof (_h = typeof httpApi_1.ApiClient !== \"undefined\" && httpApi_1.ApiClient) === \"function\" && _h || Object])\r\n], ArticleClient);\r\nexports.ArticleClient = ArticleClient;\r\nvar _a, _b, _c, _d, _e, _f, _g, _h;\r\n/**\r\n * @overview\r\n ***Notes:**\r\n - Refer to the [REST API documentation](https://github.com/Baasic/baasic-rest-api/wiki) for detailed information about available Baasic REST API end-points.\r\n - All end-point objects are transformed by the associated route service.\r\n */ \r\n\n\n/***/ }),\n/* 34 */\n/***/ (function(module, exports, __webpack_require__) {\n\n\"use strict\";\n\r\nfunction __export(m) {\r\n    for (var p in m) if (!exports.hasOwnProperty(p)) exports[p] = m[p];\r\n}\r\nObject.defineProperty(exports, \"__esModule\", { value: true });\r\n__export(__webpack_require__(182));\r\n__export(__webpack_require__(192));\r\n__export(__webpack_require__(187));\r\n__export(__webpack_require__(203));\r\n__export(__webpack_require__(208));\r\n__export(__webpack_require__(213));\r\n__export(__webpack_require__(218));\r\n__export(__webpack_require__(197));\r\n__export(__webpack_require__(198));\r\n\n\n/***/ }),\n/* 35 */\n/***/ (function(module, exports, __webpack_require__) {\n\n\"use strict\";\n\r\nObject.defineProperty(exports, \"__esModule\", { value: true });\r\nvar common_1 = __webpack_require__(2);\r\nvar contracts_1 = __webpack_require__(3);\r\nvar core_1 = __webpack_require__(31);\r\nvar _1 = __webpack_require__(37);\r\nvar httpApi_1 = __webpack_require__(4);\r\nvar modules = __webpack_require__(241);\r\nvar BaasicApp = (function () {\r\n    function BaasicApp(apiKey, options) {\r\n        this.apiKey = apiKey;\r\n        this.options = options;\r\n        this.utility = new common_1.Utility();\r\n        if (!this.apiKey) {\r\n            throw new Error(\"API Key is required.\");\r\n        }\r\n        var opt = {};\r\n        if (options) {\r\n            opt = options;\r\n        }\r\n        this.settings = this.utility.extendAs({}, BaasicApp.defaultSettings, opt);\r\n        this.diModule = new _1.DIModule();\r\n        this.diModule.init(this, [common_1.commonDIModule, core_1.coreDIModule, httpApi_1.httpDIModule, modules]);\r\n        this.tokenHandler = this.diModule.kernel.get(contracts_1.TYPES.ITokenHandler);\r\n        this.userHandler = this.diModule.kernel.get(contracts_1.TYPES.IUserHandler);\r\n        this.eventHandler = this.diModule.kernel.get(contracts_1.TYPES.IEventHandler);\r\n        this.apiClient = this.diModule.kernel.get(httpApi_1.httpTYPES.ApiClient);\r\n        this.membershipModule = this.diModule.kernel.get(modules.Membership.TYPES.Root);\r\n        //Modules\r\n        this.applicationSettingModule = this.diModule.kernel.get(modules.ApplicationSettings.TYPES.ApplicationSettingsClient);\r\n        this.keyValueModule = this.diModule.kernel.get(modules.KeyValue.TYPES.KeyValueClient);\r\n        this.valueSetModule = this.diModule.kernel.get(modules.ValueSet.TYPES.ValueSetClient);\r\n        this.userProfileModule = this.diModule.kernel.get(modules.UserProfile.TYPES.Root);\r\n        this.templatingModule = this.diModule.kernel.get(modules.Templating.TYPES.TemplatingClient);\r\n        this.meteringModule = this.diModule.kernel.get(modules.Metering.TYPES.MeteringClient);\r\n        this.mediaVaultModule = this.diModule.kernel.get(modules.MediaVault.TYPES.MediaVaultClient);\r\n        this.fileModule = this.diModule.kernel.get(modules.Files.TYPES.FilesClient);\r\n        this.dynamicResourceModule = this.diModule.kernel.get(modules.DynamicResource.TYPES.DynamicResourceClient);\r\n        this.notificationModule = this.diModule.kernel.get(modules.Notifications.TYPES.NotificationsClient);\r\n        this.articleModule = this.diModule.kernel.get(modules.Article.TYPES.Root);\r\n        this.commerceModule = this.diModule.kernel.get(modules.Commerce.TYPES.CommerceClient);\r\n    }\r\n    BaasicApp.prototype.getAccessToken = function () {\r\n        return this.tokenHandler.get(contracts_1.TokenTypes.Access);\r\n    };\r\n    BaasicApp.prototype.updateAccessToken = function (value) {\r\n        this.tokenHandler.store(value);\r\n    };\r\n    BaasicApp.prototype.getApiKey = function () {\r\n        return this.apiKey;\r\n    };\r\n    BaasicApp.prototype.getApiUrl = function () {\r\n        return this.settings.apiUrl;\r\n    };\r\n    BaasicApp.prototype.getUser = function () {\r\n        return this.userHandler.getUser();\r\n    };\r\n    BaasicApp.prototype.setUser = function (userInfo) {\r\n        this.userHandler.setUser(userInfo);\r\n    };\r\n    return BaasicApp;\r\n}());\r\nBaasicApp.defaultSettings = {\r\n    useSSL: true,\r\n    apiRootUrl: 'api.baasic.com',\r\n    apiVersion: 'v1',\r\n    enableHALJSON: false\r\n};\r\nexports.BaasicApp = BaasicApp;\r\n\n\n/***/ }),\n/* 36 */\n/***/ (function(module, exports, __webpack_require__) {\n\n\"use strict\";\n\r\nObject.defineProperty(exports, \"__esModule\", { value: true });\r\nvar inversify_1 = __webpack_require__(0);\r\nvar httpApi_1 = __webpack_require__(4);\r\nvar contracts_1 = __webpack_require__(3);\r\nvar jQuery_1 = __webpack_require__(105);\r\nvar localStorage_1 = __webpack_require__(97);\r\nvar browserEvents_1 = __webpack_require__(82);\r\nvar DIModule = (function () {\r\n    function DIModule() {\r\n        this.diModules = [];\r\n        this.kernel = new inversify_1.Container();\r\n    }\r\n    DIModule.prototype.init = function (app, modules) {\r\n        var _this = this;\r\n        var diModule = new inversify_1.ContainerModule(function (bind) {\r\n            var apiKey = app.getApiKey();\r\n            if (app.settings) {\r\n                var appOptions = {\r\n                    apiKey: apiKey,\r\n                    apiUrl: new URL((app.settings.useSSL ? 'https' : 'http') + \"://\" + app.settings.apiRootUrl + \"/\" + app.settings.apiVersion + \"/\" + apiKey + \"/\"),\r\n                    enableHALJSON: app.settings.enableHALJSON\r\n                };\r\n                app.settings.apiUrl = appOptions.apiUrl;\r\n                _this.kernel.bind(contracts_1.TYPES.IAppOptions).toConstantValue(appOptions);\r\n                _this.kernel.bind(contracts_1.TYPES.IBaasicAppOptions).toConstantValue(app.settings);\r\n            }\r\n            _this.bindHandler(httpApi_1.httpTYPES.IHttpClient, app.settings.httpClient, jQuery_1.JQueryHttpClient);\r\n            _this.bindHandlerWithOptions(contracts_1.TYPES.IStorageHandler, contracts_1.TYPES.IDefaultStorageConfig, app.settings.storageHandler, localStorage_1.LocalStorageHandler);\r\n            _this.bindHandler(contracts_1.TYPES.IEventHandler, app.settings.eventHandler, browserEvents_1.BrowserEventHandler);\r\n            _this.kernel.bind(contracts_1.TYPES.IBaasicApp).toConstantValue(app);\r\n        });\r\n        this.diModules.push(diModule);\r\n        for (var _i = 0, modules_1 = modules; _i < modules_1.length; _i++) {\r\n            var m = modules_1[_i];\r\n            this.addModule(m);\r\n        }\r\n        (_a = this.kernel).load.apply(_a, this.diModules);\r\n        var _a;\r\n    };\r\n    DIModule.prototype.bindHandler = function (type, value, defaultBinding) {\r\n        if (value) {\r\n            this.kernel.bind(type).toConstantValue(value());\r\n        }\r\n        else {\r\n            this.kernel.bind(type).to(defaultBinding);\r\n        }\r\n    };\r\n    DIModule.prototype.bindHandlerWithOptions = function (type, optionType, value, defaultBinding) {\r\n        if (value) {\r\n            if (value instanceof Function) {\r\n                this.kernel.bind(type).toConstantValue(value());\r\n                return;\r\n            }\r\n            else {\r\n                this.kernel.bind(optionType).toConstantValue(value);\r\n            }\r\n        }\r\n        this.kernel.bind(type).to(defaultBinding);\r\n    };\r\n    DIModule.prototype.addModule = function (module) {\r\n        if (module instanceof inversify_1.ContainerModule) {\r\n            this.diModules.push(module);\r\n        }\r\n        else if (module instanceof Object && !(module instanceof Function)) {\r\n            for (var mod in module) {\r\n                this.addModule(module[mod]);\r\n            }\r\n        }\r\n    };\r\n    return DIModule;\r\n}());\r\nexports.DIModule = DIModule;\r\n;\r\n\n\n/***/ }),\n/* 37 */\n/***/ (function(module, exports, __webpack_require__) {\n\n\"use strict\";\n\r\nfunction __export(m) {\r\n    for (var p in m) if (!exports.hasOwnProperty(p)) exports[p] = m[p];\r\n}\r\nObject.defineProperty(exports, \"__esModule\", { value: true });\r\n__export(__webpack_require__(36));\r\n__export(__webpack_require__(35));\r\nvar httpApi_1 = __webpack_require__(4);\r\nexports.IHttpClient = httpApi_1.IHttpClient;\r\nexports.IHttpHeaders = httpApi_1.IHttpHeaders;\r\nexports.IHttpRequest = httpApi_1.IHttpRequest;\r\nexports.IHttpResponse = httpApi_1.IHttpResponse;\r\nvar contracts_1 = __webpack_require__(3);\r\nexports.IStorageHandler = contracts_1.IStorageHandler;\r\nexports.IEventHandler = contracts_1.IEventHandler;\r\nexports.ITokenHandler = contracts_1.ITokenHandler;\r\nexports.IBaasicAppOptions = contracts_1.IBaasicAppOptions;\r\nexports.IBaasicOptions = contracts_1.IBaasicOptions;\r\nexports.IToken = contracts_1.IToken;\r\nexports.TokenTypes = contracts_1.TokenTypes;\r\nexports.IUser = contracts_1.IUser;\r\nexports.IUserHandler = contracts_1.IUserHandler;\r\nexports.IDefaultStorageConfig = contracts_1.IDefaultStorageConfig;\r\n__export(__webpack_require__(2));\r\n\n\n/***/ }),\n/* 38 */\n/***/ (function(module, exports, __webpack_require__) {\n\n\"use strict\";\n\nvar metadata_1 = __webpack_require__(12);\nvar decorator_utils_1 = __webpack_require__(14);\nvar METADATA_KEY = __webpack_require__(9);\nfunction inject(serviceIdentifier) {\n    return function (target, targetKey, index) {\n        var metadata = new metadata_1.Metadata(METADATA_KEY.INJECT_TAG, serviceIdentifier);\n        if (typeof index === \"number\") {\n            decorator_utils_1.tagParameter(target, targetKey, index, metadata);\n        }\n        else {\n            decorator_utils_1.tagProperty(target, targetKey, metadata);\n        }\n    };\n}\nexports.inject = inject;\n\n\n/***/ }),\n/* 39 */\n/***/ (function(module, exports, __webpack_require__) {\n\n\"use strict\";\n\nvar METADATA_KEY = __webpack_require__(9);\nvar ERRORS_MSGS = __webpack_require__(13);\nfunction injectable() {\n    return function (target) {\n        if (Reflect.hasOwnMetadata(METADATA_KEY.PARAM_TYPES, target) === true) {\n            throw new Error(ERRORS_MSGS.DUPLICATED_INJECTABLE_DECORATOR);\n        }\n        var types = Reflect.getMetadata(METADATA_KEY.DESIGN_PARAM_TYPES, target) || [];\n        Reflect.defineMetadata(METADATA_KEY.PARAM_TYPES, types, target);\n        return target;\n    };\n}\nexports.injectable = injectable;\n\n\n/***/ }),\n/* 40 */\n/***/ (function(module, exports, __webpack_require__) {\n\n\"use strict\";\n\nvar metadata_1 = __webpack_require__(12);\nvar decorator_utils_1 = __webpack_require__(14);\nvar METADATA_KEY = __webpack_require__(9);\nfunction multiInject(serviceIdentifier) {\n    return function (target, targetKey, index) {\n        var metadata = new metadata_1.Metadata(METADATA_KEY.MULTI_INJECT_TAG, serviceIdentifier);\n        if (typeof index === \"number\") {\n            decorator_utils_1.tagParameter(target, targetKey, index, metadata);\n        }\n        else {\n            decorator_utils_1.tagProperty(target, targetKey, metadata);\n        }\n    };\n}\nexports.multiInject = multiInject;\n\n\n/***/ }),\n/* 41 */\n/***/ (function(module, exports, __webpack_require__) {\n\n\"use strict\";\n\nvar metadata_1 = __webpack_require__(12);\nvar decorator_utils_1 = __webpack_require__(14);\nvar METADATA_KEY = __webpack_require__(9);\nfunction named(name) {\n    return function (target, targetKey, index) {\n        var metadata = new metadata_1.Metadata(METADATA_KEY.NAMED_TAG, name);\n        if (typeof index === \"number\") {\n            decorator_utils_1.tagParameter(target, targetKey, index, metadata);\n        }\n        else {\n            decorator_utils_1.tagProperty(target, targetKey, metadata);\n        }\n    };\n}\nexports.named = named;\n\n\n/***/ }),\n/* 42 */\n/***/ (function(module, exports, __webpack_require__) {\n\n\"use strict\";\n\nvar metadata_1 = __webpack_require__(12);\nvar decorator_utils_1 = __webpack_require__(14);\nvar METADATA_KEY = __webpack_require__(9);\nfunction optional() {\n    return function (target, targetKey, index) {\n        var metadata = new metadata_1.Metadata(METADATA_KEY.OPTIONAL_TAG, true);\n        if (typeof index === \"number\") {\n            decorator_utils_1.tagParameter(target, targetKey, index, metadata);\n        }\n        else {\n            decorator_utils_1.tagProperty(target, targetKey, metadata);\n        }\n    };\n}\nexports.optional = optional;\n\n\n/***/ }),\n/* 43 */\n/***/ (function(module, exports, __webpack_require__) {\n\n\"use strict\";\n\nvar metadata_1 = __webpack_require__(12);\nvar decorator_utils_1 = __webpack_require__(14);\nfunction tagged(metadataKey, metadataValue) {\n    return function (target, targetKey, index) {\n        var metadata = new metadata_1.Metadata(metadataKey, metadataValue);\n        if (typeof index === \"number\") {\n            decorator_utils_1.tagParameter(target, targetKey, index, metadata);\n        }\n        else {\n            decorator_utils_1.tagProperty(target, targetKey, metadata);\n        }\n    };\n}\nexports.tagged = tagged;\n\n\n/***/ }),\n/* 44 */\n/***/ (function(module, exports, __webpack_require__) {\n\n\"use strict\";\n\nvar metadata_1 = __webpack_require__(12);\nvar decorator_utils_1 = __webpack_require__(14);\nvar METADATA_KEY = __webpack_require__(9);\nfunction targetName(name) {\n    return function (target, targetKey, index) {\n        var metadata = new metadata_1.Metadata(METADATA_KEY.NAME_TAG, name);\n        decorator_utils_1.tagParameter(target, targetKey, index, metadata);\n    };\n}\nexports.targetName = targetName;\n\n\n/***/ }),\n/* 45 */\n/***/ (function(module, exports, __webpack_require__) {\n\n\"use strict\";\n\nvar metadata_1 = __webpack_require__(12);\nvar decorator_utils_1 = __webpack_require__(14);\nvar METADATA_KEY = __webpack_require__(9);\nfunction unmanaged() {\n    return function (target, targetKey, index) {\n        var metadata = new metadata_1.Metadata(METADATA_KEY.UNMANAGED_TAG, true);\n        decorator_utils_1.tagParameter(target, targetKey, index, metadata);\n    };\n}\nexports.unmanaged = unmanaged;\n\n\n/***/ }),\n/* 46 */\n/***/ (function(module, exports, __webpack_require__) {\n\n\"use strict\";\n\nvar guid_1 = __webpack_require__(17);\nvar literal_types_1 = __webpack_require__(15);\nvar Binding = (function () {\n    function Binding(serviceIdentifier, defaultScope) {\n        this.guid = guid_1.guid();\n        this.activated = false;\n        this.serviceIdentifier = serviceIdentifier;\n        this.scope = defaultScope;\n        this.type = literal_types_1.BindingTypeEnum.Invalid;\n        this.constraint = function (request) { return true; };\n        this.implementationType = null;\n        this.cache = null;\n        this.factory = null;\n        this.provider = null;\n        this.onActivation = null;\n        this.dynamicValue = null;\n    }\n    Binding.prototype.clone = function () {\n        var clone = new Binding(this.serviceIdentifier, this.scope);\n        clone.activated = false;\n        clone.implementationType = this.implementationType;\n        clone.dynamicValue = this.dynamicValue;\n        clone.scope = this.scope;\n        clone.type = this.type;\n        clone.factory = this.factory;\n        clone.provider = this.provider;\n        clone.constraint = this.constraint;\n        clone.onActivation = this.onActivation;\n        clone.cache = this.cache;\n        return clone;\n    };\n    return Binding;\n}());\nexports.Binding = Binding;\n\n\n/***/ }),\n/* 47 */\n/***/ (function(module, exports, __webpack_require__) {\n\n\"use strict\";\n\nvar BindingCount = {\n    MultipleBindingsAvailable: 2,\n    NoBindingsAvailable: 0,\n    OnlyOneBindingAvailable: 1\n};\nexports.BindingCount = BindingCount;\n\n\n/***/ }),\n/* 48 */\n/***/ (function(module, exports, __webpack_require__) {\n\n\"use strict\";\n\nvar binding_1 = __webpack_require__(46);\nvar lookup_1 = __webpack_require__(51);\nvar planner_1 = __webpack_require__(54);\nvar resolver_1 = __webpack_require__(59);\nvar binding_to_syntax_1 = __webpack_require__(62);\nvar serialization_1 = __webpack_require__(20);\nvar container_snapshot_1 = __webpack_require__(50);\nvar guid_1 = __webpack_require__(17);\nvar ERROR_MSGS = __webpack_require__(13);\nvar METADATA_KEY = __webpack_require__(9);\nvar literal_types_1 = __webpack_require__(15);\nvar Container = (function () {\n    function Container(containerOptions) {\n        if (containerOptions !== undefined) {\n            if (typeof containerOptions !== \"object\") {\n                throw new Error(\"\" + ERROR_MSGS.CONTAINER_OPTIONS_MUST_BE_AN_OBJECT);\n            }\n            else if (containerOptions.defaultScope === undefined) {\n                throw new Error(\"\" + ERROR_MSGS.CONTAINER_OPTIONS_INVALID_DEFAULT_SCOPE);\n            }\n            else if (containerOptions.defaultScope !== literal_types_1.BindingScopeEnum.Singleton &&\n                containerOptions.defaultScope !== literal_types_1.BindingScopeEnum.Transient) {\n                throw new Error(\"\" + ERROR_MSGS.CONTAINER_OPTIONS_INVALID_DEFAULT_SCOPE);\n            }\n            this.options = {\n                defaultScope: containerOptions.defaultScope\n            };\n        }\n        else {\n            this.options = {\n                defaultScope: literal_types_1.BindingScopeEnum.Transient\n            };\n        }\n        this.guid = guid_1.guid();\n        this._bindingDictionary = new lookup_1.Lookup();\n        this._snapshots = [];\n        this._middleware = null;\n        this.parent = null;\n    }\n    Container.merge = function (container1, container2) {\n        var container = new Container();\n        var bindingDictionary = planner_1.getBindingDictionary(container);\n        var bindingDictionary1 = planner_1.getBindingDictionary(container1);\n        var bindingDictionary2 = planner_1.getBindingDictionary(container2);\n        function copyDictionary(origing, destination) {\n            origing.traverse(function (key, value) {\n                value.forEach(function (binding) {\n                    destination.add(binding.serviceIdentifier, binding.clone());\n                });\n            });\n        }\n        copyDictionary(bindingDictionary1, bindingDictionary);\n        copyDictionary(bindingDictionary2, bindingDictionary);\n        return container;\n    };\n    Container.prototype.load = function () {\n        var _this = this;\n        var modules = [];\n        for (var _i = 0; _i < arguments.length; _i++) {\n            modules[_i] = arguments[_i];\n        }\n        var setModuleId = function (bindingToSyntax, moduleId) {\n            bindingToSyntax._binding.moduleId = moduleId;\n        };\n        var getBindFunction = function (moduleId) {\n            return function (serviceIdentifier) {\n                var _bind = _this.bind.bind(_this);\n                var bindingToSyntax = _bind(serviceIdentifier);\n                setModuleId(bindingToSyntax, moduleId);\n                return bindingToSyntax;\n            };\n        };\n        var getUnbindFunction = function (moduleId) {\n            return function (serviceIdentifier) {\n                var _unbind = _this.unbind.bind(_this);\n                _unbind(serviceIdentifier);\n            };\n        };\n        var getIsboundFunction = function (moduleId) {\n            return function (serviceIdentifier) {\n                var _isBound = _this.isBound.bind(_this);\n                return _isBound(serviceIdentifier);\n            };\n        };\n        var getRebindFunction = function (moduleId) {\n            return function (serviceIdentifier) {\n                var _rebind = _this.rebind.bind(_this);\n                var bindingToSyntax = _rebind(serviceIdentifier);\n                setModuleId(bindingToSyntax, moduleId);\n                return bindingToSyntax;\n            };\n        };\n        modules.forEach(function (module) {\n            var bindFunction = getBindFunction(module.guid);\n            var unbindFunction = getUnbindFunction(module.guid);\n            var isboundFunction = getIsboundFunction(module.guid);\n            var rebindFunction = getRebindFunction(module.guid);\n            module.registry(bindFunction, unbindFunction, isboundFunction, rebindFunction);\n        });\n    };\n    Container.prototype.unload = function () {\n        var _this = this;\n        var modules = [];\n        for (var _i = 0; _i < arguments.length; _i++) {\n            modules[_i] = arguments[_i];\n        }\n        var conditionFactory = function (expected) { return function (item) {\n            return item.moduleId === expected;\n        }; };\n        modules.forEach(function (module) {\n            var condition = conditionFactory(module.guid);\n            _this._bindingDictionary.removeByCondition(condition);\n        });\n    };\n    Container.prototype.bind = function (serviceIdentifier) {\n        var defaultScope = literal_types_1.BindingScopeEnum.Transient;\n        defaultScope = (this.options.defaultScope === defaultScope) ? defaultScope : literal_types_1.BindingScopeEnum.Singleton;\n        var binding = new binding_1.Binding(serviceIdentifier, defaultScope);\n        this._bindingDictionary.add(serviceIdentifier, binding);\n        return new binding_to_syntax_1.BindingToSyntax(binding);\n    };\n    Container.prototype.rebind = function (serviceIdentifier) {\n        this.unbind(serviceIdentifier);\n        return this.bind(serviceIdentifier);\n    };\n    Container.prototype.unbind = function (serviceIdentifier) {\n        try {\n            this._bindingDictionary.remove(serviceIdentifier);\n        }\n        catch (e) {\n            throw new Error(ERROR_MSGS.CANNOT_UNBIND + \" \" + serialization_1.getServiceIdentifierAsString(serviceIdentifier));\n        }\n    };\n    Container.prototype.unbindAll = function () {\n        this._bindingDictionary = new lookup_1.Lookup();\n    };\n    Container.prototype.isBound = function (serviceIdentifier) {\n        return this._bindingDictionary.hasKey(serviceIdentifier);\n    };\n    Container.prototype.isBoundNamed = function (serviceIdentifier, named) {\n        return this.isBoundTagged(serviceIdentifier, METADATA_KEY.NAMED_TAG, named);\n    };\n    Container.prototype.isBoundTagged = function (serviceIdentifier, key, value) {\n        var bindings = this._bindingDictionary.get(serviceIdentifier);\n        var request = planner_1.createMockRequest(this, serviceIdentifier, key, value);\n        return bindings.some(function (b) { return b.constraint(request); });\n    };\n    Container.prototype.snapshot = function () {\n        this._snapshots.push(container_snapshot_1.ContainerSnapshot.of(this._bindingDictionary.clone(), this._middleware));\n    };\n    Container.prototype.restore = function () {\n        var snapshot = this._snapshots.pop();\n        if (snapshot === undefined) {\n            throw new Error(ERROR_MSGS.NO_MORE_SNAPSHOTS_AVAILABLE);\n        }\n        this._bindingDictionary = snapshot.bindings;\n        this._middleware = snapshot.middleware;\n    };\n    Container.prototype.createChild = function () {\n        var child = new Container();\n        child.parent = this;\n        return child;\n    };\n    Container.prototype.applyMiddleware = function () {\n        var middlewares = [];\n        for (var _i = 0; _i < arguments.length; _i++) {\n            middlewares[_i] = arguments[_i];\n        }\n        var initial = (this._middleware) ? this._middleware : this._planAndResolve();\n        this._middleware = middlewares.reduce(function (prev, curr) {\n            return curr(prev);\n        }, initial);\n    };\n    Container.prototype.get = function (serviceIdentifier) {\n        return this._get(false, false, literal_types_1.TargetTypeEnum.Variable, serviceIdentifier);\n    };\n    Container.prototype.getTagged = function (serviceIdentifier, key, value) {\n        return this._get(false, false, literal_types_1.TargetTypeEnum.Variable, serviceIdentifier, key, value);\n    };\n    Container.prototype.getNamed = function (serviceIdentifier, named) {\n        return this.getTagged(serviceIdentifier, METADATA_KEY.NAMED_TAG, named);\n    };\n    Container.prototype.getAll = function (serviceIdentifier) {\n        return this._get(true, true, literal_types_1.TargetTypeEnum.Variable, serviceIdentifier);\n    };\n    Container.prototype.getAllTagged = function (serviceIdentifier, key, value) {\n        return this._get(false, true, literal_types_1.TargetTypeEnum.Variable, serviceIdentifier, key, value);\n    };\n    Container.prototype.getAllNamed = function (serviceIdentifier, named) {\n        return this.getAllTagged(serviceIdentifier, METADATA_KEY.NAMED_TAG, named);\n    };\n    Container.prototype._get = function (avoidConstraints, isMultiInject, targetType, serviceIdentifier, key, value) {\n        var result = null;\n        var defaultArgs = {\n            avoidConstraints: avoidConstraints,\n            contextInterceptor: function (context) { return context; },\n            isMultiInject: isMultiInject,\n            key: key,\n            serviceIdentifier: serviceIdentifier,\n            targetType: targetType,\n            value: value\n        };\n        if (this._middleware) {\n            result = this._middleware(defaultArgs);\n            if (result === undefined || result === null) {\n                throw new Error(ERROR_MSGS.INVALID_MIDDLEWARE_RETURN);\n            }\n        }\n        else {\n            result = this._planAndResolve()(defaultArgs);\n        }\n        return result;\n    };\n    Container.prototype._planAndResolve = function () {\n        var _this = this;\n        return function (args) {\n            var context = planner_1.plan(_this, args.isMultiInject, args.targetType, args.serviceIdentifier, args.key, args.value, args.avoidConstraints);\n            context = args.contextInterceptor(context);\n            var result = resolver_1.resolve(context);\n            return result;\n        };\n    };\n    return Container;\n}());\nexports.Container = Container;\n\n\n/***/ }),\n/* 49 */\n/***/ (function(module, exports, __webpack_require__) {\n\n\"use strict\";\n\nvar guid_1 = __webpack_require__(17);\nvar ContainerModule = (function () {\n    function ContainerModule(registry) {\n        this.guid = guid_1.guid();\n        this.registry = registry;\n    }\n    return ContainerModule;\n}());\nexports.ContainerModule = ContainerModule;\n\n\n/***/ }),\n/* 50 */\n/***/ (function(module, exports, __webpack_require__) {\n\n\"use strict\";\n\nvar ContainerSnapshot = (function () {\n    function ContainerSnapshot() {\n    }\n    ContainerSnapshot.of = function (bindings, middleware) {\n        var snapshot = new ContainerSnapshot();\n        snapshot.bindings = bindings;\n        snapshot.middleware = middleware;\n        return snapshot;\n    };\n    return ContainerSnapshot;\n}());\nexports.ContainerSnapshot = ContainerSnapshot;\n\n\n/***/ }),\n/* 51 */\n/***/ (function(module, exports, __webpack_require__) {\n\n\"use strict\";\n\nvar ERROR_MSGS = __webpack_require__(13);\nvar Lookup = (function () {\n    function Lookup() {\n        this._map = new Map();\n    }\n    Lookup.prototype.getMap = function () {\n        return this._map;\n    };\n    Lookup.prototype.add = function (serviceIdentifier, value) {\n        if (serviceIdentifier === null || serviceIdentifier === undefined) {\n            throw new Error(ERROR_MSGS.NULL_ARGUMENT);\n        }\n        ;\n        if (value === null || value === undefined) {\n            throw new Error(ERROR_MSGS.NULL_ARGUMENT);\n        }\n        ;\n        var entry = this._map.get(serviceIdentifier);\n        if (entry !== undefined) {\n            entry.push(value);\n            this._map.set(serviceIdentifier, entry);\n        }\n        else {\n            this._map.set(serviceIdentifier, [value]);\n        }\n    };\n    Lookup.prototype.get = function (serviceIdentifier) {\n        if (serviceIdentifier === null || serviceIdentifier === undefined) {\n            throw new Error(ERROR_MSGS.NULL_ARGUMENT);\n        }\n        var entry = this._map.get(serviceIdentifier);\n        if (entry !== undefined) {\n            return entry;\n        }\n        else {\n            throw new Error(ERROR_MSGS.KEY_NOT_FOUND);\n        }\n    };\n    Lookup.prototype.remove = function (serviceIdentifier) {\n        if (serviceIdentifier === null || serviceIdentifier === undefined) {\n            throw new Error(ERROR_MSGS.NULL_ARGUMENT);\n        }\n        if (!this._map.delete(serviceIdentifier)) {\n            throw new Error(ERROR_MSGS.KEY_NOT_FOUND);\n        }\n    };\n    Lookup.prototype.removeByCondition = function (condition) {\n        var _this = this;\n        this._map.forEach(function (entries, key) {\n            var updatedEntries = entries.filter(function (entry) { return !condition(entry); });\n            if (updatedEntries.length > 0) {\n                _this._map.set(key, updatedEntries);\n            }\n            else {\n                _this._map.delete(key);\n            }\n        });\n    };\n    Lookup.prototype.hasKey = function (serviceIdentifier) {\n        if (serviceIdentifier === null || serviceIdentifier === undefined) {\n            throw new Error(ERROR_MSGS.NULL_ARGUMENT);\n        }\n        return this._map.has(serviceIdentifier);\n    };\n    Lookup.prototype.clone = function () {\n        var copy = new Lookup();\n        this._map.forEach(function (value, key) {\n            value.forEach(function (b) { return copy.add(key, b.clone()); });\n        });\n        return copy;\n    };\n    Lookup.prototype.traverse = function (func) {\n        this._map.forEach(function (value, key) {\n            func(key, value);\n        });\n    };\n    ;\n    return Lookup;\n}());\nexports.Lookup = Lookup;\n\n\n/***/ }),\n/* 52 */\n/***/ (function(module, exports, __webpack_require__) {\n\n\"use strict\";\n\nvar guid_1 = __webpack_require__(17);\nvar Context = (function () {\n    function Context(container) {\n        this.guid = guid_1.guid();\n        this.container = container;\n    }\n    Context.prototype.addPlan = function (plan) {\n        this.plan = plan;\n    };\n    return Context;\n}());\nexports.Context = Context;\n\n\n/***/ }),\n/* 53 */\n/***/ (function(module, exports, __webpack_require__) {\n\n\"use strict\";\n\nvar Plan = (function () {\n    function Plan(parentContext, rootRequest) {\n        this.parentContext = parentContext;\n        this.rootRequest = rootRequest;\n    }\n    return Plan;\n}());\nexports.Plan = Plan;\n\n\n/***/ }),\n/* 54 */\n/***/ (function(module, exports, __webpack_require__) {\n\n\"use strict\";\n\nvar plan_1 = __webpack_require__(53);\nvar context_1 = __webpack_require__(52);\nvar request_1 = __webpack_require__(57);\nvar target_1 = __webpack_require__(27);\nvar binding_count_1 = __webpack_require__(47);\nvar reflection_utils_1 = __webpack_require__(56);\nvar metadata_1 = __webpack_require__(12);\nvar ERROR_MSGS = __webpack_require__(13);\nvar METADATA_KEY = __webpack_require__(9);\nvar literal_types_1 = __webpack_require__(15);\nvar serialization_1 = __webpack_require__(20);\nfunction getBindingDictionary(cntnr) {\n    return cntnr._bindingDictionary;\n}\nexports.getBindingDictionary = getBindingDictionary;\nfunction _createTarget(isMultiInject, targetType, serviceIdentifier, name, key, value) {\n    var metadataKey = isMultiInject ? METADATA_KEY.MULTI_INJECT_TAG : METADATA_KEY.INJECT_TAG;\n    var injectMetadata = new metadata_1.Metadata(metadataKey, serviceIdentifier);\n    var target = new target_1.Target(targetType, name, serviceIdentifier, injectMetadata);\n    if (key !== undefined) {\n        var tagMetadata = new metadata_1.Metadata(key, value);\n        target.metadata.push(tagMetadata);\n    }\n    return target;\n}\nfunction _getActiveBindings(avoidConstraints, context, parentRequest, target) {\n    var bindings = getBindings(context.container, target.serviceIdentifier);\n    var activeBindings = [];\n    if (avoidConstraints === false) {\n        activeBindings = bindings.filter(function (binding) {\n            var request = new request_1.Request(binding.serviceIdentifier, context, parentRequest, binding, target);\n            return binding.constraint(request);\n        });\n    }\n    else {\n        activeBindings = bindings;\n    }\n    _validateActiveBindingCount(target.serviceIdentifier, activeBindings, target, context.container);\n    return activeBindings;\n}\nfunction _validateActiveBindingCount(serviceIdentifier, bindings, target, container) {\n    switch (bindings.length) {\n        case binding_count_1.BindingCount.NoBindingsAvailable:\n            if (target.isOptional() === true) {\n                return bindings;\n            }\n            else {\n                var serviceIdentifierString = serialization_1.getServiceIdentifierAsString(serviceIdentifier);\n                var msg = ERROR_MSGS.NOT_REGISTERED;\n                msg += serialization_1.listMetadataForTarget(serviceIdentifierString, target);\n                msg += serialization_1.listRegisteredBindingsForServiceIdentifier(container, serviceIdentifierString, getBindings);\n                throw new Error(msg);\n            }\n        case binding_count_1.BindingCount.OnlyOneBindingAvailable:\n            if (target.isArray() === false) {\n                return bindings;\n            }\n        case binding_count_1.BindingCount.MultipleBindingsAvailable:\n        default:\n            if (target.isArray() === false) {\n                var serviceIdentifierString = serialization_1.getServiceIdentifierAsString(serviceIdentifier), msg = ERROR_MSGS.AMBIGUOUS_MATCH + \" \" + serviceIdentifierString;\n                msg += serialization_1.listRegisteredBindingsForServiceIdentifier(container, serviceIdentifierString, getBindings);\n                throw new Error(msg);\n            }\n            else {\n                return bindings;\n            }\n    }\n}\nfunction _createSubRequests(avoidConstraints, serviceIdentifier, context, parentRequest, target) {\n    try {\n        var activeBindings = void 0;\n        var childRequest_1;\n        if (parentRequest === null) {\n            activeBindings = _getActiveBindings(avoidConstraints, context, null, target);\n            childRequest_1 = new request_1.Request(serviceIdentifier, context, null, activeBindings, target);\n            var plan_2 = new plan_1.Plan(context, childRequest_1);\n            context.addPlan(plan_2);\n        }\n        else {\n            activeBindings = _getActiveBindings(avoidConstraints, context, parentRequest, target);\n            childRequest_1 = parentRequest.addChildRequest(target.serviceIdentifier, activeBindings, target);\n        }\n        activeBindings.forEach(function (binding) {\n            var subChildRequest = null;\n            if (target.isArray()) {\n                subChildRequest = childRequest_1.addChildRequest(binding.serviceIdentifier, binding, target);\n            }\n            else {\n                subChildRequest = childRequest_1;\n            }\n            if (binding.type === literal_types_1.BindingTypeEnum.Instance && binding.implementationType !== null) {\n                var dependencies = reflection_utils_1.getDependencies(binding.implementationType);\n                dependencies.forEach(function (dependency) {\n                    _createSubRequests(false, dependency.serviceIdentifier, context, subChildRequest, dependency);\n                });\n            }\n        });\n    }\n    catch (error) {\n        if (error instanceof RangeError && parentRequest !== null) {\n            serialization_1.circularDependencyToException(parentRequest.parentContext.plan.rootRequest);\n        }\n        else {\n            throw new Error(error.message);\n        }\n    }\n}\nfunction getBindings(container, serviceIdentifier) {\n    var bindings = [];\n    var bindingDictionary = getBindingDictionary(container);\n    if (bindingDictionary.hasKey(serviceIdentifier)) {\n        bindings = bindingDictionary.get(serviceIdentifier);\n    }\n    else if (container.parent !== null) {\n        bindings = getBindings(container.parent, serviceIdentifier);\n    }\n    return bindings;\n}\nfunction plan(container, isMultiInject, targetType, serviceIdentifier, key, value, avoidConstraints) {\n    if (avoidConstraints === void 0) { avoidConstraints = false; }\n    var context = new context_1.Context(container);\n    var target = _createTarget(isMultiInject, targetType, serviceIdentifier, \"\", key, value);\n    _createSubRequests(avoidConstraints, serviceIdentifier, context, null, target);\n    return context;\n}\nexports.plan = plan;\nfunction createMockRequest(container, serviceIdentifier, key, value) {\n    var target = new target_1.Target(literal_types_1.TargetTypeEnum.Variable, \"\", serviceIdentifier, new metadata_1.Metadata(key, value));\n    var context = new context_1.Context(container);\n    var request = new request_1.Request(serviceIdentifier, context, null, [], target);\n    return request;\n}\nexports.createMockRequest = createMockRequest;\n\n\n/***/ }),\n/* 55 */\n/***/ (function(module, exports, __webpack_require__) {\n\n\"use strict\";\n\nvar QueryableString = (function () {\n    function QueryableString(str) {\n        this.str = str;\n    }\n    QueryableString.prototype.startsWith = function (searchString) {\n        return this.str.indexOf(searchString) === 0;\n    };\n    QueryableString.prototype.endsWith = function (searchString) {\n        var reverseString = \"\";\n        var reverseSearchString = searchString.split(\"\").reverse().join(\"\");\n        reverseString = this.str.split(\"\").reverse().join(\"\");\n        return this.startsWith.call({ str: reverseString }, reverseSearchString);\n    };\n    QueryableString.prototype.contains = function (searchString) {\n        return (this.str.indexOf(searchString) !== -1);\n    };\n    QueryableString.prototype.equals = function (compareString) {\n        return this.str === compareString;\n    };\n    QueryableString.prototype.value = function () {\n        return this.str;\n    };\n    return QueryableString;\n}());\nexports.QueryableString = QueryableString;\n\n\n/***/ }),\n/* 56 */\n/***/ (function(module, exports, __webpack_require__) {\n\n\"use strict\";\n\nvar serialization_1 = __webpack_require__(20);\nvar target_1 = __webpack_require__(27);\nvar ERROR_MSGS = __webpack_require__(13);\nvar METADATA_KEY = __webpack_require__(9);\nvar literal_types_1 = __webpack_require__(15);\nfunction getDependencies(func) {\n    var constructorName = serialization_1.getFunctionName(func);\n    var targets = getTargets(func, false);\n    var baseClassDepencencyCount = getBaseClassDepencencyCount(func);\n    if (targets.length < baseClassDepencencyCount) {\n        var error = ERROR_MSGS.ARGUMENTS_LENGTH_MISMATCH_1 +\n            constructorName + ERROR_MSGS.ARGUMENTS_LENGTH_MISMATCH_2;\n        throw new Error(error);\n    }\n    return targets;\n}\nexports.getDependencies = getDependencies;\nfunction getTargets(func, isBaseClass) {\n    var constructorName = serialization_1.getFunctionName(func);\n    var serviceIdentifiers = Reflect.getMetadata(METADATA_KEY.PARAM_TYPES, func);\n    if (serviceIdentifiers === undefined) {\n        var msg = ERROR_MSGS.MISSING_INJECTABLE_ANNOTATION + \" \" + constructorName + \".\";\n        throw new Error(msg);\n    }\n    var constructorArgsMetadata = Reflect.getMetadata(METADATA_KEY.TAGGED, func) || [];\n    var targets = (getConstructorArgsAsTargets(isBaseClass, constructorName, serviceIdentifiers, constructorArgsMetadata, func.length)).concat((getClassPropsAsTargets(func)));\n    return targets;\n}\nfunction getConstructorArgsAsTargets(isBaseClass, constructorName, serviceIdentifiers, constructorArgsMetadata, constructorLength) {\n    var targets = [];\n    for (var i = 0; i < constructorLength; i++) {\n        var targetMetadata = constructorArgsMetadata[i.toString()] || [];\n        var metadata = formatTargetMetadata(targetMetadata);\n        var serviceIndentifier = serviceIdentifiers[i];\n        var hasInjectAnnotations = (metadata.inject || metadata.multiInject);\n        serviceIndentifier = (hasInjectAnnotations) ? (hasInjectAnnotations) : serviceIndentifier;\n        var isObject = serviceIndentifier === Object;\n        var isFunction = serviceIndentifier === Function;\n        var isUndefined = serviceIndentifier === undefined;\n        var isUnknownType = (isObject || isFunction || isUndefined);\n        if (isBaseClass === false && isUnknownType) {\n            var msg = ERROR_MSGS.MISSING_INJECT_ANNOTATION + \" argument \" + i + \" in class \" + constructorName + \".\";\n            throw new Error(msg);\n        }\n        var target = new target_1.Target(literal_types_1.TargetTypeEnum.ConstructorArgument, metadata.targetName, serviceIndentifier);\n        target.metadata = targetMetadata;\n        targets.push(target);\n    }\n    return targets;\n}\nfunction getClassPropsAsTargets(func) {\n    var classPropsMetadata = Reflect.getMetadata(METADATA_KEY.TAGGED_PROP, func) || [];\n    var targets = [];\n    var keys = Object.keys(classPropsMetadata);\n    for (var i = 0; i < keys.length; i++) {\n        var key = keys[i];\n        var targetMetadata = classPropsMetadata[key];\n        var metadata = formatTargetMetadata(classPropsMetadata[key]);\n        var targetName = metadata.targetName || key;\n        var serviceIndentifier = (metadata.inject || metadata.multiInject);\n        var target = new target_1.Target(literal_types_1.TargetTypeEnum.ClassProperty, targetName, serviceIndentifier);\n        target.metadata = targetMetadata;\n        targets.push(target);\n    }\n    var baseConstructor = Object.getPrototypeOf(func.prototype).constructor;\n    if (baseConstructor !== Object) {\n        var baseTargets = getClassPropsAsTargets(baseConstructor);\n        targets = targets.concat(baseTargets);\n    }\n    return targets;\n}\nfunction getBaseClassDepencencyCount(func) {\n    var baseConstructor = Object.getPrototypeOf(func.prototype).constructor;\n    if (baseConstructor !== Object) {\n        var targets = getTargets(baseConstructor, true);\n        var metadata = targets.map(function (t) {\n            return t.metadata.filter(function (m) {\n                return m.key === METADATA_KEY.UNMANAGED_TAG;\n            });\n        });\n        var unmanagedCount = [].concat.apply([], metadata).length;\n        var dependencyCount = targets.length - unmanagedCount;\n        if (dependencyCount > 0) {\n            return dependencyCount;\n        }\n        else {\n            return getBaseClassDepencencyCount(baseConstructor);\n        }\n    }\n    else {\n        return 0;\n    }\n}\nfunction formatTargetMetadata(targetMetadata) {\n    var targetMetadataMap = {};\n    targetMetadata.forEach(function (m) {\n        targetMetadataMap[m.key.toString()] = m.value;\n    });\n    return {\n        inject: targetMetadataMap[METADATA_KEY.INJECT_TAG],\n        multiInject: targetMetadataMap[METADATA_KEY.MULTI_INJECT_TAG],\n        targetName: targetMetadataMap[METADATA_KEY.NAME_TAG],\n        unmanaged: targetMetadataMap[METADATA_KEY.UNMANAGED_TAG]\n    };\n}\n\n\n/***/ }),\n/* 57 */\n/***/ (function(module, exports, __webpack_require__) {\n\n\"use strict\";\n\nvar guid_1 = __webpack_require__(17);\nvar Request = (function () {\n    function Request(serviceIdentifier, parentContext, parentRequest, bindings, target) {\n        this.guid = guid_1.guid();\n        this.serviceIdentifier = serviceIdentifier;\n        this.parentContext = parentContext;\n        this.parentRequest = parentRequest;\n        this.target = target;\n        this.childRequests = [];\n        this.bindings = (Array.isArray(bindings) ? bindings : [bindings]);\n    }\n    Request.prototype.addChildRequest = function (serviceIdentifier, bindings, target) {\n        var child = new Request(serviceIdentifier, this.parentContext, this, bindings, target);\n        this.childRequests.push(child);\n        return child;\n    };\n    return Request;\n}());\nexports.Request = Request;\n\n\n/***/ }),\n/* 58 */\n/***/ (function(module, exports, __webpack_require__) {\n\n\"use strict\";\n\nvar literal_types_1 = __webpack_require__(15);\nfunction _injectProperties(instance, childRequests, resolveRequest) {\n    var propertyInjectionsRequests = childRequests.filter(function (childRequest) {\n        return (childRequest.target !== null && childRequest.target.type === literal_types_1.TargetTypeEnum.ClassProperty);\n    });\n    var propertyInjections = propertyInjectionsRequests.map(function (childRequest) {\n        return resolveRequest(childRequest);\n    });\n    propertyInjectionsRequests.forEach(function (r, index) {\n        var propertyName = \"\";\n        propertyName = r.target.name.value();\n        var injection = propertyInjections[index];\n        instance[propertyName] = injection;\n    });\n    return instance;\n}\nfunction _createInstance(Func, injections) {\n    return new (Func.bind.apply(Func, [void 0].concat(injections)))();\n}\nfunction resolveInstance(constr, childRequests, resolveRequest) {\n    var result = null;\n    if (childRequests.length > 0) {\n        var constructorInjectionsRequests = childRequests.filter(function (childRequest) {\n            return (childRequest.target !== null && childRequest.target.type === literal_types_1.TargetTypeEnum.ConstructorArgument);\n        });\n        var constructorInjections = constructorInjectionsRequests.map(function (childRequest) {\n            return resolveRequest(childRequest);\n        });\n        result = _createInstance(constr, constructorInjections);\n        result = _injectProperties(result, childRequests, resolveRequest);\n    }\n    else {\n        result = new constr();\n    }\n    return result;\n}\nexports.resolveInstance = resolveInstance;\n\n\n/***/ }),\n/* 59 */\n/***/ (function(module, exports, __webpack_require__) {\n\n\"use strict\";\n\nvar literal_types_1 = __webpack_require__(15);\nvar serialization_1 = __webpack_require__(20);\nvar instantiation_1 = __webpack_require__(58);\nvar ERROR_MSGS = __webpack_require__(13);\nfunction _resolveRequest(request) {\n    var bindings = request.bindings;\n    var childRequests = request.childRequests;\n    var targetIsAnAray = request.target && request.target.isArray();\n    var targetParentIsNotAnArray = !request.parentRequest ||\n        !request.parentRequest.target ||\n        !request.target ||\n        !request.parentRequest.target.matchesArray(request.target.serviceIdentifier);\n    if (targetIsAnAray && targetParentIsNotAnArray) {\n        return childRequests.map(function (childRequest) {\n            return _resolveRequest(childRequest);\n        });\n    }\n    else {\n        var result = null;\n        if (request.target.isOptional() === true && bindings.length === 0) {\n            return undefined;\n        }\n        var binding = bindings[0];\n        var isSingleton = binding.scope === literal_types_1.BindingScopeEnum.Singleton;\n        if (isSingleton && binding.activated === true) {\n            return binding.cache;\n        }\n        if (binding.type === literal_types_1.BindingTypeEnum.ConstantValue) {\n            result = binding.cache;\n        }\n        else if (binding.type === literal_types_1.BindingTypeEnum.Function) {\n            result = binding.cache;\n        }\n        else if (binding.type === literal_types_1.BindingTypeEnum.Constructor) {\n            result = binding.implementationType;\n        }\n        else if (binding.type === literal_types_1.BindingTypeEnum.DynamicValue && binding.dynamicValue !== null) {\n            result = binding.dynamicValue(request.parentContext);\n        }\n        else if (binding.type === literal_types_1.BindingTypeEnum.Factory && binding.factory !== null) {\n            result = binding.factory(request.parentContext);\n        }\n        else if (binding.type === literal_types_1.BindingTypeEnum.Provider && binding.provider !== null) {\n            result = binding.provider(request.parentContext);\n        }\n        else if (binding.type === literal_types_1.BindingTypeEnum.Instance && binding.implementationType !== null) {\n            result = instantiation_1.resolveInstance(binding.implementationType, childRequests, _resolveRequest);\n        }\n        else {\n            var serviceIdentifier = serialization_1.getServiceIdentifierAsString(request.serviceIdentifier);\n            throw new Error(ERROR_MSGS.INVALID_BINDING_TYPE + \" \" + serviceIdentifier);\n        }\n        if (typeof binding.onActivation === \"function\") {\n            result = binding.onActivation(request.parentContext, result);\n        }\n        if (isSingleton) {\n            binding.cache = result;\n            binding.activated = true;\n        }\n        return result;\n    }\n}\nfunction resolve(context) {\n    return _resolveRequest(context.plan.rootRequest);\n}\nexports.resolve = resolve;\n\n\n/***/ }),\n/* 60 */\n/***/ (function(module, exports, __webpack_require__) {\n\n\"use strict\";\n\nvar literal_types_1 = __webpack_require__(15);\nvar binding_when_on_syntax_1 = __webpack_require__(28);\nvar BindingInSyntax = (function () {\n    function BindingInSyntax(binding) {\n        this._binding = binding;\n    }\n    BindingInSyntax.prototype.inSingletonScope = function () {\n        this._binding.scope = literal_types_1.BindingScopeEnum.Singleton;\n        return new binding_when_on_syntax_1.BindingWhenOnSyntax(this._binding);\n    };\n    BindingInSyntax.prototype.inTransientScope = function () {\n        this._binding.scope = literal_types_1.BindingScopeEnum.Transient;\n        return new binding_when_on_syntax_1.BindingWhenOnSyntax(this._binding);\n    };\n    return BindingInSyntax;\n}());\nexports.BindingInSyntax = BindingInSyntax;\n\n\n/***/ }),\n/* 61 */\n/***/ (function(module, exports, __webpack_require__) {\n\n\"use strict\";\n\nvar binding_in_syntax_1 = __webpack_require__(60);\nvar binding_when_syntax_1 = __webpack_require__(24);\nvar binding_on_syntax_1 = __webpack_require__(23);\nvar BindingInWhenOnSyntax = (function () {\n    function BindingInWhenOnSyntax(binding) {\n        this._binding = binding;\n        this._bindingWhenSyntax = new binding_when_syntax_1.BindingWhenSyntax(this._binding);\n        this._bindingOnSyntax = new binding_on_syntax_1.BindingOnSyntax(this._binding);\n        this._bindingInSyntax = new binding_in_syntax_1.BindingInSyntax(binding);\n    }\n    BindingInWhenOnSyntax.prototype.inSingletonScope = function () {\n        return this._bindingInSyntax.inSingletonScope();\n    };\n    BindingInWhenOnSyntax.prototype.inTransientScope = function () {\n        return this._bindingInSyntax.inTransientScope();\n    };\n    BindingInWhenOnSyntax.prototype.when = function (constraint) {\n        return this._bindingWhenSyntax.when(constraint);\n    };\n    BindingInWhenOnSyntax.prototype.whenTargetNamed = function (name) {\n        return this._bindingWhenSyntax.whenTargetNamed(name);\n    };\n    BindingInWhenOnSyntax.prototype.whenTargetIsDefault = function () {\n        return this._bindingWhenSyntax.whenTargetIsDefault();\n    };\n    BindingInWhenOnSyntax.prototype.whenTargetTagged = function (tag, value) {\n        return this._bindingWhenSyntax.whenTargetTagged(tag, value);\n    };\n    BindingInWhenOnSyntax.prototype.whenInjectedInto = function (parent) {\n        return this._bindingWhenSyntax.whenInjectedInto(parent);\n    };\n    BindingInWhenOnSyntax.prototype.whenParentNamed = function (name) {\n        return this._bindingWhenSyntax.whenParentNamed(name);\n    };\n    BindingInWhenOnSyntax.prototype.whenParentTagged = function (tag, value) {\n        return this._bindingWhenSyntax.whenParentTagged(tag, value);\n    };\n    BindingInWhenOnSyntax.prototype.whenAnyAncestorIs = function (ancestor) {\n        return this._bindingWhenSyntax.whenAnyAncestorIs(ancestor);\n    };\n    BindingInWhenOnSyntax.prototype.whenNoAncestorIs = function (ancestor) {\n        return this._bindingWhenSyntax.whenNoAncestorIs(ancestor);\n    };\n    BindingInWhenOnSyntax.prototype.whenAnyAncestorNamed = function (name) {\n        return this._bindingWhenSyntax.whenAnyAncestorNamed(name);\n    };\n    BindingInWhenOnSyntax.prototype.whenAnyAncestorTagged = function (tag, value) {\n        return this._bindingWhenSyntax.whenAnyAncestorTagged(tag, value);\n    };\n    BindingInWhenOnSyntax.prototype.whenNoAncestorNamed = function (name) {\n        return this._bindingWhenSyntax.whenNoAncestorNamed(name);\n    };\n    BindingInWhenOnSyntax.prototype.whenNoAncestorTagged = function (tag, value) {\n        return this._bindingWhenSyntax.whenNoAncestorTagged(tag, value);\n    };\n    BindingInWhenOnSyntax.prototype.whenAnyAncestorMatches = function (constraint) {\n        return this._bindingWhenSyntax.whenAnyAncestorMatches(constraint);\n    };\n    BindingInWhenOnSyntax.prototype.whenNoAncestorMatches = function (constraint) {\n        return this._bindingWhenSyntax.whenNoAncestorMatches(constraint);\n    };\n    BindingInWhenOnSyntax.prototype.onActivation = function (handler) {\n        return this._bindingOnSyntax.onActivation(handler);\n    };\n    return BindingInWhenOnSyntax;\n}());\nexports.BindingInWhenOnSyntax = BindingInWhenOnSyntax;\n\n\n/***/ }),\n/* 62 */\n/***/ (function(module, exports, __webpack_require__) {\n\n\"use strict\";\n\nvar binding_in_when_on_syntax_1 = __webpack_require__(61);\nvar binding_when_on_syntax_1 = __webpack_require__(28);\nvar literal_types_1 = __webpack_require__(15);\nvar ERROR_MSGS = __webpack_require__(13);\nvar BindingToSyntax = (function () {\n    function BindingToSyntax(binding) {\n        this._binding = binding;\n    }\n    BindingToSyntax.prototype.to = function (constructor) {\n        this._binding.type = literal_types_1.BindingTypeEnum.Instance;\n        this._binding.implementationType = constructor;\n        return new binding_in_when_on_syntax_1.BindingInWhenOnSyntax(this._binding);\n    };\n    BindingToSyntax.prototype.toSelf = function () {\n        if (typeof this._binding.serviceIdentifier !== \"function\") {\n            throw new Error(\"\" + ERROR_MSGS.INVALID_TO_SELF_VALUE);\n        }\n        var self = this._binding.serviceIdentifier;\n        return this.to(self);\n    };\n    BindingToSyntax.prototype.toConstantValue = function (value) {\n        this._binding.type = literal_types_1.BindingTypeEnum.ConstantValue;\n        this._binding.cache = value;\n        this._binding.dynamicValue = null;\n        this._binding.implementationType = null;\n        return new binding_when_on_syntax_1.BindingWhenOnSyntax(this._binding);\n    };\n    BindingToSyntax.prototype.toDynamicValue = function (func) {\n        this._binding.type = literal_types_1.BindingTypeEnum.DynamicValue;\n        this._binding.cache = null;\n        this._binding.dynamicValue = func;\n        this._binding.implementationType = null;\n        return new binding_in_when_on_syntax_1.BindingInWhenOnSyntax(this._binding);\n    };\n    BindingToSyntax.prototype.toConstructor = function (constructor) {\n        this._binding.type = literal_types_1.BindingTypeEnum.Constructor;\n        this._binding.implementationType = constructor;\n        return new binding_when_on_syntax_1.BindingWhenOnSyntax(this._binding);\n    };\n    BindingToSyntax.prototype.toFactory = function (factory) {\n        this._binding.type = literal_types_1.BindingTypeEnum.Factory;\n        this._binding.factory = factory;\n        return new binding_when_on_syntax_1.BindingWhenOnSyntax(this._binding);\n    };\n    BindingToSyntax.prototype.toFunction = function (func) {\n        if (typeof func !== \"function\") {\n            throw new Error(ERROR_MSGS.INVALID_FUNCTION_BINDING);\n        }\n        ;\n        var bindingWhenOnSyntax = this.toConstantValue(func);\n        this._binding.type = literal_types_1.BindingTypeEnum.Function;\n        return bindingWhenOnSyntax;\n    };\n    BindingToSyntax.prototype.toAutoFactory = function (serviceIdentifier) {\n        this._binding.type = literal_types_1.BindingTypeEnum.Factory;\n        this._binding.factory = function (context) {\n            return function () {\n                return context.container.get(serviceIdentifier);\n            };\n        };\n        return new binding_when_on_syntax_1.BindingWhenOnSyntax(this._binding);\n    };\n    BindingToSyntax.prototype.toProvider = function (provider) {\n        this._binding.type = literal_types_1.BindingTypeEnum.Provider;\n        this._binding.provider = provider;\n        return new binding_when_on_syntax_1.BindingWhenOnSyntax(this._binding);\n    };\n    return BindingToSyntax;\n}());\nexports.BindingToSyntax = BindingToSyntax;\n\n\n/***/ }),\n/* 63 */\n/***/ (function(module, exports, __webpack_require__) {\n\n\"use strict\";\n\r\nObject.defineProperty(exports, \"__esModule\", { value: true });\r\n\n\n/***/ }),\n/* 64 */\n/***/ (function(module, exports, __webpack_require__) {\n\n\"use strict\";\n\r\nObject.defineProperty(exports, \"__esModule\", { value: true });\r\nvar tslib_1 = __webpack_require__(1);\r\nvar uritemplate = __webpack_require__(358);\r\nvar _1 = __webpack_require__(2);\r\nvar contracts_1 = __webpack_require__(3);\r\nvar inversify_1 = __webpack_require__(0);\r\nvar BaseRoute = (function () {\r\n    function BaseRoute(appOptions) {\r\n        this.appOptions = appOptions;\r\n        this.utility = new _1.Utility();\r\n        this.modelMapper = new _1.ModelMapper();\r\n    }\r\n    /**\r\n     * Parses resources route which can be expanded with additional options. Supported items are:\r\n     * - `searchQuery` - A string value used to identify resources using the phrase search.\r\n     * - `page` - A value used to set the page number, i.e. to retrieve certain resource subset from the storage.\r\n     * - `rpp` - A value used to limit the size of result set per page.\r\n     * - `sort` - A string used to set the resource property to sort the result collection by.\r\n     * - `embed` - Comma separated list of resources to be contained within the current representation.\r\n     * @method\r\n     * @returns Query resources uri with search params\r\n     * @example baasicBaseDefinition.find();\r\n     **/\r\n    BaseRoute.prototype.baseFind = function (route, options) {\r\n        var params = this.modelMapper.findParams(options);\r\n        return uritemplate.parse(route).expand(params);\r\n    };\r\n    /**\r\n      * Parses get resource route which must be expanded with the Id of the previously created resource in the system.\r\n      * @returns get resource uri\r\n      * @method\r\n      * @example baseRoute.get(route, id);\r\n      **/\r\n    BaseRoute.prototype.baseGet = function (route, id, options, propName) {\r\n        return uritemplate.parse(route).expand(this.modelMapper.getParams(id, options, propName));\r\n    };\r\n    /**\r\n      * Parses get resource route which must be expanded with the Id of the previously created resource in the system.\r\n      * @returns get resource uri\r\n      * @method\r\n      * @example baseRoute.create();\r\n      **/\r\n    BaseRoute.prototype.baseCreate = function (route, data) {\r\n        return uritemplate.parse(route).expand(data);\r\n    };\r\n    /**\r\n     * Parses get resource route.\r\n     * @returns update resource uri\r\n     * @method\r\n     * @example baseRoute.update();\r\n     */\r\n    BaseRoute.prototype.baseUpdate = function (route, data, options, linkName) {\r\n        var link = linkName ? linkName : 'put';\r\n        var params = this.modelMapper.updateParams(data);\r\n        var model = params[this.modelMapper.modelPropertyName];\r\n        if (typeof options === 'undefined') {\r\n            if (this.appOptions.enableHALJSON && model.links) {\r\n                return model.links(link).href;\r\n            }\r\n            else {\r\n                return uritemplate.parse(route).expand(model);\r\n            }\r\n        }\r\n        else {\r\n            var opt = this.utility.extend(model, options);\r\n            if (this.appOptions.enableHALJSON && model.links) {\r\n                return uritemplate.parse(model.links(link).href).expand(opt);\r\n            }\r\n            else {\r\n                return uritemplate.parse(route).expand(opt);\r\n            }\r\n        }\r\n    };\r\n    /**\r\n     * Parses delete resource route.\r\n     * @returns delete resource uri.\r\n     * @method\r\n     * @example baseRoute.delete();\r\n     */\r\n    BaseRoute.prototype.baseDelete = function (route, data, options, linkName) {\r\n        var link = linkName ? linkName : 'delete';\r\n        var params = this.modelMapper.removeParams(data);\r\n        var model = params[this.modelMapper.modelPropertyName];\r\n        if (typeof options === 'undefined') {\r\n            if (this.appOptions.enableHALJSON && model.links) {\r\n                return model.links(link).href;\r\n            }\r\n            else {\r\n                return uritemplate.parse(route).expand(model);\r\n            }\r\n        }\r\n        else {\r\n            var opt = this.utility.extend(model, options);\r\n            if (this.appOptions.enableHALJSON && model.links) {\r\n                return uritemplate.parse(model.links(link).href).expand(opt);\r\n            }\r\n            else {\r\n                return uritemplate.parse(route).expand(opt);\r\n            }\r\n        }\r\n    };\r\n    BaseRoute.prototype.createParams = function (data, prop) {\r\n        var propertyName = prop || this.modelMapper.modelPropertyName;\r\n        return this.modelMapper.createParams(data)[propertyName];\r\n    };\r\n    BaseRoute.prototype.updateParams = function (data) {\r\n        return this.modelMapper.updateParams(data)[this.modelMapper.modelPropertyName];\r\n    };\r\n    BaseRoute.prototype.deleteParams = function (data) {\r\n        return this.modelMapper.removeParams(data)[this.modelMapper.modelPropertyName];\r\n    };\r\n    /**\r\n     * Parses and expands URI templates based on [RFC6570](http://tools.ietf.org/html/rfc6570) specifications. For more information please visit the project [GitHub](https://github.com/Baasic/uritemplate-js) page.\r\n     * @method\r\n     * @example baseRoute.parse('<route>/{?embed,fields,options}').expand({embed: '<embedded-resource>'});\r\n     **/\r\n    BaseRoute.prototype.parse = function (route) {\r\n        return uritemplate.parse(route);\r\n    };\r\n    return BaseRoute;\r\n}());\r\nBaseRoute = tslib_1.__decorate([\r\n    inversify_1.injectable(),\r\n    tslib_1.__metadata(\"design:paramtypes\", [typeof (_a = typeof contracts_1.IAppOptions !== \"undefined\" && contracts_1.IAppOptions) === \"function\" && _a || Object])\r\n], BaseRoute);\r\nexports.BaseRoute = BaseRoute;\r\nvar _a;\r\n/**\r\n * @copyright (c) 2017 Mono Ltd\r\n * @license MIT\r\n * @author Mono Ltd\r\n * @overview\r\n ***Notes:**\r\n - Refer to the [Baasic REST API](http://dev.baasic.com/api/reference/home) for detailed information about available Baasic REST API end-points.\r\n - [URI Template](https://github.com/Baasic/uritemplate-js) syntax enables expanding the Baasic route templates to Baasic REST URIs providing it with an object that contains URI parameters.\r\n - All end-point objects are transformed by the associated route service.\r\n */ \r\n\n\n/***/ }),\n/* 65 */\n/***/ (function(module, exports, __webpack_require__) {\n\n\"use strict\";\n\r\nObject.defineProperty(exports, \"__esModule\", { value: true });\r\n\n\n/***/ }),\n/* 66 */\n/***/ (function(module, exports, __webpack_require__) {\n\n\"use strict\";\n\r\nObject.defineProperty(exports, \"__esModule\", { value: true });\r\n\n\n/***/ }),\n/* 67 */\n/***/ (function(module, exports, __webpack_require__) {\n\n\"use strict\";\n\r\nObject.defineProperty(exports, \"__esModule\", { value: true });\r\n\n\n/***/ }),\n/* 68 */\n/***/ (function(module, exports, __webpack_require__) {\n\n\"use strict\";\n\r\nObject.defineProperty(exports, \"__esModule\", { value: true });\r\n\n\n/***/ }),\n/* 69 */\n/***/ (function(module, exports, __webpack_require__) {\n\n\"use strict\";\n\r\nObject.defineProperty(exports, \"__esModule\", { value: true });\r\n\n\n/***/ }),\n/* 70 */\n/***/ (function(module, exports, __webpack_require__) {\n\n\"use strict\";\n\r\nObject.defineProperty(exports, \"__esModule\", { value: true });\r\n\n\n/***/ }),\n/* 71 */\n/***/ (function(module, exports, __webpack_require__) {\n\n\"use strict\";\n\r\nObject.defineProperty(exports, \"__esModule\", { value: true });\r\n\n\n/***/ }),\n/* 72 */\n/***/ (function(module, exports, __webpack_require__) {\n\n\"use strict\";\n\r\nObject.defineProperty(exports, \"__esModule\", { value: true });\r\n\n\n/***/ }),\n/* 73 */\n/***/ (function(module, exports, __webpack_require__) {\n\n\"use strict\";\n\r\nObject.defineProperty(exports, \"__esModule\", { value: true });\r\n\n\n/***/ }),\n/* 74 */\n/***/ (function(module, exports, __webpack_require__) {\n\n\"use strict\";\n\r\nObject.defineProperty(exports, \"__esModule\", { value: true });\r\n\n\n/***/ }),\n/* 75 */\n/***/ (function(module, exports, __webpack_require__) {\n\n\"use strict\";\n\r\nObject.defineProperty(exports, \"__esModule\", { value: true });\r\n\n\n/***/ }),\n/* 76 */\n/***/ (function(module, exports, __webpack_require__) {\n\n\"use strict\";\n\r\nObject.defineProperty(exports, \"__esModule\", { value: true });\r\n\n\n/***/ }),\n/* 77 */\n/***/ (function(module, exports, __webpack_require__) {\n\n\"use strict\";\n\r\nfunction __export(m) {\r\n    for (var p in m) if (!exports.hasOwnProperty(p)) exports[p] = m[p];\r\n}\r\nObject.defineProperty(exports, \"__esModule\", { value: true });\r\n__export(__webpack_require__(72));\r\n__export(__webpack_require__(74));\r\n__export(__webpack_require__(73));\r\n__export(__webpack_require__(65));\r\n__export(__webpack_require__(66));\r\n__export(__webpack_require__(69));\r\n__export(__webpack_require__(70));\r\n__export(__webpack_require__(67));\r\n__export(__webpack_require__(68));\r\n__export(__webpack_require__(76));\r\n__export(__webpack_require__(71));\r\n__export(__webpack_require__(75));\r\n\n\n/***/ }),\n/* 78 */\n/***/ (function(module, exports, __webpack_require__) {\n\n\"use strict\";\n\r\nObject.defineProperty(exports, \"__esModule\", { value: true });\r\nvar _1 = __webpack_require__(2);\r\nvar utility = new _1.Utility();\r\n//HAL Parser is based on https://github.com/Baasic/angular-hal & https://github.com/jasonaden/angular-hal implementation. Parser is used to parse [HAL (Hyptertext Application Language)](http://stateless.co/hal_specification.html) JSON structures into usable JavaScript objects.\r\nvar __bind = function (fn, me) { return function () { return fn.apply(me, arguments); }; };\r\nvar removeNamespace;\r\nremoveNamespace = function (name, ns) {\r\n    ns = ns ? ns + ':' : '';\r\n    if (ns) { }\r\n    if (name.substr(0, ns.length) === ns) {\r\n        return name.substr(ns.length);\r\n    }\r\n    else {\r\n        return name;\r\n    }\r\n};\r\nvar Link, Links, Resource;\r\nfunction Parser(ns) {\r\n    this.ns = ns;\r\n    this.parse = __bind(this.parse, this);\r\n}\r\nParser.prototype.parse = function (hal) {\r\n    var json, _embedded, _links;\r\n    json = utility.extend(hal);\r\n    _links = json._links, _embedded = json._embedded;\r\n    delete json._links;\r\n    delete json._embedded;\r\n    return new Resource(json, _links, _embedded, this.ns);\r\n};\r\nResource = (function () {\r\n    function Resource(data, links, embedded, ns) {\r\n        var em, name, prop, resourceLinks;\r\n        ns = ns ? ns : '';\r\n        utility.extend(this, data);\r\n        resourceLinks = links ? new Links(links) : {};\r\n        for (name in embedded) {\r\n            prop = embedded[name];\r\n            this[removeNamespace(name, ns)] = (function () {\r\n                var _i, _len, _results;\r\n                if (prop) {\r\n                    if (Array.isArray(prop)) {\r\n                        _results = [];\r\n                        for (_i = 0, _len = prop.length; _i < _len; _i++) {\r\n                            em = prop[_i];\r\n                            _results.push(new Parser(ns).parse(em, ns));\r\n                        }\r\n                        return _results;\r\n                    }\r\n                    else {\r\n                        return new Parser(ns).parse(prop, ns);\r\n                    }\r\n                }\r\n            })();\r\n        }\r\n        this.links = function (name) {\r\n            var key;\r\n            if (name == null) {\r\n                name = '';\r\n            }\r\n            key = name === 'self' ? name : resourceLinks[name] ? name : ns + ':' + name;\r\n            if (resourceLinks[key]) {\r\n                return resourceLinks[key];\r\n            }\r\n            else {\r\n                return resourceLinks;\r\n            }\r\n        };\r\n    }\r\n    return Resource;\r\n})();\r\nLinks = (function () {\r\n    function Links(links, ns) {\r\n        var link, lk, name;\r\n        if (!(links != null ? links.self : void 0)) {\r\n            console.log('Self link is missing.');\r\n        }\r\n        for (name in links) {\r\n            link = links[name];\r\n            this[name] = (function () {\r\n                var _i, _len, _results;\r\n                if (Array.isArray(link)) {\r\n                    _results = [];\r\n                    for (_i = 0, _len = link.length; _i < _len; _i++) {\r\n                        lk = link[_i];\r\n                        _results.push(new Link(lk, ns));\r\n                    }\r\n                    return _results;\r\n                }\r\n                else {\r\n                    return new Link(link, ns);\r\n                }\r\n            })();\r\n        }\r\n    }\r\n    return Links;\r\n})();\r\nLink = (function () {\r\n    function Link(link, ns) {\r\n        if (!(link != null ? link.href : void 0)) {\r\n            throw 'href is required for all links';\r\n        }\r\n        this.href = link.href, this.name = link.name, this.profile = link.profile;\r\n        this.templated = !!link.templated;\r\n        this.title = link.title || '';\r\n    }\r\n    return Link;\r\n})();\r\nvar HALParser;\r\nexports.HALParser = HALParser;\r\nexports.HALParser = HALParser = new Parser('JavaScriptSDK');\r\n\n\n/***/ }),\n/* 79 */\n/***/ (function(module, exports, __webpack_require__) {\n\n\"use strict\";\n/**\r\n * @module modelMapper\r\n * @description This service is used to perform low level model or option transformations before they are sent to the Baasic back-end.\r\n **/\r\n\r\nObject.defineProperty(exports, \"__esModule\", { value: true });\r\nvar _1 = __webpack_require__(2);\r\nvar ModelMapper = (function () {\r\n    function ModelMapper() {\r\n        this.idPropertyName = 'id';\r\n        this.modelPropertyName = 'model';\r\n        this.utility = new _1.Utility();\r\n    }\r\n    ModelMapper.prototype.FindParams = function (options) {\r\n        var object = {};\r\n        if (this.utility.isObject(options)) {\r\n            this.utility.extend(object, options);\r\n            if (options.hasOwnProperty('orderBy') && options.hasOwnProperty('orderDirection')) {\r\n                object.sort = options.orderBy ? options.orderBy + '|' + options.orderDirection : null;\r\n            }\r\n            if (options.hasOwnProperty('search')) {\r\n                object.searchQuery = options.search;\r\n            }\r\n            if (options.hasOwnProperty('pageNumber')) {\r\n                object.page = options.pageNumber;\r\n            }\r\n            if (options.hasOwnProperty('pageSize')) {\r\n                object.rpp = options.pageSize;\r\n            }\r\n        }\r\n        else {\r\n            object.searchQuery = options;\r\n        }\r\n        return object;\r\n    };\r\n    ModelMapper.prototype.KeyParams = function (id, options, propName) {\r\n        var object = {};\r\n        if (this.utility.isObject(id)) {\r\n            this.utility.extend(object, id);\r\n        }\r\n        else {\r\n            if (propName !== undefined) {\r\n                object[propName] = id;\r\n            }\r\n            else {\r\n                object[this.idPropertyName] = id;\r\n            }\r\n        }\r\n        if (options !== undefined && this.utility.isObject(options)) {\r\n            this.utility.extend(object, options);\r\n        }\r\n        return object;\r\n    };\r\n    ModelMapper.prototype.ModelParams = function (data) {\r\n        var object = {};\r\n        if (data && data.hasOwnProperty(this.modelPropertyName)) {\r\n            this.utility.extend(object, data);\r\n        }\r\n        else {\r\n            object[this.modelPropertyName] = data;\r\n        }\r\n        return object;\r\n    };\r\n    /**\r\n     * Parses Baasic Api pagination, sorting and search parameters.\r\n     * @param options query resources options object\r\n     * @method\r\n     * @example modelMapper.findParams({ pageNumber:1, pageSize:10 });\r\n     **/\r\n    ModelMapper.prototype.findParams = function (options) {\r\n        return this.FindParams(options);\r\n    };\r\n    /**\r\n     * Parses specified key parameters; initial object can be expanded with additional parameters.\r\n     * @param id Resources unique identifier\r\n     * @param options query resources options object\r\n     * @param propName property name\r\n     * @method\r\n     * @example modelMapper.getParams(('<value>', {additionalOptions: '<option>'},'<property-name>'));\r\n     **/\r\n    ModelMapper.prototype.getParams = function (id, options, propName) {\r\n        return this.KeyParams(id, options, propName);\r\n    };\r\n    /**\r\n     * Performs create resource transforms on an object so that it can be safely expanded with additional properties.\r\n     * @param data data object\r\n     * @method\r\n     * @example modelMapper.createParams({});\r\n     **/\r\n    ModelMapper.prototype.createParams = function (data) {\r\n        return this.ModelParams(data);\r\n    };\r\n    /**\r\n     * Performs update resource transforms on transforms an object so that it can be safely expanded with additional properties.\r\n     * @param data data object\r\n     * @method\r\n     * @example modelMapper.updateParams({});\r\n     **/\r\n    ModelMapper.prototype.updateParams = function (data) {\r\n        return this.ModelParams(data);\r\n    };\r\n    /**\r\n     * Performs remove resource transforms on transforms an object so that it can be safely expanded with additional properties.\r\n     * @param data data object\r\n     * @method\r\n     * @example modelMapper.removeParams({});\r\n     **/\r\n    ModelMapper.prototype.removeParams = function (data) {\r\n        return this.ModelParams(data);\r\n    };\r\n    return ModelMapper;\r\n}());\r\nexports.ModelMapper = ModelMapper;\r\n\n\n/***/ }),\n/* 80 */\n/***/ (function(module, exports, __webpack_require__) {\n\n\"use strict\";\n\r\nObject.defineProperty(exports, \"__esModule\", { value: true });\r\nvar tslib_1 = __webpack_require__(1);\r\nvar inversify_1 = __webpack_require__(0);\r\nvar Utility = (function () {\r\n    function Utility() {\r\n    }\r\n    /**\r\n     * Order an array by specified order type.\r\n     * @param values of T type\r\n     * @param orderType property name\r\n     * @returns ordered array.\r\n     */\r\n    Utility.prototype.OrderByArray = function (values, orderType) {\r\n        return values.sort(function (a, b) {\r\n            if (a[orderType] < b[orderType]) {\r\n                return -1;\r\n            }\r\n            if (a[orderType] > b[orderType]) {\r\n                return 1;\r\n            }\r\n            return 0;\r\n        });\r\n    };\r\n    /**\r\n     * Checks if provided value is javascript object.\r\n     * @param value any given value\r\n     * @returns true if provided value is object, otherwise false.\r\n     */\r\n    Utility.prototype.isObject = function (value) {\r\n        return value !== null && typeof value === 'object';\r\n    };\r\n    Utility.prototype.isUndefined = function (value) {\r\n        return typeof value === 'undefined';\r\n    };\r\n    /**\r\n     * Copies properties from source object to destination object.\r\n     * @param dstObj destination object\r\n     * @param srcObj source object\r\n     * @returns destination object with new properties from source object.\r\n     */\r\n    Utility.prototype.extend = function (dstObj) {\r\n        var srcObj = [];\r\n        for (var _i = 1; _i < arguments.length; _i++) {\r\n            srcObj[_i - 1] = arguments[_i];\r\n        }\r\n        var newObj = dstObj;\r\n        for (var _a = 0, srcObj_1 = srcObj; _a < srcObj_1.length; _a++) {\r\n            var obj = srcObj_1[_a];\r\n            for (var key in obj) {\r\n                //copy all the fields\r\n                newObj[key] = obj[key];\r\n            }\r\n        }\r\n        return newObj;\r\n    };\r\n    /**\r\n     * Copies properties from source object to destination object.\r\n     * @param dstObj destination object\r\n     * @param srcObj source object\r\n     * @returns destination object with new properties from source object.\r\n     */\r\n    Utility.prototype.extendAs = function (dstObj) {\r\n        var srcObj = [];\r\n        for (var _i = 1; _i < arguments.length; _i++) {\r\n            srcObj[_i - 1] = arguments[_i];\r\n        }\r\n        srcObj.unshift(dstObj);\r\n        return this.extend.apply(this, srcObj);\r\n    };\r\n    return Utility;\r\n}());\r\nUtility = tslib_1.__decorate([\r\n    inversify_1.injectable(),\r\n    tslib_1.__metadata(\"design:paramtypes\", [])\r\n], Utility);\r\nexports.Utility = Utility;\r\n\n\n/***/ }),\n/* 81 */\n/***/ (function(module, exports, __webpack_require__) {\n\n\"use strict\";\n\r\nObject.defineProperty(exports, \"__esModule\", { value: true });\r\nvar tslib_1 = __webpack_require__(1);\r\nvar common_1 = __webpack_require__(2);\r\nvar contracts_1 = __webpack_require__(3);\r\nvar inversify_1 = __webpack_require__(0);\r\nvar utility = new common_1.Utility();\r\nvar BrowserEventHandler = (function () {\r\n    function BrowserEventHandler(storageHandler, application) {\r\n        this.storageHandler = storageHandler;\r\n        this.application = application;\r\n        this.messageBusKey = 'baasic-message-bus-' + this.application.getApiKey();\r\n        var jQueryLoaded = window.jQuery;\r\n        if (jQueryLoaded) {\r\n            this.triggerEvent = function (eventName, data) {\r\n                var event = utility.extend($.Event(eventName), data);\r\n                $(document).trigger(event);\r\n            };\r\n        }\r\n        else if (CustomEvent && typeof CustomEvent === 'function') {\r\n            this.triggerEvent = function (eventName, data) {\r\n                var event = utility.extend(new CustomEvent(eventName), data);\r\n                document.dispatchEvent(event);\r\n            };\r\n        }\r\n        else if (document.createEvent) {\r\n            this.triggerEvent = function (eventName, data) {\r\n                var event = utility.extend(document.createEvent('CustomEvent'), data);\r\n                event.initEvent(eventName, true, true);\r\n                document.dispatchEvent(event);\r\n            };\r\n        }\r\n        else {\r\n            this.triggerEvent = function (eventName, data) {\r\n                var doc = document;\r\n                var event = utility.extend(doc.createEventObject(), data);\r\n                event.eventType = eventName;\r\n                doc.fireEvent('on' + event.eventType, event);\r\n            };\r\n        }\r\n        if (jQueryLoaded) {\r\n            this.addEvent = function (eventName, func) { return $(window).on(eventName, func); };\r\n        }\r\n        else if (window.addEventListener) {\r\n            this.addEvent = function (eventName, func) { return window.addEventListener(eventName, func, false); };\r\n        }\r\n        else if (window.attachEvent) {\r\n            this.addEvent = function (eventName, func) { return window.attachEvent('on' + eventName, func); };\r\n        }\r\n        else {\r\n            this.addEvent = function (eventName, func) { return window['on' + eventName] = func; };\r\n        }\r\n        this.initEventing();\r\n    }\r\n    BrowserEventHandler.prototype.pushMessage = function (message, args) {\r\n        this.storageHandler.remove(this.messageBusKey);\r\n        this.storageHandler.set(this.messageBusKey, JSON.stringify({\r\n            message: message,\r\n            args: args\r\n        }));\r\n    };\r\n    BrowserEventHandler.prototype.initEventing = function () {\r\n        this.addEvent('storage', function (e) {\r\n            e = e || event;\r\n            if (e.originalEvent) {\r\n                e = e.originalEvent;\r\n            }\r\n            if (e.key === this.messageBusKey) {\r\n                var value = e.newValue;\r\n                if (value && value !== '') {\r\n                    var data = JSON.parse(value);\r\n                    this.eventHandler.triggerEvent(data.message.type, this.utility.extend(data.args, { app: this.application }));\r\n                }\r\n            }\r\n        });\r\n    };\r\n    return BrowserEventHandler;\r\n}());\r\nBrowserEventHandler = tslib_1.__decorate([\r\n    inversify_1.injectable(),\r\n    tslib_1.__param(0, inversify_1.inject(contracts_1.TYPES.IStorageHandler)),\r\n    tslib_1.__param(1, inversify_1.inject(contracts_1.TYPES.IBaasicApp)),\r\n    tslib_1.__metadata(\"design:paramtypes\", [typeof (_a = typeof contracts_1.IStorageHandler !== \"undefined\" && contracts_1.IStorageHandler) === \"function\" && _a || Object, typeof (_b = typeof contracts_1.IBaasicApp !== \"undefined\" && contracts_1.IBaasicApp) === \"function\" && _b || Object])\r\n], BrowserEventHandler);\r\nexports.BrowserEventHandler = BrowserEventHandler;\r\n;\r\nvar _a, _b;\r\n\n\n/***/ }),\n/* 82 */\n/***/ (function(module, exports, __webpack_require__) {\n\n\"use strict\";\n\r\nfunction __export(m) {\r\n    for (var p in m) if (!exports.hasOwnProperty(p)) exports[p] = m[p];\r\n}\r\nObject.defineProperty(exports, \"__esModule\", { value: true });\r\n__export(__webpack_require__(81));\r\n\n\n/***/ }),\n/* 83 */\n/***/ (function(module, exports, __webpack_require__) {\n\n\"use strict\";\n\r\nObject.defineProperty(exports, \"__esModule\", { value: true });\r\n\n\n/***/ }),\n/* 84 */\n/***/ (function(module, exports, __webpack_require__) {\n\n\"use strict\";\n\r\nObject.defineProperty(exports, \"__esModule\", { value: true });\r\n\n\n/***/ }),\n/* 85 */\n/***/ (function(module, exports, __webpack_require__) {\n\n\"use strict\";\n\r\nObject.defineProperty(exports, \"__esModule\", { value: true });\r\n\n\n/***/ }),\n/* 86 */\n/***/ (function(module, exports, __webpack_require__) {\n\n\"use strict\";\n\r\nObject.defineProperty(exports, \"__esModule\", { value: true });\r\n\n\n/***/ }),\n/* 87 */\n/***/ (function(module, exports, __webpack_require__) {\n\n\"use strict\";\n\r\nObject.defineProperty(exports, \"__esModule\", { value: true });\r\n\n\n/***/ }),\n/* 88 */\n/***/ (function(module, exports, __webpack_require__) {\n\n\"use strict\";\n\r\nObject.defineProperty(exports, \"__esModule\", { value: true });\r\n\n\n/***/ }),\n/* 89 */\n/***/ (function(module, exports, __webpack_require__) {\n\n\"use strict\";\n\r\nObject.defineProperty(exports, \"__esModule\", { value: true });\r\n\n\n/***/ }),\n/* 90 */\n/***/ (function(module, exports, __webpack_require__) {\n\n\"use strict\";\n\r\nObject.defineProperty(exports, \"__esModule\", { value: true });\r\nexports.TokenTypes = {\r\n    Access: 'access',\r\n    Refresh: 'refresh'\r\n};\r\n\n\n/***/ }),\n/* 91 */\n/***/ (function(module, exports, __webpack_require__) {\n\n\"use strict\";\n\r\nObject.defineProperty(exports, \"__esModule\", { value: true });\r\n\n\n/***/ }),\n/* 92 */\n/***/ (function(module, exports, __webpack_require__) {\n\n\"use strict\";\n\r\nObject.defineProperty(exports, \"__esModule\", { value: true });\r\n\n\n/***/ }),\n/* 93 */\n/***/ (function(module, exports, __webpack_require__) {\n\n\"use strict\";\n\r\nObject.defineProperty(exports, \"__esModule\", { value: true });\r\n\n\n/***/ }),\n/* 94 */\n/***/ (function(module, exports, __webpack_require__) {\n\n\"use strict\";\n\r\nObject.defineProperty(exports, \"__esModule\", { value: true });\r\nvar TYPES = {\r\n    IBaasicAppOptions: Symbol(\"IBaasicAppOptions\"),\r\n    IAppOptions: Symbol(\"IAppOptions\"),\r\n    IStorageHandler: Symbol(\"IStorageHandler\"),\r\n    IEventHandler: Symbol(\"IEventHandler\"),\r\n    ITokenHandler: Symbol(\"ITokenHandler\"),\r\n    IUserHandler: Symbol(\"IUserHandler\"),\r\n    IBaasicApp: Symbol(\"IBaasicApp\"),\r\n    IDefaultStorageConfig: Symbol(\"IDefaultStorageConfig\")\r\n};\r\nexports.TYPES = TYPES;\r\n\n\n/***/ }),\n/* 95 */\n/***/ (function(module, exports, __webpack_require__) {\n\n\"use strict\";\n\r\nObject.defineProperty(exports, \"__esModule\", { value: true });\r\nvar inversify_1 = __webpack_require__(0);\r\nvar contracts_1 = __webpack_require__(3);\r\nvar _1 = __webpack_require__(31);\r\nvar diModule = new inversify_1.ContainerModule(function (bind) {\r\n    bind(contracts_1.TYPES.ITokenHandler).to(_1.TokenHandler);\r\n    bind(contracts_1.TYPES.IUserHandler).to(_1.UserHandler);\r\n});\r\nexports.diModule = diModule;\r\n\n\n/***/ }),\n/* 96 */\n/***/ (function(module, exports, __webpack_require__) {\n\n\"use strict\";\n\r\nObject.defineProperty(exports, \"__esModule\", { value: true });\r\nvar tslib_1 = __webpack_require__(1);\r\nvar contracts_1 = __webpack_require__(3);\r\nvar inversify_1 = __webpack_require__(0);\r\nvar LocalStorageHandler = (function () {\r\n    function LocalStorageHandler(config) {\r\n        config = config || {};\r\n        if (!localStorage) {\r\n            throw new Error(\"Local storage not found.\");\r\n        }\r\n        var parseKey = config.keyGenerator;\r\n        var getHandler;\r\n        if (parseKey) {\r\n            getHandler = function (fn) { return function () { arguments[0] = parseKey(arguments[0]); return fn.apply(this, arguments); }; };\r\n        }\r\n        else {\r\n            getHandler = function (fn) { return fn; };\r\n        }\r\n        this.clear = localStorage.clear;\r\n        this.remove = getHandler(this.removeItem);\r\n        this.set = getHandler(this.setItem);\r\n        this.get = getHandler(this.getItem);\r\n    }\r\n    LocalStorageHandler.prototype.removeItem = function (key) {\r\n        localStorage.removeItem(key);\r\n    };\r\n    LocalStorageHandler.prototype.getItem = function (key) {\r\n        return JSON.parse(localStorage.getItem(key));\r\n    };\r\n    LocalStorageHandler.prototype.setItem = function (key, data) {\r\n        localStorage.setItem(key, JSON.stringify(data));\r\n    };\r\n    return LocalStorageHandler;\r\n}());\r\nLocalStorageHandler = tslib_1.__decorate([\r\n    inversify_1.injectable(),\r\n    tslib_1.__param(0, inversify_1.inject(contracts_1.TYPES.IDefaultStorageConfig)), tslib_1.__param(0, inversify_1.optional()),\r\n    tslib_1.__metadata(\"design:paramtypes\", [typeof (_a = typeof contracts_1.IDefaultStorageConfig !== \"undefined\" && contracts_1.IDefaultStorageConfig) === \"function\" && _a || Object])\r\n], LocalStorageHandler);\r\nexports.LocalStorageHandler = LocalStorageHandler;\r\n;\r\nvar _a;\r\n\n\n/***/ }),\n/* 97 */\n/***/ (function(module, exports, __webpack_require__) {\n\n\"use strict\";\n\r\nfunction __export(m) {\r\n    for (var p in m) if (!exports.hasOwnProperty(p)) exports[p] = m[p];\r\n}\r\nObject.defineProperty(exports, \"__esModule\", { value: true });\r\n__export(__webpack_require__(96));\r\n\n\n/***/ }),\n/* 98 */\n/***/ (function(module, exports, __webpack_require__) {\n\n\"use strict\";\n\r\nObject.defineProperty(exports, \"__esModule\", { value: true });\r\nvar tslib_1 = __webpack_require__(1);\r\nvar common_1 = __webpack_require__(2);\r\nvar contracts_1 = __webpack_require__(3);\r\nvar inversify_1 = __webpack_require__(0);\r\nvar TokenHandler = (function () {\r\n    function TokenHandler(eventHandler, storageHandler, application) {\r\n        this.eventHandler = eventHandler;\r\n        this.storageHandler = storageHandler;\r\n        this.application = application;\r\n        this.utility = new common_1.Utility();\r\n        this.messageTypes = {\r\n            tokenExpired: 'tokenExpired',\r\n            tokenUpdated: 'tokenUpdated'\r\n        };\r\n        this.initEventing();\r\n        this.tokenKey = 'baasic-auth-token-' + this.application.getApiKey();\r\n        this.token = this.get(contracts_1.TokenTypes.Access);\r\n        if (this.token) {\r\n            this.userAccessTokenTimerHandle = this.setExpirationTimer(this.token);\r\n        }\r\n    }\r\n    TokenHandler.prototype.store = function (token) {\r\n        //Type guard for plain JavaScript\r\n        var anyToken = token;\r\n        if (anyToken && !this.utility.isUndefined(anyToken.access_token)) {\r\n            var t = {\r\n                token: anyToken.access_token,\r\n                expires_in: anyToken.expires_in,\r\n                sliding_window: anyToken.sliding_window,\r\n                tokenUrl: anyToken.access_url_token,\r\n                type: anyToken.token_type\r\n            };\r\n            token = t;\r\n        }\r\n        this.syncToken(token);\r\n        if (token === undefined || token === null) {\r\n            this.storageHandler.remove(this.tokenKey);\r\n        }\r\n        else {\r\n            this.storageHandler.set(this.tokenKey, JSON.stringify(token));\r\n        }\r\n        if (token === undefined || token === null) {\r\n            this.triggerTokenExpired(this.application);\r\n        }\r\n        else {\r\n            this.triggerTokenUpdated(this.application);\r\n        }\r\n    };\r\n    TokenHandler.prototype.get = function (type) {\r\n        return JSON.parse(this.storageHandler.get(this.tokenKey));\r\n    };\r\n    TokenHandler.prototype.triggerTokenExpired = function (app) {\r\n        var data = { app: app };\r\n        this.eventHandler.triggerEvent('tokenExpired', data);\r\n        this.eventHandler.pushMessage({\r\n            type: this.messageTypes.tokenExpired\r\n        }, {});\r\n    };\r\n    TokenHandler.prototype.triggerTokenUpdated = function (app) {\r\n        var data = { app: app };\r\n        this.eventHandler.triggerEvent('tokenUpdated', data);\r\n        this.eventHandler.pushMessage({\r\n            type: this.messageTypes.tokenUpdated\r\n        }, {});\r\n    };\r\n    TokenHandler.prototype.setExpirationTimer = function (token) {\r\n        if (token && token.expireTime) {\r\n            var expiresIn = token.expireTime - new Date().getTime();\r\n            if (expiresIn > 0) {\r\n                var self = this;\r\n                return setTimeout(function () {\r\n                    self.store(null);\r\n                    self.triggerTokenExpired(self.application);\r\n                }, expiresIn);\r\n            }\r\n            else {\r\n                this.store(null);\r\n            }\r\n        }\r\n        return null;\r\n    };\r\n    TokenHandler.prototype.syncToken = function (newToken) {\r\n        clearTimeout(this.userAccessTokenTimerHandle);\r\n        if (newToken !== undefined && newToken !== null) {\r\n            if (!newToken.expireTime) {\r\n                var expiresIn = newToken.expires_in;\r\n                var slidingWindow = newToken.sliding_window;\r\n                /*jshint camelcase: true */\r\n                if (expiresIn) {\r\n                    newToken.expireTime = new Date().getTime() + (expiresIn * 1000);\r\n                }\r\n                else if (slidingWindow) {\r\n                    newToken.expireTime = new Date().getTime() + (slidingWindow * 1000);\r\n                }\r\n            }\r\n            this.userAccessTokenTimerHandle = this.setExpirationTimer(newToken);\r\n        }\r\n    };\r\n    TokenHandler.prototype.initEventing = function () {\r\n        this.eventHandler.addEvent('tokenExpired', function (e) {\r\n            e = e || event;\r\n            if (e.originalEvent) {\r\n                e = e.originalEvent;\r\n            }\r\n            this.syncToken(null);\r\n        });\r\n    };\r\n    return TokenHandler;\r\n}());\r\nTokenHandler = tslib_1.__decorate([\r\n    inversify_1.injectable(),\r\n    tslib_1.__param(0, inversify_1.inject(contracts_1.TYPES.IEventHandler)),\r\n    tslib_1.__param(1, inversify_1.inject(contracts_1.TYPES.IStorageHandler)),\r\n    tslib_1.__param(2, inversify_1.inject(contracts_1.TYPES.IBaasicApp)),\r\n    tslib_1.__metadata(\"design:paramtypes\", [typeof (_a = typeof contracts_1.IEventHandler !== \"undefined\" && contracts_1.IEventHandler) === \"function\" && _a || Object, typeof (_b = typeof contracts_1.IStorageHandler !== \"undefined\" && contracts_1.IStorageHandler) === \"function\" && _b || Object, typeof (_c = typeof contracts_1.IBaasicApp !== \"undefined\" && contracts_1.IBaasicApp) === \"function\" && _c || Object])\r\n], TokenHandler);\r\nexports.TokenHandler = TokenHandler;\r\n;\r\nvar _a, _b, _c;\r\n\n\n/***/ }),\n/* 99 */\n/***/ (function(module, exports, __webpack_require__) {\n\n\"use strict\";\n\r\nObject.defineProperty(exports, \"__esModule\", { value: true });\r\nvar tslib_1 = __webpack_require__(1);\r\nvar contracts_1 = __webpack_require__(3);\r\nvar inversify_1 = __webpack_require__(0);\r\nvar UserHandler = (function () {\r\n    function UserHandler(eventHandler, storageHandler, application) {\r\n        var _this = this;\r\n        this.eventHandler = eventHandler;\r\n        this.storageHandler = storageHandler;\r\n        this.application = application;\r\n        this.messageTypes = {\r\n            userChanged: 'userChanged'\r\n        };\r\n        this.userInfoKey = 'baasic-user-info-' + this.application.getApiKey();\r\n        this.user = {\r\n            isAuthenticated: function () {\r\n                var token = _this.application.getAccessToken();\r\n                return token !== undefined && token !== null && (token.expireTime === undefined || token.expireTime === null || (token.expireTime - new Date().getTime()) > 0);\r\n            }\r\n        };\r\n    }\r\n    UserHandler.prototype.getUser = function () {\r\n        var userInfo = JSON.parse(this.storageHandler.get(this.userInfoKey));\r\n        if (userInfo) {\r\n            this.user.user = userInfo;\r\n        }\r\n        else {\r\n            delete this.user.user;\r\n        }\r\n        return this.user;\r\n    };\r\n    UserHandler.prototype.setUser = function (userInfo) {\r\n        if (userInfo === undefined || userInfo === null) {\r\n            this.storageHandler.remove(this.userInfoKey);\r\n        }\r\n        else {\r\n            this.storageHandler.set(this.userInfoKey, JSON.stringify(userInfo));\r\n        }\r\n        this.eventHandler.pushMessage({\r\n            type: this.messageTypes.userChanged\r\n        }, {\r\n            user: this.getUser()\r\n        });\r\n    };\r\n    return UserHandler;\r\n}());\r\nUserHandler = tslib_1.__decorate([\r\n    inversify_1.injectable(),\r\n    tslib_1.__param(0, inversify_1.inject(contracts_1.TYPES.IEventHandler)),\r\n    tslib_1.__param(1, inversify_1.inject(contracts_1.TYPES.IStorageHandler)),\r\n    tslib_1.__param(2, inversify_1.inject(contracts_1.TYPES.IBaasicApp)),\r\n    tslib_1.__metadata(\"design:paramtypes\", [typeof (_a = typeof contracts_1.IEventHandler !== \"undefined\" && contracts_1.IEventHandler) === \"function\" && _a || Object, typeof (_b = typeof contracts_1.IStorageHandler !== \"undefined\" && contracts_1.IStorageHandler) === \"function\" && _b || Object, typeof (_c = typeof contracts_1.IBaasicApp !== \"undefined\" && contracts_1.IBaasicApp) === \"function\" && _c || Object])\r\n], UserHandler);\r\nexports.UserHandler = UserHandler;\r\nvar _a, _b, _c;\r\n\n\n/***/ }),\n/* 100 */\n/***/ (function(module, exports, __webpack_require__) {\n\n\"use strict\";\n\r\nObject.defineProperty(exports, \"__esModule\", { value: true });\r\n\n\n/***/ }),\n/* 101 */\n/***/ (function(module, exports, __webpack_require__) {\n\n\"use strict\";\n\r\nObject.defineProperty(exports, \"__esModule\", { value: true });\r\n\n\n/***/ }),\n/* 102 */\n/***/ (function(module, exports, __webpack_require__) {\n\n\"use strict\";\n\r\nObject.defineProperty(exports, \"__esModule\", { value: true });\r\n\n\n/***/ }),\n/* 103 */\n/***/ (function(module, exports, __webpack_require__) {\n\n\"use strict\";\n\r\nObject.defineProperty(exports, \"__esModule\", { value: true });\r\n\n\n/***/ }),\n/* 104 */\n/***/ (function(module, exports, __webpack_require__) {\n\n\"use strict\";\n\r\nObject.defineProperty(exports, \"__esModule\", { value: true });\r\nvar tslib_1 = __webpack_require__(1);\r\nvar inversify_1 = __webpack_require__(0);\r\nvar _1 = __webpack_require__(4);\r\nvar contracts_1 = __webpack_require__(3);\r\nvar common_1 = __webpack_require__(2);\r\nvar ApiClient = (function () {\r\n    function ApiClient(appOptions, httpClient, tokenHandler, halParser) {\r\n        this.appOptions = appOptions;\r\n        this.httpClient = httpClient;\r\n        this.tokenHandler = tokenHandler;\r\n        this.halParser = halParser;\r\n        this.wwwAuthenticateTokenizer = (function () {\r\n            var ws = '(?:(?:\\\\r\\\\n)?[ \\\\t])+', token = '(?:[\\\\x21\\\\x23-\\\\x27\\\\x2A\\\\x2B\\\\x2D\\\\x2E\\\\x30-\\\\x39\\\\x3F\\\\x41-\\\\x5A\\\\x5E-\\\\x7A\\\\x7C\\\\x7E]+)', quotedString = '\"(?:[\\\\x00-\\\\x0B\\\\x0D-\\\\x21\\\\x23-\\\\x5B\\\\\\\\x5D-\\\\x7F]|' + ws + '|\\\\\\\\[\\\\x00-\\\\x7F])*\"';\r\n            return new RegExp(token + '(?:=(?:' + quotedString + '|' + token + '))?', 'g');\r\n        })();\r\n        this.createPromise = httpClient.createPromise;\r\n    }\r\n    ApiClient.prototype.request = function (request) {\r\n        var _this = this;\r\n        if (request && request.url) {\r\n            request.url = this.compileUrl(request.url);\r\n        }\r\n        var headers = request.headers || (request.headers = {});\r\n        var authToken = this.tokenHandler.get();\r\n        if (authToken) {\r\n            /*jshint camelcase: false */\r\n            headers[\"AUTHORIZATION\"] = \"BEARER \" + authToken.token;\r\n        }\r\n        if (request.data && !this.headerExists(headers, 'Content-Type')) {\r\n            headers['Content-Type'] = 'application/json; charset=UTF-8';\r\n        }\r\n        if (this.appOptions.enableHALJSON) {\r\n            if (!this.headerExists(headers, 'Accept')) {\r\n                headers[\"Accept\"] = 'application/hal+json; charset=UTF-8';\r\n            }\r\n        }\r\n        var self = this;\r\n        var promise = this.httpClient.request(request);\r\n        promise.then(function (data) {\r\n            var contentType = self.getHeader(data.headers, 'Content-Type');\r\n            if (contentType && contentType.toLowerCase().indexOf('application/hal+json') !== -1) {\r\n                data.data = self.halParser.parse(data.data);\r\n            }\r\n            return data;\r\n        }, function (response) {\r\n            var wwwAuthenticate = _this.parseWWWAuthenticateHeader(response.headers['WWW-Authenticate']);\r\n            if (wwwAuthenticate) {\r\n                if (wwwAuthenticate.scheme.toLowerCase() === 'bearer') {\r\n                    var details = wwwAuthenticate.details;\r\n                    if (details) {\r\n                        if (details.error) {\r\n                            switch (details.error) {\r\n                                case 'invalid_token':\r\n                                    _this.tokenHandler.store(null);\r\n                                    break;\r\n                                case 'invalid_request':\r\n                                    /*jshint camelcase: false */\r\n                                    switch (details.error_description) {\r\n                                        /*jshint camelcase: true */\r\n                                        case 'Missing or invalid session':\r\n                                            _this.tokenHandler.store(null);\r\n                                            break;\r\n                                    }\r\n                                    break;\r\n                            }\r\n                        }\r\n                    }\r\n                }\r\n            }\r\n            return response;\r\n        });\r\n        return promise;\r\n    };\r\n    ApiClient.prototype.get = function (url, headers) {\r\n        return this.internalRequest(url, \"GET\", undefined, headers);\r\n    };\r\n    ApiClient.prototype.delete = function (url, headers, data) {\r\n        return this.internalRequest(url, \"DELETE\", data, headers);\r\n    };\r\n    ApiClient.prototype.post = function (url, data, headers) {\r\n        return this.internalRequest(url, \"POST\", data, headers);\r\n    };\r\n    ApiClient.prototype.put = function (url, data, headers) {\r\n        return this.internalRequest(url, \"PUT\", data, headers);\r\n    };\r\n    ApiClient.prototype.patch = function (url, data, headers) {\r\n        return this.internalRequest(url, \"PATCH\", data, headers);\r\n    };\r\n    ApiClient.prototype.compileUrl = function (url) {\r\n        if (typeof url === \"string\") {\r\n            var rootUrl = this.appOptions.apiUrl.toString();\r\n            if (url.indexOf(rootUrl) < 0) {\r\n                return new URL(\"\" + rootUrl + url);\r\n            }\r\n        }\r\n        return url;\r\n    };\r\n    ApiClient.prototype.internalRequest = function (url, method, data, headers) {\r\n        url = this.compileUrl(url);\r\n        var request = {\r\n            url: url,\r\n            method: method\r\n        };\r\n        if (data) {\r\n            request.data = data;\r\n        }\r\n        if (headers) {\r\n            request.headers = headers;\r\n        }\r\n        return this.request(request);\r\n    };\r\n    ApiClient.prototype.unquote = function (quotedString) {\r\n        return quotedString.substr(1, quotedString.length - 2).replace(/(?:(?:\\r\\n)?[ \\t])+/g, ' ');\r\n    };\r\n    ApiClient.prototype.headerExists = function (headers, key) {\r\n        return headers && (headers.hasOwnProperty(key) || headers.hasOwnProperty(key.toLowerCase()));\r\n    };\r\n    ApiClient.prototype.getHeader = function (headers, key) {\r\n        if (headers) {\r\n            var header = headers[key] || headers[key.toLowerCase()];\r\n            if (Array.isArray(header)) {\r\n                header = header.join(';');\r\n            }\r\n            return header;\r\n        }\r\n        return undefined;\r\n    };\r\n    ApiClient.prototype.parseWWWAuthenticateHeader = function (value) {\r\n        if (value) {\r\n            var tokens = value.match(this.wwwAuthenticateTokenizer);\r\n            if (tokens && tokens.length > 0) {\r\n                var wwwAutheniticate = {\r\n                    scheme: tokens[0]\r\n                };\r\n                if (tokens.length > 1) {\r\n                    var details = {};\r\n                    for (var i = 1, l = tokens.length; i < l; i++) {\r\n                        var values = tokens[i].split('=');\r\n                        details[values[0]] = this.unquote(values[1]);\r\n                    }\r\n                    wwwAutheniticate.details = details;\r\n                }\r\n                return wwwAutheniticate;\r\n            }\r\n        }\r\n    };\r\n    return ApiClient;\r\n}());\r\nApiClient = tslib_1.__decorate([\r\n    inversify_1.injectable(),\r\n    tslib_1.__param(0, inversify_1.inject(contracts_1.TYPES.IAppOptions)),\r\n    tslib_1.__param(1, inversify_1.inject(_1.httpTYPES.IHttpClient)),\r\n    tslib_1.__param(2, inversify_1.inject(contracts_1.TYPES.ITokenHandler)),\r\n    tslib_1.__param(3, inversify_1.inject(common_1.TYPES.IHALParser)),\r\n    tslib_1.__metadata(\"design:paramtypes\", [typeof (_a = typeof contracts_1.IAppOptions !== \"undefined\" && contracts_1.IAppOptions) === \"function\" && _a || Object, typeof (_b = typeof _1.IHttpClient !== \"undefined\" && _1.IHttpClient) === \"function\" && _b || Object, typeof (_c = typeof contracts_1.ITokenHandler !== \"undefined\" && contracts_1.ITokenHandler) === \"function\" && _c || Object, typeof (_d = typeof common_1.IHALParser !== \"undefined\" && common_1.IHALParser) === \"function\" && _d || Object])\r\n], ApiClient);\r\nexports.ApiClient = ApiClient;\r\n;\r\nvar _a, _b, _c, _d;\r\n\n\n/***/ }),\n/* 105 */\n/***/ (function(module, exports, __webpack_require__) {\n\n\"use strict\";\n\r\nfunction __export(m) {\r\n    for (var p in m) if (!exports.hasOwnProperty(p)) exports[p] = m[p];\r\n}\r\nObject.defineProperty(exports, \"__esModule\", { value: true });\r\n__export(__webpack_require__(106));\r\n\n\n/***/ }),\n/* 106 */\n/***/ (function(module, exports, __webpack_require__) {\n\n\"use strict\";\n\r\nObject.defineProperty(exports, \"__esModule\", { value: true });\r\nvar tslib_1 = __webpack_require__(1);\r\nvar inversify_1 = __webpack_require__(0);\r\nvar JQueryHttpClient = (function () {\r\n    function JQueryHttpClient() {\r\n    }\r\n    JQueryHttpClient.prototype.request = function (request) {\r\n        var jqueryParams = {\r\n            method: request.method,\r\n            xhrFields: {\r\n                withCredentials: true\r\n            }\r\n        };\r\n        if (request.headers) {\r\n            jqueryParams.headers = request.headers;\r\n        }\r\n        if (request.data) {\r\n            jqueryParams.data = request.data;\r\n        }\r\n        return $.ajax(request.url.toString(), jqueryParams)\r\n            .then(function (data, textStatus, jqXHR) {\r\n            return {\r\n                request: request,\r\n                statusText: textStatus,\r\n                statusCode: jqXHR.status,\r\n                headers: parseHeaders(jqXHR.getAllResponseHeaders()),\r\n                data: data\r\n            };\r\n        }, function (jqXHR, textStatus, errorThrown) {\r\n            return {\r\n                request: request,\r\n                statusText: textStatus,\r\n                statusCode: jqXHR.status,\r\n                headers: parseHeaders(jqXHR.getAllResponseHeaders()),\r\n                data: jqXHR.responseText || jqXHR.responseXML\r\n            };\r\n        });\r\n    };\r\n    JQueryHttpClient.prototype.createPromise = function (deferFn) {\r\n        var deferred = $.Deferred();\r\n        deferFn(deferred.resolve, deferred.reject);\r\n        return deferred.promise();\r\n    };\r\n    return JQueryHttpClient;\r\n}());\r\nJQueryHttpClient = tslib_1.__decorate([\r\n    inversify_1.injectable()\r\n], JQueryHttpClient);\r\nexports.JQueryHttpClient = JQueryHttpClient;\r\nfunction parseHeaders(headers) {\r\n    var result = {};\r\n    if (headers) {\r\n        var arrayOfLines = headers.match(/[^\\r\\n]+/g);\r\n        for (var i = 0; i < arrayOfLines.length; i++) {\r\n            var line = arrayOfLines[i];\r\n            var keyValue = line.split(':');\r\n            if (keyValue.length === 2) {\r\n                result[keyValue[0]] = keyValue[1].trim();\r\n            }\r\n            else if (keyValue.length === 1) {\r\n                result[keyValue[0]] = null;\r\n            }\r\n        }\r\n    }\r\n    return result;\r\n}\r\n\n\n/***/ }),\n/* 107 */\n/***/ (function(module, exports, __webpack_require__) {\n\n\"use strict\";\n/* globals module */\r\n/**\r\n * @module applicationSettingsClient\r\n * @description  Application Settings Client provides an easy way to consume  Application Settings REST API end-points. In order to obtain needed routes `applicationSettingsClient` uses `applicationSettingsRoute`.\r\n */\r\n\r\nObject.defineProperty(exports, \"__esModule\", { value: true });\r\nvar tslib_1 = __webpack_require__(1);\r\nvar inversify_1 = __webpack_require__(0);\r\n;\r\nvar httpApi_1 = __webpack_require__(4);\r\nvar _1 = __webpack_require__(25);\r\nvar ApplicationSettingsClient = (function () {\r\n    function ApplicationSettingsClient(applicationSettingsRoute, apiClient) {\r\n        this.applicationSettingsRoute = applicationSettingsRoute;\r\n        this.apiClient = apiClient;\r\n    }\r\n    Object.defineProperty(ApplicationSettingsClient.prototype, \"routeDefinition\", {\r\n        /**\r\n         * Provides direct access to `applicationSettingsRoute`.\r\n         * @method\r\n         * @example ApplicationSettingsClient.routeDefinition.get(options)\r\n         **/\r\n        get: function () {\r\n            return this.applicationSettingsRoute;\r\n        },\r\n        enumerable: true,\r\n        configurable: true\r\n    });\r\n    /**\r\n     * Returns a promise that is resolved once the get action has been performed. Success response returns the application settings resource.\r\n     * @method\r\n     * @param options Query resource options object.\r\n     * @example applicationSettingsClient.get()\r\n                    .then(function (data) {\r\n                        // perform success action here\r\n                    },\r\n                     function (response, status, headers, config) {\r\n                        // perform error handling here\r\n                    });\r\n     **/\r\n    ApplicationSettingsClient.prototype.get = function (options) {\r\n        return this.apiClient.get(this.routeDefinition.get(options));\r\n    };\r\n    /**\r\n     * Returns a promise that is resolved once the update application settings action has been performed. This action updates the application setting resource. This route uses HAL enabled objects to obtain routes and therefore it doesn't use `applicationSettingsRoute` route template. Here is an example of how a route can be obtained from HAL enabled objects:\r\n     * ```\r\n     * let params = modelMapper.removeParams(appSettings);\r\n     * let uri = params['model'].links('put').href;\r\n     * ```\r\n     * @method\r\n     * @param data An application object used to update application settings of the specified application resource.\r\n     * @example // appSettings is a resource previously fetched using get action.\r\n                    appSettings.allowAnyOrigin = true;\r\n                    applicationSettingsClient.update(appSettings)\r\n                        .then(function (data) {\r\n                            // perform success action here\r\n                        },\r\n                         function (response, status, headers, config) {\r\n                            // perform error handling here\r\n                        });\r\n     **/\r\n    ApplicationSettingsClient.prototype.update = function (data) {\r\n        return this.apiClient.put(this.routeDefinition.update(data), this.routeDefinition.updateParams(data));\r\n    };\r\n    return ApplicationSettingsClient;\r\n}());\r\nApplicationSettingsClient = tslib_1.__decorate([\r\n    inversify_1.injectable(),\r\n    tslib_1.__param(0, inversify_1.inject(_1.TYPES.ApplicationSettingsRoute)),\r\n    tslib_1.__param(1, inversify_1.inject(httpApi_1.httpTYPES.ApiClient)),\r\n    tslib_1.__metadata(\"design:paramtypes\", [typeof (_a = typeof _1.ApplicationSettingsRoute !== \"undefined\" && _1.ApplicationSettingsRoute) === \"function\" && _a || Object, typeof (_b = typeof httpApi_1.ApiClient !== \"undefined\" && httpApi_1.ApiClient) === \"function\" && _b || Object])\r\n], ApplicationSettingsClient);\r\nexports.ApplicationSettingsClient = ApplicationSettingsClient;\r\nvar _a, _b;\r\n/**\r\n * @copyright (c) 2017 Mono Ltd\r\n * @license MIT\r\n * @author Mono Ltd\r\n * @overview\r\n ***Notes:**\r\n - Refer to the [Baasic REST API](http://dev.baasic.com/api/reference/home) for detailed information about available Baasic REST API end-points.\r\n - All end-point objects are transformed by the associated route service.\r\n */ \r\n\n\n/***/ }),\n/* 108 */\n/***/ (function(module, exports, __webpack_require__) {\n\n\"use strict\";\n/* globals module */\r\n/**\r\n * @module applicationSettingsRoute\r\n * @description Baasic Application Settings Route Definition provides Baasic route templates which can be expanded to Baasic REST URIs. Various services can use Baasic Application Settings Route Service to obtain needed routes while other routes will be obtained through HAL. By convention, all route services  use the same function names as their corresponding services.\r\n */\r\n\r\nObject.defineProperty(exports, \"__esModule\", { value: true });\r\nvar tslib_1 = __webpack_require__(1);\r\nvar inversify_1 = __webpack_require__(0);\r\nvar common_1 = __webpack_require__(2);\r\nvar contracts_1 = __webpack_require__(3);\r\nvar ApplicationSettingsRoute = (function (_super) {\r\n    tslib_1.__extends(ApplicationSettingsRoute, _super);\r\n    function ApplicationSettingsRoute(appOptions) {\r\n        var _this = _super.call(this, appOptions) || this;\r\n        _this.appOptions = appOptions;\r\n        _this.getRoute = 'applications/{?embed,fields}';\r\n        _this.updateRoute = 'applications/';\r\n        return _this;\r\n    }\r\n    /**\r\n     * Parses get route; this route doesn't expose any properties.\r\n     * @method\r\n     * @param options Query resource options object.\r\n     * @example applicationSettingsRoute.get();\r\n     **/\r\n    ApplicationSettingsRoute.prototype.get = function (options) {\r\n        return _super.prototype.baseGet.call(this, this.getRoute, undefined, options);\r\n    };\r\n    /**\r\n     * Parses update route; this route doesn't expose any properties.\r\n     * @method\r\n     * @param data An application object used to update application settings of the specified application resource.\r\n     * @example applicationSettingsRoute.update();\r\n     **/\r\n    ApplicationSettingsRoute.prototype.update = function (data) {\r\n        return _super.prototype.baseUpdate.call(this, this.updateRoute, data);\r\n    };\r\n    return ApplicationSettingsRoute;\r\n}(common_1.BaseRoute));\r\nApplicationSettingsRoute = tslib_1.__decorate([\r\n    inversify_1.injectable(),\r\n    tslib_1.__param(0, inversify_1.inject(contracts_1.TYPES.IAppOptions)),\r\n    tslib_1.__metadata(\"design:paramtypes\", [typeof (_a = typeof contracts_1.IAppOptions !== \"undefined\" && contracts_1.IAppOptions) === \"function\" && _a || Object])\r\n], ApplicationSettingsRoute);\r\nexports.ApplicationSettingsRoute = ApplicationSettingsRoute;\r\nvar _a;\r\n/**\r\n * @copyright (c) 2017 Mono Ltd\r\n * @license MIT\r\n * @author Mono Ltd\r\n * @overview\r\n ***Notes:**\r\n - Refer to the [Baasic REST API](http://dev.baasic.com/api/reference/home) for detailed information about available Baasic REST API end-points.\r\n - [URI Template](https://github.com/Baasic/uritemplate-js) syntax enables expanding the Baasic route templates to Baasic REST URIs providing it with an object that contains URI parameters.\r\n - All end-point objects are transformed by the associated route service.\r\n */ \r\n\n\n/***/ }),\n/* 109 */\n/***/ (function(module, exports, __webpack_require__) {\n\n\"use strict\";\n\r\nObject.defineProperty(exports, \"__esModule\", { value: true });\r\nvar inversify_1 = __webpack_require__(0);\r\nvar _1 = __webpack_require__(25);\r\nvar TYPES = {\r\n    ApplicationSettingsClient: Symbol(\"ApplicationSettingsClient\"),\r\n    ApplicationSettingsRoute: Symbol(\"ApplicationSettingsRoute\")\r\n};\r\nexports.TYPES = TYPES;\r\nvar diModule = new inversify_1.ContainerModule(function (bind) {\r\n    bind(TYPES.ApplicationSettingsRoute).to(_1.ApplicationSettingsRoute);\r\n    bind(TYPES.ApplicationSettingsClient).to(_1.ApplicationSettingsClient);\r\n});\r\nexports.diModule = diModule;\r\n\n\n/***/ }),\n/* 110 */\n/***/ (function(module, exports, __webpack_require__) {\n\n\"use strict\";\n\r\nObject.defineProperty(exports, \"__esModule\", { value: true });\r\nvar ALPHABET = {\r\n    a: /[\\u0061\\u24D0\\uFF41\\u1E9A\\u00E0\\u00E1\\u00E2\\u1EA7\\u1EA5\\u1EAB\\u1EA9\\u00E3\\u0101\\u0103\\u1EB1\\u1EAF\\u1EB5\\u1EB3\\u0227\\u01E1\\u00E4\\u01DF\\u1EA3\\u00E5\\u01FB\\u01CE\\u0201\\u0203\\u1EA1\\u1EAD\\u1EB7\\u1E01\\u0105\\u2C65\\u0250]/ig,\r\n    aa: /[\\uA733]/ig,\r\n    ae: /[\\u00E6\\u01FD\\u01E3]/ig,\r\n    ao: /[\\uA735]/ig,\r\n    au: /[\\uA737]/ig,\r\n    av: /[\\uA739\\uA73B]/ig,\r\n    ay: /[\\uA73D]/ig,\r\n    b: /[\\u0062\\u24D1\\uFF42\\u1E03\\u1E05\\u1E07\\u0180\\u0183\\u0253]/ig,\r\n    c: /[\\u0063\\u24D2\\uFF43\\u0107\\u0109\\u010B\\u010D\\u00E7\\u1E09\\u0188\\u023C\\uA73F\\u2184]/ig,\r\n    d: /[\\u0064\\u24D3\\uFF44\\u1E0B\\u010F\\u1E0D\\u1E11\\u1E13\\u1E0F\\u0111\\u018C\\u0256\\u0257\\uA77A]/ig,\r\n    dz: /[\\u01F3\\u01C6]/ig,\r\n    e: /[\\u0065\\u24D4\\uFF45\\u00E8\\u00E9\\u00EA\\u1EC1\\u1EBF\\u1EC5\\u1EC3\\u1EBD\\u0113\\u1E15\\u1E17\\u0115\\u0117\\u00EB\\u1EBB\\u011B\\u0205\\u0207\\u1EB9\\u1EC7\\u0229\\u1E1D\\u0119\\u1E19\\u1E1B\\u0247\\u025B\\u01DD]/ig,\r\n    f: /[\\u0066\\u24D5\\uFF46\\u1E1F\\u0192\\uA77C]/ig,\r\n    g: /[\\u0067\\u24D6\\uFF47\\u01F5\\u011D\\u1E21\\u011F\\u0121\\u01E7\\u0123\\u01E5\\u0260\\uA7A1\\u1D79\\uA77F]/ig,\r\n    h: /[\\u0068\\u24D7\\uFF48\\u0125\\u1E23\\u1E27\\u021F\\u1E25\\u1E29\\u1E2B\\u1E96\\u0127\\u2C68\\u2C76\\u0265]/ig,\r\n    hv: /[\\u0195]/ig,\r\n    i: /[\\u0069\\u24D8\\uFF49\\u00EC\\u00ED\\u00EE\\u0129\\u012B\\u012D\\u00EF\\u1E2F\\u1EC9\\u01D0\\u0209\\u020B\\u1ECB\\u012F\\u1E2D\\u0268\\u0131]/ig,\r\n    j: /[\\u006A\\u24D9\\uFF4A\\u0135\\u01F0\\u0249]/ig,\r\n    k: /[\\u006B\\u24DA\\uFF4B\\u1E31\\u01E9\\u1E33\\u0137\\u1E35\\u0199\\u2C6A\\uA741\\uA743\\uA745\\uA7A3]/ig,\r\n    l: /[\\u006C\\u24DB\\uFF4C\\u0140\\u013A\\u013E\\u1E37\\u1E39\\u013C\\u1E3D\\u1E3B\\u017F\\u0142\\u019A\\u026B\\u2C61\\uA749\\uA781\\uA747]/ig,\r\n    lj: /[\\u01C9]/ig,\r\n    m: /[\\u006D\\u24DC\\uFF4D\\u1E3F\\u1E41\\u1E43\\u0271\\u026F]/ig,\r\n    n: /[\\u006E\\u24DD\\uFF4E\\u01F9\\u0144\\u00F1\\u1E45\\u0148\\u1E47\\u0146\\u1E4B\\u1E49\\u019E\\u0272\\u0149\\uA791\\uA7A5]/ig,\r\n    nj: /[\\u01CC]/ig,\r\n    o: /[\\u006F\\u24DE\\uFF4F\\u00F2\\u00F3\\u00F4\\u1ED3\\u1ED1\\u1ED7\\u1ED5\\u00F5\\u1E4D\\u022D\\u1E4F\\u014D\\u1E51\\u1E53\\u014F\\u022F\\u0231\\u00F6\\u022B\\u1ECF\\u0151\\u01D2\\u020D\\u020F\\u01A1\\u1EDD\\u1EDB\\u1EE1\\u1EDF\\u1EE3\\u1ECD\\u1ED9\\u01EB\\u01ED\\u00F8\\u01FF\\u0254\\uA74B\\uA74D\\u0275]/ig,\r\n    oi: /[\\u01A3]/ig,\r\n    ou: /[\\u0223]/ig,\r\n    oo: /[\\uA74F]/ig,\r\n    p: /[\\u0070\\u24DF\\uFF50\\u1E55\\u1E57\\u01A5\\u1D7D\\uA751\\uA753\\uA755]/ig,\r\n    q: /[\\u0071\\u24E0\\uFF51\\u024B\\uA757\\uA759]/ig,\r\n    r: /[\\u0072\\u24E1\\uFF52\\u0155\\u1E59\\u0159\\u0211\\u0213\\u1E5B\\u1E5D\\u0157\\u1E5F\\u024D\\u027D\\uA75B\\uA7A7\\uA783]/ig,\r\n    s: /[\\u0073\\u24E2\\uFF53\\u015B\\u1E65\\u015D\\u1E61\\u0161\\u1E67\\u1E63\\u1E69\\u0219\\u015F\\u023F\\uA7A9\\uA785\\u1E9B]/ig,\r\n    ss: /[\\u00DF\\u1E9E]/ig,\r\n    t: /[\\u0074\\u24E3\\uFF54\\u1E6B\\u1E97\\u0165\\u1E6D\\u021B\\u0163\\u1E71\\u1E6F\\u0167\\u01AD\\u0288\\u2C66\\uA787]/ig,\r\n    tz: /[\\uA729]/ig,\r\n    u: /[\\u0075\\u24E4\\uFF55\\u00F9\\u00FA\\u00FB\\u0169\\u1E79\\u016B\\u1E7B\\u016D\\u00FC\\u01DC\\u01D8\\u01D6\\u01DA\\u1EE7\\u016F\\u0171\\u01D4\\u0215\\u0217\\u01B0\\u1EEB\\u1EE9\\u1EEF\\u1EED\\u1EF1\\u1EE5\\u1E73\\u0173\\u1E77\\u1E75\\u0289]/ig,\r\n    v: /[\\u0076\\u24E5\\uFF56\\u1E7D\\u1E7F\\u028B\\uA75F\\u028C]/ig,\r\n    vy: /[\\uA761]/ig,\r\n    w: /[\\u0077\\u24E6\\uFF57\\u1E81\\u1E83\\u0175\\u1E87\\u1E85\\u1E98\\u1E89\\u2C73]/ig,\r\n    x: /[\\u0078\\u24E7\\uFF58\\u1E8B\\u1E8D]/ig,\r\n    y: /[\\u0079\\u24E8\\uFF59\\u1EF3\\u00FD\\u0177\\u1EF9\\u0233\\u1E8F\\u00FF\\u1EF7\\u1E99\\u1EF5\\u01B4\\u024F\\u1EFF]/ig,\r\n    z: /[\\u007A\\u24E9\\uFF5A\\u017A\\u1E91\\u017C\\u017E\\u1E93\\u1E95\\u01B6\\u0225\\u0240\\u2C6C\\uA763]/ig,\r\n    '': /[\\u0300\\u0301\\u0302\\u0303\\u0308]/ig\r\n};\r\nexports.ALPHABET = ALPHABET;\r\n\n\n/***/ }),\n/* 111 */\n/***/ (function(module, exports, __webpack_require__) {\n\n\"use strict\";\n/* globals module */\r\n/**\r\n * @module articleACLClient\r\n * @description  Article ACL Client provides an easy way to consume  Articles REST API end-points. In order to obtain needed routes `articleACLClient` uses `articleACLRoute`.\r\n */\r\n\r\nObject.defineProperty(exports, \"__esModule\", { value: true });\r\nvar tslib_1 = __webpack_require__(1);\r\nvar inversify_1 = __webpack_require__(0);\r\n;\r\nvar httpApi_1 = __webpack_require__(4);\r\nvar _1 = __webpack_require__(6);\r\nvar ArticleACLClient = (function () {\r\n    function ArticleACLClient(articleACLRoute, apiClient) {\r\n        this.articleACLRoute = articleACLRoute;\r\n        this.apiClient = apiClient;\r\n    }\r\n    Object.defineProperty(ArticleACLClient.prototype, \"routeDefinition\", {\r\n        get: function () {\r\n            return this.articleACLRoute;\r\n        },\r\n        enumerable: true,\r\n        configurable: true\r\n    });\r\n    /**\r\n     * Returns a promise that is resolved once the get action has been performed. Success response returns a list of ACL policies established for the specified article resource.\r\n     * @method\r\n     * @example articleACLClient.get({id: '<article-id>'})\r\n                    .then(function (data) {\r\n                        // perform success action here\r\n                    },\r\n                     function (response, status, headers, config) {\r\n                         // perform error handling here\r\n                    });\r\n     **/\r\n    ArticleACLClient.prototype.get = function (options) {\r\n        return this.apiClient.get(this.routeDefinition.get(options));\r\n    };\r\n    /**\r\n     * Returns a promise that is resolved once the update acl action has been performed, this action creates new ACL policy for the specified article resource.\r\n     * @method\r\n     * @param options An ACL policy object that needs to be updated in the system. This object specifies parameters necessary for establishing user and/or role set of rights.\r\n     * @returns A promise that is resolved once the update acl action has been performed.\r\n     * @example let options = {id : '<article-id>'};\r\n                let aclObj =  {\r\n                    actionId: '<action-id'>,\r\n                    roleId: '<roleId>',\r\n                    userId: '<userId>'\r\n                };\r\n                options[baasicConstants.modelPropertyName] = aclObj;\r\n                articleACLClient.update(options)\r\n                    .then(function (data) {\r\n                        // perform success action here\r\n                    },\r\n                     function (response, status, headers, config) {\r\n                         // perform error handling here\r\n                    });\r\n     **/\r\n    ArticleACLClient.prototype.update = function (options) {\r\n        return this.apiClient.put(this.routeDefinition.update(options), this.routeDefinition.updateParams(options));\r\n    };\r\n    /**\r\n     * Returns a promise that is resolved once the removeByUser action has been performed. This action deletes ACL policy assigned to the specified user and article resource.\r\n     * @method\r\n     * @param articleId Article id which uniquely identifies article resource whose security privileges need to be retrieved and updated.\r\n     * @param action Action abbreviation which identifies ACL policy assigned to the specified user and article resource.\r\n     *               Supported Values:\r\n     *               \"Create\"\r\n     *               \"Delete\"\r\n     *               \"Read\"\r\n     *               \"Update\"\r\n     * @param user A value that uniquely identifies user for which ACL policy needs to be removed.\r\n     * @param data An ACL policy object that needs to be updated in the system.\r\n     * @returns A promise that is resolved once the removeByUser action has been performed.\r\n     * @example articleACLClient.removeByUser('<article-id>', '<access-action>', '<username>')\r\n                    .then(function (data) {\r\n                        // perform success action here\r\n                    },\r\n                     function (response, status, headers, config) {\r\n                         // perform error handling here\r\n                    });\r\n     **/\r\n    ArticleACLClient.prototype.removeByUser = function (articleId, action, user, data) {\r\n        return this.apiClient.delete(this.articleACLRoute.deleteByUser(articleId, action, user, data));\r\n    };\r\n    /**\r\n     * Returns a promise that is resolved once the removeByRole action has been performed. This action deletes ACL policy assigned to the specified role and article resource.\r\n     * @method\r\n     * @param articleId Article id which uniquely identifies article resource whose security privileges need to be retrieved and updated.\r\n     * @param action Action abbreviation which identifies ACL policy assigned to the specified user and article resource.\r\n     *               Supported Values:\r\n     *               \"Create\"\r\n     *               \"Delete\"\r\n     *               \"Read\"\r\n     *               \"Update\"\r\n     * @param role A value that uniquely identifies role for which ACL policy needs to be removed.\r\n     * @param data An ACL policy object that needs to be updated in the system.\r\n     * @returns A promise that is resolved once the removeByRole action has been performed.\r\n     * @example articleACLClient.removeByRole('<article-id>', '<access-action>', '<role-name>')\r\n                    .then(function (data) {\r\n                        // perform success action here\r\n                    },\r\n                     function (response, status, headers, config) {\r\n                         // perform error handling here\r\n                    });\r\n     **/\r\n    ArticleACLClient.prototype.removeByRole = function (articleId, action, role, data) {\r\n        return this.apiClient.delete(this.articleACLRoute.deleteByRole(articleId, action, role, data));\r\n    };\r\n    return ArticleACLClient;\r\n}());\r\nArticleACLClient = tslib_1.__decorate([\r\n    inversify_1.injectable(),\r\n    tslib_1.__param(0, inversify_1.inject(_1.TYPES.ArticleACLRoute)),\r\n    tslib_1.__param(1, inversify_1.inject(httpApi_1.httpTYPES.ApiClient)),\r\n    tslib_1.__metadata(\"design:paramtypes\", [typeof (_a = typeof _1.ArticleACLRoute !== \"undefined\" && _1.ArticleACLRoute) === \"function\" && _a || Object, typeof (_b = typeof httpApi_1.ApiClient !== \"undefined\" && httpApi_1.ApiClient) === \"function\" && _b || Object])\r\n], ArticleACLClient);\r\nexports.ArticleACLClient = ArticleACLClient;\r\nvar _a, _b;\r\n/**\r\n * @copyright (c) 2017 Mono Ltd\r\n * @license MIT\r\n * @author Mono Ltd\r\n * @overview\r\n ***Notes:**\r\n - Refer to the [Baasic REST API](http://dev.baasic.com/api/reference/home) for detailed information about available Baasic REST API end-points.\r\n - All end-point objects are transformed by the associated route service.\r\n */ \r\n\n\n/***/ }),\n/* 112 */\n/***/ (function(module, exports, __webpack_require__) {\n\n\"use strict\";\n/* globals module */\r\n/**\r\n * @module baasicArticleACLRouteService\r\n * @description Baasic Article ACL Route Definition provides Baasic route templates which can be expanded to Baasic REST URIs. Various services can use Baasic Article Route Service to obtain needed routes while other routes will be obtained through HAL. By convention, all route services use the same function names as their corresponding services.\r\n */\r\n\r\nObject.defineProperty(exports, \"__esModule\", { value: true });\r\nvar tslib_1 = __webpack_require__(1);\r\nvar inversify_1 = __webpack_require__(0);\r\nvar common_1 = __webpack_require__(2);\r\n;\r\nvar contracts_1 = __webpack_require__(3);\r\nvar ArticleACLRoute = (function (_super) {\r\n    tslib_1.__extends(ArticleACLRoute, _super);\r\n    function ArticleACLRoute(appOptions) {\r\n        var _this = _super.call(this, appOptions) || this;\r\n        _this.appOptions = appOptions;\r\n        _this.getRoute = 'articles/{id}/acl/{?fields}';\r\n        _this.updateRoute = 'articles/{id}/acl/{?fields}';\r\n        _this.deleteByUserRoute = 'articles/{id}/acl/actions/{accessAction}/users/{user}/';\r\n        _this.deleteByRoleRoute = 'articles/{id}/acl/actions/{accessAction}/roles/{role}/';\r\n        return _this;\r\n    }\r\n    /**\r\n     * Parses get article acl route; this URI template should be expanded with the Id of the article.\r\n     * @method\r\n     * @example articleACLRoute.get({id: '<article-id>'});\r\n     **/\r\n    ArticleACLRoute.prototype.get = function (options) {\r\n        var params = this.utility.extend({}, options);\r\n        return _super.prototype.baseCreate.call(this, this.getRoute, params);\r\n    };\r\n    /**\r\n     * Parses update article acl route; this URI template should be expanded with the Id of the article.\r\n     * @method\r\n     * @example articleACLRoute.update({id: '<article-id>'});\r\n     **/\r\n    ArticleACLRoute.prototype.update = function (options) {\r\n        var params = this.utility.extend({}, options);\r\n        return _super.prototype.baseCreate.call(this, this.updateRoute, params);\r\n    };\r\n    /**\r\n     * Parses deleteByUser article acl route which can be expanded with additional options. Supported items are:\r\n     * - `id` - Id of the article.\r\n     * - `accessAction` - Action abbreviation which identifies ACL policy assigned to the specified user and article resource.\r\n     * - `user` - A value which uniquely identifies user for which ACL policy needs to be removed.\r\n     * @method\r\n     * @param articleId Article id which uniquely identifies article resource whose security privileges need to be retrieved and updated.\r\n     * @param action Action abbreviation which identifies ACL policy assigned to the specified user and article resource.\r\n     *               Supported Values:\r\n     *               \"Create\"\r\n     *               \"Delete\"\r\n     *               \"Read\"\r\n     *               \"Update\"\r\n     * @param user A value that uniquely identifies user for which ACL policy needs to be removed.\r\n     * @param data An ACL policy object that needs to be updated in the system.\r\n     * @example articleACLRoute.deleteByUser({\r\n                        id: '<article-id>',\r\n                        accessAction: '<access-action>',\r\n                        user: '<username>'\r\n                });\r\n     **/\r\n    ArticleACLRoute.prototype.deleteByUser = function (articleId, action, user, data) {\r\n        var params = this.modelMapper.removeParams(data);\r\n        params.articleId = articleId;\r\n        params.user = user;\r\n        params.accessAction = action;\r\n        return _super.prototype.baseCreate.call(this, this.deleteByUserRoute, params);\r\n    };\r\n    /**\r\n     * Parses deleteByUser article acl route which can be expanded with additional options. Supported items are:\r\n     * - `id` - Id of the article.\r\n     * - `accessAction` - Action abbreviation which identifies ACL policy assigned to the specified role and article resource.\r\n     * - `role` - A value which uniquely identifies role for which ACL policy needs to be removed.\r\n     * @method\r\n     * @param articleId Article id which uniquely identifies article resource whose security privileges need to be retrieved and updated.\r\n     * @param action Action abbreviation which identifies ACL policy assigned to the specified user and article resource.\r\n     *               Supported Values:\r\n     *               \"Create\"\r\n     *               \"Delete\"\r\n     *               \"Read\"\r\n     *               \"Update\"\r\n     * @param role A value that uniquely identifies role for which ACL policy needs to be removed.\r\n     * @param data An ACL policy object that needs to be updated in the system.\r\n     * @example articleACLRoute.deleteByRole({\r\n                    id: '<article-id>',\r\n                    accessAction: '<access-action>',\r\n                    role: '<role-name>'\r\n                });\r\n     **/\r\n    ArticleACLRoute.prototype.deleteByRole = function (articleId, action, role, data) {\r\n        var params = this.modelMapper.removeParams(data);\r\n        params.articleId = articleId;\r\n        params.role = role;\r\n        params.accessAction = action;\r\n        return _super.prototype.baseCreate.call(this, this.deleteByRoleRoute, params);\r\n    };\r\n    ArticleACLRoute.prototype.updateParams = function (options) {\r\n        var params = this.utility.extend({}, options);\r\n        return params[this.modelMapper.modelPropertyName];\r\n    };\r\n    return ArticleACLRoute;\r\n}(common_1.BaseRoute));\r\nArticleACLRoute = tslib_1.__decorate([\r\n    tslib_1.__param(0, inversify_1.inject(contracts_1.TYPES.IAppOptions)),\r\n    tslib_1.__metadata(\"design:paramtypes\", [typeof (_a = typeof contracts_1.IAppOptions !== \"undefined\" && contracts_1.IAppOptions) === \"function\" && _a || Object])\r\n], ArticleACLRoute);\r\nexports.ArticleACLRoute = ArticleACLRoute;\r\nvar _a;\r\n/**\r\n * @copyright (c) 2017 Mono Ltd\r\n * @license MIT\r\n * @author Mono Ltd\r\n * @overview\r\n ***Notes:**\r\n - Refer to the [Baasic REST API](http://dev.baasic.com/api/reference/home) for detailed information about available Baasic REST API end-points.\r\n - [URI Template](https://github.com/Baasic/uritemplate-js) syntax enables expanding the Baasic route templates to Baasic REST URIs providing it with an object that contains URI parameters.\r\n - All end-point objects are transformed by the associated route service.\r\n */ \r\n\n\n/***/ }),\n/* 113 */\n/***/ (function(module, exports, __webpack_require__) {\n\n\"use strict\";\n/* globals module */\r\n/**\r\n * @module articleCommentRepliesClient\r\n * @description  Article Comment Replies Client provides an easy way to consume  Article Comment Replies REST API end-points. `articleCommentRepliesService` functions enable performing standard CRUD operations directly on article comment reply resources, whereas the `articleClient` functions allow management between article and article comment reply. In order to obtain needed routes `articleCommentRepliesService` uses `articleCommentRepliesRoute`.\r\n*/\r\n\r\nObject.defineProperty(exports, \"__esModule\", { value: true });\r\nvar tslib_1 = __webpack_require__(1);\r\nvar inversify_1 = __webpack_require__(0);\r\n;\r\nvar httpApi_1 = __webpack_require__(4);\r\nvar _1 = __webpack_require__(6);\r\nvar ArticleCommentRepliesClient = (function () {\r\n    function ArticleCommentRepliesClient(articleCommentRepliesRoute, apiClient) {\r\n        this.articleCommentRepliesRoute = articleCommentRepliesRoute;\r\n        this.apiClient = apiClient;\r\n        /**\r\n         * Contains a reference to valid list of article comment reply states. It returns an object containing all article comment reply states.\r\n         * @method\r\n         * @example articleCommentRepliesClient.statuses.approved;\r\n         **/\r\n        this.statuses = _1.CommentStatus;\r\n    }\r\n    Object.defineProperty(ArticleCommentRepliesClient.prototype, \"routeDefinition\", {\r\n        /**\r\n         * Provides direct access to `articleCommentRepliesRoute`.\r\n         * @method\r\n         * @example articleCommentRepliesClient.routeDefinition.get();\r\n         **/\r\n        get: function () {\r\n            return this.articleCommentRepliesRoute;\r\n        },\r\n        enumerable: true,\r\n        configurable: true\r\n    });\r\n    /**\r\n     * Returns a promise that is resolved once the approve article comment reply action has been performed. This action sets the state of an article comment reply to \"approved\". This route uses HAL enabled objects to obtain routes and therefore it doesn't apply `articleCommentRepliesRoute` route template. Here is an example of how a route can be obtained from HAL enabled objects:\r\n     * ```\r\n     * let params = modelMapper.updateParams(articleCommentReply);\r\n     * let uri = params['model'].links('comment-approve').href;\r\n     * ```\r\n     * @method\r\n     * @param data Article Comment Reply object.\r\n     * @param options Notification configuration used to control the article comment recourse access when managing notification distribution.\r\n     * @returns A promise that is resolved once the approve article comment reply action has been performed.\r\n     * @example // articleCommentReply is a resource previously fetched using get action.\r\n                    articleCommentRepliesClient.approve(articleCommentReply, commentOptions)\r\n                        .then(function (data) {\r\n                            // perform success action here\r\n                        },\r\n                         function (response, status, headers, config) {\r\n                            // perform error handling here\r\n                        });\r\n     **/\r\n    ArticleCommentRepliesClient.prototype.approve = function (data, options) {\r\n        return this.apiClient.put(this.routeDefinition.approve(data), this.routeDefinition.updateParams(data));\r\n    };\r\n    /**\r\n     * Returns a promise that is resolved once the unapprove article comment reply action has been performed. This action sets the state of an article comment reply to \"unapproved\". This route uses HAL enabled objects to obtain routes and therefore it doesn't apply `articleCommentRepliesRoute` route template. Here is an example of how a route can be obtained from HAL enabled objects:\r\n     * ```\r\n     * let params = modelMapper.updateParams(articleCommentReply);\r\n     * let uri = params['model'].links('comment-unapprove').href;\r\n     * ```\r\n     * @method\r\n     * @param data Article Comment Reply object.\r\n     * @returns A promise that is resolved once the unapprove article comment reply action has been performed.\r\n     * @example // articleCommentReply is a resource previously fetched using get action.\r\n                    articleCommentRepliesClient.unapprove(articleCommentReply)\r\n                        .then(function (data) {\r\n                            // perform success action here\r\n                        },\r\n                         function (response, status, headers, config) {\r\n                            // perform error handling here\r\n                        });\r\n     **/\r\n    ArticleCommentRepliesClient.prototype.unapprove = function (data) {\r\n        return this.apiClient.put(this.routeDefinition.unapprove(data), this.routeDefinition.updateParams(data));\r\n    };\r\n    /**\r\n     * Returns a promise that is resolved once the create article comment reply action has been performed; this action creates a new comment reply for an article.\r\n     * @method\r\n     * @param data An article comment reply object that needs to be inserted into the system.\r\n     * @returns A promise that is resolved once the create article comment reply action has been performed.\r\n     * @example articleCommentRepliesClient.create('<article-id>', {\r\n                    commentId : '<comment-id>',\r\n                    comment : <comment>,\r\n                    userId : '<user-id>' })\r\n                .then(function (data) {\r\n                    // perform success action here\r\n                },\r\n                 function (response, status, headers, config) {\r\n                    // perform error handling here\r\n                });\r\n     **/\r\n    ArticleCommentRepliesClient.prototype.create = function (data) {\r\n        return this.apiClient.post(this.routeDefinition.create(data), this.routeDefinition.createParams(data));\r\n    };\r\n    /**\r\n     * Returns a promise that is resolved once the find action has been performed. Success response returns a list of article comment reply resources matching the given criteria.\r\n     * @method\r\n     * @param options Query resource options object.\r\n     * @returns A promise that is resolved once the find action has been performed.\r\n     * @example articleCommentRepliesClient.find({\r\n                    pageNumber : 1,\r\n                    pageSize : 10,\r\n                    orderBy : '<field>',\r\n                    orderDirection : '<asc|desc>',\r\n                    search : '<search-phrase>'\r\n                })\r\n                .then(function (collection) {\r\n                    // perform success action here\r\n                },\r\n                 function (response, status, headers, config) {\r\n                    // perform error handling here\r\n                });\r\n     **/\r\n    ArticleCommentRepliesClient.prototype.find = function (options) {\r\n        return this.apiClient.get(this.routeDefinition.find(options));\r\n    };\r\n    /**\r\n     * Returns a promise that is resolved once the flag article comment reply action has been performed. This action sets the state of an article comment reply to \"flagged\". This route uses HAL enabled objects to obtain routes and therefore it doesn't apply `articleCommentRepliesRoute` route template. Here is an example of how a route can be obtained from HAL enabled objects:\r\n     * ```\r\n     * let params = modelMapper.updateParams(articleCommentReply);\r\n     * let uri = params['model'].links('comment-flag').href;\r\n     * ```\r\n     * @method\r\n     * @param data Article Comment Reply object.\r\n     * @returns A promise that is resolved once the flag article comment reply action has been performed.\r\n     * @example     // articleCommentReply is a resource previously fetched using get action.\r\n                        articleCommentRepliesClient.flag(articleCommentReply)\r\n                            .then(function (data) {\r\n                                // perform success action here\r\n                            },\r\n                             function (response, status, headers, config) {\r\n                                // perform error handling here\r\n                            });\r\n     **/\r\n    ArticleCommentRepliesClient.prototype.flag = function (data) {\r\n        return this.apiClient.put(this.routeDefinition.flag(data), this.routeDefinition.updateParams(data));\r\n    };\r\n    /**\r\n     * Returns a promise that is resolved once the unflag article comment reply action has been performed. This action removes the \"flagged\" comment reply state. This route uses HAL enabled objects to obtain routes and therefore it doesn't apply `articleCommentRepliesRoute` route template. Here is an example of how a route can be obtained from HAL enabled objects:\r\n     * ```\r\n     * let params = modelMapper.updateParams(articleCommentReply);\r\n     * let uri = params['model'].links('comment-unflag').href;\r\n     * ```\r\n     * @method\r\n     * @param data Article Comment Reply object.\r\n     * @returns A promise that is resolved once the unflag article comment reply action has been performed.\r\n     * @example // articleCommentReply is a resource previously fetched using get action.\r\n                    articleCommentRepliesClient.unflag(articleCommentReply)\r\n                        .success(function (data) {\r\n                            // perform success action here\r\n                        }).error(function (response, status, headers, config) {\r\n                            // perform error handling here\r\n                        });\r\n     **/\r\n    ArticleCommentRepliesClient.prototype.unflag = function (data) {\r\n        return this.apiClient.put(this.routeDefinition.unflag(data), this.routeDefinition.updateParams(data));\r\n    };\r\n    /**\r\n     * Returns a promise that is resolved once the get action has been performed. Success response returns the specified article comment reply resource.\r\n     * @method\r\n     * @param id Id which uniquely identifies article comment reply resource that needs to be retrieved.\r\n     * @param options Options object that contains embed data.\r\n     * @returns A promise that is resolved once the get action has been performed.\r\n     * @example articleCommentRepliesClient.get('<comment-reply-id>')\r\n                    .then(function (data) {\r\n                        // perform success action here\r\n                    },\r\n                     function (response, status, headers, config) {\r\n                         // perform error handling here\r\n                    });\r\n     **/\r\n    ArticleCommentRepliesClient.prototype.get = function (id, options) {\r\n        return this.apiClient.get(this.articleCommentRepliesRoute.get(id, options));\r\n    };\r\n    /**\r\n     * Returns a promise that is resolved once the remove article comment reply action has been performed. If the action is successfully completed, the article comment reply resource will be permanently removed from the system. This route uses HAL enabled objects to obtain routes and therefore it doesn't apply `articleCommentRepliesRoute` route template. Here is an example of how a route can be obtained from HAL enabled objects:\r\n     * ```\r\n     * let params = apiClient.removeParams(articleCommentReply);\r\n     * let uri = params['model'].links('delete').href;\r\n     * ```\r\n     * @method\r\n     * @param data An article Comment Reply object used to update specified article comment reply resource.\r\n     * @returns A promise that is resolved once the remove article comment reply action has been performed.\r\n     * @example // articleCommentReply is a resource previously fetched using get action.\r\n                    articleCommentRepliesClient.remove(articleCommentReply)\r\n                        .then(function (data) {\r\n                            // perform success action here\r\n                        },\r\n                         function (response, status, headers, config) {\r\n                            // perform error handling here\r\n                        });\r\n     **/\r\n    ArticleCommentRepliesClient.prototype.remove = function (data) {\r\n        return this.apiClient.delete(this.routeDefinition.delete(data));\r\n    };\r\n    /**\r\n     * Returns a promise that is resolved once the report article comment reply action has been performed. This action sets the state of an article comment reply to \"reported\". This route uses HAL enabled objects to obtain routes and therefore it doesn't apply `articleCommentRepliesRoute` route template. Here is an example of how a route can be obtained from HAL enabled objects:\r\n     * ```\r\n     * let params = modelMapper.updateParams(articleCommentReply);\r\n     * let uri = params['model'].links('comment-report').href;\r\n     * ```\r\n     * @method\r\n     * @param data Article Comment Reply object.\r\n     * @param options Notification configuration used to control the article comment recourse access when managing notification distribution.\r\n     * @returns A promise that is resolved once the report article comment reply action has been performed.\r\n     * @example // articleCommentReply is a resource previously fetched using get action.\r\n                    articleCommentRepliesClient.report(articleCommentReply, commentOptions)\r\n                        .then(function (data) {\r\n                            // perform success action here\r\n                        },\r\n                         function (response, status, headers, config) {\r\n                            // perform error handling here\r\n                        });\r\n     **/\r\n    ArticleCommentRepliesClient.prototype.report = function (data, options) {\r\n        return this.apiClient.put(this.routeDefinition.report(data), this.routeDefinition.updateParams(options));\r\n    };\r\n    /**\r\n     * Returns a promise that is resolved once the unreport article comment reply action has been performed. This action removes the \"reported\" comment reply state. This route uses HAL enabled objects to obtain routes and therefore it doesn't apply `articleCommentRepliesRoute` route template. Here is an example of how a route can be obtained from HAL enabled objects:\r\n     * ```\r\n     * let params = modelMapper.updateParams(articleCommentReply);\r\n     * let uri = params['model'].links('comment-unreport').href;\r\n     * ```\r\n     * @method\r\n     * @param data Article Comment Reply object.\r\n     * @returns A promise that is resolved once the unreport article comment reply action has been performed.\r\n     * @example // articleCommentReply is a resource previously fetched using get action.\r\n                    articleCommentRepliesClient.unreport(articleCommentReply)\r\n                        .then(function (data) {\r\n                            // perform success action here\r\n                        },\r\n                         function (response, status, headers, config) {\r\n                            // perform error handling here\r\n                        });\r\n     **/\r\n    ArticleCommentRepliesClient.prototype.unreport = function (data) {\r\n        return this.apiClient.put(this.routeDefinition.unreport(data), this.routeDefinition.updateParams(data));\r\n    };\r\n    /**\r\n     * Returns a promise that is resolved once the mark as spam article comment reply action has been performed. This action sets the state of an article comment reply to \"spam\". This route uses HAL enabled objects to obtain routes and therefore it doesn't apply `articleCommentRepliesRoute` route template. Here is an example of how a route can be obtained from HAL enabled objects:\r\n     * ```\r\n     * let params = modelMapper.updateParams(articleCommentReply);\r\n     * let uri = params['model'].links('comment-spam').href;\r\n     * ```\r\n     * @method\r\n     * @param data Article Comment Reply object.\r\n     * @returns A promise that is resolved once the mark as spam article comment reply action has been performed.\r\n     * @example // articleCommentReply is a resource previously fetched using get action.\r\n                    articleCommentRepliesClient.spam(articleCommentReply)\r\n                        .then(function (data) {\r\n                            // perform success action here\r\n                        },\r\n                         function (response, status, headers, config) {\r\n                            // perform error handling here\r\n                        });\r\n     **/\r\n    ArticleCommentRepliesClient.prototype.spam = function (data) {\r\n        return this.apiClient.put(this.routeDefinition.spam(data), this.routeDefinition.updateParams(data));\r\n    };\r\n    /**\r\n     * Returns a promise that is resolved once the unspam article comment reply action has been performed. This action removes the \"spam\" comment reply state. This route uses HAL enabled objects to obtain routes and therefore it doesn't apply `articleCommentRepliesRoute` route template. Here is an example of how a route can be obtained from HAL enabled objects:\r\n     * ```\r\n     * let params = modelMapper.updateParams(articleCommentReply);\r\n     * let uri = params['model'].links('comment-unspam').href;\r\n     * ```\r\n     * @method\r\n     * @param data Article Comment Reply object.\r\n     * @returns A promise that is resolved once the unspam article comment reply action has been performed.\r\n     * @example // articleCommentReply is a resource previously fetched using get action.\r\n                      articleCommentRepliesClient.unspam(articleCommentReply)\r\n                        .then(function (data) {\r\n                            // perform success action here\r\n                        },\r\n                         function (response, status, headers, config) {\r\n                            // perform error handling here\r\n                        });\r\n     **/\r\n    ArticleCommentRepliesClient.prototype.unspam = function (data) {\r\n        return this.apiClient.put(this.routeDefinition.unspam(data), this.routeDefinition.updateParams(data));\r\n    };\r\n    /**\r\n     * Returns a promise that is resolved once the update article comment reply action has been performed; this action updates an article comment reply resource. This route uses HAL enabled objects to obtain routes and therefore it doesn't apply `articleCommentRepliesRoute` route template. Here is an example of how a route can be obtained from HAL enabled objects:\r\n     * ```\r\n     * let params = modelMapper.updateParams(articleCommentReply);\r\n     * let uri = params['model'].links('put').href;\r\n     * ```\r\n     * @method\r\n     * @param data An Article Comments Reply object used to update specified article comment reply resource.\r\n     * @returns A promise that is resolved once the update article comment reply action has been performed.\r\n     * @example // articleCommentReply is a resource previously fetched using get action.\r\n                    articleCommentRepliesClient.update(articleCommentReply)\r\n                        .then(function (data) {\r\n                            // perform success action here\r\n                        },\r\n                         function (response, status, headers, config) {\r\n                            // perform error handling here\r\n                        });\r\n     **/\r\n    ArticleCommentRepliesClient.prototype.update = function (data) {\r\n        return this.apiClient.put(this.routeDefinition.update(data), this.routeDefinition.updateParams(data));\r\n    };\r\n    return ArticleCommentRepliesClient;\r\n}());\r\nArticleCommentRepliesClient = tslib_1.__decorate([\r\n    inversify_1.injectable(),\r\n    tslib_1.__param(0, inversify_1.inject(_1.TYPES.ArticleCommentRepliesRoute)),\r\n    tslib_1.__param(1, inversify_1.inject(httpApi_1.httpTYPES.ApiClient)),\r\n    tslib_1.__metadata(\"design:paramtypes\", [typeof (_a = typeof _1.ArticleCommentRepliesRoute !== \"undefined\" && _1.ArticleCommentRepliesRoute) === \"function\" && _a || Object, typeof (_b = typeof httpApi_1.ApiClient !== \"undefined\" && httpApi_1.ApiClient) === \"function\" && _b || Object])\r\n], ArticleCommentRepliesClient);\r\nexports.ArticleCommentRepliesClient = ArticleCommentRepliesClient;\r\nvar _a, _b;\r\n/**\r\n * @overview\r\n ***Notes:**\r\n - Refer to the [REST API documentation](https://github.com/Baasic/baasic-rest-api/wiki) for detailed information about available Baasic REST API end-points.\r\n - All end-point objects are transformed by the associated route service.\r\n */ \r\n\n\n/***/ }),\n/* 114 */\n/***/ (function(module, exports, __webpack_require__) {\n\n\"use strict\";\n/* globals module */\r\n/**\r\n * @module articleCommentRepliesRoute\r\n * @description Baasic Article Comment Replies Route Definition provides Baasic route templates which can be expanded to Baasic REST URIs. Various services can use Baasic Article Comment Replies Route Service to obtain needed routes while other routes will be obtained through HAL. By convention, all route services use the same function names as their corresponding services.\r\n */\r\n\r\nObject.defineProperty(exports, \"__esModule\", { value: true });\r\nvar tslib_1 = __webpack_require__(1);\r\nvar inversify_1 = __webpack_require__(0);\r\nvar common_1 = __webpack_require__(2);\r\n;\r\nvar contracts_1 = __webpack_require__(3);\r\nvar ArticleCommentRepliesRoute = (function (_super) {\r\n    tslib_1.__extends(ArticleCommentRepliesRoute, _super);\r\n    function ArticleCommentRepliesRoute(appOptions) {\r\n        var _this = _super.call(this, appOptions) || this;\r\n        _this.appOptions = appOptions;\r\n        _this.findRoute = 'article-comment-replies/{?searchQuery,statuses,page,rpp,sort,embed,fields}';\r\n        _this.getRoute = 'article-comment-replies/{id}/{?embed,fields}';\r\n        _this.createRoute = 'article-comment-replies';\r\n        _this.updateRoute = 'article-comment-replies/{id}';\r\n        _this.deleteRoute = 'article-comment-replies/{id}';\r\n        _this.approveRoute = 'article-comment-replies/{id}/approve';\r\n        _this.unapproveRoute = 'article-comment-replies/{id}/unapprove';\r\n        _this.flagRoute = 'article-comment-replies/{id}/flag';\r\n        _this.unflagRoute = 'article-comment-replies/{id}/unflag';\r\n        _this.reportRoute = 'article-comment-replies/{id}/report';\r\n        _this.unreportRoute = 'article-comment-replies/{id}/unreport';\r\n        _this.spamRoute = 'article-comment-replies/{id}/spam';\r\n        _this.unspamRoute = 'article-comment-replies/{id}/unspam';\r\n        return _this;\r\n    }\r\n    /**\r\n     * Parses find route which can be expanded with additional options. Supported items are:\r\n     * - `searchQuery` - A string value used to identify article comment reply resources using the phrase search.\r\n     * - `page` - A value used to set the page number, i.e. to retrieve certain article comment reply subset from the storage.\r\n     * - `rpp` - A value used to limit the size of result set per page.\r\n     * - `sort` - A string used to set the article comment reply property to sort the result collection by.\r\n     * - `embed` - Comma separated list of resources to be contained within the current representation.\r\n     * - `statuses` - Comma separated list of article comment reply states that specify where search should be done (Allowed states: Approved, Spam, Reported, Flagged and UnApproved).\r\n     * @method\r\n     * @param options Query resource options object.\r\n     * @example articleCommentRepliesRoute.find({ searchQuery: '<search-phrase>' });\r\n     **/\r\n    ArticleCommentRepliesRoute.prototype.find = function (options) {\r\n        return _super.prototype.baseFind.call(this, this.findRoute, options);\r\n    };\r\n    /**\r\n     * Parses get route which can be expanded with additional options. Supported items are:\r\n     * - `id` - Id which uniquely identifies article comment reply resource that needs to be retrieved.\r\n     * - `embed` - Comma separated list of resources to be contained within the current representation.\r\n     * @method\r\n     * @param id Id which uniquely identifies article comment reply resource that needs to be retrieved.\r\n     * @param options Options object that contains embed data.\r\n     * @example articleCommentRepliesRoute.get({ id: '<comment-reply-id>' });\r\n     **/\r\n    ArticleCommentRepliesRoute.prototype.get = function (id, options) {\r\n        return _super.prototype.baseGet.call(this, this.getRoute, id, options);\r\n    };\r\n    /**\r\n     * Parses create article comment reply route; this URI template does not support any additional items.\r\n     * @method\r\n     * @param data An article comment reply object that needs to be inserted into the system.\r\n     * @example articleCommentRepliesRoute.create(data);\r\n     **/\r\n    ArticleCommentRepliesRoute.prototype.create = function (data) {\r\n        return _super.prototype.baseCreate.call(this, this.createRoute, data);\r\n    };\r\n    /**\r\n     * Parses update article comment reply route; this URI template does not support any additional items.\r\n     * @method\r\n     * @param data An Article Comments Reply object used to update specified article comment reply resource.\r\n     * @example articleCommentRepliesRoute.update(data);\r\n     **/\r\n    ArticleCommentRepliesRoute.prototype.update = function (data) {\r\n        return _super.prototype.baseUpdate.call(this, this.updateRoute, data);\r\n    };\r\n    /**\r\n    * Parses delete article comment reply route; this URI template does not support any additional items.\r\n    * @method\r\n    * @param data Article Comment Reply object.\r\n    * @example articleCommentRepliesRoute.delete(data);\r\n    **/\r\n    ArticleCommentRepliesRoute.prototype.delete = function (data) {\r\n        return _super.prototype.baseDelete.call(this, this.deleteRoute, data);\r\n    };\r\n    /**\r\n     * Parses approve article comment reply route; this URI template does not support any additional items.\r\n     * @method\r\n     * @param data Article Comment Reply object.\r\n     * @example articleCommentRepliesRoute.approve(data);\r\n     **/\r\n    ArticleCommentRepliesRoute.prototype.approve = function (data) {\r\n        return _super.prototype.baseUpdate.call(this, this.approveRoute, data, undefined, 'comment-approve');\r\n    };\r\n    /**\r\n    * Parses unapprove article comment reply route; this URI template does not support any additional items.\r\n    * @method\r\n    * @param data Article Comment Reply object.\r\n    * @example articleCommentRepliesRoute.unapprove(data);\r\n    **/\r\n    ArticleCommentRepliesRoute.prototype.unapprove = function (data) {\r\n        return _super.prototype.baseUpdate.call(this, this.unapproveRoute, data, undefined, 'comment-unapprove');\r\n    };\r\n    /**\r\n    * Parses flag article comment reply route; this URI template does not support any additional items.\r\n    * @method\r\n    * @param data Article Comment Reply object.\r\n    * @example articleCommentRepliesRoute.flag(data);\r\n    **/\r\n    ArticleCommentRepliesRoute.prototype.flag = function (data) {\r\n        return _super.prototype.baseUpdate.call(this, this.flagRoute, data, undefined, 'comment-flag');\r\n    };\r\n    /**\r\n    * Parses unflag article comment reply route; this URI template does not support any additional items.\r\n    * @method\r\n    * @param data Article Comment Reply object.\r\n    * @example articleCommentRepliesRoute.unflag(data);\r\n    **/\r\n    ArticleCommentRepliesRoute.prototype.unflag = function (data) {\r\n        return _super.prototype.baseUpdate.call(this, this.unflagRoute, data, undefined, 'comment-unflag');\r\n    };\r\n    /**\r\n    * Parses report article comment reply route; this URI template does not support any additional items.\r\n    * @method\r\n    * @param data Article Comment Reply object.\r\n    * @example articleCommentRepliesRoute.report(data);\r\n    **/\r\n    ArticleCommentRepliesRoute.prototype.report = function (data) {\r\n        return _super.prototype.baseUpdate.call(this, this.reportRoute, data, undefined, 'comment-report');\r\n    };\r\n    /**\r\n    * Parses unreport article comment reply route; this URI template does not support any additional items.\r\n    * @method\r\n    * @param data Article Comment Reply object.\r\n    * @example articleCommentRepliesRoute.unreport(data);\r\n    **/\r\n    ArticleCommentRepliesRoute.prototype.unreport = function (data) {\r\n        return _super.prototype.baseUpdate.call(this, this.unreportRoute, data, undefined, 'comment-unreport');\r\n    };\r\n    /**\r\n    * Parses spam article comment reply route; this URI template does not support any additional items.\r\n    * @method\r\n    * @param data Article Comment Reply object.\r\n    * @example articleCommentRepliesRoute.spam(data);\r\n    **/\r\n    ArticleCommentRepliesRoute.prototype.spam = function (data) {\r\n        return _super.prototype.baseUpdate.call(this, this.spamRoute, data, undefined, 'comment-spam');\r\n    };\r\n    /**\r\n    * Parses unspam article comment reply route; this URI template does not support any additional items.\r\n    * @method\r\n    * @param data Article Comment Reply object.\r\n    * @example articleCommentRepliesRoute.unspam(data);\r\n    **/\r\n    ArticleCommentRepliesRoute.prototype.unspam = function (data) {\r\n        return _super.prototype.baseUpdate.call(this, this.unspamRoute, data, undefined, 'comment-unspam');\r\n    };\r\n    return ArticleCommentRepliesRoute;\r\n}(common_1.BaseRoute));\r\nArticleCommentRepliesRoute = tslib_1.__decorate([\r\n    inversify_1.injectable(),\r\n    tslib_1.__param(0, inversify_1.inject(contracts_1.TYPES.IAppOptions)),\r\n    tslib_1.__metadata(\"design:paramtypes\", [typeof (_a = typeof contracts_1.IAppOptions !== \"undefined\" && contracts_1.IAppOptions) === \"function\" && _a || Object])\r\n], ArticleCommentRepliesRoute);\r\nexports.ArticleCommentRepliesRoute = ArticleCommentRepliesRoute;\r\nvar _a;\r\n/**\r\n * @overview\r\n ***Notes:**\r\n - Refer to the [REST API documentation](https://github.com/Baasic/baasic-rest-api/wiki) for detailed information about available Baasic REST API end-points.\r\n - [URI Template](https://github.com/Baasic/uritemplate-js) syntax enables expanding the Baasic route templates to Baasic REST URIs providing it with an object that contains URI parameters.\r\n - All end-point objects are transformed by the associated route service.\r\n*/ \r\n\n\n/***/ }),\n/* 115 */\n/***/ (function(module, exports, __webpack_require__) {\n\n\"use strict\";\n/* globals module */\r\n/**\r\n * @module articleCommentsClient\r\n * @description  Article Comments Client provides an easy way to consume  Article Comments REST API end-points. `articleCommentsClient` functions enable performing standard CRUD operations directly on article comment resources, whereas the `articleClient` functions allow management between article and article comments. In order to obtain needed routes `articleCommentsClient` uses `articleCommentsRoute`.\r\n */\r\n\r\nObject.defineProperty(exports, \"__esModule\", { value: true });\r\nvar tslib_1 = __webpack_require__(1);\r\nvar inversify_1 = __webpack_require__(0);\r\n;\r\nvar httpApi_1 = __webpack_require__(4);\r\nvar _1 = __webpack_require__(6);\r\nvar ArticleCommentsClient = (function () {\r\n    function ArticleCommentsClient(articleCommentRepliesClient, articleCommentsRoute, apiClient) {\r\n        this.articleCommentRepliesClient = articleCommentRepliesClient;\r\n        this.articleCommentsRoute = articleCommentsRoute;\r\n        this.apiClient = apiClient;\r\n        /**\r\n        * Contains a reference to valid list of article comment states. It returns an object containing all article comment states.\r\n        * @method\r\n        * @example articleCommentsClient.statuses.approved;\r\n        **/\r\n        this.statuses = _1.CommentStatus;\r\n    }\r\n    Object.defineProperty(ArticleCommentsClient.prototype, \"replies\", {\r\n        /**\r\n         * Provides direct access to `articleCommentRepliesClient`.\r\n         * @method\r\n         **/\r\n        get: function () {\r\n            return this.articleCommentRepliesClient;\r\n        },\r\n        enumerable: true,\r\n        configurable: true\r\n    });\r\n    Object.defineProperty(ArticleCommentsClient.prototype, \"routeDefinition\", {\r\n        /**\r\n         * Provides direct access to `articleCommentsRoute`.\r\n         * @method\r\n         * @example articleCommentsRoute.routeDefinition.get();\r\n         **/\r\n        get: function () {\r\n            return this.articleCommentsRoute;\r\n        },\r\n        enumerable: true,\r\n        configurable: true\r\n    });\r\n    /**\r\n     * Returns a promise that is resolved once the approve article comment action has been performed. This action sets the state of an article comment to \"approved\". This route uses HAL enabled objects to obtain routes and therefore it doesn't apply `articleCommentsRoute` route template. Here is an example of how a route can be obtained from HAL enabled objects:\r\n     * ```\r\n     * let params = modelMapper.updateParams(articleComment);\r\n     * let uri = params['model'].links('comment-approve').href;\r\n     * ```\r\n     * @method\r\n     * @param data Article Comment object.\r\n     * @param options Notification configuration used to control the article comment recourse access when managing notification distribution.\r\n     * @returns A promise that is resolved once the approve article comment action has been performed.\r\n     * @example // articleComment is a resource previously fetched using get action.\r\n                    articleCommentsClient.approve(articleComment, commentOptions)\r\n                        .then(function (data) {\r\n                            // perform success action here\r\n                        },\r\n                         function (response, status, headers, config) {\r\n                            // perform error handling here\r\n                        });\r\n     **/\r\n    ArticleCommentsClient.prototype.approve = function (data, options) {\r\n        return this.apiClient.put(this.routeDefinition.approve(data), this.routeDefinition.updateParams(options));\r\n    };\r\n    /**\r\n     * Returns a promise that is resolved once the unapprove article comment action has been performed. This action sets the state of an article comment to \"unapproved\". This route uses HAL enabled objects to obtain routes and therefore it doesn't apply `articleCommentsRoute` route template. Here is an example of how a route can be obtained from HAL enabled objects:\r\n     * ```\r\n     * let params = modelMapper.updateParams(articleComment);\r\n     * let uri = params['model'].links('comment-unapprove').href;\r\n     * ```\r\n     * @method\r\n     * @param data Article Comment object.\r\n     * @returns A promise that is resolved once the unapprove article comment action has been performed.\r\n     * @example // articleComment is a resource previously fetched using get action.\r\n                    articleCommentsClient.unapprove(articleComment)\r\n                        .then(function (data) {\r\n                            // perform success action here\r\n                        },\r\n                         function (response, status, headers, config) {\r\n                            // perform error handling here\r\n                        });\r\n     **/\r\n    ArticleCommentsClient.prototype.unapprove = function (data) {\r\n        return this.apiClient.put(this.routeDefinition.unapprove(data), this.routeDefinition.updateParams(data));\r\n    };\r\n    /**\r\n     * Returns a promise that is resolved once the create article comment action has been performed; this action creates a new comment for an article.\r\n     * @method\r\n     * @param data Article Comment object.\r\n     * @returns A promise that is resolved once the create article comment action has been performed.\r\n     * @example articleCommentsClient.create({\r\n                        articleId : '<article-id>',\r\n                        comment : <comment>,\r\n                        userId : '<user-id>' })\r\n                    .then(function (data) {\r\n                        // perform success action here\r\n                    },\r\n                     function (response, status, headers, config) {\r\n                        // perform error handling here\r\n                    });\r\n     **/\r\n    ArticleCommentsClient.prototype.create = function (data) {\r\n        return this.apiClient.post(this.routeDefinition.create(data), this.routeDefinition.createParams(data));\r\n    };\r\n    /**\r\n     * Returns a promise that is resolved once the find action has been performed. Success response returns a list of article comment resources matching the given criteria.\r\n     * @method\r\n     * @param options Query resource options object.\r\n     * @returns A promise that is resolved once the find action has been performed.\r\n     * @example articleCommentsClient.find({\r\n                    pageNumber : 1,\r\n                    pageSize : 10,\r\n                    orderBy : '<field>',\r\n                    orderDirection : '<asc|desc>',\r\n                    search : '<search-phrase>'\r\n                })\r\n                .success(function (collection) {\r\n                    // perform success action here\r\n                })\r\n                .error(function (response, status, headers, config) {\r\n                    // perform error handling here\r\n                });\r\n     **/\r\n    ArticleCommentsClient.prototype.find = function (options) {\r\n        return this.apiClient.get(this.routeDefinition.find(options));\r\n    };\r\n    /**\r\n     * Returns a promise that is resolved once the flag article comment action has been performed. This action sets the state of an article comment to \"flagged\". This route uses HAL enabled objects to obtain routes and therefore it doesn't apply `articleCommentsRoute` route template. Here is an example of how a route can be obtained from HAL enabled objects:\r\n     * ```\r\n     * let params = modelMapper.updateParams(articleComment);\r\n     * let uri = params['model'].links('comment-flag').href;\r\n     * ```\r\n     * @method\r\n     * @param data Article Comment object.\r\n     * @returns A promise that is resolved once the flag article comment action has been performed.\r\n     * @example // articleComment is a resource previously fetched using get action.\r\n                    articleCommentsClient.flag(articleComment)\r\n                        .then(function (data) {\r\n                            // perform success action here\r\n                        },\r\n                         function (response, status, headers, config) {\r\n                            // perform error handling here\r\n                        });\r\n     **/\r\n    ArticleCommentsClient.prototype.flag = function (data) {\r\n        return this.apiClient.put(this.routeDefinition.flag(data), this.routeDefinition.updateParams(data));\r\n    };\r\n    /**\r\n     * Returns a promise that is resolved once the unflag article comment action has been performed. This action removes the \"flagged\" comment mark. This route uses HAL enabled objects to obtain routes and therefore it doesn't apply `articleCommentsRoute` route template. Here is an example of how a route can be obtained from HAL enabled objects:\r\n     * ```\r\n     * let params = modelMapper.updateParams(articleComment);\r\n     * let uri = params['model'].links('comment-unflag').href;\r\n     * ```\r\n     * @method\r\n     * @param data Article Comment object.\r\n     * @returns A promise that is resolved once the unflag article comment action has been performed.\r\n     * @example // articleComment is a resource previously fetched using get action.\r\n                    articleCommentsClient.unflag(articleComment)\r\n                        .then(function (data) {\r\n                            // perform success action here\r\n                        },\r\n                         function (response, status, headers, config) {\r\n                            // perform error handling here\r\n                        });\r\n     **/\r\n    ArticleCommentsClient.prototype.unflag = function (data) {\r\n        return this.apiClient.put(this.routeDefinition.unflag(data), this.routeDefinition.updateParams(data));\r\n    };\r\n    /**\r\n     * Returns a promise that is resolved once the get action has been performed. Success response returns the specified article comment resource.\r\n     * @method\r\n     * @param id Id which uniquely identifies article comment resource that needs to be retrieved.\r\n     * @param options Options object that contains embed data.\r\n     * @returns A promise that is resolved once the get action has been performed.\r\n     * @example articleCommentsClient.get('<article-id>', '<comment-id>')\r\n                   .then(function (data) {\r\n                       // perform success action here\r\n                   },\r\n                    function (response, status, headers, config) {\r\n                       // perform error handling here\r\n                   });\r\n    **/\r\n    ArticleCommentsClient.prototype.get = function (id, options) {\r\n        return this.apiClient.get(this.articleCommentsRoute.get(id, options));\r\n    };\r\n    /**\r\n     * Returns a promise that is resolved once the remove article comment action has been performed. If the action is successfully completed, the article comment resource and its replies will be permanently removed from the system. This route uses HAL enabled objects to obtain routes and therefore it doesn't apply `articleCommentsRoute` route template. Here is an example of how a route can be obtained from HAL enabled objects:\r\n     ```\r\n     let params = modelMapper.removeParams(articleComment);\r\n     let uri = params['model'].links('delete').href;\r\n     ```\r\n     * @method\r\n     * @param data Article Comment object.\r\n     * @returns A promise that is resolved once the remove article comment action has been performed.\r\n     * @example // articleComment is a resource previously fetched using get action.\r\n                       articleCommentsClient.remove(articleComment)\r\n                           .then(function (data) {\r\n                               // perform success action here\r\n                           },\r\n                            function (response, status, headers, config) {\r\n                               // perform error handling here\r\n                           });\r\n    **/\r\n    ArticleCommentsClient.prototype.remove = function (data) {\r\n        return this.apiClient.delete(this.routeDefinition.delete(data));\r\n    };\r\n    /**\r\n     * Returns a promise that is resolved once the report article comment action has been performed. This action sets the state of an article comment to \"reported\". This route uses HAL enabled objects to obtain routes and therefore it doesn't apply `articleCommentsRoute` route template. Here is an example of how a route can be obtained from HAL enabled objects:\r\n     * ```\r\n     * let params = modelMapper.updateParams(articleComment);\r\n     * let uri = params['model'].links('comment-report').href;\r\n     * ```\r\n     * @method\r\n     * @param data Article Comment object.\r\n     * @param options Notification configuration used to control the article comment recourse access when managing notification distribution.\r\n     * @returns A promise that is resolved once the report article comment action has been performed.\r\n     * @example // articleComment is a resource previously fetched using get action.\r\n                    articleCommentsClient.report(articleComment, commentOptions)\r\n                        .success(function (data) {\r\n                            // perform success action here\r\n                        })\r\n                        .error(function (response, status, headers, config) {\r\n                            // perform error handling here\r\n                        });\r\n     **/\r\n    ArticleCommentsClient.prototype.report = function (data, options) {\r\n        return this.apiClient.put(this.routeDefinition.report(data), this.routeDefinition.updateParams(options));\r\n    };\r\n    /**\r\n     * Returns a promise that is resolved once the unreport article comment action has been performed. This action removes the \"reported\" comment mark. This route uses HAL enabled objects to obtain routes and therefore it doesn't apply `articleCommentsRoute` route template. Here is an example of how a route can be obtained from HAL enabled objects:\r\n     * ```\r\n     * let params = modelMapper.updateParams(articleComment);\r\n     * let uri = params['model'].links('comment-unreport').href;\r\n     * ```\r\n     * @method\r\n     * @param data Article Comment object.\r\n     * @returns A promise that is resolved once the unreport article comment action has been performed.\r\n     * @example // articleComment is a resource previously fetched using get action.\r\n                    articleCommentsClient.unreport(articleComment)\r\n                        .then(function (data) {\r\n                            // perform success action here\r\n                        },\r\n                         function (response, status, headers, config) {\r\n                            // perform error handling here\r\n                        });\r\n     **/\r\n    ArticleCommentsClient.prototype.unreport = function (data) {\r\n        return this.apiClient.put(this.routeDefinition.unreport(data), this.routeDefinition.updateParams(data));\r\n    };\r\n    /**\r\n     * Returns a promise that is resolved once the update article comment action has been performed; this action updates an article comment resource. This route uses HAL enabled objects to obtain routes and therefore it doesn't apply `articleCommentsRoute` route template. Here is an example of how a route can be obtained from HAL enabled objects:\r\n     * ```\r\n     * let params = modelMapper.updateParams(articleComment);\r\n     * let uri = params['model'].links('put').href;\r\n     * ```\r\n     * @method\r\n     * @param data Article Comment object.\r\n     * @returns A promise that is resolved once the update article comment action has been performed.\r\n     * @example // articleComment is a resource previously fetched using get action.\r\n                    articleCommentsClient.update(articleComment)\r\n                        .then(function (data) {\r\n                            // perform success action here\r\n                        },\r\n                         function (response, status, headers, config) {\r\n                             // perform error handling here\r\n                        });\r\n     **/\r\n    ArticleCommentsClient.prototype.update = function (data) {\r\n        return this.apiClient.put(this.routeDefinition.update(data), this.routeDefinition.updateParams(data));\r\n    };\r\n    return ArticleCommentsClient;\r\n}());\r\nArticleCommentsClient = tslib_1.__decorate([\r\n    inversify_1.injectable(),\r\n    tslib_1.__param(0, inversify_1.inject(_1.TYPES.ArticleCommentRepliesClient)),\r\n    tslib_1.__param(1, inversify_1.inject(_1.TYPES.ArticleCommentsRoute)),\r\n    tslib_1.__param(2, inversify_1.inject(httpApi_1.httpTYPES.ApiClient)),\r\n    tslib_1.__metadata(\"design:paramtypes\", [typeof (_a = typeof _1.ArticleCommentRepliesClient !== \"undefined\" && _1.ArticleCommentRepliesClient) === \"function\" && _a || Object, typeof (_b = typeof _1.ArticleCommentsRoute !== \"undefined\" && _1.ArticleCommentsRoute) === \"function\" && _b || Object, typeof (_c = typeof httpApi_1.ApiClient !== \"undefined\" && httpApi_1.ApiClient) === \"function\" && _c || Object])\r\n], ArticleCommentsClient);\r\nexports.ArticleCommentsClient = ArticleCommentsClient;\r\nvar _a, _b, _c;\r\n/**\r\n * @overview\r\n ***Notes:**\r\n - Refer to the [REST API documentation](https://github.com/Baasic/baasic-rest-api/wiki) for detailed information about available Baasic REST API end-points.\r\n - All end-point objects are transformed by the associated route service.\r\n */ \r\n\n\n/***/ }),\n/* 116 */\n/***/ (function(module, exports, __webpack_require__) {\n\n\"use strict\";\n/* globals module */\r\n/**\r\n * @module articleCommentsRoute\r\n * @description Baasic Article Comments Route Definition provides Baasic route templates which can be expanded to Baasic REST URIs. Various services can use Baasic Article Comments Route Definition to obtain needed routes while other routes will be obtained through HAL. By convention, all route services use the same function names as their corresponding services.\r\n*/\r\n\r\nObject.defineProperty(exports, \"__esModule\", { value: true });\r\nvar tslib_1 = __webpack_require__(1);\r\nvar inversify_1 = __webpack_require__(0);\r\nvar common_1 = __webpack_require__(2);\r\n;\r\nvar contracts_1 = __webpack_require__(3);\r\nvar ArticleCommentsRoute = (function (_super) {\r\n    tslib_1.__extends(ArticleCommentsRoute, _super);\r\n    function ArticleCommentsRoute(appOptions) {\r\n        var _this = _super.call(this, appOptions) || this;\r\n        _this.appOptions = appOptions;\r\n        _this.findRoute = 'article-comments/{?searchQuery,statuses,page,rpp,sort,embed,fields}';\r\n        _this.getRoute = 'article-comments/{id}/{?embed,fields}';\r\n        _this.createRoute = 'article-comments/';\r\n        _this.updateRoute = 'article-comments/{id}';\r\n        _this.deleteRoute = 'article-comments/{id}';\r\n        _this.approveRoute = 'article-comments/{id}/approve';\r\n        _this.unapproveRoute = 'article-comments/{id}/unapprove';\r\n        _this.flagRoute = 'article-comments/{id}';\r\n        _this.unflagRoute = 'article-comments/{id}/unflag';\r\n        _this.reportRoute = 'article-comments/{id}/report';\r\n        _this.unreportRoute = 'article-comments/{id}/unreport';\r\n        return _this;\r\n    }\r\n    /**\r\n     * Parses find route which can be expanded with additional options. Supported items are:\r\n     * - `searchQuery` - A string value used to identify article comment resources using the phrase search.\r\n     * - `page` - A value used to set the page number, i.e. to retrieve certain article comment subset from the storage.\r\n     * - `rpp` - A value used to limit the size of result set per page.\r\n     * - `sort` - A string used to set the article comment property to sort the result collection by.\r\n     * - `embed` - Comma separated list of resources to be contained within the current representation.\r\n     * - `statuses` - Comma separated list of article comment states that specify where search should be done (Allowed states: Approved, Spam, Reported, Flagged and UnApproved).\r\n     * @method\r\n     * @param options Query resource options object.\r\n     * @example articleCommentsRoute.find({ searchQuery: '<search-phrase>' });\r\n     **/\r\n    ArticleCommentsRoute.prototype.find = function (options) {\r\n        return _super.prototype.baseFind.call(this, this.findRoute, options);\r\n    };\r\n    /**\r\n     * Parses get route which can be expanded with additional options. Supported items are:\r\n     * - `id` - Id which uniquely identifies article comment resource that needs to be retrieved.\r\n     * - `embed` - Comma separated list of resources to be contained within the current representation.\r\n     * @method\r\n     * @param id Id which uniquely identifies article comment resource that needs to be retrieved.\r\n     * @param options Options object that contains embed data.\r\n     * @example articleCommentsRoute.get().expand({ id: '<comment-id>' });\r\n     **/\r\n    ArticleCommentsRoute.prototype.get = function (id, options) {\r\n        return _super.prototype.baseGet.call(this, this.getRoute, id, options);\r\n    };\r\n    /**\r\n     * Parses create route; this URI template doesnt support any additional options.\r\n     * @method\r\n     * @param data An article comment object that needs to be inserted into the system.\r\n     * @example articleCommentsRoute.create(data);\r\n     **/\r\n    ArticleCommentsRoute.prototype.create = function (data) {\r\n        return _super.prototype.baseCreate.call(this, this.createRoute, data);\r\n    };\r\n    /**\r\n     * Parses update route; this URI template doesnt support any additional options.\r\n     * @method An article comment object used to update specified article comment resource.\r\n     * @example articleCommentsRoute.update(data);\r\n     **/\r\n    ArticleCommentsRoute.prototype.update = function (data) {\r\n        return _super.prototype.baseUpdate.call(this, this.updateRoute, data);\r\n    };\r\n    /**\r\n     * Parses delete route; this URI template doesnt support any additional options.\r\n     * @method An article comment object used to delete specified article comment resource.\r\n     * @example articleCommentsRoute.delete(data);\r\n     **/\r\n    ArticleCommentsRoute.prototype.delete = function (data) {\r\n        return _super.prototype.baseDelete.call(this, this.deleteRoute, data);\r\n    };\r\n    /**\r\n    * Parses approve route; this URI template doesnt support any additional options.\r\n    * @method An article comment object.\r\n    * @example articleCommentsRoute.approve(data);\r\n    **/\r\n    ArticleCommentsRoute.prototype.approve = function (data) {\r\n        return _super.prototype.baseUpdate.call(this, this.approveRoute, data, undefined, 'comment-approve');\r\n    };\r\n    /**\r\n    * Parses unapprove route; this URI template doesnt support any additional options.\r\n    * @method An article comment object.\r\n    * @example articleCommentsRoute.unapprove(data);\r\n    **/\r\n    ArticleCommentsRoute.prototype.unapprove = function (data) {\r\n        return _super.prototype.baseUpdate.call(this, this.unapproveRoute, data, undefined, 'comment-unapprove');\r\n    };\r\n    /**\r\n    * Parses flag route; this URI template doesnt support any additional options.\r\n    * @method An article comment object.\r\n    * @example articleCommentsRoute.flag(data);\r\n    **/\r\n    ArticleCommentsRoute.prototype.flag = function (data) {\r\n        return _super.prototype.baseUpdate.call(this, this.flagRoute, data, undefined, 'comment-flag');\r\n    };\r\n    /**\r\n    * Parses unflag route; this URI template doesnt support any additional options.\r\n    * @method An article comment object.\r\n    * @example articleCommentsRoute.unflag(data);\r\n    **/\r\n    ArticleCommentsRoute.prototype.unflag = function (data) {\r\n        return _super.prototype.baseUpdate.call(this, this.unflagRoute, data, undefined, 'comment-unflag');\r\n    };\r\n    /**\r\n    * Parses report route; this URI template doesnt support any additional options.\r\n    * @method An article comment object.\r\n    * @example articleCommentsRoute.report(data);\r\n    **/\r\n    ArticleCommentsRoute.prototype.report = function (data) {\r\n        return _super.prototype.baseUpdate.call(this, this.reportRoute, data, undefined, 'comment-report');\r\n    };\r\n    /**\r\n    * Parses unreport route; this URI template doesnt support any additional options.\r\n    * @method An article comment object.\r\n    * @example articleCommentsRoute.unreport(data);\r\n    **/\r\n    ArticleCommentsRoute.prototype.unreport = function (data) {\r\n        return _super.prototype.baseUpdate.call(this, this.unreportRoute, data, undefined, 'comment-unreport');\r\n    };\r\n    return ArticleCommentsRoute;\r\n}(common_1.BaseRoute));\r\nArticleCommentsRoute = tslib_1.__decorate([\r\n    inversify_1.injectable(),\r\n    tslib_1.__param(0, inversify_1.inject(contracts_1.TYPES.IAppOptions)),\r\n    tslib_1.__metadata(\"design:paramtypes\", [typeof (_a = typeof contracts_1.IAppOptions !== \"undefined\" && contracts_1.IAppOptions) === \"function\" && _a || Object])\r\n], ArticleCommentsRoute);\r\nexports.ArticleCommentsRoute = ArticleCommentsRoute;\r\nvar _a;\r\n/**\r\n * @overview\r\n ***Notes:**\r\n - Refer to the [REST API documentation](https://github.com/Baasic/baasic-rest-api/wiki) for detailed information about available Baasic REST API end-points.\r\n - [URI Template](https://github.com/Baasic/uritemplate-js) syntax enables expanding the Baasic route templates to Baasic REST URIs providing it with an object that contains URI parameters.\r\n - All end-point objects are transformed by the associated route service.\r\n*/ \r\n\n\n/***/ }),\n/* 117 */\n/***/ (function(module, exports, __webpack_require__) {\n\n\"use strict\";\n/* globals module */\r\n/**\r\n * @module articleInstanceCommentsClient\r\n * @description  Article Instance Comments Client provides an easy way to consume  Article Comments REST API end-points. `articleCommentsClient` functions enable performing standard CRUD operations directly on article comment resources, whereas the `articleClient` functions allow management between article and article comments. In order to obtain needed routes `articleCommentsClient` uses `articleCommentsRoute`.\r\n */\r\n\r\nObject.defineProperty(exports, \"__esModule\", { value: true });\r\nvar tslib_1 = __webpack_require__(1);\r\nvar inversify_1 = __webpack_require__(0);\r\n;\r\nvar httpApi_1 = __webpack_require__(4);\r\nvar _1 = __webpack_require__(6);\r\nvar ArticleInstanceCommentsClient = (function () {\r\n    function ArticleInstanceCommentsClient(articleInstanceCommentsRoute, articleInstanceCommentsRepliesClient, apiClient) {\r\n        this.articleInstanceCommentsRoute = articleInstanceCommentsRoute;\r\n        this.articleInstanceCommentsRepliesClient = articleInstanceCommentsRepliesClient;\r\n        this.apiClient = apiClient;\r\n        /**\r\n       * Contains a reference to valid list of article comment states. It returns an object containing all article comment states.\r\n       * @method\r\n       * @example articleInstanceCommentsClient.statuses.approved;\r\n       **/\r\n        this.statuses = _1.CommentStatus;\r\n    }\r\n    Object.defineProperty(ArticleInstanceCommentsClient.prototype, \"routeDefinition\", {\r\n        get: function () {\r\n            return this.articleInstanceCommentsRoute;\r\n        },\r\n        enumerable: true,\r\n        configurable: true\r\n    });\r\n    Object.defineProperty(ArticleInstanceCommentsClient.prototype, \"replies\", {\r\n        get: function () {\r\n            return this.articleInstanceCommentsRepliesClient;\r\n        },\r\n        enumerable: true,\r\n        configurable: true\r\n    });\r\n    /**\r\n     * Returns a promise that is resolved once the approve article comment action has been performed. This action sets the state of an article comment to \"approved\". This route uses HAL enabled objects to obtain routes and therefore it doesn't apply `articleCommentsRoute` route template. Here is an example of how a route can be obtained from HAL enabled objects:\r\n     * ```\r\n     * let params = modelMapper.updateParams(articleComment);\r\n     * let uri = params['model'].links('comment-approve').href;\r\n     * ```\r\n     * @method\r\n     * @param data Article Comment object.\r\n     * @param options Notification configuration used to control the article comment recourse access when managing notification distribution.\r\n     * @returns A promise that is resolved once the approve article comment action has been performed.\r\n     * @example // articleComment is a resource previously fetched using get action.\r\n                    articleInstanceCommentsClient.approve(articleComment, commentOptions)\r\n                        .then(function (data) {\r\n                            // perform success action here\r\n                        },\r\n                         function (response, status, headers, config) {\r\n                            // perform error handling here\r\n                        });\r\n     **/\r\n    ArticleInstanceCommentsClient.prototype.approve = function (data, options) {\r\n        return this.apiClient.put(this.routeDefinition.approve(data), this.routeDefinition.createParams(options));\r\n    };\r\n    /**\r\n     * Returns a promise that is resolved once the unapprove article comment action has been performed. This action sets the state of an article comment to \"unapproved\". This route uses HAL enabled objects to obtain routes and therefore it doesn't apply `articleCommentsRoute` route template. Here is an example of how a route can be obtained from HAL enabled objects:\r\n     * ```\r\n     * let params = modelMapper.updateParams(articleComment);\r\n     * let uri = params['model'].links('comment-unapprove').href;\r\n     * ```\r\n     * @method\r\n     * @param data Article Comment object.\r\n     * @returns A promise that is resolved once the unapprove article comment action has been performed.\r\n     * @example // articleComment is a resource previously fetched using get action.\r\n                    articleInstanceCommentsClient.unapprove(articleComment)\r\n                        .then(function (data) {\r\n                            // perform success action here\r\n                        },\r\n                         function (response, status, headers, config) {\r\n                            // perform error handling here\r\n                        });\r\n     **/\r\n    ArticleInstanceCommentsClient.prototype.unapprove = function (data) {\r\n        return this.apiClient.put(this.routeDefinition.unapprove(data), this.routeDefinition.updateParams(data));\r\n    };\r\n    /**\r\n     * Returns a promise that is resolved once the create article comment action has been performed; this action creates a new comment for an article.\r\n     * @method\r\n     * @param data An article comment object that needs to be inserted into the system.\r\n     * @returns A promise that is resolved once the create article comment action has been performed.\r\n     * @example articleInstanceCommentsClient.create({\r\n                        articleId : '<article-id>',\r\n                        comment : <comment>,\r\n                        userId : '<user-id>' })\r\n                    .then(function (data) {\r\n                        // perform success action here\r\n                    },\r\n                     function (response, status, headers, config) {\r\n                        // perform error handling here\r\n                    });\r\n     **/\r\n    ArticleInstanceCommentsClient.prototype.create = function (data) {\r\n        return this.apiClient.post(this.routeDefinition.create(data), this.routeDefinition.createParams(data));\r\n    };\r\n    /**\r\n     * Returns a promise that is resolved once the find action has been performed. Success response returns a list of article comment resources matching the given criteria.\r\n     * @method\r\n     * @param articleId Article slug or id which uniquely identifies article whose comment resources need to be retrieved.\r\n     * @param options Query resource options object.\r\n     * @returns A promise that is resolved once the find action has been performed.\r\n     * @example articleInstanceCommentsClient.find({\r\n                    pageNumber : 1,\r\n                    pageSize : 10,\r\n                    orderBy : '<field>',\r\n                    orderDirection : '<asc|desc>',\r\n                    search : '<search-phrase>'\r\n                })\r\n                .success(function (collection) {\r\n                    // perform success action here\r\n                })\r\n                .error(function (response, status, headers, config) {\r\n                    // perform error handling here\r\n                });\r\n     **/\r\n    ArticleInstanceCommentsClient.prototype.find = function (articleId, options) {\r\n        return this.apiClient.get(this.articleInstanceCommentsRoute.find(articleId, options));\r\n    };\r\n    /**\r\n     * Returns a promise that is resolved once the flag article comment action has been performed. This action sets the state of an article comment to \"flagged\". This route uses HAL enabled objects to obtain routes and therefore it doesn't apply `articleCommentsRoute` route template. Here is an example of how a route can be obtained from HAL enabled objects:\r\n     * ```\r\n     * let params = modelMapper.updateParams(articleComment);\r\n     * let uri = params['model'].links('comment-flag').href;\r\n     * ```\r\n     * @method\r\n     * @param data Article Comment object.\r\n     * @returns A promise that is resolved once the flag article comment action has been performed.\r\n     * @example // articleComment is a resource previously fetched using get action.\r\n                    articleInstanceCommentsClient.flag(articleComment)\r\n                        .then(function (data) {\r\n                            // perform success action here\r\n                        },\r\n                         function (response, status, headers, config) {\r\n                            // perform error handling here\r\n                        });\r\n     **/\r\n    ArticleInstanceCommentsClient.prototype.flag = function (data) {\r\n        return this.apiClient.put(this.routeDefinition.flag(data), this.routeDefinition.updateParams(data));\r\n    };\r\n    /**\r\n     * Returns a promise that is resolved once the unflag article comment action has been performed. This action removes the \"flagged\" comment mark. This route uses HAL enabled objects to obtain routes and therefore it doesn't apply `articleCommentsRoute` route template. Here is an example of how a route can be obtained from HAL enabled objects:\r\n     * ```\r\n     * let params = modelMapper.updateParams(articleComment);\r\n     * let uri = params['model'].links('comment-unflag').href;\r\n     * ```\r\n     * @method\r\n     * @param data Article Comment object.\r\n     * @returns A promise that is resolved once the unflag article comment action has been performed.\r\n     * @example // articleComment is a resource previously fetched using get action.\r\n                    articleInstanceCommentsClient.unflag(articleComment)\r\n                        .then(function (data) {\r\n                            // perform success action here\r\n                        },\r\n                         function (response, status, headers, config) {\r\n                            // perform error handling here\r\n                        });\r\n     **/\r\n    ArticleInstanceCommentsClient.prototype.unflag = function (data) {\r\n        return this.apiClient.put(this.routeDefinition.unflag(data), this.routeDefinition.updateParams(data));\r\n    };\r\n    /**\r\n     * Returns a promise that is resolved once the get action has been performed. Success response returns the specified article comment resource.\r\n     * @method\r\n     * @param articleId Article slug or id which uniquely identifies article whose comment resource needs to be retrieved.\r\n     * @param commentId Id which identifies article comment resource that needs to be retrieved.\r\n     * @param options Options object that contains embed data.\r\n     * @returns A promise that is resolved once the get action has been performed.\r\n     * @example articleInstanceCommentsClient.get('<article-id>', '<comment-id>')\r\n                   .then(function (data) {\r\n                       // perform success action here\r\n                   },\r\n                    function (response, status, headers, config) {\r\n                       // perform error handling here\r\n                   });\r\n    **/\r\n    ArticleInstanceCommentsClient.prototype.get = function (articleId, commentId, options) {\r\n        return this.apiClient.get(this.articleInstanceCommentsRoute.get(articleId, commentId, options));\r\n    };\r\n    /**\r\n     * Returns a promise that is resolved once the remove article comment action has been performed. If the action is successfully completed, the article comment resource and its replies will be permanently removed from the system. This route uses HAL enabled objects to obtain routes and therefore it doesn't apply `articleCommentsRoute` route template. Here is an example of how a route can be obtained from HAL enabled objects:\r\n     ```\r\n     let params = modelMapper.removeParams(articleComment);\r\n     let uri = params['model'].links('delete').href;\r\n     ```\r\n     * @method\r\n     * @param data An article comment object used to delete specified article comment resource.\r\n     * @returns A promise that is resolved once the remove article comment action has been performed.\r\n     * @example // articleComment is a resource previously fetched using get action.\r\n                       articleInstanceCommentsClient.remove(articleComment)\r\n                           .then(function (data) {\r\n                               // perform success action here\r\n                           },\r\n                            function (response, status, headers, config) {\r\n                               // perform error handling here\r\n                           });\r\n    **/\r\n    ArticleInstanceCommentsClient.prototype.remove = function (data) {\r\n        return this.apiClient.delete(this.routeDefinition.delete(data));\r\n    };\r\n    /**\r\n     * Returns a promise that is resolved once the removeAll article comment action has been performed. This action will remove all comments and comment replies from an article if successfully completed. This route uses HAL enabled objects to obtain routes and therefore it doesn't apply `articleInstanceRoute` route template. Here is an example of how a route can be obtained from HAL enabled objects:\r\n     * ```\r\n     * let params = modelMapper.removeParams(articleComment);\r\n     * let uri = params['model'].links('delete-comments-by-article').href;\r\n     * ```\r\n     * @method\r\n     * @param data An article object used to delete specified article comment resource.\r\n     * @returns A promise that is resolved once the removeAll article comment action has been performed.\r\n     * @example // articleComment is a resource previously fetched using get action.\r\n                    articleInstanceCommentsClient.removeAll(articleComment)\r\n                        .then(function (data) {\r\n                            // perform success action here\r\n                        },\r\n                         function (response, status, headers, config) {\r\n                             // perform error handling here\r\n                        });\r\n     **/\r\n    ArticleInstanceCommentsClient.prototype.removeAll = function (data) {\r\n        return this.apiClient.delete(this.routeDefinition.deleteAll(data));\r\n    };\r\n    /**\r\n     * Returns a promise that is resolved once the report article comment action has been performed. This action sets the state of an article comment to \"reported\". This route uses HAL enabled objects to obtain routes and therefore it doesn't apply `articleCommentsRoute` route template. Here is an example of how a route can be obtained from HAL enabled objects:\r\n     * ```\r\n     * let params = modelMapper.updateParams(articleComment);\r\n     * let uri = params['model'].links('comment-report').href;\r\n     * ```\r\n     * @method\r\n     * @param data Article Comment object.\r\n     * @param options Notification configuration used to control the article comment recourse access when managing notification distribution.\r\n     * @returns A promise that is resolved once the report article comment action has been performed.\r\n     * @example // articleComment is a resource previously fetched using get action.\r\n                    articleInstanceCommentsClient.report(articleComment, commentOptions)\r\n                        .success(function (data) {\r\n                            // perform success action here\r\n                        })\r\n                        .error(function (response, status, headers, config) {\r\n                            // perform error handling here\r\n                        });\r\n     **/\r\n    ArticleInstanceCommentsClient.prototype.report = function (data, options) {\r\n        return this.apiClient.put(this.routeDefinition.report(data), this.routeDefinition.updateParams(options));\r\n    };\r\n    /**\r\n     * Returns a promise that is resolved once the unreport article comment action has been performed. This action removes the \"reported\" comment mark. This route uses HAL enabled objects to obtain routes and therefore it doesn't apply `articleCommentsRoute` route template. Here is an example of how a route can be obtained from HAL enabled objects:\r\n     * ```\r\n     * let params = modelMapper.updateParams(articleComment);\r\n     * let uri = params['model'].links('comment-unreport').href;\r\n     * ```\r\n     * @method\r\n     * @param data Article Comment object.\r\n     * @returns A promise that is resolved once the unreport article comment action has been performed.\r\n     * @example // articleComment is a resource previously fetched using get action.\r\n                    articleInstanceCommentsClient.unreport(articleComment)\r\n                        .then(function (data) {\r\n                            // perform success action here\r\n                        },\r\n                         function (response, status, headers, config) {\r\n                            // perform error handling here\r\n                        });\r\n     **/\r\n    ArticleInstanceCommentsClient.prototype.unreport = function (data) {\r\n        return this.apiClient.put(this.routeDefinition.unreport(data), this.routeDefinition.updateParams(data));\r\n    };\r\n    /**\r\n     * Returns a promise that is resolved once the update article comment action has been performed; this action updates an article comment resource. This route uses HAL enabled objects to obtain routes and therefore it doesn't apply `articleCommentsRoute` route template. Here is an example of how a route can be obtained from HAL enabled objects:\r\n     * ```\r\n     * let params = modelMapper.updateParams(articleComment);\r\n     * let uri = params['model'].links('put').href;\r\n     * ```\r\n     * @method\r\n     * @param data An article comments object used to update specified article comment resource.\r\n     * @returns A promise that is resolved once the update article comment action has been performed.\r\n     * @example // articleComment is a resource previously fetched using get action.\r\n                    articleInstanceCommentsClient.update(articleComment)\r\n                        .then(function (data) {\r\n                            // perform success action here\r\n                        },\r\n                         function (response, status, headers, config) {\r\n                             // perform error handling here\r\n                        });\r\n     **/\r\n    ArticleInstanceCommentsClient.prototype.update = function (data) {\r\n        return this.apiClient.put(this.routeDefinition.update(data), this.routeDefinition.updateParams(data));\r\n    };\r\n    /**\r\n     * Returns a promise that is resolved once the mark as spam article comment action has been performed. This action sets the state of an article comment to \"spam\". This route uses HAL enabled objects to obtain routes and therefore it doesn't apply `articleInstanceRoute` route template. Here is an example of how a route can be obtained from HAL enabled objects:\r\n     * ```\r\n     * let params = modelMapper.updateParams(articleComment);\r\n     * let uri = params['model'].links('comment-spam').href;\r\n     * ```\r\n     * @method\r\n     * @param data Article Comment object.\r\n     * @returns A promise that is resolved once the mark as spam article comment action has been performed.\r\n     * @example // articleComment is a resource previously fetched using get action.\r\n                    articleInstanceClient.spam(articleComment)\r\n                        .then(function (data) {\r\n                            // perform success action here\r\n                        },\r\n                         function (response, status, headers, config) {\r\n                             // perform error handling here\r\n                        });\r\n     **/\r\n    ArticleInstanceCommentsClient.prototype.spam = function (data) {\r\n        return this.apiClient.put(this.routeDefinition.spam(data), this.routeDefinition.updateParams(data));\r\n    };\r\n    /**\r\n     * Returns a promise that is resolved once the unspam article comment action has been performed. This action removes the \"spam\" comment state. This route uses HAL enabled objects to obtain routes and therefore it doesn't apply `articleInstanceRoute` route template. Here is an example of how a route can be obtained from HAL enabled objects:\r\n     * ```\r\n     * let params = modelMapper.updateParams(articleComment);\r\n     * let uri = params['model'].links('comment-unspam').href;\r\n     * ```\r\n     * @method\r\n     * @param data Article Comment object.\r\n     * @returns A promise that is resolved once the unspam article comment action has been performed.\r\n     * @example // articleComment is a resource previously fetched using get action.\r\n                        articleInstanceClient.unspam(articleComment)\r\n                            .then(function (data) {\r\n                                // perform success action here\r\n                            },\r\n                             function (response, status, headers, config) {\r\n                                 // perform error handling here\r\n                            });\r\n     **/\r\n    ArticleInstanceCommentsClient.prototype.unspam = function (data) {\r\n        return this.apiClient.put(this.routeDefinition.unspam(data), this.routeDefinition.updateParams(data));\r\n    };\r\n    return ArticleInstanceCommentsClient;\r\n}());\r\nArticleInstanceCommentsClient = tslib_1.__decorate([\r\n    inversify_1.injectable(),\r\n    tslib_1.__param(0, inversify_1.inject(_1.TYPES.ArticleInstanceCommentsRoute)),\r\n    tslib_1.__param(1, inversify_1.inject(_1.TYPES.ArticleCommentRepliesClient)),\r\n    tslib_1.__param(2, inversify_1.inject(httpApi_1.httpTYPES.ApiClient)),\r\n    tslib_1.__metadata(\"design:paramtypes\", [typeof (_a = typeof _1.ArticleInstanceCommentsRoute !== \"undefined\" && _1.ArticleInstanceCommentsRoute) === \"function\" && _a || Object, typeof (_b = typeof _1.ArticleInstanceCommentRepliesClient !== \"undefined\" && _1.ArticleInstanceCommentRepliesClient) === \"function\" && _b || Object, typeof (_c = typeof httpApi_1.ApiClient !== \"undefined\" && httpApi_1.ApiClient) === \"function\" && _c || Object])\r\n], ArticleInstanceCommentsClient);\r\nexports.ArticleInstanceCommentsClient = ArticleInstanceCommentsClient;\r\nvar _a, _b, _c;\r\n/**\r\n * @overview\r\n ***Notes:**\r\n - Refer to the [REST API documentation](https://github.com/Baasic/baasic-rest-api/wiki) for detailed information about available Baasic REST API end-points.\r\n - All end-point objects are transformed by the associated route service.\r\n */ \r\n\n\n/***/ }),\n/* 118 */\n/***/ (function(module, exports, __webpack_require__) {\n\n\"use strict\";\n/* globals module */\r\n/**\r\n * @module articleInstanceCommentRepliesClient\r\n * @description  Article Instance Comment Replies Client provides an easy way to consume  Article Comment Replies REST API end-points. `articleCommentRepliesService` functions enable performing standard CRUD operations directly on article comment reply resources, whereas the `articleClient` functions allow management between article and article comment reply. In order to obtain needed routes `articleCommentRepliesService` uses `articleCommentRepliesRoute`.\r\n*/\r\n\r\nObject.defineProperty(exports, \"__esModule\", { value: true });\r\nvar tslib_1 = __webpack_require__(1);\r\nvar inversify_1 = __webpack_require__(0);\r\n;\r\nvar httpApi_1 = __webpack_require__(4);\r\nvar _1 = __webpack_require__(6);\r\nvar ArticleInstanceCommentRepliesClient = (function () {\r\n    function ArticleInstanceCommentRepliesClient(articleInstanceCommentRepliesRoute, apiClient) {\r\n        this.articleInstanceCommentRepliesRoute = articleInstanceCommentRepliesRoute;\r\n        this.apiClient = apiClient;\r\n        /**\r\n         * Contains a reference to valid list of article comment reply states. It returns an object containing all article comment reply states.\r\n         * @method\r\n         * @example articleCommentRepliesClient.statuses.approved;\r\n         **/\r\n        this.statuses = _1.CommentStatus;\r\n    }\r\n    Object.defineProperty(ArticleInstanceCommentRepliesClient.prototype, \"routeDefinition\", {\r\n        /**\r\n         * Provides direct access to `articleCommentRepliesRoute`.\r\n         * @method\r\n         * @example articleInstanceCommentRepliesClient.routeDefinition.get();\r\n         **/\r\n        get: function () {\r\n            return this.articleInstanceCommentRepliesRoute;\r\n        },\r\n        enumerable: true,\r\n        configurable: true\r\n    });\r\n    /**\r\n     * Returns a promise that is resolved once the approve article comment reply action has been performed. This action sets the state of an article comment reply to \"approved\". This route uses HAL enabled objects to obtain routes and therefore it doesn't apply `articleCommentRepliesRoute` route template. Here is an example of how a route can be obtained from HAL enabled objects:\r\n     * ```\r\n     * let params = modelMapper.updateParams(articleCommentReply);\r\n     * let uri = params['model'].links('comment-approve').href;\r\n     * ```\r\n     * @method\r\n     * @param data Article Comment Reply object.\r\n     * @param options Notification configuration used to control the article comment recourse access when managing notification distribution.\r\n     * @example // articleCommentReply is a resource previously fetched using get action.\r\n                    articleInstanceCommentRepliesClient.approve(articleCommentReply, commentOptions)\r\n                        .then(function (data) {\r\n                            // perform success action here\r\n                        },\r\n                         function (response, status, headers, config) {\r\n                            // perform error handling here\r\n                        });\r\n     **/\r\n    ArticleInstanceCommentRepliesClient.prototype.approve = function (data, options) {\r\n        return this.apiClient.put(this.routeDefinition.approve(data), this.routeDefinition.updateParams(data));\r\n    };\r\n    /**\r\n     * Returns a promise that is resolved once the unapprove article comment reply action has been performed. This action sets the state of an article comment reply to \"unapproved\". This route uses HAL enabled objects to obtain routes and therefore it doesn't apply `articleCommentRepliesRoute` route template. Here is an example of how a route can be obtained from HAL enabled objects:\r\n     * ```\r\n     * let params = modelMapper.updateParams(articleCommentReply);\r\n     * let uri = params['model'].links('comment-unapprove').href;\r\n     * ```\r\n     * @method\r\n     * @param data Article Comment Reply object.\r\n     * @returns A promise that is resolved once the unapprove article comment reply action has been performed.\r\n     * @example // articleCommentReply is a resource previously fetched using get action.\r\n                    articleInstanceCommentRepliesClient.unapprove(articleCommentReply)\r\n                        .then(function (data) {\r\n                            // perform success action here\r\n                        },\r\n                         function (response, status, headers, config) {\r\n                            // perform error handling here\r\n                        });\r\n     **/\r\n    ArticleInstanceCommentRepliesClient.prototype.unapprove = function (data) {\r\n        return this.apiClient.put(this.routeDefinition.unapprove(data), this.routeDefinition.updateParams(data));\r\n    };\r\n    /**\r\n     * Returns a promise that is resolved once the create article comment reply action has been performed; this action creates a new comment reply for an article.\r\n     * @method\r\n     * @param articleId Article id which uniquely identifies article that needs to be updated with new comment reply resource.\r\n     * @param data An article comment reply object that needs to be inserted into the system.\r\n     * @returns A promise that is resolved once the create article comment reply action has been performed.\r\n     * @example articleInstanceCommentRepliesClient.create('<article-id>', {\r\n                    commentId : '<comment-id>',\r\n                    comment : <comment>,\r\n                    userId : '<user-id>' })\r\n                .then(function (data) {\r\n                    // perform success action here\r\n                },\r\n                 function (response, status, headers, config) {\r\n                    // perform error handling here\r\n                });\r\n     **/\r\n    ArticleInstanceCommentRepliesClient.prototype.create = function (articleId, data) {\r\n        return this.apiClient.post(this.routeDefinition.create(articleId, data), this.routeDefinition.createParams(data));\r\n    };\r\n    /**\r\n     * Returns a promise that is resolved once the find action has been performed. Success response returns a list of article comment reply resources matching the given criteria.\r\n     * @method\r\n     * @param articleId Article id which uniquely identifies article whose comment reply resources need to be retrieved.\r\n     * @param commentId Comment id which uniquely identifies comment whose reply resources need to be retrieved.\r\n     * @param options Query resource options.\r\n     * @returns A promise that is resolved once the find action has been performed.\r\n     * @example articleInstanceCommentRepliesClient.find({\r\n                    pageNumber : 1,\r\n                    pageSize : 10,\r\n                    orderBy : '<field>',\r\n                    orderDirection : '<asc|desc>',\r\n                    search : '<search-phrase>'\r\n                })\r\n                .then(function (collection) {\r\n                    // perform success action here\r\n                },\r\n                 function (response, status, headers, config) {\r\n                    // perform error handling here\r\n                });\r\n     **/\r\n    ArticleInstanceCommentRepliesClient.prototype.find = function (articleId, commentId, options) {\r\n        return this.apiClient.get(this.articleInstanceCommentRepliesRoute.find(articleId, commentId, options));\r\n    };\r\n    /**\r\n     * Returns a promise that is resolved once the flag article comment reply action has been performed. This action sets the state of an article comment reply to \"flagged\". This route uses HAL enabled objects to obtain routes and therefore it doesn't apply `articleCommentRepliesRoute` route template. Here is an example of how a route can be obtained from HAL enabled objects:\r\n     * ```\r\n     * let params = modelMapper.updateParams(articleCommentReply);\r\n     * let uri = params['model'].links('comment-flag').href;\r\n     * ```\r\n     * @method\r\n     * @param data Article Comment Reply object.\r\n     * @returns A promise that is resolved once the flag article comment reply action has been performed.\r\n     * @example     // articleCommentReply is a resource previously fetched using get action.\r\n                        articleInstanceCommentRepliesClient.flag(articleCommentReply)\r\n                            .then(function (data) {\r\n                                // perform success action here\r\n                            },\r\n                             function (response, status, headers, config) {\r\n                                // perform error handling here\r\n                            });\r\n     **/\r\n    ArticleInstanceCommentRepliesClient.prototype.flag = function (data) {\r\n        return this.apiClient.put(this.routeDefinition.flag(data), this.routeDefinition.updateParams(data));\r\n    };\r\n    /**\r\n     * Returns a promise that is resolved once the unflag article comment reply action has been performed. This action removes the \"flagged\" comment reply state. This route uses HAL enabled objects to obtain routes and therefore it doesn't apply `articleCommentRepliesRoute` route template. Here is an example of how a route can be obtained from HAL enabled objects:\r\n     * ```\r\n     * let params = modelMapper.updateParams(articleCommentReply);\r\n     * let uri = params['model'].links('comment-unflag').href;\r\n     * ```\r\n     * @method\r\n     * @param data Article Comment Reply object.\r\n     * @returns A promise that is resolved once the unflag article comment reply action has been performed.\r\n     * @example // articleCommentReply is a resource previously fetched using get action.\r\n                    articleInstanceCommentRepliesClient.unflag(articleCommentReply)\r\n                        .success(function (data) {\r\n                            // perform success action here\r\n                        }).error(function (response, status, headers, config) {\r\n                            // perform error handling here\r\n                        });\r\n     **/\r\n    ArticleInstanceCommentRepliesClient.prototype.unflag = function (data) {\r\n        return this.apiClient.put(this.routeDefinition.unflag(data), this.routeDefinition.updateParams(data));\r\n    };\r\n    /**\r\n     * Returns a promise that is resolved once the get action has been performed. Success response returns the specified article comment reply resource.\r\n     * @method\r\n     * @param articleId Article id which uniquely identifies article whose comment reply resource needs to be retrieved.\r\n     * @param commentId Comment id which uniquely identifies comment whose reply resource needs to be retrieved.\r\n     * @param replyId Id which uniquely identifies article comment reply resource that needs to be retrieved.\r\n     * @param options Options object that contains embed data.\r\n     * @returns A promise that is resolved once the get action has been performed.\r\n     * @example articleInstanceCommentRepliesClient.get('<comment-reply-id>')\r\n                    .then(function (data) {\r\n                        // perform success action here\r\n                    },\r\n                     function (response, status, headers, config) {\r\n                         // perform error handling here\r\n                    });\r\n     **/\r\n    ArticleInstanceCommentRepliesClient.prototype.get = function (articleId, commentId, replyId, options) {\r\n        return this.apiClient.get(this.articleInstanceCommentRepliesRoute.get(articleId, commentId, replyId, options));\r\n    };\r\n    /**\r\n     * Returns a promise that is resolved once the remove article comment reply action has been performed. If the action is successfully completed, the article comment reply resource will be permanently removed from the system. This route uses HAL enabled objects to obtain routes and therefore it doesn't apply `articleCommentRepliesRoute` route template. Here is an example of how a route can be obtained from HAL enabled objects:\r\n     * ```\r\n     * let params = apiClient.removeParams(articleCommentReply);\r\n     * let uri = params['model'].links('delete').href;\r\n     * ```\r\n     * @method\r\n     * @param data An article comment object used to delete specified article comment reply resource.\r\n     * @returns A promise that is resolved once the remove article comment reply action has been performed.\r\n     * @example // articleCommentReply is a resource previously fetched using get action.\r\n                    articleInstanceCommentRepliesClient.remove(articleCommentReply)\r\n                        .then(function (data) {\r\n                            // perform success action here\r\n                        },\r\n                         function (response, status, headers, config) {\r\n                            // perform error handling here\r\n                        });\r\n     **/\r\n    ArticleInstanceCommentRepliesClient.prototype.remove = function (data) {\r\n        return this.apiClient.delete(this.routeDefinition.delete(data));\r\n    };\r\n    /**\r\n     * Returns a promise that is resolved once the removeAll article comment reply action has been performed. This action will remove all comment replies from an article comment if successfully completed. This route uses HAL enabled objects to obtain routes and therefore it doesn't apply `articleInstanceCommentsRepliesRoute` route template. Here is an example of how a route can be obtained from HAL enabled objects:\r\n     * ```\r\n     * let params = modelMapper.removeParams(articleCommentReply);\r\n     * let uri = params['model'].links('delete-comments-by-article').href;\r\n     * ```\r\n     * @method\r\n     * @param data Article object used to delete all article comments in the system.\r\n     * @returns a promise that is resolved once the removeAll article comment reply action has been performed.\r\n     * @example // articleCommentReply is a resource previously fetched using get action.\r\n                    articleInstanceCommentRepliesClient.removeAll(articleCommentReply)\r\n                        .then(function (data) {\r\n                            // perform success action here\r\n                        },\r\n                         function (response, status, headers, config) {\r\n                             // perform error handling here\r\n                        });\r\n     **/\r\n    ArticleInstanceCommentRepliesClient.prototype.removeAll = function (data) {\r\n        return this.apiClient.delete(this.routeDefinition.deleteAll(data));\r\n    };\r\n    /**\r\n     * Returns a promise that is resolved once the report article comment reply action has been performed. This action sets the state of an article comment reply to \"reported\". This route uses HAL enabled objects to obtain routes and therefore it doesn't apply `articleCommentRepliesRoute` route template. Here is an example of how a route can be obtained from HAL enabled objects:\r\n     * ```\r\n     * let params = modelMapper.updateParams(articleCommentReply);\r\n     * let uri = params['model'].links('comment-report').href;\r\n     * ```\r\n     * @method\r\n     * @param data Article Comment Reply object.\r\n     * @param options Notification configuration used to control the article comment recourse access when managing notification distribution.\r\n     * @returns A promise that is resolved once the report article comment reply action has been performed.\r\n     * @example // articleCommentReply is a resource previously fetched using get action.\r\n                    articleInstanceCommentRepliesClient.report(articleCommentReply, commentOptions)\r\n                        .then(function (data) {\r\n                            // perform success action here\r\n                        },\r\n                         function (response, status, headers, config) {\r\n                            // perform error handling here\r\n                        });\r\n     **/\r\n    ArticleInstanceCommentRepliesClient.prototype.report = function (data, options) {\r\n        return this.apiClient.put(this.routeDefinition.report(data), this.routeDefinition.updateParams(options));\r\n    };\r\n    /**\r\n     * Returns a promise that is resolved once the unreport article comment reply action has been performed. This action removes the \"reported\" comment reply state. This route uses HAL enabled objects to obtain routes and therefore it doesn't apply `articleCommentRepliesRoute` route template. Here is an example of how a route can be obtained from HAL enabled objects:\r\n     * ```\r\n     * let params = modelMapper.updateParams(articleCommentReply);\r\n     * let uri = params['model'].links('comment-unreport').href;\r\n     * ```\r\n     * @method\r\n     * @param data Article Comment Reply object.\r\n     * @returns A promise that is resolved once the unreport article comment reply action has been performed.\r\n     * @example // articleCommentReply is a resource previously fetched using get action.\r\n                    articleInstanceCommentRepliesClient.unreport(articleCommentReply)\r\n                        .then(function (data) {\r\n                            // perform success action here\r\n                        },\r\n                         function (response, status, headers, config) {\r\n                            // perform error handling here\r\n                        });\r\n     **/\r\n    ArticleInstanceCommentRepliesClient.prototype.unreport = function (data) {\r\n        return this.apiClient.put(this.routeDefinition.unreport(data), this.routeDefinition.updateParams(data));\r\n    };\r\n    /**\r\n     * Returns a promise that is resolved once the mark as spam article comment reply action has been performed. This action sets the state of an article comment reply to \"spam\". This route uses HAL enabled objects to obtain routes and therefore it doesn't apply `articleCommentRepliesRoute` route template. Here is an example of how a route can be obtained from HAL enabled objects:\r\n     * ```\r\n     * let params = modelMapper.updateParams(articleCommentReply);\r\n     * let uri = params['model'].links('comment-spam').href;\r\n     * ```\r\n     * @method\r\n     * @param data Article Comment Reply object.\r\n     * @returns A promise that is resolved once the mark as spam article comment reply action has been performed.\r\n     * @example // articleCommentReply is a resource previously fetched using get action.\r\n                    articleInstanceCommentRepliesClient.spam(articleCommentReply)\r\n                        .then(function (data) {\r\n                            // perform success action here\r\n                        },\r\n                         function (response, status, headers, config) {\r\n                            // perform error handling here\r\n                        });\r\n     **/\r\n    ArticleInstanceCommentRepliesClient.prototype.spam = function (data) {\r\n        return this.apiClient.put(this.routeDefinition.spam(data), this.routeDefinition.updateParams(data));\r\n    };\r\n    /**\r\n     * Returns a promise that is resolved once the unspam article comment reply action has been performed. This action removes the \"spam\" comment reply state. This route uses HAL enabled objects to obtain routes and therefore it doesn't apply `articleCommentRepliesRoute` route template. Here is an example of how a route can be obtained from HAL enabled objects:\r\n     * ```\r\n     * let params = modelMapper.updateParams(articleCommentReply);\r\n     * let uri = params['model'].links('comment-unspam').href;\r\n     * ```\r\n     * @method\r\n     * @param data Article Comment Reply object.\r\n     * @returns a promise that is resolved once the unspam article comment reply action has been performed.\r\n     * @example // articleCommentReply is a resource previously fetched using get action.\r\n                      articleInstanceCommentRepliesClient.unspam(articleCommentReply)\r\n                        .then(function (data) {\r\n                            // perform success action here\r\n                        },\r\n                         function (response, status, headers, config) {\r\n                            // perform error handling here\r\n                        });\r\n     **/\r\n    ArticleInstanceCommentRepliesClient.prototype.unspam = function (data) {\r\n        return this.apiClient.put(this.routeDefinition.unspam(data), this.routeDefinition.updateParams(data));\r\n    };\r\n    /**\r\n     * Returns a promise that is resolved once the update article comment reply action has been performed; this action updates an article comment reply resource. This route uses HAL enabled objects to obtain routes and therefore it doesn't apply `articleCommentRepliesRoute` route template. Here is an example of how a route can be obtained from HAL enabled objects:\r\n     * ```\r\n     * let params = modelMapper.updateParams(articleCommentReply);\r\n     * let uri = params['model'].links('put').href;\r\n     * ```\r\n     * @method\r\n     * @param data An article comment object used to update specified article comment reply resource.\r\n     * @returns A promise that is resolved once the update article comment reply action has been performed.\r\n     * @example // articleCommentReply is a resource previously fetched using get action.\r\n                    articleInstanceCommentRepliesClient.update(articleCommentReply)\r\n                        .then(function (data) {\r\n                            // perform success action here\r\n                        },\r\n                         function (response, status, headers, config) {\r\n                            // perform error handling here\r\n                        });\r\n     **/\r\n    ArticleInstanceCommentRepliesClient.prototype.update = function (data) {\r\n        return this.apiClient.put(this.routeDefinition.update(data), this.routeDefinition.updateParams(data));\r\n    };\r\n    return ArticleInstanceCommentRepliesClient;\r\n}());\r\nArticleInstanceCommentRepliesClient = tslib_1.__decorate([\r\n    inversify_1.injectable(),\r\n    tslib_1.__param(0, inversify_1.inject(_1.TYPES.ArticleInstanceCommentRepliesRoute)),\r\n    tslib_1.__param(1, inversify_1.inject(httpApi_1.httpTYPES.ApiClient)),\r\n    tslib_1.__metadata(\"design:paramtypes\", [typeof (_a = typeof _1.ArticleInstanceCommentRepliesRoute !== \"undefined\" && _1.ArticleInstanceCommentRepliesRoute) === \"function\" && _a || Object, typeof (_b = typeof httpApi_1.ApiClient !== \"undefined\" && httpApi_1.ApiClient) === \"function\" && _b || Object])\r\n], ArticleInstanceCommentRepliesClient);\r\nexports.ArticleInstanceCommentRepliesClient = ArticleInstanceCommentRepliesClient;\r\nvar _a, _b;\r\n/**\r\n * @overview\r\n ***Notes:**\r\n - Refer to the [REST API documentation](https://github.com/Baasic/baasic-rest-api/wiki) for detailed information about available Baasic REST API end-points.\r\n - All end-point objects are transformed by the associated route service.\r\n */ \r\n\n\n/***/ }),\n/* 119 */\n/***/ (function(module, exports, __webpack_require__) {\n\n\"use strict\";\n/* globals module */\r\n/**\r\n * @module articleInstanceCommentRepliesRoute\r\n * @description Baasic Article Instance Comment Replies Route Definition provides Baasic route templates which can be expanded to Baasic REST URIs. Various services can use Baasic Article Instance Comment Replies Route Service to obtain needed routes while other routes will be obtained through HAL. By convention, all route services use the same function names as their corresponding services.\r\n */\r\n\r\nObject.defineProperty(exports, \"__esModule\", { value: true });\r\nvar tslib_1 = __webpack_require__(1);\r\nvar inversify_1 = __webpack_require__(0);\r\nvar common_1 = __webpack_require__(2);\r\n;\r\nvar contracts_1 = __webpack_require__(3);\r\nvar ArticleInstanceCommentRepliesRoute = (function (_super) {\r\n    tslib_1.__extends(ArticleInstanceCommentRepliesRoute, _super);\r\n    function ArticleInstanceCommentRepliesRoute(appOptions) {\r\n        var _this = _super.call(this, appOptions) || this;\r\n        _this.appOptions = appOptions;\r\n        _this.findRoute = 'articles/{articleId}/comments/{commentId}/replies/{?searchQuery,statuses,page,rpp,sort,embed,fields}';\r\n        _this.getRoute = 'articles/{articleId}/comments/{commentId}/replies/{id}/{?embed,fields}';\r\n        _this.createRoute = 'articles/{articleId}/comments/{commentId}/replies';\r\n        _this.updateRoute = 'articles/{articleId}/comments/{id}';\r\n        _this.approveRoute = 'articles/{articleId}/comments/{commentId}/replies/{id}/approve';\r\n        _this.unapproveRoute = '/articles/{articleId}/comments/{commentId}/replies/{id}/unapprove';\r\n        _this.flagRoute = 'articles/{articleId}/comments/{commentId}/replies/{id}/flag';\r\n        _this.unflagRoute = 'articles/{articleId}/comments/{commentId}/replies/{id}/unflag';\r\n        _this.reportRoute = 'articles/{articleId}/comments/{commentId}/replies/{id}/report';\r\n        _this.deleteRoute = 'articles/{articleId}/comments/{id}';\r\n        _this.deleteAllRoute = 'articles/{articleId}/comments';\r\n        _this.unreportRoute = 'articles/{articleId}/comments/{commentId}/replies/{id}/unreport';\r\n        _this.spamRoute = 'articles/{articleId}/comments/{commentId}/replies/{id}/spam';\r\n        _this.unspamRoute = '/articles/{articleId}/comments/{commentId}/replies/{id}/unspam';\r\n        return _this;\r\n    }\r\n    /**\r\n     * Parses find route which can be expanded with additional options. Supported items are:\r\n     * - `searchQuery` - A string value used to identify article comment reply resources using the phrase search.\r\n     * - `page` - A value used to set the page number, i.e. to retrieve certain article comment reply subset from the storage.\r\n     * - `rpp` - A value used to limit the size of result set per page.\r\n     * - `sort` - A string used to set the article comment reply property to sort the result collection by.\r\n     * - `embed` - Comma separated list of resources to be contained within the current representation.\r\n     * - `statuses` - Comma separated list of article comment reply states that specify where search should be done (Allowed states: Approved, Spam, Reported, Flagged and UnApproved).\r\n     * @method\r\n     * @param articleId Article id which uniquely identifies article whose comment reply resources need to be retrieved.\r\n     * @param commentId Comment id which uniquely identifies comment whose reply resources need to be retrieved.\r\n     * @param options Query resource options.\r\n     * @example articleCommentRepliesRoute.find({ searchQuery: '<search-phrase>' });\r\n     **/\r\n    ArticleInstanceCommentRepliesRoute.prototype.find = function (articleId, commentId, options) {\r\n        var params = this.modelMapper.findParams(options);\r\n        params.articleId = articleId;\r\n        params.commentId = commentId;\r\n        return _super.prototype.baseFind.call(this, this.findRoute, options);\r\n    };\r\n    /**\r\n     * Parses get route which can be expanded with additional options. Supported items are:\r\n     * - `id` - Id which uniquely identifies article comment reply resource that needs to be retrieved.\r\n     * - `embed` - Comma separated list of resources to be contained within the current representation.\r\n     * @method\r\n     * @example articleCommentRepliesRoute.get({ id: '<comment-reply-id>' });\r\n     **/\r\n    ArticleInstanceCommentRepliesRoute.prototype.get = function (articleId, commentId, replyId, options) {\r\n        var params = this.utility.extend({}, options);\r\n        params.articleId = articleId;\r\n        params.commentId = commentId;\r\n        return _super.prototype.baseGet.call(this, this.getRoute, replyId, params);\r\n    };\r\n    /**\r\n     * Parses create article comment reply route; this URI template does not support any additional items.\r\n     * @method\r\n     * @example articleCommentRepliesRoute.create(data);\r\n     **/\r\n    ArticleInstanceCommentRepliesRoute.prototype.create = function (articleId, data) {\r\n        var params = this.utility.extend({}, data);\r\n        params.articleId = articleId;\r\n        return _super.prototype.baseCreate.call(this, this.createRoute, params);\r\n    };\r\n    ArticleInstanceCommentRepliesRoute.prototype.update = function (data) {\r\n        return _super.prototype.baseUpdate.call(this, this.updateRoute, data);\r\n    };\r\n    ArticleInstanceCommentRepliesRoute.prototype.approve = function (data) {\r\n        return _super.prototype.baseUpdate.call(this, this.approveRoute, data, undefined, 'comment-approve');\r\n    };\r\n    ArticleInstanceCommentRepliesRoute.prototype.unapprove = function (data) {\r\n        return _super.prototype.baseUpdate.call(this, this.unapproveRoute, data, undefined, 'comment-unapprove');\r\n    };\r\n    ArticleInstanceCommentRepliesRoute.prototype.flag = function (data) {\r\n        return _super.prototype.baseUpdate.call(this, this.flagRoute, data, undefined, 'comment-flag');\r\n    };\r\n    ArticleInstanceCommentRepliesRoute.prototype.unflag = function (data) {\r\n        return _super.prototype.baseUpdate.call(this, this.unflagRoute, data, undefined, 'comment-unflag');\r\n    };\r\n    ArticleInstanceCommentRepliesRoute.prototype.report = function (data) {\r\n        return _super.prototype.baseUpdate.call(this, this.reportRoute, data, undefined, 'comment-report');\r\n    };\r\n    ArticleInstanceCommentRepliesRoute.prototype.delete = function (data) {\r\n        return _super.prototype.baseDelete.call(this, this.deleteRoute, data);\r\n    };\r\n    ArticleInstanceCommentRepliesRoute.prototype.deleteAll = function (data) {\r\n        return _super.prototype.baseUpdate.call(this, this.deleteAllRoute, data, undefined, 'delete-comments-by-article');\r\n    };\r\n    ArticleInstanceCommentRepliesRoute.prototype.unreport = function (data) {\r\n        return _super.prototype.baseUpdate.call(this, this.unreportRoute, data, undefined, 'comment-unreport');\r\n    };\r\n    ArticleInstanceCommentRepliesRoute.prototype.spam = function (data) {\r\n        return _super.prototype.baseUpdate.call(this, this.spamRoute, data, undefined, 'comment-spam');\r\n    };\r\n    ArticleInstanceCommentRepliesRoute.prototype.unspam = function (data) {\r\n        return _super.prototype.baseUpdate.call(this, this.unspamRoute, data, undefined, 'comment-unspam');\r\n    };\r\n    return ArticleInstanceCommentRepliesRoute;\r\n}(common_1.BaseRoute));\r\nArticleInstanceCommentRepliesRoute = tslib_1.__decorate([\r\n    inversify_1.injectable(),\r\n    tslib_1.__param(0, inversify_1.inject(contracts_1.TYPES.IAppOptions)),\r\n    tslib_1.__metadata(\"design:paramtypes\", [typeof (_a = typeof contracts_1.IAppOptions !== \"undefined\" && contracts_1.IAppOptions) === \"function\" && _a || Object])\r\n], ArticleInstanceCommentRepliesRoute);\r\nexports.ArticleInstanceCommentRepliesRoute = ArticleInstanceCommentRepliesRoute;\r\nvar _a;\r\n/**\r\n * @overview\r\n ***Notes:**\r\n - Refer to the [REST API documentation](https://github.com/Baasic/baasic-rest-api/wiki) for detailed information about available Baasic REST API end-points.\r\n - [URI Template](https://github.com/Baasic/uritemplate-js) syntax enables expanding the Baasic route templates to Baasic REST URIs providing it with an object that contains URI parameters.\r\n - All end-point objects are transformed by the associated route service.\r\n*/ \r\n\n\n/***/ }),\n/* 120 */\n/***/ (function(module, exports, __webpack_require__) {\n\n\"use strict\";\n/* globals module */\r\n/**\r\n * @module articleInstanceCommentsRoute\r\n * @description Baasic Article Instance Comments Route Definition provides Baasic route templates which can be expanded to Baasic REST URIs. Various services can use Baasic Article Instance Comments Route Definition to obtain needed routes while other routes will be obtained through HAL. By convention, all route services use the same function names as their corresponding services.\r\n*/\r\n\r\nObject.defineProperty(exports, \"__esModule\", { value: true });\r\nvar tslib_1 = __webpack_require__(1);\r\nvar inversify_1 = __webpack_require__(0);\r\nvar common_1 = __webpack_require__(2);\r\n;\r\nvar contracts_1 = __webpack_require__(3);\r\nvar _1 = __webpack_require__(6);\r\nvar ArticleInstanceCommentsRoute = (function (_super) {\r\n    tslib_1.__extends(ArticleInstanceCommentsRoute, _super);\r\n    function ArticleInstanceCommentsRoute(articleInstanceCommentRepliesRoute, appOptions) {\r\n        var _this = _super.call(this, appOptions) || this;\r\n        _this.articleInstanceCommentRepliesRoute = articleInstanceCommentRepliesRoute;\r\n        _this.appOptions = appOptions;\r\n        _this.findRoute = 'articles/{articleId}/comments/{?searchQuery,statuses,page,rpp,sort,embed,fields}';\r\n        _this.getRoute = 'articles/{articleId}/comments/{id}/{?embed,fields}';\r\n        _this.createRoute = 'articles/{articleId}/comments/';\r\n        _this.updateRoute = 'articles/{articleId}/comments/{id}';\r\n        _this.deleteRoute = 'articles/{articleId}/comments/{id}';\r\n        _this.deleteAllRoute = 'articles/{articleId}/comments/{id}';\r\n        _this.approveRoute = 'articles/{articleId}/comments/{id}/approve';\r\n        _this.unapproveRoute = 'articles/{articleId}/comments/{id}/unapprove';\r\n        _this.flagRoute = 'articles/{articleId}/comments/{id}/flag';\r\n        _this.unflagRoute = 'articles/{articleId}/comments/{id}/unflag';\r\n        _this.reportRoute = 'articles/{articleId}/comments/{id}/report';\r\n        _this.unreportRoute = 'articles/{articleId}/comments/{id}/unreport';\r\n        _this.spamRoute = 'articles/{articleId}/comments/{id}/spam';\r\n        _this.unspamRoute = 'articles/{articleId}/comments/{id}/unspam';\r\n        return _this;\r\n    }\r\n    Object.defineProperty(ArticleInstanceCommentsRoute.prototype, \"replies\", {\r\n        get: function () {\r\n            return this.articleInstanceCommentRepliesRoute;\r\n        },\r\n        enumerable: true,\r\n        configurable: true\r\n    });\r\n    /**\r\n     * Parses find route which can be expanded with additional options. Supported items are:\r\n     * - `searchQuery` - A string value used to identify article comment resources using the phrase search.\r\n     * - `page` - A value used to set the page number, i.e. to retrieve certain article comment subset from the storage.\r\n     * - `rpp` - A value used to limit the size of result set per page.\r\n     * - `sort` - A string used to set the article comment property to sort the result collection by.\r\n     * - `embed` - Comma separated list of resources to be contained within the current representation.\r\n     * - `statuses` - Comma separated list of article comment states that specify where search should be done (Allowed states: Approved, Spam, Reported, Flagged and UnApproved).\r\n     * @method\r\n     * @param articleId Article slug or id which uniquely identifies article whose comment resources need to be retrieved.\r\n     * @param options Query resource options object.\r\n     * @example articleInstanceCommentsRoute.find({ searchQuery: '<search-phrase>' });\r\n     **/\r\n    ArticleInstanceCommentsRoute.prototype.find = function (articleId, options) {\r\n        var params = this.modelMapper.findParams(options);\r\n        params.articleId = articleId;\r\n        return _super.prototype.baseCreate.call(this, this.findRoute, params);\r\n    };\r\n    /**\r\n     * Parses get route which can be expanded with additional options. Supported items are:\r\n     * - `id` - Id which uniquely identifies article comment resource that needs to be retrieved.\r\n     * - `embed` - Comma separated list of resources to be contained within the current representation.\r\n     * @method\r\n     * @param articleId Article slug or id which uniquely identifies article whose comment resource needs to be retrieved.\r\n     * @param commentId Id which identifies article comment resource that needs to be retrieved.\r\n     * @param options Options object that contains embed data.\r\n     * @example articleInstanceCommentsRoute.get().expand({ id: '<comment-id>' });\r\n     **/\r\n    ArticleInstanceCommentsRoute.prototype.get = function (articleId, commentId, options) {\r\n        var params = this.utility.extend({}, options);\r\n        params.articleId = articleId;\r\n        params.id = commentId;\r\n        return _super.prototype.baseGet.call(this, this.getRoute, params);\r\n    };\r\n    /**\r\n     * Parses create route; this URI template doesnt support any additional options.\r\n     * @method\r\n     * @param data An article comment object that needs to be inserted into the system.\r\n     * @example articleInstanceCommentsRoute.create(data);\r\n     **/\r\n    ArticleInstanceCommentsRoute.prototype.create = function (data) {\r\n        return _super.prototype.baseCreate.call(this, this.createRoute, data);\r\n    };\r\n    /**\r\n     * Parses update route; this URI template doesnt support any additional options.\r\n     * @method\r\n     * @param data An article comments object used to update specified article comment resource.\r\n     * @example articleInstanceCommentsRoute.update(data);\r\n     **/\r\n    ArticleInstanceCommentsRoute.prototype.update = function (data) {\r\n        return _super.prototype.baseUpdate.call(this, this.updateRoute, data);\r\n    };\r\n    /**\r\n     * Parses delete route; this URI template doesnt support any additional options.\r\n     * @method\r\n     * @param data An article comments object used to delete specified article comment resource.\r\n     * @example articleInstanceCommentsRoute.delete(data);\r\n     **/\r\n    ArticleInstanceCommentsRoute.prototype.delete = function (data) {\r\n        return _super.prototype.baseDelete.call(this, this.deleteRoute, data);\r\n    };\r\n    /**\r\n     * Parses delete all route; this URI template doesnt support any additional options.\r\n     * @method\r\n     * @param data An article object used to delete specified article comment resource.\r\n     * @example articleInstanceCommentsRoute.deleteAll(data);\r\n     **/\r\n    ArticleInstanceCommentsRoute.prototype.deleteAll = function (data) {\r\n        return _super.prototype.baseDelete.call(this, this.deleteAllRoute, data, undefined, 'delete-comments-by-article');\r\n    };\r\n    /**\r\n     * Parses approve route; this URI template doesnt support any additional options.\r\n     * @method\r\n     * @param data An article comment object.\r\n     * @example articleInstanceCommentsRoute.approve(data);\r\n     **/\r\n    ArticleInstanceCommentsRoute.prototype.approve = function (data) {\r\n        return _super.prototype.baseUpdate.call(this, this.approveRoute, data, undefined, 'comment-approve');\r\n    };\r\n    /**\r\n     * Parses unapprove route; this URI template doesnt support any additional options.\r\n     * @method\r\n     * @param data An article comment object.\r\n     * @example articleInstanceCommentsRoute.unapprove(data);\r\n     **/\r\n    ArticleInstanceCommentsRoute.prototype.unapprove = function (data) {\r\n        return _super.prototype.baseUpdate.call(this, this.unapproveRoute, data, undefined, 'comment-unapprove');\r\n    };\r\n    /**\r\n     * Parses flag route; this URI template doesnt support any additional options.\r\n     * @method\r\n     * @param data An article comment object.\r\n     * @example articleInstanceCommentsRoute.flag(data);\r\n     **/\r\n    ArticleInstanceCommentsRoute.prototype.flag = function (data) {\r\n        return _super.prototype.baseUpdate.call(this, this.flagRoute, data, undefined, 'comment-flag');\r\n    };\r\n    /**\r\n     * Parses unflag route; this URI template doesnt support any additional options.\r\n     * @method\r\n     * @param data An article comment object.\r\n     * @example articleInstanceCommentsRoute.unflag(data);\r\n     **/\r\n    ArticleInstanceCommentsRoute.prototype.unflag = function (data) {\r\n        return _super.prototype.baseUpdate.call(this, this.unflagRoute, data, undefined, 'comment-unflag');\r\n    };\r\n    /**\r\n     * Parses report route; this URI template doesnt support any additional options.\r\n     * @method\r\n     * @param data An article comment object.\r\n     * @example articleInstanceCommentsRoute.report(data);\r\n     **/\r\n    ArticleInstanceCommentsRoute.prototype.report = function (data) {\r\n        return _super.prototype.baseUpdate.call(this, this.reportRoute, data, undefined, 'comment-report');\r\n    };\r\n    /**\r\n     * Parses unreport route; this URI template doesnt support any additional options.\r\n     * @method\r\n     * @param data An article comment object.\r\n     * @example articleInstanceCommentsRoute.unreport(data);\r\n     **/\r\n    ArticleInstanceCommentsRoute.prototype.unreport = function (data) {\r\n        return _super.prototype.baseUpdate.call(this, this.unreportRoute, data, undefined, 'comment-unreport');\r\n    };\r\n    /**\r\n     * Parses spam route; this URI template doesnt support any additional options.\r\n     * @method\r\n     * @param data An article comment object.\r\n     * @example articleInstanceCommentsRoute.spam(data);\r\n     **/\r\n    ArticleInstanceCommentsRoute.prototype.spam = function (data) {\r\n        return _super.prototype.baseUpdate.call(this, this.spamRoute, data, undefined, 'comment-spam');\r\n    };\r\n    /**\r\n     * Parses unspam route; this URI template doesnt support any additional options.\r\n     * @method\r\n     * @param data An article comment object.\r\n     * @example articleInstanceCommentsRoute.unspam(data);\r\n     **/\r\n    ArticleInstanceCommentsRoute.prototype.unspam = function (data) {\r\n        return _super.prototype.baseUpdate.call(this, this.unspamRoute, data, undefined, 'comment-unspam');\r\n    };\r\n    return ArticleInstanceCommentsRoute;\r\n}(common_1.BaseRoute));\r\nArticleInstanceCommentsRoute = tslib_1.__decorate([\r\n    inversify_1.injectable(),\r\n    tslib_1.__param(0, inversify_1.inject(_1.TYPES.ArticleInstanceCommentRepliesRoute)),\r\n    tslib_1.__param(1, inversify_1.inject(contracts_1.TYPES.IAppOptions)),\r\n    tslib_1.__metadata(\"design:paramtypes\", [typeof (_a = typeof _1.ArticleInstanceCommentRepliesRoute !== \"undefined\" && _1.ArticleInstanceCommentRepliesRoute) === \"function\" && _a || Object, typeof (_b = typeof contracts_1.IAppOptions !== \"undefined\" && contracts_1.IAppOptions) === \"function\" && _b || Object])\r\n], ArticleInstanceCommentsRoute);\r\nexports.ArticleInstanceCommentsRoute = ArticleInstanceCommentsRoute;\r\nvar _a, _b;\r\n/**\r\n * @overview\r\n ***Notes:**\r\n - Refer to the [REST API documentation](https://github.com/Baasic/baasic-rest-api/wiki) for detailed information about available Baasic REST API end-points.\r\n - [URI Template](https://github.com/Baasic/uritemplate-js) syntax enables expanding the Baasic route templates to Baasic REST URIs providing it with an object that contains URI parameters.\r\n - All end-point objects are transformed by the associated route service.\r\n*/ \r\n\n\n/***/ }),\n/* 121 */\n/***/ (function(module, exports, __webpack_require__) {\n\n\"use strict\";\n\r\nfunction __export(m) {\r\n    for (var p in m) if (!exports.hasOwnProperty(p)) exports[p] = m[p];\r\n}\r\nObject.defineProperty(exports, \"__esModule\", { value: true });\r\n__export(__webpack_require__(119));\r\n__export(__webpack_require__(118));\r\n__export(__webpack_require__(120));\r\n__export(__webpack_require__(117));\r\n\n\n/***/ }),\n/* 122 */\n/***/ (function(module, exports, __webpack_require__) {\n\n\"use strict\";\n/* globals module */\r\n/**\r\n * @module articleFilesBatchClient\r\n * @description  Files Batch Client provides Baasic route templates which can be expanded to Baasic REST URIs. Various services can use Baasic Files Route Service to obtain needed routes while other routes will be obtained through HAL. By convention, all route services use the same function names as their corresponding services.\r\n*/\r\n\r\nObject.defineProperty(exports, \"__esModule\", { value: true });\r\nvar tslib_1 = __webpack_require__(1);\r\nvar inversify_1 = __webpack_require__(0);\r\n;\r\nvar httpApi_1 = __webpack_require__(4);\r\nvar _1 = __webpack_require__(6);\r\nvar ArticleFilesBatchClient = (function () {\r\n    function ArticleFilesBatchClient(articleFilesBatchRoute, apiClient) {\r\n        this.articleFilesBatchRoute = articleFilesBatchRoute;\r\n        this.apiClient = apiClient;\r\n    }\r\n    Object.defineProperty(ArticleFilesBatchClient.prototype, \"routeDefinition\", {\r\n        get: function () {\r\n            return this.articleFilesBatchRoute;\r\n        },\r\n        enumerable: true,\r\n        configurable: true\r\n    });\r\n    /**\r\n     * Returns a promise that is resolved once the unlink action has been performed. This action will remove file resources from the system if successfully completed. If derived resource's format is passed, such as `width` and `height` for the image type of file resource, the operation will remove just derived resource. Otherwise, specified file and all its accompanying derived resources will be removed from the system.\r\n     * @method\r\n     * @param data Collection of article files that needs to be deleted.\r\n     * @returns A promise that is resolved once the unlink action has been performed.\r\n     * @example // Remove original file resources\r\n                   articleFilesBatchClient.unlink([{ id: '<file-id>' }])\r\n                       .then(function (data) {\r\n                           // perform success action here\r\n                       },\r\n                        function (response, status, headers, config) {\r\n                           // perform error handling here\r\n                       });\r\n               // Remove derived file resources\r\n                   articleFilesBatchClient.unlink([{ id: '<file-id>', fileFormat: { width: <width>, height: <height> } }])\r\n                       .then(function (data) {\r\n                           // perform success action here\r\n                       },\r\n                        function (response, status, headers, config) {\r\n                           // perform error handling here\r\n                       });\r\n    **/\r\n    ArticleFilesBatchClient.prototype.unlink = function (data) {\r\n        return this.apiClient.delete(this.articleFilesBatchRoute.unlink(), undefined, data);\r\n    };\r\n    /**\r\n     * Returns a promise that is resolved once the update action has been performed; this action updates specified file resources.\r\n     * @method\r\n     * @param data A collection of article files objects used to update specified article files.\r\n     * @returns A promise that is resolved once the update action has been performed.\r\n     * @example articleFilesClient.batch.update(files)\r\n                    .then(function (data) {\r\n                        // perform success action here\r\n                    },\r\n                     function (response, status, headers, config) {\r\n                        // perform error handling here\r\n                    });\r\n     **/\r\n    ArticleFilesBatchClient.prototype.update = function (data) {\r\n        return this.apiClient.put(this.routeDefinition.update(), this.routeDefinition.updateParams(data));\r\n    };\r\n    /**\r\n     * Returns a promise that is resolved once the link action has been performed; this action links file resources from other modules into the Files module (For example: file resources from the Media Vault module can be linked directly into the Files module).\r\n     * @method\r\n     * @param data A collection of article file objects that need to be inserted into the system.\r\n     * @returns A promise that is resolved once the link action has been performed.\r\n     * @example articleFilesClient.batch.link(files)\r\n                    .then(function (data) {\r\n                        // perform success action here\r\n                    },\r\n                     function (response, status, headers, config) {\r\n                        // perform error handling here\r\n                    });\r\n     **/\r\n    ArticleFilesBatchClient.prototype.link = function (data) {\r\n        return this.apiClient.post(this.routeDefinition.link(), this.routeDefinition.createParams(data));\r\n    };\r\n    return ArticleFilesBatchClient;\r\n}());\r\nArticleFilesBatchClient = tslib_1.__decorate([\r\n    inversify_1.injectable(),\r\n    tslib_1.__param(0, inversify_1.inject(_1.TYPES.ArticleFilesBatchRoute)),\r\n    tslib_1.__param(1, inversify_1.inject(httpApi_1.httpTYPES.ApiClient)),\r\n    tslib_1.__metadata(\"design:paramtypes\", [typeof (_a = typeof _1.ArticleFilesBatchRoute !== \"undefined\" && _1.ArticleFilesBatchRoute) === \"function\" && _a || Object, typeof (_b = typeof httpApi_1.ApiClient !== \"undefined\" && httpApi_1.ApiClient) === \"function\" && _b || Object])\r\n], ArticleFilesBatchClient);\r\nexports.ArticleFilesBatchClient = ArticleFilesBatchClient;\r\nvar _a, _b;\r\n/**\r\n * @overview\r\n ***Notes:**\r\n - Refer to the [REST API documentation](https://github.com/Baasic/baasic-rest-api/wiki) for detailed information about available Baasic REST API end-points.\r\n - All end-point objects are transformed by the associated route service.\r\n*/\r\n\n\n/***/ }),\n/* 123 */\n/***/ (function(module, exports, __webpack_require__) {\n\n\"use strict\";\n/* globals module */\r\n/**\r\n * @module articleFilesBatchRoute\r\n * @description Baasic Article Files Batch Route Definition provides Baasic route templates which can be expanded to Baasic REST URIs. Various services can use Baasic Article Files Batch Route Service to obtain needed routes while other routes will be obtained through HAL. By convention, all route services use the same function names as their corresponding services.\r\n*/\r\n\r\nObject.defineProperty(exports, \"__esModule\", { value: true });\r\nvar tslib_1 = __webpack_require__(1);\r\nvar inversify_1 = __webpack_require__(0);\r\nvar common_1 = __webpack_require__(2);\r\n;\r\nvar contracts_1 = __webpack_require__(3);\r\nvar ArticleFilesBatchRoute = (function (_super) {\r\n    tslib_1.__extends(ArticleFilesBatchRoute, _super);\r\n    function ArticleFilesBatchRoute(appOptions) {\r\n        var _this = _super.call(this, appOptions) || this;\r\n        _this.appOptions = appOptions;\r\n        _this.unlinkRoute = 'article-files/batch/unlink';\r\n        _this.updateRoute = 'article-files/batch';\r\n        _this.linkRoute = 'article-files/batch/link';\r\n        return _this;\r\n    }\r\n    /**\r\n     * Parses unlink route; this URI template does not expose any additional options.\r\n     * @method\r\n     * @example articleFilesBatchRoute.unlink();\r\n     **/\r\n    ArticleFilesBatchRoute.prototype.unlink = function () {\r\n        return _super.prototype.baseCreate.call(this, this.unlinkRoute, {});\r\n    };\r\n    /**\r\n     * Parses update route; this URI template does not expose any additional options.\r\n     * @method\r\n     * @example articleFilesStreamsRoute.update();\r\n     **/\r\n    ArticleFilesBatchRoute.prototype.update = function () {\r\n        return _super.prototype.baseCreate.call(this, this.updateRoute, {});\r\n    };\r\n    /**\r\n     * Parses update route; this URI template does not expose any additional options.\r\n     * @method\r\n     * @example articleFilesStreamsRoute.link();\r\n     **/\r\n    ArticleFilesBatchRoute.prototype.link = function () {\r\n        return _super.prototype.baseCreate.call(this, this.linkRoute, {});\r\n    };\r\n    return ArticleFilesBatchRoute;\r\n}(common_1.BaseRoute));\r\nArticleFilesBatchRoute = tslib_1.__decorate([\r\n    inversify_1.injectable(),\r\n    tslib_1.__param(0, inversify_1.inject(contracts_1.TYPES.IAppOptions)),\r\n    tslib_1.__metadata(\"design:paramtypes\", [typeof (_a = typeof contracts_1.IAppOptions !== \"undefined\" && contracts_1.IAppOptions) === \"function\" && _a || Object])\r\n], ArticleFilesBatchRoute);\r\nexports.ArticleFilesBatchRoute = ArticleFilesBatchRoute;\r\nvar _a;\r\n/**\r\n * @overview\r\n ***Notes:**\r\n - Refer to the [REST API documentation](https://github.com/Baasic/baasic-rest-api/wiki) for detailed information about available Baasic REST API end-points.\r\n - [URI Template](https://github.com/Baasic/uritemplate-js) syntax enables expanding the Baasic route templates to Baasic REST URIs providing it with an object that contains URI parameters.\r\n - All end-point objects are transformed by the associated route service.\r\n*/\r\n\n\n/***/ }),\n/* 124 */\n/***/ (function(module, exports, __webpack_require__) {\n\n\"use strict\";\n/* globals module */\r\n/**\r\n * @module articleFilesClient\r\n * @description  Files Client provides Baasic route templates which can be expanded to Baasic REST URIs. Various services can use Baasic Files Route Service to obtain needed routes while other routes will be obtained through HAL. By convention, all route services use the same function names as their corresponding services.\r\n*/\r\n\r\nObject.defineProperty(exports, \"__esModule\", { value: true });\r\nvar tslib_1 = __webpack_require__(1);\r\nvar inversify_1 = __webpack_require__(0);\r\n;\r\nvar httpApi_1 = __webpack_require__(4);\r\nvar _1 = __webpack_require__(6);\r\nvar ArticleFilesClient = (function () {\r\n    function ArticleFilesClient(articleFilesRoute, articleFilesStreamsClient, ArticleFilesBatchClient, apiClient) {\r\n        this.articleFilesRoute = articleFilesRoute;\r\n        this.articleFilesStreamsClient = articleFilesStreamsClient;\r\n        this.ArticleFilesBatchClient = ArticleFilesBatchClient;\r\n        this.apiClient = apiClient;\r\n    }\r\n    Object.defineProperty(ArticleFilesClient.prototype, \"routeDefinition\", {\r\n        get: function () {\r\n            return this.articleFilesRoute;\r\n        },\r\n        enumerable: true,\r\n        configurable: true\r\n    });\r\n    Object.defineProperty(ArticleFilesClient.prototype, \"streams\", {\r\n        get: function () {\r\n            return this.articleFilesStreamsClient;\r\n        },\r\n        enumerable: true,\r\n        configurable: true\r\n    });\r\n    Object.defineProperty(ArticleFilesClient.prototype, \"batch\", {\r\n        get: function () {\r\n            return this.ArticleFilesBatchClient;\r\n        },\r\n        enumerable: true,\r\n        configurable: true\r\n    });\r\n    /**\r\n     * Returns a promise that is resolved once the find action has been performed. Success response returns a list of file resources matching the given criteria.\r\n     * @method\r\n     * @param options Query resource options object.\r\n     * @returns A promise that is resolved once the find action has been performed.\r\n     * @example articleFilesClient.find({\r\n                    pageNumber : 1,\r\n                    pageSize : 10,\r\n                    orderBy : '<field>',\r\n                    orderDirection : '<asc|desc>',\r\n                    search : '<search-phrase>'\r\n                })\r\n                .then(function (collection) {\r\n                    // perform success action here\r\n                },\r\n                 function (response, status, headers, config) {\r\n                    // perform error handling here\r\n                });\r\n     **/\r\n    ArticleFilesClient.prototype.find = function (options) {\r\n        return this.apiClient.get(this.routeDefinition.find(options));\r\n    };\r\n    /**\r\n     * Returns a promise that is resolved once the get action has been performed. Success response returns requested file resource.\r\n     * @method\r\n     * @param id Article file id which uniquely identifies article resource that needs to be retrieved.\r\n     * @param options Options object that contains embed data.\r\n     * @returns A promise that is resolved once the get action has been performed.\r\n     * @example articleFilesClient.get('<file-id>')\r\n                   .then(function (data) {\r\n                       // perform success action here\r\n                   },\r\n                    function (response, status, headers, config) {\r\n                       // perform error handling here\r\n                   });\r\n    **/\r\n    ArticleFilesClient.prototype.get = function (id, options) {\r\n        return this.apiClient.get(this.articleFilesRoute.get(id, options));\r\n    };\r\n    /**\r\n     * Returns a promise that is resolved once the unlink action has been performed. This action will remove one or many file resources from the system if successfully completed. Specified file and all its accompanying derived resources will be removed from the system. This route uses HAL enabled objects to obtain routes and therefore it doesn't apply baasicArticleFilesRouteService route template. Here is an example of how a route can be obtained from HAL enabled objects:\r\n     * ```\r\n     * let params = modelMapper.removeParams(fileEntry);\r\n     * let uri = params['model'].links('unlink').href;\r\n     * ```\r\n     * @method\r\n     * @param data Article file object.\r\n     * @param options options object.\r\n     * @returns A promise that is resolved once the unlink action has been performed.\r\n     * @example // fileEntry is a file resource previously fetched using get action. The following action will remove the original file resource and all accompanying derived file resources.\r\n                    articleFilesRoute.remove(fileEntry)\r\n                        .then(function (data) {\r\n                            // perform success action here\r\n                        },\r\n                         function (response, status, headers, config) {\r\n                            // perform error handling here\r\n                        });\r\n     **/\r\n    ArticleFilesClient.prototype.unlink = function (data, options) {\r\n        if (!options) {\r\n            options = {};\r\n        }\r\n        return this.apiClient.delete(this.articleFilesRoute.unlink(data, options));\r\n    };\r\n    /**\r\n     * Returns a promise that is resolved once the update file action has been performed; this action will update a file resource if successfully completed. This route uses HAL enabled objects to obtain routes and therefore it doesn't apply `baasicArticleFilesRouteService` route template. Here is an example of how a route can be obtained from HAL enabled objects:\r\n     ```\r\n     let params = modelMapper.updateParams(fileEntry);\r\n     let uri = params['model'].links('put').href;\r\n     ```\r\n     * @method\r\n     * @param data Article file object that need to be updated in the system.\r\n     * @returns A promise that is resolved once the update file action has been performed.\r\n     * @example // fileEntry is a file resource previously fetched using get action.\r\n                   fileEntry.description = '<description>';\r\n                   articleFilesClient.update(fileEntry)\r\n                       .then(function (data) {\r\n                           // perform success action here\r\n                       },\r\n                        function (response, status, headers, config) {\r\n                           // perform error handling here\r\n                       });\r\n    **/\r\n    ArticleFilesClient.prototype.update = function (data) {\r\n        return this.apiClient.put(this.routeDefinition.update(data), this.routeDefinition.updateParams(data));\r\n    };\r\n    /**\r\n     * Returns a promise that is resolved once the link action has been performed; this action links file resource from other modules into the Article Files module (For example: file resources from the Media Vault module can be linked directly into the Article Files module).\r\n     * @method\r\n     * @param data Article file object.\r\n     * @returns A promise that is resolved once the link action has been performed.\r\n     * @example articleFilesClient.link(fileObject)\r\n                    .then(function (response, status, headers, config) {\r\n                        // perform success handling here\r\n                    },\r\n                        function (response, status, headers, config) {\r\n                        // perform error handling here\r\n                    });\r\n     **/\r\n    ArticleFilesClient.prototype.link = function (data) {\r\n        return this.apiClient.post(this.routeDefinition.link(), this.routeDefinition.createParams(data));\r\n    };\r\n    return ArticleFilesClient;\r\n}());\r\nArticleFilesClient = tslib_1.__decorate([\r\n    inversify_1.injectable(),\r\n    tslib_1.__param(0, inversify_1.inject(_1.TYPES.ArticleFilesRoute)),\r\n    tslib_1.__param(1, inversify_1.inject(_1.TYPES.ArticleFilesStreamsClient)),\r\n    tslib_1.__param(2, inversify_1.inject(_1.TYPES.ArticleFilesBatchClient)),\r\n    tslib_1.__param(3, inversify_1.inject(httpApi_1.httpTYPES.ApiClient)),\r\n    tslib_1.__metadata(\"design:paramtypes\", [typeof (_a = typeof _1.ArticleFilesRoute !== \"undefined\" && _1.ArticleFilesRoute) === \"function\" && _a || Object, typeof (_b = typeof _1.ArticleFilesStreamsClient !== \"undefined\" && _1.ArticleFilesStreamsClient) === \"function\" && _b || Object, typeof (_c = typeof _1.ArticleFilesBatchClient !== \"undefined\" && _1.ArticleFilesBatchClient) === \"function\" && _c || Object, typeof (_d = typeof httpApi_1.ApiClient !== \"undefined\" && httpApi_1.ApiClient) === \"function\" && _d || Object])\r\n], ArticleFilesClient);\r\nexports.ArticleFilesClient = ArticleFilesClient;\r\nvar _a, _b, _c, _d;\r\n/**\r\n * @overview\r\n ***Notes:**\r\n - Refer to the [REST API documentation](https://github.com/Baasic/baasic-rest-api/wiki) for detailed information about available Baasic REST API end-points.\r\n - All end-point objects are transformed by the associated route service.\r\n*/ \r\n\n\n/***/ }),\n/* 125 */\n/***/ (function(module, exports, __webpack_require__) {\n\n\"use strict\";\n/* globals module */\r\n/**\r\n * @module articleFilesRoute\r\n * @description Baasic Article Files Route Definition provides Baasic route templates which can be expanded to Baasic REST URIs. Various services can use Baasic Article Files Route Service to obtain needed routes while other routes will be obtained through HAL. By convention, all route services use the same function names as their corresponding services.\r\n*/\r\n\r\nObject.defineProperty(exports, \"__esModule\", { value: true });\r\nvar tslib_1 = __webpack_require__(1);\r\nvar inversify_1 = __webpack_require__(0);\r\nvar common_1 = __webpack_require__(2);\r\n;\r\nvar contracts_1 = __webpack_require__(3);\r\nvar _1 = __webpack_require__(6);\r\nvar ArticleFilesRoute = (function (_super) {\r\n    tslib_1.__extends(ArticleFilesRoute, _super);\r\n    function ArticleFilesRoute(articleFilesStreamsRoute, articleFilesBatchRoute, appOptions) {\r\n        var _this = _super.call(this, appOptions) || this;\r\n        _this.articleFilesStreamsRoute = articleFilesStreamsRoute;\r\n        _this.articleFilesBatchRoute = articleFilesBatchRoute;\r\n        _this.appOptions = appOptions;\r\n        _this.findRoute = 'article-files/{?searchQuery,page,rpp,sort,embed,fields}';\r\n        _this.getRoute = 'article-files/{id}/{?embed,fields}';\r\n        _this.linkRoute = 'article-files/link';\r\n        _this.unlinkRoute = 'article-files/unlink/{id}';\r\n        _this.updateRoute = 'article-files/{id}';\r\n        return _this;\r\n    }\r\n    Object.defineProperty(ArticleFilesRoute.prototype, \"streams\", {\r\n        get: function () {\r\n            return this.articleFilesStreamsRoute;\r\n        },\r\n        enumerable: true,\r\n        configurable: true\r\n    });\r\n    Object.defineProperty(ArticleFilesRoute.prototype, \"batch\", {\r\n        get: function () {\r\n            return this.articleFilesBatchRoute;\r\n        },\r\n        enumerable: true,\r\n        configurable: true\r\n    });\r\n    /**\r\n     * Parses find route which can be expanded with additional options. Supported items are:\r\n     * - `searchQuery` - A string referencing file properties using the phrase search.\r\n     * - `page` - A value used to set the page number, i.e. to retrieve certain file subset from the storage.\r\n     * - `rpp` - A value used to limit the size of result set per page.\r\n     * - `sort` - A string used to set the file property to sort the result collection by.\r\n     * - `embed` - Comma separated list of resources to be contained within the current representation.\r\n     * @method\r\n     * @param options Query resource options object.\r\n     * @example articleFilesRoute.find({searchQuery: '<search-phrase>'});\r\n     **/\r\n    ArticleFilesRoute.prototype.find = function (options) {\r\n        return _super.prototype.baseFind.call(this, this.findRoute, options);\r\n    };\r\n    /**\r\n     * Parses get route; this route should be expanded with the Id of the file resource.\r\n     * @method\r\n     * @param id Article file id which uniquely identifies article resource that needs to be retrieved.\r\n     * @param options Options object that contains embed data.\r\n     * @example articleFilesRoute.get({id: '<file-id>'});\r\n     **/\r\n    ArticleFilesRoute.prototype.get = function (id, options) {\r\n        return _super.prototype.baseGet.call(this, this.getRoute, id, options);\r\n    };\r\n    /**\r\n     * Parses link route; this URI template does not expose any additional options.\r\n     * @method\r\n     * @example articleFilesRoute.link();\r\n     **/\r\n    ArticleFilesRoute.prototype.link = function () {\r\n        return _super.prototype.baseCreate.call(this, this.linkRoute, {});\r\n    };\r\n    /**\r\n     * Parses unlink route; this URI template does not expose any additional options.\r\n     * @method\r\n     * @example articleFilesRoute.unlink(data);\r\n     **/\r\n    ArticleFilesRoute.prototype.unlink = function (data, options) {\r\n        return _super.prototype.baseDelete.call(this, this.unlinkRoute, data, options, 'unlink');\r\n    };\r\n    /**\r\n     * Parses update route; this URI template does not expose any additional options.\r\n     * @method\r\n     * @example articleFilesRoute.update(data);\r\n     **/\r\n    ArticleFilesRoute.prototype.update = function (data) {\r\n        if (!this.utility.isObject(data)) {\r\n            data = {\r\n                id: data\r\n            };\r\n        }\r\n        return _super.prototype.baseUpdate.call(this, this.updateRoute, data);\r\n    };\r\n    return ArticleFilesRoute;\r\n}(common_1.BaseRoute));\r\nArticleFilesRoute = tslib_1.__decorate([\r\n    inversify_1.injectable(),\r\n    tslib_1.__param(0, inversify_1.inject(_1.TYPES.ArticleFilesStreamsRoute)),\r\n    tslib_1.__param(1, inversify_1.inject(_1.TYPES.ArticleFilesBatchRoute)),\r\n    tslib_1.__param(2, inversify_1.inject(contracts_1.TYPES.IAppOptions)),\r\n    tslib_1.__metadata(\"design:paramtypes\", [typeof (_a = typeof _1.ArticleFilesStreamsRoute !== \"undefined\" && _1.ArticleFilesStreamsRoute) === \"function\" && _a || Object, typeof (_b = typeof _1.ArticleFilesBatchRoute !== \"undefined\" && _1.ArticleFilesBatchRoute) === \"function\" && _b || Object, typeof (_c = typeof contracts_1.IAppOptions !== \"undefined\" && contracts_1.IAppOptions) === \"function\" && _c || Object])\r\n], ArticleFilesRoute);\r\nexports.ArticleFilesRoute = ArticleFilesRoute;\r\nvar _a, _b, _c;\r\n/**\r\n * @overview\r\n ***Notes:**\r\n - Refer to the [REST API documentation](https://github.com/Baasic/baasic-rest-api/wiki) for detailed information about available Baasic REST API end-points.\r\n - [URI Template](https://github.com/Baasic/uritemplate-js) syntax enables expanding the Baasic route templates to Baasic REST URIs providing it with an object that contains URI parameters.\r\n - All end-point objects are transformed by the associated route service.\r\n*/ \r\n\n\n/***/ }),\n/* 126 */\n/***/ (function(module, exports, __webpack_require__) {\n\n\"use strict\";\n/* globals module */\r\n/**\r\n * @module articleFilesStreamsClient\r\n * @description  Article Files Streams Client provides Baasic route templates which can be expanded to Baasic REST URIs. Various services can use Baasic Files Streams Route Definition to obtain needed routes while other routes will be obtained through HAL. By convention, all route services use the same function names as their corresponding services.\r\n*/\r\n\r\nObject.defineProperty(exports, \"__esModule\", { value: true });\r\nvar tslib_1 = __webpack_require__(1);\r\nvar inversify_1 = __webpack_require__(0);\r\n;\r\nvar httpApi_1 = __webpack_require__(4);\r\nvar _1 = __webpack_require__(6);\r\nvar ArticleFilesStreamsClient = (function () {\r\n    function ArticleFilesStreamsClient(articleFilesStreamsRoute, apiClient) {\r\n        this.articleFilesStreamsRoute = articleFilesStreamsRoute;\r\n        this.apiClient = apiClient;\r\n    }\r\n    Object.defineProperty(ArticleFilesStreamsClient.prototype, \"routeDefinition\", {\r\n        get: function () {\r\n            return this.articleFilesStreamsRoute;\r\n        },\r\n        enumerable: true,\r\n        configurable: true\r\n    });\r\n    /**\r\n     * Returns a promise that is resolved once the get action has been performed. Success response returns the file stream if successfully completed. If derived resource's format is passed, such as `width` and `height` for the image type of file resource, the operation will return a stream of the derived resource. Otherwise, stream of the original file resource will be retrieved.\r\n     * @method\r\n     * @param data Article file id of the original article file used to identify stream that needs to be retrieved from the system.\r\n     * @returns A promise that is resolved once the get action has been performed.\r\n     * @example // Request the original file stream\r\n                    articleFilesStreamsClient.get({id: '<file-id>'})\r\n                        .then(function (data) {\r\n                            // perform success action here\r\n                        },\r\n                         function (response, status, headers, config) {\r\n                            // perform error handling here\r\n                        });\r\n\r\n                // Request derived file stream\r\n                        articleFilesStreamsClient.get({id: '<file-id>', width: <width>, height: <height>})\r\n                            .then(function (data) {\r\n                                // perform success action here\r\n                            },\r\n                             function (response, status, headers, config) {\r\n                                 // perform error handling here\r\n                            });\r\n     **/\r\n    ArticleFilesStreamsClient.prototype.get = function (data) {\r\n        return this.apiClient.get(this.routeDefinition.get(data));\r\n    };\r\n    /**\r\n     * Returns a promise that is resolved once the get action has been performed. Success response returns the file stream as a blob. If derived resource's format is passed, such as `width` and `height` for the image type of file resource, the operation will return a blob of the derived file resource. Otherwise, blob of the original file resource will be retrieved. For more information on Blob objects please see [Blob Documentation](https://developer.mozilla.org/en-US/docs/Web/API/Blob).\r\n     * @method\r\n     * @param data Article file id of the original article file used to identify stream that needs to be retrieved from the system.\r\n     * @returns A promise that is resolved once the get action has been performed.\r\n     * @example // Request the original blob\r\n                    articleFilesStreamsClient.getBlob('<file-id>')\r\n                        .then(function (data) {\r\n                            // perform success action here\r\n                        },\r\n                         function (response, status, headers, config) {\r\n                            // perform error handling here\r\n                        });\r\n                        \r\n                // Request derived blob\r\n                        articleFilesStreamsClient.getBlob({\r\n                            id: '<file-id>',\r\n                            width: <width>,\r\n                            height: <height>\r\n                        })\r\n                        .then(function (data) {\r\n                            // perform success action here\r\n                        },\r\n                         function (response, status, headers, config) {\r\n                            // perform error handling here\r\n                        });\r\n     **/\r\n    ArticleFilesStreamsClient.prototype.getBlob = function (data) {\r\n        return this.apiClient.get(this.articleFilesStreamsRoute.get(data), { 'Accept': 'application/octet-stream' });\r\n    };\r\n    /**\r\n     * Returns a promise that is resolved once the update file stream action has been performed; this action will replace the existing stream with a new one. Alternatively, if a derived stream is being updated it will either create a new derived stream or replace the existing one. In order to update a derived stream, format needs to be passed (For example: `width` and `height` for the image type of file stream data type).\r\n     * @method\r\n     * @param data article file used to identify stream that needs to be updated.\r\n     * @param stream\r\n     * @returns A promise that is resolved once the update file stream action has been performed.\r\n     * @example // Update original file stream\r\n                    articleFilesStreamsClient.update('<file-id>', <file-stream>)\r\n                        .then(function (data) {\r\n                            // perform success action here\r\n                        },\r\n                         function (response, status, headers, config) {\r\n                            // perform error handling here\r\n                        });\r\n                // Update derived file stream\r\n                    articleFilesStreamsClient.update({id: '<file-id>', width: <width>, height: <height>}, <file-stream>)\r\n                        .then(function (data) {\r\n                            // perform success action here\r\n                        },\r\n                         function (response, status, headers, config) {\r\n                            // perform error handling here\r\n                        });\r\n     **/\r\n    ArticleFilesStreamsClient.prototype.update = function (data, stream) {\r\n        var formData = new FormData();\r\n        formData.append('file', stream);\r\n        return this.apiClient.put(this.articleFilesStreamsRoute.update(data), formData, { 'Content-Type': undefined });\r\n    };\r\n    /**\r\n     * Returns a promise that is resolved once the create file stream action has been performed; this action will upload the specified blob. For more information on Blob objects please see [Blob Documentation](https://developer.mozilla.org/en-US/docs/Web/API/Blob).\r\n     * @method\r\n     * @param data article file that needs to be saved into the system.\r\n     * @param stream\r\n     * @returns A promise that is resolved once the create file stream action has been performed.\r\n     * @example articleFilesStreamsClient.create('<file-id>', <blob>)\r\n                   .then(function (data) {\r\n                        // perform success action here\r\n                   },\r\n                    function (response, status, headers, config) {\r\n                       // perform error handling here\r\n                   });\r\n    **/\r\n    ArticleFilesStreamsClient.prototype.create = function (data, stream) {\r\n        var formData = new FormData();\r\n        formData.append('file', stream);\r\n        return this.apiClient.post(this.articleFilesStreamsRoute.create(data), formData, { 'Content-Type': undefined });\r\n    };\r\n    return ArticleFilesStreamsClient;\r\n}());\r\nArticleFilesStreamsClient = tslib_1.__decorate([\r\n    inversify_1.injectable(),\r\n    tslib_1.__param(0, inversify_1.inject(_1.TYPES.ArticleFilesStreamsRoute)),\r\n    tslib_1.__param(1, inversify_1.inject(httpApi_1.httpTYPES.ApiClient)),\r\n    tslib_1.__metadata(\"design:paramtypes\", [typeof (_a = typeof _1.ArticleFilesStreamsRoute !== \"undefined\" && _1.ArticleFilesStreamsRoute) === \"function\" && _a || Object, typeof (_b = typeof httpApi_1.ApiClient !== \"undefined\" && httpApi_1.ApiClient) === \"function\" && _b || Object])\r\n], ArticleFilesStreamsClient);\r\nexports.ArticleFilesStreamsClient = ArticleFilesStreamsClient;\r\nvar _a, _b;\r\n/**\r\n * @overview\r\n ***Notes:**\r\n - Refer to the [REST API documentation](https://github.com/Baasic/baasic-rest-api/wiki) for detailed information about available Baasic REST API end-points.\r\n - All end-point objects are transformed by the associated route service.\r\n*/ \r\n\n\n/***/ }),\n/* 127 */\n/***/ (function(module, exports, __webpack_require__) {\n\n\"use strict\";\n/* globals module */\r\n/**\r\n * @module articleFilesStreamsRoute\r\n * @description Baasic Article Files Streams Route Definition provides Baasic route templates which can be expanded to Baasic REST URIs. Various services can use Baasic Article Files Streams Route Service to obtain needed routes while other routes will be obtained through HAL. By convention, all route services use the same function names as their corresponding services.\r\n*/\r\n\r\nObject.defineProperty(exports, \"__esModule\", { value: true });\r\nvar tslib_1 = __webpack_require__(1);\r\nvar inversify_1 = __webpack_require__(0);\r\nvar common_1 = __webpack_require__(2);\r\n;\r\nvar contracts_1 = __webpack_require__(3);\r\nvar ArticleFilesStreamsRoute = (function (_super) {\r\n    tslib_1.__extends(ArticleFilesStreamsRoute, _super);\r\n    function ArticleFilesStreamsRoute(appOptions) {\r\n        var _this = _super.call(this, appOptions) || this;\r\n        _this.appOptions = appOptions;\r\n        _this.getRoute = 'article-file-streams/{id}/{?width,height}';\r\n        _this.createRoute = 'article-file-streams/{filename}/{?articleId}';\r\n        _this.updateRoute = 'article-file-streams/{id}/{?width,height}';\r\n        return _this;\r\n    }\r\n    /**\r\n     * Parses get route; this route should be expanded with id of desired file stream. Additional supported items are:\r\n     * - `width` - width of desired derived image.\r\n     * - `height` - height of desired derived image.\r\n     * @method\r\n     * @param data Article file id of the original article file used to identify stream that needs to be retrieved from the system.\r\n     * @example articleFilesRoute.get({id: '<filename>'});\r\n     **/\r\n    ArticleFilesStreamsRoute.prototype.get = function (data) {\r\n        if (!this.utility.isObject(data)) {\r\n            data = {\r\n                id: data\r\n            };\r\n        }\r\n        return _super.prototype.baseCreate.call(this, this.getRoute, data);\r\n    };\r\n    /**\r\n     * Parses create route; this route should be expanded with the filename which indicates where the stream will be saved.\r\n     * @method\r\n     * @param data article file that needs to be saved into the system.\r\n     * @example articleFilesRoute.create({filename: '<filename>'});\r\n     **/\r\n    ArticleFilesStreamsRoute.prototype.create = function (data) {\r\n        return _super.prototype.baseCreate.call(this, this.createRoute, data);\r\n    };\r\n    /**\r\n     * Parses update route; this route should be expanded with the id of the previously saved resource. Additional supported items are:\r\n     * - `width` - width of derived image to update.\r\n     * - `height` - height of derived image to update.\r\n     * @method\r\n     * @param data article file used to identify stream that needs to be updated.\r\n     * @example articleFilesRoute.update({id: '<filename>'});\r\n     **/\r\n    ArticleFilesStreamsRoute.prototype.update = function (data) {\r\n        return _super.prototype.baseUpdate.call(this, this.updateRoute, data);\r\n    };\r\n    return ArticleFilesStreamsRoute;\r\n}(common_1.BaseRoute));\r\nArticleFilesStreamsRoute = tslib_1.__decorate([\r\n    inversify_1.injectable(),\r\n    tslib_1.__param(0, inversify_1.inject(contracts_1.TYPES.IAppOptions)),\r\n    tslib_1.__metadata(\"design:paramtypes\", [typeof (_a = typeof contracts_1.IAppOptions !== \"undefined\" && contracts_1.IAppOptions) === \"function\" && _a || Object])\r\n], ArticleFilesStreamsRoute);\r\nexports.ArticleFilesStreamsRoute = ArticleFilesStreamsRoute;\r\nvar _a;\r\n/**\r\n * @overview\r\n ***Notes:**\r\n - Refer to the [REST API documentation](https://github.com/Baasic/baasic-rest-api/wiki) for detailed information about available Baasic REST API end-points.\r\n - [URI Template](https://github.com/Baasic/uritemplate-js) syntax enables expanding the Baasic route templates to Baasic REST URIs providing it with an object that contains URI parameters.\r\n - All end-point objects are transformed by the associated route service.\r\n*/ \r\n\n\n/***/ }),\n/* 128 */\n/***/ (function(module, exports, __webpack_require__) {\n\n\"use strict\";\n/* globals module */\r\n/**\r\n * @module articleInstanceFilesBatchClient\r\n * @description  Article Instance Files Batch Client provides Baasic route templates which can be expanded to Baasic REST URIs. Various services can use Baasic Files Route Service to obtain needed routes while other routes will be obtained through HAL. By convention, all route services use the same function names as their corresponding services.\r\n*/\r\n\r\nObject.defineProperty(exports, \"__esModule\", { value: true });\r\nvar tslib_1 = __webpack_require__(1);\r\nvar inversify_1 = __webpack_require__(0);\r\nvar httpApi_1 = __webpack_require__(4);\r\nvar _1 = __webpack_require__(6);\r\nvar ArticleInstanceFilesBatchClient = (function () {\r\n    function ArticleInstanceFilesBatchClient(articleInstanceFilesBatchRoute, apiClient) {\r\n        this.articleInstanceFilesBatchRoute = articleInstanceFilesBatchRoute;\r\n        this.apiClient = apiClient;\r\n    }\r\n    Object.defineProperty(ArticleInstanceFilesBatchClient.prototype, \"routeDefinition\", {\r\n        get: function () {\r\n            return this.articleInstanceFilesBatchRoute;\r\n        },\r\n        enumerable: true,\r\n        configurable: true\r\n    });\r\n    /**\r\n     * Returns a promise that is resolved once the unlink action has been performed. This action will remove file resources from the system if successfully completed. If derived resource's format is passed, such as `width` and `height` for the image type of file resource, the operation will remove just derived resource. Otherwise, specified file and all its accompanying derived resources will be removed from the system.\r\n     * @method\r\n     * @param articleId Article file id of the original article file used to identify article files on which delete action should be performed.\r\n     * @param data Collection of article delete requests which uniquely identifies article files that need to be deleted.\r\n     * @returns A promise that is resolved once the unlink action has been performed.\r\n     * @example // Remove original file resources\r\n                   articleInstanceFilesBatchClient.unlink([{ id: '<file-id>' }])\r\n                       .then(function (data) {\r\n                           // perform success action here\r\n                       },\r\n                        function (response, status, headers, config) {\r\n                           // perform error handling here\r\n                       });\r\n               // Remove derived file resources\r\n                   articleInstanceFilesBatchClient.unlink([{ id: '<file-id>', fileFormat: { width: <width>, height: <height> } }])\r\n                       .then(function (data) {\r\n                           // perform success action here\r\n                       },\r\n                        function (response, status, headers, config) {\r\n                           // perform error handling here\r\n                       });\r\n    **/\r\n    ArticleInstanceFilesBatchClient.prototype.unlink = function (articleId, data) {\r\n        return this.apiClient.delete(this.articleInstanceFilesBatchRoute.unlink(articleId), undefined, data);\r\n    };\r\n    /**\r\n     * Returns a promise that is resolved once the update action has been performed; this action updates specified file resources.\r\n     * @method\r\n     * @param articleId Article slug or id which uniquely identifies article whose article file need to be updated.\r\n     * @param data Article file object that need to be updated in the system.\r\n     * @returns A promise that is resolved once the update action has been performed.\r\n     * @example articleInstanceFilesBatchClient.update(files)\r\n                    .then(function (data) {\r\n                        // perform success action here\r\n                    },\r\n                     function (response, status, headers, config) {\r\n                        // perform error handling here\r\n                    });\r\n     **/\r\n    ArticleInstanceFilesBatchClient.prototype.update = function (articleId, data) {\r\n        return this.apiClient.put(this.routeDefinition.update(articleId), this.routeDefinition.updateParams(data));\r\n    };\r\n    /**\r\n     * Returns a promise that is resolved once the link action has been performed; this action links file resources from other modules into the Files module (For example: file resources from the Media Vault module can be linked directly into the Files module).\r\n     * @method\r\n     * @param articleId Article slug or id which uniquely identifies article whose article files need to be linked.\r\n     * @param data A collection of article file objects that need to be inserted into the system.\r\n     * @returns A promise that is resolved once the link action has been performed.\r\n     * @example articleInstanceFilesBatchClient.link(files)\r\n                    .then(function (data) {\r\n                        // perform success action here\r\n                    },\r\n                     function (response, status, headers, config) {\r\n                        // perform error handling here\r\n                    });\r\n     **/\r\n    ArticleInstanceFilesBatchClient.prototype.link = function (articleId, data) {\r\n        return this.apiClient.post(this.routeDefinition.link(articleId), this.routeDefinition.createParams(data));\r\n    };\r\n    return ArticleInstanceFilesBatchClient;\r\n}());\r\nArticleInstanceFilesBatchClient = tslib_1.__decorate([\r\n    inversify_1.injectable(),\r\n    tslib_1.__param(0, inversify_1.inject(_1.TYPES.ArticleInstanceFilesBatchRoute)),\r\n    tslib_1.__param(1, inversify_1.inject(httpApi_1.httpTYPES.ApiClient)),\r\n    tslib_1.__metadata(\"design:paramtypes\", [typeof (_a = typeof _1.ArticleInstanceFilesBatchRoute !== \"undefined\" && _1.ArticleInstanceFilesBatchRoute) === \"function\" && _a || Object, typeof (_b = typeof httpApi_1.ApiClient !== \"undefined\" && httpApi_1.ApiClient) === \"function\" && _b || Object])\r\n], ArticleInstanceFilesBatchClient);\r\nexports.ArticleInstanceFilesBatchClient = ArticleInstanceFilesBatchClient;\r\nvar _a, _b;\r\n/**\r\n * @overview\r\n ***Notes:**\r\n - Refer to the [REST API documentation](https://github.com/Baasic/baasic-rest-api/wiki) for detailed information about available Baasic REST API end-points.\r\n - All end-point objects are transformed by the associated route service.\r\n*/\r\n\n\n/***/ }),\n/* 129 */\n/***/ (function(module, exports, __webpack_require__) {\n\n\"use strict\";\n/* globals module */\r\n/**\r\n * @module articleInstanceFilesBatchRoute\r\n * @description Baasic Article Instance Files Batch Route Definition provides Baasic route templates which can be expanded to Baasic REST URIs. Various services can use Baasic Article Files Batch Route Service to obtain needed routes while other routes will be obtained through HAL. By convention, all route services use the same function names as their corresponding services.\r\n*/\r\n\r\nObject.defineProperty(exports, \"__esModule\", { value: true });\r\nvar tslib_1 = __webpack_require__(1);\r\nvar inversify_1 = __webpack_require__(0);\r\nvar common_1 = __webpack_require__(2);\r\nvar contracts_1 = __webpack_require__(3);\r\nvar ArticleInstanceFilesBatchRoute = (function (_super) {\r\n    tslib_1.__extends(ArticleInstanceFilesBatchRoute, _super);\r\n    function ArticleInstanceFilesBatchRoute(appOptions) {\r\n        var _this = _super.call(this, appOptions) || this;\r\n        _this.appOptions = appOptions;\r\n        _this.unlinkRoute = 'articles/{articleId}/files/batch/unlink';\r\n        _this.updateRoute = 'articles/{articleId}/files/batch';\r\n        _this.linkRoute = 'articles/{articleId}/files/batch/link';\r\n        return _this;\r\n    }\r\n    /**\r\n     * Parses unlink route; this URI template does not expose any additional options.\r\n     * @method\r\n     * @param articleId Article file id of the original article file used to identify article files on which delete action should be performed.\r\n     * @example articleInstanceFilesBatchRoute.unlink(articleId);\r\n     **/\r\n    ArticleInstanceFilesBatchRoute.prototype.unlink = function (articleId) {\r\n        var params = { articleId: articleId };\r\n        return _super.prototype.baseCreate.call(this, this.unlinkRoute, params);\r\n    };\r\n    /**\r\n     * Parses update route; this URI template does not expose any additional options.\r\n     * @method\r\n     * @param articleId Article slug or id which uniquely identifies article whose article file need to be updated.\r\n     * @example articleInstanceFilesStreamsRoute.update(articleId);\r\n     **/\r\n    ArticleInstanceFilesBatchRoute.prototype.update = function (articleId) {\r\n        var params = { articleId: articleId };\r\n        return _super.prototype.baseCreate.call(this, this.updateRoute, params);\r\n    };\r\n    /**\r\n     * Parses update route; this URI template does not expose any additional options.\r\n     * @method\r\n     * @param articleId Article slug or id which uniquely identifies article whose article files need to be linked.\r\n     * @example articleInstanceFilesStreamsRoute.link(articleId);\r\n     **/\r\n    ArticleInstanceFilesBatchRoute.prototype.link = function (articleId) {\r\n        var params = { articleId: articleId };\r\n        return _super.prototype.baseCreate.call(this, this.linkRoute, params);\r\n    };\r\n    return ArticleInstanceFilesBatchRoute;\r\n}(common_1.BaseRoute));\r\nArticleInstanceFilesBatchRoute = tslib_1.__decorate([\r\n    inversify_1.injectable(),\r\n    tslib_1.__param(0, inversify_1.inject(contracts_1.TYPES.IAppOptions)),\r\n    tslib_1.__metadata(\"design:paramtypes\", [typeof (_a = typeof contracts_1.IAppOptions !== \"undefined\" && contracts_1.IAppOptions) === \"function\" && _a || Object])\r\n], ArticleInstanceFilesBatchRoute);\r\nexports.ArticleInstanceFilesBatchRoute = ArticleInstanceFilesBatchRoute;\r\nvar _a;\r\n/**\r\n * @overview\r\n ***Notes:**\r\n - Refer to the [REST API documentation](https://github.com/Baasic/baasic-rest-api/wiki) for detailed information about available Baasic REST API end-points.\r\n - [URI Template](https://github.com/Baasic/uritemplate-js) syntax enables expanding the Baasic route templates to Baasic REST URIs providing it with an object that contains URI parameters.\r\n - All end-point objects are transformed by the associated route service.\r\n*/\r\n\n\n/***/ }),\n/* 130 */\n/***/ (function(module, exports, __webpack_require__) {\n\n\"use strict\";\n/* globals module */\r\n/**\r\n * @module articleInstanceFilesClient\r\n * @description  Article Instance Files Client provides Baasic route templates which can be expanded to Baasic REST URIs. Various services can use Baasic Files Route Service to obtain needed routes while other routes will be obtained through HAL. By convention, all route services use the same function names as their corresponding services.\r\n*/\r\n\r\nObject.defineProperty(exports, \"__esModule\", { value: true });\r\nvar tslib_1 = __webpack_require__(1);\r\nvar inversify_1 = __webpack_require__(0);\r\n;\r\nvar httpApi_1 = __webpack_require__(4);\r\nvar _1 = __webpack_require__(6);\r\nvar ArticleInstanceFilesClient = (function () {\r\n    function ArticleInstanceFilesClient(articleInstanceFilesRoute, articleInstanceFilesStreamsClient, ArticleInstanceFilesBatchClient, apiClient) {\r\n        this.articleInstanceFilesRoute = articleInstanceFilesRoute;\r\n        this.articleInstanceFilesStreamsClient = articleInstanceFilesStreamsClient;\r\n        this.ArticleInstanceFilesBatchClient = ArticleInstanceFilesBatchClient;\r\n        this.apiClient = apiClient;\r\n    }\r\n    Object.defineProperty(ArticleInstanceFilesClient.prototype, \"routeDefinition\", {\r\n        get: function () {\r\n            return this.articleInstanceFilesRoute;\r\n        },\r\n        enumerable: true,\r\n        configurable: true\r\n    });\r\n    Object.defineProperty(ArticleInstanceFilesClient.prototype, \"streams\", {\r\n        get: function () {\r\n            return this.articleInstanceFilesStreamsClient;\r\n        },\r\n        enumerable: true,\r\n        configurable: true\r\n    });\r\n    Object.defineProperty(ArticleInstanceFilesClient.prototype, \"batch\", {\r\n        get: function () {\r\n            return this.ArticleInstanceFilesBatchClient;\r\n        },\r\n        enumerable: true,\r\n        configurable: true\r\n    });\r\n    /**\r\n     * Returns a promise that is resolved once the find action has been performed. Success response returns a list of file resources matching the given criteria.\r\n     * @method\r\n     * @param articleId Article slug or id which uniquely identifies article whose article files need to be retrieved.\r\n     * @param options Query resource options object.\r\n     * @returns A promise that is resolved once the find action has been performed.\r\n     * @example articleInstanceFilesClient.find({\r\n                    pageNumber : 1,\r\n                    pageSize : 10,\r\n                    orderBy : '<field>',\r\n                    orderDirection : '<asc|desc>',\r\n                    search : '<search-phrase>'\r\n                })\r\n                .then(function (collection) {\r\n                    // perform success action here\r\n                },\r\n                 function (response, status, headers, config) {\r\n                    // perform error handling here\r\n                });\r\n     **/\r\n    ArticleInstanceFilesClient.prototype.find = function (articleId, options) {\r\n        return this.apiClient.get(this.articleInstanceFilesRoute.find(articleId, options));\r\n    };\r\n    /**\r\n     * Returns a promise that is resolved once the get action has been performed. Success response returns requested file resource.\r\n     * @method\r\n     * @param articleId Article slug or id which uniquely identifies article whose article files need to be retrieved.\r\n     * @param id Article file id which uniquely identifies article file that needs to be retrieved.\r\n     * @param options options object that contains embed data.\r\n     * @returns A promise that is resolved once the get action has been performed.\r\n     * @example articleInstanceFilesClient.get('<file-id>')\r\n                   .then(function (data) {\r\n                       // perform success action here\r\n                   },\r\n                    function (response, status, headers, config) {\r\n                       // perform error handling here\r\n                   });\r\n    **/\r\n    ArticleInstanceFilesClient.prototype.get = function (articleId, id, options) {\r\n        return this.apiClient.get(this.articleInstanceFilesRoute.get(articleId, id, options));\r\n    };\r\n    /**\r\n     * Returns a promise that is resolved once the unlink action has been performed. This action will remove one or many file resources from the system if successfully completed. Specified file and all its accompanying derived resources will be removed from the system. This route uses HAL enabled objects to obtain routes and therefore it doesn't apply baasicArticleFilesRouteService route template. Here is an example of how a route can be obtained from HAL enabled objects:\r\n     * ```\r\n     * let params = modelMapper.removeParams(fileEntry);\r\n     * let uri = params['model'].links('unlink').href;\r\n     * ```\r\n     * @method\r\n     * @param articleId Article slug or id which uniquely identifies article whose article files need to be deleted.\r\n     * @param data\r\n     * @param options\r\n     * @returns A promise that is resolved once the unlink action has been performed.\r\n     * @example // fileEntry is a file resource previously fetched using get action. The following action will remove the original file resource and all accompanying derived file resources.\r\n                    articleInstanceFilesRoute.remove(fileEntry)\r\n                        .then(function (data) {\r\n                            // perform success action here\r\n                        },\r\n                         function (response, status, headers, config) {\r\n                            // perform error handling here\r\n                        });\r\n     **/\r\n    ArticleInstanceFilesClient.prototype.unlink = function (articleId, data, options) {\r\n        return this.apiClient.delete(this.articleInstanceFilesRoute.unlink(articleId, data, options));\r\n    };\r\n    /**\r\n     * Returns a promise that is resolved once the unlink by article action has been performed. This action will remove all file resources from the system related to the requested article if successfully completed. This route uses HAL enabled objects to obtain routes and therefore it doesn't apply baasicArticleService route template. Here is an example of how a route can be obtained from HAL enabled objects:\r\n     * ```\r\n     * let params = modelMapper.removeParams(fileEntry);\r\n     * let uri = params['model'].links('unlink-by-article').href;\r\n     * ```\r\n     * @method\r\n     * @param articleId Article slug or id which uniquely identifies article whose article files need to be deleted.\r\n     * @param data\r\n     * @param options\r\n     * @returns A promise that is resolved once the unlink by article action has been performed.\r\n     * @example // fileEntry is a file resource previously fetched using get action.\r\n                    articleInstanceFilesClient.unlinkByArticle(fileEntry)\r\n                        .then(function (data) {\r\n                            // perform success action here\r\n                        },\r\n                         function (response, status, headers, config) {\r\n                             // perform error handling here\r\n                        });\r\n     **/\r\n    ArticleInstanceFilesClient.prototype.unlinkByArticle = function (articleId, data, options) {\r\n        return this.apiClient.delete(this.articleInstanceFilesRoute.unlink(articleId, data, options));\r\n    };\r\n    /**\r\n     * Returns a promise that is resolved once the update file action has been performed; this action will update a file resource if successfully completed. This route uses HAL enabled objects to obtain routes and therefore it doesn't apply `baasicArticleFilesRouteService` route template. Here is an example of how a route can be obtained from HAL enabled objects:\r\n     ```\r\n     let params = modelMapper.updateParams(fileEntry);\r\n     let uri = params['model'].links('put').href;\r\n     ```\r\n     * @method\r\n     * @param articleId An article object used to update specified article resource.\r\n     * @param data Article File object used to update specific article file data in the system.\r\n     * @returns A promise that is resolved once the update file action has been performed.\r\n     * @example // fileEntry is a file resource previously fetched using get action.\r\n                   fileEntry.description = '<description>';\r\n                   articleInstanceFilesClient.update(fileEntry)\r\n                       .then(function (data) {\r\n                           // perform success action here\r\n                       },\r\n                        function (response, status, headers, config) {\r\n                           // perform error handling here\r\n                       });\r\n    **/\r\n    ArticleInstanceFilesClient.prototype.update = function (articleId, data) {\r\n        return this.apiClient.put(this.routeDefinition.update(articleId, data), this.routeDefinition.updateParams(data));\r\n    };\r\n    /**\r\n     * Returns a promise that is resolved once the link action has been performed; this action links file resource from other modules into the Article Files module (For example: file resources from the Media Vault module can be linked directly into the Article Files module).\r\n     * @method\r\n     * @param articleId Article slug or id which uniquely identifies article whose article files need to be linked.\r\n     * @param data A article file object that need to be inserted into the system.\r\n     * @returns A promise that is resolved once the link action has been performed.\r\n     * @example articleInstanceFilesClient.link(fileObject)\r\n                    .then(function (response, status, headers, config) {\r\n                        // perform success handling here\r\n                    },\r\n                        function (response, status, headers, config) {\r\n                        // perform error handling here\r\n                    });\r\n     **/\r\n    ArticleInstanceFilesClient.prototype.link = function (articleId, data) {\r\n        return this.apiClient.post(this.routeDefinition.link(articleId, data), this.routeDefinition.createParams(data));\r\n    };\r\n    return ArticleInstanceFilesClient;\r\n}());\r\nArticleInstanceFilesClient = tslib_1.__decorate([\r\n    inversify_1.injectable(),\r\n    tslib_1.__param(0, inversify_1.inject(_1.TYPES.ArticleInstanceFilesRoute)),\r\n    tslib_1.__param(1, inversify_1.inject(_1.TYPES.ArticleInstanceFilesStreamsClient)),\r\n    tslib_1.__param(2, inversify_1.inject(_1.TYPES.ArticleInstanceFilesBatchClient)),\r\n    tslib_1.__param(3, inversify_1.inject(httpApi_1.httpTYPES.ApiClient)),\r\n    tslib_1.__metadata(\"design:paramtypes\", [typeof (_a = typeof _1.ArticleInstanceFilesRoute !== \"undefined\" && _1.ArticleInstanceFilesRoute) === \"function\" && _a || Object, typeof (_b = typeof _1.ArticleInstanceFilesStreamsClient !== \"undefined\" && _1.ArticleInstanceFilesStreamsClient) === \"function\" && _b || Object, typeof (_c = typeof _1.ArticleInstanceFilesBatchClient !== \"undefined\" && _1.ArticleInstanceFilesBatchClient) === \"function\" && _c || Object, typeof (_d = typeof httpApi_1.ApiClient !== \"undefined\" && httpApi_1.ApiClient) === \"function\" && _d || Object])\r\n], ArticleInstanceFilesClient);\r\nexports.ArticleInstanceFilesClient = ArticleInstanceFilesClient;\r\nvar _a, _b, _c, _d;\r\n/**\r\n * @overview\r\n ***Notes:**\r\n - Refer to the [REST API documentation](https://github.com/Baasic/baasic-rest-api/wiki) for detailed information about available Baasic REST API end-points.\r\n - All end-point objects are transformed by the associated route service.\r\n*/ \r\n\n\n/***/ }),\n/* 131 */\n/***/ (function(module, exports, __webpack_require__) {\n\n\"use strict\";\n/* globals module */\r\n/**\r\n * @module articleInstanceFilesRoute\r\n * @description Baasic Article Instance Files Route Definition provides Baasic route templates which can be expanded to Baasic REST URIs. Various services can use Baasic Article Files Route Service to obtain needed routes while other routes will be obtained through HAL. By convention, all route services use the same function names as their corresponding services.\r\n*/\r\n\r\nObject.defineProperty(exports, \"__esModule\", { value: true });\r\nvar tslib_1 = __webpack_require__(1);\r\nvar inversify_1 = __webpack_require__(0);\r\nvar common_1 = __webpack_require__(2);\r\n;\r\nvar contracts_1 = __webpack_require__(3);\r\nvar _1 = __webpack_require__(6);\r\nvar ArticleInstanceFilesRoute = (function (_super) {\r\n    tslib_1.__extends(ArticleInstanceFilesRoute, _super);\r\n    function ArticleInstanceFilesRoute(articleInstanceFilesStreamsRoute, articleInstanceFilesBatchRoute, appOptions) {\r\n        var _this = _super.call(this, appOptions) || this;\r\n        _this.articleInstanceFilesStreamsRoute = articleInstanceFilesStreamsRoute;\r\n        _this.articleInstanceFilesBatchRoute = articleInstanceFilesBatchRoute;\r\n        _this.appOptions = appOptions;\r\n        _this.findRoute = 'articles/{articleId}/files/{?searchQuery,page,rpp,sort,embed,fields}';\r\n        _this.getRoute = 'articles/{articleId}/files/{id}/{?embed,fields}';\r\n        _this.linkRoute = 'articles/{articleId}/files/link';\r\n        _this.unlinkRoute = 'articles/{articleId}/files/unlink/{id}';\r\n        _this.unlinkByArticleRoute = 'articles/{articleId}/files/unlink/{id}';\r\n        _this.updateRoute = 'articles/{articleId}/comments/{id}';\r\n        return _this;\r\n    }\r\n    Object.defineProperty(ArticleInstanceFilesRoute.prototype, \"streams\", {\r\n        get: function () {\r\n            return this.articleInstanceFilesStreamsRoute;\r\n        },\r\n        enumerable: true,\r\n        configurable: true\r\n    });\r\n    Object.defineProperty(ArticleInstanceFilesRoute.prototype, \"batch\", {\r\n        get: function () {\r\n            return this.articleInstanceFilesBatchRoute;\r\n        },\r\n        enumerable: true,\r\n        configurable: true\r\n    });\r\n    /**\r\n     * Parses find route which can be expanded with additional options. Supported items are:\r\n     * - `searchQuery` - A string referencing file properties using the phrase search.\r\n     * - `page` - A value used to set the page number, i.e. to retrieve certain file subset from the storage.\r\n     * - `rpp` - A value used to limit the size of result set per page.\r\n     * - `sort` - A string used to set the file property to sort the result collection by.\r\n     * - `embed` - Comma separated list of resources to be contained within the current representation.\r\n     * @method\r\n     * @param articleId Article slug or id which uniquely identifies article whose article files need to be retrieved.\r\n     * @param options Query resource options object.\r\n     * @example articleInstanceFilesRoute.find({searchQuery: '<search-phrase>'});\r\n     **/\r\n    ArticleInstanceFilesRoute.prototype.find = function (articleId, options) {\r\n        var params = this.modelMapper.findParams(options);\r\n        params.articleId = articleId;\r\n        return _super.prototype.baseCreate.call(this, this.findRoute, params);\r\n    };\r\n    /**\r\n     * Parses get route; this route should be expanded with the Id of the file resource.\r\n     * @method\r\n     * @param articleId Article slug or id which uniquely identifies article whose article files need to be retrieved.\r\n     * @param id Article file id which uniquely identifies article file that needs to be retrieved.\r\n     * @param options options object that contains embed data.\r\n     * @example articleInstanceFilesRoute.get({id: '<file-id>'});\r\n     **/\r\n    ArticleInstanceFilesRoute.prototype.get = function (articleId, id, options) {\r\n        var params = this.utility.extend({}, options);\r\n        params.articleId = articleId;\r\n        params.id = id;\r\n        return _super.prototype.baseGet.call(this, this.getRoute, params);\r\n    };\r\n    /**\r\n     * Parses link route; this URI template does not expose any additional options.\r\n     * @method\r\n     * @param articleId Article slug or id which uniquely identifies article whose article files need to be deleted.\r\n     * @param data\r\n     * @param options\r\n     * @example articleInstanceFilesRoute.link();\r\n     **/\r\n    ArticleInstanceFilesRoute.prototype.link = function (articleId, data) {\r\n        var params = this.utility.extend({}, data);\r\n        params.articleId = articleId;\r\n        return _super.prototype.baseCreate.call(this, this.linkRoute, {});\r\n    };\r\n    /**\r\n     * Parses unlink route; this URI template does not expose any additional options.\r\n     * @method\r\n     * @param articleId Article slug or id which uniquely identifies article whose article files need to be deleted.\r\n     * @param data\r\n     * @param options\r\n     * @example articleFilesRoute.unlink(data);\r\n     **/\r\n    ArticleInstanceFilesRoute.prototype.unlink = function (articleId, data, options) {\r\n        if (!options) {\r\n            options = {};\r\n        }\r\n        var params = this.modelMapper.removeParams(data);\r\n        params.articleId = articleId;\r\n        return _super.prototype.baseDelete.call(this, this.unlinkRoute, params, options, 'unlink');\r\n    };\r\n    /**\r\n     * Parses unlink by article route; this URI template does not expose any additional options.\r\n     * @method\r\n     * @param articleId Article slug or id which uniquely identifies article whose article files need to be deleted.\r\n     * @param data\r\n     * @param options\r\n     * @example articleFilesRoute.unlinkByArticle(data);\r\n     **/\r\n    ArticleInstanceFilesRoute.prototype.unlinkByArticle = function (articleId, data, options) {\r\n        if (!options) {\r\n            options = {};\r\n        }\r\n        var params = this.modelMapper.removeParams(data);\r\n        params.articleId = articleId;\r\n        return _super.prototype.baseDelete.call(this, this.unlinkByArticleRoute, params, options, 'unlink-by-article');\r\n    };\r\n    /**\r\n     * Parses update route; this URI template does not expose any additional options.\r\n     * @method\r\n     * @example articleInstanceFilesRoute.update(data);\r\n     **/\r\n    ArticleInstanceFilesRoute.prototype.update = function (articleId, data) {\r\n        var params = this.modelMapper.updateParams(data);\r\n        params.articleId = articleId;\r\n        return _super.prototype.baseUpdate.call(this, this.updateRoute, params);\r\n    };\r\n    return ArticleInstanceFilesRoute;\r\n}(common_1.BaseRoute));\r\nArticleInstanceFilesRoute = tslib_1.__decorate([\r\n    inversify_1.injectable(),\r\n    tslib_1.__param(0, inversify_1.inject(_1.TYPES.ArticleInstanceFilesStreamsRoute)),\r\n    tslib_1.__param(1, inversify_1.inject(_1.TYPES.ArticleInstanceFilesBatchRoute)),\r\n    tslib_1.__param(2, inversify_1.inject(contracts_1.TYPES.IAppOptions)),\r\n    tslib_1.__metadata(\"design:paramtypes\", [typeof (_a = typeof _1.ArticleInstanceFilesStreamsRoute !== \"undefined\" && _1.ArticleInstanceFilesStreamsRoute) === \"function\" && _a || Object, typeof (_b = typeof _1.ArticleInstanceFilesBatchRoute !== \"undefined\" && _1.ArticleInstanceFilesBatchRoute) === \"function\" && _b || Object, typeof (_c = typeof contracts_1.IAppOptions !== \"undefined\" && contracts_1.IAppOptions) === \"function\" && _c || Object])\r\n], ArticleInstanceFilesRoute);\r\nexports.ArticleInstanceFilesRoute = ArticleInstanceFilesRoute;\r\nvar _a, _b, _c;\r\n/**\r\n * @overview\r\n ***Notes:**\r\n - Refer to the [REST API documentation](https://github.com/Baasic/baasic-rest-api/wiki) for detailed information about available Baasic REST API end-points.\r\n - [URI Template](https://github.com/Baasic/uritemplate-js) syntax enables expanding the Baasic route templates to Baasic REST URIs providing it with an object that contains URI parameters.\r\n - All end-point objects are transformed by the associated route service.\r\n*/ \r\n\n\n/***/ }),\n/* 132 */\n/***/ (function(module, exports, __webpack_require__) {\n\n\"use strict\";\n/* globals module */\r\n/**\r\n * @module articleInstanceFilesStreamsClient\r\n * @description  Article Instance Files Streams Client provides Baasic route templates which can be expanded to Baasic REST URIs. Various services can use Baasic Files Streams Route Definition to obtain needed routes while other routes will be obtained through HAL. By convention, all route services use the same function names as their corresponding services.\r\n*/\r\n\r\nObject.defineProperty(exports, \"__esModule\", { value: true });\r\nvar tslib_1 = __webpack_require__(1);\r\nvar inversify_1 = __webpack_require__(0);\r\n;\r\nvar httpApi_1 = __webpack_require__(4);\r\nvar _1 = __webpack_require__(6);\r\nvar ArticleInstanceFilesStreamsClient = (function () {\r\n    function ArticleInstanceFilesStreamsClient(articleInstanceFilesStreamsRoute, apiClient) {\r\n        this.articleInstanceFilesStreamsRoute = articleInstanceFilesStreamsRoute;\r\n        this.apiClient = apiClient;\r\n    }\r\n    Object.defineProperty(ArticleInstanceFilesStreamsClient.prototype, \"routeDefinition\", {\r\n        get: function () {\r\n            return this.articleInstanceFilesStreamsRoute;\r\n        },\r\n        enumerable: true,\r\n        configurable: true\r\n    });\r\n    /**\r\n     * Returns a promise that is resolved once the get action has been performed. Success response returns the file stream if successfully completed. If derived resource's format is passed, such as `width` and `height` for the image type of file resource, the operation will return a stream of the derived resource. Otherwise, stream of the original file resource will be retrieved.\r\n     * @method\r\n     * @param articleId Article slug or id which uniquely identifies article whose article file need to be retrieved.\r\n     * @param data Article File object used to identify stream that needs to be retrieved from the system.\r\n     * @returns A promise that is resolved once the get action has been performed.\r\n     * @example // Request the original file stream\r\n                    articleInstanceFilesStreamsClient.get({id: '<file-id>'})\r\n                        .then(function (data) {\r\n                            // perform success action here\r\n                        },\r\n                         function (response, status, headers, config) {\r\n                            // perform error handling here\r\n                        });\r\n\r\n                // Request derived file stream\r\n                        articleInstanceFilesStreamsClient.get({id: '<file-id>', width: <width>, height: <height>})\r\n                            .then(function (data) {\r\n                                // perform success action here\r\n                            },\r\n                             function (response, status, headers, config) {\r\n                                 // perform error handling here\r\n                            });\r\n     **/\r\n    ArticleInstanceFilesStreamsClient.prototype.get = function (articleId, data) {\r\n        return this.apiClient.get(this.articleInstanceFilesStreamsRoute.get(articleId, data));\r\n    };\r\n    /**\r\n     * Returns a promise that is resolved once the get action has been performed. Success response returns the file stream as a blob. If derived resource's format is passed, such as `width` and `height` for the image type of file resource, the operation will return a blob of the derived file resource. Otherwise, blob of the original file resource will be retrieved. For more information on Blob objects please see [Blob Documentation](https://developer.mozilla.org/en-US/docs/Web/API/Blob).\r\n     * @method\r\n     * @param articleId Article slug or id which uniquely identifies article whose article file need to be retrieved.\r\n     * @param data Article File object used to identify stream that needs to be retrieved from the system.\r\n     * @returns A promise that is resolved once the get action has been performed.\r\n     * @example // Request the original blob\r\n                    articleInstanceFilesStreamsClient.getBlob('<file-id>')\r\n                        .then(function (data) {\r\n                            // perform success action here\r\n                        },\r\n                         function (response, status, headers, config) {\r\n                            // perform error handling here\r\n                        });\r\n                        \r\n                // Request derived blob\r\n                        articleInstanceFilesStreamsClient.getBlob({\r\n                            id: '<file-id>',\r\n                            width: <width>,\r\n                            height: <height>\r\n                        })\r\n                        .then(function (data) {\r\n                            // perform success action here\r\n                        },\r\n                         function (response, status, headers, config) {\r\n                            // perform error handling here\r\n                        });\r\n     **/\r\n    ArticleInstanceFilesStreamsClient.prototype.getBlob = function (articleId, data) {\r\n        return this.apiClient.get(this.articleInstanceFilesStreamsRoute.get(articleId, data), { 'Accept': 'application/octet-stream' });\r\n    };\r\n    /**\r\n     * Returns a promise that is resolved once the update file stream action has been performed; this action will replace the existing stream with a new one. Alternatively, if a derived stream is being updated it will either create a new derived stream or replace the existing one. In order to update a derived stream, format needs to be passed (For example: `width` and `height` for the image type of file stream data type).\r\n     * @method\r\n     * @param articleId Article slug or id which uniquely identifies article whose article file need to be updated.\r\n     * @param data Article File object used to identify stream that needs to be updated.\r\n     * @param stream\r\n     * @returns A promise that is resolved once the update file stream action has been performed.\r\n     * @example // Update original file stream\r\n                    articleInstanceFilesStreamsClient.update('<file-id>', <file-stream>)\r\n                        .then(function (data) {\r\n                            // perform success action here\r\n                        },\r\n                         function (response, status, headers, config) {\r\n                            // perform error handling here\r\n                        });\r\n                // Update derived file stream\r\n                    articleInstanceFilesStreamsClient.update({id: '<file-id>', width: <width>, height: <height>}, <file-stream>)\r\n                        .then(function (data) {\r\n                            // perform success action here\r\n                        },\r\n                         function (response, status, headers, config) {\r\n                            // perform error handling here\r\n                        });\r\n     **/\r\n    ArticleInstanceFilesStreamsClient.prototype.update = function (articleId, data, stream) {\r\n        var formData = new FormData();\r\n        formData.append('file', stream);\r\n        return this.apiClient.put(this.articleInstanceFilesStreamsRoute.update(articleId, data), formData, { 'Content-Type': undefined });\r\n    };\r\n    /**\r\n     * Returns a promise that is resolved once the create file stream action has been performed; this action will upload the specified blob. For more information on Blob objects please see [Blob Documentation](https://developer.mozilla.org/en-US/docs/Web/API/Blob).\r\n     * @method\r\n     * @param articleId Article slug or id which uniquely identifies article whose article file need to be inserted.\r\n     * @param data Article File object that need to be inserted into the system.\r\n     * @param stream\r\n     * @returns A promise that is resolved once the create file stream action has been performed.\r\n     * @example articleInstanceFilesStreamsClient.create('<file-id>', <blob>)\r\n                   .then(function (data) {\r\n                        // perform success action here\r\n                   },\r\n                    function (response, status, headers, config) {\r\n                       // perform error handling here\r\n                   });\r\n    **/\r\n    ArticleInstanceFilesStreamsClient.prototype.create = function (articleId, data, stream) {\r\n        var formData = new FormData();\r\n        formData.append('file', stream);\r\n        return this.apiClient.post(this.articleInstanceFilesStreamsRoute.create(articleId, data), formData, { 'Content-Type': undefined });\r\n    };\r\n    return ArticleInstanceFilesStreamsClient;\r\n}());\r\nArticleInstanceFilesStreamsClient = tslib_1.__decorate([\r\n    inversify_1.injectable(),\r\n    tslib_1.__param(0, inversify_1.inject(_1.TYPES.ArticleInstanceFilesStreamsRoute)),\r\n    tslib_1.__param(1, inversify_1.inject(httpApi_1.httpTYPES.ApiClient)),\r\n    tslib_1.__metadata(\"design:paramtypes\", [typeof (_a = typeof _1.ArticleInstanceFilesStreamsRoute !== \"undefined\" && _1.ArticleInstanceFilesStreamsRoute) === \"function\" && _a || Object, typeof (_b = typeof httpApi_1.ApiClient !== \"undefined\" && httpApi_1.ApiClient) === \"function\" && _b || Object])\r\n], ArticleInstanceFilesStreamsClient);\r\nexports.ArticleInstanceFilesStreamsClient = ArticleInstanceFilesStreamsClient;\r\nvar _a, _b;\r\n/**\r\n * @overview\r\n ***Notes:**\r\n - Refer to the [REST API documentation](https://github.com/Baasic/baasic-rest-api/wiki) for detailed information about available Baasic REST API end-points.\r\n - All end-point objects are transformed by the associated route service.\r\n*/ \r\n\n\n/***/ }),\n/* 133 */\n/***/ (function(module, exports, __webpack_require__) {\n\n\"use strict\";\n/* globals module */\r\n/**\r\n * @module articleInstanceFilesStreamsRoute\r\n * @description Baasic Article Instance Files Streams Route Definition provides Baasic route templates which can be expanded to Baasic REST URIs. Various services can use Baasic Article Files Streams Route Service to obtain needed routes while other routes will be obtained through HAL. By convention, all route services use the same function names as their corresponding services.\r\n*/\r\n\r\nObject.defineProperty(exports, \"__esModule\", { value: true });\r\nvar tslib_1 = __webpack_require__(1);\r\nvar inversify_1 = __webpack_require__(0);\r\nvar common_1 = __webpack_require__(2);\r\n;\r\nvar contracts_1 = __webpack_require__(3);\r\nvar ArticleInstanceFilesStreamsRoute = (function (_super) {\r\n    tslib_1.__extends(ArticleInstanceFilesStreamsRoute, _super);\r\n    function ArticleInstanceFilesStreamsRoute(appOptions) {\r\n        var _this = _super.call(this, appOptions) || this;\r\n        _this.appOptions = appOptions;\r\n        _this.getRoute = 'articles/{articleId}/file-streams/{id}/{?width,height}';\r\n        _this.createRoute = 'articles/{articleId}/file-streams/{filename}';\r\n        _this.updateRoute = 'articles/{articleId}/file-streams/{id}';\r\n        return _this;\r\n    }\r\n    /**\r\n     * Parses get route; this route should be expanded with id of desired file stream. Additional supported items are:\r\n     * - `width` - width of desired derived image.\r\n     * - `height` - height of desired derived image.\r\n     * @method\r\n     * @param articleId Article slug or id which uniquely identifies article whose article file need to be retrieved.\r\n     * @param data Article File object used to identify stream that needs to be retrieved from the system.\r\n     * @example articleInstanceFilesRoute.get({id: '<filename>'});\r\n     **/\r\n    ArticleInstanceFilesStreamsRoute.prototype.get = function (articleId, data) {\r\n        if (!this.utility.isObject(data)) {\r\n            data = {\r\n                id: data\r\n            };\r\n        }\r\n        var params = this.utility.extend({}, data);\r\n        params.articleId = articleId;\r\n        return _super.prototype.baseCreate.call(this, this.getRoute, params);\r\n    };\r\n    /**\r\n     * Parses create route; this route should be expanded with the filename which indicates where the stream will be saved.\r\n     * @method\r\n     * @param articleId Article slug or id which uniquely identifies article whose article file need to be inserted.\r\n     * @param data Article File object that need to be inserted into the system.\r\n     * @example articleInstanceFilesRoute.create({filename: '<filename>'});\r\n     **/\r\n    ArticleInstanceFilesStreamsRoute.prototype.create = function (articleId, data) {\r\n        var params = this.utility.extend({}, data);\r\n        params.articleId = articleId;\r\n        return _super.prototype.baseCreate.call(this, this.createRoute, params);\r\n    };\r\n    /**\r\n     * Parses update route; this route should be expanded with the id of the previously saved resource. Additional supported items are:\r\n     * - `width` - width of derived image to update.\r\n     * - `height` - height of derived image to update.\r\n     * @method\r\n     * @param articleId Article slug or id which uniquely identifies article whose article file need to be updated.\r\n     * @param data Article File object used to identify stream that needs to be updated.\r\n     * @example articleFilesRoute.update({id: '<filename>'});\r\n     **/\r\n    ArticleInstanceFilesStreamsRoute.prototype.update = function (articleId, data) {\r\n        var params = this.utility.extend({}, data);\r\n        params.articleId = articleId;\r\n        return _super.prototype.baseUpdate.call(this, this.updateRoute, data);\r\n    };\r\n    return ArticleInstanceFilesStreamsRoute;\r\n}(common_1.BaseRoute));\r\nArticleInstanceFilesStreamsRoute = tslib_1.__decorate([\r\n    inversify_1.injectable(),\r\n    tslib_1.__param(0, inversify_1.inject(contracts_1.TYPES.IAppOptions)),\r\n    tslib_1.__metadata(\"design:paramtypes\", [typeof (_a = typeof contracts_1.IAppOptions !== \"undefined\" && contracts_1.IAppOptions) === \"function\" && _a || Object])\r\n], ArticleInstanceFilesStreamsRoute);\r\nexports.ArticleInstanceFilesStreamsRoute = ArticleInstanceFilesStreamsRoute;\r\nvar _a;\r\n/**\r\n * @overview\r\n ***Notes:**\r\n - Refer to the [REST API documentation](https://github.com/Baasic/baasic-rest-api/wiki) for detailed information about available Baasic REST API end-points.\r\n - [URI Template](https://github.com/Baasic/uritemplate-js) syntax enables expanding the Baasic route templates to Baasic REST URIs providing it with an object that contains URI parameters.\r\n - All end-point objects are transformed by the associated route service.\r\n*/ \r\n\n\n/***/ }),\n/* 134 */\n/***/ (function(module, exports, __webpack_require__) {\n\n\"use strict\";\n\r\nfunction __export(m) {\r\n    for (var p in m) if (!exports.hasOwnProperty(p)) exports[p] = m[p];\r\n}\r\nObject.defineProperty(exports, \"__esModule\", { value: true });\r\n__export(__webpack_require__(133));\r\n__export(__webpack_require__(132));\r\n__export(__webpack_require__(129));\r\n__export(__webpack_require__(128));\r\n__export(__webpack_require__(131));\r\n__export(__webpack_require__(130));\r\n\n\n/***/ }),\n/* 135 */\n/***/ (function(module, exports, __webpack_require__) {\n\n\"use strict\";\n/* globals module */\r\n/**\r\n * @module articleRatingsClient\r\n * @description  Article Ratings Client provides an easy way to consume  Article Ratings REST API end-points. `articleRatingsClient` functions enable performing standard CRUD operations directly on article rating resources, whereas the `articleService` functions allow management between article and article rating. In order to obtain needed routes `articleRatingsClient` uses `articleRatingsRoute`.\r\n*/\r\n\r\nObject.defineProperty(exports, \"__esModule\", { value: true });\r\nvar tslib_1 = __webpack_require__(1);\r\nvar inversify_1 = __webpack_require__(0);\r\n;\r\nvar httpApi_1 = __webpack_require__(4);\r\nvar _1 = __webpack_require__(6);\r\nvar ArticleRatingsClient = (function () {\r\n    function ArticleRatingsClient(articleRatingsRoute, apiClient) {\r\n        this.articleRatingsRoute = articleRatingsRoute;\r\n        this.apiClient = apiClient;\r\n    }\r\n    Object.defineProperty(ArticleRatingsClient.prototype, \"routeDefinition\", {\r\n        /**\r\n         * Provides direct access to `articleRatingsRoute`.\r\n         * @method\r\n         * @example articleRatingsClient.routeDefinition.get(id);\r\n         **/\r\n        get: function () {\r\n            return this.articleRatingsRoute;\r\n        },\r\n        enumerable: true,\r\n        configurable: true\r\n    });\r\n    /**\r\n     * Returns a promise that is resolved once the create article rating action has been performed; this action creates a new rating for an article.\r\n     * @method\r\n     * @param data An article rating object that needs to be inserted into the system.\r\n     * @returns A promise that is resolved once the create article rating action has been performed.\r\n     * @example articleRatingsClient.create({\r\n                    articleId : '<article-id>',\r\n                    rating : 5,\r\n                    userId : '<user-id>'\r\n                })\r\n                .then(function (data) {\r\n                    // perform success action here\r\n                },\r\n                 function (response, status, headers, config) {\r\n                    // perform error handling here\r\n                });\r\n     **/\r\n    ArticleRatingsClient.prototype.create = function (data) {\r\n        return this.apiClient.post(this.routeDefinition.create(data), this.routeDefinition.createParams(data));\r\n    };\r\n    /**\r\n     * Returns a promise that is resolved once the find action has been performed. Success response returns a list of article rating resources matching the given criteria.\r\n     * @method\r\n     * @param options Query resource options object.\r\n     * @returns A promise that is resolved once the find action has been performed.\r\n     * @example articleRatingsClient.find({\r\n                    pageNumber : 1,\r\n                    pageSize : 10,\r\n                    orderBy : '<field>',\r\n                    orderDirection : '<asc|desc>',\r\n                    search : '<search-phrase>'\r\n                })\r\n                .then(function (collection) {\r\n                    // perform success action here\r\n                },\r\n                 function (response, status, headers, config) {\r\n                    // perform error handling here\r\n                });\r\n     **/\r\n    ArticleRatingsClient.prototype.find = function (options) {\r\n        return this.apiClient.get(this.routeDefinition.find(options));\r\n    };\r\n    /**\r\n     * Returns a promise that is resolved once the findByUser action has been performed. Success response returns a list of article rating resources filtered by username.\r\n     * @method\r\n     * @param username Username which uniquely identifies a user which has created an article rating.\r\n     * @param options Query resource options object.\r\n     * @returns A promise that is resolved once the findByUser action has been performed.\r\n     * @example articleRatingsClient.find('<username>', {\r\n                    pageNumber : 1,\r\n                    pageSize : 10,\r\n                    orderBy : '<field>',\r\n                    orderDirection : '<asc|desc>'\r\n                })\r\n                .then(function (collection) {\r\n                    // perform success action here\r\n                },\r\n                 function (response, status, headers, config) {\r\n                    // perform error handling here\r\n                });\r\n     **/\r\n    ArticleRatingsClient.prototype.findByUser = function (username, options) {\r\n        return this.apiClient.get(this.articleRatingsRoute.findByUser(username, options));\r\n    };\r\n    /**\r\n     * Returns a promise that is resolved once the get action has been performed. Success response returns the specified article rating resource.\r\n     * @method\r\n     * @param id Id which uniquely identifies article rating resource that needs to be retrieved.\r\n     * @param options Options object that contains embed data.\r\n     * @returns A promise that is resolved once the get action has been performed.\r\n     * @example articleRatingsClient.get('<articleRating-id>')\r\n                    .then(function (data) {\r\n                        // perform success action here\r\n                    },\r\n                     function (response, status, headers, config) {\r\n                        // perform error handling here\r\n                    });\r\n     **/\r\n    ArticleRatingsClient.prototype.get = function (id, options) {\r\n        return this.apiClient.get(this.articleRatingsRoute.get(id, options));\r\n    };\r\n    /**\r\n     * Returns a promise that is resolved once the update article rating action has been performed; this action updates an article rating. This route uses HAL enabled objects to obtain routes and therefore it doesn't apply `articleRatingsRoute` route template. Here is an example of how a route can be obtained from HAL enabled objects:\r\n     * ```\r\n     * let params = modelMapper.removeParams(articleRating);\r\n     * let uri = params['model'].links('put').href;\r\n     * ```\r\n     * @method\r\n     * @param data An article object used to update specified article rating resource.\r\n     * @returns A promise that is resolved once the update article rating action has been performed.\r\n     * @example // articleRating is a resource previously fetched using get action.\r\n                    articleRating.rating = 4;\r\n                    articleRatingsClient.update(articleRating)\r\n                        .then(function (data) {\r\n                            // perform success action here\r\n                        },\r\n                         function (response, status, headers, config) {\r\n                            // perform error handling here\r\n                        });\r\n     **/\r\n    ArticleRatingsClient.prototype.update = function (data) {\r\n        return this.apiClient.put(this.routeDefinition.update(data), this.routeDefinition.updateParams(data));\r\n    };\r\n    /**\r\n     * Returns a promise that is resolved once the remove article rating action has been performed. If the action is successfully completed, the article rating resource will be permanently removed from the system. This route uses HAL enabled objects to obtain routes and therefore it doesn't apply `articleRatingsRoute` route template. Here is an example of how a route can be obtained from HAL enabled objects:\r\n     * ```\r\n     * let params = modelMapper.removeParams(articleRating);\r\n     * let uri = params['model'].links('delete').href;\r\n     * ```\r\n     * @method\r\n     * @param data An article object used to delete specified article rating resource.\r\n     * @returns A promise that is resolved once the remove article rating action has been performed.\r\n     * @example // articleRating is a resource previously fetched using get action.\r\n                    articleRatingsClient.remove(articleRating)\r\n                        .then(function (data) {\r\n                            // perform success action here\r\n                        },\r\n                         function (response, status, headers, config) {\r\n                            // perform error handling here\r\n                        });\r\n     **/\r\n    ArticleRatingsClient.prototype.remove = function (data) {\r\n        return this.apiClient.delete(this.routeDefinition.delete(data));\r\n    };\r\n    return ArticleRatingsClient;\r\n}());\r\nArticleRatingsClient = tslib_1.__decorate([\r\n    inversify_1.injectable(),\r\n    tslib_1.__param(0, inversify_1.inject(_1.TYPES.ArticleRatingsRoute)),\r\n    tslib_1.__param(1, inversify_1.inject(httpApi_1.httpTYPES.ApiClient)),\r\n    tslib_1.__metadata(\"design:paramtypes\", [typeof (_a = typeof _1.ArticleRatingsRoute !== \"undefined\" && _1.ArticleRatingsRoute) === \"function\" && _a || Object, typeof (_b = typeof httpApi_1.ApiClient !== \"undefined\" && httpApi_1.ApiClient) === \"function\" && _b || Object])\r\n], ArticleRatingsClient);\r\nexports.ArticleRatingsClient = ArticleRatingsClient;\r\nvar _a, _b;\r\n/**\r\n * @copyright (c) 2017 Mono Ltd\r\n * @license MIT\r\n * @author Mono Ltd\r\n * @overview\r\n ***Notes:**\r\n - Refer to the [Baasic REST API](http://dev.baasic.com/api/reference/home) for detailed information about available Baasic REST API end-points.\r\n - All end-point objects are transformed by the associated route service.\r\n*/ \r\n\n\n/***/ }),\n/* 136 */\n/***/ (function(module, exports, __webpack_require__) {\n\n\"use strict\";\n/* globals module */\r\n/**\r\n * @module articleRatingsRoute\r\n * @description Baasic Article Ratings Route Definition provides Baasic route templates which can be expanded to Baasic REST URIs. Various services can use Baasic Article Ratings Route Service to obtain needed routes while other routes will be obtained through HAL. By convention, all route services use the same function names as their corresponding services.\r\n*/\r\n\r\nObject.defineProperty(exports, \"__esModule\", { value: true });\r\nvar tslib_1 = __webpack_require__(1);\r\nvar inversify_1 = __webpack_require__(0);\r\nvar common_1 = __webpack_require__(2);\r\n;\r\nvar contracts_1 = __webpack_require__(3);\r\nvar ArticleRatingsRoute = (function (_super) {\r\n    tslib_1.__extends(ArticleRatingsRoute, _super);\r\n    function ArticleRatingsRoute(appOptions) {\r\n        var _this = _super.call(this, appOptions) || this;\r\n        _this.appOptions = appOptions;\r\n        _this.createRoute = 'article-ratings';\r\n        _this.findRoute = 'article-ratings/{?searchQuery,page,rpp,sort,embed,fields}';\r\n        _this.findByUserRoute = 'article-ratings/{?username,page,rpp,sort,embed,fields}';\r\n        _this.getRoute = 'article-ratings/{id}/{?embed,fields}';\r\n        _this.updateRoute = 'article-ratings/{id}';\r\n        _this.deleteRoute = 'article-ratings/{id}';\r\n        return _this;\r\n    }\r\n    /**\r\n     * Parses create article rating route; this URI does not support any additional embed items.\r\n     * @method\r\n     * @param data An article rating object that needs to be inserted into the system.\r\n     * @example articleRatingsRoute.create(data);\r\n     **/\r\n    ArticleRatingsRoute.prototype.create = function (data) {\r\n        return _super.prototype.baseCreate.call(this, this.createRoute, data);\r\n    };\r\n    /**\r\n     * Parses find article rating route which can be expanded with additional options. Supported items are:\r\n     * - `searchQuery` - A string referencing article rating properties using the phrase or BQL (Baasic Query Language) search.\r\n     * - `page` - A value used to set the page number, i.e. to retrieve certain article rating subset from the storage.\r\n     * - `rpp` - A value used to limit the size of result set per page.\r\n     * - `sort` - A string used to set the article rating property to sort the result collection by.\r\n     * - `embed` - Comma separated list of resources to be contained within the current representation.\r\n     * @method\r\n     * @param options Query resource options object.\r\n     * @example articleRatingsRoute.find({searchQuery: '<search-phrase>'});\r\n     **/\r\n    ArticleRatingsRoute.prototype.find = function (options) {\r\n        return _super.prototype.baseFind.call(this, this.findRoute, options);\r\n    };\r\n    /**\r\n     * Parses findByUser article rating route which can be expanded with additional options. Supported items are:\r\n     * - `username` - A value that uniquely identifies a user which has created an article rating.\r\n     * - `page` - A value used to set the page number, i.e. to retrieve certain article rating subset from the storage.\r\n     * - `rpp` - A value used to limit the size of result set per page.\r\n     * - `sort` - A string used to set the article rating property to sort the result collection by.\r\n     * - `embed` - Comma separated list of resources to be contained within the current representation.\r\n     * @method\r\n     * @param username Username which uniquely identifies a user which has created an article rating.\r\n     * @param options Query resource options object.\r\n     * @example articleRatingsRoute.find({username: '<username>'});\r\n     **/\r\n    ArticleRatingsRoute.prototype.findByUser = function (username, options) {\r\n        var params = this.utility.extend({}, options);\r\n        params.username = username;\r\n        return _super.prototype.baseFind.call(this, this.findByUserRoute, params);\r\n    };\r\n    /**\r\n     * Parses get article rating route which must be expanded with the Id of the previously created article rating resource in the system. Additional expand supported items are:\r\n     * - `embed` - Comma separated list of resources to be contained within the current representation.\r\n     * @method\r\n     * @param id Id which uniquely identifies article rating resource that needs to be retrieved.\r\n     * @param options Options object that contains embed data.\r\n     * @example articleRatingsRoute.get({id: '<articleRating-id>'});\r\n     **/\r\n    ArticleRatingsRoute.prototype.get = function (id, options) {\r\n        return _super.prototype.baseGet.call(this, this.getRoute, id, options);\r\n    };\r\n    /**\r\n     * Parses update article rating route; this URI does not support any additional embed items.\r\n     * @method\r\n     * @param data An article object used to update specified article rating resource.\r\n     * @example articleRatingsRoute.update(data);\r\n     **/\r\n    ArticleRatingsRoute.prototype.update = function (data) {\r\n        return _super.prototype.baseUpdate.call(this, this.updateRoute, data);\r\n    };\r\n    /**\r\n    * Parses delete article rating route; this URI does not support any additional embed items.\r\n    * @method\r\n    * @param data An article object used to delete specified article rating resource.\r\n    * @example articleRatingsRoute.delete(data);\r\n    **/\r\n    ArticleRatingsRoute.prototype.delete = function (data) {\r\n        return _super.prototype.baseDelete.call(this, this.deleteRoute, data);\r\n    };\r\n    return ArticleRatingsRoute;\r\n}(common_1.BaseRoute));\r\nArticleRatingsRoute = tslib_1.__decorate([\r\n    inversify_1.injectable(),\r\n    tslib_1.__param(0, inversify_1.inject(contracts_1.TYPES.IAppOptions)),\r\n    tslib_1.__metadata(\"design:paramtypes\", [typeof (_a = typeof contracts_1.IAppOptions !== \"undefined\" && contracts_1.IAppOptions) === \"function\" && _a || Object])\r\n], ArticleRatingsRoute);\r\nexports.ArticleRatingsRoute = ArticleRatingsRoute;\r\nvar _a;\r\n/**\r\n * @copyright (c) 2017 Mono Ltd\r\n * @license MIT\r\n * @author Mono Ltd\r\n * @overview\r\n ***Notes:**\r\n - Refer to the [Baasic REST API](http://dev.baasic.com/api/reference/home) for detailed information about available Baasic REST API end-points.\r\n - [URI Template](https://github.com/Baasic/uritemplate-js) syntax enables expanding the Baasic route templates to Baasic REST URIs providing it with an object that contains URI parameters.\r\n - All end-point objects are transformed by the associated route service.\r\n*/ \r\n\n\n/***/ }),\n/* 137 */\n/***/ (function(module, exports, __webpack_require__) {\n\n\"use strict\";\n/* globals module */\r\n/**\r\n * @module articleSubRatingsClient\r\n * @description  Article Sub Ratings Client provides an easy way to consume  Article Ratings REST API end-points. `articleRatingsClient` functions enable performing standard CRUD operations directly on article rating resources, whereas the `articleService` functions allow management between article and article rating. In order to obtain needed routes `articleRatingsClient` uses `articleRatingsRoute`.\r\n*/\r\n\r\nObject.defineProperty(exports, \"__esModule\", { value: true });\r\nvar tslib_1 = __webpack_require__(1);\r\nvar inversify_1 = __webpack_require__(0);\r\n;\r\nvar httpApi_1 = __webpack_require__(4);\r\nvar _1 = __webpack_require__(6);\r\nvar ArticleInstanceRatingsClient = (function () {\r\n    function ArticleInstanceRatingsClient(articleInstanceRatingsRoute, apiClient) {\r\n        this.articleInstanceRatingsRoute = articleInstanceRatingsRoute;\r\n        this.apiClient = apiClient;\r\n    }\r\n    Object.defineProperty(ArticleInstanceRatingsClient.prototype, \"routeDefinition\", {\r\n        /**\r\n         * Provides direct access to `articleRatingsRoute`.\r\n         * @method\r\n         * @example articleInstanceRatingsClient.routeDefinition.get(id);\r\n         **/\r\n        get: function () {\r\n            return this.articleInstanceRatingsRoute;\r\n        },\r\n        enumerable: true,\r\n        configurable: true\r\n    });\r\n    /**\r\n     * Returns a promise that is resolved once the create article rating action has been performed; this action creates a new rating for an article.\r\n     * @method\r\n     * @param data An article rating object that needs to be inserted into the system.\r\n     * @returns A promise that is resolved once the create article rating action has been performed.\r\n     * @example articleInstanceRatingsClient.create({ articleId : '<article-id>', rating : 5, userId : '<user-id>' })\r\n                    .then(function (data) {\r\n                        // perform success action here\r\n                    },\r\n                     function (response, status, headers, config) {\r\n                        // perform error handling here\r\n                    });\r\n     **/\r\n    ArticleInstanceRatingsClient.prototype.create = function (data) {\r\n        return this.apiClient.post(this.routeDefinition.create(data), this.routeDefinition.createParams(data));\r\n    };\r\n    /**\r\n     * Returns a promise that is resolved once the find action has been performed. Success response returns a list of article rating resources matching the given criteria.\r\n     * @method\r\n     * @param articleId Article slug or id which uniquely identifies article whose rating resources need to be retrieved.\r\n     * @param options Query resource options object.\r\n     * @returns A promise that is resolved once the find action has been performed.\r\n     * @example articleInstanceRatingsClient.find({\r\n                    pageNumber : 1,\r\n                    pageSize : 10,\r\n                    orderBy : '<field>',\r\n                    orderDirection : '<asc|desc>',\r\n                    search : '<search-phrase>'\r\n                })\r\n                .then(function (collection) {\r\n                    // perform success action here\r\n                },\r\n                 function (response, status, headers, config) {\r\n                    // perform error handling here\r\n                });\r\n     **/\r\n    ArticleInstanceRatingsClient.prototype.find = function (articleId, options) {\r\n        return this.apiClient.get(this.articleInstanceRatingsRoute.find(articleId, options));\r\n    };\r\n    /**\r\n     * Returns a promise that is resolved once the findByUser action has been performed. Success response returns a list of article rating resources filtered by username.\r\n     * @method\r\n     * @param articleId Article slug or id which uniquely identifies article whose rating resources need to be retrieved.\r\n     * @param username Username which uniquely identifies a user which has created an article rating.\r\n     * @param options Query resource options object.\r\n     * @returns A promise that is resolved once the findByUser action has been performed.\r\n     * @example articleInstanceRatingsClient.find('<username>', {\r\n                    pageNumber : 1,\r\n                    pageSize : 10,\r\n                    orderBy : '<field>',\r\n                    orderDirection : '<asc|desc>'\r\n                })\r\n                .then(function (collection) {\r\n                    // perform success action here\r\n                },\r\n                 function (response, status, headers, config) {\r\n                    // perform error handling here\r\n                });\r\n     **/\r\n    ArticleInstanceRatingsClient.prototype.findByUser = function (articleId, username, options) {\r\n        return this.apiClient.get(this.articleInstanceRatingsRoute.findByUser(articleId, username, options));\r\n    };\r\n    /**\r\n     * Returns a promise that is resolved once the get action has been performed. Success response returns the specified article rating resource.\r\n     * @method\r\n     * @param articleId Article slug or id which uniquely identifies article whose rating resources need to be retrieved.\r\n     * @param id Article slug or id which uniquely identifies article resource that needs to be retrieved.\r\n     * @param options Options object that contains embed data.\r\n     * @returns A promise that is resolved once the get action has been performed.\r\n     * @example articleInstanceRatingsClient.get('<articleRating-id>')\r\n                    .then(function (data) {\r\n                        // perform success action here\r\n                    },\r\n                     function (response, status, headers, config) {\r\n                        // perform error handling here\r\n                    });\r\n     **/\r\n    ArticleInstanceRatingsClient.prototype.get = function (articleId, id, options) {\r\n        return this.apiClient.get(this.articleInstanceRatingsRoute.get(articleId, id, options));\r\n    };\r\n    /**\r\n     * Returns a promise that is resolved once the update article rating action has been performed; this action updates an article rating. This route uses HAL enabled objects to obtain routes and therefore it doesn't apply `articleRatingsRoute` route template. Here is an example of how a route can be obtained from HAL enabled objects:\r\n     * ```\r\n     * let params = modelMapper.removeParams(articleRating);\r\n     * let uri = params['model'].links('put').href;\r\n     * ```\r\n     * @method\r\n     * @param data An article object used to update specified article resource.\r\n     * @returns A promise that is resolved once the update article rating action has been performed.\r\n     * @example // articleRating is a resource previously fetched using get action.\r\n                    articleRating.rating = 4;\r\n                    articleInstanceRatingsClient.update(articleRating)\r\n                        .then(function (data) {\r\n                            // perform success action here\r\n                        },\r\n                         function (response, status, headers, config) {\r\n                            // perform error handling here\r\n                        });\r\n     **/\r\n    ArticleInstanceRatingsClient.prototype.update = function (data) {\r\n        return this.apiClient.put(this.routeDefinition.update(data), this.routeDefinition.updateParams(data));\r\n    };\r\n    /**\r\n     * Returns a promise that is resolved once the remove article rating action has been performed. If the action is successfully completed, the article rating resource will be permanently removed from the system. This route uses HAL enabled objects to obtain routes and therefore it doesn't apply `articleRatingsRoute` route template. Here is an example of how a route can be obtained from HAL enabled objects:\r\n     * ```\r\n     * let params = modelMapper.removeParams(articleRating);\r\n     * let uri = params['model'].links('delete').href;\r\n     * ```\r\n     * @method\r\n     * @param data Rating resource resource that needs to be deleted.\r\n     * @returns a promise that is resolved once the remove article rating action has been performed.\r\n     * @example // articleRating is a resource previously fetched using get action.\r\n                    articleInstanceRatingsClient.remove(articleRating)\r\n                        .then(function (data) {\r\n                            // perform success action here\r\n                        },\r\n                         function (response, status, headers, config) {\r\n                            // perform error handling here\r\n                        });\r\n     **/\r\n    ArticleInstanceRatingsClient.prototype.remove = function (data) {\r\n        return this.apiClient.delete(this.routeDefinition.delete(data));\r\n    };\r\n    /**\r\n     * Returns a promise that is resolved once the removeAll article rating action has been performed. If the action is successfully completed, the article rating resources will be permanently removed from the system for a specified article resource. This route uses HAL enabled objects to obtain routes and therefore it doesn't apply `articleInstanceRouteClient` route template. Here is an example of how a route can be obtained from HAL enabled objects:\r\n     *  ```\r\n     * let params = modelMapper.removeParams(article);\r\n     * let uri = params['model'].links('delete-ratings-by-article').href;\r\n     * ```\r\n     * @method\r\n     * @param data Article object whose ratings needs to be deleted.\r\n     * @returns A promise that is resolved once the removeAll article rating action has been performed.\r\n     * @example // article is a resource previously fetched using get action.\r\n                    articleInstanceRatingsClient.removeAll(article)\r\n                        .then(function (data) {\r\n                            // perform success action here\r\n                        },\r\n                         function (response, status, headers, config) {\r\n                             // perform error handling here\r\n                        });\r\n     **/\r\n    ArticleInstanceRatingsClient.prototype.removeAll = function (data) {\r\n        return this.apiClient.delete(this.routeDefinition.deleteAll(data));\r\n    };\r\n    return ArticleInstanceRatingsClient;\r\n}());\r\nArticleInstanceRatingsClient = tslib_1.__decorate([\r\n    inversify_1.injectable(),\r\n    tslib_1.__param(0, inversify_1.inject(_1.TYPES.ArticleInstanceRatingsRoute)),\r\n    tslib_1.__param(1, inversify_1.inject(httpApi_1.httpTYPES.ApiClient)),\r\n    tslib_1.__metadata(\"design:paramtypes\", [typeof (_a = typeof _1.ArticleInstanceRatingsRoute !== \"undefined\" && _1.ArticleInstanceRatingsRoute) === \"function\" && _a || Object, typeof (_b = typeof httpApi_1.ApiClient !== \"undefined\" && httpApi_1.ApiClient) === \"function\" && _b || Object])\r\n], ArticleInstanceRatingsClient);\r\nexports.ArticleInstanceRatingsClient = ArticleInstanceRatingsClient;\r\nvar _a, _b;\r\n/**\r\n * @copyright (c) 2017 Mono Ltd\r\n * @license MIT\r\n * @author Mono Ltd\r\n * @overview\r\n ***Notes:**\r\n - Refer to the [Baasic REST API](http://dev.baasic.com/api/reference/home) for detailed information about available Baasic REST API end-points.\r\n - All end-point objects are transformed by the associated route service.\r\n*/ \r\n\n\n/***/ }),\n/* 138 */\n/***/ (function(module, exports, __webpack_require__) {\n\n\"use strict\";\n/* globals module */\r\n/**\r\n * @module articleInstanceRatingsRoute\r\n * @description Baasic Article Instance Ratings Route Definition provides Baasic route templates which can be expanded to Baasic REST URIs. Various services can use Baasic Article Sub Ratings Route Service to obtain needed routes while other routes will be obtained through HAL. By convention, all route services use the same function names as their corresponding services.\r\n*/\r\n\r\nObject.defineProperty(exports, \"__esModule\", { value: true });\r\nvar tslib_1 = __webpack_require__(1);\r\nvar inversify_1 = __webpack_require__(0);\r\nvar common_1 = __webpack_require__(2);\r\n;\r\nvar contracts_1 = __webpack_require__(3);\r\nvar ArticleInstanceRatingsRoute = (function (_super) {\r\n    tslib_1.__extends(ArticleInstanceRatingsRoute, _super);\r\n    function ArticleInstanceRatingsRoute(appOptions) {\r\n        var _this = _super.call(this, appOptions) || this;\r\n        _this.appOptions = appOptions;\r\n        _this.createRoute = 'articles/{articleId}/ratings/';\r\n        _this.findRoute = 'articles/{articleId}/ratings{?page,rpp,sort,embed,fields}';\r\n        _this.findByUserRoute = 'articles/{articleId}/users/{username}/ratings/{?embed,fields}';\r\n        _this.getRoute = 'articles/{articleId}/ratings/{id}/{?embed,fields}';\r\n        _this.updateRoute = 'articles/{articleId}/ratings/{id}';\r\n        _this.deleteRoute = 'articles/{articleId}/ratings/{id}';\r\n        _this.deleteAllRoute = 'articles/{articleId}/ratings';\r\n        return _this;\r\n    }\r\n    /**\r\n     * Parses create article rating route; this URI does not support any additional embed items.\r\n     * @method\r\n     * @param data An article rating object that needs to be inserted into the system.\r\n     * @example articleInstanceRatingsRoute.create(data);\r\n     **/\r\n    ArticleInstanceRatingsRoute.prototype.create = function (data) {\r\n        return _super.prototype.baseCreate.call(this, this.createRoute, data);\r\n    };\r\n    /**\r\n     * Parses find article rating route which can be expanded with additional options. Supported items are:\r\n     * - `searchQuery` - A string referencing article rating properties using the phrase or BQL (Baasic Query Language) search.\r\n     * - `page` - A value used to set the page number, i.e. to retrieve certain article rating subset from the storage.\r\n     * - `rpp` - A value used to limit the size of result set per page.\r\n     * - `sort` - A string used to set the article rating property to sort the result collection by.\r\n     * - `embed` - Comma separated list of resources to be contained within the current representation.\r\n     * @method\r\n     * @param articleId Article slug or id which uniquely identifies article whose rating resources need to be retrieved.\r\n     * @param options Query resource options object.\r\n     * @example articleInstanceRatingsRoute.find({searchQuery: '<search-phrase>'});\r\n     **/\r\n    ArticleInstanceRatingsRoute.prototype.find = function (articleId, options) {\r\n        var params = this.utility.extend({}, options);\r\n        params.articleId = articleId;\r\n        return _super.prototype.baseFind.call(this, this.findRoute, params);\r\n    };\r\n    /**\r\n     * Parses findByUser article rating route which can be expanded with additional options. Supported items are:\r\n     * - `username` - A value that uniquely identifies a user which has created an article rating.\r\n     * - `page` - A value used to set the page number, i.e. to retrieve certain article rating subset from the storage.\r\n     * - `rpp` - A value used to limit the size of result set per page.\r\n     * - `sort` - A string used to set the article rating property to sort the result collection by.\r\n     * - `embed` - Comma separated list of resources to be contained within the current representation.\r\n     * @method\r\n     * @param articleId Article slug or id which uniquely identifies article whose rating resources need to be retrieved.\r\n     * @param username Username which uniquely identifies a user which has created an article rating.\r\n     * @param options Query resource options object.\r\n     * @example articleInstanceRatingsRoute.find({username: '<username>'});\r\n     **/\r\n    ArticleInstanceRatingsRoute.prototype.findByUser = function (articleId, username, options) {\r\n        var params = this.utility.extend({}, options);\r\n        params.username = username;\r\n        params.articleId = articleId;\r\n        return _super.prototype.baseFind.call(this, this.findByUserRoute, params);\r\n    };\r\n    /**\r\n     * Parses get article rating route which must be expanded with the Id of the previously created article rating resource in the system. Additional expand supported items are:\r\n     * - `embed` - Comma separated list of resources to be contained within the current representation.\r\n     * @method\r\n     * @param articleId Article slug or id which uniquely identifies article whose rating resources need to be retrieved.\r\n     * @param id Article slug or id which uniquely identifies article resource that needs to be retrieved.\r\n     * @param options Options object that contains embed data.\r\n     * @example articleInstanceRatingsRoute.get({id: '<articleRating-id>'});\r\n     **/\r\n    ArticleInstanceRatingsRoute.prototype.get = function (articleId, id, options) {\r\n        var params = this.utility.extend({}, options);\r\n        params.articleId = articleId;\r\n        return _super.prototype.baseGet.call(this, this.getRoute, id, params);\r\n    };\r\n    /**\r\n     * Parses update article rating route; this URI does not support any additional embed items.\r\n     * @method\r\n     * @param data An article object used to update specified article resource.\r\n     * @example articleInstanceRatingsRoute.update(data);\r\n     **/\r\n    ArticleInstanceRatingsRoute.prototype.update = function (data) {\r\n        return _super.prototype.baseUpdate.call(this, this.updateRoute, data);\r\n    };\r\n    /**\r\n    * Parses delete article rating route; this URI does not support any additional embed items.\r\n    * @method\r\n    * @param data Rating resource resource that needs to be deleted.\r\n    * @example articleInstanceRatingsRoute.delete(data);\r\n    **/\r\n    ArticleInstanceRatingsRoute.prototype.delete = function (data) {\r\n        return _super.prototype.baseDelete.call(this, this.deleteRoute, data);\r\n    };\r\n    /**\r\n    * Parses delete article rating route; this URI does not support any additional embed items.\r\n    * @method\r\n    * @param data Article object whose ratings needs to be deleted.\r\n    * @example articleInstanceRatingsRoute.deleteAll(data);\r\n    **/\r\n    ArticleInstanceRatingsRoute.prototype.deleteAll = function (data) {\r\n        return _super.prototype.baseDelete.call(this, this.deleteAllRoute, data, undefined, 'delete-ratings-by-article');\r\n    };\r\n    return ArticleInstanceRatingsRoute;\r\n}(common_1.BaseRoute));\r\nArticleInstanceRatingsRoute = tslib_1.__decorate([\r\n    inversify_1.injectable(),\r\n    tslib_1.__param(0, inversify_1.inject(contracts_1.TYPES.IAppOptions)),\r\n    tslib_1.__metadata(\"design:paramtypes\", [typeof (_a = typeof contracts_1.IAppOptions !== \"undefined\" && contracts_1.IAppOptions) === \"function\" && _a || Object])\r\n], ArticleInstanceRatingsRoute);\r\nexports.ArticleInstanceRatingsRoute = ArticleInstanceRatingsRoute;\r\nvar _a;\r\n/**\r\n * @copyright (c) 2017 Mono Ltd\r\n * @license MIT\r\n * @author Mono Ltd\r\n * @overview\r\n ***Notes:**\r\n - Refer to the [Baasic REST API](http://dev.baasic.com/api/reference/home) for detailed information about available Baasic REST API end-points.\r\n - [URI Template](https://github.com/Baasic/uritemplate-js) syntax enables expanding the Baasic route templates to Baasic REST URIs providing it with an object that contains URI parameters.\r\n - All end-point objects are transformed by the associated route service.\r\n*/ \r\n\n\n/***/ }),\n/* 139 */\n/***/ (function(module, exports, __webpack_require__) {\n\n\"use strict\";\n\r\nfunction __export(m) {\r\n    for (var p in m) if (!exports.hasOwnProperty(p)) exports[p] = m[p];\r\n}\r\nObject.defineProperty(exports, \"__esModule\", { value: true });\r\n__export(__webpack_require__(138));\r\n__export(__webpack_require__(137));\r\n\n\n/***/ }),\n/* 140 */\n/***/ (function(module, exports, __webpack_require__) {\n\n\"use strict\";\n/* globals module */\r\n/**\r\n * @module articleRoute\r\n * @description Baasic Article Route Definition provides Baasic route templates which can be expanded to Baasic REST URIs. Various services can use Baasic Article Route Service to obtain needed routes while other routes will be obtained through HAL. By convention, all route services use the same function names as their corresponding services.\r\n*/\r\n\r\nObject.defineProperty(exports, \"__esModule\", { value: true });\r\nvar tslib_1 = __webpack_require__(1);\r\nvar inversify_1 = __webpack_require__(0);\r\nvar common_1 = __webpack_require__(2);\r\n;\r\nvar contracts_1 = __webpack_require__(3);\r\nvar _1 = __webpack_require__(6);\r\nvar ArticleRoute = (function (_super) {\r\n    tslib_1.__extends(ArticleRoute, _super);\r\n    function ArticleRoute(articleSubscriptionsRoute, articleInstanceCommentsRoute, articleInstanceFilesRoute, articleInstanceRatingsRoute, articleInstanceTagsRoute, articleACLRoute, appOptions) {\r\n        var _this = _super.call(this, appOptions) || this;\r\n        _this.articleSubscriptionsRoute = articleSubscriptionsRoute;\r\n        _this.articleInstanceCommentsRoute = articleInstanceCommentsRoute;\r\n        _this.articleInstanceFilesRoute = articleInstanceFilesRoute;\r\n        _this.articleInstanceRatingsRoute = articleInstanceRatingsRoute;\r\n        _this.articleInstanceTagsRoute = articleInstanceTagsRoute;\r\n        _this.articleACLRoute = articleACLRoute;\r\n        _this.appOptions = appOptions;\r\n        _this.findRoute = 'articles/{?searchQuery,page,rpp,sort,embed,fields,statuses,tags,startDate,endDate}';\r\n        _this.getRoute = 'articles/{id}/{?embed,fields}';\r\n        _this.publishRoute = 'articles/{id}/publish/';\r\n        _this.purgeRoute = 'articles/purge/';\r\n        _this.createRoute = 'articles';\r\n        _this.updateRoute = 'articles/{id}';\r\n        _this.deleteRoute = 'articles/{id}';\r\n        _this.archiveRoute = 'articles/{id}/archive';\r\n        _this.restoreRoute = 'articles/{id}/restore';\r\n        _this.unpublishRoute = 'articles/{id}/unpublish';\r\n        return _this;\r\n    }\r\n    Object.defineProperty(ArticleRoute.prototype, \"subscriptions\", {\r\n        get: function () {\r\n            return this.articleSubscriptionsRoute;\r\n        },\r\n        enumerable: true,\r\n        configurable: true\r\n    });\r\n    Object.defineProperty(ArticleRoute.prototype, \"comments\", {\r\n        get: function () {\r\n            return this.articleInstanceCommentsRoute;\r\n        },\r\n        enumerable: true,\r\n        configurable: true\r\n    });\r\n    Object.defineProperty(ArticleRoute.prototype, \"files\", {\r\n        get: function () {\r\n            return this.articleInstanceFilesRoute;\r\n        },\r\n        enumerable: true,\r\n        configurable: true\r\n    });\r\n    Object.defineProperty(ArticleRoute.prototype, \"ratings\", {\r\n        get: function () {\r\n            return this.articleInstanceRatingsRoute;\r\n        },\r\n        enumerable: true,\r\n        configurable: true\r\n    });\r\n    Object.defineProperty(ArticleRoute.prototype, \"tags\", {\r\n        get: function () {\r\n            return this.articleInstanceTagsRoute;\r\n        },\r\n        enumerable: true,\r\n        configurable: true\r\n    });\r\n    Object.defineProperty(ArticleRoute.prototype, \"acl\", {\r\n        get: function () {\r\n            return this.articleACLRoute;\r\n        },\r\n        enumerable: true,\r\n        configurable: true\r\n    });\r\n    /**\r\n     * Parses find article route which can be expanded with additional options. Supported items are:\r\n     * - `searchQuery` - A string referencing article properties using the phrase or BQL (Baasic Query Language) search.\r\n     * - `page` - A value used to set the page number, i.e. to retrieve certain article subset from the storage.\r\n     * - `rpp` - A value used to limit the size of result set per page.\r\n     * - `sort` - A string used to set the article property to sort the result collection by.\r\n     * - `embed` - Comma separated list of resources to be contained within the current representation.\r\n     * - `startDate` - A value used to specify the article creation, publish or archive date date starting from which article resource collection should be returned.\r\n     * - `endDate` - A value used to specify the article creation, publish or archive date until (and including) which article resource collection should be returned.\r\n     * - `statuses` - Comma separated list of article statuses that specify where search should be done (Allowed statuses: Published, Draft and Archived).\r\n     * - `tags` - A value used to restrict the search to article resources with these tags. Multiple tags should be comma separated.\r\n     * @method\r\n     * @param options A promise that is resolved once the find action has been performed.\r\n     * @example articleRoute.find.expand({searchQuery: '<search-phrase>'});\r\n     **/\r\n    ArticleRoute.prototype.find = function (options) {\r\n        var opt = options || {};\r\n        opt.startDate = this.getStartDate(opt);\r\n        opt.endDate = this.getEndDate(opt);\r\n        return _super.prototype.baseFind.call(this, this.findRoute, opt);\r\n    };\r\n    /**\r\n     * Parses get article route which must be expanded with the Id of the previously created article resource in the system. Additional expand supported items are:\r\n     * - `embed` - Comma separated list of resources to be contained within the current representation.\r\n     * @method\r\n     * @param id Article slug or id which uniquely identifies article resource that needs to be retrieved.\r\n     * @param options Options object that contains embed items.\r\n     * @example articleRoute.get({id: '<article-id>'});\r\n     **/\r\n    ArticleRoute.prototype.get = function (id, options) {\r\n        return _super.prototype.baseGet.call(this, this.getRoute, id, options);\r\n    };\r\n    /**\r\n     * Parses publish article route which must be expanded with the Id of the previously created article resource in the system.\r\n     * @method\r\n     * @param data An article object.\r\n     * @example articleRoute.publish.expand({id: '<article-id>'});\r\n     **/\r\n    ArticleRoute.prototype.publish = function (data) {\r\n        return _super.prototype.baseGet.call(this, this.publishRoute, data);\r\n    };\r\n    /**\r\n     * Parses purge article route, this URI template doesn't expose any additional properties.\r\n     * @method\r\n     * @example articleRoute.purge();\r\n     **/\r\n    ArticleRoute.prototype.purge = function (options) {\r\n        return _super.prototype.baseCreate.call(this, this.purgeRoute, options);\r\n    };\r\n    /**\r\n     * Parses create article route; this URI template doesn't expose any additional properties.\r\n     * @method\r\n     * @example articleRoute.create();\r\n     **/\r\n    ArticleRoute.prototype.create = function () {\r\n        return _super.prototype.baseCreate.call(this, this.createRoute, {});\r\n    };\r\n    /**\r\n     * Parses update article route; this URI template doesn't expose any additional properties.\r\n     * @method\r\n     * @param data An article object that needs to be updated into the system.\r\n     * @example articleRoute.update(data);\r\n     **/\r\n    ArticleRoute.prototype.update = function (data) {\r\n        return _super.prototype.baseUpdate.call(this, this.updateRoute, data);\r\n    };\r\n    /**\r\n     * Parses delete article route; this URI template doesn't expose any additional properties.\r\n     * @method\r\n     * @param data An article object that needs to be removed from the system.\r\n     * @example articleRoute.delete(data);\r\n     **/\r\n    ArticleRoute.prototype.delete = function (data) {\r\n        return _super.prototype.baseDelete.call(this, this.deleteRoute, data);\r\n    };\r\n    /**\r\n     * Parses archive article route; this URI template doesn't expose any additional properties.\r\n     * @method\r\n     * @param data An article object.\r\n     * @example articleRoute.archive(data);\r\n     **/\r\n    ArticleRoute.prototype.archive = function (data) {\r\n        return _super.prototype.baseUpdate.call(this, this.archiveRoute, data, undefined, 'archive');\r\n    };\r\n    /**\r\n     * Parses restore article route; this URI template doesn't expose any additional properties.\r\n     * @method\r\n     * @example articleRoute.restore(data);\r\n     **/\r\n    ArticleRoute.prototype.restore = function (data) {\r\n        return _super.prototype.baseUpdate.call(this, this.restoreRoute, data, undefined, 'restore');\r\n    };\r\n    /**\r\n     * Returns a promise that is resolved once the unpublish article action has been performed. This action sets the status of an article from \"published\" to \"draft\". This route uses HAL enabled objects to obtain routes and therefore it doesn't apply `articleRoute` route template. Here is an example of how a route can be obtained from HAL enabled objects:\r\n     * ```\r\n     * let params = modelMapper.updateParams(article);\r\n     * let uri = params['model'].links('unpublish').href;\r\n     * ```\r\n     * @method\r\n     * @example // article is a resource previously fetched using get action.\r\n                    articleClient.unpublish(article)\r\n                        .then(function (data) {\r\n                            // perform success action here\r\n                        },\r\n                         function (response, status, headers, config) {\r\n                             // perform error handling here\r\n                        });\r\n     **/\r\n    ArticleRoute.prototype.unpublish = function (data) {\r\n        return _super.prototype.baseUpdate.call(this, this.unpublishRoute, data, undefined, 'unpublish');\r\n    };\r\n    ArticleRoute.prototype.getStartDate = function (options) {\r\n        if (!this.utility.isUndefined(options.startDate) && options.startDate !== null) {\r\n            return options.startDate.toISOString();\r\n        }\r\n        return undefined;\r\n    };\r\n    ArticleRoute.prototype.getEndDate = function (options) {\r\n        if (!this.utility.isUndefined(options.endDate) && options.endDate !== null) {\r\n            return options.endDate.toISOString();\r\n        }\r\n        return undefined;\r\n    };\r\n    return ArticleRoute;\r\n}(common_1.BaseRoute));\r\nArticleRoute = tslib_1.__decorate([\r\n    inversify_1.injectable(),\r\n    tslib_1.__param(0, inversify_1.inject(_1.TYPES.ArticleSubscriptionsRoute)),\r\n    tslib_1.__param(1, inversify_1.inject(_1.TYPES.ArticleInstanceCommentsRoute)),\r\n    tslib_1.__param(2, inversify_1.inject(_1.TYPES.ArticleInstanceFilesRoute)),\r\n    tslib_1.__param(3, inversify_1.inject(_1.TYPES.ArticleInstanceRatingsRoute)),\r\n    tslib_1.__param(4, inversify_1.inject(_1.TYPES.ArticleInstanceTagsRoute)),\r\n    tslib_1.__param(5, inversify_1.inject(_1.TYPES.ArticleACLRoute)),\r\n    tslib_1.__param(6, inversify_1.inject(contracts_1.TYPES.IAppOptions)),\r\n    tslib_1.__metadata(\"design:paramtypes\", [typeof (_a = typeof _1.ArticleSubscriptionsRoute !== \"undefined\" && _1.ArticleSubscriptionsRoute) === \"function\" && _a || Object, typeof (_b = typeof _1.ArticleInstanceCommentsRoute !== \"undefined\" && _1.ArticleInstanceCommentsRoute) === \"function\" && _b || Object, typeof (_c = typeof _1.ArticleInstanceFilesRoute !== \"undefined\" && _1.ArticleInstanceFilesRoute) === \"function\" && _c || Object, typeof (_d = typeof _1.ArticleInstanceRatingsRoute !== \"undefined\" && _1.ArticleInstanceRatingsRoute) === \"function\" && _d || Object, typeof (_e = typeof _1.ArticleInstanceTagsRoute !== \"undefined\" && _1.ArticleInstanceTagsRoute) === \"function\" && _e || Object, typeof (_f = typeof _1.ArticleACLRoute !== \"undefined\" && _1.ArticleACLRoute) === \"function\" && _f || Object, typeof (_g = typeof contracts_1.IAppOptions !== \"undefined\" && contracts_1.IAppOptions) === \"function\" && _g || Object])\r\n], ArticleRoute);\r\nexports.ArticleRoute = ArticleRoute;\r\nvar _a, _b, _c, _d, _e, _f, _g;\r\n/**\r\n * @copyright (c) 2017 Mono Ltd\r\n * @license MIT\r\n * @author Mono Ltd\r\n * @overview\r\n ***Notes:**\r\n - Refer to the [Baasic REST API](http://dev.baasic.com/api/reference/home) for detailed information about available Baasic REST API end-points.\r\n - [URI Template](https://github.com/Baasic/uritemplate-js) syntax enables expanding the Baasic route templates to Baasic REST URIs providing it with an object that contains URI parameters.\r\n - All end-point objects are transformed by the associated route service.\r\n*/\r\n\n\n/***/ }),\n/* 141 */\n/***/ (function(module, exports, __webpack_require__) {\n\n\"use strict\";\n/* globals module */\r\n/**\r\n * @module articleSettingsClient\r\n * @description  Article Settings Client provides an easy way to consume  Article Settings REST API end-points. In order to obtain needed routes `articleSettingsClient` uses `articleSettingsRoute`.\r\n */\r\n\r\nObject.defineProperty(exports, \"__esModule\", { value: true });\r\nvar tslib_1 = __webpack_require__(1);\r\nvar inversify_1 = __webpack_require__(0);\r\n;\r\nvar httpApi_1 = __webpack_require__(4);\r\nvar _1 = __webpack_require__(6);\r\nvar ArticleSettingsClient = (function () {\r\n    function ArticleSettingsClient(articleSettingsRoute, apiClient) {\r\n        this.articleSettingsRoute = articleSettingsRoute;\r\n        this.apiClient = apiClient;\r\n    }\r\n    Object.defineProperty(ArticleSettingsClient.prototype, \"routeDefinition\", {\r\n        /**\r\n         * Provides direct access to `baasicArticleSettingsRouteService`.\r\n         * @method\r\n         * @example articleSettingsClient.routeDefinition.get().expand(expandObject);\r\n         **/\r\n        get: function () {\r\n            return this.articleSettingsRoute;\r\n        },\r\n        enumerable: true,\r\n        configurable: true\r\n    });\r\n    /**\r\n     * Returns a promise that is resolved once the get action has been performed. Success response returns the article settings.\r\n     * @method\r\n     * @param options Options object that contains embed data.\r\n     * @returns A promise that is resolved once the get action has been performed.\r\n     * @example articleSettingsClient.get()\r\n                    .then(function (data) {\r\n                        // perform success action here\r\n                    },\r\n                     function (response, status, headers, config) {\r\n                        // perform error handling here\r\n                    });\r\n     **/\r\n    ArticleSettingsClient.prototype.get = function (options) {\r\n        return this.apiClient.get(this.routeDefinition.get(options));\r\n    };\r\n    /**\r\n     * Returns a promise that is resolved once the update article settings action has been performed; this action updates article settings. This route uses HAL enabled objects to obtain routes and therefore it doesn't apply `articleSettingsRoute` route template. Here is an example of how a route can be obtained from HAL enabled objects:\r\n     * ```\r\n     * let params = modelMapper.removeParams(articleSettings);\r\n     * let uri = params['model'].links('put').href;\r\n     * ```\r\n     * @method\r\n     * @param options Options object that contains embed data.\r\n     * @returns A promise that is resolved once the update article settings action has been performed.\r\n     * @example // articleSettings is a resource previously fetched using get action.\r\n                    articleSettings.allowArchive = true;\r\n                    articleSettingsClient.update(articleSettings)\r\n                        .then(function (data) {\r\n                            // perform success action here\r\n                        },\r\n                         function (response, status, headers, config) {\r\n                            // perform error handling here\r\n                        });\r\n     **/\r\n    ArticleSettingsClient.prototype.update = function (data) {\r\n        return this.apiClient.put(this.routeDefinition.update(data), this.routeDefinition.updateParams(data));\r\n    };\r\n    return ArticleSettingsClient;\r\n}());\r\nArticleSettingsClient = tslib_1.__decorate([\r\n    inversify_1.injectable(),\r\n    tslib_1.__param(0, inversify_1.inject(_1.TYPES.ArticleSettingsRoute)),\r\n    tslib_1.__param(1, inversify_1.inject(httpApi_1.httpTYPES.ApiClient)),\r\n    tslib_1.__metadata(\"design:paramtypes\", [typeof (_a = typeof _1.ArticleSettingsRoute !== \"undefined\" && _1.ArticleSettingsRoute) === \"function\" && _a || Object, typeof (_b = typeof httpApi_1.ApiClient !== \"undefined\" && httpApi_1.ApiClient) === \"function\" && _b || Object])\r\n], ArticleSettingsClient);\r\nexports.ArticleSettingsClient = ArticleSettingsClient;\r\nvar _a, _b;\r\n/**\r\n * @copyright (c) 2017 Mono Ltd\r\n * @license MIT\r\n * @author Mono Ltd\r\n * @overview\r\n ***Notes:**\r\n - Refer to the [Baasic REST API](http://dev.baasic.com/api/reference/home) for detailed information about available Baasic REST API end-points.\r\n - All end-point objects are transformed by the associated route service.\r\n*/ \r\n\n\n/***/ }),\n/* 142 */\n/***/ (function(module, exports, __webpack_require__) {\n\n\"use strict\";\n/* globals module */\r\n/**\r\n* @module articleSettingsRoute\r\n* @description Baasic Article Settings Route Definition provides Baasic route templates which can be expanded to Baasic REST URIs. Various services can use Baasic Article Settings Route Service to obtain needed routes while other routes will be obtained through HAL. By convention, all route services  use the same function names as their corresponding services.\r\n*/\r\n\r\nObject.defineProperty(exports, \"__esModule\", { value: true });\r\nvar tslib_1 = __webpack_require__(1);\r\nvar inversify_1 = __webpack_require__(0);\r\nvar common_1 = __webpack_require__(2);\r\n;\r\nvar contracts_1 = __webpack_require__(3);\r\nvar ArticleSettingsRoute = (function (_super) {\r\n    tslib_1.__extends(ArticleSettingsRoute, _super);\r\n    function ArticleSettingsRoute(appOptions) {\r\n        var _this = _super.call(this, appOptions) || this;\r\n        _this.appOptions = appOptions;\r\n        _this.getRoute = 'article-settings/{?embed,fields}';\r\n        _this.updateRoute = 'article-settings/{id}';\r\n        return _this;\r\n    }\r\n    /**\r\n     * Parses get article settings route; this URI template doesn't expose any additional properties.\r\n     * @method\r\n     * @param options Options object that contains embed data.\r\n     * @example articleSettingsRoute.get(options);\r\n     **/\r\n    ArticleSettingsRoute.prototype.get = function (options) {\r\n        return _super.prototype.baseGet.call(this, this.getRoute, undefined, options);\r\n    };\r\n    /**\r\n     * Parses update article settings route; this URI template doesn't expose any additional properties.\r\n     * @method\r\n     * @param options Options object that contains embed data.\r\n     * @example articleSettingsRoute.update(data);\r\n     **/\r\n    ArticleSettingsRoute.prototype.update = function (data) {\r\n        return _super.prototype.baseUpdate.call(this, this.updateRoute, data);\r\n    };\r\n    return ArticleSettingsRoute;\r\n}(common_1.BaseRoute));\r\nArticleSettingsRoute = tslib_1.__decorate([\r\n    inversify_1.injectable(),\r\n    tslib_1.__param(0, inversify_1.inject(contracts_1.TYPES.IAppOptions)),\r\n    tslib_1.__metadata(\"design:paramtypes\", [typeof (_a = typeof contracts_1.IAppOptions !== \"undefined\" && contracts_1.IAppOptions) === \"function\" && _a || Object])\r\n], ArticleSettingsRoute);\r\nexports.ArticleSettingsRoute = ArticleSettingsRoute;\r\nvar _a;\r\n/**\r\n * @copyright (c) 2017 Mono Ltd\r\n * @license MIT\r\n * @author Mono Ltd\r\n * @overview\r\n ***Notes:**\r\n - Refer to the [Baasic REST API](http://dev.baasic.com/api/reference/home) for detailed information about available Baasic REST API end-points.\r\n - [URI Template](https://github.com/Baasic/uritemplate-js) syntax enables expanding the Baasic route templates to Baasic REST URIs providing it with an object that contains URI parameters.\r\n - All end-point objects are transformed by the associated route service.\r\n*/ \r\n\n\n/***/ }),\n/* 143 */\n/***/ (function(module, exports, __webpack_require__) {\n\n\"use strict\";\n/* globals module */\r\n/**\r\n * @module articleSubscriptionsArticleModuleClient\r\n * @description  Article Subscriptions Article Module Client provides an easy way to consume  Articles REST API end-points. In order to obtain needed routes `articleSubscriptionsClient` uses `articleSubscriptionsRoute`.\r\n */\r\n\r\nObject.defineProperty(exports, \"__esModule\", { value: true });\r\nvar tslib_1 = __webpack_require__(1);\r\nvar inversify_1 = __webpack_require__(0);\r\n;\r\nvar httpApi_1 = __webpack_require__(4);\r\nvar _1 = __webpack_require__(6);\r\nvar ArticleSubscriptionsClient = (function () {\r\n    function ArticleSubscriptionsClient(articleSubscriptionsRoute, apiClient) {\r\n        this.articleSubscriptionsRoute = articleSubscriptionsRoute;\r\n        this.apiClient = apiClient;\r\n    }\r\n    Object.defineProperty(ArticleSubscriptionsClient.prototype, \"routeDefinition\", {\r\n        get: function () {\r\n            return this.articleSubscriptionsRoute;\r\n        },\r\n        enumerable: true,\r\n        configurable: true\r\n    });\r\n    /**\r\n     * Subscribes user or existing user to article module updates. Returns a promise that is resolved once the subscribe action has been performed. This action subscribes an user to the article module.\r\n     * @method\r\n     * @param data The subscribe information.\r\n     * @returns A promise that is resolved once the subscribe action has been performed.\r\n     * @example articleSubscriptionsArticleModuleClient.subscribe(data)\r\n                   .then(function (data) {\r\n                       // perform success action here\r\n                   },\r\n                    function (response, status, headers, config) {\r\n                        // perform error handling here\r\n                   });\r\n    **/\r\n    ArticleSubscriptionsClient.prototype.subscribe = function (data) {\r\n        return this.apiClient.post(this.articleSubscriptionsRoute.subscribe(data), data);\r\n    };\r\n    /**\r\n     * Determines whether existing or anonymous user are subscribed to article module updates. Returns a promise that is resolved once the isSubscribed action has been performed. This action checks if a user is subscribed to the article module.\r\n     * @method\r\n     * @param data The subscribe information.\r\n     * @returns A promise that is resolved once the isSubscribed action has been performed.\r\n     * @example articleSubscriptionsArticleModuleClient.isSubscribe(data)\r\n                   .then(function (data) {\r\n                       // perform success action here\r\n                   },\r\n                    function (response, status, headers, config) {\r\n                        // perform error handling here\r\n                   });\r\n     **/\r\n    ArticleSubscriptionsClient.prototype.isSubscribed = function (data) {\r\n        return this.apiClient.get(this.routeDefinition.isSubscribed(data));\r\n    };\r\n    /**\r\n     * Unsubscribe existing or anonymous user from article module updates. Returns a promise that is resolved once the unSubscribe action has been performed. This action unsubscribes a user from the article module.\r\n     * @method\r\n     * @param data The subscribe information.\r\n     * @returns A promise that is resolved once the unSubscribe action has been performed.\r\n     * @example articleSubscriptionsArticleModuleClient.unSubscribe(data)\r\n                   .then(function (data) {\r\n                       // perform success action here\r\n                   },\r\n                    function (response, status, headers, config) {\r\n                        // perform error handling here\r\n                   });                          **/\r\n    ArticleSubscriptionsClient.prototype.unSubscribe = function (data) {\r\n        return this.apiClient.delete(this.routeDefinition.unSubscribe(data));\r\n    };\r\n    return ArticleSubscriptionsClient;\r\n}());\r\nArticleSubscriptionsClient = tslib_1.__decorate([\r\n    inversify_1.injectable(),\r\n    tslib_1.__param(0, inversify_1.inject(_1.TYPES.ArticleSubscriptionsRoute)),\r\n    tslib_1.__param(1, inversify_1.inject(httpApi_1.httpTYPES.ApiClient)),\r\n    tslib_1.__metadata(\"design:paramtypes\", [typeof (_a = typeof _1.ArticleSubscriptionsRoute !== \"undefined\" && _1.ArticleSubscriptionsRoute) === \"function\" && _a || Object, typeof (_b = typeof httpApi_1.ApiClient !== \"undefined\" && httpApi_1.ApiClient) === \"function\" && _b || Object])\r\n], ArticleSubscriptionsClient);\r\nexports.ArticleSubscriptionsClient = ArticleSubscriptionsClient;\r\nvar _a, _b;\r\n\n\n/***/ }),\n/* 144 */\n/***/ (function(module, exports, __webpack_require__) {\n\n\"use strict\";\n/* globals module */\r\n/**\r\n * @module ArticleSubscriptionsRoute\r\n * @description Baasic Article Subscriptions Article Module Route Definition provides Baasic route templates which can be expanded to Baasic REST URIs. Various services can use Baasic Article Subscriptions Article Module Route Service to obtain needed routes while other routes will be obtained through HAL. By convention, all route services use the same function names as their corresponding services.\r\n*/\r\n\r\nObject.defineProperty(exports, \"__esModule\", { value: true });\r\nvar tslib_1 = __webpack_require__(1);\r\nvar inversify_1 = __webpack_require__(0);\r\nvar common_1 = __webpack_require__(2);\r\n;\r\nvar contracts_1 = __webpack_require__(3);\r\nvar ArticleSubscriptionsRoute = (function (_super) {\r\n    tslib_1.__extends(ArticleSubscriptionsRoute, _super);\r\n    function ArticleSubscriptionsRoute(appOptions) {\r\n        var _this = _super.call(this, appOptions) || this;\r\n        _this.appOptions = appOptions;\r\n        _this.subscribeRoute = 'articles/subscriptions';\r\n        _this.isSubscribedRoute = 'articles/subscriptions/{subscriberId}';\r\n        _this.unSubscribeRoute = 'articles/subscriptions';\r\n        return _this;\r\n    }\r\n    /**\r\n     * Parses article module subscribe route which doesn't support any additional options.\r\n     * @method\r\n     * @param data The subscribe information.\r\n     * @example articleSubscriptionsRoute.subscribe(data);\r\n     **/\r\n    ArticleSubscriptionsRoute.prototype.subscribe = function (data) {\r\n        return _super.prototype.baseCreate.call(this, this.subscribeRoute, data);\r\n    };\r\n    /**\r\n     * Parses article module isSubscribed route which must be expanded with subscriber Id\r\n     * @method\r\n     * @param data The subscribe information.\r\n     * @example articleSubscriptionsRoute.isSubscribed({subscriberId: '<subscriber-id>'});\r\n     **/\r\n    ArticleSubscriptionsRoute.prototype.isSubscribed = function (data) {\r\n        return _super.prototype.baseCreate.call(this, this.isSubscribedRoute, data);\r\n    };\r\n    /**\r\n     * Parses article module unSubscribe route which doesn't support any additional options.\r\n     * @method\r\n     * @param data The subscribe information.\r\n     * @example articleSubscriptionsRoute.unSubscribe(data);\r\n     **/\r\n    ArticleSubscriptionsRoute.prototype.unSubscribe = function (data) {\r\n        return _super.prototype.baseCreate.call(this, this.unSubscribeRoute, data);\r\n    };\r\n    return ArticleSubscriptionsRoute;\r\n}(common_1.BaseRoute));\r\nArticleSubscriptionsRoute = tslib_1.__decorate([\r\n    inversify_1.injectable(),\r\n    tslib_1.__param(0, inversify_1.inject(contracts_1.TYPES.IAppOptions)),\r\n    tslib_1.__metadata(\"design:paramtypes\", [typeof (_a = typeof contracts_1.IAppOptions !== \"undefined\" && contracts_1.IAppOptions) === \"function\" && _a || Object])\r\n], ArticleSubscriptionsRoute);\r\nexports.ArticleSubscriptionsRoute = ArticleSubscriptionsRoute;\r\nvar _a;\r\n\n\n/***/ }),\n/* 145 */\n/***/ (function(module, exports, __webpack_require__) {\n\n\"use strict\";\n/* globals module */\r\n/**\r\n * @module articleSubscriptionsClient\r\n * @description  Articles Subscriptions Client provides an easy way to consume  Articles REST API end-points. In order to obtain needed routes `articleSubscriptionsClient` uses `articleSubscriptionsRoute`.\r\n */\r\n\r\nObject.defineProperty(exports, \"__esModule\", { value: true });\r\nvar tslib_1 = __webpack_require__(1);\r\nvar inversify_1 = __webpack_require__(0);\r\n;\r\nvar _1 = __webpack_require__(6);\r\nvar ArticleInstanceSubscriptionsClient = (function () {\r\n    function ArticleInstanceSubscriptionsClient(articleSubscriptionsCommentReportedClient, articleSubscriptionsArticleClient, articleSubscriptionsCommentRequiresModerationClient, articleInstanceSubscriptionsRoute) {\r\n        this.articleSubscriptionsCommentReportedClient = articleSubscriptionsCommentReportedClient;\r\n        this.articleSubscriptionsArticleClient = articleSubscriptionsArticleClient;\r\n        this.articleSubscriptionsCommentRequiresModerationClient = articleSubscriptionsCommentRequiresModerationClient;\r\n        this.articleInstanceSubscriptionsRoute = articleInstanceSubscriptionsRoute;\r\n    }\r\n    Object.defineProperty(ArticleInstanceSubscriptionsClient.prototype, \"commentReported\", {\r\n        get: function () {\r\n            return this.articleSubscriptionsCommentReportedClient;\r\n        },\r\n        enumerable: true,\r\n        configurable: true\r\n    });\r\n    Object.defineProperty(ArticleInstanceSubscriptionsClient.prototype, \"article\", {\r\n        get: function () {\r\n            return this.articleSubscriptionsArticleClient;\r\n        },\r\n        enumerable: true,\r\n        configurable: true\r\n    });\r\n    Object.defineProperty(ArticleInstanceSubscriptionsClient.prototype, \"commentRequiresModeration\", {\r\n        get: function () {\r\n            return this.articleSubscriptionsCommentRequiresModerationClient;\r\n        },\r\n        enumerable: true,\r\n        configurable: true\r\n    });\r\n    Object.defineProperty(ArticleInstanceSubscriptionsClient.prototype, \"routeDefinition\", {\r\n        get: function () {\r\n            return this.articleInstanceSubscriptionsRoute;\r\n        },\r\n        enumerable: true,\r\n        configurable: true\r\n    });\r\n    return ArticleInstanceSubscriptionsClient;\r\n}());\r\nArticleInstanceSubscriptionsClient = tslib_1.__decorate([\r\n    inversify_1.injectable(),\r\n    tslib_1.__param(0, inversify_1.inject(_1.TYPES.ArticleSubscriptionsCommentReportedClient)),\r\n    tslib_1.__param(1, inversify_1.inject(_1.TYPES.ArticleSubscriptionsArticleClient)),\r\n    tslib_1.__param(2, inversify_1.inject(_1.TYPES.ArticleSubscriptionsCommentRequiresModerationClient)),\r\n    tslib_1.__param(3, inversify_1.inject(_1.TYPES.ArticleInstanceSubscriptionsRoute)),\r\n    tslib_1.__metadata(\"design:paramtypes\", [typeof (_a = typeof _1.ArticleSubscriptionsCommentReportedClient !== \"undefined\" && _1.ArticleSubscriptionsCommentReportedClient) === \"function\" && _a || Object, typeof (_b = typeof _1.ArticleSubscriptionsArticleClient !== \"undefined\" && _1.ArticleSubscriptionsArticleClient) === \"function\" && _b || Object, typeof (_c = typeof _1.ArticleSubscriptionsCommentRequiresModerationClient !== \"undefined\" && _1.ArticleSubscriptionsCommentRequiresModerationClient) === \"function\" && _c || Object, typeof (_d = typeof _1.ArticleInstanceSubscriptionsRoute !== \"undefined\" && _1.ArticleInstanceSubscriptionsRoute) === \"function\" && _d || Object])\r\n], ArticleInstanceSubscriptionsClient);\r\nexports.ArticleInstanceSubscriptionsClient = ArticleInstanceSubscriptionsClient;\r\nvar _a, _b, _c, _d;\r\n\n\n/***/ }),\n/* 146 */\n/***/ (function(module, exports, __webpack_require__) {\n\n\"use strict\";\n/* globals module */\r\n/**\r\n * @module articleSubscriptionsRoute\r\n * @description Baasic Article Subscriptions Route Definition provides Baasic route templates which can be expanded to Baasic REST URIs. Various services can use Baasic Article Subscriptions Route Definition to obtain needed routes while other routes will be obtained through HAL. By convention, all route services use the same function names as their corresponding services.\r\n*/\r\n\r\nObject.defineProperty(exports, \"__esModule\", { value: true });\r\nvar tslib_1 = __webpack_require__(1);\r\nvar inversify_1 = __webpack_require__(0);\r\nvar common_1 = __webpack_require__(2);\r\n;\r\nvar contracts_1 = __webpack_require__(3);\r\nvar _1 = __webpack_require__(6);\r\nvar ArticleInstanceSubscriptionsRoute = (function (_super) {\r\n    tslib_1.__extends(ArticleInstanceSubscriptionsRoute, _super);\r\n    function ArticleInstanceSubscriptionsRoute(articleSubscriptionsCommentReportedRoute, articleSubscriptionsArticleRoute, articleSubscriptionsCommentRequiresModerationRoute, appOptions) {\r\n        var _this = _super.call(this, appOptions) || this;\r\n        _this.articleSubscriptionsCommentReportedRoute = articleSubscriptionsCommentReportedRoute;\r\n        _this.articleSubscriptionsArticleRoute = articleSubscriptionsArticleRoute;\r\n        _this.articleSubscriptionsCommentRequiresModerationRoute = articleSubscriptionsCommentRequiresModerationRoute;\r\n        _this.appOptions = appOptions;\r\n        return _this;\r\n    }\r\n    Object.defineProperty(ArticleInstanceSubscriptionsRoute.prototype, \"commentReported\", {\r\n        get: function () {\r\n            return this.articleSubscriptionsCommentReportedRoute;\r\n        },\r\n        enumerable: true,\r\n        configurable: true\r\n    });\r\n    Object.defineProperty(ArticleInstanceSubscriptionsRoute.prototype, \"article\", {\r\n        get: function () {\r\n            return this.articleSubscriptionsArticleRoute;\r\n        },\r\n        enumerable: true,\r\n        configurable: true\r\n    });\r\n    Object.defineProperty(ArticleInstanceSubscriptionsRoute.prototype, \"commentRequiresModeration\", {\r\n        get: function () {\r\n            return this.articleSubscriptionsCommentRequiresModerationRoute;\r\n        },\r\n        enumerable: true,\r\n        configurable: true\r\n    });\r\n    return ArticleInstanceSubscriptionsRoute;\r\n}(common_1.BaseRoute));\r\nArticleInstanceSubscriptionsRoute = tslib_1.__decorate([\r\n    inversify_1.injectable(),\r\n    tslib_1.__param(0, inversify_1.inject(_1.TYPES.ArticleSubscriptionsCommentReportedRoute)),\r\n    tslib_1.__param(1, inversify_1.inject(_1.TYPES.ArticleSubscriptionsArticleRoute)),\r\n    tslib_1.__param(2, inversify_1.inject(_1.TYPES.ArticleSubscriptionsCommentRequiresModerationRoute)),\r\n    tslib_1.__param(3, inversify_1.inject(contracts_1.TYPES.IAppOptions)),\r\n    tslib_1.__metadata(\"design:paramtypes\", [typeof (_a = typeof _1.ArticleSubscriptionsCommentReportedRoute !== \"undefined\" && _1.ArticleSubscriptionsCommentReportedRoute) === \"function\" && _a || Object, typeof (_b = typeof _1.ArticleSubscriptionsArticleRoute !== \"undefined\" && _1.ArticleSubscriptionsArticleRoute) === \"function\" && _b || Object, typeof (_c = typeof _1.ArticleSubscriptionsCommentRequiresModerationRoute !== \"undefined\" && _1.ArticleSubscriptionsCommentRequiresModerationRoute) === \"function\" && _c || Object, typeof (_d = typeof contracts_1.IAppOptions !== \"undefined\" && contracts_1.IAppOptions) === \"function\" && _d || Object])\r\n], ArticleInstanceSubscriptionsRoute);\r\nexports.ArticleInstanceSubscriptionsRoute = ArticleInstanceSubscriptionsRoute;\r\nvar _a, _b, _c, _d;\r\n\n\n/***/ }),\n/* 147 */\n/***/ (function(module, exports, __webpack_require__) {\n\n\"use strict\";\n/* globals module */\r\n/**\r\n * @module articleSubscriptionsArticleClient\r\n * @description  Article Subscriptions Article Client provides an easy way to consume  Articles REST API end-points. In order to obtain needed routes `articleSubscriptionsArticleClient` uses `articleSubscriptionsArticleRoute`.\r\n */\r\n\r\nObject.defineProperty(exports, \"__esModule\", { value: true });\r\nvar tslib_1 = __webpack_require__(1);\r\nvar inversify_1 = __webpack_require__(0);\r\n;\r\nvar httpApi_1 = __webpack_require__(4);\r\nvar _1 = __webpack_require__(6);\r\nvar ArticleSubscriptionsArticleClient = (function () {\r\n    function ArticleSubscriptionsArticleClient(articleSubscriptionsArticleRoute, apiClient) {\r\n        this.articleSubscriptionsArticleRoute = articleSubscriptionsArticleRoute;\r\n        this.apiClient = apiClient;\r\n    }\r\n    Object.defineProperty(ArticleSubscriptionsArticleClient.prototype, \"routeDefinition\", {\r\n        get: function () {\r\n            return this.articleSubscriptionsArticleRoute;\r\n        },\r\n        enumerable: true,\r\n        configurable: true\r\n    });\r\n    /**\r\n     * Returns a promise that is resolved once the subscribe action has been performed. This action subscribes an user to the specified article.\r\n     * @method\r\n     * @param article The article identifier.\r\n     * @param data The subscribe information.\r\n     * @returns A promise that is resolved once the subscribe action has been performed.\r\n     * @example articleSubscriptionsArticleClient.subscribe(article, user)\r\n                    .then(function (data) {\r\n                        // perform success action here\r\n                    },\r\n                     function (response, status, headers, config) {\r\n                         // perform error handling here\r\n                    });\r\n     **/\r\n    ArticleSubscriptionsArticleClient.prototype.subscribe = function (article, data) {\r\n        return this.apiClient.post(this.routeDefinition.subscribe(article, data), this.routeDefinition.subscribeParams(article, data));\r\n    };\r\n    /**\r\n     * Returns a promise that is resolved once the isSubscribed action has been performed. This action checks if a user is subscribed to the specified article.\r\n     * @method\r\n     * @param article The article identifier.\r\n     * @param data The subscriber identifier.\r\n     * @returns A promise that is resolved once the isSubscribed action has been performed.\r\n     * @example articleSubscriptionsArticleClient.subscribe(article, user)\r\n                    .then(function (data) {\r\n                        // perform success action here\r\n                    },\r\n                     function (response, status, headers, config) {\r\n                         // perform error handling here\r\n                    });\r\n     **/\r\n    ArticleSubscriptionsArticleClient.prototype.isSubscribed = function (article, data) {\r\n        return this.apiClient.get(this.articleSubscriptionsArticleRoute.isSubscribed(article, data));\r\n    };\r\n    /**\r\n     * Returns a promise that is resolved once the unSubscribe action has been performed. This action unsubscribes a user from the specified article.\r\n     * @method\r\n     * @param article The article identifier.\r\n     * @param data The unsubscribe information.\r\n     * @returns A promise that is resolved once the unSubscribe action has been performed.\r\n     * @example articleSubscriptionsArticleClient.subscribe(article, user)\r\n                    .then(function (data) {\r\n                        // perform success action here\r\n                    },\r\n                     function (response, status, headers, config) {\r\n                         // perform error handling here\r\n                    });\r\n     **/\r\n    ArticleSubscriptionsArticleClient.prototype.unSubscribe = function (article, data) {\r\n        return this.apiClient.delete(this.articleSubscriptionsArticleRoute.unSubscribe(article, data));\r\n    };\r\n    return ArticleSubscriptionsArticleClient;\r\n}());\r\nArticleSubscriptionsArticleClient = tslib_1.__decorate([\r\n    inversify_1.injectable(),\r\n    tslib_1.__param(0, inversify_1.inject(_1.TYPES.ArticleSubscriptionsArticleRoute)),\r\n    tslib_1.__param(1, inversify_1.inject(httpApi_1.httpTYPES.ApiClient)),\r\n    tslib_1.__metadata(\"design:paramtypes\", [typeof (_a = typeof _1.ArticleSubscriptionsArticleRoute !== \"undefined\" && _1.ArticleSubscriptionsArticleRoute) === \"function\" && _a || Object, typeof (_b = typeof httpApi_1.ApiClient !== \"undefined\" && httpApi_1.ApiClient) === \"function\" && _b || Object])\r\n], ArticleSubscriptionsArticleClient);\r\nexports.ArticleSubscriptionsArticleClient = ArticleSubscriptionsArticleClient;\r\nvar _a, _b;\r\n\n\n/***/ }),\n/* 148 */\n/***/ (function(module, exports, __webpack_require__) {\n\n\"use strict\";\n/* globals module */\r\n/**\r\n * @module articleSubscriptionsArticleRoute\r\n * @description Baasic Article Subscriptions Article Route Definition provides Baasic route templates which can be expanded to Baasic REST URIs. Various services can use Baasic Article Subscriptions Article Route Service to obtain needed routes while other routes will be obtained through HAL. By convention, all route services use the same function names as their corresponding services.\r\n*/\r\n\r\nObject.defineProperty(exports, \"__esModule\", { value: true });\r\nvar tslib_1 = __webpack_require__(1);\r\nvar inversify_1 = __webpack_require__(0);\r\nvar common_1 = __webpack_require__(2);\r\n;\r\nvar contracts_1 = __webpack_require__(3);\r\nvar ArticleSubscriptionsArticleRoute = (function (_super) {\r\n    tslib_1.__extends(ArticleSubscriptionsArticleRoute, _super);\r\n    function ArticleSubscriptionsArticleRoute(appOptions) {\r\n        var _this = _super.call(this, appOptions) || this;\r\n        _this.appOptions = appOptions;\r\n        _this.subscribeRoute = 'articles/{articleId}/subscriptions';\r\n        _this.isSubscribedRoute = 'articles/{articleId}/subscriptions/{subscriberId}';\r\n        _this.unSubscribeRoute = 'articles/{articleId}/subscriptions';\r\n        return _this;\r\n    }\r\n    /**\r\n     * Parses article subscribe route which must be expanded with id of the article.\r\n     * @method\r\n     * @param article The article identifier.\r\n     * @param data The subscribe information.\r\n     * @example articleSubscriptionsArticleRoute.subscribe({id: '<article-id>'});\r\n     **/\r\n    ArticleSubscriptionsArticleRoute.prototype.subscribe = function (article, data) {\r\n        var params = this.utility.extend(article, data);\r\n        return _super.prototype.baseCreate.call(this, this.subscribeRoute, params);\r\n    };\r\n    /**\r\n     * Parses article isSubscribed route which must be expanded with subscriber Id and the id of the article.\r\n     * @method\r\n     * @param article The article identifier.\r\n     * @param data The subscriber identifier.\r\n     * @example articleRoute.subscriptions.article.isSubscribed.expand({id: '<article-id>', subscriberId: '<subscriber-id>' });\r\n     **/\r\n    ArticleSubscriptionsArticleRoute.prototype.isSubscribed = function (article, data) {\r\n        var params = this.utility.extend(article, data);\r\n        return _super.prototype.baseCreate.call(this, this.isSubscribedRoute, params);\r\n    };\r\n    /**\r\n     * Parses article unSubscribe route which must be expanded with the id of the article.\r\n     * @method\r\n     * @param article The article identifier.\r\n     * @param data The unsubscribe information.\r\n     * @example articleSubscriptionsArticleRoute.unSubscribe({id: '<article-id>'});\r\n     **/\r\n    ArticleSubscriptionsArticleRoute.prototype.unSubscribe = function (article, data) {\r\n        var params = this.utility.extend(article, data);\r\n        return _super.prototype.baseCreate.call(this, this.unSubscribeRoute, params);\r\n    };\r\n    ArticleSubscriptionsArticleRoute.prototype.subscribeParams = function (article, data) {\r\n        return this.utility.extend(article, data);\r\n    };\r\n    return ArticleSubscriptionsArticleRoute;\r\n}(common_1.BaseRoute));\r\nArticleSubscriptionsArticleRoute = tslib_1.__decorate([\r\n    inversify_1.injectable(),\r\n    tslib_1.__param(0, inversify_1.inject(contracts_1.TYPES.IAppOptions)),\r\n    tslib_1.__metadata(\"design:paramtypes\", [typeof (_a = typeof contracts_1.IAppOptions !== \"undefined\" && contracts_1.IAppOptions) === \"function\" && _a || Object])\r\n], ArticleSubscriptionsArticleRoute);\r\nexports.ArticleSubscriptionsArticleRoute = ArticleSubscriptionsArticleRoute;\r\nvar _a;\r\n\n\n/***/ }),\n/* 149 */\n/***/ (function(module, exports, __webpack_require__) {\n\n\"use strict\";\n/* globals module */\r\n/**\r\n * @module articleSubscriptionsCommentReportedClient\r\n * @description  Article Subscriptions Comment Reported Client provides an easy way to consume  Articles REST API end-points. In order to obtain needed routes `articleSubscriptionsCommentReportedClient` uses `articleSubscriptionsCommentReportedRoute`.\r\n */\r\n\r\nObject.defineProperty(exports, \"__esModule\", { value: true });\r\nvar tslib_1 = __webpack_require__(1);\r\nvar inversify_1 = __webpack_require__(0);\r\n;\r\nvar httpApi_1 = __webpack_require__(4);\r\nvar _1 = __webpack_require__(6);\r\nvar ArticleSubscriptionsCommentReportedClient = (function () {\r\n    function ArticleSubscriptionsCommentReportedClient(articleSubscriptionsCommentReportedRoute, apiClient) {\r\n        this.articleSubscriptionsCommentReportedRoute = articleSubscriptionsCommentReportedRoute;\r\n        this.apiClient = apiClient;\r\n    }\r\n    Object.defineProperty(ArticleSubscriptionsCommentReportedClient.prototype, \"routeDefinition\", {\r\n        get: function () {\r\n            return this.articleSubscriptionsCommentReportedRoute;\r\n        },\r\n        enumerable: true,\r\n        configurable: true\r\n    });\r\n    /**\r\n     * Subscribes user to article comment reported updates. Returns a promise that is resolved once the subscribe action has been performed.\r\n     * @method\r\n     * @param data The subscribe information.\r\n     * @returns A promise that is resolved once the subscribe action has been performed.\r\n     * @example articleSubscriptionsCommentReportedClient.subscribe(data)\r\n                    .then(function (data) {\r\n                        // perform success action here\r\n                    },\r\n                     function (response, status, headers, config) {\r\n                         // perform error handling here\r\n                    });\r\n     **/\r\n    ArticleSubscriptionsCommentReportedClient.prototype.subscribe = function (data) {\r\n        return this.apiClient.post(this.articleSubscriptionsCommentReportedRoute.subscribe(data), data);\r\n    };\r\n    /**\r\n     * Determines whether user is subscribed to article comment reported updates. Returns a promise that is resolved once the isSubscribed action has been performed.\r\n     * @method\r\n     * @param data The subscribe information.\r\n     * @returns A promise that is resolved once the isSubscribed action has been performed.\r\n     * @example articleSubscriptionsCommentReportedClient.isSubscribed(data)\r\n                    .then(function (data) {\r\n                        // perform success action here\r\n                    },\r\n                     function (response, status, headers, config) {\r\n                         // perform error handling here\r\n                    });\r\n     **/\r\n    ArticleSubscriptionsCommentReportedClient.prototype.isSubscribed = function (data) {\r\n        return this.apiClient.get(this.routeDefinition.isSubscribed(data));\r\n    };\r\n    /**\r\n     * Unsubscribe user from article comment reported updates. Returns a promise that is commentReported once the unSubscribe action has been performed.\r\n     * @method\r\n     * @param data The unsubscribe information.\r\n     * @returns A promise that is commentReported once the unSubscribe action has been performed.\r\n     * @example articleSubscriptionsCommentReportedClient.isSubscribed(data)\r\n                    .then(function (data) {\r\n                        // perform success action here\r\n                    },\r\n                     function (response, status, headers, config) {\r\n                         // perform error handling here\r\n                    });\r\n     **/\r\n    ArticleSubscriptionsCommentReportedClient.prototype.unSubscribe = function (data) {\r\n        return this.apiClient.delete(this.articleSubscriptionsCommentReportedRoute.unSubscribe(data), undefined, data);\r\n    };\r\n    return ArticleSubscriptionsCommentReportedClient;\r\n}());\r\nArticleSubscriptionsCommentReportedClient = tslib_1.__decorate([\r\n    inversify_1.injectable(),\r\n    tslib_1.__param(0, inversify_1.inject(_1.TYPES.ArticleSubscriptionsCommentReportedRoute)),\r\n    tslib_1.__param(1, inversify_1.inject(httpApi_1.httpTYPES.ApiClient)),\r\n    tslib_1.__metadata(\"design:paramtypes\", [typeof (_a = typeof _1.ArticleSubscriptionsCommentReportedRoute !== \"undefined\" && _1.ArticleSubscriptionsCommentReportedRoute) === \"function\" && _a || Object, typeof (_b = typeof httpApi_1.ApiClient !== \"undefined\" && httpApi_1.ApiClient) === \"function\" && _b || Object])\r\n], ArticleSubscriptionsCommentReportedClient);\r\nexports.ArticleSubscriptionsCommentReportedClient = ArticleSubscriptionsCommentReportedClient;\r\nvar _a, _b;\r\n\n\n/***/ }),\n/* 150 */\n/***/ (function(module, exports, __webpack_require__) {\n\n\"use strict\";\n/* globals module */\r\n/**\r\n * @module articleSubscriptionsCommentReportedRoute\r\n * @description Baasic Article Subscriptions Comment Reported Route Definition provides Baasic route templates which can be expanded to Baasic REST URIs. Various services can use Baasic Article Subscriptions Comment Reported Route Definition to obtain needed routes while other routes will be obtained through HAL. By convention, all route services use the same function names as their corresponding services.\r\n*/\r\n\r\nObject.defineProperty(exports, \"__esModule\", { value: true });\r\nvar tslib_1 = __webpack_require__(1);\r\nvar inversify_1 = __webpack_require__(0);\r\nvar common_1 = __webpack_require__(2);\r\n;\r\nvar contracts_1 = __webpack_require__(3);\r\nvar ArticleSubscriptionsCommentReportedRoute = (function (_super) {\r\n    tslib_1.__extends(ArticleSubscriptionsCommentReportedRoute, _super);\r\n    function ArticleSubscriptionsCommentReportedRoute(appOptions) {\r\n        var _this = _super.call(this, appOptions) || this;\r\n        _this.appOptions = appOptions;\r\n        _this.subscribeRoute = 'articles/subscriptions/comment-reported';\r\n        _this.isSubscribedRoute = 'articles/subscriptions/comment-reported/{subscriberId}';\r\n        _this.unSubscribeRoute = 'articles/subscriptions/comment-reported';\r\n        return _this;\r\n    }\r\n    /**\r\n     * Parses commentReported subscribe route which doesn't support any additional options.\r\n     * @method\r\n     * @param data The subscribe information.\r\n     * @example articleSubscriptionsCommentReportedRoute.subscribe(data);\r\n     **/\r\n    ArticleSubscriptionsCommentReportedRoute.prototype.subscribe = function (data) {\r\n        return _super.prototype.baseCreate.call(this, this.subscribeRoute, data);\r\n    };\r\n    /**\r\n     * Parses commentReported isSubscribed route which must be expanded with subscriber Id.\r\n     * @method\r\n     * @param data The subscribe information.\r\n     * @example articleSubscriptionsCommentReportedRoute.isSubscribed({subscriberId: '<subscriber-id>'});\r\n     **/\r\n    ArticleSubscriptionsCommentReportedRoute.prototype.isSubscribed = function (data) {\r\n        return _super.prototype.baseCreate.call(this, this.isSubscribedRoute, data);\r\n    };\r\n    /**\r\n     * Parses commentReported unSubscribe route which doesn't support any additional options.\r\n     * @method\r\n     * @param data The unsubscribe information.\r\n     * @example articleSubscriptionsCommentReportedRoute.unSubscribe(data);\r\n     **/\r\n    ArticleSubscriptionsCommentReportedRoute.prototype.unSubscribe = function (data) {\r\n        return _super.prototype.baseCreate.call(this, this.unSubscribeRoute, data);\r\n    };\r\n    return ArticleSubscriptionsCommentReportedRoute;\r\n}(common_1.BaseRoute));\r\nArticleSubscriptionsCommentReportedRoute = tslib_1.__decorate([\r\n    inversify_1.injectable(),\r\n    tslib_1.__param(0, inversify_1.inject(contracts_1.TYPES.IAppOptions)),\r\n    tslib_1.__metadata(\"design:paramtypes\", [typeof (_a = typeof contracts_1.IAppOptions !== \"undefined\" && contracts_1.IAppOptions) === \"function\" && _a || Object])\r\n], ArticleSubscriptionsCommentReportedRoute);\r\nexports.ArticleSubscriptionsCommentReportedRoute = ArticleSubscriptionsCommentReportedRoute;\r\nvar _a;\r\n\n\n/***/ }),\n/* 151 */\n/***/ (function(module, exports, __webpack_require__) {\n\n\"use strict\";\n/* globals module */\r\n/**\r\n * @module articleSubscriptionsCommentRequiresModerationClient\r\n * @description  Article Subscriptions Comment Requires Moderation Client provides an easy way to consume  Articles REST API end-points. In order to obtain needed routes `articleSubscriptionsCommentRequiresModerationClient` uses `articleSubscriptionsCommentRequiresModerationRoute`.\r\n */\r\n\r\nObject.defineProperty(exports, \"__esModule\", { value: true });\r\nvar tslib_1 = __webpack_require__(1);\r\nvar inversify_1 = __webpack_require__(0);\r\n;\r\nvar httpApi_1 = __webpack_require__(4);\r\nvar _1 = __webpack_require__(6);\r\nvar ArticleSubscriptionsCommentRequiresModerationClient = (function () {\r\n    function ArticleSubscriptionsCommentRequiresModerationClient(articleSubscriptionsCommentRequiresModerationRoute, apiClient) {\r\n        this.articleSubscriptionsCommentRequiresModerationRoute = articleSubscriptionsCommentRequiresModerationRoute;\r\n        this.apiClient = apiClient;\r\n    }\r\n    Object.defineProperty(ArticleSubscriptionsCommentRequiresModerationClient.prototype, \"routeDefinition\", {\r\n        get: function () {\r\n            return this.articleSubscriptionsCommentRequiresModerationRoute;\r\n        },\r\n        enumerable: true,\r\n        configurable: true\r\n    });\r\n    /**\r\n     * Subscribes user to article comment requires moderation updates. Returns a promise that is resolved once the subscribe action has been performed.\r\n     * @method\r\n     * @param data The subscribe information.\r\n     * @returns A promise that is resolved once the subscribe action has been performed.\r\n     * @example articleCommentRequiresModerationClient.subscribe(data)\r\n                    .then(function (data) {\r\n                        // perform success action here\r\n                    },\r\n                     function (response, status, headers, config) {\r\n                         // perform error handling here\r\n                    });\r\n     **/\r\n    ArticleSubscriptionsCommentRequiresModerationClient.prototype.subscribe = function (data) {\r\n        return this.apiClient.post(this.articleSubscriptionsCommentRequiresModerationRoute.subscribe(data), data);\r\n    };\r\n    /**\r\n     * Determines whether user is subscribed to article comment requires moderation updates. Returns a promise that is resolved once the isSubscribed action has been performed.\r\n     * @method\r\n     * @param data The subscribe information.\r\n     * @returns A promise that is resolved once the isSubscribed action has been performed.\r\n     * @example articleCommentRequiresModerationClient.isSubscribed(data)\r\n                    .then(function (data) {\r\n                        // perform success action here\r\n                    },\r\n                     function (response, status, headers, config) {\r\n                         // perform error handling here\r\n                    });\r\n     **/\r\n    ArticleSubscriptionsCommentRequiresModerationClient.prototype.isSubscribed = function (data) {\r\n        return this.apiClient.get(this.routeDefinition.isSubscribed(data));\r\n    };\r\n    /**\r\n     * Unsubscribe user from article comment requires moderation updates. Returns a promise that is commentReported once the unSubscribe action has been performed.\r\n     * @method\r\n     * @param data The unsubscribe information.\r\n     * @returns A promise that is commentReported once the unSubscribe action has been performed.\r\n     * @example articleCommentRequiresModerationClient.unSubscribed(data)\r\n                    .then(function (data) {\r\n                        // perform success action here\r\n                    },\r\n                     function (response, status, headers, config) {\r\n                         // perform error handling here\r\n                    });\r\n     **/\r\n    ArticleSubscriptionsCommentRequiresModerationClient.prototype.unSubscribed = function (data) {\r\n        return this.apiClient.delete(this.routeDefinition.unSubscribe(data));\r\n    };\r\n    return ArticleSubscriptionsCommentRequiresModerationClient;\r\n}());\r\nArticleSubscriptionsCommentRequiresModerationClient = tslib_1.__decorate([\r\n    inversify_1.injectable(),\r\n    tslib_1.__param(0, inversify_1.inject(_1.TYPES.ArticleSubscriptionsCommentRequiresModerationRoute)),\r\n    tslib_1.__param(1, inversify_1.inject(httpApi_1.httpTYPES.ApiClient)),\r\n    tslib_1.__metadata(\"design:paramtypes\", [typeof (_a = typeof _1.ArticleSubscriptionsCommentRequiresModerationRoute !== \"undefined\" && _1.ArticleSubscriptionsCommentRequiresModerationRoute) === \"function\" && _a || Object, typeof (_b = typeof httpApi_1.ApiClient !== \"undefined\" && httpApi_1.ApiClient) === \"function\" && _b || Object])\r\n], ArticleSubscriptionsCommentRequiresModerationClient);\r\nexports.ArticleSubscriptionsCommentRequiresModerationClient = ArticleSubscriptionsCommentRequiresModerationClient;\r\nvar _a, _b;\r\n\n\n/***/ }),\n/* 152 */\n/***/ (function(module, exports, __webpack_require__) {\n\n\"use strict\";\n/* globals module */\r\n/**\r\n * @module articleSubscriptionsCommentRequiresModerationRoute\r\n * @description Baasic Article Subscriptions Comment Requires Moderation Route Definition provides Baasic route templates which can be expanded to Baasic REST URIs. Various services can use Baasic Article Subscriptions Comment Requires Moderation Route Definition to obtain needed routes while other routes will be obtained through HAL. By convention, all route services use the same function names as their corresponding services.\r\n*/\r\n\r\nObject.defineProperty(exports, \"__esModule\", { value: true });\r\nvar tslib_1 = __webpack_require__(1);\r\nvar inversify_1 = __webpack_require__(0);\r\nvar common_1 = __webpack_require__(2);\r\n;\r\nvar contracts_1 = __webpack_require__(3);\r\nvar ArticleSubscriptionsCommentRequiresModerationRoute = (function (_super) {\r\n    tslib_1.__extends(ArticleSubscriptionsCommentRequiresModerationRoute, _super);\r\n    function ArticleSubscriptionsCommentRequiresModerationRoute(appOptions) {\r\n        var _this = _super.call(this, appOptions) || this;\r\n        _this.appOptions = appOptions;\r\n        _this.subscribeRoute = 'articles/subscriptions/comment-requires-moderation';\r\n        _this.isSubscribedRoute = 'articles/subscriptions/comment-requires-moderation/{subscriberId}';\r\n        _this.unSubscribeRoute = 'articles/subscriptions/comment-requires-moderation';\r\n        return _this;\r\n    }\r\n    /**\r\n     * Parses commentRequiresModeration subscribe route which doesn't support any additional options.\r\n     * @method\r\n     * @param data The subscribe information.\r\n     * @example articleSubscriptionsCommentRequiresModerationRoute.subscribe(data);\r\n     **/\r\n    ArticleSubscriptionsCommentRequiresModerationRoute.prototype.subscribe = function (data) {\r\n        return _super.prototype.baseCreate.call(this, this.subscribeRoute, data);\r\n    };\r\n    /**\r\n     * Parses commentRequiresModeration isSubscribed route which must be expanded with subscriber Id.\r\n     * @method\r\n     * @param data The subscribe information.\r\n     * @example articleSubscriptionsCommentRequiresModerationRoute.isSubscribed({subscriberId: '<subscriber-id>'});\r\n     **/\r\n    ArticleSubscriptionsCommentRequiresModerationRoute.prototype.isSubscribed = function (data) {\r\n        return _super.prototype.baseCreate.call(this, this.isSubscribedRoute, data);\r\n    };\r\n    /**\r\n     * Parses commentRequiresModeration unSubscribe route which doesn't support any additional options.\r\n     * @method\r\n     * @param data The unsubscribe information.\r\n     * @example articleSubscriptionsCommentRequiresModerationRoute.unSubscribe(data)\r\n     **/\r\n    ArticleSubscriptionsCommentRequiresModerationRoute.prototype.unSubscribe = function (data) {\r\n        return _super.prototype.baseCreate.call(this, this.unSubscribeRoute, data);\r\n    };\r\n    return ArticleSubscriptionsCommentRequiresModerationRoute;\r\n}(common_1.BaseRoute));\r\nArticleSubscriptionsCommentRequiresModerationRoute = tslib_1.__decorate([\r\n    inversify_1.injectable(),\r\n    tslib_1.__param(0, inversify_1.inject(contracts_1.TYPES.IAppOptions)),\r\n    tslib_1.__metadata(\"design:paramtypes\", [typeof (_a = typeof contracts_1.IAppOptions !== \"undefined\" && contracts_1.IAppOptions) === \"function\" && _a || Object])\r\n], ArticleSubscriptionsCommentRequiresModerationRoute);\r\nexports.ArticleSubscriptionsCommentRequiresModerationRoute = ArticleSubscriptionsCommentRequiresModerationRoute;\r\nvar _a;\r\n\n\n/***/ }),\n/* 153 */\n/***/ (function(module, exports, __webpack_require__) {\n\n\"use strict\";\n\r\nfunction __export(m) {\r\n    for (var p in m) if (!exports.hasOwnProperty(p)) exports[p] = m[p];\r\n}\r\nObject.defineProperty(exports, \"__esModule\", { value: true });\r\n__export(__webpack_require__(148));\r\n__export(__webpack_require__(150));\r\n__export(__webpack_require__(152));\r\n__export(__webpack_require__(146));\r\n__export(__webpack_require__(147));\r\n__export(__webpack_require__(149));\r\n__export(__webpack_require__(151));\r\n__export(__webpack_require__(145));\r\n\n\n/***/ }),\n/* 154 */\n/***/ (function(module, exports, __webpack_require__) {\n\n\"use strict\";\n/* globals module */\r\n/**\r\n * @module baasicArticleTagsDefinition\r\n * @description  Article Tags Definition provides an easy way to consume  Article Tags REST API end-points. `articleTagsDefinition` functions enable performing standard CRUD operations directly on article tag resources, whereas the `articleClient` functions allow management between article and article tag. In order to obtain needed routes `articleTagsDefinition` uses `articleTagsRoute`.\r\n*/\r\n\r\nObject.defineProperty(exports, \"__esModule\", { value: true });\r\nvar tslib_1 = __webpack_require__(1);\r\nvar inversify_1 = __webpack_require__(0);\r\n;\r\nvar httpApi_1 = __webpack_require__(4);\r\nvar _1 = __webpack_require__(6);\r\nvar ArticleTagsClient = (function () {\r\n    function ArticleTagsClient(articleTagsRoute, articleTagsSubscriptionsClient, apiClient) {\r\n        this.articleTagsRoute = articleTagsRoute;\r\n        this.articleTagsSubscriptionsClient = articleTagsSubscriptionsClient;\r\n        this.apiClient = apiClient;\r\n    }\r\n    Object.defineProperty(ArticleTagsClient.prototype, \"routeDefinition\", {\r\n        get: function () {\r\n            return this.articleTagsRoute;\r\n        },\r\n        enumerable: true,\r\n        configurable: true\r\n    });\r\n    Object.defineProperty(ArticleTagsClient.prototype, \"subscriptions\", {\r\n        get: function () {\r\n            return this.articleTagsSubscriptionsClient;\r\n        },\r\n        enumerable: true,\r\n        configurable: true\r\n    });\r\n    /**\r\n     * Returns a promise that is resolved once the find action has been performed. Success response returns a list of article tag resources matching the given criteria.\r\n     * @method\r\n     * @param options Query resource options object.\r\n     * @returns A promise that is resolved once the find action has been performed.\r\n     * @example articleTagsClient.find({\r\n                    pageNumber : 1,\r\n                    pageSize : 10,\r\n                    orderBy : '<field>',\r\n                    orderDirection : '<asc|desc>',\r\n                    search : '<search-phrase>'\r\n                })\r\n                .then(function (collection) {\r\n                    // perform success action here\r\n                },\r\n                 function (response, status, headers, config) {\r\n                    // perform error handling here\r\n                });\r\n     **/\r\n    ArticleTagsClient.prototype.find = function (options) {\r\n        return this.apiClient.get(this.routeDefinition.find(options));\r\n    };\r\n    /**\r\n     * Returns a promise that is resolved once the get action has been performed. Success response returns the specified article tag resource.\r\n     * @method\r\n     * @param id Article tag id or slug that uniquely identifies article tag resource that needs to be retrieved.\r\n     * @param options Options object that contains embed data.\r\n     * @returns A promise that is resolved once the get action has been performed.\r\n     * @example articleTagsClient.get('<articleTag-id>')\r\n                   .then(function (data) {\r\n                       // perform success action here\r\n                   },\r\n                    function (response, status, headers, config) {\r\n                       // perform error handling here\r\n                   });\r\n    **/\r\n    ArticleTagsClient.prototype.get = function (id, options) {\r\n        return this.apiClient.get(this.articleTagsRoute.get(id, options));\r\n    };\r\n    /**\r\n     * Returns a promise that is resolved once the update article tag action has been performed; this action updates a tag. This route uses HAL enabled objects to obtain routes and therefore it doesn't apply `articleTagsRoute` route template. Here is an example of how a route can be obtained from HAL enabled objects:\r\n     * ```\r\n     * let params = modelMapper.removeParams(articleTag);\r\n     * let uri = params['model'].links('put').href;\r\n     * ```\r\n     * @method\r\n     * @param data An article tag object used to update specified article tag resource.\r\n     * @returns A promise that is resolved once the update article tag action has been performed.\r\n     * @example // articleTag is a resource previously fetched using get action.\r\n                    articleTag.tag = '<new-tag>';\r\n                    articleTagsClient.update(articleTag)\r\n                        .then(function (data) {\r\n                            // perform success action here\r\n                        },\r\n                         function (response, status, headers, config) {\r\n                            // perform error handling here\r\n                        });\r\n     **/\r\n    ArticleTagsClient.prototype.update = function (data) {\r\n        return this.apiClient.put(this.routeDefinition.update(data), this.routeDefinition.updateParams(data));\r\n    };\r\n    /**\r\n     * Returns a promise that is resolved once the remove article tag action has been performed. If the action is successfully completed, the article tag resource will be permanently removed from the system. This route uses HAL enabled objects to obtain routes and therefore it doesn't apply `articleTagsRoute` route template. Here is an example of how a route can be obtained from HAL enabled objects:\r\n     * ```\r\n     * let params = modelMapper.removeParams(articleTag);\r\n     * let uri = params['model'].links('delete').href;\r\n     * ```\r\n     * @method\r\n     * @param data An article tag object used to delete specified article tag resource.\r\n     * @returns A promise that is resolved once the remove article tag action has been performed.\r\n     * @example // articleTag is a resource previously fetched using get action.\r\n                    articleTagsClient.remove(articleTag)\r\n                        .then(function (data) {\r\n                            // perform success action here\r\n                        },\r\n                         function (response, status, headers, config) {\r\n                            // perform error handling here\r\n                        });\r\n     **/\r\n    ArticleTagsClient.prototype.remove = function (data) {\r\n        return this.apiClient.delete(this.routeDefinition.delete(data));\r\n    };\r\n    return ArticleTagsClient;\r\n}());\r\nArticleTagsClient = tslib_1.__decorate([\r\n    inversify_1.injectable(),\r\n    tslib_1.__param(0, inversify_1.inject(_1.TYPES.ArticleTagsRoute)),\r\n    tslib_1.__param(1, inversify_1.inject(_1.TYPES.ArticleTagsSubscriptionsClient)),\r\n    tslib_1.__param(2, inversify_1.inject(httpApi_1.httpTYPES.ApiClient)),\r\n    tslib_1.__metadata(\"design:paramtypes\", [typeof (_a = typeof _1.ArticleTagsRoute !== \"undefined\" && _1.ArticleTagsRoute) === \"function\" && _a || Object, typeof (_b = typeof _1.ArticleTagsSubscriptionsClient !== \"undefined\" && _1.ArticleTagsSubscriptionsClient) === \"function\" && _b || Object, typeof (_c = typeof httpApi_1.ApiClient !== \"undefined\" && httpApi_1.ApiClient) === \"function\" && _c || Object])\r\n], ArticleTagsClient);\r\nexports.ArticleTagsClient = ArticleTagsClient;\r\nvar _a, _b, _c;\r\n/**\r\n * @copyright (c) 2017 Mono Ltd\r\n * @license MIT\r\n * @author Mono Ltd\r\n * @overview\r\n ***Notes:**\r\n - Refer to the [Baasic REST API](http://dev.baasic.com/api/reference/home) for detailed information about available Baasic REST API end-points.\r\n - All end-point objects are transformed by the associated route service.\r\n*/ \r\n\n\n/***/ }),\n/* 155 */\n/***/ (function(module, exports, __webpack_require__) {\n\n\"use strict\";\n/* globals module */\r\n/**\r\n * @module articleTagsRoute\r\n * @description Baasic Article Tags Route Definition provides Baasic route templates which can be expanded to Baasic REST URIs. Various services can use Baasic Article Tags Route Service to obtain needed routes while other routes will be obtained through HAL. By convention, all route services  use the same function names as their corresponding services.\r\n*/\r\n\r\nObject.defineProperty(exports, \"__esModule\", { value: true });\r\nvar tslib_1 = __webpack_require__(1);\r\nvar inversify_1 = __webpack_require__(0);\r\nvar common_1 = __webpack_require__(2);\r\n;\r\nvar contracts_1 = __webpack_require__(3);\r\nvar _1 = __webpack_require__(6);\r\nvar ArticleTagsRoute = (function (_super) {\r\n    tslib_1.__extends(ArticleTagsRoute, _super);\r\n    function ArticleTagsRoute(articleTagsSubscriptionsRoute, appOptions) {\r\n        var _this = _super.call(this, appOptions) || this;\r\n        _this.articleTagsSubscriptionsRoute = articleTagsSubscriptionsRoute;\r\n        _this.appOptions = appOptions;\r\n        _this.findRoute = 'article-tags/{?searchQuery,page,rpp,sort,embed,fields}';\r\n        _this.getRoute = 'article-tags/{id}/{?embed,fields}';\r\n        _this.updateRoute = 'article-tags/{id}';\r\n        _this.deleteRoute = 'article-tags/{id}';\r\n        return _this;\r\n    }\r\n    Object.defineProperty(ArticleTagsRoute.prototype, \"subscriptions\", {\r\n        get: function () {\r\n            return this.articleTagsSubscriptionsRoute;\r\n        },\r\n        enumerable: true,\r\n        configurable: true\r\n    });\r\n    /**\r\n     * Parses find article tags route which can be expanded with additional options. Supported items are:\r\n     * - `searchQuery` - A string value used to identify article tags using the phrase search; multiple tag keywords must be comma separated.\r\n     * - `page` - A value used to set the page number, i.e. to retrieve certain article tag subset from the storage.\r\n     * - `rpp` - A value used to limit the size of result set per page.\r\n     * - `sort` - A string used to set the article tag property to sort the result collection by.\r\n     * - `embed` - Comma separated list of resources to be contained within the current representation.\r\n     * @method\r\n     * @param options Query resource options object.\r\n     * @example articleTagsRoute.find().expand({searchQuery: '<search-phrase>'});\r\n     **/\r\n    ArticleTagsRoute.prototype.find = function (options) {\r\n        return _super.prototype.baseFind.call(this, this.findRoute, options);\r\n    };\r\n    /**\r\n     * Parses get article tag route which must be expanded with the Id of the previously created article tag resource in the system. Additional expand supported items are:\r\n     * - `embed` - Comma separated list of resources to be contained within the current representation.\r\n     * @method\r\n     * @param id Article tag id or slug that uniquely identifies article tag resource that needs to be retrieved.\r\n     * @param options Options object that contains embed data.\r\n     * @example articleTagsRoute.get({id: '<articleTag-id>'});\r\n     **/\r\n    ArticleTagsRoute.prototype.get = function (id, options) {\r\n        return _super.prototype.baseGet.call(this, this.getRoute, id, options);\r\n    };\r\n    /**\r\n     * Parses get article tag route which must be expanded with the Id of the previously created article tag resource in the system. Additional expand supported items are:\r\n     * - `embed` - Comma separated list of resources to be contained within the current representation.\r\n     * @method\r\n     * @param data An article tag object used to update specified article tag resource.\r\n     * @example articleTagsRoute.update({id: '<articleTag-id>'});\r\n     **/\r\n    ArticleTagsRoute.prototype.update = function (data) {\r\n        return _super.prototype.baseUpdate.call(this, this.updateRoute, data);\r\n    };\r\n    /**\r\n     * Parses get article tag route which must be expanded with the Id of the previously created article tag resource in the system. Additional expand supported items are:\r\n     * - `embed` - Comma separated list of resources to be contained within the current representation.\r\n     * @method\r\n     * @param data An article tag object used to delete specified article tag resource.\r\n     * @example articleTagsRoute.delete({id: '<articleTag-id>'});\r\n     **/\r\n    ArticleTagsRoute.prototype.delete = function (data) {\r\n        return _super.prototype.baseDelete.call(this, this.deleteRoute, data);\r\n    };\r\n    return ArticleTagsRoute;\r\n}(common_1.BaseRoute));\r\nArticleTagsRoute = tslib_1.__decorate([\r\n    inversify_1.injectable(),\r\n    tslib_1.__param(0, inversify_1.inject(_1.TYPES.ArticleTagsSubscriptionsRoute)),\r\n    tslib_1.__param(1, inversify_1.inject(contracts_1.TYPES.IAppOptions)),\r\n    tslib_1.__metadata(\"design:paramtypes\", [typeof (_a = typeof _1.ArticleTagsSubscriptionsRoute !== \"undefined\" && _1.ArticleTagsSubscriptionsRoute) === \"function\" && _a || Object, typeof (_b = typeof contracts_1.IAppOptions !== \"undefined\" && contracts_1.IAppOptions) === \"function\" && _b || Object])\r\n], ArticleTagsRoute);\r\nexports.ArticleTagsRoute = ArticleTagsRoute;\r\nvar _a, _b;\r\n/**\r\n * @copyright (c) 2017 Mono Ltd\r\n * @license MIT\r\n * @author Mono Ltd\r\n * @overview\r\n ***Notes:**\r\n - Refer to the [Baasic REST API](http://dev.baasic.com/api/reference/home) for detailed information about available Baasic REST API end-points.  - [URI Template](https://github.com/Baasic/uritemplate-js) syntax enables expanding the Baasic route templates to Baasic REST URIs providing it with an object that contains URI parameters.\r\n- All end-point objects are transformed by the associated route service.\r\n*/ \r\n\n\n/***/ }),\n/* 156 */\n/***/ (function(module, exports, __webpack_require__) {\n\n\"use strict\";\n/* globals module */\r\n/**\r\n * @module baasicArticleTagsSubscriptionsDefinition\r\n * @description  Article Tags Subscriptions Definition provides an easy way to consume  Article Tags REST API end-points. `articleTagsDefinition` functions enable performing standard CRUD operations directly on article tag resources, whereas the `articleClient` functions allow management between article and article tag. In order to obtain needed routes `articleTagsDefinition` uses `articleTagsRoute`.\r\n*/\r\n\r\nObject.defineProperty(exports, \"__esModule\", { value: true });\r\nvar tslib_1 = __webpack_require__(1);\r\nvar inversify_1 = __webpack_require__(0);\r\nvar httpApi_1 = __webpack_require__(4);\r\nvar _1 = __webpack_require__(6);\r\nvar ArticleTagsSubscriptionsClient = (function () {\r\n    function ArticleTagsSubscriptionsClient(articleTagsSubscriptionsRoute, apiClient) {\r\n        this.articleTagsSubscriptionsRoute = articleTagsSubscriptionsRoute;\r\n        this.apiClient = apiClient;\r\n    }\r\n    Object.defineProperty(ArticleTagsSubscriptionsClient.prototype, \"routeDefinition\", {\r\n        get: function () {\r\n            return this.articleTagsSubscriptionsRoute;\r\n        },\r\n        enumerable: true,\r\n        configurable: true\r\n    });\r\n    /**\r\n     * Returns a promise that is resolved once the subscribe action has been performed. This action subscribes an user to the specified tag.\r\n     * @method\r\n     * @param tag article tag object.\r\n     * @param data The subscribe information.\r\n     * @returns A promise that is resolved once the subscribe action has been performed.\r\n     * @example articleTagsSubscriptionsClient.subscribe(tag, user)\r\n                    .then(function (data) {\r\n                        // perform success action here\r\n                    },\r\n                     function (response, status, headers, config) {\r\n                        // perform error handling here\r\n                    });\r\n     **/\r\n    ArticleTagsSubscriptionsClient.prototype.subscribe = function (tag, data) {\r\n        return this.apiClient.post(this.routeDefinition.subscribe(tag, data), this.routeDefinition.subscribeParams(tag, data));\r\n    };\r\n    /**\r\n     * Returns a promise that is resolved once the isSubscribed action has been performed. This action checks if a user is subscribed to the specified tag.\r\n     * @method\r\n     * @param tag Article tag object.\r\n     * @param data The subscriber identifier.\r\n     * @returns A promise that is resolved once the isSubscribed action has been performed.\r\n     * @example articleTagsSubscriptionsClient.isSubscribed(tag, user)\r\n                    .then(function (data) {\r\n                        // perform success action here\r\n                    },\r\n                     function (response, status, headers, config) {\r\n                        // perform error handling here\r\n                    });\r\n     **/\r\n    ArticleTagsSubscriptionsClient.prototype.isSubscribed = function (tag, data) {\r\n        return this.apiClient.get(this.articleTagsSubscriptionsRoute.isSubscribed(tag, data));\r\n    };\r\n    /**\r\n     * Returns a promise that is resolved once the unSubscribe action has been performed. This action unsubscribes a user from the specified tag.\r\n     * @method\r\n     * @param tag Article tag object.\r\n     * @param data The unsubscribe information.\r\n     * @returns A promise that is resolved once the unSubscribe action has been performed.\r\n     * @example articleTagsSubscriptionsClient.unSubscribe(tag, user)\r\n                   .then(function (data) {\r\n                       // perform success action here\r\n                   },\r\n                    function (response, status, headers, config) {\r\n                       // perform error handling here\r\n                   });\r\n    **/\r\n    ArticleTagsSubscriptionsClient.prototype.unSubscribe = function (tag, data) {\r\n        return this.apiClient.delete(this.routeDefinition.unSubscribe(tag, data), this.routeDefinition.subscribeParams(tag, data));\r\n    };\r\n    return ArticleTagsSubscriptionsClient;\r\n}());\r\nArticleTagsSubscriptionsClient = tslib_1.__decorate([\r\n    inversify_1.injectable(),\r\n    tslib_1.__param(0, inversify_1.inject(_1.TYPES.ArticleTagsSubscriptionsRoute)),\r\n    tslib_1.__param(1, inversify_1.inject(httpApi_1.httpTYPES.ApiClient)),\r\n    tslib_1.__metadata(\"design:paramtypes\", [typeof (_a = typeof _1.ArticleTagsSubscriptionsRoute !== \"undefined\" && _1.ArticleTagsSubscriptionsRoute) === \"function\" && _a || Object, typeof (_b = typeof httpApi_1.ApiClient !== \"undefined\" && httpApi_1.ApiClient) === \"function\" && _b || Object])\r\n], ArticleTagsSubscriptionsClient);\r\nexports.ArticleTagsSubscriptionsClient = ArticleTagsSubscriptionsClient;\r\nvar _a, _b;\r\n/**\r\n * @copyright (c) 2017 Mono Ltd\r\n * @license MIT\r\n * @author Mono Ltd\r\n * @overview\r\n ***Notes:**\r\n - Refer to the [Baasic REST API](http://dev.baasic.com/api/reference/home) for detailed information about available Baasic REST API end-points.\r\n - All end-point objects are transformed by the associated route service.\r\n*/\r\n\n\n/***/ }),\n/* 157 */\n/***/ (function(module, exports, __webpack_require__) {\n\n\"use strict\";\n/* globals module */\r\n/**\r\n * @module articleTagsSubscriptionsRoute\r\n * @description Baasic Article Tags Subscriptions Route Definition provides Baasic route templates which can be expanded to Baasic REST URIs. Various services can use Baasic Article Tags Route Service to obtain needed routes while other routes will be obtained through HAL. By convention, all route services  use the same function names as their corresponding services.\r\n*/\r\n\r\nObject.defineProperty(exports, \"__esModule\", { value: true });\r\nvar tslib_1 = __webpack_require__(1);\r\nvar inversify_1 = __webpack_require__(0);\r\nvar common_1 = __webpack_require__(2);\r\n;\r\nvar contracts_1 = __webpack_require__(3);\r\nvar ArticleTagsSubscriptionsRoute = (function (_super) {\r\n    tslib_1.__extends(ArticleTagsSubscriptionsRoute, _super);\r\n    function ArticleTagsSubscriptionsRoute(appOptions) {\r\n        var _this = _super.call(this, appOptions) || this;\r\n        _this.appOptions = appOptions;\r\n        _this.subscribeRoute = 'article-tags/{id}/subscriptions';\r\n        _this.isSubscribedRoute = 'article-tags/{id}/subscriptions/{subscriberId}';\r\n        _this.unSubscribeRoute = 'article-tags/{id}/subscriptions';\r\n        return _this;\r\n    }\r\n    /**\r\n     * Parses subscribe route which must be expanded with id of the tag.\r\n     * @method\r\n     * @param tag article tag object.\r\n     * @param data The subscribe information.\r\n     * @example articleTagsSubscriptionsRoute.subscribe( {id: '<tag-id>'} );\r\n     **/\r\n    ArticleTagsSubscriptionsRoute.prototype.subscribe = function (tag, data) {\r\n        var params = this.utility.extend(tag, data);\r\n        return _super.prototype.baseCreate.call(this, this.subscribeRoute, params);\r\n    };\r\n    /**\r\n     * Parses isSubscribed route which must be expanded with subscriber id and the id of the tag.\r\n     * @method\r\n     * @param tag Article tag object.\r\n     * @param data The subscriber identifier.\r\n     * @example articleSubscriptionsRoute.isSubscribed({ id: '<tag-id>', subscriberId: '<subscriber-id>' });\r\n     **/\r\n    ArticleTagsSubscriptionsRoute.prototype.isSubscribed = function (tag, data) {\r\n        var params = this.utility.extend(tag, data);\r\n        return _super.prototype.baseCreate.call(this, this.isSubscribedRoute, params);\r\n    };\r\n    /**\r\n     * Parses unSubscribe route which must be expanded with the id of the article.\r\n     * @method\r\n     * @param tag Article tag object.\r\n     * @param data The unsubscribe information.\r\n     * @example articleUnSubscribeRoute.unSubscribe({id: '<tag-id>'});\r\n     **/\r\n    ArticleTagsSubscriptionsRoute.prototype.unSubscribe = function (tag, data) {\r\n        var params = this.utility.extend(tag, data);\r\n        return _super.prototype.baseCreate.call(this, this.unSubscribeRoute, params);\r\n    };\r\n    ArticleTagsSubscriptionsRoute.prototype.subscribeParams = function (tag, data) {\r\n        return this.utility.extend(tag, data);\r\n    };\r\n    return ArticleTagsSubscriptionsRoute;\r\n}(common_1.BaseRoute));\r\nArticleTagsSubscriptionsRoute = tslib_1.__decorate([\r\n    inversify_1.injectable(),\r\n    tslib_1.__param(0, inversify_1.inject(contracts_1.TYPES.IAppOptions)),\r\n    tslib_1.__metadata(\"design:paramtypes\", [typeof (_a = typeof contracts_1.IAppOptions !== \"undefined\" && contracts_1.IAppOptions) === \"function\" && _a || Object])\r\n], ArticleTagsSubscriptionsRoute);\r\nexports.ArticleTagsSubscriptionsRoute = ArticleTagsSubscriptionsRoute;\r\nvar _a;\r\n/**\r\n * @copyright (c) 2017 Mono Ltd\r\n * @license MIT\r\n * @author Mono Ltd\r\n * @overview\r\n ***Notes:**\r\n - Refer to the [Baasic REST API](http://dev.baasic.com/api/reference/home) for detailed information about available Baasic REST API end-points.  - [URI Template](https://github.com/Baasic/uritemplate-js) syntax enables expanding the Baasic route templates to Baasic REST URIs providing it with an object that contains URI parameters.\r\n- All end-point objects are transformed by the associated route service.\r\n*/ \r\n\n\n/***/ }),\n/* 158 */\n/***/ (function(module, exports, __webpack_require__) {\n\n\"use strict\";\n/* globals module */\r\n/**\r\n * @module baasicArticleInstanceTagsDefinition\r\n * @description  Article Instance Tags Definition provides an easy way to consume  Article Tags REST API end-points. `articleInstanceTagsRouteClient` functions enable performing standard CRUD operations directly on article tag resources, whereas the `articleClient` functions allow management between article and article tag. In order to obtain needed routes `articleInstanceTagsClient` uses `articleInstanceTagsRoute`.\r\n*/\r\n\r\nObject.defineProperty(exports, \"__esModule\", { value: true });\r\nvar tslib_1 = __webpack_require__(1);\r\nvar inversify_1 = __webpack_require__(0);\r\n;\r\nvar httpApi_1 = __webpack_require__(4);\r\nvar _1 = __webpack_require__(6);\r\nvar ArticleInstanceTagsClient = (function () {\r\n    function ArticleInstanceTagsClient(articleInstanceTagsRoute, apiClient) {\r\n        this.articleInstanceTagsRoute = articleInstanceTagsRoute;\r\n        this.apiClient = apiClient;\r\n    }\r\n    Object.defineProperty(ArticleInstanceTagsClient.prototype, \"routeDefinition\", {\r\n        get: function () {\r\n            return this.articleInstanceTagsRoute;\r\n        },\r\n        enumerable: true,\r\n        configurable: true\r\n    });\r\n    /**\r\n     * Returns a promise that is resolved once the find action has been performed. Success response returns a list of article tag resources matching the given criteria.\r\n     * @method\r\n     * @param articleId Article slug or id which uniquely identifies article whose tag resources need to be retrieved.\r\n     * @param options Query resource options object.\r\n     * @returns A promise that is resolved once the find action has been performed.\r\n     * @example articleInstanceTagsClient.find({\r\n                    pageNumber : 1,\r\n                    pageSize : 10,\r\n                    orderBy : '<field>',\r\n                    orderDirection : '<asc|desc>',\r\n                    search : '<search-phrase>'\r\n                })\r\n                .then(function (collection) {\r\n                    // perform success action here\r\n                },\r\n                 function (response, status, headers, config) {\r\n                    // perform error handling here\r\n                });\r\n     **/\r\n    ArticleInstanceTagsClient.prototype.find = function (articleId, options) {\r\n        return this.apiClient.get(this.articleInstanceTagsRoute.find(articleId, options));\r\n    };\r\n    /**\r\n     * Returns a promise that is resolved once the get action has been performed. Success response returns the specified article tag resource.\r\n     * @method\r\n     * @param articleId Article slug or id which uniquely identifies article whose tag resource needs to be retrieved.\r\n     * @param id A slug or id which uniquely identifies article tag resource that needs to be retrieved.\r\n     * @param options Options object that contains embed data.\r\n     * @returns A promise that is resolved once the get action has been performed.\r\n     * @example articleInstanceTagsClient.get('<articleTag-id>')\r\n                   .then(function (data) {\r\n                       // perform success action here\r\n                   },\r\n                    function (response, status, headers, config) {\r\n                       // perform error handling here\r\n                   });\r\n    **/\r\n    ArticleInstanceTagsClient.prototype.get = function (articleId, id, options) {\r\n        return this.apiClient.get(this.articleInstanceTagsRoute.get(articleId, id, options));\r\n    };\r\n    /**\r\n     * Returns a promise that is resolved once the create article tag action has been performed; this action creates a new tag for an article.\r\n     * @method\r\n     * @param data An article tag value that needs to be inserted as new article tag resource into the system.\r\n     * @returns A promise that is resolved once the create article tag action has been performed.\r\n     * @example articleInstanceTagsClient.create({\r\n                    articleId : '<article-id>',\r\n                    tag : {\r\n                        slug : '<slug>',\r\n                        sortOrder : 1,\r\n                        tag : '<tag>'\r\n                    }\r\n                })\r\n                .then(function (data) {\r\n                    // perform success action here\r\n                },\r\n                 function (response, status, headers, config) {\r\n                     // perform error handling here\r\n                });\r\n     **/\r\n    ArticleInstanceTagsClient.prototype.create = function (data) {\r\n        return this.apiClient.post(this.routeDefinition.create(data), this.routeDefinition.createParams(data));\r\n    };\r\n    /**\r\n     * Returns a promise that is resolved once the remove article tag action has been performed. If the action is successfully completed, the article tag resource will be permanently removed from the system. This route uses HAL enabled objects to obtain routes and therefore it doesn't apply `articleTagsRoute` route template. Here is an example of how a route can be obtained from HAL enabled objects:\r\n     * ```\r\n     * let params = modelMapper.removeParams(articleTag);\r\n     * let uri = params['model'].links('delete').href;\r\n     * ```\r\n     * @method\r\n     * @param data Article Tag object that needs to be removed from the system.\r\n     * @returns A promise that is resolved once the remove article tag action has been performed.\r\n     * @example // articleTag is a resource previously fetched using get action.\r\n                    articleInstanceTagsClient.remove(articleTag)\r\n                        .then(function (data) {\r\n                            // perform success action here\r\n                        },\r\n                         function (response, status, headers, config) {\r\n                            // perform error handling here\r\n                        });\r\n     **/\r\n    ArticleInstanceTagsClient.prototype.remove = function (data) {\r\n        return this.apiClient.delete(this.routeDefinition.delete(data));\r\n    };\r\n    /**\r\n     * Returns a promise that is resolved once the removeAll article tag action has been performed. This action will remove all tags from an article if successfully completed. This route uses HAL enabled objects to obtain routes and therefore it doesn't apply `baasicArticleRouteService` route template. Here is an example of how a route can be obtained from HAL enabled objects:\r\n     * ```\r\n     * let params = modelMapper.removeParams(article);\r\n     * let uri = params['model'].links('delete-tags-by-article').href;\r\n     * ```\r\n     * @method\r\n     * @param data Article object whoose tags needs to be removed from the system.\r\n     * @returns A promise that is resolved once the removeAll article tag action has been performed.\r\n     * @example // article is a resource previously fetched using get action.\r\n                    articleInstanceTagsClient.removeAll(article)\r\n                        .then(function (data) {\r\n                            // perform success action here\r\n                        },\r\n                         function (response, status, headers, config) {\r\n                             // perform error handling here\r\n                        });\r\n     **/\r\n    ArticleInstanceTagsClient.prototype.removeAll = function (data) {\r\n        return this.apiClient.delete(this.routeDefinition.deleteAll(data));\r\n    };\r\n    return ArticleInstanceTagsClient;\r\n}());\r\nArticleInstanceTagsClient = tslib_1.__decorate([\r\n    inversify_1.injectable(),\r\n    tslib_1.__param(0, inversify_1.inject(_1.TYPES.ArticleInstanceTagsRoute)),\r\n    tslib_1.__param(1, inversify_1.inject(httpApi_1.httpTYPES.ApiClient)),\r\n    tslib_1.__metadata(\"design:paramtypes\", [typeof (_a = typeof _1.ArticleInstanceTagsRoute !== \"undefined\" && _1.ArticleInstanceTagsRoute) === \"function\" && _a || Object, typeof (_b = typeof httpApi_1.ApiClient !== \"undefined\" && httpApi_1.ApiClient) === \"function\" && _b || Object])\r\n], ArticleInstanceTagsClient);\r\nexports.ArticleInstanceTagsClient = ArticleInstanceTagsClient;\r\nvar _a, _b;\r\n/**\r\n * @copyright (c) 2017 Mono Ltd\r\n * @license MIT\r\n * @author Mono Ltd\r\n * @overview\r\n ***Notes:**\r\n - Refer to the [Baasic REST API](http://dev.baasic.com/api/reference/home) for detailed information about available Baasic REST API end-points.\r\n - All end-point objects are transformed by the associated route service.\r\n*/ \r\n\n\n/***/ }),\n/* 159 */\n/***/ (function(module, exports, __webpack_require__) {\n\n\"use strict\";\n/* globals module */\r\n/**\r\n * @module articleInstanceTagsRoute\r\n * @description Baasic Article Instance Tags Route Definition provides Baasic route templates which can be expanded to Baasic REST URIs. Various services can use Baasic Article Instance Tags Route Service to obtain needed routes while other routes will be obtained through HAL. By convention, all route services  use the same function names as their corresponding services.\r\n*/\r\n\r\nObject.defineProperty(exports, \"__esModule\", { value: true });\r\nvar tslib_1 = __webpack_require__(1);\r\nvar inversify_1 = __webpack_require__(0);\r\nvar common_1 = __webpack_require__(2);\r\n;\r\nvar contracts_1 = __webpack_require__(3);\r\nvar ArticleInstanceTagsRoute = (function (_super) {\r\n    tslib_1.__extends(ArticleInstanceTagsRoute, _super);\r\n    function ArticleInstanceTagsRoute(appOptions) {\r\n        var _this = _super.call(this, appOptions) || this;\r\n        _this.appOptions = appOptions;\r\n        _this.findRoute = 'articles/{articleId}/tags/{?searchQuery,page,rpp,sort,embed,fields}';\r\n        _this.getRoute = 'articles/{articleId}/tags/{tag}/{?embed,fields}';\r\n        _this.createRoute = 'articles/{articleId}/tags/{tag}/';\r\n        _this.deleteRoute = 'articles/{articleId}/tags/{id}';\r\n        _this.deleteAllRoute = 'articles/{articleId}/tags';\r\n        return _this;\r\n    }\r\n    /**\r\n     * Parses find article tags route which can be expanded with additional options. Supported items are:\r\n     * - `searchQuery` - A string value used to identify article tags using the phrase search; multiple tag keywords must be comma separated.\r\n     * - `page` - A value used to set the page number, i.e. to retrieve certain article tag subset from the storage.\r\n     * - `rpp` - A value used to limit the size of result set per page.\r\n     * - `sort` - A string used to set the article tag property to sort the result collection by.\r\n     * - `embed` - Comma separated list of resources to be contained within the current representation.\r\n     * @method\r\n     * @param articleId Article slug or id which uniquely identifies article whose tag resources need to be retrieved.\r\n     * @param options Query resource options object.\r\n     * @example articleInstanceTagsRoute.find().expand({searchQuery: '<search-phrase>'});\r\n     **/\r\n    ArticleInstanceTagsRoute.prototype.find = function (articleId, options) {\r\n        var params = this.utility.extend({}, options);\r\n        params.articleId = articleId;\r\n        return _super.prototype.baseFind.call(this, this.findRoute, params);\r\n    };\r\n    /**\r\n     * Parses get article tag route which must be expanded with the Id of the previously created article tag resource in the system. Additional expand supported items are:\r\n     * - `embed` - Comma separated list of resources to be contained within the current representation.\r\n     * @method\r\n     * @param articleId Article slug or id which uniquely identifies article whose tag resource needs to be retrieved.\r\n     * @param id A slug or id which uniquely identifies article tag resource that needs to be retrieved.\r\n     * @param options Options object that contains embed data.\r\n     * @example articleInstanceTagsRoute.get({id: '<articleTag-id>'});\r\n     **/\r\n    ArticleInstanceTagsRoute.prototype.get = function (articleId, id, options) {\r\n        var params = this.utility.extend({}, options);\r\n        params.articleId = articleId;\r\n        return _super.prototype.baseGet.call(this, this.getRoute, id, params);\r\n    };\r\n    /**\r\n     * Parses create article tag route which must be expanded with the Id of the previously created article tag resource in the system. Additional expand supported items are:\r\n     * - `embed` - Comma separated list of resources to be contained within the current representation.\r\n     * @method\r\n     * @param data An article tag value that needs to be inserted as new article tag resource into the system.\r\n     * @example articleInstanceTagsRoute.create({id: '<articleTag-id>'});\r\n     **/\r\n    ArticleInstanceTagsRoute.prototype.create = function (data) {\r\n        return _super.prototype.baseCreate.call(this, this.createRoute, data);\r\n    };\r\n    /**\r\n     * Parses get article tag route which must be expanded with the Id of the previously created article tag resource in the system. Additional expand supported items are:\r\n     * - `embed` - Comma separated list of resources to be contained within the current representation.\r\n     * @method\r\n     * @param data Article Tag object that needs to be removed from the system.\r\n     * @example articleInstanceTagsRoute.delete({id: '<articleTag-id>'});\r\n     **/\r\n    ArticleInstanceTagsRoute.prototype.delete = function (data) {\r\n        return _super.prototype.baseDelete.call(this, this.deleteRoute, data);\r\n    };\r\n    /**\r\n     * Parses get article tag route which must be expanded with the Id of the previously created article tag resource in the system. Additional expand supported items are:\r\n     * - `embed` - Comma separated list of resources to be contained within the current representation.\r\n     * @method\r\n     * @param data Article object whoose tags needs to be removed from the system.\r\n     * @example articleInstanceTagsRoute.deleteAll({id: '<articleTag-id>'});\r\n     **/\r\n    ArticleInstanceTagsRoute.prototype.deleteAll = function (data) {\r\n        return _super.prototype.baseDelete.call(this, this.deleteAllRoute, data, undefined, 'delete-tags-by-article');\r\n    };\r\n    return ArticleInstanceTagsRoute;\r\n}(common_1.BaseRoute));\r\nArticleInstanceTagsRoute = tslib_1.__decorate([\r\n    inversify_1.injectable(),\r\n    tslib_1.__param(0, inversify_1.inject(contracts_1.TYPES.IAppOptions)),\r\n    tslib_1.__metadata(\"design:paramtypes\", [typeof (_a = typeof contracts_1.IAppOptions !== \"undefined\" && contracts_1.IAppOptions) === \"function\" && _a || Object])\r\n], ArticleInstanceTagsRoute);\r\nexports.ArticleInstanceTagsRoute = ArticleInstanceTagsRoute;\r\nvar _a;\r\n/**\r\n * @copyright (c) 2017 Mono Ltd\r\n * @license MIT\r\n * @author Mono Ltd\r\n * @overview\r\n ***Notes:**\r\n - Refer to the [Baasic REST API](http://dev.baasic.com/api/reference/home) for detailed information about available Baasic REST API end-points.  - [URI Template](https://github.com/Baasic/uritemplate-js) syntax enables expanding the Baasic route templates to Baasic REST URIs providing it with an object that contains URI parameters.\r\n- All end-point objects are transformed by the associated route service.\r\n*/ \r\n\n\n/***/ }),\n/* 160 */\n/***/ (function(module, exports, __webpack_require__) {\n\n\"use strict\";\n\r\nfunction __export(m) {\r\n    for (var p in m) if (!exports.hasOwnProperty(p)) exports[p] = m[p];\r\n}\r\nObject.defineProperty(exports, \"__esModule\", { value: true });\r\n__export(__webpack_require__(159));\r\n__export(__webpack_require__(158));\r\n\n\n/***/ }),\n/* 161 */\n/***/ (function(module, exports, __webpack_require__) {\n\n\"use strict\";\n\r\nObject.defineProperty(exports, \"__esModule\", { value: true });\r\nvar common_1 = __webpack_require__(2);\r\nvar _1 = __webpack_require__(6);\r\nvar BaasicArticleUtility = (function () {\r\n    function BaasicArticleUtility() {\r\n        this.utility = new common_1.Utility();\r\n    }\r\n    BaasicArticleUtility.prototype.replaceDiacritics = function (str) {\r\n        for (var letter in _1.ALPHABET) {\r\n            str = str.replace(_1.ALPHABET[letter], letter);\r\n        }\r\n        return str;\r\n    };\r\n    BaasicArticleUtility.prototype.toSlug = function (str) {\r\n        if (this.utility.isUndefined(str) || str === null || str === '') {\r\n            return str;\r\n        }\r\n        str = this.replaceDiacritics(str);\r\n        str = str.toLowerCase();\r\n        str = str.replace(/[^a-z0-9]+/g, '-');\r\n        str = str.replace(/^-|-$/g, '');\r\n        return str;\r\n    };\r\n    BaasicArticleUtility.prototype.updateSlug = function (resource) {\r\n        var newSlug = this.toSlug(resource.slug);\r\n        if (this.utility.isUndefined(newSlug) || newSlug === null || newSlug === '') {\r\n            newSlug = this.toSlug(resource.title);\r\n        }\r\n        if (!this.utility.isUndefined(newSlug) || newSlug !== null || newSlug !== '') {\r\n            if (resource.slug !== newSlug) {\r\n                resource.slug = newSlug;\r\n            }\r\n        }\r\n    };\r\n    return BaasicArticleUtility;\r\n}());\r\nexports.BaasicArticleUtility = BaasicArticleUtility;\r\n\n\n/***/ }),\n/* 162 */\n/***/ (function(module, exports, __webpack_require__) {\n\n\"use strict\";\n\r\nObject.defineProperty(exports, \"__esModule\", { value: true });\r\nvar ArticleStatus = {\r\n    none: 0,\r\n    published: 2,\r\n    draft: 1,\r\n    archive: 4\r\n};\r\nexports.ArticleStatus = ArticleStatus;\r\nvar CommentStatus = {\r\n    approved: 1,\r\n    spam: 2,\r\n    reported: 4,\r\n    flagged: 8,\r\n    unapproved: 16\r\n};\r\nexports.CommentStatus = CommentStatus;\r\n\n\n/***/ }),\n/* 163 */\n/***/ (function(module, exports, __webpack_require__) {\n\n\"use strict\";\n\r\nObject.defineProperty(exports, \"__esModule\", { value: true });\r\nvar inversify_1 = __webpack_require__(0);\r\nvar _1 = __webpack_require__(6);\r\nvar TYPES = {\r\n    ArticleCommentRepliesClient: Symbol(\"ArticleCommentRepliesClient\"),\r\n    ArticleCommentRepliesRoute: Symbol(\"ArticleCommentRepliesRoute\"),\r\n    ArticleCommentsClient: Symbol(\"ArticleCommentsClient\"),\r\n    ArticleCommentsRoute: Symbol(\"ArticleCommentsRoute\"),\r\n    ArticleFilesClient: Symbol(\"ArticleFilesClient\"),\r\n    ArticleFilesRoute: Symbol(\"ArticleFilesRoute\"),\r\n    ArticleFilesBatchClient: Symbol(\"ArticleFilesBatchClient\"),\r\n    ArticleFilesBatchRoute: Symbol(\"ArticleFilesBatchRoute\"),\r\n    ArticleFilesStreamsClient: Symbol(\"ArticleFilesStreamsClient\"),\r\n    ArticleFilesStreamsRoute: Symbol(\"ArticleFilesStreamsRoute\"),\r\n    ArticleRatingsClient: Symbol(\"ArticleRatingsClient\"),\r\n    ArticleRatingsRoute: Symbol(\"ArticleRatingsRoute\"),\r\n    ArticleClient: Symbol(\"ArticleClient\"),\r\n    ArticleRoute: Symbol(\"ArticleRoute\"),\r\n    ArticleSettingsClient: Symbol(\"ArticleSettingsClient\"),\r\n    ArticleSettingsRoute: Symbol(\"ArticleSettingsRoute\"),\r\n    ArticleTagsClient: Symbol(\"ArticleTagsClient\"),\r\n    ArticleTagsRoute: Symbol(\"ArticleTagsRoute\"),\r\n    ArticleTagsSubscriptionsClient: Symbol(\"ArticleTagsSubscriptionsClient\"),\r\n    ArticleTagsSubscriptionsRoute: Symbol(\"ArticleTagsSubscriptionsRoute\"),\r\n    ArticleSubscriptionsArticleRoute: Symbol(\"ArticleSubscriptionsArticleRoute\"),\r\n    ArticleSubscriptionsCommentReportedRoute: Symbol(\"ArticleSubscriptionsCommentReportedRoute\"),\r\n    ArticleSubscriptionsCommentRequiresModerationRoute: Symbol(\"ArticleSubscriptionsCommentRequiresModerationRoute\"),\r\n    ArticleSubscriptionsRoute: Symbol(\"ArticleSubscriptionsRoute\"),\r\n    ArticleSubscriptionsClient: Symbol(\"ArticleSubscriptionsClient\"),\r\n    ArticleSubscriptionsArticleClient: Symbol(\"ArticleSubscriptionsArticleClient\"),\r\n    ArticleSubscriptionsCommentReportedClient: Symbol(\"ArticleSubscriptionsCommentReportedClient\"),\r\n    ArticleSubscriptionsCommentRequiresModerationClient: Symbol(\"ArticleSubscriptionsCommentRequiresModerationClient\"),\r\n    ArticleInstanceSubscriptionsClient: Symbol(\"ArticleInstanceSubscriptionsClient\"),\r\n    ArticleInstanceSubscriptionsRoute: Symbol(\"ArticleInstanceSubscriptionsRoute\"),\r\n    ArticleInstanceRatingsRoute: Symbol(\"ArticleInstanceRatingsRoute\"),\r\n    ArticleInstanceRatingsClient: Symbol(\"ArticleInstanceRatingsClient\"),\r\n    ArticleInstanceTagsRoute: Symbol(\"ArticleInstanceTagsRoute\"),\r\n    ArticleInstanceTagsClient: Symbol(\"ArticleInstanceTagsClient\"),\r\n    ArticleInstanceCommentsRoute: Symbol(\"ArticleInstanceCommentsRoute\"),\r\n    ArticleInstanceCommentsClient: Symbol(\"ArticleInstanceCommentsClient\"),\r\n    ArticleInstanceCommentRepliesRoute: Symbol(\"ArticleInstanceCommentRepliesRoute\"),\r\n    ArticleInstanceCommentRepliesClient: Symbol(\"ArticleInstanceCommentRepliesClient\"),\r\n    ArticleInstanceFilesRoute: Symbol(\"ArticleInstanceFilesRoute\"),\r\n    ArticleInstanceFilesClient: Symbol(\"ArticleInstanceFilesClient\"),\r\n    ArticleInstanceFilesStreamsRoute: Symbol(\"ArticleInstanceFilesStreamsRoute\"),\r\n    ArticleInstanceFilesStreamsClient: Symbol(\"ArticleInstanceFilesStreamsClient\"),\r\n    ArticleInstanceFilesBatchRoute: Symbol(\"ArticleInstanceFilesBatchRoute\"),\r\n    ArticleInstanceFilesBatchClient: Symbol(\"ArticleInstanceFilesBatchClient\"),\r\n    ArticleACLRoute: Symbol(\" ArticleACLRoute\"),\r\n    ArticleACLClient: Symbol(\"ArticleACLClient\"),\r\n    Root: Symbol(\"Root\")\r\n};\r\nexports.TYPES = TYPES;\r\nvar diModule = new inversify_1.ContainerModule(function (bind) {\r\n    bind(TYPES.ArticleCommentRepliesRoute).to(_1.ArticleCommentRepliesRoute);\r\n    bind(TYPES.ArticleCommentRepliesClient).to(_1.ArticleCommentRepliesClient);\r\n    bind(TYPES.ArticleCommentsRoute).to(_1.ArticleCommentsRoute);\r\n    bind(TYPES.ArticleCommentsClient).to(_1.ArticleCommentsClient);\r\n    bind(TYPES.ArticleFilesBatchRoute).to(_1.ArticleFilesBatchRoute);\r\n    bind(TYPES.ArticleFilesBatchClient).to(_1.ArticleFilesBatchClient);\r\n    bind(TYPES.ArticleFilesStreamsRoute).to(_1.ArticleFilesStreamsRoute);\r\n    bind(TYPES.ArticleFilesStreamsClient).to(_1.ArticleFilesStreamsClient);\r\n    bind(TYPES.ArticleFilesRoute).to(_1.ArticleFilesRoute);\r\n    bind(TYPES.ArticleFilesClient).to(_1.ArticleFilesClient);\r\n    bind(TYPES.ArticleRatingsRoute).to(_1.ArticleRatingsRoute);\r\n    bind(TYPES.ArticleRatingsClient).to(_1.ArticleRatingsClient);\r\n    bind(TYPES.ArticleSettingsRoute).to(_1.ArticleSettingsRoute);\r\n    bind(TYPES.ArticleSettingsClient).to(_1.ArticleSettingsClient);\r\n    bind(TYPES.ArticleTagsSubscriptionsRoute).to(_1.ArticleTagsSubscriptionsRoute);\r\n    bind(TYPES.ArticleTagsSubscriptionsClient).to(_1.ArticleTagsSubscriptionsClient);\r\n    bind(TYPES.ArticleTagsRoute).to(_1.ArticleTagsRoute);\r\n    bind(TYPES.ArticleTagsClient).to(_1.ArticleTagsClient);\r\n    bind(TYPES.ArticleSubscriptionsArticleRoute).to(_1.ArticleSubscriptionsArticleRoute);\r\n    bind(TYPES.ArticleSubscriptionsCommentReportedRoute).to(_1.ArticleSubscriptionsCommentReportedRoute);\r\n    bind(TYPES.ArticleSubscriptionsCommentRequiresModerationRoute).to(_1.ArticleSubscriptionsCommentRequiresModerationRoute);\r\n    bind(TYPES.ArticleSubscriptionsRoute).to(_1.ArticleSubscriptionsRoute);\r\n    bind(TYPES.ArticleSubscriptionsArticleClient).to(_1.ArticleSubscriptionsArticleClient);\r\n    bind(TYPES.ArticleSubscriptionsCommentReportedClient).to(_1.ArticleSubscriptionsCommentReportedClient);\r\n    bind(TYPES.ArticleSubscriptionsCommentRequiresModerationClient).to(_1.ArticleSubscriptionsCommentRequiresModerationClient);\r\n    bind(TYPES.ArticleSubscriptionsClient).to(_1.ArticleSubscriptionsClient);\r\n    bind(TYPES.ArticleInstanceRatingsRoute).to(_1.ArticleInstanceRatingsRoute);\r\n    bind(TYPES.ArticleInstanceRatingsClient).to(_1.ArticleInstanceRatingsClient);\r\n    bind(TYPES.ArticleInstanceTagsRoute).to(_1.ArticleInstanceTagsRoute);\r\n    bind(TYPES.ArticleInstanceTagsClient).to(_1.ArticleInstanceTagsClient);\r\n    bind(TYPES.ArticleInstanceCommentsRoute).to(_1.ArticleInstanceCommentsRoute);\r\n    bind(TYPES.ArticleInstanceCommentsClient).to(_1.ArticleInstanceCommentsClient);\r\n    bind(TYPES.ArticleInstanceCommentRepliesRoute).to(_1.ArticleInstanceCommentRepliesRoute);\r\n    bind(TYPES.ArticleInstanceCommentRepliesClient).to(_1.ArticleInstanceCommentRepliesClient);\r\n    bind(TYPES.ArticleInstanceFilesRoute).to(_1.ArticleInstanceFilesRoute);\r\n    bind(TYPES.ArticleInstanceFilesClient).to(_1.ArticleInstanceFilesClient);\r\n    bind(TYPES.ArticleInstanceFilesStreamsRoute).to(_1.ArticleInstanceFilesStreamsRoute);\r\n    bind(TYPES.ArticleInstanceFilesStreamsClient).to(_1.ArticleInstanceFilesStreamsClient);\r\n    bind(TYPES.ArticleInstanceFilesBatchRoute).to(_1.ArticleInstanceFilesBatchRoute);\r\n    bind(TYPES.ArticleInstanceFilesBatchClient).to(_1.ArticleInstanceFilesBatchClient);\r\n    bind(TYPES.ArticleInstanceSubscriptionsClient).to(_1.ArticleInstanceSubscriptionsClient);\r\n    bind(TYPES.ArticleInstanceSubscriptionsRoute).to(_1.ArticleInstanceSubscriptionsRoute);\r\n    bind(TYPES.ArticleACLRoute).to(_1.ArticleACLRoute);\r\n    bind(TYPES.ArticleACLClient).to(_1.ArticleACLClient);\r\n    bind(TYPES.ArticleRoute).to(_1.ArticleRoute);\r\n    bind(TYPES.ArticleClient).to(_1.ArticleClient);\r\n    bind(TYPES.Root).to(_1.Root);\r\n});\r\nexports.diModule = diModule;\r\n\n\n/***/ }),\n/* 164 */\n/***/ (function(module, exports, __webpack_require__) {\n\n\"use strict\";\n\r\nObject.defineProperty(exports, \"__esModule\", { value: true });\r\nvar tslib_1 = __webpack_require__(1);\r\nvar _1 = __webpack_require__(6);\r\nvar inversify_1 = __webpack_require__(0);\r\nvar Root = (function () {\r\n    function Root(articles, comments, files, ratings, subscriptions, tags, settings) {\r\n        this.articles = articles;\r\n        this.comments = comments;\r\n        this.files = files;\r\n        this.ratings = ratings;\r\n        this.subscriptions = subscriptions;\r\n        this.tags = tags;\r\n        this.settings = settings;\r\n    }\r\n    return Root;\r\n}());\r\nRoot = tslib_1.__decorate([\r\n    inversify_1.injectable(),\r\n    tslib_1.__param(0, inversify_1.inject(_1.TYPES.ArticleClient)),\r\n    tslib_1.__param(1, inversify_1.inject(_1.TYPES.ArticleCommentsClient)),\r\n    tslib_1.__param(2, inversify_1.inject(_1.TYPES.ArticleFilesClient)),\r\n    tslib_1.__param(3, inversify_1.inject(_1.TYPES.ArticleRatingsClient)),\r\n    tslib_1.__param(4, inversify_1.inject(_1.TYPES.ArticleSubscriptionsClient)),\r\n    tslib_1.__param(5, inversify_1.inject(_1.TYPES.ArticleTagsClient)),\r\n    tslib_1.__param(6, inversify_1.inject(_1.TYPES.ArticleSettingsClient)),\r\n    tslib_1.__metadata(\"design:paramtypes\", [typeof (_a = typeof _1.ArticleClient !== \"undefined\" && _1.ArticleClient) === \"function\" && _a || Object, typeof (_b = typeof _1.ArticleCommentsClient !== \"undefined\" && _1.ArticleCommentsClient) === \"function\" && _b || Object, typeof (_c = typeof _1.ArticleFilesClient !== \"undefined\" && _1.ArticleFilesClient) === \"function\" && _c || Object, typeof (_d = typeof _1.ArticleRatingsClient !== \"undefined\" && _1.ArticleRatingsClient) === \"function\" && _d || Object, typeof (_e = typeof _1.ArticleSubscriptionsClient !== \"undefined\" && _1.ArticleSubscriptionsClient) === \"function\" && _e || Object, typeof (_f = typeof _1.ArticleTagsClient !== \"undefined\" && _1.ArticleTagsClient) === \"function\" && _f || Object, typeof (_g = typeof _1.ArticleSettingsClient !== \"undefined\" && _1.ArticleSettingsClient) === \"function\" && _g || Object])\r\n], Root);\r\nexports.Root = Root;\r\nvar _a, _b, _c, _d, _e, _f, _g;\r\n\n\n/***/ }),\n/* 165 */\n/***/ (function(module, exports, __webpack_require__) {\n\n\"use strict\";\n/* globals module */\r\n/**\r\n * @module commerceClient\r\n * @description  Commerce Client provides an easy way to consume  Commerce REST API end-points. In order to obtain a needed routes `commerceClient` uses `commerceRoute`.\r\n */\r\n\r\nObject.defineProperty(exports, \"__esModule\", { value: true });\r\nvar tslib_1 = __webpack_require__(1);\r\nvar inversify_1 = __webpack_require__(0);\r\n;\r\nvar httpApi_1 = __webpack_require__(4);\r\nvar _1 = __webpack_require__(5);\r\nvar CommerceClient = (function () {\r\n    function CommerceClient(commerceCustomerClient, commerceInvoiceClient, commerceProductClient, commercePaymentTransactionClient, lookup, commerceRoute, apiClient) {\r\n        this.commerceCustomerClient = commerceCustomerClient;\r\n        this.commerceInvoiceClient = commerceInvoiceClient;\r\n        this.commerceProductClient = commerceProductClient;\r\n        this.commercePaymentTransactionClient = commercePaymentTransactionClient;\r\n        this.lookup = lookup;\r\n        this.commerceRoute = commerceRoute;\r\n        this.apiClient = apiClient;\r\n    }\r\n    Object.defineProperty(CommerceClient.prototype, \"customers\", {\r\n        get: function () {\r\n            return this.commerceCustomerClient;\r\n        },\r\n        enumerable: true,\r\n        configurable: true\r\n    });\r\n    Object.defineProperty(CommerceClient.prototype, \"invoices\", {\r\n        get: function () {\r\n            return this.commerceInvoiceClient;\r\n        },\r\n        enumerable: true,\r\n        configurable: true\r\n    });\r\n    Object.defineProperty(CommerceClient.prototype, \"products\", {\r\n        get: function () {\r\n            return this.commerceProductClient;\r\n        },\r\n        enumerable: true,\r\n        configurable: true\r\n    });\r\n    Object.defineProperty(CommerceClient.prototype, \"paymentTransactions\", {\r\n        get: function () {\r\n            return this.commercePaymentTransactionClient;\r\n        },\r\n        enumerable: true,\r\n        configurable: true\r\n    });\r\n    Object.defineProperty(CommerceClient.prototype, \"lookups\", {\r\n        get: function () {\r\n            return this.lookup;\r\n        },\r\n        enumerable: true,\r\n        configurable: true\r\n    });\r\n    Object.defineProperty(CommerceClient.prototype, \"routeDefinition\", {\r\n        get: function () {\r\n            return this.commerceRoute;\r\n        },\r\n        enumerable: true,\r\n        configurable: true\r\n    });\r\n    /**\r\n     * Returns a promise that is resolved once the find action has been performed. Success response returns a list of commerce resources matching the given criteria.\r\n     * @method\r\n     * @example commerceClient.find({\r\n                    pageNumber : 1,\r\n                    pageSize : 10,\r\n                    orderBy : '<field>',\r\n                    orderDirection : '<asc|desc>',\r\n                    customerId: '<customer-id>'\r\n                })\r\n                .then(function (collection) {\r\n                    // perform success action here\r\n                },\r\n                 function (response, status, headers, config) {\r\n                     // perform error handling here\r\n                });\r\n     **/\r\n    CommerceClient.prototype.find = function (options) {\r\n        return this.apiClient.get(this.routeDefinition.find(options));\r\n    };\r\n    /**\r\n     * Returns a promise that is resolved once the get action has been performed. Success response returns the commerce resource.\r\n     * @method\r\n     * @example commerceClient.get('<id>', {})\r\n                    .then(function (data) {\r\n                        // perform success action here\r\n                    },\r\n                     function (response, status, headers, config) {\r\n                         // perform error handling here\r\n                    });\r\n     **/\r\n    CommerceClient.prototype.get = function (id, options) {\r\n        return this.apiClient.get(this.commerceRoute.get(id, options));\r\n    };\r\n    /**\r\n     * Returns a promise that is resolved once the get action has been performed. Success response returns the commerce resource.\r\n     * @method\r\n     * @example commerceClient.validateVAT({ countryCode: 'DE', vatId: 'DE999999999' })\r\n                    .then(function (data) {\r\n                        // perform success action here\r\n                    },\r\n                     function (response, status, headers, config) {\r\n                         // perform error handling here\r\n                    });\r\n     **/\r\n    CommerceClient.prototype.validateVAT = function (countryCode, vatId) {\r\n        return this.apiClient.get(this.commerceRoute.validateVAT(countryCode, vatId));\r\n    };\r\n    /**\r\n     * Returns a promise that is resolved once the subscribe pre-process commerce action has been performed; this action performes pre-subscribe operations such as getting client tokens etc.\r\n     * @method\r\n     * @example commerceClient.preprocess({\r\n                    systemName : '<system-name>',\r\n                    productId : '<product-id>',\r\n                    customerId: '<id>'\r\n                })\r\n                .then(function (data) {\r\n                    // perform success action here\r\n                },\r\n                 function (response, status, headers, config) {\r\n                     // perform error handling here\r\n                });\r\n     **/\r\n    CommerceClient.prototype.preprocess = function (data) {\r\n        return this.apiClient.post(this.routeDefinition.preprocess(), this.routeDefinition.createParams(data));\r\n    };\r\n    /**\r\n     * Returns a promise that is resolved once the subscribe commerce action has been performed; this action creates a new commerce subscription resource.\r\n     * @method\r\n     * @example commerceClient.subscribe({\r\n                    systemName : '<system-name>',\r\n                    productId : '<product-id>',\r\n                    customer: {\r\n                        id: '<id>',\r\n                        firstName: '<first-name>',\r\n                        lastName: '<last-name>'\r\n                    }\r\n                })\r\n                .then(function (data) {\r\n                    // perform success action here\r\n                },\r\n                 function (response, status, headers, config) {\r\n                     // perform error handling here\r\n                });\r\n     **/\r\n    CommerceClient.prototype.subscribe = function (data) {\r\n        return this.apiClient.post(this.routeDefinition.subscribe(), this.routeDefinition.createParams(data));\r\n    };\r\n    /**\r\n     * Returns a promise that is resolved once the cancel subscription action has been performed. This action will remove a commerce subscription resource from the system if successfully completed. This route obtain routes from `commerceRoute` route template. Here is an example of how execute this action:\r\n     * @method\r\n     * @example\tcommerceClient.cancel({\r\n                    systemName: '<system-name>',\r\n                    id: '<subscription-id>',\r\n                    requestRefund: <true/false>,\r\n                    refundAmount: <refund-amount>\r\n                })\r\n                .then(function (data) {\r\n                    // perform success action here\r\n                },\r\n                 function (response, status, headers, config) {\r\n                     // perform error handling here\r\n                });\r\n     **/\r\n    CommerceClient.prototype.cancel = function (data) {\r\n        return this.apiClient.delete(this.routeDefinition.cancel(data));\r\n    };\r\n    return CommerceClient;\r\n}());\r\nCommerceClient = tslib_1.__decorate([\r\n    inversify_1.injectable(),\r\n    tslib_1.__param(0, inversify_1.inject(_1.TYPES.CommerceCustomerClient)),\r\n    tslib_1.__param(1, inversify_1.inject(_1.TYPES.CommerceInvoiceClient)),\r\n    tslib_1.__param(2, inversify_1.inject(_1.TYPES.CommerceProductClient)),\r\n    tslib_1.__param(3, inversify_1.inject(_1.TYPES.CommercePaymentTransactionClient)),\r\n    tslib_1.__param(4, inversify_1.inject(_1.TYPES.Lookups)),\r\n    tslib_1.__param(5, inversify_1.inject(_1.TYPES.CommerceRoute)),\r\n    tslib_1.__param(6, inversify_1.inject(httpApi_1.httpTYPES.ApiClient)),\r\n    tslib_1.__metadata(\"design:paramtypes\", [typeof (_a = typeof _1.CommerceCustomerClient !== \"undefined\" && _1.CommerceCustomerClient) === \"function\" && _a || Object, typeof (_b = typeof _1.CommerceInvoiceClient !== \"undefined\" && _1.CommerceInvoiceClient) === \"function\" && _b || Object, typeof (_c = typeof _1.CommerceProductClient !== \"undefined\" && _1.CommerceProductClient) === \"function\" && _c || Object, typeof (_d = typeof _1.CommercePaymentTransactionClient !== \"undefined\" && _1.CommercePaymentTransactionClient) === \"function\" && _d || Object, typeof (_e = typeof _1.Lookups !== \"undefined\" && _1.Lookups) === \"function\" && _e || Object, typeof (_f = typeof _1.CommerceRoute !== \"undefined\" && _1.CommerceRoute) === \"function\" && _f || Object, typeof (_g = typeof httpApi_1.ApiClient !== \"undefined\" && httpApi_1.ApiClient) === \"function\" && _g || Object])\r\n], CommerceClient);\r\nexports.CommerceClient = CommerceClient;\r\nvar _a, _b, _c, _d, _e, _f, _g;\r\n/**\r\n * @copyright (c) 2017 Mono Ltd\r\n * @license MIT\r\n * @author Mono Ltd\r\n * @overview\r\n ***Notes:**\r\n - Refer to the [Baasic REST API](http://dev.baasic.com/api/reference/home) for detailed information about available Baasic REST API end-points.\r\n - All end-point objects are transformed by the associated route service.\r\n */ \r\n\n\n/***/ }),\n/* 166 */\n/***/ (function(module, exports, __webpack_require__) {\n\n\"use strict\";\n/* globals module */\r\n/**\r\n * @module commerceRoute\r\n * @description Baasic Commerce Route Definition provides Baasic route templates which can be expanded to Baasic REST URIs. Various services can use Baasic Commerce Product Route Definition to obtain a needed routes while other routes will be obtained through HAL. By convention, all route services  use the same function names as their corresponding services.\r\n */\r\n\r\nObject.defineProperty(exports, \"__esModule\", { value: true });\r\nvar tslib_1 = __webpack_require__(1);\r\nvar inversify_1 = __webpack_require__(0);\r\nvar common_1 = __webpack_require__(2);\r\n;\r\nvar contracts_1 = __webpack_require__(3);\r\nvar CommerceRoute = (function (_super) {\r\n    tslib_1.__extends(CommerceRoute, _super);\r\n    function CommerceRoute(appOptions) {\r\n        var _this = _super.call(this, appOptions) || this;\r\n        _this.appOptions = appOptions;\r\n        _this.findRoute = 'commerce/subscriptions/{?customerId,systemName,searchQuery,plan,statuses,productId,firstName,lastName,page,rpp,sort,embed,fields}';\r\n        _this.getRoute = 'commerce/subscriptions/{id}/{?embed,fields}';\r\n        _this.validateVATRoute = 'commerce/vat-validations/{?countryCode,vatId}';\r\n        _this.preprocessRoute = 'commerce/subscriptions/preprocess';\r\n        _this.subscribeRoute = 'commerce/subscriptions';\r\n        _this.cancelRoute = 'commerce/subscriptions/{systemName}/{id}/{?requestRefund,refundAmount}';\r\n        return _this;\r\n    }\r\n    /**\r\n     * Parses find commerce route which can be expanded with additional options. Supported items are:\r\n     * - `customerId` - The customer identifier.\r\n     * - `systemName` - The commerce payment gateway system name.\r\n     * - `searchQuery` - A string value used to identify commerce resources using the phrase search.\r\n     * - `plan` - Product name.\r\n     * - `statuses` - Subscription status unique identifier or abbreviation in CSV format.\r\n     * - `productId` - Product unique identifier.\r\n     * - `firstName` - Customer first name.\r\n     * - `lastName` - Customer last name.\r\n     * - `page` - A value used to set the page number, i.e. to retrieve certain commerce subset from the storage.\r\n     * - `rpp` - A value used to limit the size of result set per page.\r\n     * - `sort` - A string used to set the commerce property to sort the result collection by.\r\n     * - `embed` - Comma separated list of resources to be contained within the current representation.\r\n     * @method\r\n     * @example commerceRoute.find({searchQuery: '<search-phrase>'});\r\n     **/\r\n    CommerceRoute.prototype.find = function (options) {\r\n        return _super.prototype.baseFind.call(this, this.findRoute, options);\r\n    };\r\n    /**\r\n     * Parses get route; this route doesn't expose any properties.\r\n     * @method\r\n     * @example commerceRoute.get(id, options);\r\n     **/\r\n    CommerceRoute.prototype.get = function (id, options) {\r\n        return _super.prototype.baseGet.call(this, this.getRoute, id, options);\r\n    };\r\n    /**\r\n     * Parses validate VAT route; this route doesn't expose any properties.\r\n     * @method\r\n     * @example commerceRoute.validateVAT({ countryCode: 'DE', vatId: 'DE999999999' });\r\n     **/\r\n    CommerceRoute.prototype.validateVAT = function (countryCode, vatId) {\r\n        return _super.prototype.baseCreate.call(this, this.validateVATRoute, { countryCode: countryCode, vatId: vatId });\r\n    };\r\n    /**\r\n     * Parses subscription pre-process commerce route; this URI template does not expose any additional options.\r\n     * @method\r\n     * @example commerceRoute.preprocess();\r\n     **/\r\n    CommerceRoute.prototype.preprocess = function () {\r\n        return _super.prototype.baseCreate.call(this, this.preprocessRoute, {});\r\n    };\r\n    /**\r\n     * Parses subscription commerce route; this URI template does not expose any additional options.\r\n     * @method\r\n     * @example commerceRoute.subscribe();\r\n     **/\r\n    CommerceRoute.prototype.subscribe = function () {\r\n        return _super.prototype.baseCreate.call(this, this.subscribeRoute, {});\r\n    };\r\n    /**\r\n     * Parses cancel subscription commerce route; this URI template does not expose any additional options.\r\n     * @method\r\n     * @example commerceRoute.cancel({ systemName: '<system-name>' });\r\n     **/\r\n    CommerceRoute.prototype.cancel = function (data) {\r\n        return _super.prototype.baseCreate.call(this, this.cancelRoute, data);\r\n    };\r\n    return CommerceRoute;\r\n}(common_1.BaseRoute));\r\nCommerceRoute = tslib_1.__decorate([\r\n    inversify_1.injectable(),\r\n    tslib_1.__param(0, inversify_1.inject(contracts_1.TYPES.IAppOptions)),\r\n    tslib_1.__metadata(\"design:paramtypes\", [typeof (_a = typeof contracts_1.IAppOptions !== \"undefined\" && contracts_1.IAppOptions) === \"function\" && _a || Object])\r\n], CommerceRoute);\r\nexports.CommerceRoute = CommerceRoute;\r\nvar _a;\r\n/**\r\n * @copyright (c) 2017 Mono Ltd\r\n * @license MIT\r\n * @author Mono Ltd\r\n * @overview\r\n ***Notes:**\r\n - Refer to the [Baasic REST API](http://dev.baasic.com/api/reference/home) for detailed information about available Baasic REST API end-points.\r\n - [URI Template](https://github.com/Baasic/uritemplate-js) syntax enables expanding the Baasic route templates to Baasic REST URIs providing it with an object that contains URI parameters.\r\n - All end-point objects are transformed by the associated route service.\r\n */ \r\n\n\n/***/ }),\n/* 167 */\n/***/ (function(module, exports, __webpack_require__) {\n\n\"use strict\";\n/* globals module */\r\n/**\r\n * @module commerceCustomerClient\r\n * @description  Commerce Customer Client provides an easy way to consume  Commerce REST API end-points. In order to obtain a needed routes `commerceCustomerClient` uses `commerceCustomerRoute`.\r\n */\r\n\r\nObject.defineProperty(exports, \"__esModule\", { value: true });\r\nvar tslib_1 = __webpack_require__(1);\r\nvar inversify_1 = __webpack_require__(0);\r\n;\r\nvar httpApi_1 = __webpack_require__(4);\r\nvar _1 = __webpack_require__(5);\r\nvar CommerceCustomerClient = (function () {\r\n    function CommerceCustomerClient(commerceCustomerPaymentMethodClient, commerceCustomerRoute, apiClient) {\r\n        this.commerceCustomerPaymentMethodClient = commerceCustomerPaymentMethodClient;\r\n        this.commerceCustomerRoute = commerceCustomerRoute;\r\n        this.apiClient = apiClient;\r\n    }\r\n    Object.defineProperty(CommerceCustomerClient.prototype, \"paymentMethods\", {\r\n        get: function () {\r\n            return this.commerceCustomerPaymentMethodClient;\r\n        },\r\n        enumerable: true,\r\n        configurable: true\r\n    });\r\n    Object.defineProperty(CommerceCustomerClient.prototype, \"routeDefinition\", {\r\n        get: function () {\r\n            return this.commerceCustomerRoute;\r\n        },\r\n        enumerable: true,\r\n        configurable: true\r\n    });\r\n    /**\r\n     * Returns a promise that is resolved once the find action has been performed. Success response returns a list of commerce resources matching the given criteria.\r\n     * @method\r\n     * @example commerceCustomerClient.find({\r\n                    pageNumber : 1,\r\n                    pageSize : 10,\r\n                    orderBy : '<field>',\r\n                    orderDirection : '<asc|desc>',\r\n                    search : '<search-phrase>'\r\n                })\r\n                .then(function (collection) {\r\n                    // perform success action here\r\n                },\r\n                 function (response, status, headers, config) {\r\n                     // perform error handling here\r\n                });\r\n     **/\r\n    CommerceCustomerClient.prototype.find = function (options) {\r\n        return this.apiClient.get(this.routeDefinition.find(options));\r\n    };\r\n    /**\r\n     * Returns a promise that is resolved once the get action has been performed. Success response returns the commerce resource.\r\n     * @method\r\n     * @example commerceCustomerClient.get(id)\r\n                    .then(function (data) {\r\n                        // perform success action here\r\n                    },\r\n                     function (response, status, headers, config) {\r\n                         // perform error handling here\r\n                    });\r\n     **/\r\n    CommerceCustomerClient.prototype.get = function (id, options) {\r\n        return this.apiClient.get(this.commerceCustomerRoute.get(id, options));\r\n    };\r\n    /**\r\n     * Returns a promise that is resolved once the update commerce action has been performed; this action updates a commerce resource. This route uses HAL enabled objects to obtain routes and therefore it doesn't apply `commerceCustomerRoute` route template. Here is an example of how a route can be obtained from HAL enabled objects:\r\n     * ```\r\n     * let params = apiClient.removeParams(commerceCustomer);\r\n     * let uri = params['model'].links('put').href;\r\n     * ```\r\n     * @method\r\n     * @example // commerceCustomer is a resource previously fetched using get action.\r\n                    commerceCustomer.isDefault : true;\r\n                    commerceCustomerClient.update(commerceCustomer)\r\n                        .then(function (data) {\r\n                            // perform success action here\r\n                        },\r\n                         function (response, status, headers, config) {\r\n                             // perform error handling here\r\n                        });\r\n     **/\r\n    CommerceCustomerClient.prototype.update = function (data) {\r\n        return this.apiClient.put(this.routeDefinition.update(data), this.routeDefinition.updateParams(data));\r\n    };\r\n    /**\r\n     * Returns a promise that is resolved once the remove action has been performed. This action will remove a commerce resource from the system if successfully completed. This route uses HAL enabled objects to obtain routes and therefore it doesn't apply `commerceCustomerRoute` route template. Here is an example of how a route can be obtained from HAL enabled objects:\r\n     * ```\r\n     * let params = apiClient.removeParams(commerceCustomer);\r\n     * let uri = params['model'].links('delete').href;\r\n     * ```\r\n     * @method\r\n     * @example // commerceCustomer is a resource previously fetched using get action.\r\n                    commerceCustomerClient.remove(commerceCustomer)\r\n                        .then(function (data) {\r\n                            // perform success action here\r\n                        },\r\n                         function (response, status, headers, config) {\r\n                             // perform error handling here\r\n                        });\r\n     **/\r\n    CommerceCustomerClient.prototype.remove = function (data) {\r\n        return this.apiClient.delete(this.routeDefinition.delete(data));\r\n    };\r\n    return CommerceCustomerClient;\r\n}());\r\nCommerceCustomerClient = tslib_1.__decorate([\r\n    inversify_1.injectable(),\r\n    tslib_1.__param(0, inversify_1.inject(_1.TYPES.CommerceCustomerPaymentMethodClient)),\r\n    tslib_1.__param(1, inversify_1.inject(_1.TYPES.CommerceCustomerRoute)),\r\n    tslib_1.__param(2, inversify_1.inject(httpApi_1.httpTYPES.ApiClient)),\r\n    tslib_1.__metadata(\"design:paramtypes\", [typeof (_a = typeof _1.CommerceCustomerPaymentMethodClient !== \"undefined\" && _1.CommerceCustomerPaymentMethodClient) === \"function\" && _a || Object, typeof (_b = typeof _1.CommerceCustomerRoute !== \"undefined\" && _1.CommerceCustomerRoute) === \"function\" && _b || Object, typeof (_c = typeof httpApi_1.ApiClient !== \"undefined\" && httpApi_1.ApiClient) === \"function\" && _c || Object])\r\n], CommerceCustomerClient);\r\nexports.CommerceCustomerClient = CommerceCustomerClient;\r\nvar _a, _b, _c;\r\n/**\r\n * @copyright (c) 2017 Mono Ltd\r\n * @license MIT\r\n * @author Mono Ltd\r\n * @overview\r\n ***Notes:**\r\n - Refer to the [Baasic REST API](http://dev.baasic.com/api/reference/home) for detailed information about available Baasic REST API end-points.\r\n - All end-point objects are transformed by the associated route service.\r\n */ \r\n\n\n/***/ }),\n/* 168 */\n/***/ (function(module, exports, __webpack_require__) {\n\n\"use strict\";\n/* globals module */\r\n/**\r\n * @module commerceCustomerPaymentMethodClient\r\n * @description  Commerce CustomerPaymentMethod Client provides an easy way to consume  Commerce REST API end-points. In order to obtain a needed routes `commerceCustomerPaymentMethodClient` uses `commerceCustomerPaymentMethodRoute`.\r\n */\r\n\r\nObject.defineProperty(exports, \"__esModule\", { value: true });\r\nvar tslib_1 = __webpack_require__(1);\r\nvar inversify_1 = __webpack_require__(0);\r\n;\r\nvar httpApi_1 = __webpack_require__(4);\r\nvar _1 = __webpack_require__(5);\r\nvar CommerceCustomerPaymentMethodClient = (function () {\r\n    function CommerceCustomerPaymentMethodClient(commerceCustomerPaymentMethodRoute, apiClient) {\r\n        this.commerceCustomerPaymentMethodRoute = commerceCustomerPaymentMethodRoute;\r\n        this.apiClient = apiClient;\r\n    }\r\n    Object.defineProperty(CommerceCustomerPaymentMethodClient.prototype, \"routeDefinition\", {\r\n        get: function () {\r\n            return this.commerceCustomerPaymentMethodRoute;\r\n        },\r\n        enumerable: true,\r\n        configurable: true\r\n    });\r\n    /**\r\n     * Returns a promise that is resolved once the find action has been performed. Success response returns a list of commerce resources matching the given criteria.\r\n     * @method\r\n     * @param options Query resource options object.\r\n     * @returns A promise that is resolved once the find action has been performed.\r\n     * @example commerceCustomerPaymentMethodClient.find({\r\n                    pageNumber : 1,\r\n                    pageSize : 10,\r\n                    orderBy : '<field>',\r\n                    orderDirection : '<asc|desc>',\r\n                    search : '<search-phrase>'\r\n                })\r\n                .then(function (collection) {\r\n                    // perform success action here\r\n                },\r\n                 function (response, status, headers, config) {\r\n                     // perform error handling here\r\n                });\r\n     **/\r\n    CommerceCustomerPaymentMethodClient.prototype.find = function (options) {\r\n        return this.apiClient.get(this.routeDefinition.find(options));\r\n    };\r\n    /**\r\n     * Returns a promise that is resolved once the get action has been performed. Success response returns the commerce resource.\r\n     * @method\r\n     * @example commerceCustomerPaymentMethodClient.get()\r\n                    .then(function (data) {\r\n                        // perform success action here\r\n                    },\r\n                     function (response, status, headers, config) {\r\n                         // perform error handling here\r\n                    });\r\n     **/\r\n    CommerceCustomerPaymentMethodClient.prototype.get = function (id, options) {\r\n        return this.apiClient.get(this.commerceCustomerPaymentMethodRoute.get(id, options));\r\n    };\r\n    /**\r\n     * Returns a promise that is resolved once the update commerce action has been performed; this action updates a commerce resource. This route uses HAL enabled objects to obtain routes and therefore it doesn't apply `commerceCustomerPaymentMethodRoute` route template. Here is an example of how a route can be obtained from HAL enabled objects:\r\n     * ```\r\n     * let params = modelMapper.removeParams(commerceCustomerPaymentMethod);\r\n     * var uri = params['model'].links('put').href;\r\n     * ```\r\n     * @method\r\n     * @example // commerceCustomerPaymentMethod is a resource previously fetched using get action.\r\n                        commerceCustomerPaymentMethod.isDefault : true;\r\n                        commerceCustomerPaymentMethodClient.update(commerceCustomerPaymentMethod)\r\n                            .then(function (data) {\r\n                                // perform success action here\r\n                            },\r\n                             function (response, status, headers, config) {\r\n                                 // perform error handling here\r\n                            });\r\n     **/\r\n    CommerceCustomerPaymentMethodClient.prototype.update = function (data) {\r\n        return this.apiClient.put(this.routeDefinition.update(data), this.routeDefinition.updateParams(data));\r\n    };\r\n    /**\r\n     * Returns a promise that is resolved once the create commerce action has been performed; this action creates a new commerce resource.\r\n     * @method\r\n     * @example commerceCustomerPaymentMethodClient.create({\r\n                    paymentMethodNonce : '<payment-method-nonce>',\r\n                    customerId : '<customer-id>',\r\n                    typeName : '<type-name>'\r\n                })\r\n                .then(function (data) {\r\n                    // perform success action here\r\n                },\r\n                 function (response, status, headers, config) {\r\n                     // perform error handling here\r\n                });\r\n     **/\r\n    CommerceCustomerPaymentMethodClient.prototype.create = function (data) {\r\n        return this.apiClient.post(this.routeDefinition.create(), this.routeDefinition.createParams(data));\r\n    };\r\n    /**\r\n     * Returns a promise that is resolved once the remove action has been performed. This action will remove a commerce resource from the system if successfully completed. This route uses HAL enabled objects to obtain routes and therefore it doesn't apply `baasicCommerceCustomerPaymentMethodRouteService` route template. Here is an example of how a route can be obtained from HAL enabled objects:\r\n     * ```\r\n     * let params = modelMapper.removeParams(commerceCustomerPaymentMethod);\r\n     * let uri = params['model'].links('delete').href;\r\n     * ```\r\n     * @method\r\n     * @example // commerceCustomerPaymentMethod is a resource previously fetched using get action.\r\n                    commerceCustomerPaymentMethodClient.remove(commerceCustomerPaymentMethod)\r\n                        .then(function (data) {\r\n                            // perform success action here\r\n                        },\r\n                         function (response, status, headers, config) {\r\n                             // perform error handling here\r\n                        });\r\n     **/\r\n    CommerceCustomerPaymentMethodClient.prototype.remove = function (data) {\r\n        return this.apiClient.delete(this.routeDefinition.delete(data));\r\n    };\r\n    return CommerceCustomerPaymentMethodClient;\r\n}());\r\nCommerceCustomerPaymentMethodClient = tslib_1.__decorate([\r\n    inversify_1.injectable(),\r\n    tslib_1.__param(0, inversify_1.inject(_1.TYPES.CommerceCustomerPaymentMethodRoute)),\r\n    tslib_1.__param(1, inversify_1.inject(httpApi_1.httpTYPES.ApiClient)),\r\n    tslib_1.__metadata(\"design:paramtypes\", [typeof (_a = typeof _1.CommerceCustomerPaymentMethodRoute !== \"undefined\" && _1.CommerceCustomerPaymentMethodRoute) === \"function\" && _a || Object, typeof (_b = typeof httpApi_1.ApiClient !== \"undefined\" && httpApi_1.ApiClient) === \"function\" && _b || Object])\r\n], CommerceCustomerPaymentMethodClient);\r\nexports.CommerceCustomerPaymentMethodClient = CommerceCustomerPaymentMethodClient;\r\nvar _a, _b;\r\n/**\r\n * @copyright(c) 2017 Mono Ltd\r\n * @license MIT\r\n * @author Mono Ltd\r\n * @overview\r\n ***Notes:**\r\n - Refer to the [Baasic REST API](http://dev.baasic.com/api/reference/home) for detailed information about available Baasic REST API end-points.\r\n - All end-point objects are transformed by the associated route service.\r\n */ \r\n\n\n/***/ }),\n/* 169 */\n/***/ (function(module, exports, __webpack_require__) {\n\n\"use strict\";\n/* globals module */\r\n/**\r\n * @module commerceCustomerPaymentMethodRoute\r\n * @description Baasic Commerce CustomerPaymentMethod Route Definition provides Baasic route templates which can be expanded to Baasic REST URIs. Various services can use Baasic Commerce CustomerPaymentMethod Route Definition to obtain a needed routes while other routes will be obtained through HAL. By convention, all route services  use the same function names as their corresponding services.\r\n */\r\n\r\nObject.defineProperty(exports, \"__esModule\", { value: true });\r\nvar tslib_1 = __webpack_require__(1);\r\nvar inversify_1 = __webpack_require__(0);\r\nvar common_1 = __webpack_require__(2);\r\n;\r\nvar contracts_1 = __webpack_require__(3);\r\nvar CommerceCustomerPaymentMethodRoute = (function (_super) {\r\n    tslib_1.__extends(CommerceCustomerPaymentMethodRoute, _super);\r\n    function CommerceCustomerPaymentMethodRoute(appOptions) {\r\n        var _this = _super.call(this, appOptions) || this;\r\n        _this.appOptions = appOptions;\r\n        _this.findRoute = 'commerce/customer-payment-methods/{systemName}/{?customerId,searchQuery,page,rpp,sort,embed,fields}';\r\n        _this.getRoute = 'commerce/customer-payment-methods/{systemName}/{id}/{?embed,fields}';\r\n        _this.createRoute = 'commerce/customer-payment-methods/{systemName}/';\r\n        _this.updateRoute = 'commerce/customer-payment-methods/{systemName}/{id}';\r\n        _this.deleteRoute = 'commerce/customer-payment-methods/{systemName}/{id}';\r\n        return _this;\r\n    }\r\n    /**\r\n     * Parses find commerce customer-payment-methods route which can be expanded with additional options. Supported items are:\r\n     * - `searchQuery` - A string value used to identify commerce resources using the phrase search.\r\n     * - `page` - A value used to set the page number, i.e. to retrieve certain commerce subset from the storage.\r\n     * - `rpp` - A value used to limit the size of result set per page.\r\n     * - `sort` - A string used to set the commerce property to sort the result collection by.\r\n     * - `embed` - Comma separated list of resources to be contained within the current representation.\r\n     * @method\r\n     * @param options Query resource options.\r\n     * @example commerceCustomerPaymentMethodRoute.find({searchQuery: '<search-phrase>'});                               **/\r\n    CommerceCustomerPaymentMethodRoute.prototype.find = function (options) {\r\n        return _super.prototype.baseFind.call(this, this.findRoute, options);\r\n    };\r\n    /**\r\n     * Parses get route; this route doesn't expose any properties.\r\n     * @method\r\n     * @example commerceCustomerPaymentMethodRoute.get(id, options);\r\n     **/\r\n    CommerceCustomerPaymentMethodRoute.prototype.get = function (id, options) {\r\n        return _super.prototype.baseGet.call(this, this.getRoute, options);\r\n    };\r\n    /**\r\n     * Parses create commerce customer-payment-method route; this URI template does not expose any additional options.\r\n     * @method\r\n     * @example commerceCustomerPaymentMethodRoute.create();\r\n     **/\r\n    CommerceCustomerPaymentMethodRoute.prototype.create = function () {\r\n        return _super.prototype.baseCreate.call(this, this.createRoute, {});\r\n    };\r\n    /**\r\n     * Parses update commerce customer-payment-method route; this URI template does not expose any additional options.\r\n     * @method\r\n     * @example commerceCustomerPaymentMethodRoute.update(data);\r\n     **/\r\n    CommerceCustomerPaymentMethodRoute.prototype.update = function (data) {\r\n        return _super.prototype.baseUpdate.call(this, this.updateRoute, data);\r\n    };\r\n    /**\r\n    * Parses delete commerce customer-payment-method route; this URI template does not expose any additional options.\r\n    * @method\r\n    * @example commerceCustomerPaymentMethodRoute.delete(data);\r\n    **/\r\n    CommerceCustomerPaymentMethodRoute.prototype.delete = function (data) {\r\n        return _super.prototype.baseDelete.call(this, this.deleteRoute, data);\r\n    };\r\n    return CommerceCustomerPaymentMethodRoute;\r\n}(common_1.BaseRoute));\r\nCommerceCustomerPaymentMethodRoute = tslib_1.__decorate([\r\n    inversify_1.injectable(),\r\n    tslib_1.__param(0, inversify_1.inject(contracts_1.TYPES.IAppOptions)),\r\n    tslib_1.__metadata(\"design:paramtypes\", [typeof (_a = typeof contracts_1.IAppOptions !== \"undefined\" && contracts_1.IAppOptions) === \"function\" && _a || Object])\r\n], CommerceCustomerPaymentMethodRoute);\r\nexports.CommerceCustomerPaymentMethodRoute = CommerceCustomerPaymentMethodRoute;\r\nvar _a;\r\n/**\r\n * @copyright (c) 2017 Mono Ltd\r\n * @license MIT\r\n * @author Mono Ltd\r\n * @overview\r\n ***Notes:**\r\n - Refer to the [Baasic REST API](http://dev.baasic.com/api/reference/home) for detailed information about available Baasic REST API end-points.\r\n - [URI Template](https://github.com/Baasic/uritemplate-js) syntax enables expanding the Baasic route templates to Baasic REST URIs providing it with an object that contains URI parameters.\r\n - All end-point objects are transformed by the associated route service.\r\n */ \r\n\n\n/***/ }),\n/* 170 */\n/***/ (function(module, exports, __webpack_require__) {\n\n\"use strict\";\n/* globals module */\r\n/**\r\n * @module commerceCustomerRoute\r\n * @description Baasic Commerce Customer Route Definition provides Baasic route templates which can be expanded to Baasic REST URIs. Various services can use Baasic Commerce Customer Route Definition to obtain a needed routes while other routes will be obtained through HAL. By convention, all route services  use the same function names as their corresponding services.\r\n */\r\n\r\nObject.defineProperty(exports, \"__esModule\", { value: true });\r\nvar tslib_1 = __webpack_require__(1);\r\nvar inversify_1 = __webpack_require__(0);\r\nvar common_1 = __webpack_require__(2);\r\n;\r\nvar contracts_1 = __webpack_require__(3);\r\nvar CommerceCustomerRoute = (function (_super) {\r\n    tslib_1.__extends(CommerceCustomerRoute, _super);\r\n    function CommerceCustomerRoute(appOptions) {\r\n        var _this = _super.call(this, appOptions) || this;\r\n        _this.appOptions = appOptions;\r\n        _this.findRoute = 'commerce/customers/{systemName}/{?customerId,searchQuery,page,rpp,sort,embed,fields}';\r\n        _this.getRoute = 'commerce/customers/{systemName}/{id}/{?embed,fields}';\r\n        _this.updateRoute = 'commerce/customers/{systemName}/{id}';\r\n        _this.deleteRoute = 'commerce/customers/{systemName}/{id}';\r\n        return _this;\r\n    }\r\n    /**\r\n     * Parses find commerce customers route which can be expanded with additional options. Supported items are:\r\n     * - `searchQuery` - A string value used to identify commerce resources using the phrase search.\r\n     * - `page` - A value used to set the page number, i.e. to retrieve certain commerce subset from the storage.\r\n     * - `rpp` - A value used to limit the size of result set per page.\r\n     * - `sort` - A string used to set the commerce property to sort the result collection by.\r\n     * - `embed` - Comma separated list of resources to be contained within the current representation.\r\n     * @method\r\n     * @example commerceCustomerRoute.find({searchQuery: '<search-phrase>'});\r\n     **/\r\n    CommerceCustomerRoute.prototype.find = function (options) {\r\n        return this.baseFind(this.findRoute, options);\r\n    };\r\n    /**\r\n     * Parses get route; this route doesn't expose any properties.\r\n     * @method\r\n     * @example commerceCustomerRoute.get(id, options);\r\n     **/\r\n    CommerceCustomerRoute.prototype.get = function (id, options) {\r\n        return this.baseGet(this.getRoute, id, options);\r\n    };\r\n    /**\r\n     * Parses update route; this route doesn't expose any properties.\r\n     * @method\r\n     * @example commerceCustomerRoute.update(data);\r\n     **/\r\n    CommerceCustomerRoute.prototype.update = function (data) {\r\n        return this.baseUpdate(this.updateRoute, data);\r\n    };\r\n    /**\r\n     * Parses delete route; this route doesn't expose any properties.\r\n     * @method\r\n     * @example commerceCustomerRoute.delete(data);\r\n     **/\r\n    CommerceCustomerRoute.prototype.delete = function (data) {\r\n        return this.baseDelete(this.deleteRoute, data);\r\n    };\r\n    return CommerceCustomerRoute;\r\n}(common_1.BaseRoute));\r\nCommerceCustomerRoute = tslib_1.__decorate([\r\n    inversify_1.injectable(),\r\n    tslib_1.__param(0, inversify_1.inject(contracts_1.TYPES.IAppOptions)),\r\n    tslib_1.__metadata(\"design:paramtypes\", [typeof (_a = typeof contracts_1.IAppOptions !== \"undefined\" && contracts_1.IAppOptions) === \"function\" && _a || Object])\r\n], CommerceCustomerRoute);\r\nexports.CommerceCustomerRoute = CommerceCustomerRoute;\r\nvar _a;\r\n/**\r\n * @copyright (c) 2017 Mono Ltd\r\n * @license MIT\r\n * @author Mono Ltd\r\n * @overview\r\n ***Notes:**\r\n - Refer to the [Baasic REST API](http://dev.baasic.com/api/reference/home) for detailed information about available Baasic REST API end-points.\r\n - [URI Template](https://github.com/Baasic/uritemplate-js) syntax enables expanding the Baasic route templates to Baasic REST URIs providing it with an object that contains URI parameters.\r\n - All end-point objects are transformed by the associated route service.\r\n */ \r\n\n\n/***/ }),\n/* 171 */\n/***/ (function(module, exports, __webpack_require__) {\n\n\"use strict\";\n\r\nfunction __export(m) {\r\n    for (var p in m) if (!exports.hasOwnProperty(p)) exports[p] = m[p];\r\n}\r\nObject.defineProperty(exports, \"__esModule\", { value: true });\r\n__export(__webpack_require__(170));\r\n__export(__webpack_require__(167));\r\n__export(__webpack_require__(169));\r\n__export(__webpack_require__(168));\r\n\n\n/***/ }),\n/* 172 */\n/***/ (function(module, exports, __webpack_require__) {\n\n\"use strict\";\n\r\nObject.defineProperty(exports, \"__esModule\", { value: true });\r\nvar inversify_1 = __webpack_require__(0);\r\nvar _1 = __webpack_require__(5);\r\nvar TYPES = {\r\n    CommerceCustomerPaymentMethodClient: Symbol(\"CommerceCustomerPaymentMethodClient\"),\r\n    CommerceCustomerPaymentMethodRoute: Symbol(\"CommerceCustomerPaymentMethodRoute\"),\r\n    CommerceCustomerClient: Symbol(\"CommerceCustomerClient\"),\r\n    CommerceCustomerRoute: Symbol(\"CommerceCustomerRoute\"),\r\n    CommerceInvoiceClient: Symbol(\"CommerceInvoiceClient\"),\r\n    CommerceInvoiceRoute: Symbol(\"CommerceInvoiceRoute\"),\r\n    CommerceInvoiceStreamsClient: Symbol(\"CommerceInvoiceStreamsClient\"),\r\n    CommerceInvoiceStreamsRoute: Symbol(\"CommerceInvoiceStreamsRoute\"),\r\n    CommercePaymentTransactionClient: Symbol(\"CommercePaymentTransactionClient\"),\r\n    CommercePaymentTransactionRoute: Symbol(\"CommercePaymentTransactionRoute\"),\r\n    CommerceProductClient: Symbol(\"CommerceProductClient\"),\r\n    CommerceProductRoute: Symbol(\"CommerceProductRoute\"),\r\n    CommerceClient: Symbol(\"CommerceClient\"),\r\n    CommerceRoute: Symbol(\"CommerceRoute\"),\r\n    CommerceLookupsAddressTypesBatchClient: Symbol(\"CommerceLookupsAddressTypesBatchClient\"),\r\n    CommerceLookupsAddressTypeBatchRoute: Symbol(\"CommerceLookupsAddressTypeBatchRoute\"),\r\n    CommerceLookupsAddressTypesClient: Symbol(\"CommerceLookupsAddressTypesClient\"),\r\n    CommerceLookupsAddressTypeRoute: Symbol(\"CommerceLookupsAddressTypeRoute\"),\r\n    CommerceLookupsCountryBatchClient: Symbol(\"CommerceLookupsCountryBatchClient\"),\r\n    CommerceLookupsCountryBatchRoute: Symbol(\"CommerceLookupsCountryBatchRoute\"),\r\n    CommerceLookupsCountryClient: Symbol(\"CommerceLookupsCountryClient\"),\r\n    CommerceLookupsCountryRoute: Symbol(\"CommerceLookupsCountryRoute\"),\r\n    CommerceLookupsCountryStateBatchClient: Symbol(\"CommerceLookupsCountryStateBatchClient\"),\r\n    CommerceLookupsCountryStateBatchRoute: Symbol(\"CommerceLookupsCountryStateBatchRoute\"),\r\n    CommerceLookupsCountryStateClient: Symbol(\"CommerceLookupsCountryStateClient\"),\r\n    CommerceLookupsCountryStateRoute: Symbol(\"CommerceLookupsCountryStateRoute\"),\r\n    CommerceLookupsPaymentMethodBatchClient: Symbol(\"CommerceLookupsPaymentMethodBatchClient\"),\r\n    CommerceLookupsPaymentMethodBatchRoute: Symbol(\"CommerceLookupsPaymentMethodBatchRoute\"),\r\n    CommerceLookupsPaymentMethodClient: Symbol(\"CommerceLookupsPaymentMethodClient\"),\r\n    CommerceLookupsPaymentMethodRoute: Symbol(\"CommerceLookupsPaymentMethodRoute\"),\r\n    CommerceLookupsPaymentTransactionStatusBatchClient: Symbol(\"CommerceLookupsPaymentTransactionStatusBatchClient\"),\r\n    CommerceLookupsPaymentTransactionStatusBatchRoute: Symbol(\"CommerceLookupsPaymentTransactionStatusBatchRoute\"),\r\n    CommerceLookupsPaymentTransactionStatusClient: Symbol(\"CommerceLookupsPaymentTransactionStatusClient\"),\r\n    CommerceLookupsPaymentTransactionStatusRoute: Symbol(\"CommerceLookupsPaymentTransactionStatusRoute\"),\r\n    CommerceLookupsRecurringCyclePeriodTypeBatchClient: Symbol(\"CommerceLookupsRecurringCyclePeriodTypeBatchClient\"),\r\n    CommerceLookupsRecurringCyclePeriodTypeBatchRoute: Symbol(\"CommerceLookupsRecurringCyclePeriodTypeBatchRoute\"),\r\n    CommerceLookupsRecurringCyclePeriodTypeClient: Symbol(\"CommerceLookupsRecurringCyclePeriodTypeClient\"),\r\n    CommerceLookupsRecurringCyclePeriodTypeRoute: Symbol(\"CommerceLookupsRecurringCyclePeriodTypeRoute\"),\r\n    CommerceLookupsSubscriptionStatusBatchClient: Symbol(\"CommerceLookupsSubscriptionStatusBatchClient\"),\r\n    CommerceLookupsSubscriptionStatusBatchRoute: Symbol(\"CommerceLookupsSubscriptionStatusBatchRoute\"),\r\n    CommerceLookupsSubscriptionStatusClient: Symbol(\"CommerceLookupsSubscriptionStatusClient\"),\r\n    CommerceLookupsSubscriptionStatusRoute: Symbol(\"CommerceLookupsSubscriptionStatusRoute\"),\r\n    CommerceLookupsInvoiceStatusBatchRoute: Symbol(\"CommerceLookupsInvoiceStatusBatchRoute\"),\r\n    CommerceLookupsInvoiceStatusRoute: Symbol(\"CommerceLookupsInvoiceStatusRoute\"),\r\n    CommerceLookupsInvoiceStatusBatchClient: Symbol(\"CommerceLookupsInvoiceStatusBatchClient\"),\r\n    CommerceLookupsInvoiceStatusClient: Symbol(\"CommerceLookupsInvoiceStatusClient\"),\r\n    Lookups: Symbol(\"Lookups\")\r\n};\r\nexports.TYPES = TYPES;\r\nvar diModule = new inversify_1.ContainerModule(function (bind) {\r\n    bind(TYPES.CommerceCustomerPaymentMethodRoute).to(_1.CommerceCustomerPaymentMethodRoute);\r\n    bind(TYPES.CommerceCustomerPaymentMethodClient).to(_1.CommerceCustomerPaymentMethodClient);\r\n    bind(TYPES.CommerceCustomerRoute).to(_1.CommerceCustomerRoute);\r\n    bind(TYPES.CommerceCustomerClient).to(_1.CommerceCustomerClient);\r\n    bind(TYPES.CommerceInvoiceStreamsRoute).to(_1.CommerceInvoiceStreamsRoute);\r\n    bind(TYPES.CommerceInvoiceStreamsClient).to(_1.CommerceInvoiceStreamsClient);\r\n    bind(TYPES.CommerceInvoiceClient).to(_1.CommerceInvoiceClient);\r\n    bind(TYPES.CommerceInvoiceRoute).to(_1.CommerceInvoiceRoute);\r\n    bind(TYPES.CommercePaymentTransactionRoute).to(_1.CommercePaymentTransactionRoute);\r\n    bind(TYPES.CommercePaymentTransactionClient).to(_1.CommercePaymentTransactionClient);\r\n    bind(TYPES.CommerceProductRoute).to(_1.CommerceProductRoute);\r\n    bind(TYPES.CommerceProductClient).to(_1.CommerceProductClient);\r\n    bind(TYPES.CommerceRoute).to(_1.CommerceRoute);\r\n    bind(TYPES.CommerceClient).to(_1.CommerceClient);\r\n    bind(TYPES.CommerceLookupsAddressTypeBatchRoute).to(_1.CommerceLookupsAddressTypeBatchRoute);\r\n    bind(TYPES.CommerceLookupsAddressTypesBatchClient).to(_1.CommerceLookupsAddressTypesBatchClient);\r\n    bind(TYPES.CommerceLookupsAddressTypeRoute).to(_1.CommerceLookupsAddressTypeRoute);\r\n    bind(TYPES.CommerceLookupsAddressTypesClient).to(_1.CommerceLookupsAddressTypesClient);\r\n    bind(TYPES.CommerceLookupsCountryBatchRoute).to(_1.CommerceLookupsCountryBatchRoute);\r\n    bind(TYPES.CommerceLookupsCountryBatchClient).to(_1.CommerceLookupsCountryBatchClient);\r\n    bind(TYPES.CommerceLookupsCountryRoute).to(_1.CommerceLookupsCountryRoute);\r\n    bind(TYPES.CommerceLookupsCountryClient).to(_1.CommerceLookupsCountryClient);\r\n    bind(TYPES.CommerceLookupsCountryStateBatchRoute).to(_1.CommerceLookupsCountryStateBatchRoute);\r\n    bind(TYPES.CommerceLookupsCountryStateBatchClient).to(_1.CommerceLookupsCountryStateBatchClient);\r\n    bind(TYPES.CommerceLookupsCountryStateRoute).to(_1.CommerceLookupsCountryStateRoute);\r\n    bind(TYPES.CommerceLookupsCountryStateClient).to(_1.CommerceLookupsCountryStateClient);\r\n    bind(TYPES.CommerceLookupsPaymentMethodBatchRoute).to(_1.CommerceLookupsPaymentMethodBatchRoute);\r\n    bind(TYPES.CommerceLookupsPaymentMethodBatchClient).to(_1.CommerceLookupsPaymentMethodBatchClient);\r\n    bind(TYPES.CommerceLookupsPaymentMethodRoute).to(_1.CommerceLookupsPaymentMethodRoute);\r\n    bind(TYPES.CommerceLookupsPaymentMethodClient).to(_1.CommerceLookupsPaymentMethodClient);\r\n    bind(TYPES.CommerceLookupsPaymentTransactionStatusBatchRoute).to(_1.CommerceLookupsPaymentTransactionStatusBatchRoute);\r\n    bind(TYPES.CommerceLookupsPaymentTransactionStatusBatchClient).to(_1.CommerceLookupsPaymentTransactionStatusBatchClient);\r\n    bind(TYPES.CommerceLookupsPaymentTransactionStatusRoute).to(_1.CommerceLookupsPaymentTransactionStatusRoute);\r\n    bind(TYPES.CommerceLookupsPaymentTransactionStatusClient).to(_1.CommerceLookupsPaymentTransactionStatusClient);\r\n    bind(TYPES.CommerceLookupsRecurringCyclePeriodTypeBatchRoute).to(_1.CommerceLookupsRecurringCyclePeriodTypeBatchRoute);\r\n    bind(TYPES.CommerceLookupsRecurringCyclePeriodTypeBatchClient).to(_1.CommerceLookupsRecurringCyclePeriodTypeBatchClient);\r\n    bind(TYPES.CommerceLookupsRecurringCyclePeriodTypeRoute).to(_1.CommerceLookupsRecurringCyclePeriodTypeRoute);\r\n    bind(TYPES.CommerceLookupsRecurringCyclePeriodTypeClient).to(_1.CommerceLookupsRecurringCyclePeriodTypeClient);\r\n    bind(TYPES.CommerceLookupsSubscriptionStatusBatchRoute).to(_1.CommerceLookupsSubscriptionStatusBatchRoute);\r\n    bind(TYPES.CommerceLookupsSubscriptionStatusBatchClient).to(_1.CommerceLookupsSubscriptionStatusBatchClient);\r\n    bind(TYPES.CommerceLookupsSubscriptionStatusRoute).to(_1.CommerceLookupsSubscriptionStatusRoute);\r\n    bind(TYPES.CommerceLookupsSubscriptionStatusClient).to(_1.CommerceLookupsSubscriptionStatusClient);\r\n    bind(TYPES.CommerceLookupsInvoiceStatusBatchRoute).to(_1.CommerceLookupsInvoiceStatusBatchRoute);\r\n    bind(TYPES.CommerceLookupsInvoiceStatusRoute).to(_1.CommerceLookupsInvoiceStatusRoute);\r\n    bind(TYPES.CommerceLookupsInvoiceStatusBatchClient).to(_1.CommerceLookupsInvoiceStatusBatchClient);\r\n    bind(TYPES.CommerceLookupsInvoiceStatusClient).to(_1.CommerceLookupsInvoiceStatusClient);\r\n    bind(TYPES.Lookups).to(_1.Lookups);\r\n});\r\nexports.diModule = diModule;\r\n\n\n/***/ }),\n/* 173 */\n/***/ (function(module, exports, __webpack_require__) {\n\n\"use strict\";\n/* globals module */\r\n/**\r\n * @module commerceInvoiceClient\r\n * @description  Commerce Invoice Client provides an easy way to consume  Commerce REST API end-points. In order to obtain a needed routes `commerceInvoiceClient` uses `commerceInvoiceRoute`.\r\n */\r\n\r\nObject.defineProperty(exports, \"__esModule\", { value: true });\r\nvar tslib_1 = __webpack_require__(1);\r\nvar inversify_1 = __webpack_require__(0);\r\n;\r\nvar httpApi_1 = __webpack_require__(4);\r\nvar _1 = __webpack_require__(5);\r\nvar CommerceInvoiceClient = (function () {\r\n    function CommerceInvoiceClient(commerceInvoiceRoute, commerceInvoiceStreamsClient, apiClient) {\r\n        this.commerceInvoiceRoute = commerceInvoiceRoute;\r\n        this.commerceInvoiceStreamsClient = commerceInvoiceStreamsClient;\r\n        this.apiClient = apiClient;\r\n    }\r\n    Object.defineProperty(CommerceInvoiceClient.prototype, \"routeDefinition\", {\r\n        get: function () {\r\n            return this.commerceInvoiceRoute;\r\n        },\r\n        enumerable: true,\r\n        configurable: true\r\n    });\r\n    Object.defineProperty(CommerceInvoiceClient.prototype, \"streams\", {\r\n        get: function () {\r\n            return this.commerceInvoiceStreamsClient;\r\n        },\r\n        enumerable: true,\r\n        configurable: true\r\n    });\r\n    /**\r\n     * Returns a promise that is resolved once the find action has been performed. Success response returns a list of commerce resources matching the given criteria.\r\n     * @method\r\n     * @example commerceInvoiceClient.find({\r\n                    pageNumber : 1,\r\n                    pageSize : 10,\r\n                    orderBy : '<field>',\r\n                    orderDirection : '<asc|desc>',\r\n                    search : '<search-phrase>'\r\n                })\r\n                .then(function (collection) {\r\n                    // perform success action here\r\n                },\r\n                 function (response, status, headers, config) {\r\n                     // perform error handling here\r\n                });\r\n     **/\r\n    CommerceInvoiceClient.prototype.find = function (options) {\r\n        return this.apiClient.get(this.routeDefinition.find(options));\r\n    };\r\n    /**\r\n     * Returns a promise that is resolved once the get action has been performed. Success response returns the commerce resource.\r\n     * @method\r\n     * @example commerceInvoiceClient.get()\r\n                    .then(function (data) {\r\n                        // perform success action here\r\n                    },\r\n                     function (response, status, headers, config) {\r\n                         // perform error handling here\r\n                    });\r\n     **/\r\n    CommerceInvoiceClient.prototype.get = function (id, options) {\r\n        return this.apiClient.get(this.commerceInvoiceRoute.get(id, options));\r\n    };\r\n    /**\r\n     * Returns a promise that is resolved once the update commerce action has been performed; this action updates a commerce resource. This route uses HAL enabled objects to obtain routes and therefore it doesn't apply `commerceInvoiceRoute` route template. Here is an example of how a route can be obtained from HAL enabled objects:\r\n     * ```\r\n     * let params = modelMapper.removeParams(commerceInvoice);\r\n     * let uri = params['model'].links('put').href;\r\n     * ```\r\n     * @method\r\n     * @example // commerceInvoice is a resource previously fetched using get action.\r\n                    commerceInvoice.invoiceStatusId : '<new-invoice-status-id>';\r\n                    commerceInvoiceClient.update(commerceInvoice)\r\n                        .then(function (data) {\r\n                            // perform success action here\r\n                        },\r\n                         function (response, status, headers, config) {\r\n                             // perform error handling here\r\n                        });\r\n     **/\r\n    CommerceInvoiceClient.prototype.update = function (data) {\r\n        return this.apiClient.put(this.routeDefinition.update(data), this.routeDefinition.updateParams(data));\r\n    };\r\n    /**\r\n     * Returns a promise that is resolved once the remove action has been performed. This action will remove a commerce resource from the system if successfully completed. This route uses HAL enabled objects to obtain routes and therefore it doesn't apply `commerceInvoiceRoute` route template. Here is an example of how a route can be obtained from HAL enabled objects:\r\n     * ```\r\n     * let params = modelMapper.removeParams(commerceInvoice);\r\n     * let uri = params['model'].links('delete').href;\r\n     * ```\r\n     * @method\r\n     * @example // commerceInvoice is a resource previously fetched using get action.\r\n                        commerceInvoiceClient.remove(commerceInvoice)\r\n                            .then(function (data) {\r\n                                // perform success action here\r\n                            },\r\n                             function (response, status, headers, config) {\r\n                                 // perform error handling here\r\n                            });\r\n     **/\r\n    CommerceInvoiceClient.prototype.remove = function (data) {\r\n        return this.apiClient.delete(this.routeDefinition.delete(data));\r\n    };\r\n    return CommerceInvoiceClient;\r\n}());\r\nCommerceInvoiceClient = tslib_1.__decorate([\r\n    inversify_1.injectable(),\r\n    tslib_1.__param(0, inversify_1.inject(_1.TYPES.CommerceInvoiceRoute)),\r\n    tslib_1.__param(1, inversify_1.inject(_1.TYPES.CommerceInvoiceStreamsClient)),\r\n    tslib_1.__param(2, inversify_1.inject(httpApi_1.httpTYPES.ApiClient)),\r\n    tslib_1.__metadata(\"design:paramtypes\", [typeof (_a = typeof _1.CommerceInvoiceRoute !== \"undefined\" && _1.CommerceInvoiceRoute) === \"function\" && _a || Object, typeof (_b = typeof _1.CommerceInvoiceStreamsClient !== \"undefined\" && _1.CommerceInvoiceStreamsClient) === \"function\" && _b || Object, typeof (_c = typeof httpApi_1.ApiClient !== \"undefined\" && httpApi_1.ApiClient) === \"function\" && _c || Object])\r\n], CommerceInvoiceClient);\r\nexports.CommerceInvoiceClient = CommerceInvoiceClient;\r\nvar _a, _b, _c;\r\n\n\n/***/ }),\n/* 174 */\n/***/ (function(module, exports, __webpack_require__) {\n\n\"use strict\";\n/* globals module */\r\n/**\r\n * @module commerceInvoiceRoute\r\n * @description Baasic Commerce Invoice Route Definition provides Baasic route templates which can be expanded to Baasic REST URIs. Various services can use Baasic Commerce Invoice Route Definition to obtain a needed routes while other routes will be obtained through HAL. By convention, all route services  use the same function names as their corresponding services.\r\n */\r\n\r\nObject.defineProperty(exports, \"__esModule\", { value: true });\r\nvar tslib_1 = __webpack_require__(1);\r\nvar inversify_1 = __webpack_require__(0);\r\nvar common_1 = __webpack_require__(2);\r\n;\r\nvar contracts_1 = __webpack_require__(3);\r\nvar _1 = __webpack_require__(5);\r\nvar CommerceInvoiceRoute = (function (_super) {\r\n    tslib_1.__extends(CommerceInvoiceRoute, _super);\r\n    function CommerceInvoiceRoute(commerceInvoiceStreamsRoute, appOptions) {\r\n        var _this = _super.call(this, appOptions) || this;\r\n        _this.commerceInvoiceStreamsRoute = commerceInvoiceStreamsRoute;\r\n        _this.appOptions = appOptions;\r\n        _this.findRoute = 'commerce/invoices/{?customerId,invoiceStatusId,subscriptionId,dateCreatedMin,dateCreatedMax,searchQuery,page,rpp,sort,embed,fields}';\r\n        _this.getRoute = 'commerce/invoices/{id}/{?embed,fields}';\r\n        _this.updateRoute = 'commerce/invoices/{id}';\r\n        _this.deleteRoute = 'commerce/invoices/{id}';\r\n        return _this;\r\n    }\r\n    Object.defineProperty(CommerceInvoiceRoute.prototype, \"streams\", {\r\n        get: function () {\r\n            return this.commerceInvoiceStreamsRoute;\r\n        },\r\n        enumerable: true,\r\n        configurable: true\r\n    });\r\n    /**\r\n     * Parses find commerce invoice route which can be expanded with additional options. Supported items are:\r\n     * - `customerId` - The customer identifier.\r\n     * - `invoiceStatusId` - A invoice status unique identifier.\r\n     * - `subscriptionId` - A subscription unique identifier.\r\n     * - `dateCreatedMin` - A date created minimum date filter.\r\n     * - `dateCreatedMax` - A date created maximum date filter.\r\n     * - `searchQuery` - A string value used to identify commerce resources using the phrase search.\r\n     * - `page` - A value used to set the page number, i.e. to retrieve certain commerce subset from the storage.\r\n     * - `rpp` - A value used to limit the size of result set per page.\r\n     * - `sort` - A string used to set the commerce property to sort the result collection by.\r\n     * - `embed` - Comma separated list of resources to be contained within the current representation.\r\n     * @method\r\n     * @example commerceInvoiceRoute.find({searchQuery: '<search-phrase>'});\r\n     **/\r\n    CommerceInvoiceRoute.prototype.find = function (options) {\r\n        return _super.prototype.baseFind.call(this, this.findRoute, options);\r\n    };\r\n    /**\r\n     * Parses get route; this route doesn't expose any properties.\r\n     * @method\r\n     * @example commerceInvoiceRoute.get(id, options);\r\n     **/\r\n    CommerceInvoiceRoute.prototype.get = function (id, options) {\r\n        return _super.prototype.baseGet.call(this, this.getRoute, id, options);\r\n    };\r\n    /**\r\n     * Parses update route; this route doesn't expose any properties.\r\n     * @method\r\n     * @example commerceInvoiceRoute.update(data);\r\n     **/\r\n    CommerceInvoiceRoute.prototype.update = function (data) {\r\n        return _super.prototype.baseUpdate.call(this, this.updateRoute, data);\r\n    };\r\n    /**\r\n     * Parses delete route; this route doesn't expose any properties.\r\n     * @method\r\n     * @example commerceInvoiceRoute.delete(data);\r\n     **/\r\n    CommerceInvoiceRoute.prototype.delete = function (data) {\r\n        return _super.prototype.baseDelete.call(this, this.deleteRoute, data);\r\n    };\r\n    return CommerceInvoiceRoute;\r\n}(common_1.BaseRoute));\r\nCommerceInvoiceRoute = tslib_1.__decorate([\r\n    inversify_1.injectable(),\r\n    tslib_1.__param(0, inversify_1.inject(_1.TYPES.CommerceInvoiceStreamsRoute)),\r\n    tslib_1.__param(1, inversify_1.inject(contracts_1.TYPES.IAppOptions)),\r\n    tslib_1.__metadata(\"design:paramtypes\", [typeof (_a = typeof _1.CommerceInvoiceStreamsRoute !== \"undefined\" && _1.CommerceInvoiceStreamsRoute) === \"function\" && _a || Object, typeof (_b = typeof contracts_1.IAppOptions !== \"undefined\" && contracts_1.IAppOptions) === \"function\" && _b || Object])\r\n], CommerceInvoiceRoute);\r\nexports.CommerceInvoiceRoute = CommerceInvoiceRoute;\r\nvar _a, _b;\r\n/**\r\n * @copyright (c) 2017 Mono Ltd\r\n * @license MIT\r\n * @author Mono Ltd\r\n * @overview\r\n ***Notes:**\r\n - Refer to the [Baasic REST API](http://dev.baasic.com/api/reference/home) for detailed information about available Baasic REST API end-points.\r\n - [URI Template](https://github.com/Baasic/uritemplate-js) syntax enables expanding the Baasic route templates to Baasic REST URIs providing it with an object that contains URI parameters.\r\n - All end-point objects are transformed by the associated route service.\r\n */ \r\n\n\n/***/ }),\n/* 175 */\n/***/ (function(module, exports, __webpack_require__) {\n\n\"use strict\";\n/* globals module */\r\n/**\r\n * @module commerceInvoiceStreamsClient\r\n * @description  Commerce Invoice Streams Client provides an easy way to consume  Commerce REST API end-points. In order to obtain a needed routes `commerceInvoiceStreamsClient` uses `commerceInvoiceStreamsRoute`.\r\n */\r\n\r\nObject.defineProperty(exports, \"__esModule\", { value: true });\r\nvar tslib_1 = __webpack_require__(1);\r\nvar inversify_1 = __webpack_require__(0);\r\n;\r\nvar httpApi_1 = __webpack_require__(4);\r\nvar _1 = __webpack_require__(5);\r\nvar CommerceInvoiceStreamsClient = (function () {\r\n    function CommerceInvoiceStreamsClient(commerceInvoiceStreamsRoute, apiClient) {\r\n        this.commerceInvoiceStreamsRoute = commerceInvoiceStreamsRoute;\r\n        this.apiClient = apiClient;\r\n    }\r\n    Object.defineProperty(CommerceInvoiceStreamsClient.prototype, \"routeDefinition\", {\r\n        get: function () {\r\n            return this.commerceInvoiceStreamsRoute;\r\n        },\r\n        enumerable: true,\r\n        configurable: true\r\n    });\r\n    /**\r\n     * Returns a promise that is resolved once the get action has been performed. Success response returns the invoice stream if successfully completed.\r\n     * @method\r\n     * @example // commerceInvoice is a resource previously fetched using get action.\r\n                    commerceInvoiceStreamsClient.get({id: commerceInvoice.id})\r\n                        .then(function (data) {\r\n                            // perform success action here\r\n                        },\r\n                         function (response, status, headers, config) {\r\n                             // perform error handling here\r\n                        });\r\n     **/\r\n    CommerceInvoiceStreamsClient.prototype.get = function (data) {\r\n        return this.apiClient.get(this.routeDefinition.get(data));\r\n    };\r\n    /**\r\n     * Returns a promise that is resolved once the get action has been performed. Success response returns the invoice stream as a blob. For more information on Blob objects please see [Blob Documentation](https://developer.mozilla.org/en-US/docs/Web/API/Blob).\r\n     * @method\r\n     * @example // Request the original blob\r\n                        commerceInvoiceClient.getBlobl({id: commerceInvoice.id})\r\n                            .then(function (data) {\r\n                                // perform success action here\r\n                            },\r\n                             function (response, status, headers, config) {\r\n                                 // perform error handling here\r\n                            });\r\n     **/\r\n    CommerceInvoiceStreamsClient.prototype.getBlob = function (data) {\r\n        return this.apiClient.get(this.commerceInvoiceStreamsRoute.get(data), { 'Accept': 'application/octet-stream' });\r\n    };\r\n    return CommerceInvoiceStreamsClient;\r\n}());\r\nCommerceInvoiceStreamsClient = tslib_1.__decorate([\r\n    inversify_1.injectable(),\r\n    tslib_1.__param(0, inversify_1.inject(_1.TYPES.CommerceInvoiceStreamsRoute)),\r\n    tslib_1.__param(1, inversify_1.inject(httpApi_1.httpTYPES.ApiClient)),\r\n    tslib_1.__metadata(\"design:paramtypes\", [typeof (_a = typeof _1.CommerceInvoiceStreamsRoute !== \"undefined\" && _1.CommerceInvoiceStreamsRoute) === \"function\" && _a || Object, typeof (_b = typeof httpApi_1.ApiClient !== \"undefined\" && httpApi_1.ApiClient) === \"function\" && _b || Object])\r\n], CommerceInvoiceStreamsClient);\r\nexports.CommerceInvoiceStreamsClient = CommerceInvoiceStreamsClient;\r\nvar _a, _b;\r\n/**\r\n * @copyright (c) 2017 Mono Ltd\r\n * @license MIT\r\n * @author Mono Ltd\r\n * @overview\r\n ***Notes:**\r\n - Refer to the [Baasic REST API](http://dev.baasic.com/api/reference/home) for detailed information about available Baasic REST API end-points.\r\n - All end-point objects are transformed by the associated route service.\r\n */ \r\n\n\n/***/ }),\n/* 176 */\n/***/ (function(module, exports, __webpack_require__) {\n\n\"use strict\";\n/* globals module */\r\n/**\r\n * @module commerceInvoiceStreamsRoute\r\n * @description Baasic Commerce Invoice Streams Route Definition provides Baasic route templates which can be expanded to Baasic REST URIs. Various services can use Baasic Commerce Invoice Streams Route Definition to obtain a needed routes while other routes will be obtained through HAL. By convention, all route services  use the same function names as their corresponding services.\r\n */\r\n\r\nObject.defineProperty(exports, \"__esModule\", { value: true });\r\nvar tslib_1 = __webpack_require__(1);\r\nvar inversify_1 = __webpack_require__(0);\r\nvar common_1 = __webpack_require__(2);\r\n;\r\nvar contracts_1 = __webpack_require__(3);\r\nvar CommerceInvoiceStreamsRoute = (function (_super) {\r\n    tslib_1.__extends(CommerceInvoiceStreamsRoute, _super);\r\n    function CommerceInvoiceStreamsRoute(appOptions) {\r\n        var _this = _super.call(this, appOptions) || this;\r\n        _this.appOptions = appOptions;\r\n        _this.getRoute = 'commerce/invoice-streams/{id}';\r\n        return _this;\r\n    }\r\n    /**\r\n     * Parses get route; this route doesn't expose any properties.\r\n     * @method\r\n     * @example commerceInvoiceStremsRoute.get(data);\r\n     **/\r\n    CommerceInvoiceStreamsRoute.prototype.get = function (data) {\r\n        if (!this.utility.isObject(data)) {\r\n            data = {\r\n                id: data\r\n            };\r\n        }\r\n        return _super.prototype.baseCreate.call(this, this.getRoute, data);\r\n    };\r\n    return CommerceInvoiceStreamsRoute;\r\n}(common_1.BaseRoute));\r\nCommerceInvoiceStreamsRoute = tslib_1.__decorate([\r\n    inversify_1.injectable(),\r\n    tslib_1.__param(0, inversify_1.inject(contracts_1.TYPES.IAppOptions)),\r\n    tslib_1.__metadata(\"design:paramtypes\", [typeof (_a = typeof contracts_1.IAppOptions !== \"undefined\" && contracts_1.IAppOptions) === \"function\" && _a || Object])\r\n], CommerceInvoiceStreamsRoute);\r\nexports.CommerceInvoiceStreamsRoute = CommerceInvoiceStreamsRoute;\r\nvar _a;\r\n/**\r\n * @copyright (c) 2017 Mono Ltd\r\n * @license MIT\r\n * @author Mono Ltd\r\n * @overview\r\n ***Notes:**\r\n - Refer to the [Baasic REST API](http://dev.baasic.com/api/reference/home) for detailed information about available Baasic REST API end-points.\r\n - [URI Template](https://github.com/Baasic/uritemplate-js) syntax enables expanding the Baasic route templates to Baasic REST URIs providing it with an object that contains URI parameters.\r\n - All end-point objects are transformed by the associated route service.\r\n */ \r\n\n\n/***/ }),\n/* 177 */\n/***/ (function(module, exports, __webpack_require__) {\n\n\"use strict\";\n\r\nfunction __export(m) {\r\n    for (var p in m) if (!exports.hasOwnProperty(p)) exports[p] = m[p];\r\n}\r\nObject.defineProperty(exports, \"__esModule\", { value: true });\r\n__export(__webpack_require__(176));\r\n__export(__webpack_require__(175));\r\n__export(__webpack_require__(174));\r\n__export(__webpack_require__(173));\r\n\n\n/***/ }),\n/* 178 */\n/***/ (function(module, exports, __webpack_require__) {\n\n\"use strict\";\n/* globals module */\r\n/**\r\n * @module commerceLookupsAddressTypeBatchClient\r\n * @description  Commerce Lookups Address Type Batch Client provides an easy way to consume  Commerce REST API end-points. In order to obtain a needed routes `commerceLookupsAddressTypesBatchClient` uses `commerceLookupsAddressTypeBatchRoute`.\r\n */\r\n\r\nObject.defineProperty(exports, \"__esModule\", { value: true });\r\nvar tslib_1 = __webpack_require__(1);\r\nvar inversify_1 = __webpack_require__(0);\r\n;\r\nvar httpApi_1 = __webpack_require__(4);\r\nvar _1 = __webpack_require__(5);\r\nvar CommerceLookupsAddressTypesBatchClient = (function () {\r\n    function CommerceLookupsAddressTypesBatchClient(commerceLookupsAddressTypeBatchRoute, apiClient) {\r\n        this.commerceLookupsAddressTypeBatchRoute = commerceLookupsAddressTypeBatchRoute;\r\n        this.apiClient = apiClient;\r\n    }\r\n    Object.defineProperty(CommerceLookupsAddressTypesBatchClient.prototype, \"routeDefinition\", {\r\n        get: function () {\r\n            return this.commerceLookupsAddressTypeBatchRoute;\r\n        },\r\n        enumerable: true,\r\n        configurable: true\r\n    });\r\n    /**\r\n     * Returns a promise that is resolved once the create commerce action has been performed; this action creates a new commerce resources.\r\n     * @method\r\n     * @example commerceLookupsAddressTypeBatchClient.create([{\r\n                     name : '<name>',\r\n                     abrv: '<abbreviation>',\r\n                     description: '<description>'\r\n                    }])\r\n                    .then(function (data) {\r\n                        // perform success action here\r\n                    },\r\n                     function (response, status, headers, config) {\r\n                         // perform error handling here\r\n                    });\r\n     **/\r\n    CommerceLookupsAddressTypesBatchClient.prototype.create = function (data) {\r\n        return this.apiClient.post(this.routeDefinition.create(), this.routeDefinition.createParams(data));\r\n    };\r\n    /**\r\n     * Returns a promise that is resolved once the update commerce action has been performed; this action updates specified commerce resources.\r\n     * @method\r\n     * @example   commerceLookupsAddressTypeBatchClient.update(commerceAddressTypes)\r\n                       .then(function (data) {\r\n                           // perform success action here\r\n                       },\r\n                        function (response, status, headers, config) {\r\n                            // perform error handling here\r\n                       });\r\n    **/\r\n    CommerceLookupsAddressTypesBatchClient.prototype.update = function (data) {\r\n        return this.apiClient.put(this.routeDefinition.update(), this.routeDefinition.updateParams(data));\r\n    };\r\n    /**\r\n     * Returns a promise that is resolved once the remove commerce action has been performed. This action will remove commerce resources from the system if successfully completed.\r\n     * @method\r\n     * @example commerceLookupsAddressTypeClient.remove(commerceAddressTypeIds)\r\n                    .then(function (data) {\r\n                        // perform success action here\r\n                    },\r\n                     function (response, status, headers, config) {\r\n                         // perform error handling here\r\n                    });\r\n     **/\r\n    CommerceLookupsAddressTypesBatchClient.prototype.remove = function (ids) {\r\n        return this.apiClient.delete(this.commerceLookupsAddressTypeBatchRoute.delete(), undefined, ids);\r\n    };\r\n    return CommerceLookupsAddressTypesBatchClient;\r\n}());\r\nCommerceLookupsAddressTypesBatchClient = tslib_1.__decorate([\r\n    inversify_1.injectable(),\r\n    tslib_1.__param(0, inversify_1.inject(_1.TYPES.CommerceLookupsAddressTypeBatchRoute)),\r\n    tslib_1.__param(1, inversify_1.inject(httpApi_1.httpTYPES.ApiClient)),\r\n    tslib_1.__metadata(\"design:paramtypes\", [typeof (_a = typeof _1.CommerceLookupsAddressTypeBatchRoute !== \"undefined\" && _1.CommerceLookupsAddressTypeBatchRoute) === \"function\" && _a || Object, typeof (_b = typeof httpApi_1.ApiClient !== \"undefined\" && httpApi_1.ApiClient) === \"function\" && _b || Object])\r\n], CommerceLookupsAddressTypesBatchClient);\r\nexports.CommerceLookupsAddressTypesBatchClient = CommerceLookupsAddressTypesBatchClient;\r\nvar _a, _b;\r\n/**\r\n * @copyright (c) 2017 Mono Ltd\r\n * @license MIT\r\n * @author Mono Ltd\r\n * @overview\r\n ***Notes:**\r\n - Refer to the [Baasic REST API](http://dev.baasic.com/api/reference/home) for detailed information about available Baasic REST API end-points.\r\n - All end-point objects are transformed by the associated route service.\r\n */ \r\n\n\n/***/ }),\n/* 179 */\n/***/ (function(module, exports, __webpack_require__) {\n\n\"use strict\";\n/* globals module */\r\n/**\r\n * @module commerceLookupsAddressTypeBatchRoute\r\n * @description Baasic Commerce Lookups AddressType Batch Route Definition provides Baasic route templates which can be expanded to Baasic REST URIs. Various services can use Baasic Commerce Lookups AddressType Batch Route Definition to obtain a needed routes while other routes will be obtained through HAL. By convention, all route services  use the same function names as their corresponding services.\r\n */\r\n\r\nObject.defineProperty(exports, \"__esModule\", { value: true });\r\nvar tslib_1 = __webpack_require__(1);\r\nvar inversify_1 = __webpack_require__(0);\r\nvar common_1 = __webpack_require__(2);\r\n;\r\nvar contracts_1 = __webpack_require__(3);\r\nvar CommerceLookupsAddressTypeBatchRoute = (function (_super) {\r\n    tslib_1.__extends(CommerceLookupsAddressTypeBatchRoute, _super);\r\n    function CommerceLookupsAddressTypeBatchRoute(appOptions) {\r\n        var _this = _super.call(this, appOptions) || this;\r\n        _this.appOptions = appOptions;\r\n        _this.createRoute = 'commerce/lookups/address-types/batch';\r\n        _this.updateRoute = 'commerce/lookups/address-types/batch';\r\n        _this.deleteRoute = 'commerce/lookups/address-types/batch';\r\n        return _this;\r\n    }\r\n    /**\r\n     * Parses create commerce address type batch route; this route does not expose any additional options\r\n     * @method\r\n     * @example commerceLookupsAddressTypeRoute.create();\r\n     */\r\n    CommerceLookupsAddressTypeBatchRoute.prototype.create = function () {\r\n        return _super.prototype.baseCreate.call(this, this.createRoute, {});\r\n    };\r\n    /**\r\n     * Parses remove commerce address type batch route; this route does not expose any additional options\r\n     * @method\r\n     * @example commerceLookupsAddressTypeRoute.update();\r\n     */\r\n    CommerceLookupsAddressTypeBatchRoute.prototype.update = function () {\r\n        return _super.prototype.baseUpdate.call(this, this.updateRoute, {});\r\n    };\r\n    /**\r\n     * Parses remove commerce address type batch route; this route does not expose any additional options\r\n     * @method\r\n     * @example commerceLookupsAddressTypeRoute.remove();\r\n     */\r\n    CommerceLookupsAddressTypeBatchRoute.prototype.delete = function () {\r\n        return _super.prototype.baseDelete.call(this, this.deleteRoute, {});\r\n    };\r\n    return CommerceLookupsAddressTypeBatchRoute;\r\n}(common_1.BaseRoute));\r\nCommerceLookupsAddressTypeBatchRoute = tslib_1.__decorate([\r\n    inversify_1.injectable(),\r\n    tslib_1.__param(0, inversify_1.inject(contracts_1.TYPES.IAppOptions)),\r\n    tslib_1.__metadata(\"design:paramtypes\", [typeof (_a = typeof contracts_1.IAppOptions !== \"undefined\" && contracts_1.IAppOptions) === \"function\" && _a || Object])\r\n], CommerceLookupsAddressTypeBatchRoute);\r\nexports.CommerceLookupsAddressTypeBatchRoute = CommerceLookupsAddressTypeBatchRoute;\r\nvar _a;\r\n/**\r\n * @copyright (c) 2017 Mono Ltd\r\n * @license MIT\r\n * @author Mono Ltd\r\n * @overview\r\n ***Notes:**\r\n - Refer to the [Baasic REST API](http://dev.baasic.com/api/reference/home) for detailed information about available Baasic REST API end-points.\r\n - [URI Template](https://github.com/Baasic/uritemplate-js) syntax enables expanding the Baasic route templates to Baasic REST URIs providing it with an object that contains URI parameters.\r\n - All end-point objects are transformed by the associated route service.\r\n */ \r\n\n\n/***/ }),\n/* 180 */\n/***/ (function(module, exports, __webpack_require__) {\n\n\"use strict\";\n/* globals module */\r\n/**\r\n * @module commerceLookupsAddressTypeClient\r\n * @description  Commerce Lookups Address Type Client provides an easy way to consume  Commerce REST API end-points. In order to obtain a needed routes `commerceLookupsAddressTypesClient` uses `commerceLookupsAddressTypeRoute`.\r\n */\r\n\r\nObject.defineProperty(exports, \"__esModule\", { value: true });\r\nvar tslib_1 = __webpack_require__(1);\r\nvar inversify_1 = __webpack_require__(0);\r\n;\r\nvar httpApi_1 = __webpack_require__(4);\r\nvar _1 = __webpack_require__(5);\r\nvar CommerceLookupsAddressTypesClient = (function () {\r\n    function CommerceLookupsAddressTypesClient(commerceLookupsAddressTypeRoute, commerceLookupsAddressTypesBatchClient, apiClient) {\r\n        this.commerceLookupsAddressTypeRoute = commerceLookupsAddressTypeRoute;\r\n        this.commerceLookupsAddressTypesBatchClient = commerceLookupsAddressTypesBatchClient;\r\n        this.apiClient = apiClient;\r\n    }\r\n    Object.defineProperty(CommerceLookupsAddressTypesClient.prototype, \"routeDefinition\", {\r\n        get: function () {\r\n            return this.commerceLookupsAddressTypeRoute;\r\n        },\r\n        enumerable: true,\r\n        configurable: true\r\n    });\r\n    Object.defineProperty(CommerceLookupsAddressTypesClient.prototype, \"batch\", {\r\n        get: function () {\r\n            return this.commerceLookupsAddressTypesBatchClient;\r\n        },\r\n        enumerable: true,\r\n        configurable: true\r\n    });\r\n    /**\r\n     * Returns a promise that is resolved once the find action has been performed. Success response returns a list of commerce resources matching the given criteria.\r\n     * @method\r\n     * @example commerceLookupsAddressTypeClient.find({\r\n                    pageNumber : 1,\r\n                    pageSize : 10,\r\n                    orderBy : '<field>',\r\n                    orderDirection : '<asc|desc>',\r\n                    search : '<search-phrase>'\r\n                })\r\n                .then(function (collection) {\r\n                    // perform success action here\r\n                },\r\n                 function (response, status, headers, config) {\r\n                     // perform error handling here\r\n                });\r\n     **/\r\n    CommerceLookupsAddressTypesClient.prototype.find = function (options) {\r\n        return this.apiClient.get(this.routeDefinition.find(options));\r\n    };\r\n    /**\r\n     * Returns a promise that is resolved once the get action has been performed. Success response returns the commerce resource.\r\n     * @method\r\n     * @example commerceLookupsAddressTypeClient.get()\r\n                   .then(function (data) {\r\n                       // perform success action here\r\n                   },\r\n                    function (response, status, headers, config) {\r\n                        // perform error handling here\r\n                   });\r\n    **/\r\n    CommerceLookupsAddressTypesClient.prototype.get = function (id, options) {\r\n        return this.apiClient.get(this.commerceLookupsAddressTypeRoute.get(id, options));\r\n    };\r\n    /**\r\n     * Returns a promise that is resolved once the create commerce action has been performed; this action creates a new commerce resource.\r\n     * @method\r\n     * @example commerceLookupsAddressTypeClient.create({\r\n                       name : '<name>',\r\n                       abrv: '<abbreviation>',\r\n                       description: '<description>'\r\n                   })\r\n                   .then(function (data) {\r\n                       // perform success action here\r\n                   },\r\n                    function (response, status, headers, config) {\r\n                        // perform error handling here\r\n                   });\r\n    **/\r\n    CommerceLookupsAddressTypesClient.prototype.create = function (data) {\r\n        return this.apiClient.post(this.routeDefinition.create(), this.routeDefinition.createParams(data));\r\n    };\r\n    /**\r\n     * Returns a promise that is resolved once the update commerce action has been performed; this action updates a commerce resource. This route uses HAL enabled objects to obtain routes and therefore it doesn't apply `commerceLookupsAddressTypeRoute` route template. Here is an example of how a route can be obtained from HAL enabled objects:\r\n     * ```\r\n     * let params = modelMapper.removeParams(commerceAddressType);\r\n     * let uri = params['model'].links('put').href;\r\n     * ```\r\n     * @method\r\n     * @example // commerceAddressType is a resource previously fetched using get action.\r\n                    commerceAddressType.description = '<description>';\r\n                    commerceLookupsAddressTypeClient.update(commerceAddressType)\r\n                        .then(function (data) {\r\n                            // perform success action here\r\n                        },\r\n                         function (response, status, headers, config) {\r\n                             // perform error handling here\r\n                        });\r\n     **/\r\n    CommerceLookupsAddressTypesClient.prototype.update = function (data) {\r\n        return this.apiClient.put(this.routeDefinition.update(data), this.routeDefinition.updateParams(data));\r\n    };\r\n    /**\r\n     * Returns a promise that is resolved once the remove action has been performed. This action will remove a commerce resource from the system if successfully completed. This route uses HAL enabled objects to obtain routes and therefore it doesn't apply `commerceLookupsAddressTypeRoute` route template. Here is an example of how a route can be obtained from HAL enabled objects:\r\n     * ```\r\n     * let params = modelMapper.removeParams(commerceAddressType);\r\n     * let uri = params['model'].links('delete').href;\r\n     * ```\r\n     * @method\r\n     * @example // commerceAddressType is a resource previously fetched using get action.\r\n                    commerceLookupsAddressTypeClient.remove(commerceAddressType)\r\n                        .then(function (data) {\r\n                            // perform success action here\r\n                        },\r\n                         function (response, status, headers, config) {\r\n                             // perform error handling here\r\n                        });\r\n     **/\r\n    CommerceLookupsAddressTypesClient.prototype.remove = function (data) {\r\n        return this.apiClient.delete(this.routeDefinition.delete(data));\r\n    };\r\n    return CommerceLookupsAddressTypesClient;\r\n}());\r\nCommerceLookupsAddressTypesClient = tslib_1.__decorate([\r\n    inversify_1.injectable(),\r\n    tslib_1.__param(0, inversify_1.inject(_1.TYPES.CommerceLookupsAddressTypeRoute)),\r\n    tslib_1.__param(1, inversify_1.inject(_1.TYPES.CommerceLookupsAddressTypesBatchClient)),\r\n    tslib_1.__param(2, inversify_1.inject(httpApi_1.httpTYPES.ApiClient)),\r\n    tslib_1.__metadata(\"design:paramtypes\", [typeof (_a = typeof _1.CommerceLookupsAddressTypeRoute !== \"undefined\" && _1.CommerceLookupsAddressTypeRoute) === \"function\" && _a || Object, typeof (_b = typeof _1.CommerceLookupsAddressTypesBatchClient !== \"undefined\" && _1.CommerceLookupsAddressTypesBatchClient) === \"function\" && _b || Object, typeof (_c = typeof httpApi_1.ApiClient !== \"undefined\" && httpApi_1.ApiClient) === \"function\" && _c || Object])\r\n], CommerceLookupsAddressTypesClient);\r\nexports.CommerceLookupsAddressTypesClient = CommerceLookupsAddressTypesClient;\r\nvar _a, _b, _c;\r\n/**\r\n * @copyright (c) 2017 Mono Ltd\r\n * @license MIT\r\n * @author Mono Ltd\r\n * @overview\r\n ***Notes:**\r\n - Refer to the [Baasic REST API](http://dev.baasic.com/api/reference/home) for detailed information about available Baasic REST API end-points.\r\n - All end-point objects are transformed by the associated route service.\r\n */ \r\n\n\n/***/ }),\n/* 181 */\n/***/ (function(module, exports, __webpack_require__) {\n\n\"use strict\";\n/* globals module */\r\n/**\r\n * @module commerceLookupsAddressTypeRoute\r\n * @description Baasic Commerce Lookups AddressType Route Definition provides Baasic route templates which can be expanded to Baasic REST URIs. Various services can use Baasic Commerce Lookups AddressType Route Definition to obtain a needed routes while other routes will be obtained through HAL. By convention, all route services  use the same function names as their corresponding services.\r\n */\r\n\r\nObject.defineProperty(exports, \"__esModule\", { value: true });\r\nvar tslib_1 = __webpack_require__(1);\r\nvar inversify_1 = __webpack_require__(0);\r\nvar common_1 = __webpack_require__(2);\r\n;\r\nvar contracts_1 = __webpack_require__(3);\r\nvar _1 = __webpack_require__(5);\r\nvar CommerceLookupsAddressTypeRoute = (function (_super) {\r\n    tslib_1.__extends(CommerceLookupsAddressTypeRoute, _super);\r\n    function CommerceLookupsAddressTypeRoute(commerceLookupsAddressTypeBatchRoute, appOptions) {\r\n        var _this = _super.call(this, appOptions) || this;\r\n        _this.commerceLookupsAddressTypeBatchRoute = commerceLookupsAddressTypeBatchRoute;\r\n        _this.appOptions = appOptions;\r\n        _this.findRoute = 'commerce/lookups/address-types/{?searchQuery,page,rpp,sort,embed,fields}';\r\n        _this.getRoute = 'commerce/lookups/address-types/{id}/{?embed,fields}';\r\n        _this.createRoute = 'commerce/lookups/address-types';\r\n        _this.updateRoute = 'commerce/lookups/address-types/{id}';\r\n        _this.deleteRoute = 'commerce/lookups/address-types/{id}';\r\n        return _this;\r\n    }\r\n    Object.defineProperty(CommerceLookupsAddressTypeRoute.prototype, \"batch\", {\r\n        get: function () {\r\n            return this.commerceLookupsAddressTypeBatchRoute;\r\n        },\r\n        enumerable: true,\r\n        configurable: true\r\n    });\r\n    /**\r\n     * Parses find commerce address type route which can be expanded with additional options. Supported items are:\r\n     * - `searchQuery` - A string value used to identify commerce resources using the phrase search.\r\n     * - `page` - A value used to set the page number, i.e. to retrieve certain commerce subset from the storage.\r\n     * - `rpp` - A value used to limit the size of result set per page.\r\n     * - `sort` - A string used to set the commerce property to sort the result collection by.\r\n     * - `embed` - Comma separated list of resources to be contained within the current representation.\r\n     * @method\r\n     * @example commerceLookupsAddressTypeRoute.find({searchQuery: '<search-phrase>'});\r\n     **/\r\n    CommerceLookupsAddressTypeRoute.prototype.find = function (options) {\r\n        return _super.prototype.baseFind.call(this, this.findRoute, options);\r\n    };\r\n    /**\r\n     * Parses get route; this route doesn't expose any properties.\r\n     * @method\r\n     * @example commerceLookupsAddressTypeRoute.get(id, options);\r\n     **/\r\n    CommerceLookupsAddressTypeRoute.prototype.get = function (id, options) {\r\n        return _super.prototype.baseGet.call(this, this.getRoute, id, options);\r\n    };\r\n    /**\r\n     * Parses create commerce address type route; this URI template does not expose any additional options.\r\n     * @method\r\n     * @example commerceLookupsAddressTypeRoute.create();\r\n     **/\r\n    CommerceLookupsAddressTypeRoute.prototype.create = function () {\r\n        return _super.prototype.baseCreate.call(this, this.createRoute, {});\r\n    };\r\n    /**\r\n     * Parses update commerce address type route; this URI template does not expose any additional options.\r\n     * @method\r\n     * @example commerceLookupsAddressTypeRoute.update(data);\r\n     **/\r\n    CommerceLookupsAddressTypeRoute.prototype.update = function (data) {\r\n        return _super.prototype.baseUpdate.call(this, this.updateRoute, data);\r\n    };\r\n    /**\r\n     * Parses delete commerce address type route; this URI template does not expose any additional options.\r\n     * @method\r\n     * @example commerceLookupsAddressTypeRoute.delete(data);\r\n     **/\r\n    CommerceLookupsAddressTypeRoute.prototype.delete = function (data) {\r\n        return _super.prototype.baseDelete.call(this, this.deleteRoute, data);\r\n    };\r\n    return CommerceLookupsAddressTypeRoute;\r\n}(common_1.BaseRoute));\r\nCommerceLookupsAddressTypeRoute = tslib_1.__decorate([\r\n    inversify_1.injectable(),\r\n    tslib_1.__param(0, inversify_1.inject(_1.TYPES.CommerceLookupsAddressTypeBatchRoute)),\r\n    tslib_1.__param(1, inversify_1.inject(contracts_1.TYPES.IAppOptions)),\r\n    tslib_1.__metadata(\"design:paramtypes\", [typeof (_a = typeof _1.CommerceLookupsAddressTypeBatchRoute !== \"undefined\" && _1.CommerceLookupsAddressTypeBatchRoute) === \"function\" && _a || Object, typeof (_b = typeof contracts_1.IAppOptions !== \"undefined\" && contracts_1.IAppOptions) === \"function\" && _b || Object])\r\n], CommerceLookupsAddressTypeRoute);\r\nexports.CommerceLookupsAddressTypeRoute = CommerceLookupsAddressTypeRoute;\r\nvar _a, _b;\r\n/**\r\n * @copyright (c) 2017 Mono Ltd\r\n * @license MIT\r\n * @author Mono Ltd\r\n * @overview\r\n ***Notes:**\r\n - Refer to the [Baasic REST API](http://dev.baasic.com/api/reference/home) for detailed information about available Baasic REST API end-points.\r\n - [URI Template](https://github.com/Baasic/uritemplate-js) syntax enables expanding the Baasic route templates to Baasic REST URIs providing it with an object that contains URI parameters.\r\n - All end-point objects are transformed by the associated route service.\r\n */ \r\n\n\n/***/ }),\n/* 182 */\n/***/ (function(module, exports, __webpack_require__) {\n\n\"use strict\";\n\r\nfunction __export(m) {\r\n    for (var p in m) if (!exports.hasOwnProperty(p)) exports[p] = m[p];\r\n}\r\nObject.defineProperty(exports, \"__esModule\", { value: true });\r\n__export(__webpack_require__(179));\r\n__export(__webpack_require__(178));\r\n__export(__webpack_require__(181));\r\n__export(__webpack_require__(180));\r\n\n\n/***/ }),\n/* 183 */\n/***/ (function(module, exports, __webpack_require__) {\n\n\"use strict\";\n/* globals module */\r\n/**\r\n * @module commerceCountryStateBatchClient\r\n * @description  Commerce Country State Batch Client provides an easy way to consume  Commerce REST API end-points. In order to obtain a needed routes `commerceCountryStateBatchClient` uses `commerceCountryStateBatchRoute`.\r\n */\r\n\r\nObject.defineProperty(exports, \"__esModule\", { value: true });\r\nvar tslib_1 = __webpack_require__(1);\r\nvar inversify_1 = __webpack_require__(0);\r\n;\r\nvar httpApi_1 = __webpack_require__(4);\r\nvar _1 = __webpack_require__(5);\r\nvar CommerceLookupsCountryStateBatchClient = (function () {\r\n    function CommerceLookupsCountryStateBatchClient(commerceLookupsCountryStateBatchRoute, apiClient) {\r\n        this.commerceLookupsCountryStateBatchRoute = commerceLookupsCountryStateBatchRoute;\r\n        this.apiClient = apiClient;\r\n    }\r\n    Object.defineProperty(CommerceLookupsCountryStateBatchClient.prototype, \"routeDefinition\", {\r\n        get: function () {\r\n            return this.commerceLookupsCountryStateBatchRoute;\r\n        },\r\n        enumerable: true,\r\n        configurable: true\r\n    });\r\n    /**\r\n     * Returns a promise that is resolved once the create commerce action has been performed; this action creates a new commerce resources.\r\n     * @method\r\n     * @example commerceLookupsCountryStateBatchClient.create([{\r\n                    countryId: '<country-id>',\r\n                    name : '<name>',\r\n                    abrv: '<abbreviation>',\r\n                    description: '<description>'\r\n                }])\r\n                .then(function (data) {\r\n                    // perform success action here\r\n                },\r\n                 function (response, status, headers, config) {\r\n                     // perform error handling here\r\n                });\r\n     **/\r\n    CommerceLookupsCountryStateBatchClient.prototype.create = function (data) {\r\n        return this.apiClient.post(this.routeDefinition.create(), this.routeDefinition.createParams(data));\r\n    };\r\n    /**\r\n     * Returns a promise that is resolved once the update commerce action has been performed; this action updates specified commerce resources.\r\n     * @method\r\n     * @example commerceLookupsCountryStateBatchClient.update(commerceCountryStates)\r\n                    .then(function (data) {\r\n                        // perform success action here\r\n                    },\r\n                     function (response, status, headers, config) {\r\n                         // perform error handling here\r\n                    });\r\n     **/\r\n    CommerceLookupsCountryStateBatchClient.prototype.update = function (data) {\r\n        return this.apiClient.put(this.routeDefinition.update(), this.routeDefinition.updateParams(data));\r\n    };\r\n    /**\r\n     * Returns a promise that is resolved once the remove commerce action has been performed. This action will remove commerce resources from the system if successfully completed.\r\n     * @method\r\n     * @example commerceLookupsCountryStateBatchClient.remove(commerceCountryStateIds)\r\n                   .then(function (data) {\r\n                       // perform success action here\r\n                   },\r\n                    function (response, status, headers, config) {\r\n                        // perform error handling here\r\n                   });\r\n    **/\r\n    CommerceLookupsCountryStateBatchClient.prototype.remove = function (ids) {\r\n        return this.apiClient.delete(this.commerceLookupsCountryStateBatchRoute.delete(), undefined, ids);\r\n    };\r\n    return CommerceLookupsCountryStateBatchClient;\r\n}());\r\nCommerceLookupsCountryStateBatchClient = tslib_1.__decorate([\r\n    inversify_1.injectable(),\r\n    tslib_1.__param(0, inversify_1.inject(_1.TYPES.CommerceLookupsCountryStateBatchRoute)),\r\n    tslib_1.__param(1, inversify_1.inject(httpApi_1.httpTYPES.ApiClient)),\r\n    tslib_1.__metadata(\"design:paramtypes\", [typeof (_a = typeof _1.CommerceLookupsCountryStateBatchRoute !== \"undefined\" && _1.CommerceLookupsCountryStateBatchRoute) === \"function\" && _a || Object, typeof (_b = typeof httpApi_1.ApiClient !== \"undefined\" && httpApi_1.ApiClient) === \"function\" && _b || Object])\r\n], CommerceLookupsCountryStateBatchClient);\r\nexports.CommerceLookupsCountryStateBatchClient = CommerceLookupsCountryStateBatchClient;\r\nvar _a, _b;\r\n/**\r\n * @copyright (c) 2017 Mono Ltd\r\n * @license MIT\r\n * @author Mono Ltd\r\n * @overview\r\n ***Notes:**\r\n - Refer to the [Baasic REST API](http://dev.baasic.com/api/reference/home) for detailed information about available Baasic REST API end-points.\r\n - All end-point objects are transformed by the associated route service.\r\n */ \r\n\n\n/***/ }),\n/* 184 */\n/***/ (function(module, exports, __webpack_require__) {\n\n\"use strict\";\n/* globals module */\r\n/**\r\n * @module commerceLookupsCountryStateBatchRoute\r\n * @description Baasic Commerce Lookups Country State Batch Route Definition provides Baasic route templates which can be expanded to Baasic REST URIs. Various services can use Baasic Commerce Lookups Country State Batch Route Definition to obtain a needed routes while other routes will be obtained through HAL. By convention, all route services  use the same function names as their corresponding services.\r\n */\r\n\r\nObject.defineProperty(exports, \"__esModule\", { value: true });\r\nvar tslib_1 = __webpack_require__(1);\r\nvar inversify_1 = __webpack_require__(0);\r\nvar common_1 = __webpack_require__(2);\r\n;\r\nvar contracts_1 = __webpack_require__(3);\r\nvar CommerceLookupsCountryStateBatchRoute = (function (_super) {\r\n    tslib_1.__extends(CommerceLookupsCountryStateBatchRoute, _super);\r\n    function CommerceLookupsCountryStateBatchRoute(appOptions) {\r\n        var _this = _super.call(this, appOptions) || this;\r\n        _this.appOptions = appOptions;\r\n        _this.createRoute = 'commerce/lookups/states/batch';\r\n        _this.updateRoute = 'commerce/lookups/states/batch';\r\n        _this.deleteRoute = 'commerce/lookups/states/batch';\r\n        return _this;\r\n    }\r\n    /**\r\n     * Parses create commerce country state batch route; this route does not expose any additional options\r\n     * @method\r\n     * @example commerceLookupsCountryStateBatchRoute.create();\r\n     */\r\n    CommerceLookupsCountryStateBatchRoute.prototype.create = function () {\r\n        return _super.prototype.baseCreate.call(this, this.createRoute, {});\r\n    };\r\n    /**\r\n     * Parses remove commerce country state batch route; this route does not expose any additional options\r\n     * @method\r\n     * @example commerceLookupsCountryStateBatchRoute.update();\r\n     */\r\n    CommerceLookupsCountryStateBatchRoute.prototype.update = function () {\r\n        return _super.prototype.baseUpdate.call(this, this.updateRoute, {});\r\n    };\r\n    /**\r\n     * Parses remove commerce country state batch route; this route does not expose any additional options\r\n     * @method\r\n     * @example commerceLookupsCountryStateBatchRoute.remove();\r\n     */\r\n    CommerceLookupsCountryStateBatchRoute.prototype.delete = function () {\r\n        return _super.prototype.baseDelete.call(this, this.deleteRoute, {});\r\n    };\r\n    return CommerceLookupsCountryStateBatchRoute;\r\n}(common_1.BaseRoute));\r\nCommerceLookupsCountryStateBatchRoute = tslib_1.__decorate([\r\n    inversify_1.injectable(),\r\n    tslib_1.__param(0, inversify_1.inject(contracts_1.TYPES.IAppOptions)),\r\n    tslib_1.__metadata(\"design:paramtypes\", [typeof (_a = typeof contracts_1.IAppOptions !== \"undefined\" && contracts_1.IAppOptions) === \"function\" && _a || Object])\r\n], CommerceLookupsCountryStateBatchRoute);\r\nexports.CommerceLookupsCountryStateBatchRoute = CommerceLookupsCountryStateBatchRoute;\r\nvar _a;\r\n/**\r\n * @copyright (c) 2017 Mono Ltd\r\n * @license MIT\r\n * @author Mono Ltd\r\n * @overview\r\n ***Notes:**\r\n - Refer to the [Baasic REST API](http://dev.baasic.com/api/reference/home) for detailed information about available Baasic REST API end-points.\r\n - [URI Template](https://github.com/Baasic/uritemplate-js) syntax enables expanding the Baasic route templates to Baasic REST URIs providing it with an object that contains URI parameters.\r\n - All end-point objects are transformed by the associated route service.\r\n */ \r\n\n\n/***/ }),\n/* 185 */\n/***/ (function(module, exports, __webpack_require__) {\n\n\"use strict\";\n/* globals module */\r\n/**\r\n * @module commerceCountryStateClient\r\n * @description  Commerce Country State Client provides an easy way to consume  Commerce REST API end-points. In order to obtain a needed routes `commerceCountryStateClient` uses `commerceCountryStateRoute`.\r\n */\r\n\r\nObject.defineProperty(exports, \"__esModule\", { value: true });\r\nvar tslib_1 = __webpack_require__(1);\r\nvar inversify_1 = __webpack_require__(0);\r\n;\r\nvar httpApi_1 = __webpack_require__(4);\r\nvar _1 = __webpack_require__(5);\r\nvar CommerceLookupsCountryStateClient = (function () {\r\n    function CommerceLookupsCountryStateClient(commerceLookupsCountryStateRoute, commerceLookupsCountryStateBatchClient, apiClient) {\r\n        this.commerceLookupsCountryStateRoute = commerceLookupsCountryStateRoute;\r\n        this.commerceLookupsCountryStateBatchClient = commerceLookupsCountryStateBatchClient;\r\n        this.apiClient = apiClient;\r\n    }\r\n    Object.defineProperty(CommerceLookupsCountryStateClient.prototype, \"routeDefinition\", {\r\n        get: function () {\r\n            return this.commerceLookupsCountryStateRoute;\r\n        },\r\n        enumerable: true,\r\n        configurable: true\r\n    });\r\n    Object.defineProperty(CommerceLookupsCountryStateClient.prototype, \"batch\", {\r\n        get: function () {\r\n            return this.commerceLookupsCountryStateBatchClient;\r\n        },\r\n        enumerable: true,\r\n        configurable: true\r\n    });\r\n    /**\r\n     * Returns a promise that is resolved once the find action has been performed. Success response returns a list of commerce resources matching the given criteria.\r\n     * @method\r\n     * @example commerceLookupsCountryStateClient.find({\r\n                    countryId: '<country-id>'\r\n                    pageNumber : 1,\r\n                    pageSize : 10,\r\n                    orderBy : '<field>',\r\n                    orderDirection : '<asc|desc>',\r\n                    search : '<search-phrase>'\r\n                })\r\n                .then(function (collection) {\r\n                    // perform success action here\r\n                },\r\n                 function (response, status, headers, config) {\r\n                     // perform error handling here\r\n                });\r\n     **/\r\n    CommerceLookupsCountryStateClient.prototype.find = function (options) {\r\n        return this.apiClient.get(this.routeDefinition.find(options));\r\n    };\r\n    /**\r\n     * Returns a promise that is resolved once the get action has been performed. Success response returns the commerce resource.\r\n     * @method\r\n     * @example commerceLookupsCountryStateClient.get('<state-id>')\r\n                    .then(function (data) {\r\n                        // perform success action here\r\n                    },\r\n                     function (response, status, headers, config) {\r\n                         // perform error handling here\r\n                    });\r\n     **/\r\n    CommerceLookupsCountryStateClient.prototype.get = function (id, options) {\r\n        return this.apiClient.get(this.commerceLookupsCountryStateRoute.get(id, options));\r\n    };\r\n    /**\r\n     * Returns a promise that is resolved once the create commerce action has been performed; this action creates a new commerce resource.\r\n     * @method\r\n     * @example commerceLookupsCountryStateClient.create({\r\n                      countryId : '<country-id>',\r\n                      name: '<name>',\r\n                      abrv: '<abrv>',\r\n                      description: '<description>'\r\n                  })\r\n                  .then(function (data) {\r\n                      // perform success action here\r\n                  },\r\n                   function (response, status, headers, config) {\r\n                       // perform error handling here\r\n                  });\r\n   **/\r\n    CommerceLookupsCountryStateClient.prototype.create = function (data) {\r\n        return this.apiClient.post(this.routeDefinition.create(), this.routeDefinition.createParams(data));\r\n    };\r\n    /**\r\n     * Returns a promise that is resolved once the update commerce action has been performed; this action updates a commerce resource. This route uses HAL enabled objects to obtain routes and therefore it doesn't apply `commerceLookupsCountryStateRoute` route template. Here is an example of how a route can be obtained from HAL enabled objects:\r\n     * ```\r\n     * let params = modelMapper.removeParams(commerceCountryState);\r\n     * let uri = params['model'].links('put').href;\r\n     * ```\r\n     * @method\r\n     * @example // commerceCountryState is a resource previously fetched using get action.\r\n                    commerceCountryState.description = '<description>';\r\n                    commerceLookupsCountryStateClient.update(commerceCountryState)\r\n                        .then(function (data) {\r\n                            // perform success action here\r\n                        },\r\n                         function (response, status, headers, config) {\r\n                             // perform error handling here\r\n                        });\r\n     **/\r\n    CommerceLookupsCountryStateClient.prototype.update = function (data) {\r\n        return this.apiClient.put(this.routeDefinition.update(data), this.routeDefinition.updateParams(data));\r\n    };\r\n    /**\r\n     * Returns a promise that is resolved once the remove action has been performed. This action will remove a commerce resource from the system if successfully completed. This route uses HAL enabled objects to obtain routes and therefore it doesn't apply `commerceLookupsCountryStateRoute` route template. Here is an example of how a route can be obtained from HAL enabled objects:\r\n     * ```\r\n     * let params = modelMapper.removeParams(commerceCountryState);\r\n     * let uri = params['model'].links('delete').href;\r\n     * ```\r\n     * @method\r\n     * @example // commerceCountryState is a resource previously fetched using get action.\r\n                   commerceLookupsCountryStateClient.remove(commerceCountryState)\r\n                       .then(function (data) {\r\n                           // perform success action here\r\n                       },\r\n                        function (response, status, headers, config) {\r\n                            // perform error handling here\r\n                       });\r\n    **/\r\n    CommerceLookupsCountryStateClient.prototype.remove = function (data) {\r\n        return this.apiClient.delete(this.routeDefinition.delete(data));\r\n    };\r\n    return CommerceLookupsCountryStateClient;\r\n}());\r\nCommerceLookupsCountryStateClient = tslib_1.__decorate([\r\n    inversify_1.injectable(),\r\n    tslib_1.__param(0, inversify_1.inject(_1.TYPES.CommerceLookupsCountryStateRoute)),\r\n    tslib_1.__param(1, inversify_1.inject(_1.TYPES.CommerceLookupsCountryStateBatchClient)),\r\n    tslib_1.__param(2, inversify_1.inject(httpApi_1.httpTYPES.ApiClient)),\r\n    tslib_1.__metadata(\"design:paramtypes\", [typeof (_a = typeof _1.CommerceLookupsCountryStateRoute !== \"undefined\" && _1.CommerceLookupsCountryStateRoute) === \"function\" && _a || Object, typeof (_b = typeof _1.CommerceLookupsCountryStateBatchClient !== \"undefined\" && _1.CommerceLookupsCountryStateBatchClient) === \"function\" && _b || Object, typeof (_c = typeof httpApi_1.ApiClient !== \"undefined\" && httpApi_1.ApiClient) === \"function\" && _c || Object])\r\n], CommerceLookupsCountryStateClient);\r\nexports.CommerceLookupsCountryStateClient = CommerceLookupsCountryStateClient;\r\nvar _a, _b, _c;\r\n/**\r\n * @copyright (c) 2017 Mono Ltd\r\n * @license MIT\r\n * @author Mono Ltd\r\n * @overview\r\n ***Notes:**\r\n - Refer to the [Baasic REST API](http://dev.baasic.com/api/reference/home) for detailed information about available Baasic REST API end-points.\r\n - All end-point objects are transformed by the associated route service.\r\n */ \r\n\n\n/***/ }),\n/* 186 */\n/***/ (function(module, exports, __webpack_require__) {\n\n\"use strict\";\n/* globals module */\r\n/**\r\n * @module commerceLookupsCountryRoute\r\n * @description Baasic Commerce Lookups Country Route Definition provides Baasic route templates which can be expanded to Baasic REST URIs. Various services can use Baasic Commerce Lookups Country Route Definition to obtain a needed routes while other routes will be obtained through HAL. By convention, all route services  use the same function names as their corresponding services.\r\n */\r\n\r\nObject.defineProperty(exports, \"__esModule\", { value: true });\r\nvar tslib_1 = __webpack_require__(1);\r\nvar inversify_1 = __webpack_require__(0);\r\nvar common_1 = __webpack_require__(2);\r\n;\r\nvar contracts_1 = __webpack_require__(3);\r\nvar _1 = __webpack_require__(5);\r\nvar CommerceLookupsCountryStateRoute = (function (_super) {\r\n    tslib_1.__extends(CommerceLookupsCountryStateRoute, _super);\r\n    function CommerceLookupsCountryStateRoute(commerceCountryStateBatchRoute, appOptions) {\r\n        var _this = _super.call(this, appOptions) || this;\r\n        _this.commerceCountryStateBatchRoute = commerceCountryStateBatchRoute;\r\n        _this.appOptions = appOptions;\r\n        _this.findRoute = 'commerce/lookups/states/{?countryId,searchQuery,page,rpp,sort,embed}';\r\n        _this.getRoute = 'commerce/lookups/states/{id}/{?embed}';\r\n        _this.createRoute = 'commerce/lookups/states';\r\n        _this.updateRoute = 'commerce/lookups/states/{id}';\r\n        _this.deleteRoute = 'commerce/lookups/states/{id}';\r\n        return _this;\r\n    }\r\n    Object.defineProperty(CommerceLookupsCountryStateRoute.prototype, \"batch\", {\r\n        get: function () {\r\n            return this.commerceCountryStateBatchRoute;\r\n        },\r\n        enumerable: true,\r\n        configurable: true\r\n    });\r\n    /**\r\n     * Parses find commerce country state route which can be expanded with additional options. Supported items are:\r\n     * - `countryId` - An identifier used to identify commerce country resource.\r\n     * - `searchQuery` - A string value used to identify commerce resources using the phrase search.\r\n     * - `page` - A value used to set the page number, i.e. to retrieve certain commerce subset from the storage.\r\n     * - `rpp` - A value used to limit the size of result set per page.\r\n     * - `sort` - A string used to set the commerce property to sort the result collection by.\r\n     * - `embed` - Comma separated list of resources to be contained within the current representation.\r\n     * @method\r\n     * @example commerceLookupsCountryStateRoute.find({searchQuery: '<search-phrase>'});\r\n     **/\r\n    CommerceLookupsCountryStateRoute.prototype.find = function (options) {\r\n        return _super.prototype.baseFind.call(this, this.findRoute, options);\r\n    };\r\n    /**\r\n     * Parses get commerce country state route which can be expanded with additional options. Supported items are:\r\n     * - `embed` - Comma separated list of resources to be contained within the current representation.\r\n     * @method\r\n     * @example commerceLookupsCountryStateRoute.get(id, options);\r\n     **/\r\n    CommerceLookupsCountryStateRoute.prototype.get = function (id, options) {\r\n        return _super.prototype.baseGet.call(this, this.getRoute, id, options);\r\n    };\r\n    /**\r\n     * Parses create commerce country state route; this URI template does not expose any additional options.\r\n     * @method\r\n     * @example commerceLookupsCountryStateRoute.create();\r\n     **/\r\n    CommerceLookupsCountryStateRoute.prototype.create = function () {\r\n        return _super.prototype.baseCreate.call(this, this.createRoute, {});\r\n    };\r\n    /**\r\n     * Parses update commerce country state route; this URI template does not expose any additional options.\r\n     * @method\r\n     * @example commerceLookupsCountryStateRoute.update(data);\r\n     **/\r\n    CommerceLookupsCountryStateRoute.prototype.update = function (data) {\r\n        return _super.prototype.baseUpdate.call(this, this.updateRoute, data);\r\n    };\r\n    /**\r\n     * Parses delete commerce country state route; this URI template does not expose any additional options.\r\n     * @method\r\n     * @example commerceLookupsCountryStateRoute.delete(data);\r\n     **/\r\n    CommerceLookupsCountryStateRoute.prototype.delete = function (data) {\r\n        return _super.prototype.baseDelete.call(this, this.deleteRoute, data);\r\n    };\r\n    return CommerceLookupsCountryStateRoute;\r\n}(common_1.BaseRoute));\r\nCommerceLookupsCountryStateRoute = tslib_1.__decorate([\r\n    inversify_1.injectable(),\r\n    tslib_1.__param(0, inversify_1.inject(_1.TYPES.CommerceLookupsCountryStateBatchRoute)),\r\n    tslib_1.__param(1, inversify_1.inject(contracts_1.TYPES.IAppOptions)),\r\n    tslib_1.__metadata(\"design:paramtypes\", [typeof (_a = typeof _1.CommerceLookupsCountryStateBatchRoute !== \"undefined\" && _1.CommerceLookupsCountryStateBatchRoute) === \"function\" && _a || Object, typeof (_b = typeof contracts_1.IAppOptions !== \"undefined\" && contracts_1.IAppOptions) === \"function\" && _b || Object])\r\n], CommerceLookupsCountryStateRoute);\r\nexports.CommerceLookupsCountryStateRoute = CommerceLookupsCountryStateRoute;\r\nvar _a, _b;\r\n/**\r\n * @copyright (c) 2017 Mono Ltd\r\n * @license MIT\r\n * @author Mono Ltd\r\n * @overview\r\n ***Notes:**\r\n - Refer to the [Baasic REST API](http://dev.baasic.com/api/reference/home) for detailed information about available Baasic REST API end-points.\r\n - [URI Template](https://github.com/Baasic/uritemplate-js) syntax enables expanding the Baasic route templates to Baasic REST URIs providing it with an object that contains URI parameters.\r\n - All end-point objects are transformed by the associated route service.\r\n */ \r\n\n\n/***/ }),\n/* 187 */\n/***/ (function(module, exports, __webpack_require__) {\n\n\"use strict\";\n\r\nfunction __export(m) {\r\n    for (var p in m) if (!exports.hasOwnProperty(p)) exports[p] = m[p];\r\n}\r\nObject.defineProperty(exports, \"__esModule\", { value: true });\r\n__export(__webpack_require__(184));\r\n__export(__webpack_require__(183));\r\n__export(__webpack_require__(186));\r\n__export(__webpack_require__(185));\r\n\n\n/***/ }),\n/* 188 */\n/***/ (function(module, exports, __webpack_require__) {\n\n\"use strict\";\n/* globals module */\r\n/**\r\n * @module commerceCountryBatchClient\r\n * @description  Commerce Country Batch Client provides an easy way to consume  Commerce REST API end-points. In order to obtain a needed routes `commerceCountryBatchClient` uses `commerceCountryBatchRoute`.\r\n */\r\n\r\nObject.defineProperty(exports, \"__esModule\", { value: true });\r\nvar tslib_1 = __webpack_require__(1);\r\nvar inversify_1 = __webpack_require__(0);\r\n;\r\nvar httpApi_1 = __webpack_require__(4);\r\nvar _1 = __webpack_require__(5);\r\nvar CommerceLookupsCountryBatchClient = (function () {\r\n    function CommerceLookupsCountryBatchClient(commerceLookupsCountryBatchRoute, apiClient) {\r\n        this.commerceLookupsCountryBatchRoute = commerceLookupsCountryBatchRoute;\r\n        this.apiClient = apiClient;\r\n    }\r\n    Object.defineProperty(CommerceLookupsCountryBatchClient.prototype, \"routeDefinition\", {\r\n        get: function () {\r\n            return this.commerceLookupsCountryBatchRoute;\r\n        },\r\n        enumerable: true,\r\n        configurable: true\r\n    });\r\n    /**\r\n     * Returns a promise that is resolved once the create commerce action has been performed; this action creates a new commerce resources.\r\n     * @method\r\n     * @example commerceLookupsCountryClient.create([{\r\n                    name : '<name>',\r\n                    abrv: '<abbreviation>',\r\n                    description: '<description>'\r\n                }])\r\n                .then(function (data) {\r\n                    // perform success action here\r\n                },\r\n                 function (response, status, headers, config) {\r\n                     // perform error handling here\r\n                });\r\n     **/\r\n    CommerceLookupsCountryBatchClient.prototype.create = function (data) {\r\n        return this.apiClient.post(this.routeDefinition.create(), this.routeDefinition.createParams(data));\r\n    };\r\n    /**\r\n     * Returns a promise that is resolved once the update commerce action has been performed; this action updates specified commerce resources.\r\n     * @method\r\n     * @example   commerceLookupsCountryClient.update(commerceCountries)\r\n                      .then(function (data) {\r\n                          // perform success action here\r\n                      },\r\n                       function (response, status, headers, config) {\r\n                           // perform error handling here\r\n                      });\r\n   **/\r\n    CommerceLookupsCountryBatchClient.prototype.update = function (data) {\r\n        return this.apiClient.put(this.routeDefinition.update(), this.routeDefinition.updateParams(data));\r\n    };\r\n    /**\r\n     * Returns a promise that is resolved once the remove commerce action has been performed. This action will remove commerce resources from the system if successfully completed.\r\n     * @method\r\n     * @example commerceLookupsCountryClient.remove(commerceCountryIds)\r\n                   .then(function (data) {\r\n                       // perform success action here\r\n                   },\r\n                    function (response, status, headers, config) {\r\n                        // perform error handling here\r\n                   });\r\n    **/\r\n    CommerceLookupsCountryBatchClient.prototype.remove = function (ids) {\r\n        return this.apiClient.delete(this.commerceLookupsCountryBatchRoute.delete(), undefined, ids);\r\n    };\r\n    return CommerceLookupsCountryBatchClient;\r\n}());\r\nCommerceLookupsCountryBatchClient = tslib_1.__decorate([\r\n    inversify_1.injectable(),\r\n    tslib_1.__param(0, inversify_1.inject(_1.TYPES.CommerceLookupsCountryBatchRoute)),\r\n    tslib_1.__param(1, inversify_1.inject(httpApi_1.httpTYPES.ApiClient)),\r\n    tslib_1.__metadata(\"design:paramtypes\", [typeof (_a = typeof _1.CommerceLookupsCountryBatchRoute !== \"undefined\" && _1.CommerceLookupsCountryBatchRoute) === \"function\" && _a || Object, typeof (_b = typeof httpApi_1.ApiClient !== \"undefined\" && httpApi_1.ApiClient) === \"function\" && _b || Object])\r\n], CommerceLookupsCountryBatchClient);\r\nexports.CommerceLookupsCountryBatchClient = CommerceLookupsCountryBatchClient;\r\nvar _a, _b;\r\n/**\r\n * @copyright (c) 2017 Mono Ltd\r\n * @license MIT\r\n * @author Mono Ltd\r\n * @overview\r\n ***Notes:**\r\n - Refer to the [Baasic REST API](http://dev.baasic.com/api/reference/home) for detailed information about available Baasic REST API end-points.\r\n - All end-point objects are transformed by the associated route service.\r\n */ \r\n\n\n/***/ }),\n/* 189 */\n/***/ (function(module, exports, __webpack_require__) {\n\n\"use strict\";\n/* globals module */\r\n/**\r\n * @module commerceLookupsCountryBatchRoute\r\n * @description Baasic Commerce Lookups Country Batch Route Definition provides Baasic route templates which can be expanded to Baasic REST URIs. Various services can use Baasic Commerce Lookups Country Batch Route Definition to obtain a needed routes while other routes will be obtained through HAL. By convention, all route services  use the same function names as their corresponding services.\r\n */\r\n\r\nObject.defineProperty(exports, \"__esModule\", { value: true });\r\nvar tslib_1 = __webpack_require__(1);\r\nvar inversify_1 = __webpack_require__(0);\r\nvar common_1 = __webpack_require__(2);\r\n;\r\nvar contracts_1 = __webpack_require__(3);\r\nvar CommerceLookupsCountryBatchRoute = (function (_super) {\r\n    tslib_1.__extends(CommerceLookupsCountryBatchRoute, _super);\r\n    function CommerceLookupsCountryBatchRoute(appOptions) {\r\n        var _this = _super.call(this, appOptions) || this;\r\n        _this.appOptions = appOptions;\r\n        _this.createRoute = 'commerce/lookups/countries/batch';\r\n        _this.updateRoute = 'commerce/lookups/countries/batch';\r\n        _this.deleteRoute = 'commerce/lookups/countries/batch';\r\n        return _this;\r\n    }\r\n    /**\r\n     * Parses create commerce country batch route; this route does not expose any additional options\r\n     * @method\r\n     * @example commerceLookupsCountryRoute.create();\r\n     */\r\n    CommerceLookupsCountryBatchRoute.prototype.create = function () {\r\n        return _super.prototype.baseCreate.call(this, this.createRoute, {});\r\n    };\r\n    /**\r\n     * Parses remove commerce country batch route; this route does not expose any additional options\r\n     * @method\r\n     * @example commerceLookupsCountryRoute.update();\r\n     */\r\n    CommerceLookupsCountryBatchRoute.prototype.update = function () {\r\n        return _super.prototype.baseUpdate.call(this, this.updateRoute, {});\r\n    };\r\n    /**\r\n     * Parses remove commerce country batch route; this route does not expose any additional options\r\n     * @method\r\n     * @example commerceLookupsCountryRoute.remove();\r\n     */\r\n    CommerceLookupsCountryBatchRoute.prototype.delete = function () {\r\n        return _super.prototype.baseDelete.call(this, this.deleteRoute, {});\r\n    };\r\n    return CommerceLookupsCountryBatchRoute;\r\n}(common_1.BaseRoute));\r\nCommerceLookupsCountryBatchRoute = tslib_1.__decorate([\r\n    inversify_1.injectable(),\r\n    tslib_1.__param(0, inversify_1.inject(contracts_1.TYPES.IAppOptions)),\r\n    tslib_1.__metadata(\"design:paramtypes\", [typeof (_a = typeof contracts_1.IAppOptions !== \"undefined\" && contracts_1.IAppOptions) === \"function\" && _a || Object])\r\n], CommerceLookupsCountryBatchRoute);\r\nexports.CommerceLookupsCountryBatchRoute = CommerceLookupsCountryBatchRoute;\r\nvar _a;\r\n/**\r\n * @copyright (c) 2017 Mono Ltd\r\n * @license MIT\r\n * @author Mono Ltd\r\n * @overview\r\n ***Notes:**\r\n - Refer to the [Baasic REST API](http://dev.baasic.com/api/reference/home) for detailed information about available Baasic REST API end-points.\r\n - [URI Template](https://github.com/Baasic/uritemplate-js) syntax enables expanding the Baasic route templates to Baasic REST URIs providing it with an object that contains URI parameters.\r\n - All end-point objects are transformed by the associated route service.\r\n */ \r\n\n\n/***/ }),\n/* 190 */\n/***/ (function(module, exports, __webpack_require__) {\n\n\"use strict\";\n/* globals module */\r\n/**\r\n * @module commerceCountryClient\r\n * @description  Commerce Country Client provides an easy way to consume  Commerce REST API end-points. In order to obtain a needed routes `commerceCountryClient` uses `commerceCountryRoute`.\r\n */\r\n\r\nObject.defineProperty(exports, \"__esModule\", { value: true });\r\nvar tslib_1 = __webpack_require__(1);\r\nvar inversify_1 = __webpack_require__(0);\r\n;\r\nvar httpApi_1 = __webpack_require__(4);\r\nvar _1 = __webpack_require__(5);\r\nvar CommerceLookupsCountryClient = (function () {\r\n    function CommerceLookupsCountryClient(commerceLookupsCountryRoute, commerceLookupsCountryBatchClient, apiClient) {\r\n        this.commerceLookupsCountryRoute = commerceLookupsCountryRoute;\r\n        this.commerceLookupsCountryBatchClient = commerceLookupsCountryBatchClient;\r\n        this.apiClient = apiClient;\r\n    }\r\n    Object.defineProperty(CommerceLookupsCountryClient.prototype, \"routeDefinition\", {\r\n        get: function () {\r\n            return this.commerceLookupsCountryRoute;\r\n        },\r\n        enumerable: true,\r\n        configurable: true\r\n    });\r\n    Object.defineProperty(CommerceLookupsCountryClient.prototype, \"batch\", {\r\n        get: function () {\r\n            return this.commerceLookupsCountryBatchClient;\r\n        },\r\n        enumerable: true,\r\n        configurable: true\r\n    });\r\n    /**\r\n     * Returns a promise that is resolved once the find action has been performed. Success response returns a list of commerce resources matching the given criteria.\r\n     * @method\r\n     * @example commerceLookupsCountryClient.find({\r\n                   pageNumber : 1,\r\n                   pageSize : 10,\r\n                   orderBy : '<field>',\r\n                   orderDirection : '<asc|desc>',\r\n                   search : '<search-phrase>'\r\n               })\r\n               .then(function (collection) {\r\n                   // perform success action here\r\n               },\r\n                function (response, status, headers, config) {\r\n                    // perform error handling here\r\n               });\r\n    **/\r\n    CommerceLookupsCountryClient.prototype.find = function (options) {\r\n        return this.apiClient.get(this.routeDefinition.find(options));\r\n    };\r\n    /**\r\n     * Returns a promise that is resolved once the get action has been performed. Success response returns the commerce resource.\r\n     * @method\r\n     * @example commerceLookupsCountryClient.get('<country-id>')\r\n                   .then(function (data) {\r\n                       // perform success action here\r\n                   },\r\n                    function (response, status, headers, config) {\r\n                        // perform error handling here\r\n                   });\r\n    **/\r\n    CommerceLookupsCountryClient.prototype.get = function (id, options) {\r\n        return this.apiClient.get(this.commerceLookupsCountryRoute.get(id, options));\r\n    };\r\n    /**\r\n     * Returns a promise that is resolved once the create commerce action has been performed; this action creates a new commerce resource.\r\n     * @method\r\n     * @example commerceLookupsCountryClient.create({\r\n                    name : '<name>',\r\n                    abrv: '<abbreviation>',\r\n                    description: '<description>'\r\n                })\r\n                .then(function (data) {\r\n                    // perform success action here\r\n                },\r\n                 function (response, status, headers, config) {\r\n                     // perform error handling here\r\n                });\r\n     **/\r\n    CommerceLookupsCountryClient.prototype.create = function (data) {\r\n        return this.apiClient.post(this.routeDefinition.create(), this.routeDefinition.createParams(data));\r\n    };\r\n    /**\r\n     * Returns a promise that is resolved once the update commerce action has been performed; this action updates a commerce resource. This route uses HAL enabled objects to obtain routes and therefore it doesn't apply `baasicCommerceCountryRouteService` route template. Here is an example of how a route can be obtained from HAL enabled objects:\r\n     * ```\r\n     * let params = modelMapper.removeParams(commerceCountry);\r\n     * let uri = params['model'].links('put').href;\r\n     * ```\r\n     * @method\r\n     * @example // commerceCountry is a resource previously fetched using get action.\r\n                        commerceCountry.phoneCode = '<phone-code>';\r\n                        commerceLookupsCountryClient.update(commerceCountry)\r\n                            .then(function (data) {\r\n                                // perform success action here\r\n                            },\r\n                             function (response, status, headers, config) {\r\n                                 // perform error handling here\r\n                            });\r\n     **/\r\n    CommerceLookupsCountryClient.prototype.update = function (data) {\r\n        return this.apiClient.put(this.routeDefinition.update(data), this.routeDefinition.updateParams(data));\r\n    };\r\n    /**\r\n     * Returns a promise that is resolved once the remove action has been performed. This action will remove a commerce resource from the system if successfully completed. This route uses HAL enabled objects to obtain routes and therefore it doesn't apply `commerceLookupsCountryRoute` route template. Here is an example of how a route can be obtained from HAL enabled objects:\r\n     * ```\r\n     * let params = modelMapper.removeParams(commerceCountry);\r\n     * let uri = params['model'].links('delete').href;\r\n     * ```\r\n     * @method\r\n     * @example // commerceCountry is a resource previously fetched using get action.\r\n                    commerceLookupsCountryClient.remove(commerceCountry)\r\n                        .then(function (data) {\r\n                            // perform success action here\r\n                        },\r\n                         function (response, status, headers, config) {\r\n                             // perform error handling here\r\n                        });\r\n     **/\r\n    CommerceLookupsCountryClient.prototype.remove = function (data) {\r\n        return this.apiClient.delete(this.routeDefinition.delete(data));\r\n    };\r\n    return CommerceLookupsCountryClient;\r\n}());\r\nCommerceLookupsCountryClient = tslib_1.__decorate([\r\n    inversify_1.injectable(),\r\n    tslib_1.__param(0, inversify_1.inject(_1.TYPES.CommerceLookupsCountryRoute)),\r\n    tslib_1.__param(1, inversify_1.inject(_1.TYPES.CommerceLookupsCountryBatchClient)),\r\n    tslib_1.__param(2, inversify_1.inject(httpApi_1.httpTYPES.ApiClient)),\r\n    tslib_1.__metadata(\"design:paramtypes\", [typeof (_a = typeof _1.CommerceLookupsCountryRoute !== \"undefined\" && _1.CommerceLookupsCountryRoute) === \"function\" && _a || Object, typeof (_b = typeof _1.CommerceLookupsCountryBatchClient !== \"undefined\" && _1.CommerceLookupsCountryBatchClient) === \"function\" && _b || Object, typeof (_c = typeof httpApi_1.ApiClient !== \"undefined\" && httpApi_1.ApiClient) === \"function\" && _c || Object])\r\n], CommerceLookupsCountryClient);\r\nexports.CommerceLookupsCountryClient = CommerceLookupsCountryClient;\r\nvar _a, _b, _c;\r\n/**\r\n * @copyright (c) 2017 Mono Ltd\r\n * @license MIT\r\n * @author Mono Ltd\r\n * @overview\r\n ***Notes:**\r\n - Refer to the [Baasic REST API](http://dev.baasic.com/api/reference/home) for detailed information about available Baasic REST API end-points.\r\n - All end-point objects are transformed by the associated route service.\r\n */ \r\n\n\n/***/ }),\n/* 191 */\n/***/ (function(module, exports, __webpack_require__) {\n\n\"use strict\";\n/* globals module */\r\n/**\r\n * @module commerceLookupsCountryRoute\r\n * @description Baasic Commerce Lookups Country Route Definition provides Baasic route templates which can be expanded to Baasic REST URIs. Various services can use Baasic Commerce Lookups Country Route Definition to obtain a needed routes while other routes will be obtained through HAL. By convention, all route services  use the same function names as their corresponding services.\r\n */\r\n\r\nObject.defineProperty(exports, \"__esModule\", { value: true });\r\nvar tslib_1 = __webpack_require__(1);\r\nvar inversify_1 = __webpack_require__(0);\r\nvar common_1 = __webpack_require__(2);\r\n;\r\nvar contracts_1 = __webpack_require__(3);\r\nvar _1 = __webpack_require__(5);\r\nvar CommerceLookupsCountryRoute = (function (_super) {\r\n    tslib_1.__extends(CommerceLookupsCountryRoute, _super);\r\n    function CommerceLookupsCountryRoute(commerceCountryBatchRoute, appOptions) {\r\n        var _this = _super.call(this, appOptions) || this;\r\n        _this.commerceCountryBatchRoute = commerceCountryBatchRoute;\r\n        _this.appOptions = appOptions;\r\n        _this.findRoute = 'commerce/lookups/countries/{?searchQuery,page,rpp,sort,embed,fields}';\r\n        _this.getRoute = 'commerce/lookups/countries/{id}/{?embed,fields}';\r\n        _this.createRoute = 'commerce/lookups/countries';\r\n        _this.updateRoute = 'commerce/lookups/countries/{id}';\r\n        _this.deleteRoute = 'commerce/lookups/countries/{id}';\r\n        return _this;\r\n    }\r\n    Object.defineProperty(CommerceLookupsCountryRoute.prototype, \"batch\", {\r\n        get: function () {\r\n            return this.commerceCountryBatchRoute;\r\n        },\r\n        enumerable: true,\r\n        configurable: true\r\n    });\r\n    /**\r\n     * Parses find commerce country route which can be expanded with additional options. Supported items are:\r\n     * - `searchQuery` - A string value used to identify commerce resources using the phrase search.\r\n     * - `page` - A value used to set the page number, i.e. to retrieve certain commerce subset from the storage.\r\n     * - `rpp` - A value used to limit the size of result set per page.\r\n     * - `sort` - A string used to set the commerce property to sort the result collection by.\r\n     * - `embed` - Comma separated list of resources to be contained within the current representation.\r\n     * @method\r\n     * @example commerceLookupsCountryRoute.find({searchQuery: '<search-phrase>'});\r\n     **/\r\n    CommerceLookupsCountryRoute.prototype.find = function (options) {\r\n        return _super.prototype.baseFind.call(this, this.findRoute, options);\r\n    };\r\n    /**\r\n     * Parses get route; this route doesn't expose any properties.\r\n     * @method\r\n     * @example commerceLookupsCountryRoute.get();\r\n     **/\r\n    CommerceLookupsCountryRoute.prototype.get = function (id, options) {\r\n        return _super.prototype.baseGet.call(this, this.getRoute, id, options);\r\n    };\r\n    /**\r\n     * Parses create commerce country route; this URI template does not expose any additional options.\r\n     * @method\r\n     * @example commerceLookupsCountryRoute.create();\r\n     **/\r\n    CommerceLookupsCountryRoute.prototype.create = function () {\r\n        return _super.prototype.baseCreate.call(this, this.createRoute, {});\r\n    };\r\n    /**\r\n    * Parses update commerce country route; this URI template does not expose any additional options.\r\n    * @method\r\n    * @example commerceLookupsCountryRoute.update(data);\r\n    **/\r\n    CommerceLookupsCountryRoute.prototype.update = function (data) {\r\n        return _super.prototype.baseUpdate.call(this, this.updateRoute, data);\r\n    };\r\n    /**\r\n    * Parses delete commerce country route; this URI template does not expose any additional options.\r\n    * @method\r\n    * @example commerceLookupsCountryRoute.delete(data);\r\n    **/\r\n    CommerceLookupsCountryRoute.prototype.delete = function (data) {\r\n        return _super.prototype.baseDelete.call(this, this.deleteRoute, data);\r\n    };\r\n    return CommerceLookupsCountryRoute;\r\n}(common_1.BaseRoute));\r\nCommerceLookupsCountryRoute = tslib_1.__decorate([\r\n    inversify_1.injectable(),\r\n    tslib_1.__param(0, inversify_1.inject(_1.TYPES.CommerceLookupsCountryBatchRoute)),\r\n    tslib_1.__param(1, inversify_1.inject(contracts_1.TYPES.IAppOptions)),\r\n    tslib_1.__metadata(\"design:paramtypes\", [typeof (_a = typeof _1.CommerceLookupsCountryBatchRoute !== \"undefined\" && _1.CommerceLookupsCountryBatchRoute) === \"function\" && _a || Object, typeof (_b = typeof contracts_1.IAppOptions !== \"undefined\" && contracts_1.IAppOptions) === \"function\" && _b || Object])\r\n], CommerceLookupsCountryRoute);\r\nexports.CommerceLookupsCountryRoute = CommerceLookupsCountryRoute;\r\nvar _a, _b;\r\n/**\r\n * @copyright (c) 2017 Mono Ltd\r\n * @license MIT\r\n * @author Mono Ltd\r\n * @overview\r\n ***Notes:**\r\n - Refer to the [Baasic REST API](http://dev.baasic.com/api/reference/home) for detailed information about available Baasic REST API end-points.\r\n - [URI Template](https://github.com/Baasic/uritemplate-js) syntax enables expanding the Baasic route templates to Baasic REST URIs providing it with an object that contains URI parameters.\r\n - All end-point objects are transformed by the associated route service.\r\n */ \r\n\n\n/***/ }),\n/* 192 */\n/***/ (function(module, exports, __webpack_require__) {\n\n\"use strict\";\n\r\nfunction __export(m) {\r\n    for (var p in m) if (!exports.hasOwnProperty(p)) exports[p] = m[p];\r\n}\r\nObject.defineProperty(exports, \"__esModule\", { value: true });\r\n__export(__webpack_require__(189));\r\n__export(__webpack_require__(188));\r\n__export(__webpack_require__(191));\r\n__export(__webpack_require__(190));\r\n\n\n/***/ }),\n/* 193 */\n/***/ (function(module, exports, __webpack_require__) {\n\n\"use strict\";\n/* globals module */\r\n/**\r\n * @module commerceInvoiceStatusBatchClient\r\n * @description  Commerce Invoice Stauts Batch Client provides an easy way to consume  Commerce REST API end-points. In order to obtain a needed routes `commerceInvoiceStatusBatchClient` uses `commerceInvoiceStatusBatchRoute`.\r\n */\r\n\r\nObject.defineProperty(exports, \"__esModule\", { value: true });\r\nvar tslib_1 = __webpack_require__(1);\r\nvar inversify_1 = __webpack_require__(0);\r\n;\r\nvar httpApi_1 = __webpack_require__(4);\r\nvar _1 = __webpack_require__(5);\r\nvar CommerceLookupsInvoiceStatusBatchClient = (function () {\r\n    function CommerceLookupsInvoiceStatusBatchClient(commerceLookupsInvoiceStatusBatchRoute, apiClient) {\r\n        this.commerceLookupsInvoiceStatusBatchRoute = commerceLookupsInvoiceStatusBatchRoute;\r\n        this.apiClient = apiClient;\r\n    }\r\n    Object.defineProperty(CommerceLookupsInvoiceStatusBatchClient.prototype, \"routeDefinition\", {\r\n        get: function () {\r\n            return this.commerceLookupsInvoiceStatusBatchRoute;\r\n        },\r\n        enumerable: true,\r\n        configurable: true\r\n    });\r\n    /**\r\n     * Returns a promise that is resolved once the create commerce action has been performed; this action creates a new commerce resources.\r\n     * @method\r\n     * @example commerceLookupsInvoiceStatusBatchClient.create([{\r\n                    name : '<name>',\r\n                    abrv: '<abbreviation>',\r\n                    description: '<description>'\r\n                }])\r\n                .then(function (data) {\r\n                    // perform success action here\r\n                },\r\n                 function (response, status, headers, config) {\r\n                    // perform error handling here\r\n                });\r\n     **/\r\n    CommerceLookupsInvoiceStatusBatchClient.prototype.create = function (data) {\r\n        return this.apiClient.post(this.routeDefinition.create(), this.routeDefinition.createParams(data));\r\n    };\r\n    /**\r\n     * Returns a promise that is resolved once the update commerce action has been performed; this action updates specified commerce resources.\r\n     * @method\r\n     * @example commerceLookupsInvoiceStatusBatchClient.update(InvoiceStatuses)\r\n                    .then(function (data) {\r\n                        // perform success action here\r\n                    },\r\n                     function (response, status, headers, config) {\r\n                         // perform error handling here\r\n                    });\r\n     **/\r\n    CommerceLookupsInvoiceStatusBatchClient.prototype.update = function (data) {\r\n        return this.apiClient.put(this.routeDefinition.update(), this.routeDefinition.updateParams(data));\r\n    };\r\n    /**\r\n     * Returns a promise that is resolved once the remove commerce action has been performed. This action will remove commerce resources from the system if successfully completed.\r\n     * @method\r\n     * @example commerceLookupsInvoiceStatusBatchClient.remove(InvoiceStatusIds)\r\n                    .then(function (data) {\r\n                        // perform success action here\r\n                    },\r\n                     function (response, status, headers, config) {\r\n                         // perform error handling here\r\n                    });\r\n     **/\r\n    CommerceLookupsInvoiceStatusBatchClient.prototype.remove = function (ids) {\r\n        return this.apiClient.delete(this.commerceLookupsInvoiceStatusBatchRoute.delete(), undefined, ids);\r\n    };\r\n    return CommerceLookupsInvoiceStatusBatchClient;\r\n}());\r\nCommerceLookupsInvoiceStatusBatchClient = tslib_1.__decorate([\r\n    inversify_1.injectable(),\r\n    tslib_1.__param(0, inversify_1.inject(_1.TYPES.CommerceLookupsInvoiceStatusBatchRoute)),\r\n    tslib_1.__param(1, inversify_1.inject(httpApi_1.httpTYPES.ApiClient)),\r\n    tslib_1.__metadata(\"design:paramtypes\", [typeof (_a = typeof _1.CommerceLookupsInvoiceStatusBatchRoute !== \"undefined\" && _1.CommerceLookupsInvoiceStatusBatchRoute) === \"function\" && _a || Object, typeof (_b = typeof httpApi_1.ApiClient !== \"undefined\" && httpApi_1.ApiClient) === \"function\" && _b || Object])\r\n], CommerceLookupsInvoiceStatusBatchClient);\r\nexports.CommerceLookupsInvoiceStatusBatchClient = CommerceLookupsInvoiceStatusBatchClient;\r\nvar _a, _b;\r\n/**\r\n * @copyright (c) 2017 Mono Ltd\r\n * @license MIT\r\n * @author Mono Ltd\r\n * @overview\r\n ***Notes:**\r\n - Refer to the [Baasic REST API](http://dev.baasic.com/api/reference/home) for detailed information about available Baasic REST API end-points.\r\n - All end-point objects are transformed by the associated route service.\r\n */ \r\n\n\n/***/ }),\n/* 194 */\n/***/ (function(module, exports, __webpack_require__) {\n\n\"use strict\";\n/* globals module */\r\n/**\r\n * @module commerceLookupsInvoiceStatusBatchRoute\r\n * @description Baasic Commerce Lookups Invoice Status Batch Route Definition provides Baasic route templates which can be expanded to Baasic REST URIs. Various services can use Baasic Commerce Lookups Country State Batch Route Definition to obtain a needed routes while other routes will be obtained through HAL. By convention, all route services  use the same function names as their corresponding services.\r\n */\r\n\r\nObject.defineProperty(exports, \"__esModule\", { value: true });\r\nvar tslib_1 = __webpack_require__(1);\r\nvar inversify_1 = __webpack_require__(0);\r\nvar common_1 = __webpack_require__(2);\r\n;\r\nvar contracts_1 = __webpack_require__(3);\r\nvar CommerceLookupsInvoiceStatusBatchRoute = (function (_super) {\r\n    tslib_1.__extends(CommerceLookupsInvoiceStatusBatchRoute, _super);\r\n    function CommerceLookupsInvoiceStatusBatchRoute(appOptions) {\r\n        var _this = _super.call(this, appOptions) || this;\r\n        _this.appOptions = appOptions;\r\n        _this.createRoute = 'commerce/lookups/invoice-statuses/batch';\r\n        _this.updateRoute = 'commerce/lookups/invoice-statuses/batch';\r\n        _this.deleteRoute = 'commerce/lookups/invoice-statuses/batch';\r\n        return _this;\r\n    }\r\n    /**\r\n     * Parses create commerce country state batch route; this route does not expose any additional options\r\n     * @method\r\n     * @example commerceLookupsInvoiceStatusBatchRoute.create();\r\n     */\r\n    CommerceLookupsInvoiceStatusBatchRoute.prototype.create = function () {\r\n        return _super.prototype.baseCreate.call(this, this.createRoute, {});\r\n    };\r\n    /**\r\n     * Parses remove commerce country state batch route; this route does not expose any additional options\r\n     * @method\r\n     * @example commerceLookupsInvoiceStatusBatchRoute.update();\r\n     */\r\n    CommerceLookupsInvoiceStatusBatchRoute.prototype.update = function () {\r\n        return _super.prototype.baseUpdate.call(this, this.updateRoute, {});\r\n    };\r\n    /**\r\n     * Parses remove commerce country state batch route; this route does not expose any additional options\r\n     * @method\r\n     * @example commerceLookupsInvoiceStatusBatchRoute.remove();\r\n     */\r\n    CommerceLookupsInvoiceStatusBatchRoute.prototype.delete = function () {\r\n        return _super.prototype.baseDelete.call(this, this.deleteRoute, {});\r\n    };\r\n    return CommerceLookupsInvoiceStatusBatchRoute;\r\n}(common_1.BaseRoute));\r\nCommerceLookupsInvoiceStatusBatchRoute = tslib_1.__decorate([\r\n    inversify_1.injectable(),\r\n    tslib_1.__param(0, inversify_1.inject(contracts_1.TYPES.IAppOptions)),\r\n    tslib_1.__metadata(\"design:paramtypes\", [typeof (_a = typeof contracts_1.IAppOptions !== \"undefined\" && contracts_1.IAppOptions) === \"function\" && _a || Object])\r\n], CommerceLookupsInvoiceStatusBatchRoute);\r\nexports.CommerceLookupsInvoiceStatusBatchRoute = CommerceLookupsInvoiceStatusBatchRoute;\r\nvar _a;\r\n/**\r\n * @copyright (c) 2017 Mono Ltd\r\n * @license MIT\r\n * @author Mono Ltd\r\n * @overview\r\n ***Notes:**\r\n - Refer to the [Baasic REST API](http://dev.baasic.com/api/reference/home) for detailed information about available Baasic REST API end-points.\r\n - [URI Template](https://github.com/Baasic/uritemplate-js) syntax enables expanding the Baasic route templates to Baasic REST URIs providing it with an object that contains URI parameters.\r\n - All end-point objects are transformed by the associated route service.\r\n */ \r\n\n\n/***/ }),\n/* 195 */\n/***/ (function(module, exports, __webpack_require__) {\n\n\"use strict\";\n/* globals module */\r\n/**\r\n * @module commerceLookupsInvoiceStatusClient\r\n * @description  Commerce Lookups InvoiceStatus Client provides an easy way to consume  Commerce REST API end-points. In order to obtain a needed routes `commerceLookupsInvoiceStatusClient` uses `commerceLookupsInvoiceStatusRoute`.\r\n */\r\n\r\nObject.defineProperty(exports, \"__esModule\", { value: true });\r\nvar tslib_1 = __webpack_require__(1);\r\nvar inversify_1 = __webpack_require__(0);\r\n;\r\nvar httpApi_1 = __webpack_require__(4);\r\nvar _1 = __webpack_require__(5);\r\nvar CommerceLookupsInvoiceStatusClient = (function () {\r\n    function CommerceLookupsInvoiceStatusClient(commerceLookupsInvoiceStatusBatchClient, commerceLookupsInvoiceStatusRoute, apiClient) {\r\n        this.commerceLookupsInvoiceStatusBatchClient = commerceLookupsInvoiceStatusBatchClient;\r\n        this.commerceLookupsInvoiceStatusRoute = commerceLookupsInvoiceStatusRoute;\r\n        this.apiClient = apiClient;\r\n    }\r\n    Object.defineProperty(CommerceLookupsInvoiceStatusClient.prototype, \"routeDefinition\", {\r\n        get: function () {\r\n            return this.commerceLookupsInvoiceStatusRoute;\r\n        },\r\n        enumerable: true,\r\n        configurable: true\r\n    });\r\n    Object.defineProperty(CommerceLookupsInvoiceStatusClient.prototype, \"batch\", {\r\n        get: function () {\r\n            return this.commerceLookupsInvoiceStatusBatchClient;\r\n        },\r\n        enumerable: true,\r\n        configurable: true\r\n    });\r\n    /**\r\n     * Returns a promise that is resolved once the find action has been performed. Success response returns a list of commerce resources matching the given criteria.\r\n     * @method\r\n     * @example commerceLookupsInvoiceStatusClient.find({\r\n                        pageNumber : 1,\r\n                        pageSize : 10,\r\n                        orderBy : '<field>',\r\n                        orderDirection : '<asc|desc>',\r\n                        search : '<search-phrase>'\r\n                    })\r\n                    .then(function (collection) {\r\n                        // perform success action here\r\n                    },\r\n                     function (response, status, headers, config) {\r\n                         // perform error handling here\r\n                    });\r\n     **/\r\n    CommerceLookupsInvoiceStatusClient.prototype.find = function (options) {\r\n        return this.apiClient.get(this.routeDefinition.find(options));\r\n    };\r\n    /**\r\n     * Returns a promise that is resolved once the get action has been performed. Success response returns the commerce resource.\r\n     * @method\r\n     * @example commerceLookupsInvoiceStatusClient.get()\r\n                    .then(function (data) {\r\n                        // perform success action here\r\n                    },\r\n                     function (response, status, headers, config) {\r\n                         // perform error handling here\r\n                    });\r\n     **/\r\n    CommerceLookupsInvoiceStatusClient.prototype.get = function (id, options) {\r\n        return this.apiClient.get(this.commerceLookupsInvoiceStatusRoute.get(id, options));\r\n    };\r\n    /**\r\n     * Returns a promise that is resolved once the update commerce action has been performed; this action updates a commerce resource. This route uses HAL enabled objects to obtain routes and therefore it doesn't apply `commerceLookupsInvoiceStatusRoute` route template. Here is an example of how a route can be obtained from HAL enabled objects:\r\n     * ```\r\n     * let params = modelMapper.removeParams(commerceInvoiceStatus);\r\n     * let uri = params['model'].links('put').href;\r\n     * ```\r\n     * @method\r\n     * @example // commerceInvoiceStatus is a resource previously fetched using get action.\r\n                    commerceInvoiceStatus.description = '<description>';\r\n                    commerceLookupsInvoiceStatusClient.update(commerceInvoiceStatus)\r\n                        .then(function (data) {\r\n                            // perform success action here\r\n                        },\r\n                         function (response, status, headers, config) {\r\n                             // perform error handling here\r\n                        });\r\n     **/\r\n    CommerceLookupsInvoiceStatusClient.prototype.update = function (data) {\r\n        return this.apiClient.put(this.routeDefinition.update(data), this.routeDefinition.updateParams(data));\r\n    };\r\n    /**\r\n     * Returns a promise that is resolved once the create commerce action has been performed; this action creates a new commerce resource.\r\n     * @method\r\n     * @example commerceLookupsInvoiceStatusClient.create({\r\n                    name : '<name>',\r\n                    abrv: '<abbreviation>',\r\n                    description: '<description>'\r\n                })\r\n                .then(function (data) {\r\n                    // perform success action here\r\n                },\r\n                 function (response, status, headers, config) {\r\n                     // perform error handling here\r\n                });\r\n     **/\r\n    CommerceLookupsInvoiceStatusClient.prototype.create = function (data) {\r\n        return this.apiClient.post(this.routeDefinition.create(), this.routeDefinition.createParams(data));\r\n    };\r\n    /**\r\n     * Returns a promise that is resolved once the remove action has been performed. This action will remove a commerce resource from the system if successfully completed. This route uses HAL enabled objects to obtain routes and therefore it doesn't apply `commerceLookupsInvoiceStatusRoute` route template. Here is an example of how a route can be obtained from HAL enabled objects:\r\n     * ```\r\n     * let params = modelMapper.removeParams(commerceInvoiceStatus);\r\n     * let uri = params['model'].links('delete').href;\r\n     * ```\r\n     * @method\r\n     * @example // commerceInvoiceStatus is a resource previously fetched using get action.\r\n                    commerceLookupsInvoiceStatusClient.remove(commerceInvoiceStatus)\r\n                        .then(function (data) {\r\n                            // perform success action here\r\n                        },\r\n                         function (response, status, headers, config) {\r\n                             // perform error handling here\r\n                        });\r\n     **/\r\n    CommerceLookupsInvoiceStatusClient.prototype.remove = function (data) {\r\n        return this.apiClient.delete(this.routeDefinition.delete(data));\r\n    };\r\n    return CommerceLookupsInvoiceStatusClient;\r\n}());\r\nCommerceLookupsInvoiceStatusClient = tslib_1.__decorate([\r\n    inversify_1.injectable(),\r\n    tslib_1.__param(0, inversify_1.inject(_1.TYPES.CommerceLookupsInvoiceStatusBatchClient)),\r\n    tslib_1.__param(1, inversify_1.inject(_1.TYPES.CommerceLookupsInvoiceStatusRoute)),\r\n    tslib_1.__param(2, inversify_1.inject(httpApi_1.httpTYPES.ApiClient)),\r\n    tslib_1.__metadata(\"design:paramtypes\", [typeof (_a = typeof _1.CommerceLookupsInvoiceStatusBatchClient !== \"undefined\" && _1.CommerceLookupsInvoiceStatusBatchClient) === \"function\" && _a || Object, typeof (_b = typeof _1.CommerceLookupsInvoiceStatusRoute !== \"undefined\" && _1.CommerceLookupsInvoiceStatusRoute) === \"function\" && _b || Object, typeof (_c = typeof httpApi_1.ApiClient !== \"undefined\" && httpApi_1.ApiClient) === \"function\" && _c || Object])\r\n], CommerceLookupsInvoiceStatusClient);\r\nexports.CommerceLookupsInvoiceStatusClient = CommerceLookupsInvoiceStatusClient;\r\nvar _a, _b, _c;\r\n/**\r\n * @copyright(c) 2017 Mono Ltd\r\n * @license MIT\r\n * @author Mono Ltd\r\n * @overview\r\n ***Notes:**\r\n - Refer to the [Baasic REST API](http://dev.baasic.com/api/reference/home) for detailed information about available Baasic REST API end-points.\r\n - All end-point objects are transformed by the associated route service.\r\n */ \r\n\n\n/***/ }),\n/* 196 */\n/***/ (function(module, exports, __webpack_require__) {\n\n\"use strict\";\n/* globals module */\r\n/**\r\n * @module commerceLookupsInvoiceStatusRoute\r\n * @description Baasic Commerce Lookups InvoiceStatus Route Definition provides Baasic route templates which can be expanded to Baasic REST URIs. Various services can use Baasic Commerce Lookups InvoiceStatus Route Definition to obtain a needed routes while other routes will be obtained through HAL. By convention, all route services  use the same function names as their corresponding services.\r\n */\r\n\r\nObject.defineProperty(exports, \"__esModule\", { value: true });\r\nvar tslib_1 = __webpack_require__(1);\r\nvar inversify_1 = __webpack_require__(0);\r\nvar common_1 = __webpack_require__(2);\r\n;\r\nvar contracts_1 = __webpack_require__(3);\r\nvar _1 = __webpack_require__(5);\r\nvar CommerceLookupsInvoiceStatusRoute = (function (_super) {\r\n    tslib_1.__extends(CommerceLookupsInvoiceStatusRoute, _super);\r\n    function CommerceLookupsInvoiceStatusRoute(basicCommerceLookupsInvoiceStatusBatchRoute, appOptions) {\r\n        var _this = _super.call(this, appOptions) || this;\r\n        _this.basicCommerceLookupsInvoiceStatusBatchRoute = basicCommerceLookupsInvoiceStatusBatchRoute;\r\n        _this.appOptions = appOptions;\r\n        _this.findRoute = 'commerce/lookups/invoice-statuses/{?searchQuery,page,rpp,sort,embed,fields}';\r\n        _this.getRoute = 'commerce/lookups/invoice-statuses/{id}/{?embed,fields}';\r\n        _this.createRoute = 'commerce/lookups/invoice-statuses';\r\n        _this.updateRoute = 'commerce/lookups/invoice-statuses/{id}';\r\n        _this.deleteRoute = 'commerce/lookups/invoice-statuses/{id}';\r\n        return _this;\r\n    }\r\n    Object.defineProperty(CommerceLookupsInvoiceStatusRoute.prototype, \"batch\", {\r\n        get: function () {\r\n            return this.basicCommerceLookupsInvoiceStatusBatchRoute;\r\n        },\r\n        enumerable: true,\r\n        configurable: true\r\n    });\r\n    /**\r\n     * Parses find commerce customer-payment-methods route which can be expanded with additional options. Supported items are:\r\n     * - `searchQuery` - A string value used to identify commerce resources using the phrase search.\r\n     * - `page` - A value used to set the page number, i.e. to retrieve certain commerce subset from the storage.\r\n     * - `rpp` - A value used to limit the size of result set per page.\r\n     * - `sort` - A string used to set the commerce property to sort the result collection by.\r\n     * - `embed` - Comma separated list of resources to be contained within the current representation.\r\n     * @method\r\n     * @param options Query resource options.\r\n     * @example commerceLookupsInvoiceStatusRoute.find({searchQuery: '<search-phrase>'});\r\n     **/\r\n    CommerceLookupsInvoiceStatusRoute.prototype.find = function (options) {\r\n        return _super.prototype.baseFind.call(this, this.findRoute, options);\r\n    };\r\n    /**\r\n     * Parses get route; this route doesn't expose any properties.\r\n     * @method\r\n     * @example commerceLookupsInvoiceStatusRoute.get();\r\n     **/\r\n    CommerceLookupsInvoiceStatusRoute.prototype.get = function (id, options) {\r\n        return _super.prototype.baseGet.call(this, this.getRoute, options);\r\n    };\r\n    /**\r\n     * Parses create commerce payment method route; this URI template does not expose any additional options.\r\n     * @method\r\n     * @example commerceLookupsInvoiceStatusRoute.create();\r\n     **/\r\n    CommerceLookupsInvoiceStatusRoute.prototype.create = function () {\r\n        return _super.prototype.baseCreate.call(this, this.createRoute, {});\r\n    };\r\n    /**\r\n     * Parses update commerce payment method route; this URI template does not expose any additional options.\r\n     * @method\r\n     * @example commerceLookupsInvoiceStatusRoute.update(data);\r\n     **/\r\n    CommerceLookupsInvoiceStatusRoute.prototype.update = function (data) {\r\n        return _super.prototype.baseUpdate.call(this, this.updateRoute, data);\r\n    };\r\n    /**\r\n     * Parses delete commerce payment method route; this URI template does not expose any additional options.\r\n     * @method\r\n     * @example commerceLookupsInvoiceStatusRoute.delete(data);\r\n     **/\r\n    CommerceLookupsInvoiceStatusRoute.prototype.delete = function (data) {\r\n        return _super.prototype.baseDelete.call(this, this.deleteRoute, data);\r\n    };\r\n    return CommerceLookupsInvoiceStatusRoute;\r\n}(common_1.BaseRoute));\r\nCommerceLookupsInvoiceStatusRoute = tslib_1.__decorate([\r\n    inversify_1.injectable(),\r\n    tslib_1.__param(0, inversify_1.inject(_1.TYPES.CommerceLookupsInvoiceStatusBatchRoute)),\r\n    tslib_1.__param(1, inversify_1.inject(contracts_1.TYPES.IAppOptions)),\r\n    tslib_1.__metadata(\"design:paramtypes\", [typeof (_a = typeof _1.CommerceLookupsInvoiceStatusBatchRoute !== \"undefined\" && _1.CommerceLookupsInvoiceStatusBatchRoute) === \"function\" && _a || Object, typeof (_b = typeof contracts_1.IAppOptions !== \"undefined\" && contracts_1.IAppOptions) === \"function\" && _b || Object])\r\n], CommerceLookupsInvoiceStatusRoute);\r\nexports.CommerceLookupsInvoiceStatusRoute = CommerceLookupsInvoiceStatusRoute;\r\nvar _a, _b;\r\n/**\r\n * @copyright (c) 2017 Mono Ltd\r\n * @license MIT\r\n * @author Mono Ltd\r\n * @overview\r\n ***Notes:**\r\n - Refer to the [Baasic REST API](http://dev.baasic.com/api/reference/home) for detailed information about available Baasic REST API end-points.\r\n - [URI Template](https://github.com/Baasic/uritemplate-js) syntax enables expanding the Baasic route templates to Baasic REST URIs providing it with an object that contains URI parameters.\r\n - All end-point objects are transformed by the associated route service.\r\n */ \r\n\n\n/***/ }),\n/* 197 */\n/***/ (function(module, exports, __webpack_require__) {\n\n\"use strict\";\n\r\nfunction __export(m) {\r\n    for (var p in m) if (!exports.hasOwnProperty(p)) exports[p] = m[p];\r\n}\r\nObject.defineProperty(exports, \"__esModule\", { value: true });\r\n__export(__webpack_require__(194));\r\n__export(__webpack_require__(193));\r\n__export(__webpack_require__(196));\r\n__export(__webpack_require__(195));\r\n\n\n/***/ }),\n/* 198 */\n/***/ (function(module, exports, __webpack_require__) {\n\n\"use strict\";\n\r\nObject.defineProperty(exports, \"__esModule\", { value: true });\r\nvar tslib_1 = __webpack_require__(1);\r\nvar _1 = __webpack_require__(5);\r\nvar _2 = __webpack_require__(34);\r\nvar inversify_1 = __webpack_require__(0);\r\nvar Lookups = (function () {\r\n    function Lookups(addressTypes, countries, countryStates, paymentMethods, paymentTransactionStatuses, recurringCyclePeriodTypes, subscriptionStatuses, invoiceStatuses) {\r\n        this.addressTypes = addressTypes;\r\n        this.countries = countries;\r\n        this.countryStates = countryStates;\r\n        this.paymentMethods = paymentMethods;\r\n        this.paymentTransactionStatuses = paymentTransactionStatuses;\r\n        this.recurringCyclePeriodTypes = recurringCyclePeriodTypes;\r\n        this.subscriptionStatuses = subscriptionStatuses;\r\n        this.invoiceStatuses = invoiceStatuses;\r\n    }\r\n    return Lookups;\r\n}());\r\nLookups = tslib_1.__decorate([\r\n    inversify_1.injectable(),\r\n    tslib_1.__param(0, inversify_1.inject(_1.TYPES.CommerceLookupsAddressTypesClient)),\r\n    tslib_1.__param(1, inversify_1.inject(_1.TYPES.CommerceLookupsCountryClient)),\r\n    tslib_1.__param(2, inversify_1.inject(_1.TYPES.CommerceLookupsCountryStateClient)),\r\n    tslib_1.__param(3, inversify_1.inject(_1.TYPES.CommerceLookupsPaymentMethodClient)),\r\n    tslib_1.__param(4, inversify_1.inject(_1.TYPES.CommerceLookupsPaymentTransactionStatusClient)),\r\n    tslib_1.__param(5, inversify_1.inject(_1.TYPES.CommerceLookupsRecurringCyclePeriodTypeClient)),\r\n    tslib_1.__param(6, inversify_1.inject(_1.TYPES.CommerceLookupsSubscriptionStatusClient)),\r\n    tslib_1.__param(7, inversify_1.inject(_1.TYPES.CommerceLookupsInvoiceStatusClient)),\r\n    tslib_1.__metadata(\"design:paramtypes\", [typeof (_a = typeof _2.CommerceLookupsAddressTypesClient !== \"undefined\" && _2.CommerceLookupsAddressTypesClient) === \"function\" && _a || Object, typeof (_b = typeof _2.CommerceLookupsCountryClient !== \"undefined\" && _2.CommerceLookupsCountryClient) === \"function\" && _b || Object, typeof (_c = typeof _2.CommerceLookupsCountryStateClient !== \"undefined\" && _2.CommerceLookupsCountryStateClient) === \"function\" && _c || Object, typeof (_d = typeof _2.CommerceLookupsPaymentMethodClient !== \"undefined\" && _2.CommerceLookupsPaymentMethodClient) === \"function\" && _d || Object, typeof (_e = typeof _2.CommerceLookupsPaymentTransactionStatusClient !== \"undefined\" && _2.CommerceLookupsPaymentTransactionStatusClient) === \"function\" && _e || Object, typeof (_f = typeof _2.CommerceLookupsRecurringCyclePeriodTypeClient !== \"undefined\" && _2.CommerceLookupsRecurringCyclePeriodTypeClient) === \"function\" && _f || Object, typeof (_g = typeof _2.CommerceLookupsSubscriptionStatusClient !== \"undefined\" && _2.CommerceLookupsSubscriptionStatusClient) === \"function\" && _g || Object, typeof (_h = typeof _2.CommerceLookupsInvoiceStatusClient !== \"undefined\" && _2.CommerceLookupsInvoiceStatusClient) === \"function\" && _h || Object])\r\n], Lookups);\r\nexports.Lookups = Lookups;\r\nvar _a, _b, _c, _d, _e, _f, _g, _h;\r\n\n\n/***/ }),\n/* 199 */\n/***/ (function(module, exports, __webpack_require__) {\n\n\"use strict\";\n/* globals module */\r\n/**\r\n * @module commercePaymentMethodBatchClient\r\n * @description  Commerce Payment Method Batch Client provides an easy way to consume  Commerce REST API end-points. In order to obtain a needed routes `commercePaymentMethodBatchClient` uses `commercePaymentMethodBatchRoute`.\r\n */\r\n\r\nObject.defineProperty(exports, \"__esModule\", { value: true });\r\nvar tslib_1 = __webpack_require__(1);\r\nvar inversify_1 = __webpack_require__(0);\r\n;\r\nvar httpApi_1 = __webpack_require__(4);\r\nvar _1 = __webpack_require__(5);\r\nvar CommerceLookupsPaymentMethodBatchClient = (function () {\r\n    function CommerceLookupsPaymentMethodBatchClient(commerceLookupsPaymentMethodBatchRoute, apiClient) {\r\n        this.commerceLookupsPaymentMethodBatchRoute = commerceLookupsPaymentMethodBatchRoute;\r\n        this.apiClient = apiClient;\r\n    }\r\n    Object.defineProperty(CommerceLookupsPaymentMethodBatchClient.prototype, \"routeDefinition\", {\r\n        get: function () {\r\n            return this.commerceLookupsPaymentMethodBatchRoute;\r\n        },\r\n        enumerable: true,\r\n        configurable: true\r\n    });\r\n    /**\r\n     * Returns a promise that is resolved once the create commerce action has been performed; this action creates a new commerce resources.\r\n     * @method\r\n     * @example commerceLookupsPaymentMethodBatchClient.create([{\r\n                        name : '<name>',\r\n                        abrv: '<abbreviation>',\r\n                        description: '<description>',\r\n                        published: '<published>'\r\n                    }])\r\n                    .then(function (data) {\r\n                        // perform success action here\r\n                    },\r\n                     function (response, status, headers, config) {\r\n                         // perform error handling here\r\n                    });\r\n     **/\r\n    CommerceLookupsPaymentMethodBatchClient.prototype.create = function (data) {\r\n        return this.apiClient.post(this.routeDefinition.create(), this.routeDefinition.createParams(data));\r\n    };\r\n    /**\r\n     * Returns a promise that is resolved once the update commerce action has been performed; this action updates specified commerce resources.\r\n     * @method\r\n     * @example   commerceLookupsPaymentMethodBatchClient.update(commercePaymentMethods)\r\n                        .then(function (data) {\r\n                            // perform success action here\r\n                        },\r\n                         function (response, status, headers, config) {\r\n                             // perform error handling here\r\n                        });\r\n     **/\r\n    CommerceLookupsPaymentMethodBatchClient.prototype.update = function (data) {\r\n        return this.apiClient.put(this.routeDefinition.update(), this.routeDefinition.updateParams(data));\r\n    };\r\n    /**\r\n     * Returns a promise that is resolved once the remove commerce action has been performed. This action will remove commerce resources from the system if successfully completed.\r\n     * @method\r\n     * @example commerceLookupsPaymentMethodBatchClient.remove(commercePaymentMethodIds)\r\n                    .then(function (data) {\r\n                        // perform success action here\r\n                    },\r\n                     function (response, status, headers, config) {\r\n                         // perform error handling here\r\n                    });\r\n     **/\r\n    CommerceLookupsPaymentMethodBatchClient.prototype.remove = function (ids) {\r\n        return this.apiClient.delete(this.commerceLookupsPaymentMethodBatchRoute.delete(), undefined, ids);\r\n    };\r\n    return CommerceLookupsPaymentMethodBatchClient;\r\n}());\r\nCommerceLookupsPaymentMethodBatchClient = tslib_1.__decorate([\r\n    inversify_1.injectable(),\r\n    tslib_1.__param(0, inversify_1.inject(_1.TYPES.CommerceLookupsPaymentMethodBatchRoute)),\r\n    tslib_1.__param(1, inversify_1.inject(httpApi_1.httpTYPES.ApiClient)),\r\n    tslib_1.__metadata(\"design:paramtypes\", [typeof (_a = typeof _1.CommerceLookupsPaymentMethodBatchRoute !== \"undefined\" && _1.CommerceLookupsPaymentMethodBatchRoute) === \"function\" && _a || Object, typeof (_b = typeof httpApi_1.ApiClient !== \"undefined\" && httpApi_1.ApiClient) === \"function\" && _b || Object])\r\n], CommerceLookupsPaymentMethodBatchClient);\r\nexports.CommerceLookupsPaymentMethodBatchClient = CommerceLookupsPaymentMethodBatchClient;\r\nvar _a, _b;\r\n/**\r\n * @copyright (c) 2017 Mono Ltd\r\n * @license MIT\r\n * @author Mono Ltd\r\n * @overview\r\n ***Notes:**\r\n - Refer to the [Baasic REST API](http://dev.baasic.com/api/reference/home) for detailed information about available Baasic REST API end-points.\r\n - All end-point objects are transformed by the associated route service.\r\n */ \r\n\n\n/***/ }),\n/* 200 */\n/***/ (function(module, exports, __webpack_require__) {\n\n\"use strict\";\n/* globals module */\r\n/**\r\n * @module commerceLookupsPaymentMethodBatchRoute\r\n * @description Baasic Commerce Lookups Payment Method Batch Route Definition provides Baasic route templates which can be expanded to Baasic REST URIs. Various services can use Baasic Commerce Lookups Country State Batch Route Definition to obtain a needed routes while other routes will be obtained through HAL. By convention, all route services  use the same function names as their corresponding services.\r\n */\r\n\r\nObject.defineProperty(exports, \"__esModule\", { value: true });\r\nvar tslib_1 = __webpack_require__(1);\r\nvar inversify_1 = __webpack_require__(0);\r\nvar common_1 = __webpack_require__(2);\r\n;\r\nvar contracts_1 = __webpack_require__(3);\r\nvar CommerceLookupsPaymentMethodBatchRoute = (function (_super) {\r\n    tslib_1.__extends(CommerceLookupsPaymentMethodBatchRoute, _super);\r\n    function CommerceLookupsPaymentMethodBatchRoute(appOptions) {\r\n        var _this = _super.call(this, appOptions) || this;\r\n        _this.appOptions = appOptions;\r\n        _this.createRoute = 'commerce/lookups/payment-methods/batch';\r\n        _this.updateRoute = 'commerce/lookups/payment-methods/batch';\r\n        _this.deleteRoute = 'commerce/lookups/payment-methods/batch';\r\n        return _this;\r\n    }\r\n    /**\r\n     * Parses create commerce country state batch route; this route does not expose any additional options\r\n     * @method\r\n     * @example commerceLookupsPaymentMethodBatchRoute.create();\r\n     */\r\n    CommerceLookupsPaymentMethodBatchRoute.prototype.create = function () {\r\n        return _super.prototype.baseCreate.call(this, this.createRoute, {});\r\n    };\r\n    /**\r\n     * Parses remove commerce country state batch route; this route does not expose any additional options\r\n     * @method\r\n     * @example commerceLookupsPaymentMethodBatchRoute.update();\r\n     */\r\n    CommerceLookupsPaymentMethodBatchRoute.prototype.update = function () {\r\n        return _super.prototype.baseUpdate.call(this, this.updateRoute, {});\r\n    };\r\n    /**\r\n     * Parses remove commerce country state batch route; this route does not expose any additional options\r\n     * @method\r\n     * @example commerceLookupsPaymentMethodBatchRoute.remove();\r\n     */\r\n    CommerceLookupsPaymentMethodBatchRoute.prototype.delete = function () {\r\n        return _super.prototype.baseDelete.call(this, this.deleteRoute, {});\r\n    };\r\n    return CommerceLookupsPaymentMethodBatchRoute;\r\n}(common_1.BaseRoute));\r\nCommerceLookupsPaymentMethodBatchRoute = tslib_1.__decorate([\r\n    inversify_1.injectable(),\r\n    tslib_1.__param(0, inversify_1.inject(contracts_1.TYPES.IAppOptions)),\r\n    tslib_1.__metadata(\"design:paramtypes\", [typeof (_a = typeof contracts_1.IAppOptions !== \"undefined\" && contracts_1.IAppOptions) === \"function\" && _a || Object])\r\n], CommerceLookupsPaymentMethodBatchRoute);\r\nexports.CommerceLookupsPaymentMethodBatchRoute = CommerceLookupsPaymentMethodBatchRoute;\r\nvar _a;\r\n/**\r\n * @copyright (c) 2017 Mono Ltd\r\n * @license MIT\r\n * @author Mono Ltd\r\n * @overview\r\n ***Notes:**\r\n - Refer to the [Baasic REST API](http://dev.baasic.com/api/reference/home) for detailed information about available Baasic REST API end-points.\r\n - [URI Template](https://github.com/Baasic/uritemplate-js) syntax enables expanding the Baasic route templates to Baasic REST URIs providing it with an object that contains URI parameters.\r\n - All end-point objects are transformed by the associated route service.\r\n */ \r\n\n\n/***/ }),\n/* 201 */\n/***/ (function(module, exports, __webpack_require__) {\n\n\"use strict\";\n/* globals module */\r\n/**\r\n * @module commerceLookupsPaymentMethodClient\r\n * @description  Commerce Lookups PaymentMethod Client provides an easy way to consume  Commerce REST API end-points. In order to obtain a needed routes `commerceLookupsPaymentMethodClient` uses `commerceLookupsPaymentMethodRoute`.\r\n */\r\n\r\nObject.defineProperty(exports, \"__esModule\", { value: true });\r\nvar tslib_1 = __webpack_require__(1);\r\nvar inversify_1 = __webpack_require__(0);\r\n;\r\nvar httpApi_1 = __webpack_require__(4);\r\nvar _1 = __webpack_require__(5);\r\nvar CommerceLookupsPaymentMethodClient = (function () {\r\n    function CommerceLookupsPaymentMethodClient(commerceLookupsPaymentMethodBatchClient, commerceLookupsPaymentMethodRoute, apiClient) {\r\n        this.commerceLookupsPaymentMethodBatchClient = commerceLookupsPaymentMethodBatchClient;\r\n        this.commerceLookupsPaymentMethodRoute = commerceLookupsPaymentMethodRoute;\r\n        this.apiClient = apiClient;\r\n    }\r\n    Object.defineProperty(CommerceLookupsPaymentMethodClient.prototype, \"routeDefinition\", {\r\n        get: function () {\r\n            return this.commerceLookupsPaymentMethodRoute;\r\n        },\r\n        enumerable: true,\r\n        configurable: true\r\n    });\r\n    Object.defineProperty(CommerceLookupsPaymentMethodClient.prototype, \"batch\", {\r\n        get: function () {\r\n            return this.commerceLookupsPaymentMethodBatchClient;\r\n        },\r\n        enumerable: true,\r\n        configurable: true\r\n    });\r\n    /**\r\n     * Returns a promise that is resolved once the find action has been performed. Success response returns a list of commerce resources matching the given criteria.\r\n     * @method\r\n     * @example commerceLookupsPaymentTransactionStatusClient.find({\r\n                        pageNumber : 1,\r\n                        pageSize : 10,\r\n                        orderBy : '<field>',\r\n                        orderDirection : '<asc|desc>',\r\n                        search : '<search-phrase>'\r\n                    })\r\n                    .then(function (collection) {\r\n                        // perform success action here\r\n                    },\r\n                     function (response, status, headers, config) {\r\n                         // perform error handling here\r\n                    });\r\n     **/\r\n    CommerceLookupsPaymentMethodClient.prototype.find = function (options) {\r\n        return this.apiClient.get(this.routeDefinition.find(options));\r\n    };\r\n    /**\r\n     * Returns a promise that is resolved once the get action has been performed. Success response returns the commerce resource.\r\n     * @method\r\n     * @example commerceLookupsPaymentTransactionStatusClient.get()\r\n                   .then(function (data) {\r\n                       // perform success action here\r\n                   },\r\n                    function (response, status, headers, config) {\r\n                        // perform error handling here\r\n                   });\r\n    **/\r\n    CommerceLookupsPaymentMethodClient.prototype.get = function (id, options) {\r\n        return this.apiClient.get(this.commerceLookupsPaymentMethodRoute.get(id, options));\r\n    };\r\n    /**\r\n     * Returns a promise that is resolved once the update commerce action has been performed; this action updates a commerce resource. This route uses HAL enabled objects to obtain routes and therefore it doesn't apply `commerceLookupsPaymentTransactionStatusRoute` route template. Here is an example of how a route can be obtained from HAL enabled objects:\r\n     * ```\r\n     * let params = modelMapper.removeParams(commercePaymentTransactionStatus);\r\n     * let uri = params['model'].links('put').href;\r\n     * ```\r\n     * @method\r\n     * @example // commercePaymentTransactionStatus is a resource previously fetched using get action.\r\n                        commercePaymentTransactionStatus.description = '<description>';\r\n                        commerceLookupsPaymentTransactionStatusClient.update(commercePaymentTransactionStatus)\r\n                            .then(function (data) {\r\n                                // perform success action here\r\n                            },\r\n                             function (response, status, headers, config) {\r\n                                 // perform error handling here\r\n                            });\r\n     **/\r\n    CommerceLookupsPaymentMethodClient.prototype.update = function (data) {\r\n        return this.apiClient.put(this.routeDefinition.update(data), this.routeDefinition.updateParams(data));\r\n    };\r\n    /**\r\n     * Returns a promise that is resolved once the create commerce action has been performed; this action creates a new commerce resource.\r\n     * @method\r\n     * @example commerceLookupsPaymentTransactionStatusClient.create({\r\n                        name : '<name>',\r\n                        abrv: '<abbreviation>',\r\n                        description: '<description>'\r\n                    })\r\n                    .then(function (data) {\r\n                        // perform success action here\r\n                    },\r\n                     function (response, status, headers, config) {\r\n                         // perform error handling here\r\n                    });\r\n     **/\r\n    CommerceLookupsPaymentMethodClient.prototype.create = function (data) {\r\n        return this.apiClient.post(this.routeDefinition.create(), this.routeDefinition.createParams(data));\r\n    };\r\n    /**\r\n     * Returns a promise that is resolved once the remove action has been performed. This action will remove a commerce resource from the system if successfully completed. This route uses HAL enabled objects to obtain routes and therefore it doesn't apply `commerceLookupsPaymentTransactionStatusRoute` route template. Here is an example of how a route can be obtained from HAL enabled objects:\r\n     * ```\r\n     * let params = modelMapper.removeParams(commercePaymentTransactionStatus);\r\n     * let uri = params['model'].links('delete').href;\r\n     * ```\r\n     * @method\r\n     * @example // commercePaymentTransactionStatus is a resource previously fetched using get action.\r\n                        commerceLookupsPaymentTransactionStatusClient.remove(commercePaymentTransactionStatus)\r\n                            .then(function (data) {\r\n                                // perform success action here\r\n                            },\r\n                             function (response, status, headers, config) {\r\n                                 // perform error handling here\r\n                            });\r\n     **/\r\n    CommerceLookupsPaymentMethodClient.prototype.remove = function (data) {\r\n        return this.apiClient.delete(this.routeDefinition.delete(data));\r\n    };\r\n    return CommerceLookupsPaymentMethodClient;\r\n}());\r\nCommerceLookupsPaymentMethodClient = tslib_1.__decorate([\r\n    inversify_1.injectable(),\r\n    tslib_1.__param(0, inversify_1.inject(_1.TYPES.CommerceLookupsPaymentMethodBatchClient)),\r\n    tslib_1.__param(1, inversify_1.inject(_1.TYPES.CommerceLookupsPaymentMethodRoute)),\r\n    tslib_1.__param(2, inversify_1.inject(httpApi_1.httpTYPES.ApiClient)),\r\n    tslib_1.__metadata(\"design:paramtypes\", [typeof (_a = typeof _1.CommerceLookupsPaymentMethodBatchClient !== \"undefined\" && _1.CommerceLookupsPaymentMethodBatchClient) === \"function\" && _a || Object, typeof (_b = typeof _1.CommerceLookupsPaymentMethodRoute !== \"undefined\" && _1.CommerceLookupsPaymentMethodRoute) === \"function\" && _b || Object, typeof (_c = typeof httpApi_1.ApiClient !== \"undefined\" && httpApi_1.ApiClient) === \"function\" && _c || Object])\r\n], CommerceLookupsPaymentMethodClient);\r\nexports.CommerceLookupsPaymentMethodClient = CommerceLookupsPaymentMethodClient;\r\nvar _a, _b, _c;\r\n/**\r\n * @copyright(c) 2017 Mono Ltd\r\n * @license MIT\r\n * @author Mono Ltd\r\n * @overview\r\n ***Notes:**\r\n - Refer to the [Baasic REST API](http://dev.baasic.com/api/reference/home) for detailed information about available Baasic REST API end-points.\r\n - All end-point objects are transformed by the associated route service.\r\n */ \r\n\n\n/***/ }),\n/* 202 */\n/***/ (function(module, exports, __webpack_require__) {\n\n\"use strict\";\n/* globals module */\r\n/**\r\n * @module commerceLookupsPaymentMethodRoute\r\n * @description Baasic Commerce Lookups PaymentMethod Route Definition provides Baasic route templates which can be expanded to Baasic REST URIs. Various services can use Baasic Commerce Lookups PaymentMethod Route Definition to obtain a needed routes while other routes will be obtained through HAL. By convention, all route services  use the same function names as their corresponding services.\r\n */\r\n\r\nObject.defineProperty(exports, \"__esModule\", { value: true });\r\nvar tslib_1 = __webpack_require__(1);\r\nvar inversify_1 = __webpack_require__(0);\r\nvar common_1 = __webpack_require__(2);\r\n;\r\nvar contracts_1 = __webpack_require__(3);\r\nvar _1 = __webpack_require__(5);\r\nvar CommerceLookupsPaymentMethodRoute = (function (_super) {\r\n    tslib_1.__extends(CommerceLookupsPaymentMethodRoute, _super);\r\n    function CommerceLookupsPaymentMethodRoute(basicCommerceLookupsPaymentMethodBatchRoute, appOptions) {\r\n        var _this = _super.call(this, appOptions) || this;\r\n        _this.basicCommerceLookupsPaymentMethodBatchRoute = basicCommerceLookupsPaymentMethodBatchRoute;\r\n        _this.appOptions = appOptions;\r\n        _this.findRoute = 'commerce/lookups/payment-methods/{?searchQuery,page,rpp,sort,embed,fields}';\r\n        _this.getRoute = 'commerce/lookups/payment-methods/{id}/{?embed,fields}';\r\n        _this.createRoute = 'commerce/lookups/payment-methods';\r\n        _this.updateRoute = 'commerce/lookups/payment-methods/{id}';\r\n        _this.deleteRoute = 'commerce/lookups/payment-methods/{id}';\r\n        return _this;\r\n    }\r\n    Object.defineProperty(CommerceLookupsPaymentMethodRoute.prototype, \"batch\", {\r\n        get: function () {\r\n            return this.basicCommerceLookupsPaymentMethodBatchRoute;\r\n        },\r\n        enumerable: true,\r\n        configurable: true\r\n    });\r\n    /**\r\n     * Parses find commerce customer-payment-methods route which can be expanded with additional options. Supported items are:\r\n     * - `searchQuery` - A string value used to identify commerce resources using the phrase search.\r\n     * - `page` - A value used to set the page number, i.e. to retrieve certain commerce subset from the storage.\r\n     * - `rpp` - A value used to limit the size of result set per page.\r\n     * - `sort` - A string used to set the commerce property to sort the result collection by.\r\n     * - `embed` - Comma separated list of resources to be contained within the current representation.\r\n     * @method\r\n     * @param options Query resource options.\r\n     * @example commerceLookupsPaymentMethodRoute.find({searchQuery: '<search-phrase>'});\r\n     **/\r\n    CommerceLookupsPaymentMethodRoute.prototype.find = function (options) {\r\n        return _super.prototype.baseFind.call(this, this.findRoute, options);\r\n    };\r\n    /**\r\n     * Parses get route; this route doesn't expose any properties.\r\n     * @method\r\n     * @example commerceLookupsPaymentMethodRoute.get();\r\n     **/\r\n    CommerceLookupsPaymentMethodRoute.prototype.get = function (id, options) {\r\n        return _super.prototype.baseGet.call(this, this.getRoute, options);\r\n    };\r\n    /**\r\n     * Parses create commerce payment method route; this URI template does not expose any additional options.\r\n     * @method\r\n     * @example commerceLookupsPaymentMethodRoute.create();\r\n     **/\r\n    CommerceLookupsPaymentMethodRoute.prototype.create = function () {\r\n        return _super.prototype.baseCreate.call(this, this.createRoute, {});\r\n    };\r\n    /**\r\n     * Parses update commerce payment method route; this URI template does not expose any additional options.\r\n     * @method\r\n     * @example commerceLookupsPaymentMethodRoute.update(data);\r\n     **/\r\n    CommerceLookupsPaymentMethodRoute.prototype.update = function (data) {\r\n        return _super.prototype.baseUpdate.call(this, this.updateRoute, data);\r\n    };\r\n    /**\r\n     * Parses delete commerce payment method route; this URI template does not expose any additional options.\r\n     * @method\r\n     * @example commerceLookupsPaymentMethodRoute.delete(data);\r\n     **/\r\n    CommerceLookupsPaymentMethodRoute.prototype.delete = function (data) {\r\n        return _super.prototype.baseDelete.call(this, this.deleteRoute, data);\r\n    };\r\n    return CommerceLookupsPaymentMethodRoute;\r\n}(common_1.BaseRoute));\r\nCommerceLookupsPaymentMethodRoute = tslib_1.__decorate([\r\n    inversify_1.injectable(),\r\n    tslib_1.__param(0, inversify_1.inject(_1.TYPES.CommerceLookupsPaymentMethodBatchRoute)),\r\n    tslib_1.__param(1, inversify_1.inject(contracts_1.TYPES.IAppOptions)),\r\n    tslib_1.__metadata(\"design:paramtypes\", [typeof (_a = typeof _1.CommerceLookupsPaymentMethodBatchRoute !== \"undefined\" && _1.CommerceLookupsPaymentMethodBatchRoute) === \"function\" && _a || Object, typeof (_b = typeof contracts_1.IAppOptions !== \"undefined\" && contracts_1.IAppOptions) === \"function\" && _b || Object])\r\n], CommerceLookupsPaymentMethodRoute);\r\nexports.CommerceLookupsPaymentMethodRoute = CommerceLookupsPaymentMethodRoute;\r\nvar _a, _b;\r\n/**\r\n * @copyright (c) 2017 Mono Ltd\r\n * @license MIT\r\n * @author Mono Ltd\r\n * @overview\r\n ***Notes:**\r\n - Refer to the [Baasic REST API](http://dev.baasic.com/api/reference/home) for detailed information about available Baasic REST API end-points.\r\n - [URI Template](https://github.com/Baasic/uritemplate-js) syntax enables expanding the Baasic route templates to Baasic REST URIs providing it with an object that contains URI parameters.\r\n - All end-point objects are transformed by the associated route service.\r\n */ \r\n\n\n/***/ }),\n/* 203 */\n/***/ (function(module, exports, __webpack_require__) {\n\n\"use strict\";\n\r\nfunction __export(m) {\r\n    for (var p in m) if (!exports.hasOwnProperty(p)) exports[p] = m[p];\r\n}\r\nObject.defineProperty(exports, \"__esModule\", { value: true });\r\n__export(__webpack_require__(200));\r\n__export(__webpack_require__(199));\r\n__export(__webpack_require__(202));\r\n__export(__webpack_require__(201));\r\n\n\n/***/ }),\n/* 204 */\n/***/ (function(module, exports, __webpack_require__) {\n\n\"use strict\";\n/* globals module */\r\n/**\r\n * @module commercePaymentTransactionStatusBatchClient\r\n * @description  Commerce Payment Method Batch Client provides an easy way to consume  Commerce REST API end-points. In order to obtain a needed routes `commercePaymentTransactionStatusBatchClient` uses `commercePaymentTransactionStatusBatchRoute`.\r\n */\r\n\r\nObject.defineProperty(exports, \"__esModule\", { value: true });\r\nvar tslib_1 = __webpack_require__(1);\r\nvar inversify_1 = __webpack_require__(0);\r\n;\r\nvar httpApi_1 = __webpack_require__(4);\r\nvar _1 = __webpack_require__(5);\r\nvar CommerceLookupsPaymentTransactionStatusBatchClient = (function () {\r\n    function CommerceLookupsPaymentTransactionStatusBatchClient(commerceLookupsPaymentTransactionStatusBatchRoute, apiClient) {\r\n        this.commerceLookupsPaymentTransactionStatusBatchRoute = commerceLookupsPaymentTransactionStatusBatchRoute;\r\n        this.apiClient = apiClient;\r\n    }\r\n    Object.defineProperty(CommerceLookupsPaymentTransactionStatusBatchClient.prototype, \"routeDefinition\", {\r\n        get: function () {\r\n            return this.commerceLookupsPaymentTransactionStatusBatchRoute;\r\n        },\r\n        enumerable: true,\r\n        configurable: true\r\n    });\r\n    /**\r\n     * Returns a promise that is resolved once the create commerce action has been performed; this action creates a new commerce resources.\r\n     * @method\r\n     * @example commerceLookupsPaymentTransactionStatusBatchClient.create([{\r\n                   name : '<name>',\r\n                   abrv: '<abbreviation>',\r\n                   description: '<description>'\r\n               }])\r\n               .then(function (data) {\r\n                   // perform success action here\r\n               },\r\n                function (response, status, headers, config) {\r\n                    // perform error handling here\r\n               });\r\n    **/\r\n    CommerceLookupsPaymentTransactionStatusBatchClient.prototype.create = function (data) {\r\n        return this.apiClient.post(this.routeDefinition.create(), this.routeDefinition.createParams(data));\r\n    };\r\n    /**\r\n     * Returns a promise that is resolved once the update commerce action has been performed; this action updates specified commerce resources.\r\n     * @method\r\n     * @example commerceLookupsPaymentTransactionStatusBatchClient.update(commercePaymentTransactionStatuses)\r\n                    .then(function (data) {\r\n                        // perform success action here\r\n                    },\r\n                     function (response, status, headers, config) {\r\n                         // perform error handling here\r\n                    });\r\n     **/\r\n    CommerceLookupsPaymentTransactionStatusBatchClient.prototype.update = function (data) {\r\n        return this.apiClient.put(this.routeDefinition.update(), this.routeDefinition.updateParams(data));\r\n    };\r\n    /**\r\n     * Returns a promise that is resolved once the remove commerce action has been performed. This action will remove commerce resources from the system if successfully completed.\r\n     * @method\r\n     * @example commerceLookupsPaymentTransactionStatusBatchClient.remove(commercePaymentTransactionStatusIds)\r\n                    .then(function (data) {\r\n                        // perform success action here\r\n                    },\r\n                     function (response, status, headers, config) {\r\n                         // perform error handling here\r\n                    });\r\n     **/\r\n    CommerceLookupsPaymentTransactionStatusBatchClient.prototype.remove = function (ids) {\r\n        return this.apiClient.delete(this.commerceLookupsPaymentTransactionStatusBatchRoute.delete(), undefined, ids);\r\n    };\r\n    return CommerceLookupsPaymentTransactionStatusBatchClient;\r\n}());\r\nCommerceLookupsPaymentTransactionStatusBatchClient = tslib_1.__decorate([\r\n    inversify_1.injectable(),\r\n    tslib_1.__param(0, inversify_1.inject(_1.TYPES.CommerceLookupsPaymentTransactionStatusBatchRoute)),\r\n    tslib_1.__param(1, inversify_1.inject(httpApi_1.httpTYPES.ApiClient)),\r\n    tslib_1.__metadata(\"design:paramtypes\", [typeof (_a = typeof _1.CommerceLookupsPaymentTransactionStatusBatchRoute !== \"undefined\" && _1.CommerceLookupsPaymentTransactionStatusBatchRoute) === \"function\" && _a || Object, typeof (_b = typeof httpApi_1.ApiClient !== \"undefined\" && httpApi_1.ApiClient) === \"function\" && _b || Object])\r\n], CommerceLookupsPaymentTransactionStatusBatchClient);\r\nexports.CommerceLookupsPaymentTransactionStatusBatchClient = CommerceLookupsPaymentTransactionStatusBatchClient;\r\nvar _a, _b;\r\n/**\r\n * @copyright (c) 2017 Mono Ltd\r\n * @license MIT\r\n * @author Mono Ltd\r\n * @overview\r\n ***Notes:**\r\n - Refer to the [Baasic REST API](http://dev.baasic.com/api/reference/home) for detailed information about available Baasic REST API end-points.\r\n - All end-point objects are transformed by the associated route service.\r\n */ \r\n\n\n/***/ }),\n/* 205 */\n/***/ (function(module, exports, __webpack_require__) {\n\n\"use strict\";\n/* globals module */\r\n/**\r\n * @module commerceLookupsPaymentTransactionStatusBatchRoute\r\n * @description Baasic Commerce Lookups Payment Method Batch Route Definition provides Baasic route templates which can be expanded to Baasic REST URIs. Various services can use Baasic Commerce Lookups Country State Batch Route Definition to obtain a needed routes while other routes will be obtained through HAL. By convention, all route services  use the same function names as their corresponding services.\r\n */\r\n\r\nObject.defineProperty(exports, \"__esModule\", { value: true });\r\nvar tslib_1 = __webpack_require__(1);\r\nvar inversify_1 = __webpack_require__(0);\r\nvar common_1 = __webpack_require__(2);\r\n;\r\nvar contracts_1 = __webpack_require__(3);\r\nvar CommerceLookupsPaymentTransactionStatusBatchRoute = (function (_super) {\r\n    tslib_1.__extends(CommerceLookupsPaymentTransactionStatusBatchRoute, _super);\r\n    function CommerceLookupsPaymentTransactionStatusBatchRoute(appOptions) {\r\n        var _this = _super.call(this, appOptions) || this;\r\n        _this.appOptions = appOptions;\r\n        _this.createRoute = 'commerce/lookups/payment-transaction-statuses/batch';\r\n        _this.updateRoute = 'commerce/lookups/payment-transaction-statuses/batch';\r\n        _this.deleteRoute = 'commerce/lookups/payment-transaction-statuses/batch';\r\n        return _this;\r\n    }\r\n    /**\r\n     * Parses create commerce country state batch route; this route does not expose any additional options\r\n     * @method\r\n     * @example commerceLookupsPaymentTransactionStatusBatchRoute.create();\r\n     */\r\n    CommerceLookupsPaymentTransactionStatusBatchRoute.prototype.create = function () {\r\n        return _super.prototype.baseCreate.call(this, this.createRoute, {});\r\n    };\r\n    /**\r\n     * Parses remove commerce country state batch route; this route does not expose any additional options\r\n     * @method\r\n     * @example commerceLookupsPaymentTransactionStatusBatchRoute.update();\r\n     */\r\n    CommerceLookupsPaymentTransactionStatusBatchRoute.prototype.update = function () {\r\n        return _super.prototype.baseUpdate.call(this, this.updateRoute, {});\r\n    };\r\n    /**\r\n     * Parses remove commerce country state batch route; this route does not expose any additional options\r\n     * @method\r\n     * @example commerceLookupsPaymentTransactionStatusBatchRoute.remove();\r\n     */\r\n    CommerceLookupsPaymentTransactionStatusBatchRoute.prototype.delete = function () {\r\n        return _super.prototype.baseDelete.call(this, this.deleteRoute, {});\r\n    };\r\n    return CommerceLookupsPaymentTransactionStatusBatchRoute;\r\n}(common_1.BaseRoute));\r\nCommerceLookupsPaymentTransactionStatusBatchRoute = tslib_1.__decorate([\r\n    inversify_1.injectable(),\r\n    tslib_1.__param(0, inversify_1.inject(contracts_1.TYPES.IAppOptions)),\r\n    tslib_1.__metadata(\"design:paramtypes\", [typeof (_a = typeof contracts_1.IAppOptions !== \"undefined\" && contracts_1.IAppOptions) === \"function\" && _a || Object])\r\n], CommerceLookupsPaymentTransactionStatusBatchRoute);\r\nexports.CommerceLookupsPaymentTransactionStatusBatchRoute = CommerceLookupsPaymentTransactionStatusBatchRoute;\r\nvar _a;\r\n/**\r\n * @copyright (c) 2017 Mono Ltd\r\n * @license MIT\r\n * @author Mono Ltd\r\n * @overview\r\n ***Notes:**\r\n - Refer to the [Baasic REST API](http://dev.baasic.com/api/reference/home) for detailed information about available Baasic REST API end-points.\r\n - [URI Template](https://github.com/Baasic/uritemplate-js) syntax enables expanding the Baasic route templates to Baasic REST URIs providing it with an object that contains URI parameters.\r\n - All end-point objects are transformed by the associated route service.\r\n */ \r\n\n\n/***/ }),\n/* 206 */\n/***/ (function(module, exports, __webpack_require__) {\n\n\"use strict\";\n/* globals module */\r\n/**\r\n * @module commerceLookupsPaymentTransactionStatusClient\r\n * @description  Commerce Lookups PaymentTransactionStatus Client provides an easy way to consume  Commerce REST API end-points. In order to obtain a needed routes `commerceLookupsPaymentTransactionStatusClient` uses `commerceLookupsPaymentTransactionStatusRoute`.\r\n */\r\n\r\nObject.defineProperty(exports, \"__esModule\", { value: true });\r\nvar tslib_1 = __webpack_require__(1);\r\nvar inversify_1 = __webpack_require__(0);\r\n;\r\nvar httpApi_1 = __webpack_require__(4);\r\nvar _1 = __webpack_require__(5);\r\nvar CommerceLookupsPaymentTransactionStatusClient = (function () {\r\n    function CommerceLookupsPaymentTransactionStatusClient(commerceLookupsPaymentTransactionStatusBatchClient, commerceLookupsPaymentTransactionStatusRoute, apiClient) {\r\n        this.commerceLookupsPaymentTransactionStatusBatchClient = commerceLookupsPaymentTransactionStatusBatchClient;\r\n        this.commerceLookupsPaymentTransactionStatusRoute = commerceLookupsPaymentTransactionStatusRoute;\r\n        this.apiClient = apiClient;\r\n    }\r\n    Object.defineProperty(CommerceLookupsPaymentTransactionStatusClient.prototype, \"routeDefinition\", {\r\n        get: function () {\r\n            return this.commerceLookupsPaymentTransactionStatusRoute;\r\n        },\r\n        enumerable: true,\r\n        configurable: true\r\n    });\r\n    Object.defineProperty(CommerceLookupsPaymentTransactionStatusClient.prototype, \"batch\", {\r\n        get: function () {\r\n            return this.commerceLookupsPaymentTransactionStatusBatchClient;\r\n        },\r\n        enumerable: true,\r\n        configurable: true\r\n    });\r\n    /**\r\n     * Returns a promise that is resolved once the find action has been performed. Success response returns a list of commerce resources matching the given criteria.\r\n     * @method\r\n     * @example commerceLookupsPaymentTransactionStatusClient.find({\r\n                        pageNumber : 1,\r\n                        pageSize : 10,\r\n                        orderBy : '<field>',\r\n                        orderDirection : '<asc|desc>',\r\n                        search : '<search-phrase>'\r\n                    })\r\n                    .then(function (collection) {\r\n                        // perform success action here\r\n                    },\r\n                     function (response, status, headers, config) {\r\n                         // perform error handling here\r\n                    });\r\n     **/\r\n    CommerceLookupsPaymentTransactionStatusClient.prototype.find = function (options) {\r\n        return this.apiClient.get(this.routeDefinition.find(options));\r\n    };\r\n    /**\r\n     * Returns a promise that is resolved once the get action has been performed. Success response returns the commerce resource.\r\n     * @method\r\n     * @example commerceLookupsPaymentTransactionStatusClient.get()\r\n                    .then(function (data) {\r\n                        // perform success action here\r\n                    },\r\n                     function (response, status, headers, config) {\r\n                         // perform error handling here\r\n                    });\r\n     **/\r\n    CommerceLookupsPaymentTransactionStatusClient.prototype.get = function (id, options) {\r\n        return this.apiClient.get(this.commerceLookupsPaymentTransactionStatusRoute.get(id, options));\r\n    };\r\n    /**\r\n     * Returns a promise that is resolved once the update commerce action has been performed; this action updates a commerce resource. This route uses HAL enabled objects to obtain routes and therefore it doesn't apply `commerceLookupsPaymentTransactionStatusRoute` route template. Here is an example of how a route can be obtained from HAL enabled objects:\r\n     * ```\r\n     * let params = modelMapper.removeParams(commercePaymentTransactionStatus);\r\n     * let uri = params['model'].links('put').href;\r\n     * ```\r\n     * @method\r\n     * @example // commercePaymentTransactionStatus is a resource previously fetched using get action.\r\n                    commercePaymentTransactionStatus.description = '<description>';\r\n                    commerceLookupsPaymentTransactionStatusClient.update(commercePaymentTransactionStatus)\r\n                        .then(function (data) {\r\n                            // perform success action here\r\n                        },\r\n                         function (response, status, headers, config) {\r\n                             // perform error handling here\r\n                        });\r\n     **/\r\n    CommerceLookupsPaymentTransactionStatusClient.prototype.update = function (data) {\r\n        return this.apiClient.put(this.routeDefinition.update(data), this.routeDefinition.updateParams(data));\r\n    };\r\n    /**\r\n     * Returns a promise that is resolved once the create commerce action has been performed; this action creates a new commerce resource.\r\n     * @method\r\n     * @example commerceLookupsPaymentTransactionStatusClient.create({\r\n                    name : '<name>',\r\n                    abrv: '<abbreviation>',\r\n                    description: '<description>'\r\n                })\r\n                .then(function (data) {\r\n                    // perform success action here\r\n                },\r\n                 function (response, status, headers, config) {\r\n                     // perform error handling here\r\n                });\r\n     **/\r\n    CommerceLookupsPaymentTransactionStatusClient.prototype.create = function (data) {\r\n        return this.apiClient.post(this.routeDefinition.create(), this.routeDefinition.createParams(data));\r\n    };\r\n    /**\r\n     * Returns a promise that is resolved once the remove action has been performed. This action will remove a commerce resource from the system if successfully completed. This route uses HAL enabled objects to obtain routes and therefore it doesn't apply `commerceLookupsPaymentTransactionStatusRoute` route template. Here is an example of how a route can be obtained from HAL enabled objects:\r\n     * ```\r\n     * let params = modelMapper.removeParams(commercePaymentTransactionStatus);\r\n     * let uri = params['model'].links('delete').href;\r\n     * ```\r\n     * @method\r\n     * @example // commercePaymentTransactionStatus is a resource previously fetched using get action.\r\n                        commerceLookupsPaymentTransactionStatusClient.remove(commercePaymentTransactionStatus)\r\n                            .then(function (data) {\r\n                                // perform success action here\r\n                            },\r\n                             function (response, status, headers, config) {\r\n                                 // perform error handling here\r\n                            });\r\n     **/\r\n    CommerceLookupsPaymentTransactionStatusClient.prototype.remove = function (data) {\r\n        return this.apiClient.delete(this.routeDefinition.delete(data));\r\n    };\r\n    return CommerceLookupsPaymentTransactionStatusClient;\r\n}());\r\nCommerceLookupsPaymentTransactionStatusClient = tslib_1.__decorate([\r\n    inversify_1.injectable(),\r\n    tslib_1.__param(0, inversify_1.inject(_1.TYPES.CommerceLookupsPaymentTransactionStatusBatchClient)),\r\n    tslib_1.__param(1, inversify_1.inject(_1.TYPES.CommerceLookupsPaymentTransactionStatusRoute)),\r\n    tslib_1.__param(2, inversify_1.inject(httpApi_1.httpTYPES.ApiClient)),\r\n    tslib_1.__metadata(\"design:paramtypes\", [typeof (_a = typeof _1.CommerceLookupsPaymentTransactionStatusBatchClient !== \"undefined\" && _1.CommerceLookupsPaymentTransactionStatusBatchClient) === \"function\" && _a || Object, typeof (_b = typeof _1.CommerceLookupsPaymentTransactionStatusRoute !== \"undefined\" && _1.CommerceLookupsPaymentTransactionStatusRoute) === \"function\" && _b || Object, typeof (_c = typeof httpApi_1.ApiClient !== \"undefined\" && httpApi_1.ApiClient) === \"function\" && _c || Object])\r\n], CommerceLookupsPaymentTransactionStatusClient);\r\nexports.CommerceLookupsPaymentTransactionStatusClient = CommerceLookupsPaymentTransactionStatusClient;\r\nvar _a, _b, _c;\r\n/**\r\n * @copyright(c) 2017 Mono Ltd\r\n * @license MIT\r\n * @author Mono Ltd\r\n * @overview\r\n ***Notes:**\r\n - Refer to the [Baasic REST API](http://dev.baasic.com/api/reference/home) for detailed information about available Baasic REST API end-points.\r\n - All end-point objects are transformed by the associated route service.\r\n */ \r\n\n\n/***/ }),\n/* 207 */\n/***/ (function(module, exports, __webpack_require__) {\n\n\"use strict\";\n/* globals module */\r\n/**\r\n * @module commerceLookupsPaymentTransactionStatusRoute\r\n * @description Baasic Commerce Lookups PaymentTransactionStatus Route Definition provides Baasic route templates which can be expanded to Baasic REST URIs. Various services can use Baasic Commerce Lookups PaymentTransactionStatus Route Definition to obtain a needed routes while other routes will be obtained through HAL. By convention, all route services  use the same function names as their corresponding services.\r\n */\r\n\r\nObject.defineProperty(exports, \"__esModule\", { value: true });\r\nvar tslib_1 = __webpack_require__(1);\r\nvar inversify_1 = __webpack_require__(0);\r\nvar common_1 = __webpack_require__(2);\r\n;\r\nvar contracts_1 = __webpack_require__(3);\r\nvar _1 = __webpack_require__(5);\r\nvar CommerceLookupsPaymentTransactionStatusRoute = (function (_super) {\r\n    tslib_1.__extends(CommerceLookupsPaymentTransactionStatusRoute, _super);\r\n    function CommerceLookupsPaymentTransactionStatusRoute(basicCommerceLookupsPaymentTransactionStatusBatchRoute, appOptions) {\r\n        var _this = _super.call(this, appOptions) || this;\r\n        _this.basicCommerceLookupsPaymentTransactionStatusBatchRoute = basicCommerceLookupsPaymentTransactionStatusBatchRoute;\r\n        _this.appOptions = appOptions;\r\n        _this.findRoute = 'commerce/lookups/payment-transaction-statuses/{?searchQuery,page,rpp,sort,embed,fields}';\r\n        _this.getRoute = 'commerce/lookups/payment-transaction-statuses/{id}/{?embed,fields}';\r\n        _this.createRoute = 'commerce/lookups/payment-transaction-statuses';\r\n        _this.updateRoute = 'commerce/lookups/payment-transaction-statuses/{id}';\r\n        _this.deleteRoute = 'commerce/lookups/payment-transaction-statuses/{id}';\r\n        return _this;\r\n    }\r\n    Object.defineProperty(CommerceLookupsPaymentTransactionStatusRoute.prototype, \"batch\", {\r\n        get: function () {\r\n            return this.basicCommerceLookupsPaymentTransactionStatusBatchRoute;\r\n        },\r\n        enumerable: true,\r\n        configurable: true\r\n    });\r\n    /**\r\n     * Parses find commerce customer-payment-methods route which can be expanded with additional options. Supported items are:\r\n     * - `searchQuery` - A string value used to identify commerce resources using the phrase search.\r\n     * - `page` - A value used to set the page number, i.e. to retrieve certain commerce subset from the storage.\r\n     * - `rpp` - A value used to limit the size of result set per page.\r\n     * - `sort` - A string used to set the commerce property to sort the result collection by.\r\n     * - `embed` - Comma separated list of resources to be contained within the current representation.\r\n     * @method\r\n     * @param options Query resource options.\r\n     * @example commerceLookupsPaymentTransactionStatusRoute.find({searchQuery: '<search-phrase>'});\r\n     **/\r\n    CommerceLookupsPaymentTransactionStatusRoute.prototype.find = function (options) {\r\n        return _super.prototype.baseFind.call(this, this.findRoute, options);\r\n    };\r\n    /**\r\n     * Parses get route; this route doesn't expose any properties.\r\n     * @method\r\n     * @example commerceLookupsPaymentTransactionStatusRoute.get();\r\n     **/\r\n    CommerceLookupsPaymentTransactionStatusRoute.prototype.get = function (id, options) {\r\n        return _super.prototype.baseGet.call(this, this.getRoute, options);\r\n    };\r\n    /**\r\n     * Parses create commerce payment method route; this URI template does not expose any additional options.\r\n     * @method\r\n     * @example commerceLookupsPaymentTransactionStatusRoute.create();\r\n     **/\r\n    CommerceLookupsPaymentTransactionStatusRoute.prototype.create = function () {\r\n        return _super.prototype.baseCreate.call(this, this.createRoute, {});\r\n    };\r\n    /**\r\n     * Parses update commerce payment method route; this URI template does not expose any additional options.\r\n     * @method\r\n     * @example commerceLookupsPaymentTransactionStatusRoute.update(data);\r\n     **/\r\n    CommerceLookupsPaymentTransactionStatusRoute.prototype.update = function (data) {\r\n        return _super.prototype.baseUpdate.call(this, this.updateRoute, data);\r\n    };\r\n    /**\r\n     * Parses delete commerce payment method route; this URI template does not expose any additional options.\r\n     * @method\r\n     * @example commerceLookupsPaymentTransactionStatusRoute.delete(data);\r\n     **/\r\n    CommerceLookupsPaymentTransactionStatusRoute.prototype.delete = function (data) {\r\n        return _super.prototype.baseDelete.call(this, this.deleteRoute, data);\r\n    };\r\n    return CommerceLookupsPaymentTransactionStatusRoute;\r\n}(common_1.BaseRoute));\r\nCommerceLookupsPaymentTransactionStatusRoute = tslib_1.__decorate([\r\n    inversify_1.injectable(),\r\n    tslib_1.__param(0, inversify_1.inject(_1.TYPES.CommerceLookupsPaymentTransactionStatusBatchRoute)),\r\n    tslib_1.__param(1, inversify_1.inject(contracts_1.TYPES.IAppOptions)),\r\n    tslib_1.__metadata(\"design:paramtypes\", [typeof (_a = typeof _1.CommerceLookupsPaymentTransactionStatusBatchRoute !== \"undefined\" && _1.CommerceLookupsPaymentTransactionStatusBatchRoute) === \"function\" && _a || Object, typeof (_b = typeof contracts_1.IAppOptions !== \"undefined\" && contracts_1.IAppOptions) === \"function\" && _b || Object])\r\n], CommerceLookupsPaymentTransactionStatusRoute);\r\nexports.CommerceLookupsPaymentTransactionStatusRoute = CommerceLookupsPaymentTransactionStatusRoute;\r\nvar _a, _b;\r\n/**\r\n * @copyright (c) 2017 Mono Ltd\r\n * @license MIT\r\n * @author Mono Ltd\r\n * @overview\r\n ***Notes:**\r\n - Refer to the [Baasic REST API](http://dev.baasic.com/api/reference/home) for detailed information about available Baasic REST API end-points.\r\n - [URI Template](https://github.com/Baasic/uritemplate-js) syntax enables expanding the Baasic route templates to Baasic REST URIs providing it with an object that contains URI parameters.\r\n - All end-point objects are transformed by the associated route service.\r\n */ \r\n\n\n/***/ }),\n/* 208 */\n/***/ (function(module, exports, __webpack_require__) {\n\n\"use strict\";\n\r\nfunction __export(m) {\r\n    for (var p in m) if (!exports.hasOwnProperty(p)) exports[p] = m[p];\r\n}\r\nObject.defineProperty(exports, \"__esModule\", { value: true });\r\n__export(__webpack_require__(205));\r\n__export(__webpack_require__(204));\r\n__export(__webpack_require__(207));\r\n__export(__webpack_require__(206));\r\n\n\n/***/ }),\n/* 209 */\n/***/ (function(module, exports, __webpack_require__) {\n\n\"use strict\";\n/* globals module */\r\n/**\r\n * @module commerceRecurringCyclePeriodTypeBatchClient\r\n * @description  Commerce Payment Method Batch Client provides an easy way to consume  Commerce REST API end-points. In order to obtain a needed routes `commerceRecurringCyclePeriodTypeBatchClient` uses `commerceRecurringCyclePeriodTypeBatchRoute`.\r\n */\r\n\r\nObject.defineProperty(exports, \"__esModule\", { value: true });\r\nvar tslib_1 = __webpack_require__(1);\r\nvar inversify_1 = __webpack_require__(0);\r\n;\r\nvar httpApi_1 = __webpack_require__(4);\r\nvar _1 = __webpack_require__(5);\r\nvar CommerceLookupsRecurringCyclePeriodTypeBatchClient = (function () {\r\n    function CommerceLookupsRecurringCyclePeriodTypeBatchClient(commerceLookupsRecurringCyclePeriodTypeBatchRoute, apiClient) {\r\n        this.commerceLookupsRecurringCyclePeriodTypeBatchRoute = commerceLookupsRecurringCyclePeriodTypeBatchRoute;\r\n        this.apiClient = apiClient;\r\n    }\r\n    Object.defineProperty(CommerceLookupsRecurringCyclePeriodTypeBatchClient.prototype, \"routeDefinition\", {\r\n        get: function () {\r\n            return this.commerceLookupsRecurringCyclePeriodTypeBatchRoute;\r\n        },\r\n        enumerable: true,\r\n        configurable: true\r\n    });\r\n    /**\r\n     * Returns a promise that is resolved once the create commerce action has been performed; this action creates a new commerce resources.\r\n     * @method\r\n     * @example commerceLookupsRecurringCyclePeriodTypeBatchClient.create([{\r\n                    name : '<name>',\r\n                    abrv: '<abbreviation>',\r\n                    description: '<description>',\r\n                    monthFactor: '<month-factor'>\r\n                }])\r\n                .then(function (data) {\r\n                    // perform success action here\r\n                },\r\n                 function (response, status, headers, config) {\r\n                     // perform error handling here\r\n                });\r\n     **/\r\n    CommerceLookupsRecurringCyclePeriodTypeBatchClient.prototype.create = function (data) {\r\n        return this.apiClient.post(this.routeDefinition.create(), this.routeDefinition.createParams(data));\r\n    };\r\n    /**\r\n     * Returns a promise that is resolved once the update commerce action has been performed; this action updates specified commerce resources.\r\n     * @method\r\n     * @example   commerceLookupsRecurringCyclePeriodTypeBatchClient.update(commerceRecurringPeriodTypes)\r\n                    .then(function (data) {\r\n                        // perform success action here\r\n                    },\r\n                     function (response, status, headers, config) {\r\n                         // perform error handling here\r\n                    });\r\n     **/\r\n    CommerceLookupsRecurringCyclePeriodTypeBatchClient.prototype.update = function (data) {\r\n        return this.apiClient.put(this.routeDefinition.update(), this.routeDefinition.updateParams(data));\r\n    };\r\n    /**\r\n     * Returns a promise that is resolved once the remove commerce action has been performed. This action will remove commerce resources from the system if successfully completed.\r\n     * @method\r\n     * @example commerceLookupsRecurringCyclePeriodTypeBatchClient.remove(commerceRecurringPeriodTypeIds)\r\n                    .then(function (data) {\r\n                        // perform success action here\r\n                    },\r\n                     function (response, status, headers, config) {\r\n                         // perform error handling here\r\n                    });\r\n     **/\r\n    CommerceLookupsRecurringCyclePeriodTypeBatchClient.prototype.remove = function (ids) {\r\n        return this.apiClient.delete(this.commerceLookupsRecurringCyclePeriodTypeBatchRoute.delete(), undefined, ids);\r\n    };\r\n    return CommerceLookupsRecurringCyclePeriodTypeBatchClient;\r\n}());\r\nCommerceLookupsRecurringCyclePeriodTypeBatchClient = tslib_1.__decorate([\r\n    inversify_1.injectable(),\r\n    tslib_1.__param(0, inversify_1.inject(_1.TYPES.CommerceLookupsRecurringCyclePeriodTypeBatchRoute)),\r\n    tslib_1.__param(1, inversify_1.inject(httpApi_1.httpTYPES.ApiClient)),\r\n    tslib_1.__metadata(\"design:paramtypes\", [typeof (_a = typeof _1.CommerceLookupsRecurringCyclePeriodTypeBatchRoute !== \"undefined\" && _1.CommerceLookupsRecurringCyclePeriodTypeBatchRoute) === \"function\" && _a || Object, typeof (_b = typeof httpApi_1.ApiClient !== \"undefined\" && httpApi_1.ApiClient) === \"function\" && _b || Object])\r\n], CommerceLookupsRecurringCyclePeriodTypeBatchClient);\r\nexports.CommerceLookupsRecurringCyclePeriodTypeBatchClient = CommerceLookupsRecurringCyclePeriodTypeBatchClient;\r\nvar _a, _b;\r\n/**\r\n * @copyright (c) 2017 Mono Ltd\r\n * @license MIT\r\n * @author Mono Ltd\r\n * @overview\r\n ***Notes:**\r\n - Refer to the [Baasic REST API](http://dev.baasic.com/api/reference/home) for detailed information about available Baasic REST API end-points.\r\n - All end-point objects are transformed by the associated route service.\r\n */ \r\n\n\n/***/ }),\n/* 210 */\n/***/ (function(module, exports, __webpack_require__) {\n\n\"use strict\";\n/* globals module */\r\n/**\r\n * @module commerceLookupsRecurringCyclePeriodTypeBatchRoute\r\n * @description Baasic Commerce Lookups Recurring Cycle Period Type Batch Route Definition provides Baasic route templates which can be expanded to Baasic REST URIs. Various services can use Baasic Commerce Lookups Country State Batch Route Definition to obtain a needed routes while other routes will be obtained through HAL. By convention, all route services  use the same function names as their corresponding services.\r\n */\r\n\r\nObject.defineProperty(exports, \"__esModule\", { value: true });\r\nvar tslib_1 = __webpack_require__(1);\r\nvar inversify_1 = __webpack_require__(0);\r\nvar common_1 = __webpack_require__(2);\r\n;\r\nvar contracts_1 = __webpack_require__(3);\r\nvar CommerceLookupsRecurringCyclePeriodTypeBatchRoute = (function (_super) {\r\n    tslib_1.__extends(CommerceLookupsRecurringCyclePeriodTypeBatchRoute, _super);\r\n    function CommerceLookupsRecurringCyclePeriodTypeBatchRoute(appOptions) {\r\n        var _this = _super.call(this, appOptions) || this;\r\n        _this.appOptions = appOptions;\r\n        _this.createRoute = 'commerce/lookups/recurring-cycle-period-types/batch';\r\n        _this.updateRoute = 'commerce/lookups/recurring-cycle-period-types/batch';\r\n        _this.deleteRoute = 'commerce/lookups/recurring-cycle-period-types/batch';\r\n        return _this;\r\n    }\r\n    /**\r\n     * Parses create commerce country state batch route; this route does not expose any additional options\r\n     * @method\r\n     * @example commerceLookupsRecurringCyclePeriodTypeBatchRoute.create();\r\n     */\r\n    CommerceLookupsRecurringCyclePeriodTypeBatchRoute.prototype.create = function () {\r\n        return _super.prototype.baseCreate.call(this, this.createRoute, {});\r\n    };\r\n    /**\r\n     * Parses remove commerce country state batch route; this route does not expose any additional options\r\n     * @method\r\n     * @example commerceLookupsRecurringCyclePeriodTypeBatchRoute.update();\r\n     */\r\n    CommerceLookupsRecurringCyclePeriodTypeBatchRoute.prototype.update = function () {\r\n        return _super.prototype.baseUpdate.call(this, this.updateRoute, {});\r\n    };\r\n    /**\r\n     * Parses remove commerce country state batch route; this route does not expose any additional options\r\n     * @method\r\n     * @example commerceLookupsRecurringCyclePeriodTypeBatchRoute.remove();\r\n     */\r\n    CommerceLookupsRecurringCyclePeriodTypeBatchRoute.prototype.delete = function () {\r\n        return _super.prototype.baseDelete.call(this, this.deleteRoute, {});\r\n    };\r\n    return CommerceLookupsRecurringCyclePeriodTypeBatchRoute;\r\n}(common_1.BaseRoute));\r\nCommerceLookupsRecurringCyclePeriodTypeBatchRoute = tslib_1.__decorate([\r\n    inversify_1.injectable(),\r\n    tslib_1.__param(0, inversify_1.inject(contracts_1.TYPES.IAppOptions)),\r\n    tslib_1.__metadata(\"design:paramtypes\", [typeof (_a = typeof contracts_1.IAppOptions !== \"undefined\" && contracts_1.IAppOptions) === \"function\" && _a || Object])\r\n], CommerceLookupsRecurringCyclePeriodTypeBatchRoute);\r\nexports.CommerceLookupsRecurringCyclePeriodTypeBatchRoute = CommerceLookupsRecurringCyclePeriodTypeBatchRoute;\r\nvar _a;\r\n/**\r\n * @copyright (c) 2017 Mono Ltd\r\n * @license MIT\r\n * @author Mono Ltd\r\n * @overview\r\n ***Notes:**\r\n - Refer to the [Baasic REST API](http://dev.baasic.com/api/reference/home) for detailed information about available Baasic REST API end-points.\r\n - [URI Template](https://github.com/Baasic/uritemplate-js) syntax enables expanding the Baasic route templates to Baasic REST URIs providing it with an object that contains URI parameters.\r\n - All end-point objects are transformed by the associated route service.\r\n */ \r\n\n\n/***/ }),\n/* 211 */\n/***/ (function(module, exports, __webpack_require__) {\n\n\"use strict\";\n/* globals module */\r\n/**\r\n * @module commerceLookupsRecurringCyclePeriodTypeClient\r\n * @description  Commerce Lookups RecurringCyclePeriodType Client provides an easy way to consume  Commerce REST API end-points. In order to obtain a needed routes `commerceLookupsRecurringCyclePeriodTypeClient` uses `commerceLookupsRecurringCyclePeriodTypeRoute`.\r\n */\r\n\r\nObject.defineProperty(exports, \"__esModule\", { value: true });\r\nvar tslib_1 = __webpack_require__(1);\r\nvar inversify_1 = __webpack_require__(0);\r\n;\r\nvar httpApi_1 = __webpack_require__(4);\r\nvar _1 = __webpack_require__(5);\r\nvar CommerceLookupsRecurringCyclePeriodTypeClient = (function () {\r\n    function CommerceLookupsRecurringCyclePeriodTypeClient(commerceLookupsRecurringCyclePeriodTypeBatchClient, commerceLookupsRecurringCyclePeriodTypeRoute, apiClient) {\r\n        this.commerceLookupsRecurringCyclePeriodTypeBatchClient = commerceLookupsRecurringCyclePeriodTypeBatchClient;\r\n        this.commerceLookupsRecurringCyclePeriodTypeRoute = commerceLookupsRecurringCyclePeriodTypeRoute;\r\n        this.apiClient = apiClient;\r\n    }\r\n    Object.defineProperty(CommerceLookupsRecurringCyclePeriodTypeClient.prototype, \"routeDefinition\", {\r\n        get: function () {\r\n            return this.commerceLookupsRecurringCyclePeriodTypeRoute;\r\n        },\r\n        enumerable: true,\r\n        configurable: true\r\n    });\r\n    Object.defineProperty(CommerceLookupsRecurringCyclePeriodTypeClient.prototype, \"batch\", {\r\n        get: function () {\r\n            return this.commerceLookupsRecurringCyclePeriodTypeBatchClient;\r\n        },\r\n        enumerable: true,\r\n        configurable: true\r\n    });\r\n    /**\r\n     * Returns a promise that is resolved once the find action has been performed. Success response returns a list of commerce resources matching the given criteria.\r\n     * @method\r\n     * @example commerceLookupsRecurringCyclePeriodTypeClient.find({\r\n                    pageNumber : 1,\r\n                    pageSize : 10,\r\n                    orderBy : '<field>',\r\n                    orderDirection : '<asc|desc>',\r\n                    search : '<search-phrase>'\r\n                })\r\n                .then(function (collection) {\r\n                    // perform success action here\r\n                },\r\n                 function (response, status, headers, config) {\r\n                     // perform error handling here\r\n                });\r\n     **/\r\n    CommerceLookupsRecurringCyclePeriodTypeClient.prototype.find = function (options) {\r\n        return this.apiClient.get(this.routeDefinition.find(options));\r\n    };\r\n    /**\r\n     * Returns a promise that is resolved once the get action has been performed. Success response returns the commerce resource.\r\n     * @method\r\n     * @example commerceLookupsRecurringCyclePeriodTypeClient.get('<recurring-cycle-period-type-id>')\r\n                    .then(function (data) {\r\n                        // perform success action here\r\n                    },\r\n                     function (response, status, headers, config) {\r\n                         // perform error handling here\r\n                    });\r\n     **/\r\n    CommerceLookupsRecurringCyclePeriodTypeClient.prototype.get = function (id, options) {\r\n        return this.apiClient.get(this.commerceLookupsRecurringCyclePeriodTypeRoute.get(id, options));\r\n    };\r\n    /**\r\n     * Returns a promise that is resolved once the update commerce action has been performed; this action updates a commerce resource. This route uses HAL enabled objects to obtain routes and therefore it doesn't apply `commerceLookupsRecurringCyclePeriodTypeRoute` route template. Here is an example of how a route can be obtained from HAL enabled objects:\r\n     * ```\r\n     * let params = modelMapper.removeParams(commerceRecurringPeriodType);\r\n     * let uri = params['model'].links('put').href;\r\n     * ```\r\n     * @method\r\n     * @example // commerceRecurringPeriodType is a resource previously fetched using get action.\r\n                        commerceRecurringPeriodType.description = '<description>';\r\n                        commerceLookupsRecurringCyclePeriodTypeClient.update(commerceRecurringPeriodType)\r\n                            .then(function (data) {\r\n                                // perform success action here\r\n                            },\r\n                             function (response, status, headers, config) {\r\n                                 // perform error handling here\r\n                            });\r\n     **/\r\n    CommerceLookupsRecurringCyclePeriodTypeClient.prototype.update = function (data) {\r\n        return this.apiClient.put(this.routeDefinition.update(data), this.routeDefinition.updateParams(data));\r\n    };\r\n    /**\r\n     * Returns a promise that is resolved once the create commerce action has been performed; this action creates a new commerce resource.\r\n     * @method\r\n     * @example commerceLookupsRecurringCyclePeriodTypeClient.create({\r\n                    name : '<name>',\r\n                    abrv: '<abbreviation>',\r\n                    description: '<description>',\r\n                    monthFactor: '<month-factor'>\r\n                })\r\n                .then(function (data) {\r\n                    // perform success action here\r\n                },\r\n                 function (response, status, headers, config) {\r\n                     // perform error handling here\r\n                });\r\n     **/\r\n    CommerceLookupsRecurringCyclePeriodTypeClient.prototype.create = function (data) {\r\n        return this.apiClient.post(this.routeDefinition.create(), this.routeDefinition.createParams(data));\r\n    };\r\n    /**\r\n     * Returns a promise that is resolved once the remove action has been performed. This action will remove a commerce resource from the system if successfully completed. This route uses HAL enabled objects to obtain routes and therefore it doesn't apply `commerceLookupsRecurringCyclePeriodTypeRoute` route template. Here is an example of how a route can be obtained from HAL enabled objects:\r\n     * ```\r\n     * let params = modelMapper.removeParams(commerceRecurringPeriodType);\r\n     * let uri = params['model'].links('delete').href;\r\n     * ```\r\n     * @method\r\n     * @example // commerceRecurringPeriodType is a resource previously fetched using get action.\r\n                        commerceLookupsRecurringCyclePeriodTypeClient.remove(commerceRecurringPeriodType)\r\n                            .then(function (data) {\r\n                                // perform success action here\r\n                            },\r\n                             function (response, status, headers, config) {\r\n                                 // perform error handling here\r\n                            });\r\n     **/\r\n    CommerceLookupsRecurringCyclePeriodTypeClient.prototype.remove = function (data) {\r\n        return this.apiClient.delete(this.routeDefinition.delete(data));\r\n    };\r\n    return CommerceLookupsRecurringCyclePeriodTypeClient;\r\n}());\r\nCommerceLookupsRecurringCyclePeriodTypeClient = tslib_1.__decorate([\r\n    inversify_1.injectable(),\r\n    tslib_1.__param(0, inversify_1.inject(_1.TYPES.CommerceLookupsRecurringCyclePeriodTypeBatchClient)),\r\n    tslib_1.__param(1, inversify_1.inject(_1.TYPES.CommerceLookupsRecurringCyclePeriodTypeRoute)),\r\n    tslib_1.__param(2, inversify_1.inject(httpApi_1.httpTYPES.ApiClient)),\r\n    tslib_1.__metadata(\"design:paramtypes\", [typeof (_a = typeof _1.CommerceLookupsRecurringCyclePeriodTypeBatchClient !== \"undefined\" && _1.CommerceLookupsRecurringCyclePeriodTypeBatchClient) === \"function\" && _a || Object, typeof (_b = typeof _1.CommerceLookupsRecurringCyclePeriodTypeRoute !== \"undefined\" && _1.CommerceLookupsRecurringCyclePeriodTypeRoute) === \"function\" && _b || Object, typeof (_c = typeof httpApi_1.ApiClient !== \"undefined\" && httpApi_1.ApiClient) === \"function\" && _c || Object])\r\n], CommerceLookupsRecurringCyclePeriodTypeClient);\r\nexports.CommerceLookupsRecurringCyclePeriodTypeClient = CommerceLookupsRecurringCyclePeriodTypeClient;\r\nvar _a, _b, _c;\r\n/**\r\n * @copyright(c) 2017 Mono Ltd\r\n * @license MIT\r\n * @author Mono Ltd\r\n * @overview\r\n ***Notes:**\r\n - Refer to the [Baasic REST API](http://dev.baasic.com/api/reference/home) for detailed information about available Baasic REST API end-points.\r\n - All end-point objects are transformed by the associated route service.\r\n */ \r\n\n\n/***/ }),\n/* 212 */\n/***/ (function(module, exports, __webpack_require__) {\n\n\"use strict\";\n/* globals module */\r\n/**\r\n * @module commerceLookupsRecurringCyclePeriodTypeRoute\r\n * @description Baasic Commerce Lookups RecurringCyclePeriodType Route Definition provides Baasic route templates which can be expanded to Baasic REST URIs. Various services can use Baasic Commerce Lookups RecurringCyclePeriodType Route Definition to obtain a needed routes while other routes will be obtained through HAL. By convention, all route services  use the same function names as their corresponding services.\r\n */\r\n\r\nObject.defineProperty(exports, \"__esModule\", { value: true });\r\nvar tslib_1 = __webpack_require__(1);\r\nvar inversify_1 = __webpack_require__(0);\r\nvar common_1 = __webpack_require__(2);\r\n;\r\nvar contracts_1 = __webpack_require__(3);\r\nvar _1 = __webpack_require__(5);\r\nvar CommerceLookupsRecurringCyclePeriodTypeRoute = (function (_super) {\r\n    tslib_1.__extends(CommerceLookupsRecurringCyclePeriodTypeRoute, _super);\r\n    function CommerceLookupsRecurringCyclePeriodTypeRoute(basicCommerceLookupsRecurringCyclePeriodTypeBatchRoute, appOptions) {\r\n        var _this = _super.call(this, appOptions) || this;\r\n        _this.basicCommerceLookupsRecurringCyclePeriodTypeBatchRoute = basicCommerceLookupsRecurringCyclePeriodTypeBatchRoute;\r\n        _this.appOptions = appOptions;\r\n        _this.findRoute = 'commerce/lookups/recurring-cycle-period-types/{?searchQuery,page,rpp,sort,embed}';\r\n        _this.getRoute = 'commerce/lookups/recurring-cycle-period-types/{id}/{?embed}';\r\n        _this.createRoute = 'commerce/lookups/recurring-cycle-period-types';\r\n        _this.updateRoute = 'commerce/lookups/recurring-cycle-period-types/{id}';\r\n        _this.deleteRoute = 'commerce/lookups/recurring-cycle-period-types/{id}';\r\n        return _this;\r\n    }\r\n    Object.defineProperty(CommerceLookupsRecurringCyclePeriodTypeRoute.prototype, \"batch\", {\r\n        get: function () {\r\n            return this.basicCommerceLookupsRecurringCyclePeriodTypeBatchRoute;\r\n        },\r\n        enumerable: true,\r\n        configurable: true\r\n    });\r\n    /**\r\n     * Parses find commerce customer-payment-methods route which can be expanded with additional options. Supported items are:\r\n     * - `searchQuery` - A string value used to identify commerce resources using the phrase search.\r\n     * - `page` - A value used to set the page number, i.e. to retrieve certain commerce subset from the storage.\r\n     * - `rpp` - A value used to limit the size of result set per page.\r\n     * - `sort` - A string used to set the commerce property to sort the result collection by.\r\n     * - `embed` - Comma separated list of resources to be contained within the current representation.\r\n     * @method\r\n     * @param options Query resource options.\r\n     * @example commerceLookupsRecurringCyclePeriodTypeRoute.find({searchQuery: '<search-phrase>'});\r\n     **/\r\n    CommerceLookupsRecurringCyclePeriodTypeRoute.prototype.find = function (options) {\r\n        return _super.prototype.baseFind.call(this, this.findRoute, options);\r\n    };\r\n    /**\r\n     * Parses get route; this route doesn't expose any properties.\r\n     * @method\r\n     * @example commerceLookupsRecurringCyclePeriodTypeRoute.get();\r\n     **/\r\n    CommerceLookupsRecurringCyclePeriodTypeRoute.prototype.get = function (id, options) {\r\n        return _super.prototype.baseGet.call(this, this.getRoute, options);\r\n    };\r\n    /**\r\n     * Parses create commerce payment method route; this URI template does not expose any additional options.\r\n     * @method\r\n     * @example commerceLookupsRecurringCyclePeriodTypeRoute.create();\r\n     **/\r\n    CommerceLookupsRecurringCyclePeriodTypeRoute.prototype.create = function () {\r\n        return _super.prototype.baseCreate.call(this, this.createRoute, {});\r\n    };\r\n    /**\r\n     * Parses update commerce payment method route; this URI template does not expose any additional options.\r\n     * @method\r\n     * @example commerceLookupsRecurringCyclePeriodTypeRoute.update(data);\r\n     **/\r\n    CommerceLookupsRecurringCyclePeriodTypeRoute.prototype.update = function (data) {\r\n        return _super.prototype.baseUpdate.call(this, this.updateRoute, data);\r\n    };\r\n    /**\r\n     * Parses delete commerce payment method route; this URI template does not expose any additional options.\r\n     * @method\r\n     * @example commerceLookupsRecurringCyclePeriodTypeRoute.delete(data);\r\n     **/\r\n    CommerceLookupsRecurringCyclePeriodTypeRoute.prototype.delete = function (data) {\r\n        return _super.prototype.baseDelete.call(this, this.deleteRoute, data);\r\n    };\r\n    return CommerceLookupsRecurringCyclePeriodTypeRoute;\r\n}(common_1.BaseRoute));\r\nCommerceLookupsRecurringCyclePeriodTypeRoute = tslib_1.__decorate([\r\n    inversify_1.injectable(),\r\n    tslib_1.__param(0, inversify_1.inject(_1.TYPES.CommerceLookupsRecurringCyclePeriodTypeBatchRoute)),\r\n    tslib_1.__param(1, inversify_1.inject(contracts_1.TYPES.IAppOptions)),\r\n    tslib_1.__metadata(\"design:paramtypes\", [typeof (_a = typeof _1.CommerceLookupsRecurringCyclePeriodTypeBatchRoute !== \"undefined\" && _1.CommerceLookupsRecurringCyclePeriodTypeBatchRoute) === \"function\" && _a || Object, typeof (_b = typeof contracts_1.IAppOptions !== \"undefined\" && contracts_1.IAppOptions) === \"function\" && _b || Object])\r\n], CommerceLookupsRecurringCyclePeriodTypeRoute);\r\nexports.CommerceLookupsRecurringCyclePeriodTypeRoute = CommerceLookupsRecurringCyclePeriodTypeRoute;\r\nvar _a, _b;\r\n/**\r\n * @copyright (c) 2017 Mono Ltd\r\n * @license MIT\r\n * @author Mono Ltd\r\n * @overview\r\n ***Notes:**\r\n - Refer to the [Baasic REST API](http://dev.baasic.com/api/reference/home) for detailed information about available Baasic REST API end-points.\r\n - [URI Template](https://github.com/Baasic/uritemplate-js) syntax enables expanding the Baasic route templates to Baasic REST URIs providing it with an object that contains URI parameters.\r\n - All end-point objects are transformed by the associated route service.\r\n */ \r\n\n\n/***/ }),\n/* 213 */\n/***/ (function(module, exports, __webpack_require__) {\n\n\"use strict\";\n\r\nfunction __export(m) {\r\n    for (var p in m) if (!exports.hasOwnProperty(p)) exports[p] = m[p];\r\n}\r\nObject.defineProperty(exports, \"__esModule\", { value: true });\r\n__export(__webpack_require__(210));\r\n__export(__webpack_require__(209));\r\n__export(__webpack_require__(212));\r\n__export(__webpack_require__(211));\r\n\n\n/***/ }),\n/* 214 */\n/***/ (function(module, exports, __webpack_require__) {\n\n\"use strict\";\n/* globals module */\r\n/**\r\n * @module commerceSubscriptionStatusBatchClient\r\n * @description  Commerce Subscription Stauts Batch Client provides an easy way to consume  Commerce REST API end-points. In order to obtain a needed routes `commerceSubscriptionStatusBatchClient` uses `commerceSubscriptionStatusBatchRoute`.\r\n */\r\n\r\nObject.defineProperty(exports, \"__esModule\", { value: true });\r\nvar tslib_1 = __webpack_require__(1);\r\nvar inversify_1 = __webpack_require__(0);\r\n;\r\nvar httpApi_1 = __webpack_require__(4);\r\nvar _1 = __webpack_require__(5);\r\nvar CommerceLookupsSubscriptionStatusBatchClient = (function () {\r\n    function CommerceLookupsSubscriptionStatusBatchClient(commerceLookupsSubscriptionStatusBatchRoute, apiClient) {\r\n        this.commerceLookupsSubscriptionStatusBatchRoute = commerceLookupsSubscriptionStatusBatchRoute;\r\n        this.apiClient = apiClient;\r\n    }\r\n    Object.defineProperty(CommerceLookupsSubscriptionStatusBatchClient.prototype, \"routeDefinition\", {\r\n        get: function () {\r\n            return this.commerceLookupsSubscriptionStatusBatchRoute;\r\n        },\r\n        enumerable: true,\r\n        configurable: true\r\n    });\r\n    /**\r\n     * Returns a promise that is resolved once the create commerce action has been performed; this action creates a new commerce resources.\r\n     * @method\r\n     * @example commerceLookupsSubscriptionStatusBatchClient.create([{\r\n                    name : '<name>',\r\n                    abrv: '<abbreviation>',\r\n                    description: '<description>'\r\n                }])\r\n                .then(function (data) {\r\n                    // perform success action here\r\n                },\r\n                 function (response, status, headers, config) {\r\n                    // perform error handling here\r\n                });\r\n     **/\r\n    CommerceLookupsSubscriptionStatusBatchClient.prototype.create = function (data) {\r\n        return this.apiClient.post(this.routeDefinition.create(), this.routeDefinition.createParams(data));\r\n    };\r\n    /**\r\n     * Returns a promise that is resolved once the update commerce action has been performed; this action updates specified commerce resources.\r\n     * @method\r\n     * @example commerceLookupsSubscriptionStatusBatchClient.update(subscriptionStatuses)\r\n                    .then(function (data) {\r\n                        // perform success action here\r\n                    },\r\n                     function (response, status, headers, config) {\r\n                         // perform error handling here\r\n                    });\r\n     **/\r\n    CommerceLookupsSubscriptionStatusBatchClient.prototype.update = function (data) {\r\n        return this.apiClient.put(this.routeDefinition.update(), this.routeDefinition.updateParams(data));\r\n    };\r\n    /**\r\n     * Returns a promise that is resolved once the remove commerce action has been performed. This action will remove commerce resources from the system if successfully completed.\r\n     * @method\r\n     * @example commerceLookupsSubscriptionStatusBatchClient.remove(subscriptionStatusIds)\r\n                    .then(function (data) {\r\n                        // perform success action here\r\n                    },\r\n                     function (response, status, headers, config) {\r\n                         // perform error handling here\r\n                    });\r\n     **/\r\n    CommerceLookupsSubscriptionStatusBatchClient.prototype.remove = function (ids) {\r\n        return this.apiClient.delete(this.commerceLookupsSubscriptionStatusBatchRoute.delete(), undefined, ids);\r\n    };\r\n    return CommerceLookupsSubscriptionStatusBatchClient;\r\n}());\r\nCommerceLookupsSubscriptionStatusBatchClient = tslib_1.__decorate([\r\n    inversify_1.injectable(),\r\n    tslib_1.__param(0, inversify_1.inject(_1.TYPES.CommerceLookupsSubscriptionStatusBatchRoute)),\r\n    tslib_1.__param(1, inversify_1.inject(httpApi_1.httpTYPES.ApiClient)),\r\n    tslib_1.__metadata(\"design:paramtypes\", [typeof (_a = typeof _1.CommerceLookupsSubscriptionStatusBatchRoute !== \"undefined\" && _1.CommerceLookupsSubscriptionStatusBatchRoute) === \"function\" && _a || Object, typeof (_b = typeof httpApi_1.ApiClient !== \"undefined\" && httpApi_1.ApiClient) === \"function\" && _b || Object])\r\n], CommerceLookupsSubscriptionStatusBatchClient);\r\nexports.CommerceLookupsSubscriptionStatusBatchClient = CommerceLookupsSubscriptionStatusBatchClient;\r\nvar _a, _b;\r\n/**\r\n * @copyright (c) 2017 Mono Ltd\r\n * @license MIT\r\n * @author Mono Ltd\r\n * @overview\r\n ***Notes:**\r\n - Refer to the [Baasic REST API](http://dev.baasic.com/api/reference/home) for detailed information about available Baasic REST API end-points.\r\n - All end-point objects are transformed by the associated route service.\r\n */ \r\n\n\n/***/ }),\n/* 215 */\n/***/ (function(module, exports, __webpack_require__) {\n\n\"use strict\";\n/* globals module */\r\n/**\r\n * @module commerceLookupsSubscriptionStatusBatchRoute\r\n * @description Baasic Commerce Lookups Subscription Status Batch Route Definition provides Baasic route templates which can be expanded to Baasic REST URIs. Various services can use Baasic Commerce Lookups Country State Batch Route Definition to obtain a needed routes while other routes will be obtained through HAL. By convention, all route services  use the same function names as their corresponding services.\r\n */\r\n\r\nObject.defineProperty(exports, \"__esModule\", { value: true });\r\nvar tslib_1 = __webpack_require__(1);\r\nvar inversify_1 = __webpack_require__(0);\r\nvar common_1 = __webpack_require__(2);\r\n;\r\nvar contracts_1 = __webpack_require__(3);\r\nvar CommerceLookupsSubscriptionStatusBatchRoute = (function (_super) {\r\n    tslib_1.__extends(CommerceLookupsSubscriptionStatusBatchRoute, _super);\r\n    function CommerceLookupsSubscriptionStatusBatchRoute(appOptions) {\r\n        var _this = _super.call(this, appOptions) || this;\r\n        _this.appOptions = appOptions;\r\n        _this.createRoute = 'commerce/lookups/subscription-statuses/batch';\r\n        _this.updateRoute = 'commerce/lookups/subscription-statuses/batch';\r\n        _this.deleteRoute = 'commerce/lookups/subscription-statuses/batch';\r\n        return _this;\r\n    }\r\n    /**\r\n     * Parses create commerce country state batch route; this route does not expose any additional options\r\n     * @method\r\n     * @example commerceLookupsSubscriptionStatusBatchRoute.create();\r\n     */\r\n    CommerceLookupsSubscriptionStatusBatchRoute.prototype.create = function () {\r\n        return _super.prototype.baseCreate.call(this, this.createRoute, {});\r\n    };\r\n    /**\r\n     * Parses remove commerce country state batch route; this route does not expose any additional options\r\n     * @method\r\n     * @example commerceLookupsSubscriptionStatusBatchRoute.update();\r\n     */\r\n    CommerceLookupsSubscriptionStatusBatchRoute.prototype.update = function () {\r\n        return _super.prototype.baseUpdate.call(this, this.updateRoute, {});\r\n    };\r\n    /**\r\n     * Parses remove commerce country state batch route; this route does not expose any additional options\r\n     * @method\r\n     * @example commerceLookupsSubscriptionStatusBatchRoute.remove();\r\n     */\r\n    CommerceLookupsSubscriptionStatusBatchRoute.prototype.delete = function () {\r\n        return _super.prototype.baseDelete.call(this, this.deleteRoute, {});\r\n    };\r\n    return CommerceLookupsSubscriptionStatusBatchRoute;\r\n}(common_1.BaseRoute));\r\nCommerceLookupsSubscriptionStatusBatchRoute = tslib_1.__decorate([\r\n    inversify_1.injectable(),\r\n    tslib_1.__param(0, inversify_1.inject(contracts_1.TYPES.IAppOptions)),\r\n    tslib_1.__metadata(\"design:paramtypes\", [typeof (_a = typeof contracts_1.IAppOptions !== \"undefined\" && contracts_1.IAppOptions) === \"function\" && _a || Object])\r\n], CommerceLookupsSubscriptionStatusBatchRoute);\r\nexports.CommerceLookupsSubscriptionStatusBatchRoute = CommerceLookupsSubscriptionStatusBatchRoute;\r\nvar _a;\r\n/**\r\n * @copyright (c) 2017 Mono Ltd\r\n * @license MIT\r\n * @author Mono Ltd\r\n * @overview\r\n ***Notes:**\r\n - Refer to the [Baasic REST API](http://dev.baasic.com/api/reference/home) for detailed information about available Baasic REST API end-points.\r\n - [URI Template](https://github.com/Baasic/uritemplate-js) syntax enables expanding the Baasic route templates to Baasic REST URIs providing it with an object that contains URI parameters.\r\n - All end-point objects are transformed by the associated route service.\r\n */ \r\n\n\n/***/ }),\n/* 216 */\n/***/ (function(module, exports, __webpack_require__) {\n\n\"use strict\";\n/* globals module */\r\n/**\r\n * @module commerceLookupsSubscriptionStatusClient\r\n * @description  Commerce Lookups SubscriptionStatus Client provides an easy way to consume  Commerce REST API end-points. In order to obtain a needed routes `commerceLookupsSubscriptionStatusClient` uses `commerceLookupsSubscriptionStatusRoute`.\r\n */\r\n\r\nObject.defineProperty(exports, \"__esModule\", { value: true });\r\nvar tslib_1 = __webpack_require__(1);\r\nvar inversify_1 = __webpack_require__(0);\r\n;\r\nvar httpApi_1 = __webpack_require__(4);\r\nvar _1 = __webpack_require__(5);\r\nvar CommerceLookupsSubscriptionStatusClient = (function () {\r\n    function CommerceLookupsSubscriptionStatusClient(commerceLookupsSubscriptionStatusBatchClient, commerceLookupsSubscriptionStatusRoute, apiClient) {\r\n        this.commerceLookupsSubscriptionStatusBatchClient = commerceLookupsSubscriptionStatusBatchClient;\r\n        this.commerceLookupsSubscriptionStatusRoute = commerceLookupsSubscriptionStatusRoute;\r\n        this.apiClient = apiClient;\r\n    }\r\n    Object.defineProperty(CommerceLookupsSubscriptionStatusClient.prototype, \"routeDefinition\", {\r\n        get: function () {\r\n            return this.commerceLookupsSubscriptionStatusRoute;\r\n        },\r\n        enumerable: true,\r\n        configurable: true\r\n    });\r\n    Object.defineProperty(CommerceLookupsSubscriptionStatusClient.prototype, \"batch\", {\r\n        get: function () {\r\n            return this.commerceLookupsSubscriptionStatusBatchClient;\r\n        },\r\n        enumerable: true,\r\n        configurable: true\r\n    });\r\n    /**\r\n     * Returns a promise that is resolved once the find action has been performed. Success response returns a list of commerce resources matching the given criteria.\r\n     * @method\r\n     * @example commerceLookupsSubscriptionStatusClient.find({\r\n                        pageNumber : 1,\r\n                        pageSize : 10,\r\n                        orderBy : '<field>',\r\n                        orderDirection : '<asc|desc>',\r\n                        search : '<search-phrase>'\r\n                    })\r\n                    .then(function (collection) {\r\n                        // perform success action here\r\n                    },\r\n                     function (response, status, headers, config) {\r\n                         // perform error handling here\r\n                    });\r\n     **/\r\n    CommerceLookupsSubscriptionStatusClient.prototype.find = function (options) {\r\n        return this.apiClient.get(this.routeDefinition.find(options));\r\n    };\r\n    /**\r\n     * Returns a promise that is resolved once the get action has been performed. Success response returns the commerce resource.\r\n     * @method\r\n     * @example commerceLookupsSubscriptionStatusClient.get()\r\n                    .then(function (data) {\r\n                        // perform success action here\r\n                    },\r\n                     function (response, status, headers, config) {\r\n                         // perform error handling here\r\n                    });\r\n     **/\r\n    CommerceLookupsSubscriptionStatusClient.prototype.get = function (id, options) {\r\n        return this.apiClient.get(this.commerceLookupsSubscriptionStatusRoute.get(id, options));\r\n    };\r\n    /**\r\n     * Returns a promise that is resolved once the update commerce action has been performed; this action updates a commerce resource. This route uses HAL enabled objects to obtain routes and therefore it doesn't apply `commerceLookupsSubscriptionStatusRoute` route template. Here is an example of how a route can be obtained from HAL enabled objects:\r\n     * ```\r\n     * let params = modelMapper.removeParams(commerceSubscriptionStatus);\r\n     * let uri = params['model'].links('put').href;\r\n     * ```\r\n     * @method\r\n     * @example // commerceSubscriptionStatus is a resource previously fetched using get action.\r\n                    commerceSubscriptionStatus.description = '<description>';\r\n                    commerceLookupsSubscriptionStatusClient.update(commerceSubscriptionStatus)\r\n                        .then(function (data) {\r\n                            // perform success action here\r\n                        },\r\n                         function (response, status, headers, config) {\r\n                             // perform error handling here\r\n                        });\r\n     **/\r\n    CommerceLookupsSubscriptionStatusClient.prototype.update = function (data) {\r\n        return this.apiClient.put(this.routeDefinition.update(data), this.routeDefinition.updateParams(data));\r\n    };\r\n    /**\r\n     * Returns a promise that is resolved once the create commerce action has been performed; this action creates a new commerce resource.\r\n     * @method\r\n     * @example commerceLookupsSubscriptionStatusClient.create({\r\n                    name : '<name>',\r\n                    abrv: '<abbreviation>',\r\n                    description: '<description>'\r\n                })\r\n                .then(function (data) {\r\n                    // perform success action here\r\n                },\r\n                 function (response, status, headers, config) {\r\n                     // perform error handling here\r\n                });\r\n     **/\r\n    CommerceLookupsSubscriptionStatusClient.prototype.create = function (data) {\r\n        return this.apiClient.post(this.routeDefinition.create(), this.routeDefinition.createParams(data));\r\n    };\r\n    /**\r\n     * Returns a promise that is resolved once the remove action has been performed. This action will remove a commerce resource from the system if successfully completed. This route uses HAL enabled objects to obtain routes and therefore it doesn't apply `commerceLookupsSubscriptionStatusRoute` route template. Here is an example of how a route can be obtained from HAL enabled objects:\r\n     * ```\r\n     * let params = modelMapper.removeParams(commerceSubscriptionStatus);\r\n     * let uri = params['model'].links('delete').href;\r\n     * ```\r\n     * @method\r\n     * @example // commerceSubscriptionStatus is a resource previously fetched using get action.\r\n                    commerceLookupsSubscriptionStatusClient.remove(commerceSubscriptionStatus)\r\n                        .then(function (data) {\r\n                            // perform success action here\r\n                        },\r\n                         function (response, status, headers, config) {\r\n                             // perform error handling here\r\n                        });\r\n     **/\r\n    CommerceLookupsSubscriptionStatusClient.prototype.remove = function (data) {\r\n        return this.apiClient.delete(this.routeDefinition.delete(data));\r\n    };\r\n    return CommerceLookupsSubscriptionStatusClient;\r\n}());\r\nCommerceLookupsSubscriptionStatusClient = tslib_1.__decorate([\r\n    inversify_1.injectable(),\r\n    tslib_1.__param(0, inversify_1.inject(_1.TYPES.CommerceLookupsSubscriptionStatusBatchClient)),\r\n    tslib_1.__param(1, inversify_1.inject(_1.TYPES.CommerceLookupsSubscriptionStatusRoute)),\r\n    tslib_1.__param(2, inversify_1.inject(httpApi_1.httpTYPES.ApiClient)),\r\n    tslib_1.__metadata(\"design:paramtypes\", [typeof (_a = typeof _1.CommerceLookupsSubscriptionStatusBatchClient !== \"undefined\" && _1.CommerceLookupsSubscriptionStatusBatchClient) === \"function\" && _a || Object, typeof (_b = typeof _1.CommerceLookupsSubscriptionStatusRoute !== \"undefined\" && _1.CommerceLookupsSubscriptionStatusRoute) === \"function\" && _b || Object, typeof (_c = typeof httpApi_1.ApiClient !== \"undefined\" && httpApi_1.ApiClient) === \"function\" && _c || Object])\r\n], CommerceLookupsSubscriptionStatusClient);\r\nexports.CommerceLookupsSubscriptionStatusClient = CommerceLookupsSubscriptionStatusClient;\r\nvar _a, _b, _c;\r\n/**\r\n * @copyright(c) 2017 Mono Ltd\r\n * @license MIT\r\n * @author Mono Ltd\r\n * @overview\r\n ***Notes:**\r\n - Refer to the [Baasic REST API](http://dev.baasic.com/api/reference/home) for detailed information about available Baasic REST API end-points.\r\n - All end-point objects are transformed by the associated route service.\r\n */ \r\n\n\n/***/ }),\n/* 217 */\n/***/ (function(module, exports, __webpack_require__) {\n\n\"use strict\";\n/* globals module */\r\n/**\r\n * @module commerceLookupsSubscriptionStatusRoute\r\n * @description Baasic Commerce Lookups SubscriptionStatus Route Definition provides Baasic route templates which can be expanded to Baasic REST URIs. Various services can use Baasic Commerce Lookups SubscriptionStatus Route Definition to obtain a needed routes while other routes will be obtained through HAL. By convention, all route services  use the same function names as their corresponding services.\r\n */\r\n\r\nObject.defineProperty(exports, \"__esModule\", { value: true });\r\nvar tslib_1 = __webpack_require__(1);\r\nvar inversify_1 = __webpack_require__(0);\r\nvar common_1 = __webpack_require__(2);\r\n;\r\nvar contracts_1 = __webpack_require__(3);\r\nvar _1 = __webpack_require__(5);\r\nvar CommerceLookupsSubscriptionStatusRoute = (function (_super) {\r\n    tslib_1.__extends(CommerceLookupsSubscriptionStatusRoute, _super);\r\n    function CommerceLookupsSubscriptionStatusRoute(basicCommerceLookupsSubscriptionStatusBatchRoute, appOptions) {\r\n        var _this = _super.call(this, appOptions) || this;\r\n        _this.basicCommerceLookupsSubscriptionStatusBatchRoute = basicCommerceLookupsSubscriptionStatusBatchRoute;\r\n        _this.appOptions = appOptions;\r\n        _this.findRoute = 'commerce/lookups/subscription-statuses/{?searchQuery,page,rpp,sort,embed,fields}';\r\n        _this.getRoute = 'commerce/lookups/subscription-statuses/{id}/{?embed,fields}';\r\n        _this.createRoute = 'commerce/lookups/subscription-statuses';\r\n        _this.updateRoute = 'commerce/lookups/subscription-statuses/{id}';\r\n        _this.deleteRoute = 'commerce/lookups/subscription-statuses/{id}';\r\n        return _this;\r\n    }\r\n    Object.defineProperty(CommerceLookupsSubscriptionStatusRoute.prototype, \"batch\", {\r\n        get: function () {\r\n            return this.basicCommerceLookupsSubscriptionStatusBatchRoute;\r\n        },\r\n        enumerable: true,\r\n        configurable: true\r\n    });\r\n    /**\r\n     * Parses find commerce customer-payment-methods route which can be expanded with additional options. Supported items are:\r\n     * - `searchQuery` - A string value used to identify commerce resources using the phrase search.\r\n     * - `page` - A value used to set the page number, i.e. to retrieve certain commerce subset from the storage.\r\n     * - `rpp` - A value used to limit the size of result set per page.\r\n     * - `sort` - A string used to set the commerce property to sort the result collection by.\r\n     * - `embed` - Comma separated list of resources to be contained within the current representation.\r\n     * @method\r\n     * @param options Query resource options.\r\n     * @example commerceLookupsSubscriptionStatusRoute.find({searchQuery: '<search-phrase>'});\r\n     **/\r\n    CommerceLookupsSubscriptionStatusRoute.prototype.find = function (options) {\r\n        return _super.prototype.baseFind.call(this, this.findRoute, options);\r\n    };\r\n    /**\r\n     * Parses get route; this route doesn't expose any properties.\r\n     * @method\r\n     * @example commerceLookupsSubscriptionStatusRoute.get();\r\n     **/\r\n    CommerceLookupsSubscriptionStatusRoute.prototype.get = function (id, options) {\r\n        return _super.prototype.baseGet.call(this, this.getRoute, options);\r\n    };\r\n    /**\r\n     * Parses create commerce payment method route; this URI template does not expose any additional options.\r\n     * @method\r\n     * @example commerceLookupsSubscriptionStatusRoute.create();\r\n     **/\r\n    CommerceLookupsSubscriptionStatusRoute.prototype.create = function () {\r\n        return _super.prototype.baseCreate.call(this, this.createRoute, {});\r\n    };\r\n    /**\r\n     * Parses update commerce payment method route; this URI template does not expose any additional options.\r\n     * @method\r\n     * @example commerceLookupsSubscriptionStatusRoute.update(data);\r\n     **/\r\n    CommerceLookupsSubscriptionStatusRoute.prototype.update = function (data) {\r\n        return _super.prototype.baseUpdate.call(this, this.updateRoute, data);\r\n    };\r\n    /**\r\n     * Parses delete commerce payment method route; this URI template does not expose any additional options.\r\n     * @method\r\n     * @example commerceLookupsSubscriptionStatusRoute.delete(data);\r\n     **/\r\n    CommerceLookupsSubscriptionStatusRoute.prototype.delete = function (data) {\r\n        return _super.prototype.baseDelete.call(this, this.deleteRoute, data);\r\n    };\r\n    return CommerceLookupsSubscriptionStatusRoute;\r\n}(common_1.BaseRoute));\r\nCommerceLookupsSubscriptionStatusRoute = tslib_1.__decorate([\r\n    inversify_1.injectable(),\r\n    tslib_1.__param(0, inversify_1.inject(_1.TYPES.CommerceLookupsSubscriptionStatusBatchRoute)),\r\n    tslib_1.__param(1, inversify_1.inject(contracts_1.TYPES.IAppOptions)),\r\n    tslib_1.__metadata(\"design:paramtypes\", [typeof (_a = typeof _1.CommerceLookupsSubscriptionStatusBatchRoute !== \"undefined\" && _1.CommerceLookupsSubscriptionStatusBatchRoute) === \"function\" && _a || Object, typeof (_b = typeof contracts_1.IAppOptions !== \"undefined\" && contracts_1.IAppOptions) === \"function\" && _b || Object])\r\n], CommerceLookupsSubscriptionStatusRoute);\r\nexports.CommerceLookupsSubscriptionStatusRoute = CommerceLookupsSubscriptionStatusRoute;\r\nvar _a, _b;\r\n/**\r\n * @copyright (c) 2017 Mono Ltd\r\n * @license MIT\r\n * @author Mono Ltd\r\n * @overview\r\n ***Notes:**\r\n - Refer to the [Baasic REST API](http://dev.baasic.com/api/reference/home) for detailed information about available Baasic REST API end-points.\r\n - [URI Template](https://github.com/Baasic/uritemplate-js) syntax enables expanding the Baasic route templates to Baasic REST URIs providing it with an object that contains URI parameters.\r\n - All end-point objects are transformed by the associated route service.\r\n */ \r\n\n\n/***/ }),\n/* 218 */\n/***/ (function(module, exports, __webpack_require__) {\n\n\"use strict\";\n\r\nfunction __export(m) {\r\n    for (var p in m) if (!exports.hasOwnProperty(p)) exports[p] = m[p];\r\n}\r\nObject.defineProperty(exports, \"__esModule\", { value: true });\r\n__export(__webpack_require__(215));\r\n__export(__webpack_require__(214));\r\n__export(__webpack_require__(217));\r\n__export(__webpack_require__(216));\r\n\n\n/***/ }),\n/* 219 */\n/***/ (function(module, exports, __webpack_require__) {\n\n\"use strict\";\n/* globals module */\r\n/**\r\n * @module commercePaymentTransactionClient\r\n * @description  Commerce PaymentTransaction Client provides an easy way to consume  Commerce REST API end-points. In order to obtain a needed routes `commercePaymentTransactionClient` uses `commercePaymentTransactionRoute`.\r\n */\r\n\r\nObject.defineProperty(exports, \"__esModule\", { value: true });\r\nvar tslib_1 = __webpack_require__(1);\r\nvar inversify_1 = __webpack_require__(0);\r\n;\r\nvar httpApi_1 = __webpack_require__(4);\r\nvar _1 = __webpack_require__(5);\r\nvar CommercePaymentTransactionClient = (function () {\r\n    function CommercePaymentTransactionClient(commercePaymentTransactionRoute, apiClient) {\r\n        this.commercePaymentTransactionRoute = commercePaymentTransactionRoute;\r\n        this.apiClient = apiClient;\r\n    }\r\n    Object.defineProperty(CommercePaymentTransactionClient.prototype, \"routeDefinition\", {\r\n        get: function () {\r\n            return this.commercePaymentTransactionRoute;\r\n        },\r\n        enumerable: true,\r\n        configurable: true\r\n    });\r\n    /**\r\n     * Returns a promise that is resolved once the find action has been performed. Success response returns a list of commerce resources matching the given criteria.\r\n     * @method\r\n     * @example commercePaymentTransactionClient.find({\r\n                    pageNumber : 1,\r\n                    pageSize : 10,\r\n                    orderBy : '<field>',\r\n                    orderDirection : '<asc|desc>',\r\n                    search : '<search-phrase>'\r\n                })\r\n                .then(function (collection) {\r\n                    // perform success action here\r\n                },\r\n                 function (response, status, headers, config) {\r\n                     // perform error handling here\r\n                });\r\n     **/\r\n    CommercePaymentTransactionClient.prototype.find = function (options) {\r\n        return this.apiClient.get(this.routeDefinition.find(options));\r\n    };\r\n    /**\r\n     * Returns a promise that is resolved once the get action has been performed. Success response returns the commerce resource.\r\n     * @method\r\n     * @example commercePaymentTransactionClient.get()\r\n                    .then(function (data) {\r\n                        // perform success action here\r\n                    },\r\n                     function (response, status, headers, config) {\r\n                         // perform error handling here\r\n                    });\r\n     **/\r\n    CommercePaymentTransactionClient.prototype.get = function (id, options) {\r\n        return this.apiClient.get(this.commercePaymentTransactionRoute.get(id, options));\r\n    };\r\n    /**\r\n     * Returns a promise that is resolved once the create action has been performed. Success response returns the commerce resource.\r\n     * @method\r\n     * @example commercePaymentTransactionClient.create(data)\r\n                    .then(function (data) {\r\n                        // perform success action here\r\n                    },\r\n                     function (response, status, headers, config) {\r\n                         // perform error handling here\r\n                    });\r\n     **/\r\n    CommercePaymentTransactionClient.prototype.create = function (data) {\r\n        return this.apiClient.post(this.routeDefinition.create(), this.routeDefinition.createParams(data));\r\n    };\r\n    /**\r\n     * Returns a promise that is resolved once the update commerce action has been performed; this action updates a commerce resource. This route uses HAL enabled objects to obtain routes and therefore it doesn't apply `commercePaymentTransactionRoute` route template. Here is an example of how a route can be obtained from HAL enabled objects:\r\n     * ```\r\n     * let params = modelMapper.removeParams(commercePaymentTransaction);\r\n     * let uri = params['model'].links('put').href;\r\n     * ```\r\n     * @method\r\n     * @example // commercePaymentTransaction is a resource previously fetched using get action.\r\n                        commercePaymentTransaction.amount : 100;\r\n                        commercePaymentTransactionClient.update(commercePaymentTransaction)\r\n                            .then(function (data) {\r\n                                // perform success action here\r\n                            },\r\n                             function (response, status, headers, config) {\r\n                                 // perform error handling here\r\n                            });\r\n     **/\r\n    CommercePaymentTransactionClient.prototype.update = function (data) {\r\n        return this.apiClient.put(this.routeDefinition.update(data), this.routeDefinition.updateParams(data));\r\n    };\r\n    /**\r\n     * Returns a promise that is resolved once the remove action has been performed. This action will remove a commerce resource from the system if successfully completed. This route uses HAL enabled objects to obtain routes and therefore it doesn't apply `commercePaymentTransactionRoute` route template. Here is an example of how a route can be obtained from HAL enabled objects:\r\n     * ```\r\n     * let params = modelMapper.removeParams(commercePaymentTransaction);\r\n     * let uri = params['model'].links('delete').href;\r\n     * ```\r\n     * @method\r\n     * @example // commercePaymentTransaction is a resource previously fetched using get action.\r\n                        commercePaymentTransactionClient.remove(commercePaymentTransaction)\r\n                            .then(function (data) {\r\n                                // perform success action here\r\n                            },\r\n                             function (response, status, headers, config) {\r\n                                 // perform error handling here\r\n                            });\r\n     **/\r\n    CommercePaymentTransactionClient.prototype.remove = function (data) {\r\n        return this.apiClient.delete(this.routeDefinition.delete(data));\r\n    };\r\n    return CommercePaymentTransactionClient;\r\n}());\r\nCommercePaymentTransactionClient = tslib_1.__decorate([\r\n    inversify_1.injectable(),\r\n    tslib_1.__param(0, inversify_1.inject(_1.TYPES.CommercePaymentTransactionRoute)),\r\n    tslib_1.__param(1, inversify_1.inject(httpApi_1.httpTYPES.ApiClient)),\r\n    tslib_1.__metadata(\"design:paramtypes\", [typeof (_a = typeof _1.CommercePaymentTransactionRoute !== \"undefined\" && _1.CommercePaymentTransactionRoute) === \"function\" && _a || Object, typeof (_b = typeof httpApi_1.ApiClient !== \"undefined\" && httpApi_1.ApiClient) === \"function\" && _b || Object])\r\n], CommercePaymentTransactionClient);\r\nexports.CommercePaymentTransactionClient = CommercePaymentTransactionClient;\r\nvar _a, _b;\r\n/**\r\n * @copyright (c) 2017 Mono Ltd\r\n * @license MIT\r\n * @author Mono Ltd\r\n * @overview\r\n ***Notes:**\r\n - Refer to the [Baasic REST API](http://dev.baasic.com/api/reference/home) for detailed information about available Baasic REST API end-points.\r\n - All end-point objects are transformed by the associated route service.\r\n */ \r\n\n\n/***/ }),\n/* 220 */\n/***/ (function(module, exports, __webpack_require__) {\n\n\"use strict\";\n/* globals module */\r\n/**\r\n * @module commercePaymentTransactionRoute\r\n * @description Baasic Commerce PaymentTransaction Route Definition provides Baasic route templates which can be expanded to Baasic REST URIs. Various services can use Baasic Commerce PaymentTransaction Route Definition to obtain a needed routes while other routes will be obtained through HAL. By convention, all route services  use the same function names as their corresponding services.\r\n */\r\n\r\nObject.defineProperty(exports, \"__esModule\", { value: true });\r\nvar tslib_1 = __webpack_require__(1);\r\nvar inversify_1 = __webpack_require__(0);\r\nvar common_1 = __webpack_require__(2);\r\n;\r\nvar contracts_1 = __webpack_require__(3);\r\nvar CommercePaymentTransactionRoute = (function (_super) {\r\n    tslib_1.__extends(CommercePaymentTransactionRoute, _super);\r\n    function CommercePaymentTransactionRoute(appOptions) {\r\n        var _this = _super.call(this, appOptions) || this;\r\n        _this.appOptions = appOptions;\r\n        _this.findRoute = 'commerce/payment-transactions/{?customerId,searchQuery,invoiceStatusId,subscriptionId,paymentMethodId,firstName,lastName,transactionStatuses,page,rpp,sort,embed,fields}';\r\n        _this.getRoute = 'commerce/payment-transactions/{id}/{?embed,fields}';\r\n        _this.createRoute = 'commerce/payment-transactions';\r\n        _this.updateRoute = 'commerce/payment-transactions/{id}';\r\n        _this.deleteRoute = 'commerce/payment-transactions/{id}';\r\n        return _this;\r\n    }\r\n    /**\r\n     * Parses find commerce payment transaction route which can be expanded with additional options. Supported items are:\r\n     * - `customerId` - A customer unique identifier.\r\n     * - `searchQuery` - A string value used to identify commerce resources using the phrase search.\r\n     * - `invoiceStatusId` - A invoice status unique identifier.\r\n     * - `subscriptionId` - A subscription unique identifier.\r\n     * - `paymentMethodId` - A payment method unique identifier.\r\n     * - `firstName` - A customer first name.\r\n     * - `lastName` - A customer last name.\r\n     * - `transactionStatuses` - A transaction statuses in CSV format.\r\n     * - `page` - A value used to set the page number, i.e. to retrieve certain commerce subset from the storage.\r\n     * - `rpp` - A value used to limit the size of result set per page.\r\n     * - `sort` - A string used to set the commerce property to sort the result collection by.\r\n     * - `embed` - Comma separated list of resources to be contained within the current representation.\r\n     * @method\r\n     * @example commercePaymentTransactionRoute.find({searchQuery: '<search-phrase>'});\r\n     **/\r\n    CommercePaymentTransactionRoute.prototype.find = function (options) {\r\n        return _super.prototype.baseFind.call(this, this.findRoute, options);\r\n    };\r\n    /**\r\n     * Parses get route; this route doesn't expose any properties.\r\n     * @method\r\n     * @example commercePaymentTransactionRoute.get(id, options);\r\n     **/\r\n    CommercePaymentTransactionRoute.prototype.get = function (id, options) {\r\n        return _super.prototype.baseGet.call(this, this.getRoute, id, options);\r\n    };\r\n    /**\r\n     * Parses create route; this route doesn't expose any properties.\r\n     * @method\r\n     * @example commercePaymentTransactionRoute.create();\r\n     **/\r\n    CommercePaymentTransactionRoute.prototype.create = function () {\r\n        return _super.prototype.baseCreate.call(this, this.createRoute, {});\r\n    };\r\n    /**\r\n     * Parses update route; this route doesn't expose any properties.\r\n     * @method\r\n     * @example commercePaymentTransactionRoute.update(data);\r\n     **/\r\n    CommercePaymentTransactionRoute.prototype.update = function (data) {\r\n        return _super.prototype.baseUpdate.call(this, this.updateRoute, data);\r\n    };\r\n    /**\r\n     * Parses delete route; this route doesn't expose any properties.\r\n     * @method\r\n     * @example commercePaymentTransactionRoute.delete(data);\r\n     **/\r\n    CommercePaymentTransactionRoute.prototype.delete = function (data) {\r\n        return _super.prototype.baseDelete.call(this, this.deleteRoute, data);\r\n    };\r\n    return CommercePaymentTransactionRoute;\r\n}(common_1.BaseRoute));\r\nCommercePaymentTransactionRoute = tslib_1.__decorate([\r\n    inversify_1.injectable(),\r\n    tslib_1.__param(0, inversify_1.inject(contracts_1.TYPES.IAppOptions)),\r\n    tslib_1.__metadata(\"design:paramtypes\", [typeof (_a = typeof contracts_1.IAppOptions !== \"undefined\" && contracts_1.IAppOptions) === \"function\" && _a || Object])\r\n], CommercePaymentTransactionRoute);\r\nexports.CommercePaymentTransactionRoute = CommercePaymentTransactionRoute;\r\nvar _a;\r\n/**\r\n * @copyright (c) 2017 Mono Ltd\r\n * @license MIT\r\n * @author Mono Ltd\r\n * @overview\r\n ***Notes:**\r\n - Refer to the [Baasic REST API](http://dev.baasic.com/api/reference/home) for detailed information about available Baasic REST API end-points.\r\n - [URI Template](https://github.com/Baasic/uritemplate-js) syntax enables expanding the Baasic route templates to Baasic REST URIs providing it with an object that contains URI parameters.\r\n - All end-point objects are transformed by the associated route service.\r\n */ \r\n\n\n/***/ }),\n/* 221 */\n/***/ (function(module, exports, __webpack_require__) {\n\n\"use strict\";\n\r\nfunction __export(m) {\r\n    for (var p in m) if (!exports.hasOwnProperty(p)) exports[p] = m[p];\r\n}\r\nObject.defineProperty(exports, \"__esModule\", { value: true });\r\n__export(__webpack_require__(220));\r\n__export(__webpack_require__(219));\r\n\n\n/***/ }),\n/* 222 */\n/***/ (function(module, exports, __webpack_require__) {\n\n\"use strict\";\n/* globals module */\r\n/**\r\n * @module commerceProductClient\r\n * @description  Commerce Product Client provides an easy way to consume  Commerce REST API end-points. In order to obtain a needed routes `commerceProductClient` uses `commerceProductRoute`.\r\n */\r\n\r\nObject.defineProperty(exports, \"__esModule\", { value: true });\r\nvar tslib_1 = __webpack_require__(1);\r\nvar inversify_1 = __webpack_require__(0);\r\n;\r\nvar httpApi_1 = __webpack_require__(4);\r\nvar _1 = __webpack_require__(5);\r\nvar CommerceProductClient = (function () {\r\n    function CommerceProductClient(commerceProductRoute, apiClient) {\r\n        this.commerceProductRoute = commerceProductRoute;\r\n        this.apiClient = apiClient;\r\n    }\r\n    Object.defineProperty(CommerceProductClient.prototype, \"routeDefinition\", {\r\n        get: function () {\r\n            return this.commerceProductRoute;\r\n        },\r\n        enumerable: true,\r\n        configurable: true\r\n    });\r\n    /**\r\n     * Returns a promise that is resolved once the find action has been performed. Success response returns a list of commerce resources matching the given criteria.\r\n     * @method\r\n     * @example commerceProductClient.find({\r\n                   pageNumber : 1,\r\n                   pageSize : 10,\r\n                   orderBy : '<field>',\r\n                   orderDirection : '<asc|desc>',\r\n                   search : '<search-phrase>'\r\n               })\r\n               .then(function (collection) {\r\n                   // perform success action here\r\n               },\r\n                function (response, status, headers, config) {\r\n                    // perform error handling here\r\n               });\r\n    **/\r\n    CommerceProductClient.prototype.find = function (options) {\r\n        return this.apiClient.get(this.routeDefinition.find(options));\r\n    };\r\n    /**\r\n     * Returns a promise that is resolved once the get action has been performed. Success response returns the commerce resource.\r\n     * @method\r\n     * @example commerceProductClient.get()\r\n                      .then(function (data) {\r\n                          // perform success action here\r\n                      },\r\n                       function (response, status, headers, config) {\r\n                           // perform error handling here\r\n                      });\r\n   **/\r\n    CommerceProductClient.prototype.get = function (id, options) {\r\n        return this.apiClient.get(this.commerceProductRoute.get(id, options));\r\n    };\r\n    /**\r\n     * Returns a promise that is resolved once the create commerce action has been performed; this action creates a new commerce resource.\r\n     * @method\r\n     * @example commerceProductClient.create({\r\n                    name : '<product-name>',\r\n                    slug : '<slug>',\r\n                    shortDescription : '<short-description>',\r\n                    recurringCyclePeriodTypeId: '<recurring-cycle-period-type-id>'\r\n                    planId : '<plan-id>',\r\n                    price: 100,\r\n                    published: true\r\n                })\r\n                .then(function (data) {\r\n                    // perform success action here\r\n                },\r\n                 function (response, status, headers, config) {\r\n                     // perform error handling here\r\n                });\r\n     **/\r\n    CommerceProductClient.prototype.create = function (data) {\r\n        return this.apiClient.post(this.routeDefinition.create(), this.routeDefinition.createParams(data));\r\n    };\r\n    /**\r\n     * Returns a promise that is resolved once the update commerce action has been performed; this action updates a commerce resource. This route uses HAL enabled objects to obtain routes and therefore it doesn't apply `commerceProductRoute` route template. Here is an example of how a route can be obtained from HAL enabled objects:\r\n     * ```\r\n     * let params = modelMapper.removeParams(commerceProduct);\r\n     * let uri = params['model'].links('put').href;\r\n     * ```\r\n     * @method\r\n     * @example // commerceProduct is a resource previously fetched using get action.\r\n                        commerceProduct.shortDescription : '<short-description>';\r\n                        commerceProductClient.update(commerceProduct)\r\n                            .then(function (data) {\r\n                                // perform success action here\r\n                            },\r\n                             function (response, status, headers, config) {\r\n                                 // perform error handling here\r\n                            });\r\n     **/\r\n    CommerceProductClient.prototype.update = function (data) {\r\n        return this.apiClient.put(this.routeDefinition.update(data), this.routeDefinition.updateParams(data));\r\n    };\r\n    /**\r\n     * Returns a promise that is resolved once the remove action has been performed. This action will remove a commerce resource from the system if successfully completed. This route uses HAL enabled objects to obtain routes and therefore it doesn't apply `commerceProductRoute` route template. Here is an example of how a route can be obtained from HAL enabled objects:\r\n     * ```\r\n     * let params = modelMapper.removeParams(commerceProduct);\r\n     * let uri = params['model'].links('delete').href;\r\n     * ```\r\n     * @method\r\n     * @example // commerceProduct is a resource previously fetched using get action.\r\n                    commerceProductClient.remove(commerceProduct)\r\n                        .then(function (data) {\r\n                            // perform success action here\r\n                        },\r\n                         function (response, status, headers, config) {\r\n                             // perform error handling here\r\n                        });\r\n     **/\r\n    CommerceProductClient.prototype.remove = function (data) {\r\n        return this.apiClient.delete(this.routeDefinition.delete(data));\r\n    };\r\n    return CommerceProductClient;\r\n}());\r\nCommerceProductClient = tslib_1.__decorate([\r\n    inversify_1.injectable(),\r\n    tslib_1.__param(0, inversify_1.inject(_1.TYPES.CommerceProductRoute)),\r\n    tslib_1.__param(1, inversify_1.inject(httpApi_1.httpTYPES.ApiClient)),\r\n    tslib_1.__metadata(\"design:paramtypes\", [typeof (_a = typeof _1.CommerceProductRoute !== \"undefined\" && _1.CommerceProductRoute) === \"function\" && _a || Object, typeof (_b = typeof httpApi_1.ApiClient !== \"undefined\" && httpApi_1.ApiClient) === \"function\" && _b || Object])\r\n], CommerceProductClient);\r\nexports.CommerceProductClient = CommerceProductClient;\r\nvar _a, _b;\r\n/**\r\n * @copyright (c) 2017 Mono Ltd\r\n * @license MIT\r\n * @author Mono Ltd\r\n * @overview\r\n ***Notes:**\r\n - Refer to the [Baasic REST API](http://dev.baasic.com/api/reference/home) for detailed information about available Baasic REST API end-points.\r\n - All end-point objects are transformed by the associated route service.\r\n */ \r\n\n\n/***/ }),\n/* 223 */\n/***/ (function(module, exports, __webpack_require__) {\n\n\"use strict\";\n/* globals module */\r\n/**\r\n * @module commerceProductRoute\r\n * @description Baasic Commerce Product Route Definition provides Baasic route templates which can be expanded to Baasic REST URIs. Various services can use Baasic Commerce Product Route Definition to obtain a needed routes while other routes will be obtained through HAL. By convention, all route services  use the same function names as their corresponding services.\r\n */\r\n\r\nObject.defineProperty(exports, \"__esModule\", { value: true });\r\nvar tslib_1 = __webpack_require__(1);\r\nvar inversify_1 = __webpack_require__(0);\r\nvar common_1 = __webpack_require__(2);\r\n;\r\nvar contracts_1 = __webpack_require__(3);\r\nvar CommerceProductRoute = (function (_super) {\r\n    tslib_1.__extends(CommerceProductRoute, _super);\r\n    function CommerceProductRoute(appOptions) {\r\n        var _this = _super.call(this, appOptions) || this;\r\n        _this.appOptions = appOptions;\r\n        _this.findRoute = 'commerce/products/{?searchQuery,page,rpp,sort,embed,fields}';\r\n        _this.getRoute = 'commerce/products/{id}/{?embed,fields}';\r\n        _this.createRoute = 'commerce/products';\r\n        _this.updateRoute = 'commerce/products/{id}';\r\n        _this.deleteRoute = 'commerce/products/{id}';\r\n        return _this;\r\n    }\r\n    /**\r\n     * Parses find commerce product route which can be expanded with additional options. Supported items are:\r\n     * - `searchQuery` - A string value used to identify commerce resources using the phrase search.\r\n     * - `page` - A value used to set the page number, i.e. to retrieve certain commerce subset from the storage.\r\n     * - `rpp` - A value used to limit the size of result set per page.\r\n     * - `sort` - A string used to set the commerce property to sort the result collection by.\r\n     * - `embed` - Comma separated list of resources to be contained within the current representation.\r\n     * @method\r\n     * @example commerceProductRoute.find({searchQuery: '<search-phrase>'});\r\n     **/\r\n    CommerceProductRoute.prototype.find = function (options) {\r\n        return _super.prototype.baseFind.call(this, this.findRoute, options);\r\n    };\r\n    /**\r\n     * Parses get route; this route doesn't expose any properties.\r\n     * @method\r\n     * @example commerceProductRoute.get(id, options);\r\n     **/\r\n    CommerceProductRoute.prototype.get = function (id, options) {\r\n        return _super.prototype.baseGet.call(this, this.getRoute, id, options);\r\n    };\r\n    /**\r\n     * Parses create commerce product route; this URI template does not expose any additional options.\r\n     * @method\r\n     * @example commerceProductRoute.create();\r\n     **/\r\n    CommerceProductRoute.prototype.create = function () {\r\n        return _super.prototype.baseCreate.call(this, this.createRoute, {});\r\n    };\r\n    /**\r\n     * Parses update commerce product route; this URI template does not expose any additional options.\r\n     * @method\r\n     * @example commerceProductRoute.update(data);\r\n     **/\r\n    CommerceProductRoute.prototype.update = function (data) {\r\n        return _super.prototype.baseUpdate.call(this, this.updateRoute, data);\r\n    };\r\n    /**\r\n    * Parses delete commerce product route; this URI template does not expose any additional options.\r\n    * @method\r\n    * @example commerceProductRoute.delete(data);\r\n    **/\r\n    CommerceProductRoute.prototype.delete = function (data) {\r\n        return _super.prototype.baseDelete.call(this, this.deleteRoute, data);\r\n    };\r\n    return CommerceProductRoute;\r\n}(common_1.BaseRoute));\r\nCommerceProductRoute = tslib_1.__decorate([\r\n    inversify_1.injectable(),\r\n    tslib_1.__param(0, inversify_1.inject(contracts_1.TYPES.IAppOptions)),\r\n    tslib_1.__metadata(\"design:paramtypes\", [typeof (_a = typeof contracts_1.IAppOptions !== \"undefined\" && contracts_1.IAppOptions) === \"function\" && _a || Object])\r\n], CommerceProductRoute);\r\nexports.CommerceProductRoute = CommerceProductRoute;\r\nvar _a;\r\n/**\r\n * @copyright (c) 2017 Mono Ltd\r\n * @license MIT\r\n * @author Mono Ltd\r\n * @overview\r\n ***Notes:**\r\n - Refer to the [Baasic REST API](http://dev.baasic.com/api/reference/home) for detailed information about available Baasic REST API end-points.\r\n - [URI Template](https://github.com/Baasic/uritemplate-js) syntax enables expanding the Baasic route templates to Baasic REST URIs providing it with an object that contains URI parameters.\r\n - All end-point objects are transformed by the associated route service.\r\n */ \r\n\n\n/***/ }),\n/* 224 */\n/***/ (function(module, exports, __webpack_require__) {\n\n\"use strict\";\n\r\nfunction __export(m) {\r\n    for (var p in m) if (!exports.hasOwnProperty(p)) exports[p] = m[p];\r\n}\r\nObject.defineProperty(exports, \"__esModule\", { value: true });\r\n__export(__webpack_require__(223));\r\n__export(__webpack_require__(222));\r\n\n\n/***/ }),\n/* 225 */\n/***/ (function(module, exports, __webpack_require__) {\n\n\"use strict\";\n\r\nObject.defineProperty(exports, \"__esModule\", { value: true });\r\nvar inversify_1 = __webpack_require__(0);\r\nvar _1 = __webpack_require__(19);\r\nvar TYPES = {\r\n    DynamicResourceACLClient: Symbol(\"DynamicResourceACLClient\"),\r\n    DynamicResourceACLRoute: Symbol(\"DynamicResourceACLRoute\"),\r\n    DynamicResourceClient: Symbol(\"DynamicResourceClient\"),\r\n    DynamicResourceRoute: Symbol(\"DynamicResourceRoute\"),\r\n    DynamicSchemaClient: Symbol(\"DynamicSchemaClient\"),\r\n    DynamicSchemaRoute: Symbol(\"DynamicSchemaRoute\")\r\n};\r\nexports.TYPES = TYPES;\r\nvar diModule = new inversify_1.ContainerModule(function (bind) {\r\n    bind(TYPES.DynamicResourceACLRoute).to(_1.DynamicResourceACLRoute);\r\n    bind(TYPES.DynamicResourceACLClient).to(_1.DynamicResourceACLClient);\r\n    bind(TYPES.DynamicResourceRoute).to(_1.DynamicResourceRoute);\r\n    bind(TYPES.DynamicResourceClient).to(_1.DynamicResourceClient);\r\n    bind(TYPES.DynamicSchemaRoute).to(_1.DynamicSchemaRoute);\r\n    bind(TYPES.DynamicSchemaClient).to(_1.DynamicSchemaClient);\r\n});\r\nexports.diModule = diModule;\r\n\n\n/***/ }),\n/* 226 */\n/***/ (function(module, exports, __webpack_require__) {\n\n\"use strict\";\n/**\r\n * @module dynamicResourceACLClient\r\n * @description  Dynamic Resource ACL Client provides an easy way to consume  Dynamic Resource REST API end-points. In order to obtain needed routes `dynamicResourceACLClient` uses `dynamicResourceACLRoute`.\r\n */\r\n\r\nObject.defineProperty(exports, \"__esModule\", { value: true });\r\nvar tslib_1 = __webpack_require__(1);\r\nvar inversify_1 = __webpack_require__(0);\r\n;\r\nvar httpApi_1 = __webpack_require__(4);\r\nvar _1 = __webpack_require__(19);\r\nvar DynamicResourceACLClient = (function () {\r\n    function DynamicResourceACLClient(dynamicResourceACLRoute, apiClient) {\r\n        this.dynamicResourceACLRoute = dynamicResourceACLRoute;\r\n        this.apiClient = apiClient;\r\n    }\r\n    Object.defineProperty(DynamicResourceACLClient.prototype, \"routeDefinition\", {\r\n        get: function () {\r\n            return this.dynamicResourceACLRoute;\r\n        },\r\n        enumerable: true,\r\n        configurable: true\r\n    });\r\n    /**\r\n     * Returns a promise that is resolved once the get action has been performed. Success response returns a list of ACL policies established for the specified dynamic resource.\r\n     * @method\r\n     * @param options Options object.\r\n     * @example dynamicResourceACLClient.get({id: '<dynamic-resource-id>', schemaName: '<schema-name>'})\r\n                    .then(function (data) {\r\n                        // perform success action here\r\n                    },\r\n                     function (response, status, headers, config) {\r\n                        // perform error handling here\r\n                    });\r\n     **/\r\n    DynamicResourceACLClient.prototype.get = function (options) {\r\n        return this.apiClient.get(this.routeDefinition.get(options));\r\n    };\r\n    /**\r\n     * Returns a promise that is resolved once the update acl action has been performed; this action creates new ACL policy for the specified dynamic resource.\r\n     * @method\r\n     * @param options Options object.\r\n     * @example dynamicResourceACLClient.update({id: '<dynamic-resource-id>', schemaName: '<schema-name>'})\r\n                    .then(function (data) {\r\n                        // perform success action here\r\n                    },\r\n                     function (response, status, headers, config) {\r\n                        // perform error handling here\r\n                    });\r\n     **/\r\n    DynamicResourceACLClient.prototype.update = function (options) {\r\n        return this.apiClient.put(this.routeDefinition.update(options), this.routeDefinition.updateParams(options));\r\n    };\r\n    /**\r\n     * Returns a promise that is resolved once the removeByUser action has been performed. This action deletes ACL policy assigned to the specified user and dynamic resource.\r\n     * @method\r\n     * @param action Action abbreviation which identifies ACL policy assigned to the specified user and dynamic resource.\r\n     *               Supported Values:\r\n     *               \"Create\"\r\n     *               \"Delete\"\r\n     *               \"Read\"\r\n     *               \"Update\"\r\n     * @param user Username which uniquely identifies user for which ACL policy needs to be removed.\r\n     * @param data ACL Policy whose security privileges need to be retrieved and updated.\r\n     * @example // dynamicResource is a resource previously fetched using get action.\r\n                    dynamicResourceACLClient.removeByUser('<access-action>', '<username>', dynamicResource)\r\n                        .then(function (data) {\r\n                            // perform success action here\r\n                        },\r\n                         function (response, status, headers, config) {\r\n                            // perform error handling here\r\n                        });\r\n     **/\r\n    DynamicResourceACLClient.prototype.removeByUser = function (action, user, data) {\r\n        return this.apiClient.delete(this.dynamicResourceACLRoute.deleteByUser(action, user, data));\r\n    };\r\n    /**\r\n     * Returns a promise that is resolved once the removeByRole action has been performed. This action deletes ACL policy assigned to the specified role and dynamic resource.\r\n     * @method\r\n     * @param action Action abbreviation which identifies ACL policy assigned to the specified role and dynamic resource.\r\n     *               Supported Values:\r\n     *               \"Create\"\r\n     *               \"Delete\"\r\n     *               \"Read\"\r\n     *               \"Update\"\r\n     * @param role Role's name which uniquely identifies role for which ACL policy needs to be removed.\r\n     * @param data ACL Policy whose security privileges need to be retrieved and updated.\r\n     * @example // dynamicResource is a resource previously fetched using get action.\r\n                    dynamicResourceACLClient.removeByRole('<access-action>', '<role-name>', dynamicResource)\r\n                        .then(function (data) {\r\n                            // perform success action here\r\n                        },\r\n                         function (response, status, headers, config) {\r\n                            // perform error handling here\r\n                        });\r\n     **/\r\n    DynamicResourceACLClient.prototype.removeByRole = function (action, role, data) {\r\n        return this.apiClient.delete(this.dynamicResourceACLRoute.deleteByRole(action, role, data));\r\n    };\r\n    return DynamicResourceACLClient;\r\n}());\r\nDynamicResourceACLClient = tslib_1.__decorate([\r\n    inversify_1.injectable(),\r\n    tslib_1.__param(0, inversify_1.inject(_1.TYPES.DynamicResourceACLRoute)),\r\n    tslib_1.__param(1, inversify_1.inject(httpApi_1.httpTYPES.ApiClient)),\r\n    tslib_1.__metadata(\"design:paramtypes\", [typeof (_a = typeof _1.DynamicResourceACLRoute !== \"undefined\" && _1.DynamicResourceACLRoute) === \"function\" && _a || Object, typeof (_b = typeof httpApi_1.ApiClient !== \"undefined\" && httpApi_1.ApiClient) === \"function\" && _b || Object])\r\n], DynamicResourceACLClient);\r\nexports.DynamicResourceACLClient = DynamicResourceACLClient;\r\nvar _a, _b;\r\n/**\r\n * @overview\r\n ***Notes:**\r\n - Refer to the [Baasic REST API](http://dev.baasic.com/api/reference/home) for detailed information about available Baasic REST API end-points.\r\n - All end-point objects are transformed by the associated route service.\r\n */ \r\n\n\n/***/ }),\n/* 227 */\n/***/ (function(module, exports, __webpack_require__) {\n\n\"use strict\";\n/**\r\n * @module dynamicResourceACLRoute\r\n * @description Baasic Dynamic Resource ACL Route Definition provides Baasic route templates which can be expanded to Baasic REST URIs. Various services can use Baasic Dynamic Resource ACL Route Definition to obtain needed routes while other routes will be obtained through HAL. By convention, all route services  use the same function names as their corresponding services.\r\n */\r\n\r\nObject.defineProperty(exports, \"__esModule\", { value: true });\r\nvar tslib_1 = __webpack_require__(1);\r\nvar inversify_1 = __webpack_require__(0);\r\nvar common_1 = __webpack_require__(2);\r\n;\r\nvar contracts_1 = __webpack_require__(3);\r\nvar DynamicResourceACLRoute = (function (_super) {\r\n    tslib_1.__extends(DynamicResourceACLRoute, _super);\r\n    function DynamicResourceACLRoute(appOptions) {\r\n        var _this = _super.call(this, appOptions) || this;\r\n        _this.appOptions = appOptions;\r\n        _this.getRoute = 'resources/{schemaName}/{id}/acl/{?fields}';\r\n        _this.updateRoute = 'resources/{schemaName}/{id}/acl/{?fields}';\r\n        _this.deleteByUserRoute = 'resources/{schemaName}/{id}/acl/actions/{accessAction}/users/{user}/';\r\n        _this.deleteByRoleRoute = 'resources/{schemaName}/{id}/acl/actions/{accessAction}/roles/{role}/';\r\n        return _this;\r\n    }\r\n    /**\r\n     * Parses get acl route; this URI template should be expanded with the Id of the dynamic resource and name of the dynamic resource schema.\r\n     * @method\r\n     * @param options Query resource options object.\r\n     * @example dynamicResourceACLRoute.get(options)\r\n     **/\r\n    DynamicResourceACLRoute.prototype.get = function (options) {\r\n        var params = this.utility.extend({}, options);\r\n        return _super.prototype.baseCreate.call(this, this.getRoute, params);\r\n    };\r\n    /**\r\n     * Parses update acl route; this URI template should be expanded with the Id of the dynamic resource and name of the dynamic resource schema.\r\n     * @method\r\n     * @param options Options object.\r\n     * @example dynamicResourceACLRoute.update(options)\r\n     **/\r\n    DynamicResourceACLRoute.prototype.update = function (options) {\r\n        var params = this.utility.extend({}, options);\r\n        return _super.prototype.baseCreate.call(this, this.updateRoute, options);\r\n    };\r\n    /**\r\n     * Parses deleteByUser acl route which can be expanded with additional options. Supported items are:\r\n     * - `schemaName` - Name of the dynamic resource schema.\r\n     * - `id` - Id of the dynamic resource.\r\n     * - `accessAction` - Action abbreviation which identifies ACL policy assigned to the specified user and dynamic resource item.\r\n     * - `user` - A value which uniquely identifies user for which ACL policy needs to be removed.\r\n     * @method\r\n     * @param action Action abbreviation which identifies ACL policy assigned to the specified user and dynamic resource item.\r\n     * @param username A value which uniquely identifies user for which ACL policy needs to be removed.\r\n     * @param data ACL Policy object used to perform delete action.\r\n     * @example dynamicResourceACLRoute.deleteByUser(action, username, data);\r\n     **/\r\n    DynamicResourceACLRoute.prototype.deleteByUser = function (action, username, data) {\r\n        var params = this.modelMapper.removeParams(data);\r\n        params.user = username;\r\n        params.accessAction = action;\r\n        return _super.prototype.baseCreate.call(this, this.deleteByUserRoute, params);\r\n    };\r\n    /**\r\n     * Parses deleteByRole acl route which can be expanded with additional options. Supported items are:\r\n     * - `schemaName` - Name of the dynamic resource schema.\r\n     * - `id` - Id of the dynamic resource.\r\n     * - `accessAction` - Action abbreviation which identifies ACL policy assigned to the specified role and dynamic resource item.\r\n     * - `role` - A value which uniquely identifies role for which ACL policy needs to be removed.\r\n     * @method\r\n     * @param action Action abbreviation which identifies ACL policy assigned to the specified role and dynamic resource item.\r\n     * @param role A value which uniquely identifies role for which ACL policy needs to be removed.\r\n     * @param data ACLPolicy object used to perform delete action.\r\n     * @example dynamicResourceACLRoute.deleteByRole(action, role, data)\r\n     **/\r\n    DynamicResourceACLRoute.prototype.deleteByRole = function (action, role, data) {\r\n        var params = this.modelMapper.removeParams(data);\r\n        params.role = role;\r\n        params.accessAction = action;\r\n        return _super.prototype.baseCreate.call(this, this.deleteByRoleRoute, params);\r\n    };\r\n    DynamicResourceACLRoute.prototype.updateParams = function (options) {\r\n        var params = this.utility.extend({}, options);\r\n        return params[this.modelMapper.modelPropertyName];\r\n    };\r\n    return DynamicResourceACLRoute;\r\n}(common_1.BaseRoute));\r\nDynamicResourceACLRoute = tslib_1.__decorate([\r\n    inversify_1.injectable(),\r\n    tslib_1.__param(0, inversify_1.inject(contracts_1.TYPES.IAppOptions)),\r\n    tslib_1.__metadata(\"design:paramtypes\", [typeof (_a = typeof contracts_1.IAppOptions !== \"undefined\" && contracts_1.IAppOptions) === \"function\" && _a || Object])\r\n], DynamicResourceACLRoute);\r\nexports.DynamicResourceACLRoute = DynamicResourceACLRoute;\r\nvar _a;\r\n/**\r\n * @overview\r\n ***Notes:**\r\n - Refer to the [Baasic REST API](http://dev.baasic.com/api/reference/home) for detailed information about available Baasic REST API end-points.\r\n - [URI Template](https://github.com/Baasic/uritemplate-js) syntax enables expanding the Baasic route templates to Baasic REST URIs providing it with an object that contains URI parameters.\r\n - All end-point objects are transformed by the associated route service.\r\n */ \r\n\n\n/***/ }),\n/* 228 */\n/***/ (function(module, exports, __webpack_require__) {\n\n\"use strict\";\n/**\r\n * @module dynamicResourceClient\r\n * @description  Dynamic Resource Client provides an easy way to consume  Dynamic Resource REST API end-points. In order to obtain needed routes `dynamicResourceClient` uses `dynamicResourceRoute`.\r\n */\r\n\r\nObject.defineProperty(exports, \"__esModule\", { value: true });\r\nvar tslib_1 = __webpack_require__(1);\r\nvar inversify_1 = __webpack_require__(0);\r\n;\r\nvar httpApi_1 = __webpack_require__(4);\r\nvar _1 = __webpack_require__(19);\r\nvar DynamicResourceClient = (function () {\r\n    function DynamicResourceClient(dynamicResourceRoute, dynamicResourceACLClient, dynamicSchemaClient, apiClient) {\r\n        this.dynamicResourceRoute = dynamicResourceRoute;\r\n        this.dynamicResourceACLClient = dynamicResourceACLClient;\r\n        this.dynamicSchemaClient = dynamicSchemaClient;\r\n        this.apiClient = apiClient;\r\n    }\r\n    Object.defineProperty(DynamicResourceClient.prototype, \"routeDefinition\", {\r\n        /**\r\n         * Provides direct access to `dynamicResourceRoute`.\r\n         * @method\r\n         * @example dynamicResourceClient.routeDefinition.get(schemaName, id, options)\r\n         **/\r\n        get: function () {\r\n            return this.dynamicResourceRoute;\r\n        },\r\n        enumerable: true,\r\n        configurable: true\r\n    });\r\n    Object.defineProperty(DynamicResourceClient.prototype, \"acl\", {\r\n        get: function () {\r\n            return this.dynamicResourceACLClient;\r\n        },\r\n        enumerable: true,\r\n        configurable: true\r\n    });\r\n    Object.defineProperty(DynamicResourceClient.prototype, \"schema\", {\r\n        get: function () {\r\n            return this.dynamicSchemaClient;\r\n        },\r\n        enumerable: true,\r\n        configurable: true\r\n    });\r\n    /**\r\n     * Returns a promise that is resolved once the find action has been performed. Success response returns a list of dynamic resources matching the given criteria.\r\n     * @method\r\n     * @param schemaName Name of dynamic resource schema whose dynamic resources need to be retrieved.\r\n     * @param options Query resource options object.\r\n     * @returns Promise that is resolved once the find action has been performed.\r\n     * @example dynamicResourceClient.find('<schema-name>', {\r\n                    pageNumber : 1,\r\n                    pageSize : 10,\r\n                    orderBy : '<field>',\r\n                    orderDirection : '<asc|desc>',\r\n                    search : '<search-phrase>'\r\n                })\r\n                .then(function (collection) {\r\n                    // perform success action here\r\n                },\r\n                 function (response, status, headers, config) {\r\n                    // perform error handling here\r\n                });\r\n     **/\r\n    DynamicResourceClient.prototype.find = function (schemaName, options) {\r\n        return this.apiClient.get(this.dynamicResourceRoute.find(schemaName, options));\r\n    };\r\n    /**\r\n     * Returns a promise that is resolved once the get action has been performed. Success response returns the specified dynamic resource.\r\n     * @method\r\n     * @example dynamicResourceClient.get('<schema-name>', '<dynamic-resource-id>')\r\n                    .then(function (data) {\r\n                        // perform success action here\r\n                    },\r\n                     function (response, status, headers, config) {\r\n                        // perform error handling here\r\n                    });\r\n     **/\r\n    DynamicResourceClient.prototype.get = function (schemaName, id, options) {\r\n        return this.apiClient.get(this.dynamicResourceRoute.get(id, schemaName, options));\r\n    };\r\n    /**\r\n     * Returns a promise that is resolved once the create dynamic resource action has been performed; this action creates a new dynamic resource item.\r\n     * @method\r\n     * @param schemaName Name of dynamic resource schema that needs to be updated with new dynamic resource.\r\n     * @param data A JSON object that needs to be inserted into the system as dynamic resource. JSON object is an unordered collection of zero or more key/value pairs structured using the standard JSON syntax rules.\r\n     * @example dynamicResourceClient.create('<schema-name>', {\r\n                    id : '',\r\n                    description : '<description>'\r\n                })\r\n                .then(function (data) {\r\n                    // perform success action here\r\n                },\r\n                 function (response, status, headers, config) {\r\n                     // perform error handling here\r\n                });\r\n     **/\r\n    DynamicResourceClient.prototype.create = function (schemaName, data) {\r\n        return this.apiClient.post(this.routeDefinition.create(schemaName), this.routeDefinition.createParams(data));\r\n    };\r\n    /**\r\n     * Returns a promise that is resolved once the update action has been performed; this action updates a dynamic resource item. This route uses HAL enabled objects to obtain routes and therefore it doesn't apply `dynamicResourceRoute` route template. Here is an example of how a route can be obtained from HAL enabled objects:\r\n     * ```\r\n     * let params = modelMapper.removeParams(dynamicResource);\r\n     * let uri = params['model'].links('put').href;\r\n     * ```\r\n     * @method\r\n     * @param data A JSON object used to update specified dynamic resource. JSON object is an unordered collection of zero or more key/value pairs structured using the standard JSON syntax rules.\r\n     * @param options Options object.\r\n     * @example // dynamicResource is a resource previously fetched using get action.\r\n                    dynamicResource.description = '<description>';\r\n                    dynamicResourceClient.update(dynamicResource, {\r\n                        query: \"where field = 'value' \"\r\n                    })\r\n                    .then(function (data) {\r\n                        // perform success action here\r\n                    },\r\n                     function (response, status, headers, config) {\r\n                         // perform error handling here\r\n                    });\r\n     **/\r\n    DynamicResourceClient.prototype.update = function (data, options) {\r\n        return this.apiClient.put(this.routeDefinition.update(data, options), this.routeDefinition.updateParams(data));\r\n    };\r\n    /**\r\n     * Returns a promise that is resolved once the patch action has been performed; this action patches an existing dynamic resource. This route uses HAL enabled objects to obtain routes and therefore it doesn't apply `dynamicResourceRoute` route template. Here is an example of how a route can be obtained from HAL enabled objects:\r\n     * ```\r\n     * let params = modelMapper.updateParams(dynamicResource);\r\n     * let uri = params['model'].links('patch').href;\r\n     * ```\r\n     * @method\r\n     * @param data JSON object used for partial update of specified dynamic resource. JSON object is an unordered collection of zero or more key/value pairs structured using the standard JSON syntax rules.\r\n     * @param options Options object.\r\n     * @example // dynamicResource is a resource previously fetched using get action.\r\n                    dynamicResource.description = '<new-description>';\r\n                    dynamicResource.newField = '<newfield-value>';\r\n                    dynamicResourceClient.patch(dynamicResource, {\r\n                        query: \"where field = 'value' \"\r\n                    })\r\n                    .then(function (data) {\r\n                        // perform success action here\r\n                    },\r\n                     function (response, status, headers, config) {\r\n                         // perform error handling here\r\n                        \r\n                    });\r\n     **/\r\n    DynamicResourceClient.prototype.patch = function (data, options) {\r\n        return this.apiClient.patch(this.routeDefinition.patch(data, options), this.routeDefinition.updateParams(data));\r\n    };\r\n    /**\r\n     * Returns a promise that is resolved once the remove action has been performed. This action will remove a dynamic resource from the system if successfully completed. This route uses HAL enabled objects to obtain routes and therefore it doesn't apply `dynamicResourceRoute` route template. Here is an example of how a route can be obtained from HAL enabled objects:\r\n     * ```\r\n     * let params = modelMapper.removeParams(dynamicResource);\r\n     * let uri = params['model'].links('delete').href;\r\n     * ```\r\n     * @method\r\n     * @param data JSON object used to delete specified dynamic resource. JSON object is an unordered collection of zero or more key/value pairs structured using the standard JSON syntax rules.\r\n     * @example // dynamicResource is a resource previously fetched using get action.\r\n                    dynamicResourceClient.remove(dynamicResource, {\r\n                        query: \"where field = 'value' \"\r\n                    })\r\n                    .then(function (data) {\r\n                        // perform success action here\r\n                    },\r\n                     function (response, status, headers, config) {\r\n                         // perform error handling here\r\n                    });\r\n     **/\r\n    DynamicResourceClient.prototype.remove = function (data, options) {\r\n        return this.apiClient.delete(this.dynamicResourceRoute.delete(data, options));\r\n    };\r\n    return DynamicResourceClient;\r\n}());\r\nDynamicResourceClient = tslib_1.__decorate([\r\n    inversify_1.injectable(),\r\n    tslib_1.__param(0, inversify_1.inject(_1.TYPES.DynamicResourceRoute)),\r\n    tslib_1.__param(1, inversify_1.inject(_1.TYPES.DynamicResourceACLClient)),\r\n    tslib_1.__param(2, inversify_1.inject(_1.TYPES.DynamicSchemaClient)),\r\n    tslib_1.__param(3, inversify_1.inject(httpApi_1.httpTYPES.ApiClient)),\r\n    tslib_1.__metadata(\"design:paramtypes\", [typeof (_a = typeof _1.DynamicResourceRoute !== \"undefined\" && _1.DynamicResourceRoute) === \"function\" && _a || Object, typeof (_b = typeof _1.DynamicResourceACLClient !== \"undefined\" && _1.DynamicResourceACLClient) === \"function\" && _b || Object, typeof (_c = typeof _1.DynamicSchemaClient !== \"undefined\" && _1.DynamicSchemaClient) === \"function\" && _c || Object, typeof (_d = typeof httpApi_1.ApiClient !== \"undefined\" && httpApi_1.ApiClient) === \"function\" && _d || Object])\r\n], DynamicResourceClient);\r\nexports.DynamicResourceClient = DynamicResourceClient;\r\nvar _a, _b, _c, _d;\r\n\n\n/***/ }),\n/* 229 */\n/***/ (function(module, exports, __webpack_require__) {\n\n\"use strict\";\n/**\r\n * @module dynamicResourceRoute\r\n * @description Baasic Dynamic Resource Route Definition provides Baasic route templates which can be expanded to Baasic REST URIs. Various services can use Baasic Dynamic Resource Route Definition to obtain needed routes while other routes will be obtained through HAL. By convention, all route services  use the same function names as their corresponding services.\r\n */\r\n\r\nObject.defineProperty(exports, \"__esModule\", { value: true });\r\nvar tslib_1 = __webpack_require__(1);\r\nvar inversify_1 = __webpack_require__(0);\r\nvar common_1 = __webpack_require__(2);\r\n;\r\nvar _1 = __webpack_require__(19);\r\nvar contracts_1 = __webpack_require__(3);\r\nvar DynamicResourceRoute = (function (_super) {\r\n    tslib_1.__extends(DynamicResourceRoute, _super);\r\n    function DynamicResourceRoute(appOptions, dynamicResourceACLRoute, dynamicSchemaRoute) {\r\n        var _this = _super.call(this, appOptions) || this;\r\n        _this.appOptions = appOptions;\r\n        _this.dynamicResourceACLRoute = dynamicResourceACLRoute;\r\n        _this.dynamicSchemaRoute = dynamicSchemaRoute;\r\n        _this.findRoute = 'resources/{schemaName}/{?searchQuery,page,rpp,sort,embed,fields}';\r\n        _this.getRoute = 'resources/{schemaName}/{id}/{?embed,fields}';\r\n        _this.createRoute = 'resources/{schemaName}';\r\n        _this.updateRoute = 'resources/{schemaName}/{id}/{?embed,fields,query}';\r\n        _this.patchRoute = 'resources/{schemaName}/{id}/{?embed,fields,query}';\r\n        _this.deleteRoute = 'resources/{schemaName}/{id}/{?query}';\r\n        return _this;\r\n    }\r\n    Object.defineProperty(DynamicResourceRoute.prototype, \"acl\", {\r\n        get: function () {\r\n            return this.dynamicResourceACLRoute;\r\n        },\r\n        enumerable: true,\r\n        configurable: true\r\n    });\r\n    Object.defineProperty(DynamicResourceRoute.prototype, \"dynamicSchema\", {\r\n        get: function () {\r\n            return this.dynamicSchemaRoute;\r\n        },\r\n        enumerable: true,\r\n        configurable: true\r\n    });\r\n    /**\r\n     * Parses find route which can be expanded with additional options. Supported items are:\r\n     * - `schemaName` - Name of the dynamic resource schema.\r\n     * - `searchQuery` - A string referencing dynamic resource properties using the phrase or BQL (Baasic Query Language) search.\r\n     * - `page` - A value used to set the page number, i.e. to retrieve certain dynamic resource subset from the storage.\r\n     * - `rpp` - A value used to limit the size of result set per page.\r\n     * - `sort` - A string used to set the dynamic resource property to sort the result collection by.\r\n     * - `embed` - Comma separated list of resources to be contained within the current representation.\r\n     * @method\r\n     * @param options query resource options object\r\n     * @example dynamicResourceRoute.find(options);\r\n     **/\r\n    DynamicResourceRoute.prototype.find = function (schemaName, options) {\r\n        return _super.prototype.baseFind.call(this, this.findRoute, this.utility.extend({ schemaName: schemaName }, options));\r\n    };\r\n    /**\r\n     * Parses get route which must be expanded with the name of the previously created dynamic resource schema in the system and the Id of the previously created dynamic resource. Additional expand supported items are:\r\n     * - `embed` - Comma separated list of resources to be contained within the current representation.\r\n     * @method\r\n     * @param id Unique identifier of dynamic resources\r\n     * @param schemaName schema name\r\n     * @param options query resource options object\r\n     * @example dynamicResourceRoute.get(id, schemaName, options);\r\n     **/\r\n    DynamicResourceRoute.prototype.get = function (id, schemaName, options) {\r\n        return _super.prototype.baseGet.call(this, this.getRoute, id, this.utility.extend({ schemaName: schemaName }, options));\r\n    };\r\n    DynamicResourceRoute.prototype.create = function (schemaName) {\r\n        var params = this.modelMapper.getParams(schemaName, undefined, 'schemaName');\r\n        return _super.prototype.baseCreate.call(this, this.createRoute, params);\r\n    };\r\n    DynamicResourceRoute.prototype.update = function (data, options) {\r\n        return _super.prototype.baseUpdate.call(this, this.updateRoute, data, options);\r\n    };\r\n    DynamicResourceRoute.prototype.patch = function (schemaName, data, options) {\r\n        var opt = options || {};\r\n        return _super.prototype.baseUpdate.call(this, this.patchRoute, data, this.utility.extend({ schemaName: schemaName }, opt), 'patch');\r\n    };\r\n    DynamicResourceRoute.prototype.delete = function (schemaName, data, options) {\r\n        var opt = options || {};\r\n        return _super.prototype.baseDelete.call(this, this.deleteRoute, data, this.utility.extend({ schemaName: schemaName }, opt));\r\n    };\r\n    return DynamicResourceRoute;\r\n}(common_1.BaseRoute));\r\nDynamicResourceRoute = tslib_1.__decorate([\r\n    inversify_1.injectable(),\r\n    tslib_1.__param(0, inversify_1.inject(contracts_1.TYPES.IAppOptions)),\r\n    tslib_1.__param(1, inversify_1.inject(_1.TYPES.DynamicResourceACLRoute)),\r\n    tslib_1.__param(2, inversify_1.inject(_1.TYPES.DynamicSchemaRoute)),\r\n    tslib_1.__metadata(\"design:paramtypes\", [typeof (_a = typeof contracts_1.IAppOptions !== \"undefined\" && contracts_1.IAppOptions) === \"function\" && _a || Object, typeof (_b = typeof _1.DynamicResourceACLRoute !== \"undefined\" && _1.DynamicResourceACLRoute) === \"function\" && _b || Object, typeof (_c = typeof _1.DynamicSchemaRoute !== \"undefined\" && _1.DynamicSchemaRoute) === \"function\" && _c || Object])\r\n], DynamicResourceRoute);\r\nexports.DynamicResourceRoute = DynamicResourceRoute;\r\nvar _a, _b, _c;\r\n/**\r\n * @overview\r\n ***Notes:**\r\n - Refer to the [Baasic REST API](http://dev.baasic.com/api/reference/home) for detailed information about available Baasic REST API end-points.\r\n - [URI Template](https://github.com/Baasic/uritemplate-js) syntax enables expanding the Baasic route templates to Baasic REST URIs providing it with an object that contains URI parameters.\r\n - All end-point objects are transformed by the associated route definition.\r\n */ \r\n\n\n/***/ }),\n/* 230 */\n/***/ (function(module, exports, __webpack_require__) {\n\n\"use strict\";\n/**\r\n * @module dynamicSchemaClient\r\n * @description  Dynamic Schema Client provides an easy way to consume  Dynamic Schema REST API end-points. In order to obtain needed routes `dynamicSchemaClient` uses `dynamicSchemaRoute`.\r\n */\r\n\r\nObject.defineProperty(exports, \"__esModule\", { value: true });\r\nvar tslib_1 = __webpack_require__(1);\r\nvar inversify_1 = __webpack_require__(0);\r\n;\r\nvar httpApi_1 = __webpack_require__(4);\r\nvar _1 = __webpack_require__(19);\r\nvar DynamicSchemaClient = (function () {\r\n    function DynamicSchemaClient(dynamicSchemaRoute, apiClient) {\r\n        this.dynamicSchemaRoute = dynamicSchemaRoute;\r\n        this.apiClient = apiClient;\r\n    }\r\n    Object.defineProperty(DynamicSchemaClient.prototype, \"routeDefinition\", {\r\n        /**\r\n         * Provides direct access to `dynamicSchemaRoute`.\r\n         * @method\r\n         * @example dynamicSchemaClient.routeDefinition.get();\r\n         **/\r\n        get: function () {\r\n            return this.dynamicSchemaRoute;\r\n        },\r\n        enumerable: true,\r\n        configurable: true\r\n    });\r\n    /**\r\n     * Returns a promise that is resolved once the find action has been performed. Success response returns a list of dynamic resource schemas matching the given criteria.\r\n     * @method\r\n     * @param options Options object.\r\n     * @example dynamicSchemaClient.find({\r\n                    pageNumber : 1,\r\n                    pageSize : 10,\r\n                    orderBy : '<field>',\r\n                    orderDirection : '<asc|desc>',\r\n                    search : '<search-phrase>'\r\n                })\r\n                .then(function (collection) {\r\n                    // perform success action here\r\n                },\r\n                 function (response, status, headers, config) {\r\n                    // perform error handling here\r\n                });\r\n     **/\r\n    DynamicSchemaClient.prototype.find = function (options) {\r\n        return this.apiClient.get(this.routeDefinition.find(options));\r\n    };\r\n    /**\r\n     * Returns a promise that is resolved once the get action has been performed. Success response returns the specified dynamic resource schema.\r\n     * @method\r\n     * @param name Name of dynamic resource schema which need to be retrieved.\r\n     * @param options Options object.\r\n     * @example dynamicSchemaClient.get('<schema-name>')\r\n                    .then(function (data) {\r\n                        // perform success action here\r\n                    },\r\n                     function (response, status, headers, config) {\r\n                        // perform error handling here\r\n                    });\r\n     **/\r\n    DynamicSchemaClient.prototype.get = function (name, options) {\r\n        return this.apiClient.get(this.dynamicSchemaRoute.get(name, options));\r\n    };\r\n    /**\r\n     * Returns a promise that is resolved once the create action has been performed; this action creates a new dynamic resource schema item.\r\n     * @method\r\n     * @param data A dynamic resource schema object that needs to be inserted into the system.\r\n     * @example dynamicSchemaClient.create({\r\n                    schema : {\r\n                        type : 'object',\r\n                        properties : {\r\n                            id : {\r\n                                title : '<unique-identifier-field>',\r\n                                readonly : true,\r\n                                hidden : true,\r\n                                type : 'string'\r\n                            },\r\n                            description : {\r\n                                type: string\r\n                            }\r\n                        }\r\n                    },\r\n                    name : '<schema-name>',\r\n                    description : '<description>',\r\n                    enforceSchemaValidation : true\r\n                })\r\n                .then(function (data) {\r\n                    // perform success action here\r\n                },\r\n                 function (response, status, headers, config) {\r\n                    // perform error handling here\r\n                });\r\n     **/\r\n    DynamicSchemaClient.prototype.create = function (data) {\r\n        return this.apiClient.post(this.routeDefinition.create(), this.routeDefinition.createParams(data));\r\n    };\r\n    /**\r\n     * Returns a promise that is resolved once the update dynamic resource schema action has been performed; this action updates a dynamic resource schema item. This route uses HAL enabled objects to obtain routes and therefore it doesn't apply `dynamicSchemaRoute` route template. Here is an example of how a route can be obtained from HAL enabled objects:\r\n     * ```\r\n     * let params = modelMapper.removeParams(dynamicResourceSchema);\r\n     * let uri = params['model'].links('put').href;\r\n     * ```\r\n     * @method\r\n     * @param data A dynamic schema object used to update specified dynamic resource schema.\r\n     * @example // dynamicResourceSchema is a resource previously fetched using get action.\r\n                    dynamicResourceSchema.description = '<description>';\r\n                    dynamicSchemaClient.update(dynamicResourceSchema)\r\n                        .then(function (data) {\r\n                            // perform success action here\r\n                        },\r\n                         function (response, status, headers, config) {\r\n                            // perform error handling here\r\n                        });\r\n     **/\r\n    DynamicSchemaClient.prototype.update = function (data) {\r\n        return this.apiClient.put(this.routeDefinition.update(data), this.routeDefinition.updateParams(data));\r\n    };\r\n    /**\r\n     * Returns a promise that is resolved once the remove action has been performed. This action will remove a dynamic resource schema item from the system if successfully completed. This route uses HAL enabled objects to obtain routes and therefore it doesn't apply `dynamicSchemaRoute` route template. Here is an example of how a route can be obtained from HAL enabled objects:\r\n     * ```\r\n     * let params = modelMapper.removeParams(dynamicResourceSchema);\r\n     * let uri = params['model'].links('delete').href;\r\n     * ```\r\n     * @method\r\n     * @param data A dynamic schema object used to delete specified dynamic resource schema.\r\n     * @example // dynamicResourceSchema is a resource previously fetched using get action.\r\n                    dynamicSchemaClient.remove(dynamicResourceSchema)\r\n                        .then(function (data) {\r\n                            // perform success action here\r\n                        },\r\n                         function (response, status, headers, config) {\r\n                            // perform error handling here\r\n                        });\r\n     **/\r\n    DynamicSchemaClient.prototype.remove = function (data) {\r\n        return this.apiClient.delete(this.routeDefinition.delete(data));\r\n    };\r\n    /**\r\n     * Returns a promise that is resolved once the generate schema action has been performed. Success response returns a schema generated based on the json input.\r\n     * @method\r\n     * @param data Unordered collection of key value pairs used to specify dynamic schema definition.\r\n     * @example baasicDynamicSchemaService.generate({\r\n                    id : '<schema-Id>',\r\n                    description : '<description>'\r\n                })\r\n                .then(function (data) {\r\n                    // perform success action here\r\n                },\r\n                 function (response, status, headers, config) {\r\n                    // perform error handling here\r\n                });\r\n     **/\r\n    DynamicSchemaClient.prototype.generate = function (data) {\r\n        return this.apiClient.post(this.routeDefinition.generate(), this.routeDefinition.createParams(data));\r\n    };\r\n    return DynamicSchemaClient;\r\n}());\r\nDynamicSchemaClient = tslib_1.__decorate([\r\n    inversify_1.injectable(),\r\n    tslib_1.__param(0, inversify_1.inject(_1.TYPES.DynamicSchemaRoute)),\r\n    tslib_1.__param(1, inversify_1.inject(httpApi_1.httpTYPES.ApiClient)),\r\n    tslib_1.__metadata(\"design:paramtypes\", [typeof (_a = typeof _1.DynamicSchemaRoute !== \"undefined\" && _1.DynamicSchemaRoute) === \"function\" && _a || Object, typeof (_b = typeof httpApi_1.ApiClient !== \"undefined\" && httpApi_1.ApiClient) === \"function\" && _b || Object])\r\n], DynamicSchemaClient);\r\nexports.DynamicSchemaClient = DynamicSchemaClient;\r\nvar _a, _b;\r\n/**\r\n * @overview\r\n ***Notes:**\r\n - Refer to the [Baasic REST API](http://dev.baasic.com/api/reference/home) for detailed information about available Baasic REST API end-points.\r\n - All end-point objects are transformed by the associated route definition.\r\n */ \r\n\n\n/***/ }),\n/* 231 */\n/***/ (function(module, exports, __webpack_require__) {\n\n\"use strict\";\n/**\r\n * @module dynamicSchemaRoute\r\n * @description Baasic Dynamic Schema Route Definition provides Baasic route templates which can be expanded to Baasic REST URIs. Various services can use Baasic Dynamic Schema Route Definition to obtain needed routes while other routes will be obtained through HAL. By convention, all route services  use the same function names as their corresponding services.\r\n */\r\n\r\nObject.defineProperty(exports, \"__esModule\", { value: true });\r\nvar tslib_1 = __webpack_require__(1);\r\nvar inversify_1 = __webpack_require__(0);\r\nvar common_1 = __webpack_require__(2);\r\n;\r\nvar contracts_1 = __webpack_require__(3);\r\nvar DynamicSchemaRoute = (function (_super) {\r\n    tslib_1.__extends(DynamicSchemaRoute, _super);\r\n    function DynamicSchemaRoute(appOptions) {\r\n        var _this = _super.call(this, appOptions) || this;\r\n        _this.appOptions = appOptions;\r\n        _this.findRoute = 'schemas/{?searchQuery,page,rpp,sort,embed,fields}';\r\n        _this.getRoute = 'schemas/{name}/{?embed,fields}';\r\n        _this.generateRoute = 'schemas/generate';\r\n        _this.createRoute = 'schemas';\r\n        _this.updateRoute = 'schemas/{id}';\r\n        _this.deleteRoute = 'schemas/{id}';\r\n        return _this;\r\n    }\r\n    /**\r\n     * Parses find route which can be expanded with additional options. Supported items are:\r\n     * - `searchQuery` - A string referencing dynamic resource schema properties using the phrase or BQL (Baasic Query Language) search.\r\n     * - `page` - A value used to set the page number, i.e. to retrieve certain dynamic resource schema subset from the storage.\r\n     * - `rpp` - A value used to limit the size of result set per page.\r\n     * - `sort` - A string used to set the dynamic resource schema property to sort the result collection by.\r\n     * - `embed` - Comma separated list of resources to be contained within the current representation.\r\n     * @method\r\n     * @example dynamicSchemaRoute.find({searchQuery: '<search-phrase>'});\r\n     **/\r\n    DynamicSchemaRoute.prototype.find = function (options) {\r\n        return _super.prototype.baseFind.call(this, this.findRoute, options);\r\n    };\r\n    /**\r\n     * Parses get route which must be expanded with name of the previously created dynamic resource schema. Additional expand supported items are:\r\n     * - `embed` - Comma separated list of resources to be contained within the current representation.\r\n     * @method\r\n     * @example dynamicSchemaRoute.find({name: '<schema-name>'});\r\n     **/\r\n    DynamicSchemaRoute.prototype.get = function (name, options) {\r\n        return _super.prototype.baseGet.call(this, this.getRoute, this.modelMapper.getParams(name, options, 'name'));\r\n    };\r\n    /**\r\n     * Parses create route; this URI template doesn't expose any additional properties.\r\n     * @method\r\n     * @example dynamicSchemaRoute.generate();\r\n     **/\r\n    DynamicSchemaRoute.prototype.generate = function () {\r\n        return _super.prototype.baseCreate.call(this, this.generateRoute, {});\r\n    };\r\n    /**\r\n     * Parses create route; this URI template doesn't expose any additional properties.\r\n     * @method\r\n     * @example dynamicSchemaRoute.create(data);\r\n     **/\r\n    DynamicSchemaRoute.prototype.create = function () {\r\n        return _super.prototype.baseCreate.call(this, this.createRoute, {});\r\n    };\r\n    /**\r\n     * Parses update route.\r\n     * @method\r\n     * @param data A dynamic schema object used to update specified dynamic resource schema.\r\n     * @example dynamicSchemaRoute.update(data);\r\n     */\r\n    DynamicSchemaRoute.prototype.update = function (data) {\r\n        return _super.prototype.baseUpdate.call(this, this.updateRoute, data);\r\n    };\r\n    /**\r\n     * Parses delete route.\r\n     * @method\r\n     * @param data A dynamic schema object used to delete specified dynamic resource schema.\r\n     */\r\n    DynamicSchemaRoute.prototype.delete = function (data) {\r\n        return _super.prototype.baseDelete.call(this, this.deleteRoute, data);\r\n    };\r\n    return DynamicSchemaRoute;\r\n}(common_1.BaseRoute));\r\nDynamicSchemaRoute = tslib_1.__decorate([\r\n    inversify_1.injectable(),\r\n    tslib_1.__param(0, inversify_1.inject(contracts_1.TYPES.IAppOptions)),\r\n    tslib_1.__metadata(\"design:paramtypes\", [typeof (_a = typeof contracts_1.IAppOptions !== \"undefined\" && contracts_1.IAppOptions) === \"function\" && _a || Object])\r\n], DynamicSchemaRoute);\r\nexports.DynamicSchemaRoute = DynamicSchemaRoute;\r\nvar _a;\r\n/**\r\n * @overview\r\n ***Notes:**\r\n - Refer to the [Baasic REST API](http://dev.baasic.com/api/reference/home) for detailed information about available Baasic REST API end-points.\r\n - [URI Template](https://github.com/Baasic/uritemplate-js) syntax enables expanding the Baasic route templates to Baasic REST URIs providing it with an object that contains URI parameters.\r\n - All end-point objects are transformed by the associated route definition.\r\n */ \r\n\n\n/***/ }),\n/* 232 */\n/***/ (function(module, exports, __webpack_require__) {\n\n\"use strict\";\n\r\nObject.defineProperty(exports, \"__esModule\", { value: true });\r\nvar inversify_1 = __webpack_require__(0);\r\nvar _1 = __webpack_require__(18);\r\nvar TYPES = {\r\n    FilesACLClient: Symbol(\"FilesACLClient\"),\r\n    FilesACLRoute: Symbol(\"FilesACLRoute\"),\r\n    FilesBatchRoute: Symbol(\"FilesBatchRoute\"),\r\n    FilesBatchClient: Symbol(\"FilesBatchClient\"),\r\n    FilesRoute: Symbol(\"FilesRoute\"),\r\n    FilesClient: Symbol(\"FilesClient\"),\r\n    FilesStreamsRoute: Symbol(\"FilesStreamsRoute\"),\r\n    FilesStreamsClient: Symbol(\"FilesStreamsClient\")\r\n};\r\nexports.TYPES = TYPES;\r\nvar diModule = new inversify_1.ContainerModule(function (bind) {\r\n    bind(TYPES.FilesBatchRoute).to(_1.FilesBatchRoute);\r\n    bind(TYPES.FilesBatchClient).to(_1.FilesBatchClient);\r\n    bind(TYPES.FilesStreamsRoute).to(_1.FilesStreamsRoute);\r\n    bind(TYPES.FilesStreamsClient).to(_1.FilesStreamsClient);\r\n    bind(TYPES.FilesACLRoute).to(_1.FilesACLRoute);\r\n    bind(TYPES.FilesACLClient).to(_1.FilesACLClient);\r\n    bind(TYPES.FilesRoute).to(_1.FilesRoute);\r\n    bind(TYPES.FilesClient).to(_1.FilesClient);\r\n});\r\nexports.diModule = diModule;\r\n\n\n/***/ }),\n/* 233 */\n/***/ (function(module, exports, __webpack_require__) {\n\n\"use strict\";\n/* globals module */\r\n/**\r\n * @module filesACLClient\r\n * @description  Files ACL Client provides Baasic route templates which can be expanded to Baasic REST URIs. Various services can use Baasic Files Route Definition to obtain needed routes while other routes will be obtained through HAL. By convention, all route services use the same function names as their corresponding services.\r\n */\r\n\r\nObject.defineProperty(exports, \"__esModule\", { value: true });\r\nvar tslib_1 = __webpack_require__(1);\r\nvar inversify_1 = __webpack_require__(0);\r\n;\r\nvar httpApi_1 = __webpack_require__(4);\r\nvar _1 = __webpack_require__(18);\r\nvar FilesACLClient = (function () {\r\n    function FilesACLClient(filesACLRoute, apiClient) {\r\n        this.filesACLRoute = filesACLRoute;\r\n        this.apiClient = apiClient;\r\n    }\r\n    Object.defineProperty(FilesACLClient.prototype, \"routeDefinition\", {\r\n        get: function () {\r\n            return this.filesACLRoute;\r\n        },\r\n        enumerable: true,\r\n        configurable: true\r\n    });\r\n    /**\r\n     * Returns a promise that is resolved once the get action has been performed. Success response returns a list of ACL policies established for the specified file resource.\r\n     * @method\r\n     * @param options ACL options object.\r\n     * @returns A promise that is resolved once the get action has been performed.\r\n     * @example filesACLClient.get({id: '<file-id>'})\r\n                    .then(function (data) {\r\n                        // perform success action here\r\n                    },\r\n                     function (response, status, headers, config) {\r\n                         // perform error handling here\r\n                    });\r\n     **/\r\n    FilesACLClient.prototype.get = function (options) {\r\n        return this.apiClient.get(this.routeDefinition.get(options));\r\n    };\r\n    /**\r\n     * Returns a promise that is resolved once the update acl action has been performed, this action creates new ACL policy for the specified file resource.\r\n     * @method\r\n     * @param options An ACL policy object that needs to be inserted into the system. This object specifies parameters necessary for establishing user and/or role set of rights.\r\n     * @example let options = {id : '<file-id>'};\r\n                let aclObj =  {  actionId: '<action-id>',  roleId: '<role-id>',  userId: '<user-id>' };\r\n                options[baasicConstants.modelPropertyName] = aclObj;\r\n                filesACLClient.update(options)\r\n                    .then(function (data) {\r\n                        // perform success action here\r\n                    },\r\n                     function (response, status, headers, config) {\r\n                         // perform error handling here\r\n                    });\r\n     **/\r\n    FilesACLClient.prototype.update = function (options) {\r\n        return this.apiClient.put(this.routeDefinition.update(options), this.routeDefinition.updateParams(options));\r\n    };\r\n    /**\r\n     * Returns a promise that is resolved once the removeByUser action has been performed. This action deletes ACL policy assigned to the specified user and file resource.\r\n     * @method\r\n     * @param id File id which uniquely identifies file resource whose security privileges need to be retrieved and updated.\r\n     * @param action Action abbreviation which identifies ACL policy assigned to the specified user and file resource.\r\n     *               Supported Values:\r\n     *               \"Create\"\r\n     *               \"Delete\"\r\n     *               \"Read\"\r\n     *               \"Update\"\r\n     * @param user A value that uniquely identifies user for which ACL policy needs to be removed.\r\n     * @returns A promise that is resolved once the removeByUser action has been performed.\r\n     * @example filesACLClient.removeByUser('<file-id>', '<access-action>', '<username>')\r\n                    .then(function (data) {\r\n                        // perform success action here\r\n                    },\r\n                     function (response, status, headers, config) {\r\n                         // perform error handling here\r\n                    });\r\n     **/\r\n    FilesACLClient.prototype.removeByUser = function (id, action, user, data) {\r\n        return this.apiClient.delete(this.filesACLRoute.deleteByUser(id, action, user, data));\r\n    };\r\n    /**\r\n     * Returns a promise that is resolved once the removeByRole action has been performed. This action deletes ACL policy assigned to the specified role and file resource.\r\n     * @method\r\n     * @example filesACLClient.removeByRole('<file-id>', '<access-action>', '<role-name>')\r\n                    .then(function (data) {\r\n                        // perform success action here\r\n                    },\r\n                     function (response, status, headers, config) {\r\n                         // perform error handling here\r\n                    });\r\n     **/\r\n    FilesACLClient.prototype.removeByRole = function (id, action, role, data) {\r\n        return this.apiClient.delete(this.filesACLRoute.deleteByRole(id, action, role, data));\r\n    };\r\n    return FilesACLClient;\r\n}());\r\nFilesACLClient = tslib_1.__decorate([\r\n    inversify_1.injectable(),\r\n    tslib_1.__param(0, inversify_1.inject(_1.TYPES.FilesACLRoute)),\r\n    tslib_1.__param(1, inversify_1.inject(httpApi_1.httpTYPES.ApiClient)),\r\n    tslib_1.__metadata(\"design:paramtypes\", [typeof (_a = typeof _1.FilesACLRoute !== \"undefined\" && _1.FilesACLRoute) === \"function\" && _a || Object, typeof (_b = typeof httpApi_1.ApiClient !== \"undefined\" && httpApi_1.ApiClient) === \"function\" && _b || Object])\r\n], FilesACLClient);\r\nexports.FilesACLClient = FilesACLClient;\r\nvar _a, _b;\r\n/**\r\n * @overview\r\n***Notes:**\r\n- Refer to the [REST API documentation](http://dev.baasic.com/api/reference/home) for detailed information about available Baasic REST API end-points.\r\n- All end-point objects are transformed by the associated route service.\r\n*/ \r\n\n\n/***/ }),\n/* 234 */\n/***/ (function(module, exports, __webpack_require__) {\n\n\"use strict\";\n/* globals module */\r\n/**\r\n * @module filesACLRoute\r\n * @description Baasic Files ACL Route Definition provides Baasic route templates which can be expanded to Baasic REST URIs. Various services can use Baasic Files Route Definition to obtain needed routes while other routes will be obtained through HAL. By convention, all route services use the same function names as their corresponding services.\r\n */\r\n\r\nObject.defineProperty(exports, \"__esModule\", { value: true });\r\nvar tslib_1 = __webpack_require__(1);\r\nvar inversify_1 = __webpack_require__(0);\r\nvar common_1 = __webpack_require__(2);\r\n;\r\nvar contracts_1 = __webpack_require__(3);\r\nvar FilesACLRoute = (function (_super) {\r\n    tslib_1.__extends(FilesACLRoute, _super);\r\n    function FilesACLRoute(appOptions) {\r\n        var _this = _super.call(this, appOptions) || this;\r\n        _this.appOptions = appOptions;\r\n        _this.getRoute = 'files/{id}/acl/{?fields}';\r\n        _this.updateRoute = 'files/{id}/acl/{?fields}';\r\n        _this.deleteByUserRoute = 'files/{id}/acl/actions/{accessAction}/users/{user}/';\r\n        _this.deleteByRoleRoute = 'files/{id}/acl/actions/{accessAction}/roles/{role}/';\r\n        return _this;\r\n    }\r\n    /**\r\n     * Parses get acl route; this URI template should be expanded with the Id of the file resource.\r\n     * @method\r\n     * @example filesACLRoute.get({id: '<file-id>'});\r\n     **/\r\n    FilesACLRoute.prototype.get = function (options) {\r\n        var params = this.utility.extend({}, options);\r\n        return _super.prototype.baseCreate.call(this, this.getRoute, params);\r\n    };\r\n    /**\r\n     * Parses update acl route; this URI template should be expanded with the Id of the file resource.\r\n     * @method\r\n     * @example filesACLRoute.update({id: '<file-id>'});\r\n     **/\r\n    FilesACLRoute.prototype.update = function (options) {\r\n        var params = this.utility.extend({}, options);\r\n        return _super.prototype.baseCreate.call(this, this.updateRoute, params);\r\n    };\r\n    /**\r\n     * Parses deleteByUser acl route which can be expanded with additional options. Supported items are:\r\n     * - `id` - File id which uniquely identifies file resource whose security privileges need to be retrieved and updated.\r\n     * - `accessAction` - Action abbreviation which identifies ACL policy assigned to the specified user and file resource.\r\n     * - `user` - A value which uniquely identifies user for which ACL policy needs to be removed.\r\n     * @method\r\n     * @param id File id which uniquely identifies file resource whose security privileges need to be retrieved and updated.\r\n     * @param action Action abbreviation which identifies ACL policy assigned to the specified user and file resource.\r\n     *               Supported Values:\r\n     *               \"Create\"\r\n     *               \"Delete\"\r\n     *               \"Read\"\r\n     *               \"Update\"\r\n     * @param user A value that uniquely identifies user for which ACL policy needs to be removed.\r\n     * @example filesACLRoute.deleteByUser({ id: '<file-id>', accessAction: '<access-action>', user: '<username>' });\r\n     **/\r\n    FilesACLRoute.prototype.deleteByUser = function (id, action, user, data) {\r\n        var params = this.modelMapper.removeParams(data);\r\n        params.id = id;\r\n        params.user = user;\r\n        params.accessAction = action;\r\n        return _super.prototype.baseCreate.call(this, this.deleteByUserRoute, params);\r\n    };\r\n    /**\r\n     * Parses deleteByUser acl route which can be expanded with additional options. Supported items are:\r\n     * - `id` - File id which uniquely identifies file resource whose security privileges need to be retrieved and updated.\r\n     * - `accessAction` - Action abbreviation which identifies ACL policy assigned to the specified role and file resource.\r\n     * - `role` - A value which uniquely identifies role for which ACL policy needs to be removed.\r\n     * @method\r\n     * @param id File id which uniquely identifies file resource whose security privileges need to be retrieved and updated.\r\n     * @param action Action abbreviation which identifies ACL policy assigned to the specified user and file resource.\r\n     *               Supported Values:\r\n     *               \"Create\"\r\n     *               \"Delete\"\r\n     *               \"Read\"\r\n     *               \"Update\"\r\n     * @param role A value that uniquely identifies role for which ACL policy needs to be removed.\r\n     * @example filesACLRoute.deleteByRole({ id: '<file-id>', accessAction: '<access-action>', role: '<role-name>' });\r\n     **/\r\n    FilesACLRoute.prototype.deleteByRole = function (id, action, role, data) {\r\n        var params = this.modelMapper.removeParams(data);\r\n        params.id = id;\r\n        params.role = role;\r\n        params.accessAction = action;\r\n        return _super.prototype.baseCreate.call(this, this.deleteByRoleRoute, params);\r\n    };\r\n    FilesACLRoute.prototype.updateParams = function (data) {\r\n        var params = this.utility.extend({}, data);\r\n        return params[this.modelMapper.modelPropertyName];\r\n    };\r\n    return FilesACLRoute;\r\n}(common_1.BaseRoute));\r\nFilesACLRoute = tslib_1.__decorate([\r\n    inversify_1.injectable(),\r\n    tslib_1.__param(0, inversify_1.inject(contracts_1.TYPES.IAppOptions)),\r\n    tslib_1.__metadata(\"design:paramtypes\", [typeof (_a = typeof contracts_1.IAppOptions !== \"undefined\" && contracts_1.IAppOptions) === \"function\" && _a || Object])\r\n], FilesACLRoute);\r\nexports.FilesACLRoute = FilesACLRoute;\r\nvar _a;\r\n/**\r\n * @overview\r\n ***Notes:**\r\n - Refer to the [REST API documentation](http://dev.baasic.com/api/reference/home) for detailed information about available Baasic REST API end-points.\r\n - [URI Template](https://github.com/Baasic/uritemplate-js) syntax enables expanding the Baasic route templates to Baasic REST URIs providing it with an object that contains URI parameters.\r\n - All end-point objects are transformed by the associated route service.\r\n */ \r\n\n\n/***/ }),\n/* 235 */\n/***/ (function(module, exports, __webpack_require__) {\n\n\"use strict\";\n/* globals module */\r\n/**\r\n * @module filesBatchClient\r\n * @description  Files Batch Client provides Baasic route templates which can be expanded to Baasic REST URIs. Various services can use Baasic Files Route Definition to obtain needed routes while other routes will be obtained through HAL. By convention, all route services use the same function names as their corresponding services.\r\n */\r\n\r\nObject.defineProperty(exports, \"__esModule\", { value: true });\r\nvar tslib_1 = __webpack_require__(1);\r\nvar inversify_1 = __webpack_require__(0);\r\n;\r\nvar httpApi_1 = __webpack_require__(4);\r\nvar _1 = __webpack_require__(18);\r\nvar FilesBatchClient = (function () {\r\n    function FilesBatchClient(filesBatchRoute, apiClient) {\r\n        this.filesBatchRoute = filesBatchRoute;\r\n        this.apiClient = apiClient;\r\n    }\r\n    Object.defineProperty(FilesBatchClient.prototype, \"routeDefinition\", {\r\n        get: function () {\r\n            return this.filesBatchRoute;\r\n        },\r\n        enumerable: true,\r\n        configurable: true\r\n    });\r\n    /**\r\n     * Returns a promise that is resolved once the update action has been performed; this action updates specified file resources.\r\n     * @method\r\n     * @param data A collection of file objects used to update specified file resources.\r\n     * @returns A promise that is resolved once the update action has been performed.\r\n     * @example filesClient.update(files)\r\n                    .then(function (data) {\r\n                        // perform success action here\r\n                    },\r\n                     function (response, status, headers, config) {\r\n                         // perform error handling here\r\n                    });\r\n     **/\r\n    FilesBatchClient.prototype.update = function (data) {\r\n        return this.apiClient.put(this.routeDefinition.update(), this.routeDefinition.updateParams(data));\r\n    };\r\n    /**\r\n     * Returns a promise that is resolved once the link action has been performed; this action links file resources from other modules into the Files module (For example: file resources from the Media Vault module can be linked directly into the Files module).\r\n     * @method\r\n     * @param data A collection of file objects that need to be inserted into the system.\r\n     * @returns A promise that is resolved once the link action has been performed.\r\n     * @example filesBatchClient.link(files)\r\n                    .then(function (data) {\r\n                        // perform success action here\r\n                    },\r\n                     function (response, status, headers, config) {\r\n                         // perform error handling here\r\n                    });\r\n     **/\r\n    FilesBatchClient.prototype.link = function (data) {\r\n        return this.apiClient.post(this.routeDefinition.link(), this.routeDefinition.createParams(data));\r\n    };\r\n    /**\r\n     * Returns a promise that is resolved once the unlink action has been performed. This action will remove file resources from the system if successfully completed. If derived resource's format is passed, such as `width` and `height` for the image type of file resource, the operation will remove just derived resource. Otherwise, specified file and all its accompanying derived resources will be removed from the system.\r\n     * @method\r\n     * @param data Collection of file delete requests which uniquely identifies file resources that need to be deleted.\r\n     * @returns A promise that is resolved once the unlink action has been performed.\r\n     * @example // Remove original file resources\r\n                    filesBatchClient.unlink([{ id: '<file-id>' }])\r\n                        .then(function (data) {\r\n                            // perform success action here\r\n                        },\r\n                         function (response, status, headers, config) {\r\n                            // perform error handling here\r\n                        });\r\n                // Remove derived file resources\r\n                    filesBatchClient.unlink([{ id: '<file-id>', fileFormat: { width: <width>, height: <height> } }])\r\n                        .then(function (data) {\r\n                            // perform success action here\r\n                        },\r\n                         function (response, status, headers, config) {\r\n                             // perform error handling here\r\n                        });\r\n     **/\r\n    FilesBatchClient.prototype.unlink = function (data) {\r\n        return this.apiClient.delete(this.filesBatchRoute.unlink(), undefined, data);\r\n    };\r\n    return FilesBatchClient;\r\n}());\r\nFilesBatchClient = tslib_1.__decorate([\r\n    inversify_1.injectable(),\r\n    tslib_1.__param(0, inversify_1.inject(_1.TYPES.FilesBatchRoute)),\r\n    tslib_1.__param(1, inversify_1.inject(httpApi_1.httpTYPES.ApiClient)),\r\n    tslib_1.__metadata(\"design:paramtypes\", [typeof (_a = typeof _1.FilesBatchRoute !== \"undefined\" && _1.FilesBatchRoute) === \"function\" && _a || Object, typeof (_b = typeof httpApi_1.ApiClient !== \"undefined\" && httpApi_1.ApiClient) === \"function\" && _b || Object])\r\n], FilesBatchClient);\r\nexports.FilesBatchClient = FilesBatchClient;\r\nvar _a, _b;\r\n/**\r\n * @overview\r\n ***Notes:**\r\n - Refer to the [REST API documentation](http://dev.baasic.com/api/reference/home) for detailed information about available Baasic REST API end-points.\r\n - All end-point objects are transformed by the associated route service.\r\n */ \r\n\n\n/***/ }),\n/* 236 */\n/***/ (function(module, exports, __webpack_require__) {\n\n\"use strict\";\n/* globals module */\r\n/**\r\n * @module filesBatchRoute\r\n * @description Baasic Files Batch Route Definition provides Baasic route templates which can be expanded to Baasic REST URIs. Various services can use Baasic Files Route Definition to obtain needed routes while other routes will be obtained through HAL. By convention, all route services use the same function names as their corresponding services.\r\n */\r\n\r\nObject.defineProperty(exports, \"__esModule\", { value: true });\r\nvar tslib_1 = __webpack_require__(1);\r\nvar inversify_1 = __webpack_require__(0);\r\nvar common_1 = __webpack_require__(2);\r\nvar contracts_1 = __webpack_require__(3);\r\nvar FilesBatchRoute = (function (_super) {\r\n    tslib_1.__extends(FilesBatchRoute, _super);\r\n    function FilesBatchRoute(appOptions) {\r\n        var _this = _super.call(this, appOptions) || this;\r\n        _this.appOptions = appOptions;\r\n        _this.updateRoute = 'files/batch';\r\n        _this.linkRoute = 'files/batch/link';\r\n        _this.unlinkRoute = 'files/batch/unlink';\r\n        return _this;\r\n    }\r\n    /**\r\n     * Parses update route; this URI template does not expose any additional options.\r\n     * @method\r\n     * @example filesBatchRoute.update();\r\n     **/\r\n    FilesBatchRoute.prototype.update = function () {\r\n        return _super.prototype.baseCreate.call(this, this.updateRoute, {});\r\n    };\r\n    /**\r\n     * Parses update route; this URI template does not expose any additional options.\r\n     * @method\r\n     * @example filesBatchRoute.link();\r\n     **/\r\n    FilesBatchRoute.prototype.link = function () {\r\n        return _super.prototype.baseCreate.call(this, this.linkRoute, {});\r\n    };\r\n    /**\r\n     * Parses unlink route; this URI template does not expose any additional options.\r\n     * @method\r\n     * @example filesBatchRoute.unlink();\r\n     **/\r\n    FilesBatchRoute.prototype.unlink = function () {\r\n        return _super.prototype.baseCreate.call(this, this.unlinkRoute, {});\r\n    };\r\n    return FilesBatchRoute;\r\n}(common_1.BaseRoute));\r\nFilesBatchRoute = tslib_1.__decorate([\r\n    inversify_1.injectable(),\r\n    tslib_1.__param(0, inversify_1.inject(contracts_1.TYPES.IAppOptions)),\r\n    tslib_1.__metadata(\"design:paramtypes\", [typeof (_a = typeof contracts_1.IAppOptions !== \"undefined\" && contracts_1.IAppOptions) === \"function\" && _a || Object])\r\n], FilesBatchRoute);\r\nexports.FilesBatchRoute = FilesBatchRoute;\r\nvar _a;\r\n/**\r\n * @overview\r\n ***Notes:**\r\n - Refer to the [REST API documentation](http://dev.baasic.com/api/reference/home) for detailed information about available Baasic REST API end-points.\r\n - [URI Template](https://github.com/Baasic/uritemplate-js) syntax enables expanding the Baasic route templates to Baasic REST URIs providing it with an object that contains URI parameters.\r\n - All end-point objects are transformed by the associated route service.\r\n */ \r\n\n\n/***/ }),\n/* 237 */\n/***/ (function(module, exports, __webpack_require__) {\n\n\"use strict\";\n/* globals module */\r\n/**\r\n * @module filesClient\r\n * @description  Files Client provides Baasic route templates which can be expanded to Baasic REST URIs. Various services can use Baasic Files Route Definition to obtain needed routes while other routes will be obtained through HAL. By convention, all route services use the same function names as their corresponding services.\r\n */\r\n\r\nObject.defineProperty(exports, \"__esModule\", { value: true });\r\nvar tslib_1 = __webpack_require__(1);\r\nvar inversify_1 = __webpack_require__(0);\r\n;\r\nvar httpApi_1 = __webpack_require__(4);\r\nvar _1 = __webpack_require__(18);\r\nvar FilesClient = (function () {\r\n    function FilesClient(filesRoute, apiClient, filesStreamsClient, filesBatchClient, filesACLClient) {\r\n        this.filesRoute = filesRoute;\r\n        this.apiClient = apiClient;\r\n        this.filesStreamsClient = filesStreamsClient;\r\n        this.filesBatchClient = filesBatchClient;\r\n        this.filesACLClient = filesACLClient;\r\n    }\r\n    Object.defineProperty(FilesClient.prototype, \"routeDefinition\", {\r\n        get: function () {\r\n            return this.filesRoute;\r\n        },\r\n        enumerable: true,\r\n        configurable: true\r\n    });\r\n    Object.defineProperty(FilesClient.prototype, \"streams\", {\r\n        get: function () {\r\n            return this.filesStreamsClient;\r\n        },\r\n        enumerable: true,\r\n        configurable: true\r\n    });\r\n    Object.defineProperty(FilesClient.prototype, \"batch\", {\r\n        get: function () {\r\n            return this.filesBatchClient;\r\n        },\r\n        enumerable: true,\r\n        configurable: true\r\n    });\r\n    Object.defineProperty(FilesClient.prototype, \"acl\", {\r\n        get: function () {\r\n            return this.filesACLClient;\r\n        },\r\n        enumerable: true,\r\n        configurable: true\r\n    });\r\n    /**\r\n     * Returns a promise that is resolved once the find action has been performed. Success response returns a list of file resources matching the given criteria.\r\n     * @method\r\n     * @param options Query resource options object.\r\n     * @returns A promise that is resolved once the find action has been performed.\r\n     * @example filesClient.find({\r\n                    pageNumber : 1,\r\n                    pageSize : 10,\r\n                    orderBy : '<field>',\r\n                    orderDirection : '<asc|desc>',\r\n                    search : '<search-phrase>'\r\n                })\r\n                .then(function (collection) {\r\n                    // perform success action here\r\n                },\r\n                 function (response, status, headers, config) {\r\n                     // perform error handling here\r\n                });\r\n     **/\r\n    FilesClient.prototype.find = function (options) {\r\n        return this.apiClient.get(this.routeDefinition.find(options));\r\n    };\r\n    /**\r\n     * Returns a promise that is resolved once the get action has been performed. Success response returns requested file resource.\r\n     * @method\r\n     * @param id File id which uniquely identifies file resource that needs to be retrieved.\r\n     * @param options Query resource options object.\r\n     * @returns A promise that is resolved once the get action has been performed.\r\n     * @example filesClient.get('<file-id>')\r\n                    .then(function (data) {\r\n                        // perform success action here\r\n                    },\r\n                     function (response, status, headers, config) {\r\n                         // perform error handling here\r\n                    });\r\n     **/\r\n    FilesClient.prototype.get = function (id, options) {\r\n        return this.apiClient.get(this.filesRoute.get(id, options));\r\n    };\r\n    /**\r\n     * Returns a promise that is resolved once the update file action has been performed; this action will update a file resource if successfully completed. This route uses HAL enabled objects to obtain routes and therefore it doesn't apply `filesRoute` route template. Here is an example of how a route can be obtained from HAL enabled objects:\r\n     * ```\r\n     * let params = modelMapper.updateParams(fileEntry);\r\n     * let uri = params['model'].links('put').href;\r\n     * ```\r\n     * @method\r\n     * @param data A file entry object used to update specific file entry resource in the system.\r\n     * @example // fileEntry is a file resource previously fetched using get action.\r\n                    fileEntry.description = '<description>';\r\n                    filesClient.update(fileEntry)\r\n                        .then(function (data) {\r\n                            // perform success action here\r\n                        },\r\n                         function (response, status, headers, config) {\r\n                             // perform error handling here\r\n                        });\r\n     **/\r\n    FilesClient.prototype.update = function (data) {\r\n        return this.apiClient.put(this.routeDefinition.update(data), this.routeDefinition.updateParams(data));\r\n    };\r\n    /**\r\n     * Returns a promise that is resolved once the unlink action has been performed. This action will remove one or many file resources from the system if successfully completed. If derived resource's format is passed, such as `width` and `height` for the image type of file resource, the operation will remove just derived resource. Otherwise, specified file and all its accompanying derived resources will be removed from the system. This route uses HAL enabled objects to obtain routes and therefore it doesn't apply baasicFilesRouteService route template. Here is an example of how a route can be obtained from HAL enabled objects:\r\n     * ```\r\n     * let params = modelMapper.removeParams(fileEntry);\r\n     * let uri = params['model'].links('unlink').href;\r\n     * ```\r\n     * @method\r\n     * @param data\r\n     * @param options\r\n     * @returns A promise that is resolved once the unlink action has been performed.\r\n     * @example // fileEntry is a file resource previously fetched using get action. The following action will remove the original file resource and all accompanying derived file resources.\r\n                    filesClient.unlink(fileEntry)\r\n                        .then(function (data) {\r\n                            // perform success action here\r\n                        },\r\n                         function (response, status, headers, config) {\r\n                             // perform error handling here\r\n                        });\r\n                // fileEntry is a file resource previously fetched using get action. The following action will remove derived file resource only.\r\n                    filesClient.unlink(fileEntry, {width: <width>, height: <height>})\r\n                        .then(function (data) {\r\n                            // perform success action here\r\n                    },\r\n                     function (response, status, headers, config) {\r\n                         // perform error handling here\r\n                    });\r\n     **/\r\n    FilesClient.prototype.unlink = function (data, options) {\r\n        return this.apiClient.delete(this.filesRoute.unlink(data, options));\r\n    };\r\n    /**\r\n     * Returns a promise that is resolved once the link action has been performed; this action links file resource from other modules into the Files module (For example: file resources from the Media Vault module can be linked directly into the Files module).\r\n     * @method\r\n     * @param data A file object that need to be inserted into the system.\r\n     * @returns A promise that is resolved once the link action has been performed.\r\n     * @example filesClient.link(fileObject)\r\n                   .then(function (data) {\r\n                       // perform success action here\r\n                   },\r\n                    function (response, status, headers, config) {\r\n                        // perform error handling here\r\n                   });\r\n    **/\r\n    FilesClient.prototype.link = function (data) {\r\n        return this.apiClient.post(this.routeDefinition.link(), this.routeDefinition.createParams(data));\r\n    };\r\n    return FilesClient;\r\n}());\r\nFilesClient = tslib_1.__decorate([\r\n    inversify_1.injectable(),\r\n    tslib_1.__param(0, inversify_1.inject(_1.TYPES.FilesRoute)),\r\n    tslib_1.__param(1, inversify_1.inject(httpApi_1.httpTYPES.ApiClient)),\r\n    tslib_1.__param(2, inversify_1.inject(_1.TYPES.FilesStreamsClient)),\r\n    tslib_1.__param(3, inversify_1.inject(_1.TYPES.FilesBatchClient)),\r\n    tslib_1.__param(4, inversify_1.inject(_1.TYPES.FilesACLClient)),\r\n    tslib_1.__metadata(\"design:paramtypes\", [typeof (_a = typeof _1.FilesRoute !== \"undefined\" && _1.FilesRoute) === \"function\" && _a || Object, typeof (_b = typeof httpApi_1.ApiClient !== \"undefined\" && httpApi_1.ApiClient) === \"function\" && _b || Object, typeof (_c = typeof _1.FilesStreamsClient !== \"undefined\" && _1.FilesStreamsClient) === \"function\" && _c || Object, typeof (_d = typeof _1.FilesBatchClient !== \"undefined\" && _1.FilesBatchClient) === \"function\" && _d || Object, typeof (_e = typeof _1.FilesACLClient !== \"undefined\" && _1.FilesACLClient) === \"function\" && _e || Object])\r\n], FilesClient);\r\nexports.FilesClient = FilesClient;\r\nvar _a, _b, _c, _d, _e;\r\n/**\r\n * @overview\r\n ***Notes:**\r\n - Refer to the [REST API documentation](http://dev.baasic.com/api/reference/home) for detailed information about available Baasic REST API end-points.\r\n - All end-point objects are transformed by the associated route service.\r\n    */ \r\n\n\n/***/ }),\n/* 238 */\n/***/ (function(module, exports, __webpack_require__) {\n\n\"use strict\";\n/* globals module */\r\n/**\r\n * @module filesRoute\r\n * @description Baasic Files Route Definition provides Baasic route templates which can be expanded to Baasic REST URIs. Various services can use Baasic Files Route Definition to obtain needed routes while other routes will be obtained through HAL. By convention, all route services use the same function names as their corresponding services.\r\n */\r\n\r\nObject.defineProperty(exports, \"__esModule\", { value: true });\r\nvar tslib_1 = __webpack_require__(1);\r\nvar inversify_1 = __webpack_require__(0);\r\nvar common_1 = __webpack_require__(2);\r\n;\r\nvar _1 = __webpack_require__(18);\r\nvar contracts_1 = __webpack_require__(3);\r\nvar FilesRoute = (function (_super) {\r\n    tslib_1.__extends(FilesRoute, _super);\r\n    function FilesRoute(appOptions, filesStreamsRoute) {\r\n        var _this = _super.call(this, appOptions) || this;\r\n        _this.appOptions = appOptions;\r\n        _this.filesStreamsRoute = filesStreamsRoute;\r\n        _this.findRoute = 'files/{?searchQuery,page,rpp,sort,embed,fields}';\r\n        _this.getRoute = 'files/{id}/{?embed,fields}';\r\n        _this.updateRoute = 'files/{id}';\r\n        _this.unlinkRoute = 'files/unlink/{id}/{?height,width}';\r\n        _this.linkRoute = 'files/link';\r\n        return _this;\r\n    }\r\n    Object.defineProperty(FilesRoute.prototype, \"streams\", {\r\n        get: function () {\r\n            return this.filesStreamsRoute;\r\n        },\r\n        enumerable: true,\r\n        configurable: true\r\n    });\r\n    /**\r\n     * Parses find route which can be expanded with additional options. Supported items are:\r\n     * - `searchQuery` - A string referencing file properties using the phrase search.\r\n     * - `page` - A value used to set the page number, i.e. to retrieve certain file subset from the storage.\r\n     * - `rpp` - A value used to limit the size of result set per page.\r\n     * - `sort` - A string used to set the file property to sort the result collection by.\r\n     * - `embed` - Comma separated list of resources to be contained within the current representation.\r\n     * @method\r\n     * @param options Query resource options object.\r\n     * @example filesRoute.find({searchQuery: '<search-phrase>'});\r\n     **/\r\n    FilesRoute.prototype.find = function (options) {\r\n        return _super.prototype.baseFind.call(this, this.findRoute, options);\r\n    };\r\n    /**\r\n     * Parses get route; this route should be expanded with the Id of the file resource.\r\n     * @method\r\n     * @param id File id which uniquely identifies file resource that needs to be retrieved.\r\n     * @param options Query resource options object.\r\n     * @example filesRoute.get({id: '<file-id>'});\r\n     **/\r\n    FilesRoute.prototype.get = function (id, options) {\r\n        return _super.prototype.baseGet.call(this, this.getRoute, id, options);\r\n    };\r\n    /**\r\n     * Parses update route; this route should be expanded with the Id of the file resource.\r\n     * @method\r\n     * @param data A file entry object used to update specific file entry resource in the system.\r\n     * @example filesRoute.get({id: '<file-id>'});\r\n     **/\r\n    FilesRoute.prototype.update = function (data) {\r\n        return _super.prototype.baseUpdate.call(this, this.updateRoute, data);\r\n    };\r\n    /**\r\n     * Parses unlink route; this route should be expanded with the Id of the file resource.\r\n     * @method\r\n     * @param data A file entry object used to update specific file entry resource in the system.\r\n     * @example filesRoute.unlink({id: '<file-id>'});\r\n     **/\r\n    FilesRoute.prototype.unlink = function (data, options) {\r\n        return _super.prototype.baseDelete.call(this, this.unlinkRoute, data, options, 'unlink');\r\n    };\r\n    /**\r\n     * Parses link route; this URI template does not expose any additional options.\r\n     * @method\r\n     * @example filesRoute.link();\r\n     **/\r\n    FilesRoute.prototype.link = function () {\r\n        return _super.prototype.baseCreate.call(this, this.linkRoute, {});\r\n    };\r\n    return FilesRoute;\r\n}(common_1.BaseRoute));\r\nFilesRoute = tslib_1.__decorate([\r\n    inversify_1.injectable(),\r\n    tslib_1.__param(0, inversify_1.inject(contracts_1.TYPES.IAppOptions)),\r\n    tslib_1.__param(1, inversify_1.inject(_1.TYPES.FilesStreamsRoute)),\r\n    tslib_1.__metadata(\"design:paramtypes\", [typeof (_a = typeof contracts_1.IAppOptions !== \"undefined\" && contracts_1.IAppOptions) === \"function\" && _a || Object, typeof (_b = typeof _1.FilesStreamsRoute !== \"undefined\" && _1.FilesStreamsRoute) === \"function\" && _b || Object])\r\n], FilesRoute);\r\nexports.FilesRoute = FilesRoute;\r\nvar _a, _b;\r\n/**\r\n * @overview\r\n***Notes:**\r\n- Refer to the [REST API documentation](http://dev.baasic.com/api/reference/home) for detailed information about available Baasic REST API end-points.\r\n- [URI Template](https://github.com/Baasic/uritemplate-js) syntax enables expanding the Baasic route templates to Baasic REST URIs providing it with an object that contains URI parameters.\r\n- All end-point objects are transformed by the associated route service.\r\n*/ \r\n\n\n/***/ }),\n/* 239 */\n/***/ (function(module, exports, __webpack_require__) {\n\n\"use strict\";\n/* globals module */\r\n/**\r\n * @module filesStreamsClient\r\n * @description  Files Streams Client provides Baasic route templates which can be expanded to Baasic REST URIs. Various services can use Baasic Files Streams Route Definition to obtain needed routes while other routes will be obtained through HAL. By convention, all route services use the same function names as their corresponding services.\r\n */\r\n\r\nObject.defineProperty(exports, \"__esModule\", { value: true });\r\nvar tslib_1 = __webpack_require__(1);\r\nvar inversify_1 = __webpack_require__(0);\r\n;\r\nvar httpApi_1 = __webpack_require__(4);\r\nvar _1 = __webpack_require__(18);\r\nvar FilesStreamsClient = (function () {\r\n    function FilesStreamsClient(filesStreamsRoute, apiClient) {\r\n        this.filesStreamsRoute = filesStreamsRoute;\r\n        this.apiClient = apiClient;\r\n    }\r\n    Object.defineProperty(FilesStreamsClient.prototype, \"routeDefinition\", {\r\n        get: function () {\r\n            return this.filesStreamsRoute;\r\n        },\r\n        enumerable: true,\r\n        configurable: true\r\n    });\r\n    /**\r\n     * Returns a promise that is resolved once the get action has been performed. Success response returns the file stream if successfully completed. If derived resource's format is passed, such as `width` and `height` for the image type of file resource, the operation will return a stream of the derived resource. Otherwise, stream of the original file resource will be retrieved.\r\n     * @method\r\n     * @param id File id of the original file resource used to identify stream that needs to be retrieved from the system.\r\n     * @returns A promise that is resolved once the get action has been performed.\r\n     * @example // Request the original file stream\r\n                        filesStreamsClient.get({id: '<path>'})\r\n                            .then(function (data) {\r\n                                // perform success action here\r\n                            },\r\n                             function (response, status, headers, config) {\r\n                                 // perform error handling here\r\n                            });\r\n                // Request derived file stream\r\n                    filesStreamsClient.get({id: '<path>', width: <width>, height: <height>})\r\n                        .then(function (data) {\r\n                            // perform success action here\r\n                        },\r\n                         function (response, status, headers, config) {\r\n                            // perform error handling here\r\n                        });\r\n     **/\r\n    FilesStreamsClient.prototype.get = function (data) {\r\n        return this.apiClient.get(this.routeDefinition.get(data));\r\n    };\r\n    /**\r\n     * Returns a promise that is resolved once the get action has been performed. Success response returns the file stream as a blob. If derived resource's format is passed, such as `width` and `height` for the image type of file resource, the operation will return a blob of the derived file resource. Otherwise, blob of the original file resource will be retrieved. For more information on Blob objects please see [Blob Documentation](https://developer.mozilla.org/en-US/docs/Web/API/Blob).\r\n     * @method\r\n     * @example // Request the original blob\r\n                    filesStreamsClient.getBlob('<path>')\r\n                        .then(function (data) {\r\n                            // perform success action here\r\n                        },\r\n                         function (response, status, headers, config) {\r\n                            // perform error handling here\r\n                        });\r\n                // Request derived blob\r\n                    filesStreamsClient.getBlob({id: '<path>', width: <width>, height: <height>})\r\n                        .then(function (data) {\r\n                            // perform success action here\r\n                        },\r\n                         function (response, status, headers, config) {\r\n                             // perform error handling here\r\n                        });\r\n     **/\r\n    FilesStreamsClient.prototype.getBlob = function (data) {\r\n        return this.apiClient.get(this.filesStreamsRoute.get(data), { 'Accept': 'application/octet-stream' });\r\n    };\r\n    /**\r\n     * Returns a promise that is resolved once the update file stream action has been performed; this action will replace the existing stream with a new one. Alternatively, if a derived stream is being updated it will either create a new derived stream or replace the existing one. In order to update a derived stream, format needs to be passed (For example: `width` and `height` for the image type of file stream data type).\r\n     * @method\r\n     * @example // Update original file stream\r\n                    filesStreamsClient.update('<path>', <file-stream>)\r\n                        .then(function (data) {\r\n                            // perform success action here\r\n                        },\r\n                         function (response, status, headers, config) {\r\n                             // perform error handling here\r\n                        });\r\n                // Update derived file stream\r\n                    filesStreamsClient.update({id: '<path>', width: <width>, height: <height>}, <file-stream>)\r\n                        .then(function (data) {\r\n                            // perform success action here\r\n                        },\r\n                         function (response, status, headers, config) {\r\n                             // perform error handling here\r\n                        });\r\n     **/\r\n    FilesStreamsClient.prototype.update = function (data, stream) {\r\n        var formData = new FormData();\r\n        formData.append('file', stream);\r\n        return this.apiClient.put(this.filesStreamsRoute.update(data), data, { 'Content-Type': undefined });\r\n    };\r\n    /**\r\n     * Returns a promise that is resolved once the create file stream action has been performed; this action will upload the specified blob. For more information on Blob objects please see [Blob Documentation](https://developer.mozilla.org/en-US/docs/Web/API/Blob).\r\n     * @method\r\n     * @example filesStreamsClient.create('<path>', <blob>)\r\n                   .then(function (data) {\r\n                       // perform success action here\r\n                   },\r\n                    function (response, status, headers, config) {\r\n                        // perform error handling here\r\n                   });\r\n    **/\r\n    FilesStreamsClient.prototype.create = function (data, stream) {\r\n        var formData = new FormData();\r\n        formData.append('file', stream);\r\n        return this.apiClient.post(this.filesStreamsRoute.create(data), formData, { 'Content-Type': undefined });\r\n    };\r\n    return FilesStreamsClient;\r\n}());\r\nFilesStreamsClient = tslib_1.__decorate([\r\n    inversify_1.injectable(),\r\n    tslib_1.__param(0, inversify_1.inject(_1.TYPES.FilesStreamsRoute)),\r\n    tslib_1.__param(1, inversify_1.inject(httpApi_1.httpTYPES.ApiClient)),\r\n    tslib_1.__metadata(\"design:paramtypes\", [typeof (_a = typeof _1.FilesStreamsRoute !== \"undefined\" && _1.FilesStreamsRoute) === \"function\" && _a || Object, typeof (_b = typeof httpApi_1.ApiClient !== \"undefined\" && httpApi_1.ApiClient) === \"function\" && _b || Object])\r\n], FilesStreamsClient);\r\nexports.FilesStreamsClient = FilesStreamsClient;\r\nvar _a, _b;\r\n/**\r\n * @overview\r\n ***Notes:**\r\n - Refer to the [REST API documentation](http://dev.baasic.com/api/reference/home) for detailed information about available Baasic REST API end-points.\r\n - All end-point objects are transformed by the associated route service.\r\n */ \r\n\n\n/***/ }),\n/* 240 */\n/***/ (function(module, exports, __webpack_require__) {\n\n\"use strict\";\n/* globals module */\r\n/**\r\n * @module filesStreamsRoute\r\n * @description Baasic Files Streams Route Definition provides Baasic route templates which can be expanded to Baasic REST URIs. Various services can use Baasic Files Route Definition to obtain needed routes while other routes will be obtained through HAL. By convention, all route services use the same function names as their corresponding services.\r\n */\r\n\r\nObject.defineProperty(exports, \"__esModule\", { value: true });\r\nvar tslib_1 = __webpack_require__(1);\r\nvar inversify_1 = __webpack_require__(0);\r\nvar common_1 = __webpack_require__(2);\r\nvar contracts_1 = __webpack_require__(3);\r\nvar FilesStreamsRoute = (function (_super) {\r\n    tslib_1.__extends(FilesStreamsRoute, _super);\r\n    function FilesStreamsRoute(appOptions) {\r\n        var _this = _super.call(this, appOptions) || this;\r\n        _this.appOptions = appOptions;\r\n        _this.getRoute = 'file-streams/{id}/{?width,height}';\r\n        _this.updateRoute = 'file-streams/{id}/{?width,height}';\r\n        _this.createRoute = 'file-streams/{path}';\r\n        return _this;\r\n    }\r\n    /**\r\n     * Parses get route; this route should be expanded with id or path of desired file stream. Additional supported items are:\r\n     * - `width` - width of desired derived image.\r\n     * - `height` - height of desired derived image.\r\n     * @method\r\n     * @example filesStreamsRoute.get({id: '<path>'});\r\n     **/\r\n    FilesStreamsRoute.prototype.get = function (data) {\r\n        if (!this.utility.isObject(data)) {\r\n            data = {\r\n                id: data\r\n            };\r\n        }\r\n        return _super.prototype.baseCreate.call(this, this.getRoute, data);\r\n    };\r\n    /**\r\n     * Parses update route; this route should be expanded with the id or path of the previously saved resource. Additional supported items are:\r\n     * - `width` - width of derived image to update.\r\n     * - `height` - height of derived image to update.\r\n     * @method\r\n     * @example filesStreamsRoute.update({id: '<path>'});\r\n     **/\r\n    FilesStreamsRoute.prototype.update = function (data) {\r\n        if (!this.utility.isObject(data)) {\r\n            data = {\r\n                id: data\r\n            };\r\n        }\r\n        return _super.prototype.baseCreate.call(this, this.updateRoute, data);\r\n    };\r\n    /**\r\n     * Parses create route; this route should be expanded with the path which indicates where the stream will be saved.\r\n     * @method\r\n     * @example filesStreamsRoute.create({path: '<path>'});\r\n     **/\r\n    FilesStreamsRoute.prototype.create = function (data) {\r\n        if (!this.utility.isObject(data)) {\r\n            data = {\r\n                path: data\r\n            };\r\n        }\r\n        return _super.prototype.baseCreate.call(this, this.createRoute, data);\r\n    };\r\n    return FilesStreamsRoute;\r\n}(common_1.BaseRoute));\r\nFilesStreamsRoute = tslib_1.__decorate([\r\n    inversify_1.injectable(),\r\n    tslib_1.__param(0, inversify_1.inject(contracts_1.TYPES.IAppOptions)),\r\n    tslib_1.__metadata(\"design:paramtypes\", [typeof (_a = typeof contracts_1.IAppOptions !== \"undefined\" && contracts_1.IAppOptions) === \"function\" && _a || Object])\r\n], FilesStreamsRoute);\r\nexports.FilesStreamsRoute = FilesStreamsRoute;\r\nvar _a;\r\n/**\r\n * @overview\r\n ***Notes:**\r\n - Refer to the [REST API documentation](http://dev.baasic.com/api/reference/home) for detailed information about available Baasic REST API end-points.\r\n - [URI Template](https://github.com/Baasic/uritemplate-js) syntax enables expanding the Baasic route templates to Baasic REST URIs providing it with an object that contains URI parameters.\r\n - All end-point objects are transformed by the associated route service.\r\n */ \r\n\n\n/***/ }),\n/* 241 */\n/***/ (function(module, exports, __webpack_require__) {\n\n\"use strict\";\n\r\nObject.defineProperty(exports, \"__esModule\", { value: true });\r\nvar ApplicationSettings = __webpack_require__(25);\r\nexports.ApplicationSettings = ApplicationSettings;\r\nvar Membership = __webpack_require__(10);\r\nexports.Membership = Membership;\r\nvar UserProfile = __webpack_require__(8);\r\nexports.UserProfile = UserProfile;\r\nvar KeyValue = __webpack_require__(26);\r\nexports.KeyValue = KeyValue;\r\nvar ValueSet = __webpack_require__(22);\r\nexports.ValueSet = ValueSet;\r\nvar Article = __webpack_require__(6);\r\nexports.Article = Article;\r\nvar DynamicResource = __webpack_require__(19);\r\nexports.DynamicResource = DynamicResource;\r\nvar MediaVault = __webpack_require__(16);\r\nexports.MediaVault = MediaVault;\r\nvar Files = __webpack_require__(18);\r\nexports.Files = Files;\r\nvar Templating = __webpack_require__(21);\r\nexports.Templating = Templating;\r\nvar Metering = __webpack_require__(11);\r\nexports.Metering = Metering;\r\nvar Notifications = __webpack_require__(7);\r\nexports.Notifications = Notifications;\r\nvar Commerce = __webpack_require__(5);\r\nexports.Commerce = Commerce;\r\n\n\n/***/ }),\n/* 242 */\n/***/ (function(module, exports, __webpack_require__) {\n\n\"use strict\";\n\r\nObject.defineProperty(exports, \"__esModule\", { value: true });\r\nvar inversify_1 = __webpack_require__(0);\r\nvar _1 = __webpack_require__(26);\r\nvar TYPES = {\r\n    KeyValueClient: Symbol(\"KeyValueClient\"),\r\n    KeyValueRoute: Symbol(\"KeyValueRoute\")\r\n};\r\nexports.TYPES = TYPES;\r\nvar diModule = new inversify_1.ContainerModule(function (bind) {\r\n    bind(TYPES.KeyValueRoute).to(_1.KeyValueRoute);\r\n    bind(TYPES.KeyValueClient).to(_1.KeyValueClient);\r\n});\r\nexports.diModule = diModule;\r\n\n\n/***/ }),\n/* 243 */\n/***/ (function(module, exports, __webpack_require__) {\n\n\"use strict\";\n/**\r\n * @module keyValueClient\r\n * @description  Key Value Client provides an easy way to consume  Key Value REST API end-points. In order to obtain needed routes `keyValueClient` uses `baasicKeyValueRouteClient`.\r\n */\r\n\r\nObject.defineProperty(exports, \"__esModule\", { value: true });\r\nvar tslib_1 = __webpack_require__(1);\r\nvar inversify_1 = __webpack_require__(0);\r\n;\r\nvar httpApi_1 = __webpack_require__(4);\r\nvar _1 = __webpack_require__(26);\r\nvar KeyValueClient = (function () {\r\n    function KeyValueClient(keyValueRoute, apiClient) {\r\n        this.keyValueRoute = keyValueRoute;\r\n        this.apiClient = apiClient;\r\n    }\r\n    Object.defineProperty(KeyValueClient.prototype, \"routeDefinition\", {\r\n        /**\r\n         * Provides direct access to `keyValueRoute`.\r\n         * @method\r\n         * @example keyValueClient.routeDefinition.get();\r\n         **/\r\n        get: function () {\r\n            return this.keyValueRoute;\r\n        },\r\n        enumerable: true,\r\n        configurable: true\r\n    });\r\n    /**\r\n     * Returns a promise that is resolved once the find action has been performed. Success response returns a list of key value resources matching the given criteria.\r\n     * @param options query resource options object\r\n     * @returns A promise that is resolved once the find action has beend performed.\r\n     * @method\r\n     * @example keyValueClient.find({\r\n                 pageNumber: 1,\r\n                 pageSize: 10,\r\n                 orderBy: '<field>',\r\n                 orderDirection: '<asc|desc>',\r\n                 search: '<search-phrase>'\r\n                })\r\n                .then(function (collection) {\r\n                    // perform success action here\r\n                },\r\n                 function (response, status, headers, config) {\r\n                    // perform error handling here\r\n                });\r\n     **/\r\n    KeyValueClient.prototype.find = function (options) {\r\n        return this.apiClient.get(this.routeDefinition.find(options));\r\n    };\r\n    /**\r\n     * Returns a promise that is resolved once the get action has been performed. Success response returns the specified key value resource.\r\n     * @param id unique identifer of key value resources\r\n     * @param options query resource options object\r\n     * @returns A promise that is resolved once the get action has beend performed.\r\n     * @method\r\n     * @example keyValueClient.get('<key-value-id>')\r\n                    .then(function (data) {\r\n                        // perform success action here\r\n                    },\r\n                     function (response, status, headers, config) {\r\n                        // perform error handling here\r\n                    });\r\n     **/\r\n    KeyValueClient.prototype.get = function (id, options) {\r\n        return this.apiClient.get(this.keyValueRoute.get(id, options));\r\n    };\r\n    /**\r\n     * Returns a promise that is resolved once the create key value action has been performed; this action creates a new key value resource.\r\n     * @param data A key value object that needs to be inserted into the system.\r\n     * @returns A promise that is resolved once the create key value action has beend performed.\r\n     * @method\r\n     * @example keyValueClient.create({key: '<key>', value: '<value>', })\r\n                    .then(function (data) {\r\n                        // perform success action here\r\n                    },\r\n                     function (response, status, headers, config) {\r\n                        // perform error handling here\r\n                    });\r\n     */\r\n    KeyValueClient.prototype.create = function (data) {\r\n        return this.apiClient.post(this.routeDefinition.create(), this.routeDefinition.createParams(data));\r\n    };\r\n    /**\r\n     * Returns a promise that is resolved once the update key value action has been performed; this action updates a key value resource. This route uses HAL enabled objects to obtain routes and therefore it doesn't apply `baasicKeyValueRouteService` route template. Here is an example of how a route can be obtained from HAL enabled objects:\r\n     * ```\r\n     * let params = modelMapper.removeParams(keyValue);\r\n     * let uri = params['model'].links('put').href;\r\n     * ```\r\n     * @param data A key value object used to update specified key value resource.\r\n     * @return A promise that is resolved once the update key value action has been performed.\r\n     * @method\r\n     * @example // keyValue is a resource previously fetched using get action.\r\n                   keyValue.value = '<new-value>';\r\n                   keyValueClient.update(keyValue)\r\n                   .then(function (data) {\r\n                       // perform success action here\r\n                    },\r\n                     function (response, status, headers, config) {\r\n                        // perform error handling here\r\n                    });\r\n     **/\r\n    KeyValueClient.prototype.update = function (data) {\r\n        return this.apiClient.put(this.routeDefinition.update(data), this.routeDefinition.updateParams(data));\r\n    };\r\n    /**\r\n     * Returns a promise that is resolved once the remove action has been performed. This action will remove a key value resource from the system if successfully completed. This route uses HAL enabled objects to obtain routes and therefore it doesn't apply `baasicKeyValueRouteService` route template. Here is an example of how a route can be obtained from HAL enabled objects:\r\n     * ```\r\n     * let params = modelMapper.removeParams(keyValue);\r\n     * let uri = params['model'].links('delete').href;\r\n     * ```\r\n     * @param data A key value object used to delete specified key value resource.\r\n     * @returns A promise that is resolved once the remove action has been performed.\r\n     * @method\r\n     * @example // keyValue is a resource previously fetched using get action.\r\n                    keyValueClient.remove(keyValue)\r\n                    .then(function (data) {\r\n                        // perform success action here\r\n                    },\r\n                     function (response, status, headers, config) {\r\n                        // perform error handling here\r\n                    });\r\n     **/\r\n    KeyValueClient.prototype.remove = function (data) {\r\n        return this.apiClient.delete(this.routeDefinition.delete(data), this.routeDefinition.deleteParams(data));\r\n    };\r\n    return KeyValueClient;\r\n}());\r\nKeyValueClient = tslib_1.__decorate([\r\n    inversify_1.injectable(),\r\n    tslib_1.__param(0, inversify_1.inject(_1.TYPES.KeyValueRoute)),\r\n    tslib_1.__param(1, inversify_1.inject(httpApi_1.httpTYPES.ApiClient)),\r\n    tslib_1.__metadata(\"design:paramtypes\", [typeof (_a = typeof _1.KeyValueRoute !== \"undefined\" && _1.KeyValueRoute) === \"function\" && _a || Object, typeof (_b = typeof httpApi_1.ApiClient !== \"undefined\" && httpApi_1.ApiClient) === \"function\" && _b || Object])\r\n], KeyValueClient);\r\nexports.KeyValueClient = KeyValueClient;\r\nvar _a, _b;\r\n/**\r\n * @copyright (c) 2017 Mono Ltd\r\n * @license MIT\r\n * @author Mono Ltd\r\n * @overview\r\n ***Notes:**\r\n - Refer to the [Baasic REST API](http://dev.baasic.com/api/reference/home) for detailed information about available Baasic REST API end-points.\r\n - All end-point objects are transformed by the associated route service.\r\n */ \r\n\n\n/***/ }),\n/* 244 */\n/***/ (function(module, exports, __webpack_require__) {\n\n\"use strict\";\n/* globals module */\r\n/**\r\n * @module keyValueRoute\r\n * @description Baasic Key Value Route Definition provides Baasic route templates which can be expanded to Baasic REST URIs. Various services can use Baasic Key Value Route Service to obtain needed routes while other routes will be obtained through HAL. By convention, all route services  use the same function names as their corresponding services.\r\n */\r\n\r\nObject.defineProperty(exports, \"__esModule\", { value: true });\r\nvar tslib_1 = __webpack_require__(1);\r\nvar inversify_1 = __webpack_require__(0);\r\nvar common_1 = __webpack_require__(2);\r\n;\r\nvar contracts_1 = __webpack_require__(3);\r\nvar KeyValueRoute = (function (_super) {\r\n    tslib_1.__extends(KeyValueRoute, _super);\r\n    function KeyValueRoute(appOptions) {\r\n        var _this = _super.call(this, appOptions) || this;\r\n        _this.appOptions = appOptions;\r\n        _this.findRoute = 'key-values/{?searchQuery,page,rpp,sort,embed,fields}';\r\n        _this.getRoute = 'key-values/{id}/{?embed,fields}';\r\n        _this.createRoute = 'key-values';\r\n        _this.updateRoute = 'key-values/{id}';\r\n        _this.deleteRoute = 'key-values/{id}';\r\n        return _this;\r\n    }\r\n    /**\r\n     * Parses find key value route which can be expanded with additional options. Supported items are:\r\n     * - `searchQuery` - A string value used to identify key value resources using the phrase search.\r\n     * - `page` - A value used to set the page number, i.e. to retrieve certain key value subset from the storage.\r\n     * - `rpp` - A value used to limit the size of result set per page.\r\n     * - `sort` - A string used to set the key value property to sort the result collection by.\r\n     * - `embed` - Comma separated list of resources to be contained within the current representation.\r\n     * @method\r\n     * @param options Query resource options object.\r\n     * @example keyValueRoute.find(options);\r\n     **/\r\n    KeyValueRoute.prototype.find = function (options) {\r\n        return _super.prototype.baseFind.call(this, this.findRoute, options);\r\n    };\r\n    /**\r\n     * Parses get key value route which must be expanded with the Id of the previously created key value resource in the system.\r\n     * @method\r\n     * @param id Key value resource unique identifier.\r\n     * @param options Query resource options object.\r\n     * @example keyValueRoute.get();\r\n     **/\r\n    KeyValueRoute.prototype.get = function (id, options) {\r\n        return _super.prototype.baseGet.call(this, this.getRoute, id, options);\r\n    };\r\n    /**\r\n     * Parses create key value route; this URI template does not expose any additional options.\r\n     * @method\r\n     * @example keyValueRoute.create();\r\n     **/\r\n    KeyValueRoute.prototype.create = function () {\r\n        return _super.prototype.baseCreate.call(this, this.createRoute, {});\r\n    };\r\n    /**\r\n     * Parses update key value route.\r\n     * @method\r\n     * @param data Key Value object used to create update route.\r\n     * @example keyValueRoute.update(data);\r\n     */\r\n    KeyValueRoute.prototype.update = function (data) {\r\n        return _super.prototype.baseUpdate.call(this, this.updateRoute, data);\r\n    };\r\n    /**\r\n     * Parses delete key value route.\r\n     * @method\r\n     * @param data Key Value object used to create delete route.\r\n     * @example keyValueRoute.delete(data);\r\n     */\r\n    KeyValueRoute.prototype.delete = function (data) {\r\n        return _super.prototype.baseDelete.call(this, this.deleteRoute, data);\r\n    };\r\n    return KeyValueRoute;\r\n}(common_1.BaseRoute));\r\nKeyValueRoute = tslib_1.__decorate([\r\n    inversify_1.injectable(),\r\n    tslib_1.__param(0, inversify_1.inject(contracts_1.TYPES.IAppOptions)),\r\n    tslib_1.__metadata(\"design:paramtypes\", [typeof (_a = typeof contracts_1.IAppOptions !== \"undefined\" && contracts_1.IAppOptions) === \"function\" && _a || Object])\r\n], KeyValueRoute);\r\nexports.KeyValueRoute = KeyValueRoute;\r\nvar _a;\r\n/**\r\n * @copyright (c) 2017 Mono Ltd\r\n * @license MIT\r\n * @author Mono Ltd\r\n * @overview\r\n ***Notes:**\r\n - Refer to the [Baasic REST API](http://dev.baasic.com/api/reference/home) for detailed information about available Baasic REST API end-points.\r\n - [URI Template](https://github.com/Baasic/uritemplate-js) syntax enables expanding the Baasic route templates to Baasic REST URIs providing it with an object that contains URI parameters.\r\n - All end-point objects are transformed by the associated route service.\r\n */ \r\n\n\n/***/ }),\n/* 245 */\n/***/ (function(module, exports, __webpack_require__) {\n\n\"use strict\";\n/* globals module */\r\n/**\r\n * @module mediaVaultBatchClient\r\n * @description  Media Vault Batch Client provides Baasic route templates which can be expanded to Baasic REST URIs. Various services can use Baasic Media Vault Batch Route Definition to obtain needed routes while other routes will be obtained through HAL. By convention, all route services use the same function names as their corresponding services.\r\n */\r\n\r\nObject.defineProperty(exports, \"__esModule\", { value: true });\r\nvar tslib_1 = __webpack_require__(1);\r\nvar inversify_1 = __webpack_require__(0);\r\n;\r\nvar httpApi_1 = __webpack_require__(4);\r\nvar _1 = __webpack_require__(16);\r\nvar MediaVaultBatchClient = (function () {\r\n    function MediaVaultBatchClient(mediaVaultBatchRoute, apiClient) {\r\n        this.mediaVaultBatchRoute = mediaVaultBatchRoute;\r\n        this.apiClient = apiClient;\r\n    }\r\n    Object.defineProperty(MediaVaultBatchClient.prototype, \"routeDefinition\", {\r\n        get: function () {\r\n            return this.mediaVaultBatchRoute;\r\n        },\r\n        enumerable: true,\r\n        configurable: true\r\n    });\r\n    /**\r\n     * Returns a promise that is resolved once the update action has been performed; this action updates specified media vault resources.\r\n     * @method\r\n     * @param data A collection of media vault objects used to update specified media vault resources.\r\n     * @returns A promise that is resolved once the update action has been performed.\r\n     * @example mediaVaultStreamsClient.update(files)\r\n                   .then(function (data) {\r\n                       // perform success action here\r\n                   },\r\n                    function (response, status, headers, config) {\r\n                        // perform error handling here\r\n                   });\r\n    **/\r\n    MediaVaultBatchClient.prototype.update = function (data) {\r\n        return this.apiClient.put(this.routeDefinition.update(), this.routeDefinition.updateParams(data));\r\n    };\r\n    /**\r\n     * Returns a promise that is resolved once the remove action has been performed. This action will remove media vault resources from the system if successfully completed. If derived resource's format is passed, such as `width` and `height` for the image type of media vault resource, the operation will remove just derived resource. Otherwise, specified media vault and all its accompanying derived resources will be removed from the system.\r\n     * @method\r\n     * @param data Collection of media vault delete requests which uniquely identifies media vault resources that need to be deleted.\r\n     * @example // Remove original media vault resources\r\n                        mediaVaultBatchClient.remove([{ id: '<media-vault-id>' }])\r\n                            .then(function (data) {\r\n                                // perform success action here\r\n                            },\r\n                             function (response, status, headers, config) {\r\n                                 // perform error handling here\r\n                            });\r\n                // Remove derived media vault resources\r\n                        mediaVaultBatchClient.remove([{ id: '<media-vault-id>', fileFormat: { width: <width>, height: <height> } }])\r\n                            .then(function (data) {\r\n                                // perform success action here\r\n                            },\r\n                             function (response, status, headers, config) {\r\n                                 // perform error handling here\r\n                            });\r\n     **/\r\n    MediaVaultBatchClient.prototype.remove = function (data) {\r\n        return this.apiClient.delete(this.mediaVaultBatchRoute.delete(), undefined, data);\r\n    };\r\n    return MediaVaultBatchClient;\r\n}());\r\nMediaVaultBatchClient = tslib_1.__decorate([\r\n    inversify_1.injectable(),\r\n    tslib_1.__param(0, inversify_1.inject(_1.TYPES.MediaVaultBatchRoute)),\r\n    tslib_1.__param(1, inversify_1.inject(httpApi_1.httpTYPES.ApiClient)),\r\n    tslib_1.__metadata(\"design:paramtypes\", [typeof (_a = typeof _1.MediaVaultBatchRoute !== \"undefined\" && _1.MediaVaultBatchRoute) === \"function\" && _a || Object, typeof (_b = typeof httpApi_1.ApiClient !== \"undefined\" && httpApi_1.ApiClient) === \"function\" && _b || Object])\r\n], MediaVaultBatchClient);\r\nexports.MediaVaultBatchClient = MediaVaultBatchClient;\r\nvar _a, _b;\r\n/**\r\n * @overview\r\n ***Notes:**\r\n - Refer to the [REST API documentation](http://dev.baasic.com/api/reference/home) for detailed information about available Baasic REST API end-points.\r\n - All end-point objects are transformed by the associated route service.\r\n */ \r\n\n\n/***/ }),\n/* 246 */\n/***/ (function(module, exports, __webpack_require__) {\n\n\"use strict\";\n/* globals module */\r\n/**\r\n * @module mediaVaultBatchRoute\r\n * @description Baasic Media Vault Batch Route Definition provides Baasic route templates which can be expanded to Baasic REST URIs. Various services can use Baasic Media Vault Batch Route Definition to obtain needed routes while other routes will be obtained through HAL. By convention, all route services use the same function names as their corresponding services.\r\n */\r\n\r\nObject.defineProperty(exports, \"__esModule\", { value: true });\r\nvar tslib_1 = __webpack_require__(1);\r\nvar inversify_1 = __webpack_require__(0);\r\nvar common_1 = __webpack_require__(2);\r\nvar contracts_1 = __webpack_require__(3);\r\nvar MediaVaultBatchRoute = (function (_super) {\r\n    tslib_1.__extends(MediaVaultBatchRoute, _super);\r\n    function MediaVaultBatchRoute(appOptions) {\r\n        var _this = _super.call(this, appOptions) || this;\r\n        _this.appOptions = appOptions;\r\n        _this.updateRoute = 'media-vaults/batch';\r\n        _this.deleteRoute = 'media-vaults/batch';\r\n        return _this;\r\n    }\r\n    /**\r\n     * Parses update route; this URI template does not expose any additional options.\r\n     * @method\r\n     * @example mediaVaultBatchRoute.update();\r\n     **/\r\n    MediaVaultBatchRoute.prototype.update = function () {\r\n        return _super.prototype.baseUpdate.call(this, this.updateRoute, {});\r\n    };\r\n    /**\r\n     * Parses remove route; this URI template does not expose any additional options.\r\n     * @method\r\n     * @example mediaVaultBatchRoute.delete();\r\n     **/\r\n    MediaVaultBatchRoute.prototype.delete = function () {\r\n        return _super.prototype.baseDelete.call(this, this.deleteRoute, {});\r\n    };\r\n    return MediaVaultBatchRoute;\r\n}(common_1.BaseRoute));\r\nMediaVaultBatchRoute = tslib_1.__decorate([\r\n    inversify_1.injectable(),\r\n    tslib_1.__param(0, inversify_1.inject(contracts_1.TYPES.IAppOptions)),\r\n    tslib_1.__metadata(\"design:paramtypes\", [typeof (_a = typeof contracts_1.IAppOptions !== \"undefined\" && contracts_1.IAppOptions) === \"function\" && _a || Object])\r\n], MediaVaultBatchRoute);\r\nexports.MediaVaultBatchRoute = MediaVaultBatchRoute;\r\nvar _a;\r\n/**\r\n * @overview\r\n ***Notes:**\r\n - Refer to the [REST API documentation](http://dev.baasic.com/api/reference/home) for detailed information about available Baasic REST API end-points.\r\n - [URI Template](https://github.com/Baasic/uritemplate-js) syntax enables expanding the Baasic route templates to Baasic REST URIs providing it with an object that contains URI parameters.\r\n - All end-point objects are transformed by the associated route service.\r\n */ \r\n\n\n/***/ }),\n/* 247 */\n/***/ (function(module, exports, __webpack_require__) {\n\n\"use strict\";\n/* globals module */\r\n/**\r\n * @module mediaVaultClient\r\n * @description  Media Vault Client provides Baasic route templates which can be expanded to Baasic REST URIs. Various services can use Baasic Media Vault Route Service to obtain needed routes while other routes will be obtained through HAL. By convention, all route services use the same function names as their corresponding services.\r\n */\r\n\r\nObject.defineProperty(exports, \"__esModule\", { value: true });\r\nvar tslib_1 = __webpack_require__(1);\r\nvar inversify_1 = __webpack_require__(0);\r\n;\r\nvar httpApi_1 = __webpack_require__(4);\r\nvar _1 = __webpack_require__(16);\r\nvar MediaVaultClient = (function () {\r\n    function MediaVaultClient(mediaVaultRoute, apiClient, mediaVaultStreamsClient, mediaVaultBatchClient, mediaVaultSettingsClient, mediaVaultProcessingProviderSettingsClient) {\r\n        this.mediaVaultRoute = mediaVaultRoute;\r\n        this.apiClient = apiClient;\r\n        this.mediaVaultStreamsClient = mediaVaultStreamsClient;\r\n        this.mediaVaultBatchClient = mediaVaultBatchClient;\r\n        this.mediaVaultSettingsClient = mediaVaultSettingsClient;\r\n        this.mediaVaultProcessingProviderSettingsClient = mediaVaultProcessingProviderSettingsClient;\r\n    }\r\n    Object.defineProperty(MediaVaultClient.prototype, \"routeDefinition\", {\r\n        get: function () {\r\n            return this.mediaVaultRoute;\r\n        },\r\n        enumerable: true,\r\n        configurable: true\r\n    });\r\n    Object.defineProperty(MediaVaultClient.prototype, \"streams\", {\r\n        get: function () {\r\n            return this.mediaVaultStreamsClient;\r\n        },\r\n        enumerable: true,\r\n        configurable: true\r\n    });\r\n    Object.defineProperty(MediaVaultClient.prototype, \"batch\", {\r\n        get: function () {\r\n            return this.mediaVaultBatchClient;\r\n        },\r\n        enumerable: true,\r\n        configurable: true\r\n    });\r\n    Object.defineProperty(MediaVaultClient.prototype, \"settings\", {\r\n        get: function () {\r\n            return this.mediaVaultSettingsClient;\r\n        },\r\n        enumerable: true,\r\n        configurable: true\r\n    });\r\n    Object.defineProperty(MediaVaultClient.prototype, \"processingProviderSettings\", {\r\n        get: function () {\r\n            return this.mediaVaultProcessingProviderSettingsClient;\r\n        },\r\n        enumerable: true,\r\n        configurable: true\r\n    });\r\n    /**\r\n     * Returns a promise that is resolved once the find action has been performed. Success response returns a list of media vault resources matching the given criteria.\r\n     * @method\r\n     * @param options Query resource options object.\r\n     * @returns A promise that is resolved once the find action has been performed.\r\n     * @example mediaVaultClient.find({\r\n                  pageNumber : 1,\r\n                  pageSize : 10,\r\n                  orderBy : '<field>',\r\n                  orderDirection : '<asc|desc>',\r\n                  search : '<search-phrase>'\r\n               })\r\n               .then(function (collection) {\r\n                   // perform success action here\r\n              },\r\n               function (response, status, headers, config) {\r\n                   // perform error handling here\r\n              });\r\n   **/\r\n    MediaVaultClient.prototype.find = function (options) {\r\n        return this.apiClient.get(this.routeDefinition.find(options));\r\n    };\r\n    /**\r\n     * Returns a promise that is resolved once the get action has been performed. Success response returns requested media vault resource.\r\n     * @method\r\n     * @param id Media vault id which uniquely identifies media vault resource that needs to be retrieved.\r\n     * @param options Query resource options object.\r\n     * @returns A promise that is resolved once the get action has been performed.\r\n     * @example mediaVaultClient.get('<media-vault-id>')\r\n                    .then(function (data) {\r\n                        // perform success action here\r\n                    },\r\n                     function (response, status, headers, config) {\r\n                         // perform error handling here\r\n                    });\r\n     **/\r\n    MediaVaultClient.prototype.get = function (id, options) {\r\n        return this.apiClient.get(this.mediaVaultRoute.get(id, options));\r\n    };\r\n    /**\r\n     * Returns a promise that is resolved once the update media vault action has been performed; this action will update a media vault resource if successfully completed. This route uses HAL enabled objects to obtain routes and therefore it doesn't apply `mediaVaultRoute` route template. Here is an example of how a route can be obtained from HAL enabled objects:\r\n     * ```\r\n     * let params = modelMapper.updateParams(mediaVaultEntry);\r\n     * let uri = params['model'].links('put').href;\r\n     * ```\r\n     * @method\r\n     * @param data A media vault object used to update specified media vault resource.\r\n     * @returns A promise that is resolved once the update media vault action has been performed.\r\n     * @example // mediaVaultEntry is a media vault resource previously fetched using get action.\r\n                    mediaVaultEntry.description = '<description>';\r\n                    mediaVaultClient.update(mediaVaultEntry)\r\n                        .then(function (data) {\r\n                            // perform success action here\r\n                        },\r\n                         function (response, status, headers, config) {\r\n                             // perform error handling here\r\n                        });\r\n     **/\r\n    MediaVaultClient.prototype.update = function (data) {\r\n        return this.apiClient.put(this.routeDefinition.updateParams(data), this.routeDefinition.updateParams(data));\r\n    };\r\n    /**\r\n     * Returns a promise that is resolved once the remove action has been performed. This action will remove one or many media vault resources from the system if successfully completed. If derived resource's format is passed, such as `width` and `height` for the image type of media vault resource, the operation will remove just derived resource. Otherwise, specified media vault and all its accompanying derived resources will be removed from the system. This route uses HAL enabled objects to obtain routes and therefore it doesn't apply baasicMediaVaultRouteService route template. Here is an example of how a route can be obtained from HAL enabled objects:\r\n     * ```\r\n     * let params = modelMapper.removeParams(mediaVaultEntry);\r\n     * let uri = params['model'].links('delete').href;\r\n     * ```\r\n     * @method\r\n     * @param data Media vault object used to delete specific Media vault resource from the system.\r\n     * @param options Options object.\r\n     * @example // mediaVaultEntry is a media vault resource previously fetched using get action. The following action will remove the original media vault resource and all accompanying derived media vault resources.\r\n                   mediaVaultClient.remove(mediaVaultEntry)\r\n                       .then(function (data) {\r\n                           // perform success action here\r\n                       },\r\n                        function (response, status, headers, config) {\r\n                            // perform error handling here\r\n                       });\r\n               // mediaVaultEntry is a media vault resource previously fetched using get action. The following action will remove derived media vault resource only.\r\n                   mediaVaultClient.remove(mediaVaultEntry, {width: <width>, height: <height>})\r\n                       .then(function (data) {\r\n                           // perform success action here\r\n                       },\r\n                        function (response, status, headers, config) {\r\n                            // perform error handling here\r\n                       });\r\n    **/\r\n    MediaVaultClient.prototype.remove = function (data, options) {\r\n        return this.apiClient.delete(this.mediaVaultRoute.delete(data, options));\r\n    };\r\n    return MediaVaultClient;\r\n}());\r\nMediaVaultClient = tslib_1.__decorate([\r\n    inversify_1.injectable(),\r\n    tslib_1.__param(0, inversify_1.inject(_1.TYPES.MediaVaultRoute)),\r\n    tslib_1.__param(1, inversify_1.inject(httpApi_1.httpTYPES.ApiClient)),\r\n    tslib_1.__param(2, inversify_1.inject(_1.TYPES.MediaVaultStreamsClient)),\r\n    tslib_1.__param(3, inversify_1.inject(_1.TYPES.MediaVaultBatchClient)),\r\n    tslib_1.__param(4, inversify_1.inject(_1.TYPES.MediaVaultSettingsClient)),\r\n    tslib_1.__param(5, inversify_1.inject(_1.TYPES.MediaVaultProcessingProviderSettingsClient)),\r\n    tslib_1.__metadata(\"design:paramtypes\", [typeof (_a = typeof _1.MediaVaultRoute !== \"undefined\" && _1.MediaVaultRoute) === \"function\" && _a || Object, typeof (_b = typeof httpApi_1.ApiClient !== \"undefined\" && httpApi_1.ApiClient) === \"function\" && _b || Object, typeof (_c = typeof _1.MediaVaultStreamsClient !== \"undefined\" && _1.MediaVaultStreamsClient) === \"function\" && _c || Object, typeof (_d = typeof _1.MediaVaultBatchClient !== \"undefined\" && _1.MediaVaultBatchClient) === \"function\" && _d || Object, typeof (_e = typeof _1.MediaVaultSettingsClient !== \"undefined\" && _1.MediaVaultSettingsClient) === \"function\" && _e || Object, typeof (_f = typeof _1.MediaVaultProcessingProviderSettingsClient !== \"undefined\" && _1.MediaVaultProcessingProviderSettingsClient) === \"function\" && _f || Object])\r\n], MediaVaultClient);\r\nexports.MediaVaultClient = MediaVaultClient;\r\nvar _a, _b, _c, _d, _e, _f;\r\n/**\r\n * @overview\r\n ***Notes:**\r\n - Refer to the [REST API documentation](http://dev.baasic.com/api/reference/home) for detailed information about available Baasic REST API end-points.\r\n - All end-point objects are transformed by the associated route service.\r\n */ \r\n\n\n/***/ }),\n/* 248 */\n/***/ (function(module, exports, __webpack_require__) {\n\n\"use strict\";\n/* globals module */\r\n/**\r\n * @module mediaVaultProcessingProviderSettingsClient\r\n * @description  Media Vault Processing Provider Settings Client provides Baasic route templates which can be expanded to Baasic REST URIs. Various services can use Baasic Media Vault Processing Provider Route Definition to obtain needed routes while other routes will be obtained through HAL. By convention, all route services use the same function names as their corresponding services.\r\n */\r\n\r\nObject.defineProperty(exports, \"__esModule\", { value: true });\r\nvar tslib_1 = __webpack_require__(1);\r\nvar inversify_1 = __webpack_require__(0);\r\n;\r\nvar httpApi_1 = __webpack_require__(4);\r\nvar _1 = __webpack_require__(16);\r\nvar MediaVaultProcessingProviderSettingsClient = (function () {\r\n    function MediaVaultProcessingProviderSettingsClient(mediaVaultProcessingProviderSettingsRoute, apiClient) {\r\n        this.mediaVaultProcessingProviderSettingsRoute = mediaVaultProcessingProviderSettingsRoute;\r\n        this.apiClient = apiClient;\r\n    }\r\n    Object.defineProperty(MediaVaultProcessingProviderSettingsClient.prototype, \"routeDefinition\", {\r\n        get: function () {\r\n            return this.mediaVaultProcessingProviderSettingsRoute;\r\n        },\r\n        enumerable: true,\r\n        configurable: true\r\n    });\r\n    /**\r\n     * Returns a promise that is resolved once the find action has been performed. Success response returns a list of media vault processing providers matching the given criteria.\r\n     * @method\r\n     * @param options Query resource options object.\r\n     * @returns A promise that is resolved once the find action has been performed.\r\n     * @example mediaVaultProcessingProviderSettingsClient.find({\r\n                    pageNumber : 1,\r\n                    pageSize : 10,\r\n                    orderBy : '<field>',\r\n                    orderDirection : '<asc|desc>',\r\n                    search : '<search-phrase>'\r\n                })\r\n                .then(function (collection) {\r\n                    // perform success action here\r\n                },\r\n                 function (response, status, headers, config) {\r\n                     // perform error handling here\r\n                });\r\n     **/\r\n    MediaVaultProcessingProviderSettingsClient.prototype.find = function (options) {\r\n        return this.apiClient.get(this.routeDefinition.find(options));\r\n    };\r\n    /**\r\n     * Returns a promise that is resolved once the get action has been performed. Success response returns the media vault processing provider resource.\r\n     * @method\r\n     * @param id Preprocessing provider id which uniquely identifies preprocessing provider whose settings need to be retrieved.\r\n     * @param options Query resource options object.\r\n     * @returns A promise that is resolved once the get action has been performed.\r\n     * @example mediaVaultProcessingProviderSettingsClient.get('<id>')\r\n                    .then(function (data) {\r\n                        // perform success action here\r\n                    },\r\n                     function (response, status, headers, config) {\r\n                         // perform error handling here\r\n                    });\r\n     **/\r\n    MediaVaultProcessingProviderSettingsClient.prototype.get = function (id, options) {\r\n        return this.apiClient.get(this.mediaVaultProcessingProviderSettingsRoute.get(id, options));\r\n    };\r\n    /**\r\n     * Returns a promise that is resolved once the update action has been performed; this action updates a media vault processing provider setting resource. This route uses HAL enabled objects to obtain routes and therefore it doesn't apply `mediaVaultProcessingProviderSettingsRoute` route template. Here is an example of how a route can be obtained from HAL enabled objects:\r\n     * ```\r\n     * let params = modelMapper.updateParams(processingProviderSetting);\r\n     * let uri = params['model'].links('put').href;\r\n     * ```\r\n     * @method\r\n     * @param data A media vault preprocessing provider settings object used to update specified media vault preprocessing provider settings in the system.\r\n     * @returns A promise that is resolved once the update action has been performed.\r\n     * @example // processingProviderSettings is a resource previously fetched using get action.\r\n                    processingProviderSettings.settings.faceDetection = true;\r\n                    mediaVaultProcessingProviderSettingsClient.update(processingProviderSetting)\r\n                        .then(function (data) {\r\n                            // perform success action here\r\n                        },\r\n                         function (response, status, headers, config) {\r\n                             // perform error handling here\r\n                        });\r\n     **/\r\n    MediaVaultProcessingProviderSettingsClient.prototype.update = function (data) {\r\n        return this.apiClient.put(this.routeDefinition.update(data), this.routeDefinition.updateParams(data));\r\n    };\r\n    return MediaVaultProcessingProviderSettingsClient;\r\n}());\r\nMediaVaultProcessingProviderSettingsClient = tslib_1.__decorate([\r\n    inversify_1.injectable(),\r\n    tslib_1.__param(0, inversify_1.inject(_1.TYPES.MediaVaultProcessingProviderSettingsRoute)),\r\n    tslib_1.__param(1, inversify_1.inject(httpApi_1.httpTYPES.ApiClient)),\r\n    tslib_1.__metadata(\"design:paramtypes\", [typeof (_a = typeof _1.MediaVaultProcessingProviderSettingsRoute !== \"undefined\" && _1.MediaVaultProcessingProviderSettingsRoute) === \"function\" && _a || Object, typeof (_b = typeof httpApi_1.ApiClient !== \"undefined\" && httpApi_1.ApiClient) === \"function\" && _b || Object])\r\n], MediaVaultProcessingProviderSettingsClient);\r\nexports.MediaVaultProcessingProviderSettingsClient = MediaVaultProcessingProviderSettingsClient;\r\nvar _a, _b;\r\n/**\r\n * @overview\r\n ***Notes:**\r\n - Refer to the [REST API documentation](http://dev.baasic.com/api/reference/home) for detailed information about available Baasic REST API end-points.\r\n - All end-point objects are transformed by the associated route service.\r\n */ \r\n\n\n/***/ }),\n/* 249 */\n/***/ (function(module, exports, __webpack_require__) {\n\n\"use strict\";\n/* globals module */\r\n/**\r\n * @module mediaVaultProcessingProviderSettingsRoute\r\n * @description Baasic Media Vault Processing Provider Settings Route Definition provides Baasic route templates which can be expanded to Baasic REST URIs. Various services can use Baasic Media Vault Processing Provider Settings Route Definition to obtain needed routes while other routes will be obtained through HAL. By convention, all route services use the same function names as their corresponding services.\r\n */\r\n\r\nObject.defineProperty(exports, \"__esModule\", { value: true });\r\nvar tslib_1 = __webpack_require__(1);\r\nvar inversify_1 = __webpack_require__(0);\r\nvar common_1 = __webpack_require__(2);\r\n;\r\nvar contracts_1 = __webpack_require__(3);\r\nvar MediaVaultProcessingProviderSettingsRoute = (function (_super) {\r\n    tslib_1.__extends(MediaVaultProcessingProviderSettingsRoute, _super);\r\n    function MediaVaultProcessingProviderSettingsRoute(appOptions) {\r\n        var _this = _super.call(this, appOptions) || this;\r\n        _this.appOptions = appOptions;\r\n        _this.findRoute = 'media-vault-preprocessing-settings/{?searchQuery,page,rpp,sort,embed,fields}';\r\n        _this.getRoute = 'media-vault-settings';\r\n        _this.updateRoute = 'media-vault-preprocessing-settings/{id}';\r\n        return _this;\r\n    }\r\n    /**\r\n     * Parses find route which can be expanded with additional options. Supported items are:\r\n     * - `searchQuery` - A string referencing media vault processing provider setting properties using the phrase search.\r\n     * - `page` - A value used to set the page number, i.e. to retrieve certain media vault processing provider setting subset from the storage.\r\n     * - `rpp` - A value used to limit the size of result set per page.\r\n     * - `sort` - A string used to set the media vault processing provider setting property to sort the result collection by.\r\n     * - `embed` - Comma separated list of resources to be contained within the current representation.\r\n     * @method\r\n     * @example mediaVaultProcessingProviderSettingsRoute.find({searchQuery: '<search-phrase>'});\r\n     **/\r\n    MediaVaultProcessingProviderSettingsRoute.prototype.find = function (options) {\r\n        return _super.prototype.baseFind.call(this, this.findRoute, options);\r\n    };\r\n    /**\r\n     * Parses get route; this route should be expanded with Id of the media vault processing provider setting resource.\r\n     * @method\r\n     * @example mediaVaultProcessingProviderSettingsRoute.get({id: '<id>'});\r\n     **/\r\n    MediaVaultProcessingProviderSettingsRoute.prototype.get = function (id, options) {\r\n        return _super.prototype.baseGet.call(this, this.getRoute, id, options);\r\n    };\r\n    /**\r\n     * Parses update route; this route should be expanded with Id of the media vault processing provider setting resource.\r\n     * @method\r\n     * @param data A media vault preprocessing provider settings object used to update specified media vault preprocessing provider settings in the system.\r\n     * @example mediaVaultProcessingProviderSettingsRoute.update(data);\r\n     **/\r\n    MediaVaultProcessingProviderSettingsRoute.prototype.update = function (data) {\r\n        return _super.prototype.baseUpdate.call(this, this.updateRoute, data);\r\n    };\r\n    return MediaVaultProcessingProviderSettingsRoute;\r\n}(common_1.BaseRoute));\r\nMediaVaultProcessingProviderSettingsRoute = tslib_1.__decorate([\r\n    inversify_1.injectable(),\r\n    tslib_1.__param(0, inversify_1.inject(contracts_1.TYPES.IAppOptions)),\r\n    tslib_1.__metadata(\"design:paramtypes\", [typeof (_a = typeof contracts_1.IAppOptions !== \"undefined\" && contracts_1.IAppOptions) === \"function\" && _a || Object])\r\n], MediaVaultProcessingProviderSettingsRoute);\r\nexports.MediaVaultProcessingProviderSettingsRoute = MediaVaultProcessingProviderSettingsRoute;\r\nvar _a;\r\n/**\r\n * @overview\r\n ***Notes:**\r\n - Refer to the [REST API documentation](http://dev.baasic.com/api/reference/home) for detailed information about available Baasic REST API end-points.\r\n - [URI Template](https://github.com/Baasic/uritemplate-js) syntax enables expanding the Baasic route templates to Baasic REST URIs providing it with an object that contains URI parameters.\r\n - All end-point objects are transformed by the associated route service.\r\n */ \r\n\n\n/***/ }),\n/* 250 */\n/***/ (function(module, exports, __webpack_require__) {\n\n\"use strict\";\n/* globals module */\r\n/**\r\n * @module mediaVaultRoute\r\n * @description Baasic Media Vault Route Definition provides Baasic route templates which can be expanded to Baasic REST URIs. Various services can use Baasic Media Vault Route Service to obtain needed routes while other routes will be obtained through HAL. By convention, all route services use the same function names as their corresponding services.\r\n */\r\n\r\nObject.defineProperty(exports, \"__esModule\", { value: true });\r\nvar tslib_1 = __webpack_require__(1);\r\nvar inversify_1 = __webpack_require__(0);\r\nvar common_1 = __webpack_require__(2);\r\n;\r\nvar _1 = __webpack_require__(16);\r\nvar contracts_1 = __webpack_require__(3);\r\nvar MediaVaultRoute = (function (_super) {\r\n    tslib_1.__extends(MediaVaultRoute, _super);\r\n    function MediaVaultRoute(appOptions, mediaVaultStreamsRoute, mediaVaultBatchRoute, mediaVaultSettingsRoute, mediaVaultProcessingProviderSettingsRoute) {\r\n        var _this = _super.call(this, appOptions) || this;\r\n        _this.appOptions = appOptions;\r\n        _this.mediaVaultStreamsRoute = mediaVaultStreamsRoute;\r\n        _this.mediaVaultBatchRoute = mediaVaultBatchRoute;\r\n        _this.mediaVaultSettingsRoute = mediaVaultSettingsRoute;\r\n        _this.mediaVaultProcessingProviderSettingsRoute = mediaVaultProcessingProviderSettingsRoute;\r\n        _this.findRoute = 'media-vaults/{?searchQuery,page,rpp,sort,embed,fields}';\r\n        _this.getRoute = 'media-vaults/{id}/{?embed,fields}';\r\n        _this.updateRoute = 'media-vaults/{id}';\r\n        _this.deleteRoute = 'media-vaults/{id}/{?height,width}';\r\n        return _this;\r\n    }\r\n    Object.defineProperty(MediaVaultRoute.prototype, \"streams\", {\r\n        get: function () {\r\n            return this.mediaVaultStreamsRoute;\r\n        },\r\n        enumerable: true,\r\n        configurable: true\r\n    });\r\n    Object.defineProperty(MediaVaultRoute.prototype, \"batch\", {\r\n        get: function () {\r\n            return this.mediaVaultBatchRoute;\r\n        },\r\n        enumerable: true,\r\n        configurable: true\r\n    });\r\n    Object.defineProperty(MediaVaultRoute.prototype, \"settings\", {\r\n        get: function () {\r\n            return this.mediaVaultSettingsRoute;\r\n        },\r\n        enumerable: true,\r\n        configurable: true\r\n    });\r\n    Object.defineProperty(MediaVaultRoute.prototype, \"processingProviderSettings\", {\r\n        get: function () {\r\n            return this.mediaVaultProcessingProviderSettingsRoute;\r\n        },\r\n        enumerable: true,\r\n        configurable: true\r\n    });\r\n    /**\r\n     * Parses find route which can be expanded with additional options. Supported items are:\r\n     * - `searchQuery` - A string referencing media vault properties using the phrase search.\r\n     * - `page` - A value used to set the page number, i.e. to retrieve certain media vault subset from the storage.\r\n     * - `rpp` - A value used to limit the size of result set per page.\r\n     * - `sort` - A string used to set the media vault property to sort the result collection by.\r\n     * - `embed` - Comma separated list of resources to be contained within the current representation.\r\n     * @method\r\n     * @param options Query resource options object.\r\n     * @example mediaVaultRoute.find({searchQuery: '<search-phrase>'});\r\n     **/\r\n    MediaVaultRoute.prototype.find = function (options) {\r\n        return _super.prototype.baseFind.call(this, this.findRoute, options);\r\n    };\r\n    /**\r\n     * Parses get route; this route should be expanded with the Id of media vault resource.\r\n     * @method\r\n     * @param id Media vault id which uniquely identifies media vault resource that needs to be retrieved.\r\n     * @param options Query resource options object.\r\n     * @example mediaVaultRoute.get({id: '<media-vault-id>'});\r\n     **/\r\n    MediaVaultRoute.prototype.get = function (id, options) {\r\n        return _super.prototype.baseGet.call(this, this.getRoute, id, options);\r\n    };\r\n    /**\r\n     * Parses update route; this route should be expanded with the Id of media vault resource.\r\n     * @method\r\n     * @param data Media vault object used to update specific Media vault resource in the system.\r\n     * @example mediaVaultRoute.get({id: '<media-vault-id>'});\r\n     **/\r\n    MediaVaultRoute.prototype.update = function (data) {\r\n        return _super.prototype.baseUpdate.call(this, this.updateRoute, data);\r\n    };\r\n    /**\r\n     * Parses delete route; this route should be expanded with the Id of media vault resource.\r\n     * @method\r\n     * @param data Media vault object used to update specific Media vault resource in the system.\r\n     * @param options Options object.\r\n     * @example mediaVaultRoute.delete({id: '<media-vault-id>'});\r\n     **/\r\n    MediaVaultRoute.prototype.delete = function (data, options) {\r\n        return _super.prototype.baseDelete.call(this, this.deleteRoute, data, options);\r\n    };\r\n    return MediaVaultRoute;\r\n}(common_1.BaseRoute));\r\nMediaVaultRoute = tslib_1.__decorate([\r\n    inversify_1.injectable(),\r\n    tslib_1.__param(0, inversify_1.inject(contracts_1.TYPES.IAppOptions)),\r\n    tslib_1.__param(1, inversify_1.inject(_1.TYPES.MediaVaultStreamsRoute)),\r\n    tslib_1.__param(2, inversify_1.inject(_1.TYPES.MediaVaultBatchRoute)),\r\n    tslib_1.__param(3, inversify_1.inject(_1.TYPES.MediaVaultSettingsRoute)),\r\n    tslib_1.__param(4, inversify_1.inject(_1.TYPES.MediaVaultProcessingProviderSettingsRoute)),\r\n    tslib_1.__metadata(\"design:paramtypes\", [typeof (_a = typeof contracts_1.IAppOptions !== \"undefined\" && contracts_1.IAppOptions) === \"function\" && _a || Object, typeof (_b = typeof _1.MediaVaultStreamsRoute !== \"undefined\" && _1.MediaVaultStreamsRoute) === \"function\" && _b || Object, typeof (_c = typeof _1.MediaVaultBatchRoute !== \"undefined\" && _1.MediaVaultBatchRoute) === \"function\" && _c || Object, typeof (_d = typeof _1.MediaVaultSettingsRoute !== \"undefined\" && _1.MediaVaultSettingsRoute) === \"function\" && _d || Object, typeof (_e = typeof _1.MediaVaultProcessingProviderSettingsRoute !== \"undefined\" && _1.MediaVaultProcessingProviderSettingsRoute) === \"function\" && _e || Object])\r\n], MediaVaultRoute);\r\nexports.MediaVaultRoute = MediaVaultRoute;\r\nvar _a, _b, _c, _d, _e;\r\n/**\r\n * @overview\r\n ***Notes:**\r\n - Refer to the [REST API documentation](http://dev.baasic.com/api/reference/home) for detailed information about available Baasic REST API end-points.\r\n - [URI Template](https://github.com/Baasic/uritemplate-js) syntax enables expanding the Baasic route templates to Baasic REST URIs providing it with an object that contains URI parameters.\r\n - All end-point objects are transformed by the associated route service.\r\n */ \r\n\n\n/***/ }),\n/* 251 */\n/***/ (function(module, exports, __webpack_require__) {\n\n\"use strict\";\n/* globals module */\r\n/**\r\n * @module mediaVaultSettingsClient\r\n * @description  Media Vault Settings Client provides Baasic route templates which can be expanded to Baasic REST URIs. Various services can use Baasic Media Vault Settings Route Service to obtain needed routes while other routes will be obtained through HAL. By convention, all route services use the same function names as their corresponding services.\r\n */\r\n\r\nObject.defineProperty(exports, \"__esModule\", { value: true });\r\nvar tslib_1 = __webpack_require__(1);\r\nvar inversify_1 = __webpack_require__(0);\r\n;\r\nvar httpApi_1 = __webpack_require__(4);\r\nvar _1 = __webpack_require__(16);\r\nvar MediaVaultSettingsClient = (function () {\r\n    function MediaVaultSettingsClient(mediaVaultSettingsRoute, apiClient) {\r\n        this.mediaVaultSettingsRoute = mediaVaultSettingsRoute;\r\n        this.apiClient = apiClient;\r\n    }\r\n    Object.defineProperty(MediaVaultSettingsClient.prototype, \"routeDefinition\", {\r\n        get: function () {\r\n            return this.mediaVaultSettingsRoute;\r\n        },\r\n        enumerable: true,\r\n        configurable: true\r\n    });\r\n    /**\r\n     * Returns a promise that is resolved once the get action has been performed. Success response returns media vault settings resource.\r\n     * @method\r\n     * @returns A promise that is resolved once the get action has been performed.\r\n     * @example mediaVaultSettingsClient.get()\r\n                    .then(function (data) {\r\n                        // perform success action here\r\n                    },\r\n                     function (response, status, headers, config) {\r\n                         // perform error handling here\r\n                    });\r\n     **/\r\n    MediaVaultSettingsClient.prototype.get = function () {\r\n        return this.apiClient.get(this.routeDefinition.get());\r\n    };\r\n    /**\r\n     * Returns a promise that is resolved once the update action has been performed; this action updates the media vault settings resource.\r\n     * @method\r\n     * @param data A media vault settings object used to update media vault settings in the system.\r\n     * @returns A promise that is resolved once the update action has been performed.\r\n     * @example mediaVaultSettingsClient.update(mediaVaultSettings)\r\n                    .then(function (data) {\r\n                        // perform success action here\r\n                    },\r\n                     function (response, status, headers, config) {\r\n                         // perform error handling here\r\n                    });\r\n     **/\r\n    MediaVaultSettingsClient.prototype.update = function (data) {\r\n        return this.apiClient.put(this.routeDefinition.update(), this.routeDefinition.updateParams(data));\r\n    };\r\n    return MediaVaultSettingsClient;\r\n}());\r\nMediaVaultSettingsClient = tslib_1.__decorate([\r\n    inversify_1.injectable(),\r\n    tslib_1.__param(0, inversify_1.inject(_1.TYPES.MediaVaultSettingsRoute)),\r\n    tslib_1.__param(1, inversify_1.inject(httpApi_1.httpTYPES.ApiClient)),\r\n    tslib_1.__metadata(\"design:paramtypes\", [typeof (_a = typeof _1.MediaVaultSettingsRoute !== \"undefined\" && _1.MediaVaultSettingsRoute) === \"function\" && _a || Object, typeof (_b = typeof httpApi_1.ApiClient !== \"undefined\" && httpApi_1.ApiClient) === \"function\" && _b || Object])\r\n], MediaVaultSettingsClient);\r\nexports.MediaVaultSettingsClient = MediaVaultSettingsClient;\r\nvar _a, _b;\r\n/**\r\n * @overview\r\n ***Notes:**\r\n - Refer to the [REST API documentation](http://dev.baasic.com/api/reference/home) for detailed information about available Baasic REST API end-points.\r\n - All end-point objects are transformed by the associated route service.\r\n */ \r\n\n\n/***/ }),\n/* 252 */\n/***/ (function(module, exports, __webpack_require__) {\n\n\"use strict\";\n/* globals module */\r\n/**\r\n * @module mediaVaultSettingsRoute\r\n * @description Baasic Media Vault Settings Route Definition provides Baasic route templates which can be expanded to Baasic REST URIs. Various services can use Baasic Media Vault Settings Route Service to obtain needed routes while other routes will be obtained through HAL. By convention, all route services use the same function names as their corresponding services.\r\n */\r\n\r\nObject.defineProperty(exports, \"__esModule\", { value: true });\r\nvar tslib_1 = __webpack_require__(1);\r\nvar inversify_1 = __webpack_require__(0);\r\nvar common_1 = __webpack_require__(2);\r\nvar contracts_1 = __webpack_require__(3);\r\nvar MediaVaultSettingsRoute = (function (_super) {\r\n    tslib_1.__extends(MediaVaultSettingsRoute, _super);\r\n    function MediaVaultSettingsRoute(appOptions) {\r\n        var _this = _super.call(this, appOptions) || this;\r\n        _this.appOptions = appOptions;\r\n        _this.getRoute = 'media-vault-settings';\r\n        _this.updateRoute = 'media-vault-settings';\r\n        return _this;\r\n    }\r\n    /**\r\n     * Parses get route; this route doesn not expose any additional options.\r\n     * @method\r\n     * @example mediaVaultSettingsRoute.get();\r\n     **/\r\n    MediaVaultSettingsRoute.prototype.get = function () {\r\n        return _super.prototype.baseCreate.call(this, this.getRoute, {});\r\n    };\r\n    /**\r\n     * Parses update route; this URI template does not expose any additional options.\r\n     * @method\r\n     * @example mediaVaultSettingsRoute.update();\r\n     **/\r\n    MediaVaultSettingsRoute.prototype.update = function () {\r\n        return _super.prototype.baseCreate.call(this, this.updateRoute, {});\r\n    };\r\n    return MediaVaultSettingsRoute;\r\n}(common_1.BaseRoute));\r\nMediaVaultSettingsRoute = tslib_1.__decorate([\r\n    inversify_1.injectable(),\r\n    tslib_1.__param(0, inversify_1.inject(contracts_1.TYPES.IAppOptions)),\r\n    tslib_1.__metadata(\"design:paramtypes\", [typeof (_a = typeof contracts_1.IAppOptions !== \"undefined\" && contracts_1.IAppOptions) === \"function\" && _a || Object])\r\n], MediaVaultSettingsRoute);\r\nexports.MediaVaultSettingsRoute = MediaVaultSettingsRoute;\r\nvar _a;\r\n/**\r\n * @overview\r\n ***Notes:**\r\n - Refer to the [REST API documentation](http://dev.baasic.com/api/reference/home) for detailed information about available Baasic REST API end-points.\r\n - [URI Template](https://github.com/Baasic/uritemplate-js) syntax enables expanding the Baasic route templates to Baasic REST URIs providing it with an object that contains URI parameters.\r\n - All end-point objects are transformed by the associated route service.\r\n */ \r\n\n\n/***/ }),\n/* 253 */\n/***/ (function(module, exports, __webpack_require__) {\n\n\"use strict\";\n/* globals module */\r\n/**\r\n * @module mediaVaultStreamsClient\r\n * @description  Media Vault Streams Client provides Baasic route templates which can be expanded to Baasic REST URIs. Various services can use Baasic Media Vault Streams Route Service to obtain needed routes while other routes will be obtained through HAL. By convention, all route services use the same function names as their corresponding services.\r\n */\r\n\r\nObject.defineProperty(exports, \"__esModule\", { value: true });\r\nvar tslib_1 = __webpack_require__(1);\r\nvar inversify_1 = __webpack_require__(0);\r\n;\r\nvar httpApi_1 = __webpack_require__(4);\r\nvar _1 = __webpack_require__(16);\r\nvar MediaVaultStreamsClient = (function () {\r\n    function MediaVaultStreamsClient(mediaVaultStreamsRoute, apiClient) {\r\n        this.mediaVaultStreamsRoute = mediaVaultStreamsRoute;\r\n        this.apiClient = apiClient;\r\n    }\r\n    Object.defineProperty(MediaVaultStreamsClient.prototype, \"routeDefinition\", {\r\n        get: function () {\r\n            return this.mediaVaultStreamsRoute;\r\n        },\r\n        enumerable: true,\r\n        configurable: true\r\n    });\r\n    /**\r\n     * Returns a promise that is resolved once the get action has been performed. Success response returns the media vault stream if successfully completed. If derived resource's format is passed, such as `width` and `height` for the image type of media vault resource, the operation will return a stream of the derived resource. Otherwise, stream of the original media vault resource will be retrieved.\r\n     * @method\r\n     * @example // Request the original media vault stream\r\n                        mediaVaultStreamsClient.get('<path>')\r\n                            .then(function (data) {\r\n                                // perform success action here\r\n                            },\r\n                             function (response, status, headers, config) {\r\n                                 // perform error handling here\r\n                            });\r\n                // Request derived media vault stream\r\n                        mediaVaultStreamsClient.get({id: '<path>', width: <width>, height: <height>})\r\n                            .then(function (data) {\r\n                                // perform success action here\r\n                            },\r\n                             function (response, status, headers, config) {\r\n                                 // perform error handling here\r\n                            });\r\n     **/\r\n    MediaVaultStreamsClient.prototype.get = function (data) {\r\n        return this.apiClient.get(this.routeDefinition.get(data));\r\n    };\r\n    /**\r\n     * Returns a promise that is resolved once the get action has been performed. Success response returns the media vault stream as a blob. If derived resource's format is passed, such as `width` and `height` for the image type of media vault resource, the operation will return a blob of the derived media vault resource. Otherwise, blob of the original media vault resource will be retrieved. For more information on Blob objects please see [Blob Documentation](https://developer.mozilla.org/en-US/docs/Web/API/Blob).\r\n     * @method\r\n     * @example // Request the original blob\r\n                        mediaVaultStreamsClient.getBlob('<path>')\r\n                            .then(function (data) {\r\n                                // perform success action here\r\n                            },\r\n                             function (response, status, headers, config) {\r\n                                 // perform error handling here\r\n                            });\r\n                // Request derived blob\r\n                        mediaVaultStreamsClient.getBlob({id: '<path>', width: <width>, height: <height>})\r\n                            .then(function (data) {\r\n                                // perform success action here\r\n                            },\r\n                             function (response, status, headers, config) {\r\n                                 // perform error handling here\r\n                            });\r\n     **/\r\n    MediaVaultStreamsClient.prototype.getBlob = function (data) {\r\n        return this.apiClient.get(this.mediaVaultStreamsRoute.get(data), { 'Accept': 'application/octet-stream' });\r\n    };\r\n    /**\r\n     * Returns a promise that is resolved once the create media vault stream action has been performed; this action will upload the specified blob. For more information on Blob objects please see [Blob Documentation](https://developer.mozilla.org/en-US/docs/Web/API/Blob).\r\n     * @method\r\n     * @example mediaVaultStreamsClient.create('<path>', <blob>)\r\n                    .then(function (data) {\r\n                        // perform success action here\r\n                    },\r\n                     function (response, status, headers, config) {\r\n                         // perform error handling here\r\n                    });\r\n     **/\r\n    MediaVaultStreamsClient.prototype.create = function (data, stream) {\r\n        var formData = new FormData();\r\n        formData.append('file', stream);\r\n        return this.apiClient.post(this.mediaVaultStreamsRoute.create(data), formData, { 'Content-Type': undefined });\r\n    };\r\n    /**\r\n     * Returns a promise that is resolved once the update media vault stream action has been performed; this action will replace the existing stream with a new one. Alternatively, if a derived stream is being updated it will either create a new derived stream or replace the existing one. In order to update a derived stream, format needs to be passed (For example: `width` and `height` for the image type of media vault stream data type).\r\n     * @method\r\n     * @example // Update existing original media vault stream\r\n                        mediaVaultStreamsClient.update('<path>', <media-vault-stream>)\r\n                            .then(function (data) {\r\n                                // perform success action here\r\n                            },\r\n                             function (response, status, headers, config) {\r\n                                 // perform error handling here\r\n                            });\r\n                // Update derived media vault stream\r\n                    mediaVaultStreamsClient.update({id: '<path>', width: <width>, height: <height>}, <media-vault-stream>)\r\n                        .then(function (data) {\r\n                            // perform success action here\r\n                        },\r\n                          function (response, status, headers, config) {\r\n                              // perform error handling here\r\n                        });\r\n     **/\r\n    MediaVaultStreamsClient.prototype.update = function (data, stream) {\r\n        var formData = new FormData();\r\n        formData.append('file', stream);\r\n        return this.apiClient.put(this.mediaVaultStreamsRoute.update(data), formData, { 'Content-Type': undefined });\r\n    };\r\n    return MediaVaultStreamsClient;\r\n}());\r\nMediaVaultStreamsClient = tslib_1.__decorate([\r\n    inversify_1.injectable(),\r\n    tslib_1.__param(0, inversify_1.inject(_1.TYPES.MediaVaultStreamsRoute)),\r\n    tslib_1.__param(1, inversify_1.inject(httpApi_1.httpTYPES.ApiClient)),\r\n    tslib_1.__metadata(\"design:paramtypes\", [typeof (_a = typeof _1.MediaVaultStreamsRoute !== \"undefined\" && _1.MediaVaultStreamsRoute) === \"function\" && _a || Object, typeof (_b = typeof httpApi_1.ApiClient !== \"undefined\" && httpApi_1.ApiClient) === \"function\" && _b || Object])\r\n], MediaVaultStreamsClient);\r\nexports.MediaVaultStreamsClient = MediaVaultStreamsClient;\r\nvar _a, _b;\r\n/**\r\n * @overview\r\n ***Notes:**\r\n - Refer to the [REST API documentation](http://dev.baasic.com/api/reference/home) for detailed information about available Baasic REST API end-points.\r\n - All end-point objects are transformed by the associated route service.\r\n */ \r\n\n\n/***/ }),\n/* 254 */\n/***/ (function(module, exports, __webpack_require__) {\n\n\"use strict\";\n/* globals module */\r\n/**\r\n * @module mediaVaultStreamsRoute\r\n * @description Baasic MediaVault Streams Route Definition provides Baasic route templates which can be expanded to Baasic REST URIs. Various services can use Baasic Media Vault Streams Route Definition to obtain needed routes while other routes will be obtained through HAL. By convention, all route services use the same function names as their corresponding services.\r\n */\r\n\r\nObject.defineProperty(exports, \"__esModule\", { value: true });\r\nvar tslib_1 = __webpack_require__(1);\r\nvar inversify_1 = __webpack_require__(0);\r\nvar common_1 = __webpack_require__(2);\r\nvar contracts_1 = __webpack_require__(3);\r\nvar MediaVaultStreamsRoute = (function (_super) {\r\n    tslib_1.__extends(MediaVaultStreamsRoute, _super);\r\n    function MediaVaultStreamsRoute(appOptions) {\r\n        var _this = _super.call(this, appOptions) || this;\r\n        _this.appOptions = appOptions;\r\n        _this.getRoute = 'media-vault-streams/{id}/{?width,height}';\r\n        _this.createRoute = 'media-vault-streams/{path}';\r\n        _this.updateRoute = 'media-vault-streams/{id}/{?width,height}';\r\n        return _this;\r\n    }\r\n    /**\r\n     * Parses get route; this route should be expanded with id or path of desired media vault stream. Additional supported items are:\r\n     * - `width` - width of desired derived image.\r\n     * - `height` - height of desired derived image.\r\n     * @method\r\n     * @example mediaVaultRoute.get({id: '<path>'});\r\n     **/\r\n    MediaVaultStreamsRoute.prototype.get = function (data) {\r\n        if (this.utility.isObject(data)) {\r\n            data = {\r\n                id: data\r\n            };\r\n        }\r\n        return _super.prototype.baseCreate.call(this, this.getRoute, data);\r\n    };\r\n    /**\r\n     * Parses create route; this route should be expanded with the path which indicates where the stream will be saved.\r\n     * @method\r\n     * @example mediaVaultStreamsRoute.create({path: '<path>'});\r\n     **/\r\n    MediaVaultStreamsRoute.prototype.create = function (data) {\r\n        if (this.utility.isObject(data)) {\r\n            data = {\r\n                path: data\r\n            };\r\n        }\r\n        return _super.prototype.baseCreate.call(this, this.createRoute, data);\r\n    };\r\n    /**\r\n     * Parses update route; this route should be expanded with the id or path of the previously saved media vault resource. Additional supported items are:\r\n     * - `width` - width of desired derived image.\r\n     * - `height` - height of desired derived image.\r\n     * @method\r\n     * @example mediaVaultStreamsRoute.update({id: '<path>'});\r\n     **/\r\n    MediaVaultStreamsRoute.prototype.update = function (data) {\r\n        if (this.utility.isObject(data)) {\r\n            data = {\r\n                id: data\r\n            };\r\n        }\r\n        return _super.prototype.baseUpdate.call(this, this.updateRoute, data);\r\n    };\r\n    return MediaVaultStreamsRoute;\r\n}(common_1.BaseRoute));\r\nMediaVaultStreamsRoute = tslib_1.__decorate([\r\n    inversify_1.injectable(),\r\n    tslib_1.__param(0, inversify_1.inject(contracts_1.TYPES.IAppOptions)),\r\n    tslib_1.__metadata(\"design:paramtypes\", [typeof (_a = typeof contracts_1.IAppOptions !== \"undefined\" && contracts_1.IAppOptions) === \"function\" && _a || Object])\r\n], MediaVaultStreamsRoute);\r\nexports.MediaVaultStreamsRoute = MediaVaultStreamsRoute;\r\nvar _a;\r\n/**\r\n * @overview\r\n ***Notes:**\r\n - Refer to the [REST API documentation](http://dev.baasic.com/api/reference/home) for detailed information about available Baasic REST API end-points.\r\n - [URI Template](https://github.com/Baasic/uritemplate-js) syntax enables expanding the Baasic route templates to Baasic REST URIs providing it with an object that contains URI parameters.\r\n - All end-point objects are transformed by the associated route service.\r\n */ \r\n\n\n/***/ }),\n/* 255 */\n/***/ (function(module, exports, __webpack_require__) {\n\n\"use strict\";\n\r\nObject.defineProperty(exports, \"__esModule\", { value: true });\r\nvar inversify_1 = __webpack_require__(0);\r\nvar _1 = __webpack_require__(16);\r\nvar TYPES = {\r\n    MediaVaultBatchRoute: Symbol(\"MediaVaultBatchRoute\"),\r\n    MediaVaultBatchClient: Symbol(\"MediaVaultBatchClient\"),\r\n    MediaVaultRoute: Symbol(\"MediaVaultRoute\"),\r\n    MediaVaultProcessingProviderSettingsClient: Symbol(\"MediaVaultProcessingProviderSettingsClient\"),\r\n    MediaVaultProcessingProviderSettingsRoute: Symbol(\"MediaVaultProcessingProviderSettingsRoute\"),\r\n    MediaVaultClient: Symbol(\"MediaVaultClient\"),\r\n    MediaVaultSettingsRoute: Symbol(\"MediaVaultSettingsRoute\"),\r\n    MediaVaultSettingsClient: Symbol(\"MediaVaultSettingsClient\"),\r\n    MediaVaultStreamsRoute: Symbol(\"MediaVaultStreamsRoute\"),\r\n    MediaVaultStreamsClient: Symbol(\"MediaVaultStreamsClient\")\r\n};\r\nexports.TYPES = TYPES;\r\nvar diModule = new inversify_1.ContainerModule(function (bind) {\r\n    bind(TYPES.MediaVaultStreamsRoute).to(_1.MediaVaultStreamsRoute);\r\n    bind(TYPES.MediaVaultStreamsClient).to(_1.MediaVaultStreamsClient);\r\n    bind(TYPES.MediaVaultBatchRoute).to(_1.MediaVaultBatchRoute);\r\n    bind(TYPES.MediaVaultBatchClient).to(_1.MediaVaultBatchClient);\r\n    bind(TYPES.MediaVaultSettingsRoute).to(_1.MediaVaultSettingsRoute);\r\n    bind(TYPES.MediaVaultSettingsClient).to(_1.MediaVaultSettingsClient);\r\n    bind(TYPES.MediaVaultProcessingProviderSettingsRoute).to(_1.MediaVaultProcessingProviderSettingsRoute);\r\n    bind(TYPES.MediaVaultProcessingProviderSettingsClient).to(_1.MediaVaultProcessingProviderSettingsClient);\r\n    bind(TYPES.MediaVaultRoute).to(_1.MediaVaultRoute);\r\n    bind(TYPES.MediaVaultClient).to(_1.MediaVaultClient);\r\n});\r\nexports.diModule = diModule;\r\n\n\n/***/ }),\n/* 256 */\n/***/ (function(module, exports, __webpack_require__) {\n\n\"use strict\";\n\r\nObject.defineProperty(exports, \"__esModule\", { value: true });\r\nvar inversify_1 = __webpack_require__(0);\r\nvar _1 = __webpack_require__(10);\r\nvar TYPES = {\r\n    LoginRoute: Symbol(\"LoginRoute\"),\r\n    LoginClient: Symbol(\"LoginClient\"),\r\n    LoginSocialRoute: Symbol(\"LoginSocialRoute\"),\r\n    LoginSocialClient: Symbol(\"LoginSocialClient\"),\r\n    PasswordRecoveryClient: Symbol(\"PasswordRecoveryClient\"),\r\n    PasswordRecoveryRoute: Symbol(\"PasswordRecoveryRoute\"),\r\n    RegisterClient: Symbol(\"RegisterClient\"),\r\n    RegisterRoute: Symbol(\"RegisterRoute\"),\r\n    RoleClient: Symbol(\"RoleClient\"),\r\n    RoleRoute: Symbol(\"RoleRoute\"),\r\n    UserSocialLoginClient: Symbol(\"UserSocialLoginClient\"),\r\n    UserSocialLoginRoute: Symbol(\"UserSocialLoginRoute\"),\r\n    UserClient: Symbol(\"UserClient\"),\r\n    UserRoute: Symbol(\"UserRoute\"),\r\n    PermissionRoute: Symbol(\"PermissionRoute\"),\r\n    PermissionClient: Symbol(\"PermissionClient\"),\r\n    LookupRoute: Symbol(\"LookupRoute\"),\r\n    LookupClient: Symbol(\"LookupClient\"),\r\n    Root: Symbol(\"Membership-Root\")\r\n};\r\nexports.TYPES = TYPES;\r\nvar diModule = new inversify_1.ContainerModule(function (bind) {\r\n    bind(TYPES.LoginSocialRoute).to(_1.LoginSocialRoute);\r\n    bind(TYPES.LoginSocialClient).to(_1.LoginSocialClient);\r\n    bind(TYPES.LoginRoute).to(_1.LoginRoute);\r\n    bind(TYPES.LoginClient).to(_1.LoginClient);\r\n    bind(TYPES.PasswordRecoveryRoute).to(_1.PasswordRecoveryRoute);\r\n    bind(TYPES.PasswordRecoveryClient).to(_1.PasswordRecoveryClient);\r\n    bind(TYPES.RegisterRoute).to(_1.RegisterRoute);\r\n    bind(TYPES.RegisterClient).to(_1.RegisterClient);\r\n    bind(TYPES.RoleRoute).to(_1.RoleRoute);\r\n    bind(TYPES.RoleClient).to(_1.RoleClient);\r\n    bind(TYPES.UserSocialLoginRoute).to(_1.UserSocialLoginRoute);\r\n    bind(TYPES.UserSocialLoginClient).to(_1.UserSocialLoginClient);\r\n    bind(TYPES.UserRoute).to(_1.UserRoute);\r\n    bind(TYPES.UserClient).to(_1.UserClient);\r\n    bind(TYPES.PermissionRoute).to(_1.PermissionRoute);\r\n    bind(TYPES.PermissionClient).to(_1.PermissionClient);\r\n    bind(TYPES.LookupRoute).to(_1.LookupRoute);\r\n    bind(TYPES.LookupClient).to(_1.LookupClient);\r\n    bind(TYPES.Root).to(_1.Root);\r\n});\r\nexports.diModule = diModule;\r\n\n\n/***/ }),\n/* 257 */\n/***/ (function(module, exports, __webpack_require__) {\n\n\"use strict\";\n/* globals module */\r\n/**\r\n * @module loginClient\r\n * @description  Login Client provides an easy way to consume  Application Registration REST API end-points. In order to obtain needed routes `loginClient` uses `loginRoute`.\r\n */\r\n\r\nObject.defineProperty(exports, \"__esModule\", { value: true });\r\nvar tslib_1 = __webpack_require__(1);\r\nvar inversify_1 = __webpack_require__(0);\r\nvar common_1 = __webpack_require__(2);\r\nvar contracts_1 = __webpack_require__(3);\r\nvar httpApi_1 = __webpack_require__(4);\r\nvar _1 = __webpack_require__(10);\r\nvar LoginClient = (function () {\r\n    function LoginClient(loginRoute, tokenHandler, apiClient) {\r\n        this.loginRoute = loginRoute;\r\n        this.tokenHandler = tokenHandler;\r\n        this.apiClient = apiClient;\r\n        this.utility = new common_1.Utility();\r\n    }\r\n    Object.defineProperty(LoginClient.prototype, \"routeDefinition\", {\r\n        get: function () {\r\n            return this.loginRoute;\r\n        },\r\n        enumerable: true,\r\n        configurable: true\r\n    });\r\n    /**\r\n     * Returns a promise that is resolved once the login action has been performed. This action logs user into the application and success response returns the token resource.\r\n     * @method\r\n     * @example loginClient.login({\r\n                    username : '<username>',\r\n                    password : '<password>',\r\n                    options : ['session', 'sliding']\r\n                })\r\n                .then(function (data) {\r\n                    // perform success actions here\r\n                },\r\n                 function (data, status) {\r\n                     // perform error handling here\r\n                })\r\n                .finally (function () {});\r\n     **/\r\n    LoginClient.prototype.login = function (data) {\r\n        var settings = this.utility.extend({}, data);\r\n        if (settings.options) {\r\n            var options = settings.options;\r\n            if (options instanceof Array) {\r\n                settings.options = options.join();\r\n            }\r\n        }\r\n        var loginData = this.transformData({\r\n            grant_type: 'password',\r\n            username: settings.username,\r\n            password: settings.password\r\n        });\r\n        var self = this;\r\n        return this.apiClient.createPromise(function (resolve, reject) {\r\n            self.apiClient.post(self.loginRoute.login(settings), loginData, { 'Content-Type': 'application/x-www-form-urlencoded; charset=UTF-8' })\r\n                .then(function (data) {\r\n                var token = {\r\n                    token: data.data.access_token,\r\n                    expires_in: data.data.expires_in,\r\n                    sliding_window: data.data.sliding_window,\r\n                    tokenUrl: data.data.access_url_token,\r\n                    type: data.data.token_type\r\n                };\r\n                self.tokenHandler.store(token);\r\n                resolve(data);\r\n            }, function (data) {\r\n                reject(data);\r\n            });\r\n        });\r\n    };\r\n    /**\r\n     * Returns a promise that is resolved once the loadUserData action has been performed. This action retrieves the account information of the currently logged in user. Retrieved account information will contain permission collection which identifies access policies assigned to the user and application sections.\r\n     * @method\r\n     * @example loginClient.loadUserData()\r\n                    .then(function (data) {\r\n                        // perform success actions here\r\n                    },\r\n                     function (data) {\r\n                         // perform error handling here\r\n                    })\r\n                    .finally (function () {});\r\n     */\r\n    LoginClient.prototype.loadUserData = function (data) {\r\n        data = data || {};\r\n        return this.apiClient.get(this.loginRoute.login(data), { 'Accept': 'application/json; charset=UTF-8' });\r\n    };\r\n    /**\r\n     * Returns a promise that is resolved once the logout action has been performed. This action invalidates user token logging the user out of the system.\r\n     * @method\r\n     * @param token Authentication token which uniquely identifies user that needs to be logged out from the system.\r\n     * @param type Token type.\r\n     * @returns A promise that is resolved once the logout action has been performed.\r\n     * @example let token = baasicAuthorizationService.getAccessToken();\r\n                loginClient.logout(token.access_token, token.token_type)\r\n                .then(function (data) {\r\n                    // perform success handling here\r\n                }, function() {\r\n                    // perform error handling here\r\n                })\r\n                .finally (function () {});\r\n     */\r\n    LoginClient.prototype.logout = function (token, type) {\r\n        var data = {\r\n            token: token,\r\n            type: type\r\n        };\r\n        var self = this;\r\n        return this.apiClient.createPromise(function (resolve, reject) {\r\n            self.apiClient.delete(self.loginRoute.login({}), null, data)\r\n                .then(function (result) {\r\n                self.tokenHandler.store(null);\r\n                resolve();\r\n            }, function (result) {\r\n                reject(result);\r\n            });\r\n        });\r\n    };\r\n    /**\r\n     * Returns url encoded form data.\r\n     */\r\n    LoginClient.prototype.transformData = function (data) {\r\n        var items = [];\r\n        for (var key in data) {\r\n            items.push([encodeURIComponent(key), encodeURIComponent(data[key])].join('='));\r\n        }\r\n        return items.join('&');\r\n    };\r\n    return LoginClient;\r\n}());\r\nLoginClient = tslib_1.__decorate([\r\n    inversify_1.injectable(),\r\n    tslib_1.__param(0, inversify_1.inject(_1.TYPES.LoginRoute)),\r\n    tslib_1.__param(1, inversify_1.inject(contracts_1.TYPES.ITokenHandler)),\r\n    tslib_1.__param(2, inversify_1.inject(httpApi_1.httpTYPES.ApiClient)),\r\n    tslib_1.__metadata(\"design:paramtypes\", [typeof (_a = typeof _1.LoginRoute !== \"undefined\" && _1.LoginRoute) === \"function\" && _a || Object, typeof (_b = typeof contracts_1.ITokenHandler !== \"undefined\" && contracts_1.ITokenHandler) === \"function\" && _b || Object, typeof (_c = typeof httpApi_1.ApiClient !== \"undefined\" && httpApi_1.ApiClient) === \"function\" && _c || Object])\r\n], LoginClient);\r\nexports.LoginClient = LoginClient;\r\nvar _a, _b, _c;\r\n/**\r\n * @overview\r\n  ***Notes:**\r\n  - Refer to the [Baasic REST API](http://dev.baasic.com/api/reference/home) for detailed information about available Baasic REST API end-points.\r\n  - All end-point objects are transformed by the associated route definition.\r\n  */ \r\n\n\n/***/ }),\n/* 258 */\n/***/ (function(module, exports, __webpack_require__) {\n\n\"use strict\";\n\r\nObject.defineProperty(exports, \"__esModule\", { value: true });\r\nvar tslib_1 = __webpack_require__(1);\r\n/* globals module */\r\n/**\r\n * @module loginRoute\r\n * @description Baasic Login Route Definition provides Baasic route templates which can be expanded to Baasic REST URIs. Various services can use Baasic Login Route Definition to obtain needed routes while other routes will be obtained through HAL. By convention, all route services use the same function names as their corresponding services.\r\n */\r\nvar inversify_1 = __webpack_require__(0);\r\nvar common_1 = __webpack_require__(2);\r\nvar contracts_1 = __webpack_require__(3);\r\nvar LoginRoute = (function (_super) {\r\n    tslib_1.__extends(LoginRoute, _super);\r\n    function LoginRoute(appOptions) {\r\n        var _this = _super.call(this, appOptions) || this;\r\n        _this.appOptions = appOptions;\r\n        /**\r\n         * Login route with route and query parameters.\r\n         **/\r\n        _this.loginRoute = 'login/{?embed,fields,options}';\r\n        return _this;\r\n    }\r\n    /**\r\n     * Parses login route which can be expanded with additional options. Supported items are:\r\n     * - `options` - Comma separated list of options used to setup authentication token with cookie session. Supported values are: \"session\" and \"sliding\".\r\n     * @method\r\n     * @example loginRoute.login( {options: 'sliding'});\r\n     **/\r\n    LoginRoute.prototype.login = function (options) {\r\n        return _super.prototype.baseCreate.call(this, this.loginRoute, options);\r\n    };\r\n    return LoginRoute;\r\n}(common_1.BaseRoute));\r\nLoginRoute = tslib_1.__decorate([\r\n    inversify_1.injectable(),\r\n    tslib_1.__param(0, inversify_1.inject(contracts_1.TYPES.IAppOptions)),\r\n    tslib_1.__metadata(\"design:paramtypes\", [typeof (_a = typeof contracts_1.IAppOptions !== \"undefined\" && contracts_1.IAppOptions) === \"function\" && _a || Object])\r\n], LoginRoute);\r\nexports.LoginRoute = LoginRoute;\r\nvar _a;\r\n/**\r\n * @overview\r\n ***Notes:**\r\n - Refer to the [Baasic REST API](http://dev.baasic.com/api/reference/home) for detailed information about available Baasic REST API end-points.\r\n - [URI Template](https://github.com/Baasic/uritemplate-js) syntax enables expanding the Baasic route templates to Baasic REST URIs providing it with an object that contains URI parameters.\r\n - All end-point objects are transformed by the associated route definition.\r\n */ \r\n\n\n/***/ }),\n/* 259 */\n/***/ (function(module, exports, __webpack_require__) {\n\n\"use strict\";\n/* globals module */\r\n/**\r\n * @module loginSocialClient\r\n * @description  Login Social Client provides an easy way to consume  Application Registration REST API end-points. In order to obtain needed routes `loginSocialClient` uses `loginSocialRoute`.\r\n */\r\n\r\nObject.defineProperty(exports, \"__esModule\", { value: true });\r\nvar tslib_1 = __webpack_require__(1);\r\nvar inversify_1 = __webpack_require__(0);\r\nvar httpApi_1 = __webpack_require__(4);\r\nvar contracts_1 = __webpack_require__(3);\r\nvar _1 = __webpack_require__(10);\r\nvar LoginSocialClient = (function () {\r\n    function LoginSocialClient(loginSocialRoute, tokenHandler, apiClient) {\r\n        this.loginSocialRoute = loginSocialRoute;\r\n        this.tokenHandler = tokenHandler;\r\n        this.apiClient = apiClient;\r\n    }\r\n    Object.defineProperty(LoginSocialClient.prototype, \"routeDefinition\", {\r\n        get: function () {\r\n            return this.loginSocialRoute;\r\n        },\r\n        enumerable: true,\r\n        configurable: true\r\n    });\r\n    /**\r\n     * Returns a promise that is resolved once the get action has been performed. Success response returns a resolved social login provider Url.\r\n     * @method\r\n     * @param provider Provider name or id for which the login URL should be generated.\r\n     * @param returnUrl Redirect Uri for the provider which will be used when the user is redirected back to the application.\r\n     * @returns A promise that is resolved once the get action has been performed.\r\n     * @example loginSocialClient.get('<provider>', '<returnUrl>')\r\n                    .then(function (collection) {\r\n                        // perform success action here\r\n                    },\r\n                     function (response, status, headers, config) {\r\n                         // perform error handling here\r\n                    });\r\n     **/\r\n    LoginSocialClient.prototype.get = function (provider, returnUrl) {\r\n        return this.apiClient.get(this.loginSocialRoute.get(provider, returnUrl));\r\n    };\r\n    /**\r\n     * Returns a promise that is resolved once the post action has been performed. This action logs user into the application and success response returns the token resource.\r\n     * @method\r\n     * @param provider Provider name or Id which uniquely identifies social login for which access token should be issued.\r\n     * @param data Object used to identify social login information.\r\n     * @param options Comma separated list of additional options defining token behavior. Supported values are: \"session\" and \"sliding\".\r\n     * @example let postData = {\r\n                    email : '<email>',\r\n                    code:'<code>',\r\n                    activationUrl : '<activationUrl>',\r\n                    oAuthToken : '<oAuthToken>',\r\n                    oAuthVerifier : '<oAuthVerifier>',\r\n                    password : '<password>',\r\n                    returnUrl : '<returnUrl>'\r\n                };\r\n                loginSocialClient.post('<provider>', postData)\r\n                    .then(function (collection) {\r\n                        // perform success action here\r\n                    },\r\n                     function (response, status, headers, config) {\r\n                         // perform error handling here\r\n                    });\r\n     **/\r\n    LoginSocialClient.prototype.post = function (provider, data, options) {\r\n        var params = { provider: provider };\r\n        if (options) {\r\n            params.options = options;\r\n        }\r\n        var self = this;\r\n        return this.apiClient.createPromise(function (resolve, reject) {\r\n            self.apiClient.post(self.loginSocialRoute.post(provider, options), self.loginSocialRoute.createParams(data), { 'Content-Type': 'application/json; charset=UTF-8' })\r\n                .then(function (data) {\r\n                if (data) {\r\n                    var token = {\r\n                        token: data.data.access_token,\r\n                        expires_in: data.data.expires_in,\r\n                        sliding_window: data.data.sliding_window,\r\n                        tokenUrl: data.data.access_url_token,\r\n                        type: data.data.token_type\r\n                    };\r\n                    self.tokenHandler.store(token);\r\n                }\r\n                resolve(data);\r\n            }, function (data) {\r\n                reject(data);\r\n            });\r\n        });\r\n    };\r\n    LoginSocialClient.prototype.parseResponse = function (provider, returnUrl) {\r\n        var params = this.parseUrlParams();\r\n        var result = {};\r\n        switch (provider) {\r\n            case 'twitter':\r\n                /** jshint camelcase: false*/\r\n                result.oAuthToken = params.oauth_token;\r\n                result.oAuthVerifier = params.oauth_verifier;\r\n                break;\r\n            default:\r\n                result.code = params.code;\r\n                result.returnUrl = returnUrl;\r\n                break;\r\n        }\r\n        return result;\r\n    };\r\n    // Getting query string values in javascript: http://stackoverflow.com/questions/901115/how-can-i-get-query-string-values-in-javascript\r\n    LoginSocialClient.prototype.parseUrlParams = function () {\r\n        var urlParams;\r\n        var match, pl = /\\+/g, search = /([^&=]+)=?([^&]*)/g, decode = function (s) { return decodeURIComponent(s.replace(pl, ' ')); }, query = window.location.search.substring(1);\r\n        urlParams = {};\r\n        /* jshint -W084*/\r\n        while (match = search.exec(query)) {\r\n            urlParams[decode(match[1])] = decode(match[2]);\r\n        }\r\n        return urlParams;\r\n    };\r\n    return LoginSocialClient;\r\n}());\r\nLoginSocialClient = tslib_1.__decorate([\r\n    inversify_1.injectable(),\r\n    tslib_1.__param(0, inversify_1.inject(_1.TYPES.LoginSocialRoute)),\r\n    tslib_1.__param(1, inversify_1.inject(contracts_1.TYPES.ITokenHandler)),\r\n    tslib_1.__param(2, inversify_1.inject(httpApi_1.httpTYPES.ApiClient)),\r\n    tslib_1.__metadata(\"design:paramtypes\", [typeof (_a = typeof _1.LoginSocialRoute !== \"undefined\" && _1.LoginSocialRoute) === \"function\" && _a || Object, typeof (_b = typeof contracts_1.ITokenHandler !== \"undefined\" && contracts_1.ITokenHandler) === \"function\" && _b || Object, typeof (_c = typeof httpApi_1.ApiClient !== \"undefined\" && httpApi_1.ApiClient) === \"function\" && _c || Object])\r\n], LoginSocialClient);\r\nexports.LoginSocialClient = LoginSocialClient;\r\nvar _a, _b, _c;\r\n/**\r\n * @overview\r\n ***Notes:**\r\n - Refer to the [Baasic REST API](http://dev.baasic.com/api/reference/home) for detailed information about available Baasic REST API end-points.\r\n - All end-point objects are transformed by the associated route definition.\r\n */ \r\n\n\n/***/ }),\n/* 260 */\n/***/ (function(module, exports, __webpack_require__) {\n\n\"use strict\";\n/* globals module */\r\n/**\r\n * @module loginSocialRoute\r\n * @description Baasic Login Social Route Definition provides Baasic route templates which can be expanded to Baasic REST URIs. Various services can use Baasic Login Social Route Definition to obtain needed routes while other routes will be obtained through HAL. By convention, all route services use the same function names as their corresponding services.\r\n */\r\n\r\nObject.defineProperty(exports, \"__esModule\", { value: true });\r\nvar tslib_1 = __webpack_require__(1);\r\nvar inversify_1 = __webpack_require__(0);\r\nvar common_1 = __webpack_require__(2);\r\nvar contracts_1 = __webpack_require__(3);\r\nvar LoginSocialRoute = (function (_super) {\r\n    tslib_1.__extends(LoginSocialRoute, _super);\r\n    function LoginSocialRoute(appOptions) {\r\n        var _this = _super.call(this, appOptions) || this;\r\n        _this.appOptions = appOptions;\r\n        /**\r\n        * Social login get route with route and query parameters.\r\n        **/\r\n        _this.getRoute = 'login/social/{provider}/{?returnUrl}';\r\n        /**\r\n        * Social login post route with route and query parameters.\r\n        **/\r\n        _this.postRoute = 'login/social/{provider}/{?embed,fields,options}';\r\n        return _this;\r\n    }\r\n    /**\r\n     * Parses get social login route which can be expanded with additional items. Supported items are:\r\n     * - `provider` - Provider name or Id for which the login URL should be generated.\r\n     * - `returnUrl` - Redirect Uri for the provider which will be used when the user is redirected back to the application.\r\n     * @method\r\n     * @param provider Provider name or id for which the login URL should be generated.\r\n     * @param returnUrl Redirect Uri for the provider which will be used when the user is redirected back to the application.\r\n     * @example loginSocialRoute.get({   provider : '<provider>',   returnUrl: '<returnUrl>' });\r\n     **/\r\n    LoginSocialRoute.prototype.get = function (provider, returnUrl) {\r\n        var params = {\r\n            provider: provider,\r\n            returnUrl: returnUrl\r\n        };\r\n        return _super.prototype.baseFind.call(this, this.getRoute, params);\r\n    };\r\n    /**\r\n     * Parses post social login route which can be expanded with additional items. Supported items are:\r\n     * - `provider` - Provider name or Id being used to login with.\r\n     * @method\r\n     * @example loginSocialClient.post({ provider : '<provider>' });\r\n     **/\r\n    LoginSocialRoute.prototype.post = function (provider, options) {\r\n        return _super.prototype.baseCreate.call(this, this.postRoute, { provider: provider, options: options });\r\n    };\r\n    return LoginSocialRoute;\r\n}(common_1.BaseRoute));\r\nLoginSocialRoute = tslib_1.__decorate([\r\n    inversify_1.injectable(),\r\n    tslib_1.__param(0, inversify_1.inject(contracts_1.TYPES.IAppOptions)),\r\n    tslib_1.__metadata(\"design:paramtypes\", [typeof (_a = typeof contracts_1.IAppOptions !== \"undefined\" && contracts_1.IAppOptions) === \"function\" && _a || Object])\r\n], LoginSocialRoute);\r\nexports.LoginSocialRoute = LoginSocialRoute;\r\nvar _a;\r\n\n\n/***/ }),\n/* 261 */\n/***/ (function(module, exports, __webpack_require__) {\n\n\"use strict\";\n/* globals module */\r\n/**\r\n * @module lookupClient\r\n * @description  Lookup Client provides an easy way to consume  Lookup REST API end-points. In order to obtain needed routes `lookupClient` uses `lookupRoute`.\r\n */\r\n\r\nObject.defineProperty(exports, \"__esModule\", { value: true });\r\nvar tslib_1 = __webpack_require__(1);\r\nvar inversify_1 = __webpack_require__(0);\r\n;\r\nvar common_1 = __webpack_require__(2);\r\nvar _1 = __webpack_require__(10);\r\nvar httpApi_1 = __webpack_require__(4);\r\nvar LookupClient = (function () {\r\n    function LookupClient(lookupRoute, apiClient) {\r\n        this.lookupRoute = lookupRoute;\r\n        this.apiClient = apiClient;\r\n        this.utility = new common_1.Utility();\r\n    }\r\n    Object.defineProperty(LookupClient.prototype, \"routeDefinition\", {\r\n        get: function () {\r\n            return this.lookupRoute;\r\n        },\r\n        enumerable: true,\r\n        configurable: true\r\n    });\r\n    LookupClient.prototype.getResponseData = function (embed, data) {\r\n        var responseData = {};\r\n        if (embed) {\r\n            var embeds = embed.split(',');\r\n        }\r\n        for (var index in embeds) {\r\n            var propName = embeds[index];\r\n            if (data.hasOwnProperty(propName)) {\r\n                responseData[propName] = data[propName];\r\n            }\r\n        }\r\n        return responseData;\r\n    };\r\n    /**\r\n     * Returns a promise that is resolved once the get action has been performed. Success response returns the lookup resources.\r\n     * @method\r\n     * @param options Options object that contains comma separated list of related resources to be contained within the current representation.\r\n     * @returns A promise that is resolved once the get action has been performed.\r\n     * @example lookupClient.get()\r\n                    .then(function (data) {\r\n                        // perform success action here\r\n                    },\r\n                     function (response, status, headers, config) {\r\n                         // perform error handling here\r\n                    });\r\n     **/\r\n    LookupClient.prototype.get = function (options) {\r\n        var _this = this;\r\n        var embed = options.embed || 'role,accessAction,accessSection,snProvider';\r\n        var opt = this.utility.extend({}, options, { embed: embed });\r\n        var self = this;\r\n        return this.apiClient.createPromise(function (resolve, reject) {\r\n            self.apiClient.get(_this.lookupRoute.get(opt))\r\n                .then(function (data) {\r\n                data.data = self.getResponseData(embed, data.data);\r\n                resolve(data);\r\n            }, function (data) {\r\n                reject(data);\r\n            });\r\n        });\r\n    };\r\n    return LookupClient;\r\n}());\r\nLookupClient = tslib_1.__decorate([\r\n    inversify_1.injectable(),\r\n    tslib_1.__param(0, inversify_1.inject(_1.TYPES.LookupRoute)),\r\n    tslib_1.__param(1, inversify_1.inject(httpApi_1.httpTYPES.ApiClient)),\r\n    tslib_1.__metadata(\"design:paramtypes\", [typeof (_a = typeof _1.LookupRoute !== \"undefined\" && _1.LookupRoute) === \"function\" && _a || Object, typeof (_b = typeof httpApi_1.ApiClient !== \"undefined\" && httpApi_1.ApiClient) === \"function\" && _b || Object])\r\n], LookupClient);\r\nexports.LookupClient = LookupClient;\r\nvar _a, _b;\r\n/**\r\n * @overview\r\n ***Notes:**\r\n - Refer to the [Baasic REST API](http://dev.baasic.com/api/reference/home) for detailed information about available Baasic REST API end-points.\r\n - All end-point objects are transformed by the associated route service.\r\n */ \r\n\n\n/***/ }),\n/* 262 */\n/***/ (function(module, exports, __webpack_require__) {\n\n\"use strict\";\n/* globals module */\r\n/**\r\n *@module lookupRoute\r\n * @description Baasic Lookup Route Definition provides Baasic route templates which can be expanded to Baasic REST URIs. Various services can use Baasic Lookup Route Definition to obtain needed routes while other routes will be obtained through HAL. By convention, all route services  use the same function names as their corresponding services.\r\n */\r\n\r\nObject.defineProperty(exports, \"__esModule\", { value: true });\r\nvar tslib_1 = __webpack_require__(1);\r\nvar inversify_1 = __webpack_require__(0);\r\nvar common_1 = __webpack_require__(2);\r\nvar contracts_1 = __webpack_require__(3);\r\nvar LookupRoute = (function (_super) {\r\n    tslib_1.__extends(LookupRoute, _super);\r\n    function LookupRoute(appOptions) {\r\n        var _this = _super.call(this, appOptions) || this;\r\n        _this.appOptions = appOptions;\r\n        /**\r\n        * Get route with route and query parameters.\r\n        **/\r\n        _this.getRoute = 'lookups/{?embed,fields}';\r\n        return _this;\r\n    }\r\n    /**\r\n     * Parses get route which can be expanded with additional options. Supported items are:\r\n     * - `embed` - Comma separated list of resources to be contained within the current representation.\r\n     * @method\r\n     * @example baasicLookupRouteService.get(data);\r\n     **/\r\n    LookupRoute.prototype.get = function (data) {\r\n        return _super.prototype.baseCreate.call(this, this.getRoute, data);\r\n    };\r\n    return LookupRoute;\r\n}(common_1.BaseRoute));\r\nLookupRoute = tslib_1.__decorate([\r\n    inversify_1.injectable(),\r\n    tslib_1.__param(0, inversify_1.inject(contracts_1.TYPES.IAppOptions)),\r\n    tslib_1.__metadata(\"design:paramtypes\", [typeof (_a = typeof contracts_1.IAppOptions !== \"undefined\" && contracts_1.IAppOptions) === \"function\" && _a || Object])\r\n], LookupRoute);\r\nexports.LookupRoute = LookupRoute;\r\nvar _a;\r\n/**\r\n * @overview\r\n ***Notes:**\r\n - Refer to the [Baasic REST API](http://dev.baasic.com/api/reference/home) for detailed information about available Baasic REST API end-points.\r\n - [URI Template](https://github.com/Baasic/uritemplate-js) syntax enables expanding the Baasic route templates to Baasic REST URIs providing it with an object that contains URI parameters.\r\n - All end-point objects are transformed by the associated route service.\r\n */ \r\n\n\n/***/ }),\n/* 263 */\n/***/ (function(module, exports, __webpack_require__) {\n\n\"use strict\";\n/* globals module */\r\n/**\r\n * @module passwordRecoveryClient\r\n * @description  Password Recovery Client provides an easy way to consume  Password Recovery REST API end-points. In order to obtain needed routes `passwordRecoveryClient` uses `passwordRecoveryRoute`.\r\n*/\r\n\r\nObject.defineProperty(exports, \"__esModule\", { value: true });\r\nvar tslib_1 = __webpack_require__(1);\r\nvar inversify_1 = __webpack_require__(0);\r\nvar httpApi_1 = __webpack_require__(4);\r\nvar _1 = __webpack_require__(10);\r\nvar PasswordRecoveryClient = (function () {\r\n    function PasswordRecoveryClient(passwordRecoveryRoute, apiClient) {\r\n        this.passwordRecoveryRoute = passwordRecoveryRoute;\r\n        this.apiClient = apiClient;\r\n    }\r\n    Object.defineProperty(PasswordRecoveryClient.prototype, \"routeDefinition\", {\r\n        /**\r\n         * Provides direct access to `passwordRecoveryRoute`.\r\n         * @method\r\n         * @example passwordRecoveryClient.routeDefinition.requestReset(data);\r\n         **/\r\n        get: function () {\r\n            return this.passwordRecoveryRoute;\r\n        },\r\n        enumerable: true,\r\n        configurable: true\r\n    });\r\n    /**\r\n     * Returns a promise that is resolved once the password recovery requestReset action is completed. This action initiates the password recovery process for the user.\r\n     * @method\r\n     * @param data A password recovery object which contains parameters required for the password retrieval request.\r\n     * @example passwordRecoveryClient.requestReset({\r\n                    challengeIdentifier : '<challenge-identifier>',\r\n                    challengeResponse : '<challenge-response>',\r\n                    recoverUrl : '<recover-url>',\r\n                    username : '<username>'\r\n                })\r\n                .then(function () {\r\n                    // perform success action here\r\n                },\r\n                 function (data) {\r\n                    // perform error handling here\r\n                })\r\n                .finally (function () {});\r\n     */\r\n    PasswordRecoveryClient.prototype.requestReset = function (data) {\r\n        return this.apiClient.post(this.passwordRecoveryRoute.passwordRecovery(), data);\r\n    };\r\n    /**\r\n     * Returns a promise that is resolved once the password reset action is completed. This updates user's password selection.\r\n     * @method\r\n     * @param data Password recovery object used to update user's current password selection.\r\n     * @example passwordRecoveryClient.reset({\r\n                    newPassword : '<new-password>',\r\n                    passwordRecoveryToken : '<password-recovery-token>'\r\n                })\r\n                .then(function () {\r\n                    // perform success action here\r\n                },\r\n                 function (data) {\r\n                    // perform error handling here\r\n                })\r\n                .finally (function () {});\r\n     */\r\n    PasswordRecoveryClient.prototype.reset = function (data) {\r\n        return this.apiClient.put(this.passwordRecoveryRoute.passwordRecovery(), data);\r\n    };\r\n    return PasswordRecoveryClient;\r\n}());\r\nPasswordRecoveryClient = tslib_1.__decorate([\r\n    inversify_1.injectable(),\r\n    tslib_1.__param(0, inversify_1.inject(_1.TYPES.PasswordRecoveryRoute)),\r\n    tslib_1.__param(1, inversify_1.inject(httpApi_1.httpTYPES.ApiClient)),\r\n    tslib_1.__metadata(\"design:paramtypes\", [typeof (_a = typeof _1.PasswordRecoveryRoute !== \"undefined\" && _1.PasswordRecoveryRoute) === \"function\" && _a || Object, typeof (_b = typeof httpApi_1.ApiClient !== \"undefined\" && httpApi_1.ApiClient) === \"function\" && _b || Object])\r\n], PasswordRecoveryClient);\r\nexports.PasswordRecoveryClient = PasswordRecoveryClient;\r\nvar _a, _b;\r\n/**\r\n * @overview\r\n ***Notes:**\r\n - Refer to the [Baasic REST API](http://dev.baasic.com/api/reference/home) for detailed information about available Baasic REST API end-points.\r\n - All end-point objects are transformed by the associated route service.\r\n*/ \r\n\n\n/***/ }),\n/* 264 */\n/***/ (function(module, exports, __webpack_require__) {\n\n\"use strict\";\n/* globals module */\r\n/**\r\n * @module passwordRecoveryRoute\r\n * @description Baasic Password Recovery Route Definition provides Baasic route templates which can be expanded to Baasic REST URIs. Various services can use Baasic Password Recovery Route Service to obtain needed routes while other routes will be obtained through HAL. By convention, all route services use the same function names as their corresponding services.\r\n*/\r\n\r\nObject.defineProperty(exports, \"__esModule\", { value: true });\r\nvar tslib_1 = __webpack_require__(1);\r\nvar inversify_1 = __webpack_require__(0);\r\nvar common_1 = __webpack_require__(2);\r\nvar contracts_1 = __webpack_require__(3);\r\nvar PasswordRecoveryRoute = (function (_super) {\r\n    tslib_1.__extends(PasswordRecoveryRoute, _super);\r\n    function PasswordRecoveryRoute(appOptions) {\r\n        var _this = _super.call(this, appOptions) || this;\r\n        _this.appOptions = appOptions;\r\n        /**\r\n        * Password recovery route with route and query parameters.\r\n        **/\r\n        _this.passwordRecoveryRoute = 'recover-password';\r\n        return _this;\r\n    }\r\n    /**\r\n     * Parses recover-password route, recover-password route doesn't expose any additional properties.\r\n     * @method\r\n     * @example passwordRecoveryRoute.passwordRecovery();\r\n     **/\r\n    PasswordRecoveryRoute.prototype.passwordRecovery = function () {\r\n        return _super.prototype.baseCreate.call(this, this.passwordRecoveryRoute, {});\r\n    };\r\n    return PasswordRecoveryRoute;\r\n}(common_1.BaseRoute));\r\nPasswordRecoveryRoute = tslib_1.__decorate([\r\n    inversify_1.injectable(),\r\n    tslib_1.__param(0, inversify_1.inject(contracts_1.TYPES.IAppOptions)),\r\n    tslib_1.__metadata(\"design:paramtypes\", [typeof (_a = typeof contracts_1.IAppOptions !== \"undefined\" && contracts_1.IAppOptions) === \"function\" && _a || Object])\r\n], PasswordRecoveryRoute);\r\nexports.PasswordRecoveryRoute = PasswordRecoveryRoute;\r\nvar _a;\r\n/**\r\n * @overview\r\n ***Notes:**\r\n - Refer to the [Baasic REST API](http://dev.baasic.com/api/reference/home) for detailed information about available Baasic REST API end-points.\r\n - [URI Template](https://github.com/Baasic/uritemplate-js) syntax enables expanding the Baasic route templates to Baasic REST URIs providing it with an object that contains URI parameters.\r\n - All end-point objects are transformed by the associated route definition.\r\n*/ \r\n\n\n/***/ }),\n/* 265 */\n/***/ (function(module, exports, __webpack_require__) {\n\n\"use strict\";\n/* globals module */\r\n/**\r\n * @module permissionClient\r\n * @description  Role Client provides an easy way to consume  Role REST API end-points. In order to obtain needed routes `permissionClient` uses `permissionRoute`.\r\n */\r\n\r\nObject.defineProperty(exports, \"__esModule\", { value: true });\r\nvar tslib_1 = __webpack_require__(1);\r\nvar inversify_1 = __webpack_require__(0);\r\n;\r\nvar common_1 = __webpack_require__(2);\r\nvar httpApi_1 = __webpack_require__(4);\r\nvar _1 = __webpack_require__(10);\r\nvar contracts_1 = __webpack_require__(3);\r\nvar PermissionClient = (function () {\r\n    function PermissionClient(permissionRoute, apiClient, application) {\r\n        this.permissionRoute = permissionRoute;\r\n        this.apiClient = apiClient;\r\n        this.application = application;\r\n        this.utility = new common_1.Utility();\r\n        this.permissionHash = {};\r\n    }\r\n    Object.defineProperty(PermissionClient.prototype, \"routeDefinition\", {\r\n        /**\r\n         * Provides direct access to `permissionRoute`.\r\n         * @method\r\n         * @example permissionClient.routeDefinition.get().expand(expandObject);\r\n         **/\r\n        get: function () {\r\n            return this.permissionRoute;\r\n        },\r\n        enumerable: true,\r\n        configurable: true\r\n    });\r\n    /**\r\n     * Returns a promise that is resolved once the find action has been performed. Success response returns a list of role resources matching the given criteria.\r\n     * @method\r\n     * @param options Query resource options object.\r\n     * @returns A promise that is resolved once the find action has beend performed.\r\n     * @example permissionClient.find({\r\n                    section : '<access-section>',\r\n                    search : '<search-phrase>'\r\n                })\r\n                .then(function (collection) {\r\n                    // perform success action here\r\n                },\r\n                 function (response, status, headers, config) {\r\n                    // perform error handling here\r\n                });\r\n     **/\r\n    PermissionClient.prototype.find = function (section, options) {\r\n        return this.apiClient.get(this.permissionRoute.find(section, options));\r\n    };\r\n    /**\r\n    * Returns a promise that is resolved once the getActions action has been performed. Success response returns a list of access policies that match the specified search parameters.\r\n    * @method\r\n    * @example\r\n            permissionClient.getActions({\r\n            search : '<search-phrase>'\r\n            })\r\n            .success(function (collection) {\r\n            // perform success action here\r\n            })\r\n            .error(function (response, status, headers, config) {\r\n            // perform error handling here\r\n            });\r\n    **/\r\n    PermissionClient.prototype.getActions = function (options) {\r\n        return this.apiClient.get(this.routeDefinition.getActions(options));\r\n    };\r\n    /**\r\n    * Returns a promise that is resolved once the getPermissionSubjects action has been performed. Success response returns a list of matching user and role resources.\r\n    * @method\r\n    * @example\r\n            permissionClient.getPermissionSubjects({\r\n            orderBy : '<field>',\r\n            orderDirection : '<asc|desc>',\r\n            search : '<search-phrase>'\r\n            })\r\n            .success(function (collection) {\r\n            // perform success action here\r\n            })\r\n            .error(function (response, status, headers, config) {\r\n            // perform error handling here\r\n            });\r\n    **/\r\n    PermissionClient.prototype.getPermissionSubjects = function (options) {\r\n        var queue = [];\r\n        var resolvedTasks = 0;\r\n        var self = this;\r\n        queue.push(this.getUsers(options)\r\n            .then(function (collection) {\r\n            var membCollection = [];\r\n            collection.data.item.forEach(function (element) {\r\n                var membershipItem = {\r\n                    name: element.userName,\r\n                    role: ''\r\n                };\r\n                membCollection.push(self.utility.extend(membershipItem, element));\r\n            });\r\n            return membCollection;\r\n        }, function (data) {\r\n            if (data.status !== undefined && data.status !== 403) {\r\n                return data;\r\n            }\r\n        }));\r\n        queue.push(self.getRoles(options)\r\n            .then(function (collection) {\r\n            var membCollection = [];\r\n            collection.data.item.forEach(function (element) {\r\n                var membershipItem = {\r\n                    name: element.name,\r\n                    roleName: element.name,\r\n                    userName: ''\r\n                };\r\n                membCollection.push(self.utility.extend(membershipItem, element));\r\n            });\r\n            return membCollection;\r\n        }, function (data) {\r\n            if (data.status !== undefined && data.status !== 403) {\r\n                return data;\r\n            }\r\n        }));\r\n        return Promise.all(queue).then(function (membershipCollection) {\r\n            return self.utility.OrderByArray([].concat.apply([], membershipCollection), 'name');\r\n        });\r\n    };\r\n    /**\r\n     * Returns a promise that is resolved once the create action has been performed; this action creates a new permission resource.\r\n     * @method\r\n     * @example\r\n            // readAction and updateActions are resources previously fetched using getActions.\r\n            permissionClient.create({\r\n            actions : [readAction, updateAction],\r\n            section : '<section-name>',\r\n            userName : '<userName>'\r\n            })\r\n            .success(function (data) {\r\n            // perform success action here\r\n            })\r\n            .error(function (response, status, headers, config) {\r\n            // perform error handling here\r\n            });\r\n    **/\r\n    PermissionClient.prototype.create = function (data) {\r\n        return this.apiClient.post(this.permissionRoute.create(), data);\r\n    };\r\n    /**\r\n    * Returns a promise that is resolved once the remove action has been performed. If the action is successfully complete, an access policy assigned to the specified role and section will be removed.\r\n    * @method\r\n    * @example\r\n            // permission is a resource previously fetched using get action.\r\n            permissionClient.remove(permission)\r\n            .success(function (data) {\r\n            // perform success action here\r\n            })\r\n            .error(function (response, status, headers, config) {\r\n            // perform error handling here\r\n            });\r\n   **/\r\n    PermissionClient.prototype.remove = function (data) {\r\n        return this.apiClient.delete(this.routeDefinition.remove(data));\r\n    };\r\n    /**\r\n    * Creates a new in-memory permission object.\r\n    * @method\r\n    * @example\r\n            // action collection are lookup items fetched using lookupClient.get action.\r\n            var actionCollection;\r\n            return lookupClient.get()\r\n            .success(function (data) {\r\n            actionCollection = data;\r\n            })\r\n            .error(function (data, status, headers, config) {});\r\n            // subjectItem is an item fetched using permissionClient.getPermissionSubjects action.\r\n            permissionClient.createPermission('<section-Name>', actionCollection, subjectItem);\r\n   **/\r\n    PermissionClient.prototype.createPermission = function (section, actions, membershipItem) {\r\n        var _this = this;\r\n        var permission = {\r\n            dirty: true,\r\n            role: membershipItem.roleName,\r\n            userName: membershipItem.userName,\r\n            section: section,\r\n            actions: []\r\n        };\r\n        actions.forEach(function (element) {\r\n            var newAction = {\r\n                checked: false\r\n            };\r\n            _this.utility.extend(newAction, element);\r\n            permission.actions.push(newAction);\r\n        });\r\n        return permission;\r\n    };\r\n    /**\r\n    * Finds a permission in a given permission collection.\r\n    * @method\r\n    * @example permissionClient.findPermission(permissionObj, permissionCollection);\r\n   **/\r\n    PermissionClient.prototype.findPermission = function (permission, permissionCollection) {\r\n        for (var i = 0; i < permissionCollection.length; i++) {\r\n            var item = permissionCollection[i];\r\n            if (item.section === permission.section &&\r\n                ((!this.isEmpty(item.role) && !this.isEmpty(permission.role) && item.role === permission.role) ||\r\n                    (!this.isEmpty(item.userName) && !this.isEmpty(permission.userName) && item.userName === permission.userName))) {\r\n                return item;\r\n            }\r\n        }\r\n        return undefined;\r\n    };\r\n    /**\r\n    * Checks if a permission object exists in a given permission collection.\r\n    * @method\r\n    * @example permissionClient.exists(permissionObj, permissionCollection);\r\n   **/\r\n    PermissionClient.prototype.exists = function (permission, permissionCollection) {\r\n        return this.findPermission(permission, permissionCollection) !== undefined;\r\n    };\r\n    /**\r\n    * Returns a promise that is resolved once the togglePermission action has been completed. The action will internally either call a `remove` or `create` action based on given criteria.\r\n    * @method\r\n    * @example permissionClient.togglePermission(permissionObj, action);\r\n    **/\r\n    PermissionClient.prototype.togglePermission = function (permission, action) {\r\n        var requestPermission = {\r\n            actions: []\r\n        };\r\n        this.utility.extend(requestPermission, permission);\r\n        requestPermission.actions = [action];\r\n        var operation;\r\n        if (!action.checked) {\r\n            operation = this.remove;\r\n        }\r\n        else {\r\n            operation = this.create;\r\n        }\r\n        return operation.call(this, requestPermission);\r\n    };\r\n    /**\r\n    * Fetches and returns and object containing all existing module permissions.\r\n    * @method\r\n    * @example permissionClient.getModulePermissions('<section-name>');\r\n    **/\r\n    PermissionClient.prototype.getModulePermissions = function (section) {\r\n        var permission = {\r\n            update: this.hasPermission(this.firstCharToLowerCase(section) + '.update'),\r\n            create: this.hasPermission(this.firstCharToLowerCase(section) + '.create'),\r\n            remove: this.hasPermission(this.firstCharToLowerCase(section) + '.delete'),\r\n            read: this.hasPermission(this.firstCharToLowerCase(section) + '.read'),\r\n            full: this.hasPermission(this.firstCharToLowerCase(section) + '.full')\r\n        };\r\n        return permission;\r\n    };\r\n    PermissionClient.prototype.resetPermissions = function () {\r\n        this.permissionHash[this.application.getApiKey()] = {};\r\n    };\r\n    /**\r\n    * Checks if current user has permissions to perform a certain action. To optimize performance this information is cached and can be reset using the resetPermissions action. Permissions cache should be reset when updated user information is set.\r\n    * @method\r\n    * @example baasicAuthorizationService.hasPermission(\"<baasic-Section>.<action>\");\r\n    **/\r\n    PermissionClient.prototype.hasPermission = function (authorization) {\r\n        var apiKey = this.application.getApiKey();\r\n        //Initialize application permissions\r\n        if (!this.permissionHash.hasOwnProperty(apiKey)) {\r\n            this.resetPermissions();\r\n        }\r\n        if (this.permissionHash[apiKey].hasOwnProperty(authorization)) {\r\n            return this.permissionHash[apiKey][authorization];\r\n        }\r\n        var userContainer = this.application.getUser();\r\n        if (userContainer === undefined) {\r\n            return;\r\n        }\r\n        var user = userContainer.user;\r\n        var hasPermission = false;\r\n        if (user.permissions) {\r\n            var tokens = authorization.split('.');\r\n            if (tokens.length > 0) {\r\n                var section = tokens[0];\r\n                var sectionPermissions = user.permissions[section];\r\n                if (sectionPermissions) {\r\n                    if (tokens.length > 1) {\r\n                        var action = tokens[1].toLowerCase();\r\n                        for (var i = 0; i < sectionPermissions.length; i++) {\r\n                            if (sectionPermissions[i].toLowerCase() === action) {\r\n                                hasPermission = true;\r\n                                break;\r\n                            }\r\n                        }\r\n                    }\r\n                    else {\r\n                        hasPermission = true;\r\n                    }\r\n                }\r\n            }\r\n        }\r\n        this.permissionHash[apiKey][authorization] = hasPermission;\r\n        return hasPermission;\r\n    };\r\n    PermissionClient.prototype.isEmpty = function (data) {\r\n        return data === undefined || data === null || data === '';\r\n    };\r\n    PermissionClient.prototype.getRoles = function (options) {\r\n        return this.apiClient.get(this.routeDefinition.getRoles(options));\r\n    };\r\n    PermissionClient.prototype.getUsers = function (options) {\r\n        return this.apiClient.get(this.routeDefinition.getUsers(options));\r\n    };\r\n    PermissionClient.prototype.firstCharToLowerCase = function (text) {\r\n        return text.replace(/^./, function (char) {\r\n            return char.toLowerCase();\r\n        });\r\n    };\r\n    return PermissionClient;\r\n}());\r\nPermissionClient = tslib_1.__decorate([\r\n    inversify_1.injectable(),\r\n    tslib_1.__param(0, inversify_1.inject(_1.TYPES.PermissionRoute)),\r\n    tslib_1.__param(1, inversify_1.inject(httpApi_1.httpTYPES.ApiClient)),\r\n    tslib_1.__param(2, inversify_1.inject(contracts_1.TYPES.IBaasicApp)),\r\n    tslib_1.__metadata(\"design:paramtypes\", [typeof (_a = typeof _1.PermissionRoute !== \"undefined\" && _1.PermissionRoute) === \"function\" && _a || Object, typeof (_b = typeof httpApi_1.ApiClient !== \"undefined\" && httpApi_1.ApiClient) === \"function\" && _b || Object, typeof (_c = typeof contracts_1.IBaasicApp !== \"undefined\" && contracts_1.IBaasicApp) === \"function\" && _c || Object])\r\n], PermissionClient);\r\nexports.PermissionClient = PermissionClient;\r\nvar _a, _b, _c;\r\n/**\r\n * @overview\r\n ***Notes:**\r\n - Refer to the [Baasic REST API](http://dev.baasic.com/api/reference/home) for detailed information about available Baasic REST API end-points.\r\n - All end-point objects are transformed by the associated route definition.\r\n*/ \r\n\n\n/***/ }),\n/* 266 */\n/***/ (function(module, exports, __webpack_require__) {\n\n\"use strict\";\n\r\nObject.defineProperty(exports, \"__esModule\", { value: true });\r\nvar tslib_1 = __webpack_require__(1);\r\n/* globals module */\r\n/**\r\n * @module loginRoute\r\n * @description Baasic Login Route Definition provides Baasic route templates which can be expanded to Baasic REST URIs. Various services can use Baasic Login Route Definition to obtain needed routes while other routes will be obtained through HAL. By convention, all route services use the same function names as their corresponding services.\r\n */\r\nvar inversify_1 = __webpack_require__(0);\r\nvar common_1 = __webpack_require__(2);\r\nvar contracts_1 = __webpack_require__(3);\r\nvar PermissionRoute = (function (_super) {\r\n    tslib_1.__extends(PermissionRoute, _super);\r\n    function PermissionRoute(appOptions) {\r\n        var _this = _super.call(this, appOptions) || this;\r\n        _this.appOptions = appOptions;\r\n        /**\r\n        * Find route with route and query parameters.\r\n        **/\r\n        _this.findRoute = 'permissions/sections/{section}/{?searchQuery,sort,embed,fields}';\r\n        /**\r\n        * Get actions route with route and query parameters.\r\n        **/\r\n        _this.getActionsRoute = 'permissions/actions/{?searchQuery,sort,embed,fields}';\r\n        /**\r\n        * Get roles route with route and query parameters.\r\n        **/\r\n        _this.getRolesRoute = 'lookups/roles/{?searchQuery,page,rpp,sort,embed,fields}';\r\n        /**\r\n        * Get users route with route and query parameters.\r\n        **/\r\n        _this.getUsersRoute = 'users/{?searchQuery,page,rpp,sort,embed,fields}';\r\n        /**\r\n        * Create route with route and query parameters.\r\n        **/\r\n        _this.createRoute = 'permissions/';\r\n        /**\r\n        * Remove route with route and query parameters.\r\n        **/\r\n        _this.removeRoute = 'permissions/sections/{section}/actions/{action}/{{operation}}/{{subject}}/';\r\n        return _this;\r\n    }\r\n    /**\r\n    * Parses find route which can be expanded with additional options. Supported items are:\r\n    * - `section` - Section abbreviation which identifies part of the application for which security privileges can be retrieved and managed.\r\n    * - `searchQuery` - A string value used to identify access policy resources using the phrase search.\r\n    * - `sort` - A string used to set the access policy property to sort the result collection by.\r\n    * @method\r\n    * @example\r\npermissionRoute.find(\r\n    'sectionName',\r\n    {searchQuery: '<search-phrase>'}\r\n);\r\n    **/\r\n    PermissionRoute.prototype.find = function (section, options) {\r\n        var opt = options || {};\r\n        return _super.prototype.baseFind.call(this, this.findRoute, this.utility.extend({ section: section }, opt));\r\n    };\r\n    /**\r\n    * Parses getActions route which can be expanded with additional options. Supported items are:\r\n    * - `searchQuery` - A string value used to identify access action resources using the phrase search.\r\n    * - `sort` - A string used to set the access action property to sort the result collection by.\r\n    * @method\r\n    * @example\r\npermissionRoute.getActions(\r\n{searchQuery: '<search-phrase>'}\r\n);\r\n    **/\r\n    PermissionRoute.prototype.getActions = function (options) {\r\n        var opt = options || {};\r\n        return _super.prototype.baseFind.call(this, this.getActionsRoute, opt);\r\n    };\r\n    /**\r\n    * Parses getRoles route which can be expanded with additional options. Supported items are:\r\n    * - `searchQuery` - A string value used to identify access policy resources using the phrase search.\r\n    * - `sort` - A string used to set the access policy property to sort the result collection by.\r\n    * - `page` - A value used to set the page number, i.e. to retrieve certain access policy subset from the storage.\r\n    * - `rpp` - A value used to limit the size of result set per page.\r\n    * @method\r\n    * @example\r\npermissionRoute.getRoles(\r\n{searchQuery: '<search-phrase>'}\r\n);\r\n    **/\r\n    PermissionRoute.prototype.getRoles = function (options) {\r\n        var opt = options || {};\r\n        return _super.prototype.baseFind.call(this, this.getRolesRoute, opt);\r\n    };\r\n    /**\r\n    * Parses getUsers route which can be expanded with additional options. Supported items are:\r\n    * - `searchQuery` - A string value used to identify access policy resources using the phrase search.\r\n    * - `sort` - A string used to set the access policy property to sort the result collection by.\r\n    * - `page` - A value used to set the page number, i.e. to retrieve certain access policy subset from the storage.\r\n    * - `rpp` - A value used to limit the size of result set per page.\r\n    * @method\r\n    * @example\r\npermissionRoute.getRoles(\r\n{searchQuery: '<search-phrase>'}\r\n);\r\n    **/\r\n    PermissionRoute.prototype.getUsers = function (options) {\r\n        var opt = options || {};\r\n        return _super.prototype.baseFind.call(this, this.getUsersRoute, opt);\r\n    };\r\n    /**\r\n    * Parses create permission route; this URI template doesn't expose any additional properties.\r\n    * @method\r\n    * @example permissionRoute.create({});\r\n    **/\r\n    PermissionRoute.prototype.create = function () {\r\n        return _super.prototype.baseCreate.call(this, this.createRoute);\r\n    };\r\n    /**\r\n     * Returns a promise that is resolved once the remove permission action has been performed. This action will remove a permission from the system, if completed successfully.\r\n     * @param data A permission object used to delete specified permission resource.\r\n     * @returns A promise that is resolved once the remove action has been performed.\r\n     * @method\r\n     * @example // Permission is a resource previously fetched using get action.\r\n                    permissionClient.remove(permission)\r\n                        .then(function (data) {\r\n                            // perform success action here\r\n                        },\r\n                         function (response, status, headers, config) {\r\n                            // perform error handling here\r\n                        });\r\n     **/\r\n    PermissionRoute.prototype.remove = function (data) {\r\n        var params = _super.prototype.deleteParams.call(this, data);\r\n        var action = data.actions[0];\r\n        var operation = '';\r\n        var subject = '';\r\n        if (data.role && data.role.length > 0) {\r\n            operation = 'Role';\r\n            subject = data.role;\r\n        }\r\n        else {\r\n            operation = 'User';\r\n            subject = data.userName;\r\n        }\r\n        var route = this.removeRoute.replace('{{operation}}', operation.toLowerCase() + 's').replace('{{subject}}', subject);\r\n        return _super.prototype.baseDelete.call(this, route, data, null, 'delete' + action.abrv + operation);\r\n    };\r\n    return PermissionRoute;\r\n}(common_1.BaseRoute));\r\nPermissionRoute = tslib_1.__decorate([\r\n    inversify_1.injectable(),\r\n    tslib_1.__param(0, inversify_1.inject(contracts_1.TYPES.IAppOptions)),\r\n    tslib_1.__metadata(\"design:paramtypes\", [typeof (_a = typeof contracts_1.IAppOptions !== \"undefined\" && contracts_1.IAppOptions) === \"function\" && _a || Object])\r\n], PermissionRoute);\r\nexports.PermissionRoute = PermissionRoute;\r\nvar _a;\r\n/**\r\n * @overview\r\n ***Notes:**\r\n - Refer to the [Baasic REST API](http://dev.baasic.com/api/reference/home) for detailed information about available Baasic REST API end-points.\r\n - [URI Template](https://github.com/Baasic/uritemplate-js) syntax enables expanding the Baasic route templates to Baasic REST URIs providing it with an object that contains URI parameters.\r\n - All end-point objects are transformed by the associated route definition.\r\n */ \r\n\n\n/***/ }),\n/* 267 */\n/***/ (function(module, exports, __webpack_require__) {\n\n\"use strict\";\n/* globals module */\r\n/**\r\n * @module registerClient\r\n * @description  Register Client provides an easy way to consume  Application Registration REST API end-points. In order to obtain needed routes `registerClient` uses `registerRoute`.\r\n */\r\n\r\nObject.defineProperty(exports, \"__esModule\", { value: true });\r\nvar tslib_1 = __webpack_require__(1);\r\nvar inversify_1 = __webpack_require__(0);\r\nvar httpApi_1 = __webpack_require__(4);\r\nvar contracts_1 = __webpack_require__(3);\r\nvar _1 = __webpack_require__(10);\r\nvar RegisterClient = (function () {\r\n    function RegisterClient(registerRoute, apiClient, tokenHandler) {\r\n        this.registerRoute = registerRoute;\r\n        this.apiClient = apiClient;\r\n        this.tokenHandler = tokenHandler;\r\n    }\r\n    Object.defineProperty(RegisterClient.prototype, \"routeDefinition\", {\r\n        /**\r\n         * Provides direct access to `registerRoute`.\r\n         * @method\r\n         * @example registerClient.routeDefinition.get();\r\n         **/\r\n        get: function () {\r\n            return this.registerRoute;\r\n        },\r\n        enumerable: true,\r\n        configurable: true\r\n    });\r\n    /**\r\n     * Returns a promise that is resolved once the register create has been performed. This action will create a new user if completed successfully. Created user is not approved immediately, instead an activation e-mail is sent to the user.\r\n     * @param data A user account object that needs to be inserted into the system.\r\n     * @method\r\n     * @example registerClient.create({\r\n                    activationUrl : '<activation-url>',\r\n                    challengeIdentifier : '<challenge-identifier>',\r\n                    challengeResponse : '<challenge-response>',\r\n                    confirmPassword : '<confirm-password>',\r\n                    email : '<email>',\r\n                    password : '<password>',\r\n                    username : '<username>'\r\n                })\r\n                .success(function (data) {\r\n                    // perform success actions here\r\n                }).error(function (data, status) {\r\n                    // perform error handling here\r\n                })\r\n                .finally (function () {});\r\n     **/\r\n    RegisterClient.prototype.create = function (data) {\r\n        return this.apiClient.post(this.routeDefinition.create(), this.routeDefinition.createParams(data));\r\n    };\r\n    /**\r\n     * Returns a promise that is resolved once the account activation action has been performed; this action activates a user account and success response returns the token resource.\r\n     * @param data Security code which uniquely identifies user account that needs to be activated.\r\n     * @returns A promise that is resolved once the account activation action has been performed.\r\n     * @method\r\n     * @example registerClient.activate({\r\n                   activationToken : '<activation-token>'\r\n               })\r\n               .then(function (data) {\r\n                   // perform success actions here\r\n               },\r\n                function (data, status) {\r\n                   // perform error handling here\r\n               })\r\n               .finally (function () {});\r\n    **/\r\n    RegisterClient.prototype.activate = function (data) {\r\n        var self = this;\r\n        var promise = this.apiClient.put(this.registerRoute.activate(data), data);\r\n        promise.then(function (data) {\r\n            var token = {\r\n                token: data.data.access_token,\r\n                expires_in: data.data.expires_in,\r\n                sliding_window: data.data.sliding_window,\r\n                tokenUrl: data.data.access_url_token,\r\n                type: data.data.token_type\r\n            };\r\n            self.tokenHandler.store(token);\r\n            return data;\r\n        });\r\n        return promise;\r\n    };\r\n    return RegisterClient;\r\n}());\r\nRegisterClient = tslib_1.__decorate([\r\n    inversify_1.injectable(),\r\n    tslib_1.__param(0, inversify_1.inject(_1.TYPES.RegisterRoute)),\r\n    tslib_1.__param(1, inversify_1.inject(httpApi_1.httpTYPES.ApiClient)),\r\n    tslib_1.__param(2, inversify_1.inject(contracts_1.TYPES.ITokenHandler)),\r\n    tslib_1.__metadata(\"design:paramtypes\", [typeof (_a = typeof _1.RegisterRoute !== \"undefined\" && _1.RegisterRoute) === \"function\" && _a || Object, typeof (_b = typeof httpApi_1.ApiClient !== \"undefined\" && httpApi_1.ApiClient) === \"function\" && _b || Object, typeof (_c = typeof contracts_1.ITokenHandler !== \"undefined\" && contracts_1.ITokenHandler) === \"function\" && _c || Object])\r\n], RegisterClient);\r\nexports.RegisterClient = RegisterClient;\r\nvar _a, _b, _c;\r\n/**\r\n * @overview\r\n ***Notes:**\r\n - Refer to the [Baasic REST API](http://dev.baasic.com/api/reference/home) for detailed information about available Baasic REST API end-points.\r\n - All end-point objects are transformed by the associated route definition.\r\n*/ \r\n\n\n/***/ }),\n/* 268 */\n/***/ (function(module, exports, __webpack_require__) {\n\n\"use strict\";\n/* globals module */\r\n/**\r\n * @module registerRoute\r\n * @description Baasic Register Route Definition provides Baasic route templates which can be expanded to Baasic REST URIs. Various services can use Baasic Register Route Service to obtain needed routes while other routes will be obtained through HAL. By convention, all route services use the same function names as their corresponding services.\r\n*/\r\n\r\nObject.defineProperty(exports, \"__esModule\", { value: true });\r\nvar tslib_1 = __webpack_require__(1);\r\nvar inversify_1 = __webpack_require__(0);\r\nvar common_1 = __webpack_require__(2);\r\nvar contracts_1 = __webpack_require__(3);\r\nvar RegisterRoute = (function (_super) {\r\n    tslib_1.__extends(RegisterRoute, _super);\r\n    function RegisterRoute(appOptions) {\r\n        var _this = _super.call(this, appOptions) || this;\r\n        _this.appOptions = appOptions;\r\n        /**\r\n        * Create route with route and query parameters.\r\n        **/\r\n        _this.createRoute = 'register';\r\n        /**\r\n        * Activate route with route and query parameters.\r\n        **/\r\n        _this.activateRoute = 'register/activate/{activationToken}/';\r\n        return _this;\r\n    }\r\n    /**\r\n     * Parses register route, this route doesn't support any additional properties.\r\n     * @method\r\n     * @example registerRoute.create();\r\n     **/\r\n    RegisterRoute.prototype.create = function () {\r\n        return _super.prototype.baseCreate.call(this, this.createRoute, {});\r\n    };\r\n    /**\r\n     * Parses activation route; route should be expanded with the `activationToken` which uniquely identifies the user account that needs to be activated.\r\n     * @method\r\n     * @param data Security code which uniquely identifies user account that needs to be activated.\r\n     * @example registerRoute.activate({activationToken: '<activation-token>'});\r\n     **/\r\n    RegisterRoute.prototype.activate = function (data) {\r\n        var params = this.modelMapper.getParams(data, undefined, 'activationToken');\r\n        return _super.prototype.baseCreate.call(this, this.activateRoute, params);\r\n    };\r\n    return RegisterRoute;\r\n}(common_1.BaseRoute));\r\nRegisterRoute = tslib_1.__decorate([\r\n    inversify_1.injectable(),\r\n    tslib_1.__param(0, inversify_1.inject(contracts_1.TYPES.IAppOptions)),\r\n    tslib_1.__metadata(\"design:paramtypes\", [typeof (_a = typeof contracts_1.IAppOptions !== \"undefined\" && contracts_1.IAppOptions) === \"function\" && _a || Object])\r\n], RegisterRoute);\r\nexports.RegisterRoute = RegisterRoute;\r\nvar _a;\r\n/**\r\n * @overview\r\n ***Notes:**\r\n - Refer to the [Baasic REST API](http://dev.baasic.com/api/reference/home) for detailed information about available Baasic REST API end-points.  - [URI Template](https://github.com/Baasic/uritemplate-js) syntax enables expanding the Baasic route templates to Baasic REST URIs providing it with an object that contains URI parameters.\r\n - All end-point objects are transformed by the associated route definition.\r\n*/ \r\n\n\n/***/ }),\n/* 269 */\n/***/ (function(module, exports, __webpack_require__) {\n\n\"use strict\";\n/* globals module */\r\n/**\r\n * @module roleClient\r\n * @description  Role Client provides an easy way to consume  Role REST API end-points. In order to obtain needed routes `roleClient` uses `roleRoute`.\r\n */\r\n\r\nObject.defineProperty(exports, \"__esModule\", { value: true });\r\nvar tslib_1 = __webpack_require__(1);\r\nvar inversify_1 = __webpack_require__(0);\r\n;\r\nvar httpApi_1 = __webpack_require__(4);\r\nvar _1 = __webpack_require__(10);\r\nvar RoleClient = (function () {\r\n    function RoleClient(roleRoute, apiClient) {\r\n        this.roleRoute = roleRoute;\r\n        this.apiClient = apiClient;\r\n    }\r\n    Object.defineProperty(RoleClient.prototype, \"routeDefinition\", {\r\n        /**\r\n         * Provides direct access to `roleRoute`.\r\n         * @method\r\n         * @example roleClient.routeDefinition.get().expand(expandObject);\r\n         **/\r\n        get: function () {\r\n            return this.roleRoute;\r\n        },\r\n        enumerable: true,\r\n        configurable: true\r\n    });\r\n    /**\r\n     * Returns a promise that is resolved once the find action has been performed. Success response returns a list of role resources matching the given criteria.\r\n     * @method\r\n     * @param options Query resource options object.\r\n     * @returns A promise that is resolved once the find action has beend performed.\r\n     * @example roleClient.find({\r\n                    pageNumber : 1,\r\n                    pageSize : 10,\r\n                    orderBy : '<field>',\r\n                    orderDirection : '<asc|desc>',\r\n                    search : '<search-phrase>'\r\n                })\r\n                .then(function (collection) {\r\n                    // perform success action here\r\n                },\r\n                 function (response, status, headers, config) {\r\n                    // perform error handling here\r\n                });\r\n     **/\r\n    RoleClient.prototype.find = function (options) {\r\n        return this.apiClient.get(this.routeDefinition.find(options));\r\n    };\r\n    /**\r\n     * Returns a promise that is resolved once the get action has been performed. Success response returns the specified role resource.\r\n     * @param id Role unique indentifer.\r\n     * @param options Query resource options object.\r\n     * @returns A promise that is resolved once the get action has been performed.\r\n     * @method\r\n     * @example roleClient.get('<role-id>')\r\n                    .then(function (data) {\r\n                        // perform success action here\r\n                    },\r\n                     function (response, status, headers, config) {\r\n                        // perform error handling here\r\n                    });\r\n     **/\r\n    RoleClient.prototype.get = function (id, options) {\r\n        return this.apiClient.get(this.roleRoute.get(id, options));\r\n    };\r\n    /**\r\n     * Returns a promise that is resolved once the create action has been performed; this action creates a role.\r\n     * @method\r\n     * @param data A role object that needs to be inserted into the system.\r\n     * @returns A promise that is resolved once the create action has beend performed.\r\n     * @example roleClient.create({\r\n                    description : '<description>',\r\n                    name : '<name>'\r\n                })\r\n                .then(function (data) {\r\n                    // perform success action here\r\n                },\r\n                 function (response, status, headers, config) {\r\n                    // perform error handling here\r\n                });\r\n     **/\r\n    RoleClient.prototype.create = function (data) {\r\n        return this.apiClient.post(this.routeDefinition.create(), this.routeDefinition.createParams(data));\r\n    };\r\n    /**\r\n     * Returns a promise that is resolved once the update role action has been performed; this action updates a role. This route uses HAL enabled objects to obtain routes and therefore it doesn't apply `roleClient` route template. Here is an example of how a route can be obtained from HAL enabled objects:\r\n     * ```\r\n     * let params = modelMapper.removeParams(role);\r\n     * let uri = params['model'].links('put').href;\r\n     * ```\r\n     * @method\r\n     * @param data A role object used to update specified role resource.\r\n     * @returns A promise that is resolved once the update role action has been performed.\r\n     * @example // role is a resource previously fetched using get action.\r\n                    role.name = '<new-name>';\r\n                    roleClient.update(role)\r\n                        .then(function (data) {\r\n                            // perform success action here\r\n                        },\r\n                         function (response, status, headers, config) {\r\n                            // perform error handling here\r\n                        });\r\n     **/\r\n    RoleClient.prototype.update = function (data) {\r\n        return this.apiClient.put(this.routeDefinition.update(data), this.routeDefinition.updateParams(data));\r\n    };\r\n    /**\r\n     * Returns a promise that is resolved once the remove role action has been performed. This action will remove a role from the system, if completed successfully. This route uses HAL enabled objects to obtain routes and therefore it doesn't apply `roleClient` route template. Here is an example of how a route can be obtained from HAL enabled objects:\r\n     * ```\r\n     * let params = modelMapper.removeParams(role);\r\n     * let uri = params['model'].links('delete').href; ```\r\n     * @param data A role object used to delete specified role resource.\r\n     * @returns A promise that is resolved once the remove action has been performed.\r\n     * @method\r\n     * @example // Role is a resource previously fetched using get action.\r\n                    roleClient.remove(role)\r\n                        .then(function (data) {\r\n                            // perform success action here\r\n                        },\r\n                         function (response, status, headers, config) {\r\n                            // perform error handling here\r\n                        });\r\n     **/\r\n    RoleClient.prototype.remove = function (data) {\r\n        return this.apiClient.delete(this.routeDefinition.delete(data));\r\n    };\r\n    return RoleClient;\r\n}());\r\nRoleClient = tslib_1.__decorate([\r\n    inversify_1.injectable(),\r\n    tslib_1.__param(0, inversify_1.inject(_1.TYPES.RoleRoute)),\r\n    tslib_1.__param(1, inversify_1.inject(httpApi_1.httpTYPES.ApiClient)),\r\n    tslib_1.__metadata(\"design:paramtypes\", [typeof (_a = typeof _1.RoleRoute !== \"undefined\" && _1.RoleRoute) === \"function\" && _a || Object, typeof (_b = typeof httpApi_1.ApiClient !== \"undefined\" && httpApi_1.ApiClient) === \"function\" && _b || Object])\r\n], RoleClient);\r\nexports.RoleClient = RoleClient;\r\nvar _a, _b;\r\n/**\r\n * @overview\r\n ***Notes:**\r\n - Refer to the [Baasic REST API](http://dev.baasic.com/api/reference/home) for detailed information about available Baasic REST API end-points.\r\n - All end-point objects are transformed by the associated route definition.\r\n*/ \r\n\n\n/***/ }),\n/* 270 */\n/***/ (function(module, exports, __webpack_require__) {\n\n\"use strict\";\n/* globals module */\r\n/**\r\n * @module roleRoute\r\n * @description Baasic Role Route Definition provides Baasic route templates which can be expanded to Baasic REST URIs. Various services can use Baasic Role Route Service to obtain needed routes while other routes will be obtained through HAL. By convention, all route services use the same function names as their corresponding services.\r\n */\r\n\r\nObject.defineProperty(exports, \"__esModule\", { value: true });\r\nvar tslib_1 = __webpack_require__(1);\r\nvar inversify_1 = __webpack_require__(0);\r\nvar common_1 = __webpack_require__(2);\r\n;\r\nvar contracts_1 = __webpack_require__(3);\r\nvar RoleRoute = (function (_super) {\r\n    tslib_1.__extends(RoleRoute, _super);\r\n    function RoleRoute(appOptions) {\r\n        var _this = _super.call(this, appOptions) || this;\r\n        _this.appOptions = appOptions;\r\n        /**\r\n        * Find route with route and query parameters.\r\n        **/\r\n        _this.findRoute = 'lookups/roles/{?searchQuery,page,rpp,sort,embed,fields}';\r\n        /**\r\n        * Get route with route and query parameters.\r\n        **/\r\n        _this.getRoute = 'lookups/roles/{id}/{?embed,fields}';\r\n        /**\r\n        * Create route with route and query parameters.\r\n        **/\r\n        _this.createRoute = 'lookups/roles';\r\n        /**\r\n        * Update route with route and query parameters.\r\n        **/\r\n        _this.updateRoute = 'lookups/roles/{id}';\r\n        /**\r\n        * Remove route with route and query parameters.\r\n        **/\r\n        _this.removeRoute = 'lookups/roles/{id}';\r\n        return _this;\r\n    }\r\n    /**\r\n     * Parses find role route which can be expanded with additional options. Supported items are:\r\n     * - `searchQuery` - A string value used to identify role resources using the phrase search.\r\n     * - `page` - A value used to set the page number, i.e. to retrieve certain role subset from the storage.\r\n     * - `rpp` - A value used to limit the size of result set per page.\r\n     * - `sort` - A string used to set the role property to sort the result collection by.\r\n     * @method\r\n     * @param options Query resource options object.\r\n     * @example roleRoute.find({searchQuery: '<search-phrase>'});\r\n     **/\r\n    RoleRoute.prototype.find = function (options) {\r\n        return _super.prototype.baseFind.call(this, this.findRoute, options);\r\n    };\r\n    /**\r\n     * Parses get role route which should be expanded with the role Id. Note that the role Id is the primary key of the role.\r\n     * @method\r\n     * @param id Role unique indentifer.\r\n     * @param options Query resource options object.\r\n     * @example roleRoute.get().expand({id: '<role-id>'});\r\n     **/\r\n    RoleRoute.prototype.get = function (id, options) {\r\n        return _super.prototype.baseGet.call(this, this.getRoute, id, options);\r\n    };\r\n    /**\r\n     * Parses create role route; this URI template does not expose any additional options.\r\n     * @method\r\n     * @example roleRoute.create();\r\n     **/\r\n    RoleRoute.prototype.create = function () {\r\n        return _super.prototype.baseCreate.call(this, this.createRoute, {});\r\n    };\r\n    /**\r\n     * Parses update role route.\r\n     * @method\r\n     * @param data A role object used to update specified role resource.\r\n     * @example roleRoute.update(data);\r\n     */\r\n    RoleRoute.prototype.update = function (data) {\r\n        return _super.prototype.baseUpdate.call(this, this.updateRoute, data);\r\n    };\r\n    /**\r\n     * Parses delete role route.\r\n     * @method\r\n     * @param data A role object used to delete specified role resource.\r\n     * @example roleRoute.delete(data);\r\n     */\r\n    RoleRoute.prototype.delete = function (data) {\r\n        return _super.prototype.baseDelete.call(this, this.removeRoute, data);\r\n    };\r\n    return RoleRoute;\r\n}(common_1.BaseRoute));\r\nRoleRoute = tslib_1.__decorate([\r\n    inversify_1.injectable(),\r\n    tslib_1.__param(0, inversify_1.inject(contracts_1.TYPES.IAppOptions)),\r\n    tslib_1.__metadata(\"design:paramtypes\", [typeof (_a = typeof contracts_1.IAppOptions !== \"undefined\" && contracts_1.IAppOptions) === \"function\" && _a || Object])\r\n], RoleRoute);\r\nexports.RoleRoute = RoleRoute;\r\nvar _a;\r\n/**\r\n * @overview\r\n ***Notes:**\r\n - Refer to the [Baasic REST API](http://dev.baasic.com/api/reference/home) for detailed information about available Baasic REST API end-points.\r\n - [URI Template](https://github.com/Baasic/uritemplate-js) syntax enables expanding the Baasic route templates to Baasic REST URIs providing it with an object that contains URI parameters.\r\n - All end-point objects are transformed by the associated route definition.\r\n*/ \r\n\n\n/***/ }),\n/* 271 */\n/***/ (function(module, exports, __webpack_require__) {\n\n\"use strict\";\n\r\nObject.defineProperty(exports, \"__esModule\", { value: true });\r\nvar tslib_1 = __webpack_require__(1);\r\nvar _1 = __webpack_require__(10);\r\nvar inversify_1 = __webpack_require__(0);\r\nvar Root = (function () {\r\n    function Root(login, loginSocial, passwordRecovery, register, role, user, permissions, lookups) {\r\n        this.login = login;\r\n        this.loginSocial = loginSocial;\r\n        this.passwordRecovery = passwordRecovery;\r\n        this.register = register;\r\n        this.role = role;\r\n        this.user = user;\r\n        this.permissions = permissions;\r\n        this.lookups = lookups;\r\n    }\r\n    return Root;\r\n}());\r\nRoot = tslib_1.__decorate([\r\n    inversify_1.injectable(),\r\n    tslib_1.__param(0, inversify_1.inject(_1.TYPES.LoginClient)),\r\n    tslib_1.__param(1, inversify_1.inject(_1.TYPES.LoginSocialClient)),\r\n    tslib_1.__param(2, inversify_1.inject(_1.TYPES.PasswordRecoveryClient)),\r\n    tslib_1.__param(3, inversify_1.inject(_1.TYPES.RegisterClient)),\r\n    tslib_1.__param(4, inversify_1.inject(_1.TYPES.RoleClient)),\r\n    tslib_1.__param(5, inversify_1.inject(_1.TYPES.UserClient)),\r\n    tslib_1.__param(6, inversify_1.inject(_1.TYPES.PermissionClient)),\r\n    tslib_1.__param(7, inversify_1.inject(_1.TYPES.LookupClient)),\r\n    tslib_1.__metadata(\"design:paramtypes\", [typeof (_a = typeof _1.LoginClient !== \"undefined\" && _1.LoginClient) === \"function\" && _a || Object, typeof (_b = typeof _1.LoginSocialClient !== \"undefined\" && _1.LoginSocialClient) === \"function\" && _b || Object, typeof (_c = typeof _1.PasswordRecoveryClient !== \"undefined\" && _1.PasswordRecoveryClient) === \"function\" && _c || Object, typeof (_d = typeof _1.RegisterClient !== \"undefined\" && _1.RegisterClient) === \"function\" && _d || Object, typeof (_e = typeof _1.RoleClient !== \"undefined\" && _1.RoleClient) === \"function\" && _e || Object, typeof (_f = typeof _1.UserClient !== \"undefined\" && _1.UserClient) === \"function\" && _f || Object, typeof (_g = typeof _1.PermissionClient !== \"undefined\" && _1.PermissionClient) === \"function\" && _g || Object, typeof (_h = typeof _1.LookupClient !== \"undefined\" && _1.LookupClient) === \"function\" && _h || Object])\r\n], Root);\r\nexports.Root = Root;\r\nvar _a, _b, _c, _d, _e, _f, _g, _h;\r\n\n\n/***/ }),\n/* 272 */\n/***/ (function(module, exports, __webpack_require__) {\n\n\"use strict\";\n/* globals module */\r\n/**\r\n * @module userClient\r\n * @description  User Client provides an easy way to consume  User REST API end-points. In order to obtain needed routes `userClient` uses `userRoute`.\r\n */\r\n\r\nObject.defineProperty(exports, \"__esModule\", { value: true });\r\nvar tslib_1 = __webpack_require__(1);\r\nvar inversify_1 = __webpack_require__(0);\r\n;\r\nvar httpApi_1 = __webpack_require__(4);\r\nvar _1 = __webpack_require__(10);\r\nvar UserClient = (function () {\r\n    function UserClient(userRoute, userSocialLoginClient, apiClient) {\r\n        this.userRoute = userRoute;\r\n        this.userSocialLoginClient = userSocialLoginClient;\r\n        this.apiClient = apiClient;\r\n    }\r\n    Object.defineProperty(UserClient.prototype, \"routeDefinition\", {\r\n        /**\r\n         * Provides direct access to `userRoute`.\r\n         * @method\r\n         * @example userClient.routeDefinition.get();\r\n         **/\r\n        get: function () {\r\n            return this.userRoute;\r\n        },\r\n        enumerable: true,\r\n        configurable: true\r\n    });\r\n    Object.defineProperty(UserClient.prototype, \"socialLogin\", {\r\n        get: function () {\r\n            return this.userSocialLoginClient;\r\n        },\r\n        enumerable: true,\r\n        configurable: true\r\n    });\r\n    /**\r\n     * Returns a promise that is resolved once the exists action has been performed. This action checks if user exists in the application.\r\n     * @method\r\n     * @param username A username which uniquely identifies an application user.\r\n     * @example userClient.exists('<username>')\r\n                    .then(function (data) {\r\n                        // perform success action here\r\n                    },\r\n                     function (response, status, headers, config) {\r\n                        // perform error handling here\r\n                    });\r\n     **/\r\n    UserClient.prototype.exists = function (username, options) {\r\n        return this.apiClient.get(this.userRoute.exists(username, options));\r\n    };\r\n    /**\r\n     * Returns a promise that is resolved once the find action has been performed. Success response returns a list of user resources matching the given criteria.\r\n     * @method\r\n     * @param options Query resource options object.\r\n     * @example userClient.find({\r\n                    pageNumber : 1,\r\n                    pageSize : 10,\r\n                    orderBy : '<field>',\r\n                    orderDirection : '<asc|desc>',\r\n                    search : '<search-phrase>'\r\n                })\r\n                .then(function (collection) {\r\n                    // perform success action here\r\n                },\r\n                 function (response, status, headers, config) {\r\n                    // perform error handling here\r\n                });\r\n     **/\r\n    UserClient.prototype.find = function (options) {\r\n        return this.apiClient.get(this.routeDefinition.find(options));\r\n    };\r\n    /**\r\n     * Returns a promise that is resolved once the get action has been performed. Success response returns the specified user resource.\r\n     * @method\r\n     * @param id A username or id which uniquely identifies an application user whose account information needs to be retrieved.\r\n     * @param options Query resources options.\r\n     * @returns A promise that is resolved once the get action has been performed.\r\n     * @example userClient.get({\r\n                    username : '<username>',\r\n                    embed : '<embedded-resource>'\r\n                })\r\n                .then(function (data) {\r\n                    // perform success action here\r\n                },\r\n                 function (response, status, headers, config) {\r\n                    // perform error handling here\r\n                });\r\n     **/\r\n    UserClient.prototype.get = function (id, options) {\r\n        return this.apiClient.get(this.userRoute.get(id, options));\r\n    };\r\n    /**\r\n     * Returns a promise that is resolved once the create user action has been performed; this action creates a new user.\r\n     * @method\r\n     * @param data An user object that needs to be inserted into the system.\r\n     * @returns A promise that is resolved once the create user action has been performed.\r\n     * @example userClient.create({\r\n                    confirmPassword : '<password>',\r\n                    email : '<email>',\r\n                    password : '<password>',\r\n                    sendEmailNotification : true,\r\n                    username : '<username>',\r\n                    roles: ['<role-name>'],\r\n                    additionalProperty: '<additional-property>'\r\n                })\r\n                .then(function (data) {\r\n                    // perform success action here\r\n                },\r\n                 function (response, status, headers, config) {\r\n                    // perform error handling here\r\n                });\r\n     **/\r\n    UserClient.prototype.create = function (data) {\r\n        return this.apiClient.post(this.routeDefinition.create(), this.routeDefinition.createParams(data));\r\n    };\r\n    /**\r\n     * Returns a promise that is resolved once the update user action has been performed; this action updates a user. This route uses HAL enabled objects to obtain routes and therefore it doesn't apply `userRoute` route template. Here is an example of how a route can be obtained from HAL enabled objects:\r\n     * ```\r\n     * let params = modelMapper.removeParams(user);\r\n     * let uri = params['model'].links('put').href;\r\n     * ```\r\n     * @param data A user object used to update specified user resource.\r\n     * @returns A promise that is resolved once the update user action has been performed.\r\n     * @method\r\n     * @example // user is a resource previously fetched using get action.\r\n                    user.roles = ['<role-name>', '<new-role-name>'];\r\n                    user.email = '<new-email>';\r\n                    userClient.update(user)\r\n                        .then(function (data) {\r\n                            // perform success action here\r\n                        },\r\n                         function (response, status, headers, config) {\r\n                            // perform error handling here\r\n                        });\r\n     **/\r\n    UserClient.prototype.update = function (data) {\r\n        return this.apiClient.put(this.routeDefinition.update(data), this.routeDefinition.updateParams(data));\r\n    };\r\n    /**\r\n     * Returns a promise that is resolved once the remove user action has been performed. This action will remove a user from the system if successfully completed. This route uses HAL enabled objects to obtain routes and therefore it doesn't apply `userRoute` route template. Here is an example of how a route can be obtained from HAL enabled objects:\r\n     * ```\r\n     * let params = modelMapper.removeParams(user);\r\n     * let uri = params['model'].links('delete').href;\r\n     * ```\r\n     * @method\r\n     * @param data  A user object used to delete specified user resource.\r\n     * @returns A promise that is resolved once the remove user action has been performed.\r\n     * @example // user is a resource previously fetched using get action.\r\n                    userClient.remove(user)\r\n                        .then(function (data) {\r\n                            // perform success action here\r\n                        },\r\n                         function (response, status, headers, config) {\r\n                            // perform error handling here\r\n                        });\r\n     **/\r\n    UserClient.prototype.remove = function (data) {\r\n        return this.apiClient.delete(this.routeDefinition.delete(data));\r\n    };\r\n    /**\r\n     * Returns a promise that is resolved once the unlock user action has been performed. This action will unlock the user resource which was previously locked either manually or automatically by the system. This route uses HAL enabled objects to obtain routes and therefore it doesn't apply `userRoute` route template. Here is an example of how a route can be obtained from HAL enabled objects:\r\n     * ```\r\n     * let params = modelMapper.removeParams(user);\r\n     * let uri = params['model'].links('unlock').href;\r\n     * ```\r\n     * @method\r\n     * @param data A user object used to unlock specified user resource.\r\n     * @returns A promise that is resolved once the unlock user action has been performed.\r\n     * @example //  user is a resource previously fetched using get action.\r\n                        userClient.unlock(user)\r\n                            .then(function (data) {\r\n                                // perform success action here\r\n                            },\r\n                             function (response, status, headers, config) {\r\n                                // perform error handling here\r\n                            });\r\n     **/\r\n    UserClient.prototype.unlock = function (data) {\r\n        return this.apiClient.put(this.userRoute.unlock(data), data);\r\n    };\r\n    /**\r\n     * Returns a promise that is resolved once the lock user action has been performed. This action will lock the user resource out of the system. This route uses HAL enabled objects to obtain routes and therefore it doesn't apply `userRoute` route template. Here is an example of how a route can be obtained from HAL enabled objects:\r\n     * ```\r\n     * let params = modelMapper.removeParams(user);\r\n     * let uri = params['model'].links('lock').href;\r\n     * ```\r\n     * @method\r\n     * @param data A user object used to lock specified user resource.\r\n     * @returns A promise that is resolved once the lock user action has been performed.\r\n     * @example // user is a resource previously fetched using get action.\r\n                    userClient.lock(user)\r\n                        .then(function (data) {\r\n                            // perform success action here\r\n                        },\r\n                         function (response, status, headers, config) {\r\n                            // perform error handling here\r\n                        });\r\n     **/\r\n    UserClient.prototype.lock = function (data) {\r\n        return this.apiClient.put(this.userRoute.lock(data), data);\r\n    };\r\n    /**\r\n     * Returns a promise that is resolved once the approve user action has been performed. This action will mark the user resource as 'approved' in the system. This route uses HAL enabled objects to obtain routes and therefore it doesn't apply `userRoute` route template. Here is an example of how a route can be obtained from HAL enabled objects:\r\n     * ```\r\n     * let params = modelMapper.removeParams(user);\r\n     * let uri = params['model'].links('approve').href;\r\n     * ```\r\n     * @method\r\n     * @param data A user object used to approve specified user resource.\r\n     * @returns A promise that is resolved once the approve user action has been performed.\r\n     * @example // user is a resource previously fetched using get action.\r\n                    userClient.approve(user)\r\n                        .then(function (data) {\r\n                            // perform success action here\r\n                        })\r\n                         function (response, status, headers, config) {\r\n                            // perform error handling here\r\n                        });\r\n     **/\r\n    UserClient.prototype.approve = function (data) {\r\n        return this.apiClient.put(this.userRoute.approve(data), data);\r\n    };\r\n    /**\r\n     * Returns a promise that is resolved once the disapprove user action has been performed. This action will mark the user resource as 'not approved' in the system. This route uses HAL enabled objects to obtain routes and therefore it doesn't apply `userRoute` route template. Here is an example of how a route can be obtained from HAL enabled objects:\r\n     * ```\r\n     * let params = modelMapper.removeParams(user);\r\n     * let uri = params['model'].links('disapprove').href;\r\n     * ```\r\n     * @method\r\n     * @example // user is a resource previously fetched using get action.\r\n                    userClient.disapprove(user).then(function (data) {\r\n                        // perform success action here\r\n                    },\r\n                     function (response, status, headers, config) {\r\n                        // perform error handling here\r\n                    });\r\n     **/\r\n    UserClient.prototype.disapprove = function (data) {\r\n        return this.apiClient.put(this.userRoute.disapprove(data), data);\r\n    };\r\n    /**\r\n     * Returns a promise that is resolved once the changePassword action has been performed. This action will update user's password selection.\r\n     * @method\r\n     * @param username A username or id which uniquely identifies user resource.\r\n     * @param data A new password object used to update specified user password resource.\r\n     * @returns A promise that is resolved once the changedPassword action has been performed.\r\n     * @example userClient.changePassword('<username>', {\r\n                    newPassword : '<new-password>',\r\n                    sendMailNotification : false\r\n                })\r\n                .then(function () {\r\n                    // perform success action here\r\n                },\r\n                 function (data, status, headers, config) {\r\n                    // perform error handling here\r\n                })\r\n                .finally (function () {});\r\n     **/\r\n    UserClient.prototype.changePassword = function (username, data) {\r\n        return this.apiClient.put(this.userRoute.changePassword(username), data);\r\n    };\r\n    return UserClient;\r\n}());\r\nUserClient = tslib_1.__decorate([\r\n    inversify_1.injectable(),\r\n    tslib_1.__param(0, inversify_1.inject(_1.TYPES.UserRoute)),\r\n    tslib_1.__param(1, inversify_1.inject(_1.TYPES.UserSocialLoginClient)),\r\n    tslib_1.__param(2, inversify_1.inject(httpApi_1.httpTYPES.ApiClient)),\r\n    tslib_1.__metadata(\"design:paramtypes\", [typeof (_a = typeof _1.UserRoute !== \"undefined\" && _1.UserRoute) === \"function\" && _a || Object, typeof (_b = typeof _1.UserSocialLoginClient !== \"undefined\" && _1.UserSocialLoginClient) === \"function\" && _b || Object, typeof (_c = typeof httpApi_1.ApiClient !== \"undefined\" && httpApi_1.ApiClient) === \"function\" && _c || Object])\r\n], UserClient);\r\nexports.UserClient = UserClient;\r\nvar _a, _b, _c;\r\n/**\r\n * @overview\r\n ***Notes:**\r\n - Refer to the [Baasic REST API](http://dev.baasic.com/api/reference/home) for detailed information about available Baasic REST API end-points.\r\n - All end-point objects are transformed by the associated route definition.\r\n */ \r\n\n\n/***/ }),\n/* 273 */\n/***/ (function(module, exports, __webpack_require__) {\n\n\"use strict\";\n/* globals module */\r\n/**\r\n * @module userRoute\r\n * @description Baasic User Route Definition provides Baasic route templates which can be expanded to Baasic REST URIs. Various services can use Baasic User Route Service to obtain needed routes while other routes will be obtained through HAL. By convention, all route services use the same function names as their corresponding services.\r\n */\r\n\r\nObject.defineProperty(exports, \"__esModule\", { value: true });\r\nvar tslib_1 = __webpack_require__(1);\r\nvar inversify_1 = __webpack_require__(0);\r\nvar common_1 = __webpack_require__(2);\r\n;\r\nvar _1 = __webpack_require__(10);\r\nvar contracts_1 = __webpack_require__(3);\r\nvar UserRoute = (function (_super) {\r\n    tslib_1.__extends(UserRoute, _super);\r\n    function UserRoute(appOptions, userSocialLoginRoute) {\r\n        var _this = _super.call(this, appOptions) || this;\r\n        _this.appOptions = appOptions;\r\n        _this.userSocialLoginRoute = userSocialLoginRoute;\r\n        /**\r\n        * Find route with route and query parameters.\r\n        **/\r\n        _this.findRoute = 'users/{?searchQuery,page,rpp,sort,embed,fields}';\r\n        /**\r\n        * Get route with route and query parameters.\r\n        **/\r\n        _this.getRoute = 'users/{username}/{?embed,fields}';\r\n        /**\r\n        * Create route with route and query parameters.\r\n        **/\r\n        _this.createRoute = 'users';\r\n        /**\r\n        * Update route with route and query parameters.\r\n        **/\r\n        _this.updateRoute = 'users/{id}';\r\n        /**\r\n        * Delete route with route and query parameters.\r\n        **/\r\n        _this.deleteRoute = 'users/{id}';\r\n        /**\r\n        * Exists route with route and query parameters.\r\n        **/\r\n        _this.existsRoute = 'users/{username}/exists/';\r\n        /**\r\n        * Change password route with route and query parameters.\r\n        **/\r\n        _this.changePasswordRoute = 'users/{username}/change-password';\r\n        /**\r\n        * Unlock route with route and query parameters.\r\n        **/\r\n        _this.unlockRoute = 'users/{id}/unlock';\r\n        /**\r\n        * Lock route with route and query parameters.\r\n        **/\r\n        _this.lockRoute = 'users/{id}/lock';\r\n        /**\r\n        * Approve route with route and query parameters.\r\n        **/\r\n        _this.approveRoute = 'users/{id}/approve';\r\n        /**\r\n        * Disapprove route with route and query parameters.\r\n        **/\r\n        _this.disapproveRoute = 'users/{id}/disapprove';\r\n        return _this;\r\n    }\r\n    Object.defineProperty(UserRoute.prototype, \"socialLogin\", {\r\n        get: function () {\r\n            return this.userSocialLoginRoute;\r\n        },\r\n        enumerable: true,\r\n        configurable: true\r\n    });\r\n    /**\r\n     * Parses find user route which can be expanded with additional options. Supported items are:\r\n     * - `searchQuery` - A string referencing user properties using the phrase or BQL (Baasic Query Language) search.\r\n     * - `page` - A value used to set the page number, i.e. to retrieve certain user subset from the storage.\r\n     * - `rpp` - A value used to limit the size of result set per page.\r\n     * - `sort` - A string used to set the user property to sort the result collection by.\r\n     * - `embed` - Comma separated list of resources to be contained within the current representation.\r\n     * @method\r\n     * @example userRoute.find({searchQuery: '<search-phrase>'});\r\n     **/\r\n    UserRoute.prototype.find = function (options) {\r\n        return _super.prototype.baseFind.call(this, this.findRoute, options);\r\n    };\r\n    /**\r\n     * Parses get user route which must be expanded with the username of the previously created user resource in the system. Additional expand supported items are:\r\n     * - `embed` - Comma separated list of resources to be contained within the current representation.\r\n     * @method\r\n     * @example userRoute.get({username: '<username>'})\r\n     **/\r\n    UserRoute.prototype.get = function (id, options) {\r\n        return _super.prototype.baseGet.call(this, this.getRoute, id, options, 'username');\r\n    };\r\n    /**\r\n     * Parses create user route, this URI template does not expose any additional options.\r\n     * @method\r\n     * @example userRoute.create();\r\n     **/\r\n    UserRoute.prototype.create = function () {\r\n        return _super.prototype.baseCreate.call(this, this.createRoute, {});\r\n    };\r\n    UserRoute.prototype.update = function (data) {\r\n        return _super.prototype.baseUpdate.call(this, this.updateRoute, data);\r\n    };\r\n    UserRoute.prototype.delete = function (data) {\r\n        return _super.prototype.baseDelete.call(this, this.deleteRoute, data);\r\n    };\r\n    /**\r\n     * Parses user exists route; URI template should be expanded with the username whose availability you'd like to check.\r\n     * @method\r\n     * @param username A username which uniquely identifies an application user.\r\n     * @example userRoute.exists({username: '<username>'});\r\n     **/\r\n    UserRoute.prototype.exists = function (username, options) {\r\n        return _super.prototype.baseGet.call(this, this.existsRoute, username, options, 'username');\r\n    };\r\n    /**\r\n     * Parses change password route, URI template should be expanded with the username of the user resource whose password should be updated.\r\n     * @method\r\n     * @param username A username or id which uniquely identifies user resource.\r\n     * @example userRoute.changePassword({username: '<username>'});\r\n     **/\r\n    UserRoute.prototype.changePassword = function (username) {\r\n        return _super.prototype.baseUpdate.call(this, this.changePasswordRoute, { username: username });\r\n    };\r\n    UserRoute.prototype.unlock = function (data) {\r\n        return _super.prototype.baseUpdate.call(this, this.unlockRoute, data, null, 'unlock');\r\n    };\r\n    UserRoute.prototype.lock = function (data) {\r\n        return _super.prototype.baseUpdate.call(this, 'users/{id}/lock', data, null, 'lock');\r\n    };\r\n    UserRoute.prototype.approve = function (data) {\r\n        return _super.prototype.baseUpdate.call(this, this.approveRoute, data, null, 'approve');\r\n    };\r\n    UserRoute.prototype.disapprove = function (data) {\r\n        return _super.prototype.baseUpdate.call(this, this.disapproveRoute, data, null, 'disapprove');\r\n    };\r\n    return UserRoute;\r\n}(common_1.BaseRoute));\r\nUserRoute = tslib_1.__decorate([\r\n    inversify_1.injectable(),\r\n    tslib_1.__param(0, inversify_1.inject(contracts_1.TYPES.IAppOptions)),\r\n    tslib_1.__param(1, inversify_1.inject(_1.TYPES.UserSocialLoginRoute)),\r\n    tslib_1.__metadata(\"design:paramtypes\", [typeof (_a = typeof contracts_1.IAppOptions !== \"undefined\" && contracts_1.IAppOptions) === \"function\" && _a || Object, typeof (_b = typeof _1.UserSocialLoginRoute !== \"undefined\" && _1.UserSocialLoginRoute) === \"function\" && _b || Object])\r\n], UserRoute);\r\nexports.UserRoute = UserRoute;\r\nvar _a, _b;\r\n/**\r\n * @overview\r\n ***Notes:**\r\n - Refer to the [Baasic REST API](http://dev.baasic.com/api/reference/home) for detailed information about available Baasic REST API end-points.\r\n - [URI Template](https://github.com/Baasic/uritemplate-js) syntax enables expanding the Baasic route templates to Baasic REST URIs providing it with an object that contains URI parameters.\r\n - All end-point objects are transformed by the associated route definition.\r\n */ \r\n\n\n/***/ }),\n/* 274 */\n/***/ (function(module, exports, __webpack_require__) {\n\n\"use strict\";\n/* globals module */\r\n/**\r\n * @module userSocialLoginClient\r\n * @description  User Social Login Client provides an easy way to consume  User REST API end-points. In order to obtain needed routes `userSocialLoginClient` uses `userSocialLoginRoute`.\r\n */\r\n\r\nObject.defineProperty(exports, \"__esModule\", { value: true });\r\nvar tslib_1 = __webpack_require__(1);\r\nvar inversify_1 = __webpack_require__(0);\r\n;\r\nvar httpApi_1 = __webpack_require__(4);\r\nvar _1 = __webpack_require__(10);\r\nvar UserSocialLoginClient = (function () {\r\n    function UserSocialLoginClient(userSocialLoginRoute, apiClient) {\r\n        this.userSocialLoginRoute = userSocialLoginRoute;\r\n        this.apiClient = apiClient;\r\n    }\r\n    Object.defineProperty(UserSocialLoginClient.prototype, \"routeDefinition\", {\r\n        /**\r\n          * Provides direct access to `userSocialLoginRoute`.\r\n          * @method\r\n          * @example userSocialLoginClient.routeDefinition.get().expand(expandObject);\r\n          **/\r\n        get: function () {\r\n            return this.userSocialLoginRoute;\r\n        },\r\n        enumerable: true,\r\n        configurable: true\r\n    });\r\n    /**\r\n     * Returns a promise that is resolved once the get action has been performed. Success response returns a list user resource connected social login providers.\r\n     * @param username A username or id which uniquely identifies user resource whose social login connections need to be retrieved.\r\n     * @returns A promise that is resolved once the get action has been performed.\r\n     * @method\r\n     * @example userSocialLoginClient.get('<username>')\r\n                    .then(function (collection) {\r\n                        // perform success action here\r\n                    },\r\n                     function (response, status, headers, config) {\r\n                        // perform error handling here\r\n                    });\r\n     **/\r\n    UserSocialLoginClient.prototype.get = function (username) {\r\n        return this.apiClient.get(this.routeDefinition.get(username));\r\n    };\r\n    /**\r\n     * Returns a promise that is resolved once the remove action has been performed. This action removes the user resource social login connection from the specified provider.\r\n     * @param username A username or id which uniquely identifies user resource whose social login connection needs to be removed.\r\n     * @param provider A value which uniquely identifies provider from which the user resource needs to be disconnected.\r\n     * @returns A promise that is resolved once the remove action has been performed.\r\n     * @method\r\n     * @example userSocialLoginClient.remove('<username>', '<provider>')\r\n                    .then(function (collection) {\r\n                        // perform success action here\r\n                    },\r\n                     function (response, status, headers, config) {\r\n                        // perform error handling here\r\n                    });\r\n     **/\r\n    UserSocialLoginClient.prototype.remove = function (username, provider) {\r\n        return this.apiClient.delete(this.userSocialLoginRoute.remove(username, provider));\r\n    };\r\n    return UserSocialLoginClient;\r\n}());\r\nUserSocialLoginClient = tslib_1.__decorate([\r\n    inversify_1.injectable(),\r\n    tslib_1.__param(0, inversify_1.inject(_1.TYPES.UserSocialLoginRoute)),\r\n    tslib_1.__param(1, inversify_1.inject(httpApi_1.httpTYPES.ApiClient)),\r\n    tslib_1.__metadata(\"design:paramtypes\", [typeof (_a = typeof _1.UserSocialLoginRoute !== \"undefined\" && _1.UserSocialLoginRoute) === \"function\" && _a || Object, typeof (_b = typeof httpApi_1.ApiClient !== \"undefined\" && httpApi_1.ApiClient) === \"function\" && _b || Object])\r\n], UserSocialLoginClient);\r\nexports.UserSocialLoginClient = UserSocialLoginClient;\r\nvar _a, _b;\r\n/**\r\n * @overview\r\n ***Notes:**\r\n - Refer to the [Baasic REST API](http://dev.baasic.com/api/reference/home) for detailed information about available Baasic REST API end-points.\r\n - All end-point objects are transformed by the associated route definition.\r\n */ \r\n\n\n/***/ }),\n/* 275 */\n/***/ (function(module, exports, __webpack_require__) {\n\n\"use strict\";\n/* globals module */\r\n/**\r\n * @module userSocialLoginRoute\r\n * @description Baasic User Social Login Route Definition provides Baasic route templates which can be expanded to Baasic REST URIs. Various services can use Baasic User Route Service to obtain needed routes while other routes will be obtained through HAL. By convention, all route services use the same function names as their corresponding services.\r\n */\r\n\r\nObject.defineProperty(exports, \"__esModule\", { value: true });\r\nvar tslib_1 = __webpack_require__(1);\r\nvar inversify_1 = __webpack_require__(0);\r\nvar common_1 = __webpack_require__(2);\r\nvar contracts_1 = __webpack_require__(3);\r\nvar UserSocialLoginRoute = (function (_super) {\r\n    tslib_1.__extends(UserSocialLoginRoute, _super);\r\n    function UserSocialLoginRoute(appOptions) {\r\n        var _this = _super.call(this, appOptions) || this;\r\n        _this.appOptions = appOptions;\r\n        /**\r\n        * Get route with route and query parameters.\r\n        **/\r\n        _this.getRoute = 'users/{username}/social-login';\r\n        /**\r\n        * Remove route with route and query parameters.\r\n        **/\r\n        _this.removeRoute = 'users/{username}/social-login/{provider}';\r\n        return _this;\r\n    }\r\n    /**\r\n     * Parses get social login route, URI template should be expanded with the username of the user resource whose social login connections should be retrieved.\r\n     * @method\r\n     * @param username A username or id which uniquely identifies user resource whose social login connections need to be retrieved.\r\n     * @example userSocialLoginRoute.get('<username>');\r\n     **/\r\n    UserSocialLoginRoute.prototype.get = function (username) {\r\n        return _super.prototype.baseGet.call(this, this.getRoute, username, { username: username });\r\n    };\r\n    /**\r\n     * Parses remove social login route which can be expanded with additional items. Supported items are:\r\n     * - `username` - A username which uniquely identifies an application user whose social login connection needs to be removed.\r\n     * - `provider` - Provider from which to disconnect the login resource from.\r\n     * @method\r\n     * @param username A username which uniquely identifies an application user whose social login connection needs to be removed.\r\n     * @param provider Provider from which to disconnect the login resource from.\r\n     * @example userSocialLoginRoute.remove('<username>', '<provider>');\r\n     **/\r\n    UserSocialLoginRoute.prototype.remove = function (username, provider) {\r\n        var params;\r\n        if (provider.hasOwnProperty('abrv')) {\r\n            params = {\r\n                provider: provider.abrv\r\n            };\r\n        }\r\n        else if (provider.hasOwnProperty('id')) {\r\n            params = {\r\n                provider: provider.id\r\n            };\r\n        }\r\n        else {\r\n            params = this.utility.extend({}, provider);\r\n        }\r\n        params.username = username;\r\n        return _super.prototype.baseFind.call(this, this.removeRoute, params);\r\n    };\r\n    return UserSocialLoginRoute;\r\n}(common_1.BaseRoute));\r\nUserSocialLoginRoute = tslib_1.__decorate([\r\n    inversify_1.injectable(),\r\n    tslib_1.__param(0, inversify_1.inject(contracts_1.TYPES.IAppOptions)),\r\n    tslib_1.__metadata(\"design:paramtypes\", [typeof (_a = typeof contracts_1.IAppOptions !== \"undefined\" && contracts_1.IAppOptions) === \"function\" && _a || Object])\r\n], UserSocialLoginRoute);\r\nexports.UserSocialLoginRoute = UserSocialLoginRoute;\r\nvar _a;\r\n/**\r\n * @overview\r\n ***Notes:**\r\n - Refer to the [Baasic REST API](http://dev.baasic.com/api/reference/home) for detailed information about available Baasic REST API end-points.\r\n - [URI Template](https://github.com/Baasic/uritemplate-js) syntax enables expanding the Baasic route templates to Baasic REST URIs providing it with an object that contains URI parameters.\r\n - All end-point objects are transformed by the associated route definition.\r\n */ \r\n\n\n/***/ }),\n/* 276 */\n/***/ (function(module, exports, __webpack_require__) {\n\n\"use strict\";\n\r\nObject.defineProperty(exports, \"__esModule\", { value: true });\r\nvar inversify_1 = __webpack_require__(0);\r\nvar _1 = __webpack_require__(11);\r\nvar TYPES = {\r\n    MeteringACLClient: Symbol(\"MeteringACLClient\"),\r\n    MeteringACLRoute: Symbol(\"MeteringACLRoute\"),\r\n    MeteringBatchClient: Symbol(\"MeteringBatchClient\"),\r\n    MeteringBatchRoute: Symbol(\"MeteringBatchRoute\"),\r\n    MeteringCategoryBatchClient: Symbol(\"MeteringCategoryBatchClient\"),\r\n    MeteringCategoryBatchRoute: Symbol(\"MeteringCategoryBatchRoute\"),\r\n    MeteringCategoryRoute: Symbol(\"MeteringCategoryRoute\"),\r\n    MeteringCategoryClient: Symbol(\"MeteringCategoryClient\"),\r\n    MeteringRoute: Symbol(\"MeteringRoute\"),\r\n    MeteringClient: Symbol(\"MeteringClient\"),\r\n    MeteringSettingsRoute: Symbol(\"MeteringSettingsRoute\"),\r\n    MeteringSettingsClient: Symbol(\"MeteringSettingsClient\"),\r\n    MeteringStatisticsClient: Symbol(\"MeteringStatisticsClient\"),\r\n    MeteringStatisticsRoute: Symbol(\"MeteringStatisticsRoute\")\r\n};\r\nexports.TYPES = TYPES;\r\nvar diModule = new inversify_1.ContainerModule(function (bind) {\r\n    bind(TYPES.MeteringCategoryBatchRoute).to(_1.MeteringCategoryBatchRoute);\r\n    bind(TYPES.MeteringCategoryBatchClient).to(_1.MeteringCategoryBatchClient);\r\n    bind(TYPES.MeteringCategoryRoute).to(_1.MeteringCategoryRoute);\r\n    bind(TYPES.MeteringCategoryClient).to(_1.MeteringCategoryClient);\r\n    bind(TYPES.MeteringBatchRoute).to(_1.MeteringBatchRoute);\r\n    bind(TYPES.MeteringBatchClient).to(_1.MeteringBatchClient);\r\n    bind(TYPES.MeteringStatisticsRoute).to(_1.MeteringStatisticsRoute);\r\n    bind(TYPES.MeteringStatisticsClient).to(_1.MeteringStatisticsClient);\r\n    bind(TYPES.MeteringACLRoute).to(_1.MeteringACLRoute);\r\n    bind(TYPES.MeteringACLClient).to(_1.MeteringACLClient);\r\n    bind(TYPES.MeteringRoute).to(_1.MeteringRoute);\r\n    bind(TYPES.MeteringClient).to(_1.MeteringClient);\r\n    bind(TYPES.MeteringSettingsRoute).to(_1.MeteringSettingsRoute);\r\n    bind(TYPES.MeteringSettingsClient).to(_1.MeteringSettingsClient);\r\n});\r\nexports.diModule = diModule;\r\n\n\n/***/ }),\n/* 277 */\n/***/ (function(module, exports, __webpack_require__) {\n\n\"use strict\";\n/* globals module */\r\n/**\r\n * @module meteringACLClient\r\n * @description  Metering ACL Client provides an easy way to consume  Metering REST API end-points. In order to obtain a needed routes `meteringACLClient` uses `meteringACLRoute`.\r\n */\r\n\r\nObject.defineProperty(exports, \"__esModule\", { value: true });\r\nvar tslib_1 = __webpack_require__(1);\r\nvar inversify_1 = __webpack_require__(0);\r\n;\r\nvar httpApi_1 = __webpack_require__(4);\r\nvar _1 = __webpack_require__(11);\r\nvar MeteringACLClient = (function () {\r\n    function MeteringACLClient(meteringACLRoute, apiClient) {\r\n        this.meteringACLRoute = meteringACLRoute;\r\n        this.apiClient = apiClient;\r\n    }\r\n    Object.defineProperty(MeteringACLClient.prototype, \"routeDefinition\", {\r\n        get: function () {\r\n            return this.meteringACLRoute;\r\n        },\r\n        enumerable: true,\r\n        configurable: true\r\n    });\r\n    /**\r\n     * Returns a promise that is resolved once the get action has been performed. Success response returns a list of ACL policies established for the specified metering resource.\r\n     * @method\r\n     * @param options Query resource options object.\r\n     * @returns A promise that is resolved once the get action has been performed.\r\n     * @example meteringClient.get({id: '<id>'})\r\n                   .then(function (data) {\r\n                       // perform success action here\r\n                   },\r\n                    function (response, status, headers, config) {\r\n                        // perform error handling here\r\n                   });\r\n    **/\r\n    MeteringACLClient.prototype.get = function (options) {\r\n        return this.apiClient.get(this.routeDefinition.get(options));\r\n    };\r\n    /**\r\n     * Returns a promise that is resolved once the update acl action has been performed, this action creates new ACL policy for the specified metering resource.\r\n     * @method\r\n     * @param options ACL options object.\r\n     * @example let options = {id : '<id>'};\r\n                let aclObj =  {  actionId: '<action-id'>,  roleId: '<roleId>',  userId: '<userId>' };\r\n                options[baasicConstants.modelPropertyName] = aclObj;\r\n                meteringACLClient.update(options)\r\n                    .then(function (data) {\r\n                        // perform success action here\r\n                    },\r\n                      function (response, status, headers, config) {\r\n                          // perform error handling here\r\n                    });\r\n     **/\r\n    MeteringACLClient.prototype.update = function (options) {\r\n        return this.apiClient.put(this.routeDefinition.update(options), this.routeDefinition.updateParams(options));\r\n    };\r\n    /**\r\n     * Returns a promise that is resolved once the removeByUser action has been performed. This action deletes ACL policy assigned to the specified user and metering resource.\r\n     * @method\r\n     * @param id User metering data id which uniquely identifies user metering data resource whose security privileges need to be retrieved and updated.\r\n     * @param action Action abbreviation which identifies ACL policy assigned to the specified user and user metering data resource.\r\n     *               Supported Values:\r\n     *               \"Create\"\r\n     *               \"Delete\"\r\n     *               \"Read\"\r\n     *               \"Update\"\r\n     * @param user A value that uniquely identifies user for which ACL policy needs to be removed.\r\n     * @param data ACL Policy object used to delete specified item in the system.\r\n     * @returns A promise that is resolved once the removeByUser action has been performed.\r\n     * @example meteringACLClient.removeByUser('<id>', '<access-action>', '<username>')\r\n                    .then(function (data) {\r\n                        // perform success action here\r\n                    },\r\n                     function (response, status, headers, config) {\r\n                         // perform error handling here\r\n                    });\r\n     **/\r\n    MeteringACLClient.prototype.removeByUser = function (id, action, user, data) {\r\n        return this.apiClient.delete(this.meteringACLRoute.deleteByUser(id, action, user, data));\r\n    };\r\n    /**\r\n     * Returns a promise that is resolved once the removeByRole action has been performed. This action deletes ACL policy assigned to the specified role and metering resource.\r\n     * @method\r\n     * @param id User metering data id which uniquely identifies user metering data resource whose security privileges need to be retrieved and updated.\r\n     * @param action Action abbreviation which identifies ACL policy assigned to the specified user and user metering data resource.\r\n     *               Supported Values:\r\n     *               \"Create\"\r\n     *               \"Delete\"\r\n     *               \"Read\"\r\n     *               \"Update\"\r\n     * @param role A value that uniquely identifies role for which ACL policy needs to be removed.\r\n     * @param data ACL Policy object used to delete specified item in the system.\r\n     * @returns A promise that is resolved once the removeByRole action has been performed.\r\n     * @example meteringACLClient.removeByRole('<id>', '<access-action>', '<role-name>')\r\n                    .then(function (data) {\r\n                        // perform success action here\r\n                    },\r\n                     function (response, status, headers, config) {\r\n                         // perform error handling here\r\n                    });\r\n     **/\r\n    MeteringACLClient.prototype.removeByRole = function (id, action, role, data) {\r\n        return this.apiClient.delete(this.meteringACLRoute.deleteByRole(id, action, role, data));\r\n    };\r\n    return MeteringACLClient;\r\n}());\r\nMeteringACLClient = tslib_1.__decorate([\r\n    inversify_1.injectable(),\r\n    tslib_1.__param(0, inversify_1.inject(_1.TYPES.MeteringACLRoute)),\r\n    tslib_1.__param(1, inversify_1.inject(httpApi_1.httpTYPES.ApiClient)),\r\n    tslib_1.__metadata(\"design:paramtypes\", [typeof (_a = typeof _1.MeteringACLRoute !== \"undefined\" && _1.MeteringACLRoute) === \"function\" && _a || Object, typeof (_b = typeof httpApi_1.ApiClient !== \"undefined\" && httpApi_1.ApiClient) === \"function\" && _b || Object])\r\n], MeteringACLClient);\r\nexports.MeteringACLClient = MeteringACLClient;\r\nvar _a, _b;\r\n/**\r\n * @copyright (c) 2017 Mono Ltd\r\n * @license MIT\r\n * @author Mono Ltd\r\n * @overview\r\n ***Notes:**\r\n - Refer to the [Baasic REST API](http://dev.baasic.com/api/reference/home) for detailed information about available Baasic REST API end-points.\r\n - All end-point objects are transformed by the associated route service.\r\n */ \r\n\n\n/***/ }),\n/* 278 */\n/***/ (function(module, exports, __webpack_require__) {\n\n\"use strict\";\n/* globals module */\r\n/**\r\n * @module meteringACLRoute\r\n * @description Baasic Metering ACL Route Definition provides Baasic route templates which can be expanded to Baasic REST URIs. Various services can use Baasic Metering ACL Route Definition to obtain a needed routes while other routes will be obtained through HAL. By convention, all route services  use the same function names as their corresponding services.\r\n */\r\n\r\nObject.defineProperty(exports, \"__esModule\", { value: true });\r\nvar tslib_1 = __webpack_require__(1);\r\nvar inversify_1 = __webpack_require__(0);\r\nvar common_1 = __webpack_require__(2);\r\n;\r\nvar contracts_1 = __webpack_require__(3);\r\nvar MeteringACLRoute = (function (_super) {\r\n    tslib_1.__extends(MeteringACLRoute, _super);\r\n    function MeteringACLRoute(appOptions) {\r\n        var _this = _super.call(this, appOptions) || this;\r\n        _this.appOptions = appOptions;\r\n        _this.getRoute = 'metering/data/{id}/acl/{?fields}';\r\n        _this.updateRoute = 'metering/data/{id}/acl/{?fields}';\r\n        _this.deleteByUserRoute = 'metering/data/{id}/acl/actions/{accessAction}/users/{user}/';\r\n        _this.deleteByRoleRoute = 'metering/data/{id}/acl/actions/{accessAction}/roles/{role}/';\r\n        return _this;\r\n    }\r\n    /**\r\n     * Parses get metering acl route; this URI template should be expanded with the Id of the metering.\r\n     * @method\r\n     * @param options ACL options object.\r\n     * @example meteringACLRoute.get({id: '<id>'});\r\n     **/\r\n    MeteringACLRoute.prototype.get = function (options) {\r\n        var params = this.utility.extend({}, options);\r\n        return _super.prototype.baseCreate.call(this, this.getRoute, params);\r\n    };\r\n    /**\r\n     * Parses update metering acl route; this URI template should be expanded with the Id of the metering.\r\n     * @method\r\n     * @param options ACL options object.\r\n     * @example meteringACLRoute.update({id: '<id>'});\r\n     **/\r\n    MeteringACLRoute.prototype.update = function (options) {\r\n        var params = this.utility.extend({}, options);\r\n        return _super.prototype.baseCreate.call(this, this.updateRoute, params);\r\n    };\r\n    /**\r\n     * Parses deleteByUser metering acl route which can be expanded with additional options. Supported items are:\r\n     * - `id` - Id of the metering.\r\n     * - `accessAction` - Action abbreviation which identifies ACL policy assigned to the specified user and metering resource.\r\n     * - `user` - A value which uniquely identifies user for which ACL policy needs to be removed.\r\n     * @method\r\n     * @param id User metering data id which uniquely identifies user metering data resource whose security privileges need to be retrieved and updated.\r\n     * @param action Action abbreviation which identifies ACL policy assigned to the specified user and user metering data resource.\r\n     *               Supported Values:\r\n     *               \"Create\"\r\n     *               \"Delete\"\r\n     *               \"Read\"\r\n     *               \"Update\"\r\n     * @param user A value that uniquely identifies user for which ACL policy needs to be removed.\r\n     * @param data ACL Policy object used to delete specified item in the system.\r\n     * @example meteringACLRoute.deleteByUser({\r\n                    id: '<id>',\r\n                    accessAction: '<access-action>',\r\n                    user: '<username>'\r\n                });\r\n     **/\r\n    MeteringACLRoute.prototype.deleteByUser = function (id, action, user, data) {\r\n        var params = this.modelMapper.removeParams(data);\r\n        params.id = id;\r\n        params.user = user;\r\n        params.accessAction = action;\r\n        return _super.prototype.baseCreate.call(this, this.deleteByUserRoute, params);\r\n    };\r\n    /**\r\n     * Parses deleteByUser metering acl route which can be expanded with additional options. Supported items are:\r\n     * - `id` - Id of the metering.\r\n     * - `accessAction` - Action abbreviation which identifies ACL policy assigned to the specified role and metering resource.\r\n     * - `role` - A value which uniquely identifies role for which ACL policy needs to be removed.\r\n     * @method\r\n     * @param id User metering data id which uniquely identifies user metering data resource whose security privileges need to be retrieved and updated.\r\n     * @param action Action abbreviation which identifies ACL policy assigned to the specified user and user metering data resource.\r\n     *               Supported Values:\r\n     *               \"Create\"\r\n     *               \"Delete\"\r\n     *               \"Read\"\r\n     *               \"Update\"\r\n     * @param role A value that uniquely identifies role for which ACL policy needs to be removed.\r\n     * @param data ACL Policy object used to delete specified item in the system.\r\n     * @example meteringACLRoute.deleteByRole({ id: '<id>', accessAction: '<access-action>', role: '<role-name>'});\r\n     **/\r\n    MeteringACLRoute.prototype.deleteByRole = function (id, action, role, data) {\r\n        var params = this.modelMapper.removeParams(data);\r\n        params.id = id;\r\n        params.role = role;\r\n        params.accessAction = action;\r\n        return _super.prototype.baseCreate.call(this, this.deleteByRoleRoute, params);\r\n    };\r\n    MeteringACLRoute.prototype.updateParams = function (options) {\r\n        var params = this.utility.extend({}, options);\r\n        return params[this.modelMapper.modelPropertyName];\r\n    };\r\n    return MeteringACLRoute;\r\n}(common_1.BaseRoute));\r\nMeteringACLRoute = tslib_1.__decorate([\r\n    inversify_1.injectable(),\r\n    tslib_1.__param(0, inversify_1.inject(contracts_1.TYPES.IAppOptions)),\r\n    tslib_1.__metadata(\"design:paramtypes\", [typeof (_a = typeof contracts_1.IAppOptions !== \"undefined\" && contracts_1.IAppOptions) === \"function\" && _a || Object])\r\n], MeteringACLRoute);\r\nexports.MeteringACLRoute = MeteringACLRoute;\r\nvar _a;\r\n/**\r\n * @copyright (c) 2017 Mono Ltd\r\n * @license MIT\r\n * @author Mono Ltd\r\n * @overview\r\n ***Notes:**\r\n  - Refer to the [Baasic REST API](http://dev.baasic.com/api/reference/home) for detailed information about available Baasic REST API end-points.\r\n  - [URI Template](https://github.com/Baasic/uritemplate-js) syntax enables expanding the Baasic route templates to Baasic REST URIs providing it with an object that contains URI parameters.\r\n  - All end-point objects are transformed by the associated route service.\r\n */ \r\n\n\n/***/ }),\n/* 279 */\n/***/ (function(module, exports, __webpack_require__) {\n\n\"use strict\";\n/* globals module */\r\n/**\r\n * @module meteringBatchClient\r\n * @description  Metering Batch Client provides an easy way to consume  Metering REST API end-points. In order to obtain a needed routes `meteringBatchClient` uses `meteringBatchRoute`.\r\n */\r\n\r\nObject.defineProperty(exports, \"__esModule\", { value: true });\r\nvar tslib_1 = __webpack_require__(1);\r\nvar inversify_1 = __webpack_require__(0);\r\n;\r\nvar httpApi_1 = __webpack_require__(4);\r\nvar _1 = __webpack_require__(11);\r\nvar MeteringBatchClient = (function () {\r\n    function MeteringBatchClient(meteringBatchRoute, apiClient) {\r\n        this.meteringBatchRoute = meteringBatchRoute;\r\n        this.apiClient = apiClient;\r\n    }\r\n    Object.defineProperty(MeteringBatchClient.prototype, \"routeDefinition\", {\r\n        get: function () {\r\n            return this.meteringBatchRoute;\r\n        },\r\n        enumerable: true,\r\n        configurable: true\r\n    });\r\n    /**\r\n     * Returns a promise that is resolved once the create data action has been performed; this action creates new data resources.\r\n     * @method\r\n     * @param data An MeteringData objects that need to be inserted into the system.\r\n     * @returns A promise that is resolved once the create data action has been performed.\r\n     * @example  meteringBatchClient.create([{\r\n                    applicationId : '<applicationId>',\r\n                    category : '<category>',\r\n                    name: '<name>',\r\n                    value: '<value>'\r\n                }])\r\n                .then(function (data) {\r\n                    // perform success action here\r\n                },\r\n                 function (response, status, headers, config) {\r\n                     // perform error handling here\r\n                });\r\n     **/\r\n    MeteringBatchClient.prototype.create = function (data) {\r\n        return this.apiClient.post(this.routeDefinition.create(), this.routeDefinition.createParams(data));\r\n    };\r\n    /**\r\n     * Returns a promise that is resolved once the update data action has been performed; this action updates specified data resources.\r\n     * @method\r\n     * @param data An MeteringData objects used to update specified MeteringData resources.\r\n     * @returns A promise that is resolved once the update data action has been performed.\r\n     * @example   meteringBatchClient.update(companies)\r\n                        .then(function (data) {\r\n                            // perform success action here\r\n                        },\r\n                         function (response, status, headers, config) {\r\n                             // perform error handling here\r\n                        });\r\n     **/\r\n    MeteringBatchClient.prototype.update = function (data) {\r\n        return this.apiClient.put(this.routeDefinition.update(), this.routeDefinition.updateParams(data));\r\n    };\r\n    /**\r\n     * Returns a promise that is resolved once the remove action has been performed. This action will remove data resources from the system if successfully completed.\r\n     * @method\r\n     * @param ids MeteringData ids which uniquely identify MeteringData resources that need to be deleted.\r\n     * @returns A promise that is resolved once the remove action has been performed.\r\n     * @example meteringClient.remove(companyIds)\r\n                    .then(function (data) {\r\n                        // perform success action here\r\n                    },\r\n                     function (response, status, headers, config) {\r\n                         // perform error handling here\r\n                    });\r\n     **/\r\n    MeteringBatchClient.prototype.remove = function (ids) {\r\n        return this.apiClient.delete(this.meteringBatchRoute.delete(), undefined, ids);\r\n    };\r\n    return MeteringBatchClient;\r\n}());\r\nMeteringBatchClient = tslib_1.__decorate([\r\n    inversify_1.injectable(),\r\n    tslib_1.__param(0, inversify_1.inject(_1.TYPES.MeteringBatchRoute)),\r\n    tslib_1.__param(1, inversify_1.inject(httpApi_1.httpTYPES.ApiClient)),\r\n    tslib_1.__metadata(\"design:paramtypes\", [typeof (_a = typeof _1.MeteringBatchRoute !== \"undefined\" && _1.MeteringBatchRoute) === \"function\" && _a || Object, typeof (_b = typeof httpApi_1.ApiClient !== \"undefined\" && httpApi_1.ApiClient) === \"function\" && _b || Object])\r\n], MeteringBatchClient);\r\nexports.MeteringBatchClient = MeteringBatchClient;\r\nvar _a, _b;\r\n/**\r\n * @copyright (c) 2017 Mono Ltd\r\n * @license MIT\r\n * @author Mono Ltd\r\n * @overview\r\n ***Notes:**\r\n - Refer to the [Baasic REST API](http://dev.baasic.com/api/reference/home) for detailed information about available Baasic REST API end-points.\r\n - All end-point objects are transformed by the associated route service.\r\n */ \r\n\n\n/***/ }),\n/* 280 */\n/***/ (function(module, exports, __webpack_require__) {\n\n\"use strict\";\n/* globals module */\r\n/**\r\n * @module meteringBatchRoute\r\n * @description Baasic Metering Batch Route Definition provides Baasic route templates which can be expanded to Baasic REST URIs. Various services can use Baasic Metering Route Definition Service to obtain a needed routes while other routes will be obtained through HAL. By convention, all route services  use the same function names as their corresponding services.\r\n */\r\n\r\nObject.defineProperty(exports, \"__esModule\", { value: true });\r\nvar tslib_1 = __webpack_require__(1);\r\nvar inversify_1 = __webpack_require__(0);\r\nvar common_1 = __webpack_require__(2);\r\n;\r\nvar contracts_1 = __webpack_require__(3);\r\nvar MeteringBatchRoute = (function (_super) {\r\n    tslib_1.__extends(MeteringBatchRoute, _super);\r\n    function MeteringBatchRoute(appOptions) {\r\n        var _this = _super.call(this, appOptions) || this;\r\n        _this.appOptions = appOptions;\r\n        _this.createRoute = 'metering/data/batch';\r\n        _this.updateRoute = 'metering/data/batch';\r\n        _this.deleteRoute = 'metering/data/batch';\r\n        return _this;\r\n    }\r\n    /**\r\n     * Parses create route; this URI template does not expose any additional options.\r\n     * @method\r\n     * @example meteringBatchRoute.create();\r\n     **/\r\n    MeteringBatchRoute.prototype.create = function () {\r\n        return _super.prototype.baseCreate.call(this, this.createRoute, {});\r\n    };\r\n    /**\r\n     * Parses update route; this URI template does not expose any additional options.\r\n     * @method\r\n     * @example meteringBatchRoute.update();\r\n     **/\r\n    MeteringBatchRoute.prototype.update = function () {\r\n        return _super.prototype.baseUpdate.call(this, this.updateRoute, {});\r\n    };\r\n    /**\r\n     * Parses remove route; this URI template does not expose any additional options.\r\n     * @method\r\n     * @example meteringBatchRoute.delete();\r\n     **/\r\n    MeteringBatchRoute.prototype.delete = function () {\r\n        return _super.prototype.baseDelete.call(this, this.deleteRoute, {});\r\n    };\r\n    return MeteringBatchRoute;\r\n}(common_1.BaseRoute));\r\nMeteringBatchRoute = tslib_1.__decorate([\r\n    inversify_1.injectable(),\r\n    tslib_1.__param(0, inversify_1.inject(contracts_1.TYPES.IAppOptions)),\r\n    tslib_1.__metadata(\"design:paramtypes\", [typeof (_a = typeof contracts_1.IAppOptions !== \"undefined\" && contracts_1.IAppOptions) === \"function\" && _a || Object])\r\n], MeteringBatchRoute);\r\nexports.MeteringBatchRoute = MeteringBatchRoute;\r\nvar _a;\r\n/**\r\n * @copyright (c) 2017 Mono Ltd\r\n * @license MIT\r\n * @author Mono Ltd\r\n * @overview\r\n ***Notes:**\r\n - Refer to the [Baasic REST API](http://dev.baasic.com/api/reference/home) for detailed information about available Baasic REST API end-points.\r\n - [URI Template](https://github.com/Baasic/uritemplate-js) syntax enables expanding the Baasic route templates to Baasic REST URIs providing it with an object that contains URI parameters.\r\n - All end-point objects are transformed by the associated route service.\r\n */ \r\n\n\n/***/ }),\n/* 281 */\n/***/ (function(module, exports, __webpack_require__) {\n\n\"use strict\";\n/* globals module */\r\n/**\r\n * @module meteringCategoryBatchClient\r\n * @description  Metering Category Batch Client provides an easy way to consume  Metering REST API end-points. In order to obtain a needed routes `meteringCategoryBatchClient` uses `meteringCategoryBatchRoute`.\r\n */\r\n\r\nObject.defineProperty(exports, \"__esModule\", { value: true });\r\nvar tslib_1 = __webpack_require__(1);\r\nvar inversify_1 = __webpack_require__(0);\r\nvar httpApi_1 = __webpack_require__(4);\r\nvar _1 = __webpack_require__(11);\r\nvar MeteringCategoryBatchClient = (function () {\r\n    function MeteringCategoryBatchClient(meteringCategoryBatchRoute, apiClient) {\r\n        this.meteringCategoryBatchRoute = meteringCategoryBatchRoute;\r\n        this.apiClient = apiClient;\r\n    }\r\n    Object.defineProperty(MeteringCategoryBatchClient.prototype, \"routeDefinition\", {\r\n        get: function () {\r\n            return this.meteringCategoryBatchRoute;\r\n        },\r\n        enumerable: true,\r\n        configurable: true\r\n    });\r\n    /**\r\n     * Returns a promise that is resolved once the create category action has been performed; this action creates new category resources.\r\n     * @method\r\n     * @param data An MeteringCategory objects that need to be inserted into the system.\r\n     * @returns A promise that is resolved once the create category action has been performed.\r\n     * @example  meteringCategoryBatchClient.create([{\r\n                    aggregateFunction : '<aggregateFunction>',\r\n                    category : '<name>',\r\n                     defaultSamplingRate: '<defaultSamplingRate>',\r\n                     slug: '<slug>',\r\n                     unitFactor: '<unitFactor>',\r\n                     unitName: '<unitName>'\r\n                }])\r\n                .then(function (data) {\r\n                    // perform success action here\r\n                },\r\n                 function (response, status, headers, config) {\r\n                     // perform error handling here\r\n                });\r\n     **/\r\n    MeteringCategoryBatchClient.prototype.create = function (data) {\r\n        return this.apiClient.post(this.routeDefinition.create(), this.routeDefinition.createParams(data));\r\n    };\r\n    /**\r\n     * Returns a promise that is resolved once the update category action has been performed; this action updates specified category resources.\r\n     * @method\r\n     * @param data An MeteringCategory objects used to update specified MeteringCategory resources.\r\n     * @returns A promise that is resolved once the update category action has been performed.\r\n     * @example   meteringCategoryClient.update(companies)\r\n                    .then(function (data) {\r\n                        // perform success action here\r\n                    },\r\n                     function (response, status, headers, config) {\r\n                         // perform error handling here\r\n                    });\r\n     **/\r\n    MeteringCategoryBatchClient.prototype.update = function (data) {\r\n        return this.apiClient.put(this.routeDefinition.update(), this.routeDefinition.updateParams(data));\r\n    };\r\n    /**\r\n     * Returns a promise that is resolved once the remove action has been performed. This action will remove category resources from the system if successfully completed.\r\n     * @method\r\n     * @param ids MeteringCategory ids which uniquely identify MeteringCategory resources that need to be deleted.\r\n     * @returns A promise that is resolved once the remove action has been performed.\r\n     * @example companyClient.remove(companyIds)\r\n                    .then(function (data) {\r\n                        // perform success action here\r\n                    },\r\n                     function (response, status, headers, config) {\r\n                         // perform error handling here\r\n                    });\r\n     **/\r\n    MeteringCategoryBatchClient.prototype.delete = function (ids) {\r\n        return this.apiClient.delete(this.routeDefinition.delete(), this.routeDefinition.deleteParams(ids));\r\n    };\r\n    return MeteringCategoryBatchClient;\r\n}());\r\nMeteringCategoryBatchClient = tslib_1.__decorate([\r\n    inversify_1.injectable(),\r\n    tslib_1.__param(0, inversify_1.inject(_1.TYPES.MeteringCategoryBatchRoute)),\r\n    tslib_1.__param(1, inversify_1.inject(httpApi_1.httpTYPES.ApiClient)),\r\n    tslib_1.__metadata(\"design:paramtypes\", [typeof (_a = typeof _1.MeteringCategoryBatchRoute !== \"undefined\" && _1.MeteringCategoryBatchRoute) === \"function\" && _a || Object, typeof (_b = typeof httpApi_1.ApiClient !== \"undefined\" && httpApi_1.ApiClient) === \"function\" && _b || Object])\r\n], MeteringCategoryBatchClient);\r\nexports.MeteringCategoryBatchClient = MeteringCategoryBatchClient;\r\nvar _a, _b;\r\n/**\r\n * @copyright (c) 2017 Mono Ltd\r\n * @license MIT\r\n * @author Mono Ltd\r\n * @overview\r\n ***Notes:**\r\n - Refer to the [Baasic REST API](http://dev.baasic.com/api/reference/home) for detailed information about available Baasic REST API end-points.\r\n - All end-point objects are transformed by the associated route service.\r\n */ \r\n\n\n/***/ }),\n/* 282 */\n/***/ (function(module, exports, __webpack_require__) {\n\n\"use strict\";\n/* globals module */\r\n/**\r\n * @module meteringCategoryBatchRoute  * @description Baasic Metering Category Batch Route Definition provides Baasic route templates which can be expanded to Baasic REST URIs. Various services can use Baasic Metering Category Batch Route Definition to obtain a needed routes while other routes will be obtained through HAL. By convention, all route services  use the same function names as their corresponding services.\r\n */\r\n\r\nObject.defineProperty(exports, \"__esModule\", { value: true });\r\nvar tslib_1 = __webpack_require__(1);\r\nvar inversify_1 = __webpack_require__(0);\r\nvar common_1 = __webpack_require__(2);\r\n;\r\nvar contracts_1 = __webpack_require__(3);\r\nvar MeteringCategoryBatchRoute = (function (_super) {\r\n    tslib_1.__extends(MeteringCategoryBatchRoute, _super);\r\n    function MeteringCategoryBatchRoute(appOptions) {\r\n        var _this = _super.call(this, appOptions) || this;\r\n        _this.appOptions = appOptions;\r\n        _this.createRoute = 'metering/categories/batch';\r\n        _this.updateRoute = 'metering/categories/batch';\r\n        _this.deleteRoute = 'metering/categories/batch';\r\n        return _this;\r\n    }\r\n    /**\r\n     * Parses create route; this URI template does not expose any additional options.\r\n     * @method\r\n     * @example meteringCategoryBatchRoute.create();\r\n     **/\r\n    MeteringCategoryBatchRoute.prototype.create = function () {\r\n        return _super.prototype.baseCreate.call(this, this.createRoute, {});\r\n    };\r\n    /**\r\n     * Parses create route; this URI template does not expose any additional options.\r\n     * @method\r\n     * @example meteringCategoryBatchRoute.update();\r\n     **/\r\n    MeteringCategoryBatchRoute.prototype.update = function () {\r\n        return _super.prototype.baseUpdate.call(this, this.updateRoute, {});\r\n    };\r\n    /**\r\n     * Parses remove route; this URI template does not expose any additional options.\r\n     * @method\r\n     * @example meteringCategoryBatchRoute.delete();\r\n     **/\r\n    MeteringCategoryBatchRoute.prototype.delete = function () {\r\n        return _super.prototype.baseDelete.call(this, this.deleteRoute, {});\r\n    };\r\n    return MeteringCategoryBatchRoute;\r\n}(common_1.BaseRoute));\r\nMeteringCategoryBatchRoute = tslib_1.__decorate([\r\n    inversify_1.injectable(),\r\n    tslib_1.__param(0, inversify_1.inject(contracts_1.TYPES.IAppOptions)),\r\n    tslib_1.__metadata(\"design:paramtypes\", [typeof (_a = typeof contracts_1.IAppOptions !== \"undefined\" && contracts_1.IAppOptions) === \"function\" && _a || Object])\r\n], MeteringCategoryBatchRoute);\r\nexports.MeteringCategoryBatchRoute = MeteringCategoryBatchRoute;\r\nvar _a;\r\n/**\r\n * @copyright (c) 2017 Mono Ltd\r\n * @license MIT\r\n * @author Mono Ltd\r\n * @overview\r\n ***Notes:**\r\n - Refer to the [REST API documentation](http://github.com/Baasic/baasic-rest-api/wiki) for detailed information about available Baasic REST API end-points.\r\n - [URI Template](https://github.com/Baasic/uritemplate-js) syntax enables expanding the Baasic route templates to Baasic REST URIs providing it with an object that contains URI parameters.\r\n - All end-point objects are transformed by the associated route service.\r\n */ \r\n\n\n/***/ }),\n/* 283 */\n/***/ (function(module, exports, __webpack_require__) {\n\n\"use strict\";\n/* globals module */\r\n/**\r\n * @module meteringCategoryClient\r\n * @description  Metering Category Client provides an easy way to consume  Metering REST API end-points. In order to obtain a needed routes `meteringCategoryClient` uses `meteringCategoryRoute`.\r\n */\r\n\r\nObject.defineProperty(exports, \"__esModule\", { value: true });\r\nvar tslib_1 = __webpack_require__(1);\r\nvar inversify_1 = __webpack_require__(0);\r\n;\r\nvar httpApi_1 = __webpack_require__(4);\r\nvar _1 = __webpack_require__(11);\r\nvar MeteringCategoryClient = (function () {\r\n    function MeteringCategoryClient(meteringCategoryRoute, apiClient, meteringCategoryBatchClient) {\r\n        this.meteringCategoryRoute = meteringCategoryRoute;\r\n        this.apiClient = apiClient;\r\n        this.meteringCategoryBatchClient = meteringCategoryBatchClient;\r\n    }\r\n    Object.defineProperty(MeteringCategoryClient.prototype, \"routeDefinition\", {\r\n        get: function () {\r\n            return this.meteringCategoryRoute;\r\n        },\r\n        enumerable: true,\r\n        configurable: true\r\n    });\r\n    Object.defineProperty(MeteringCategoryClient.prototype, \"batch\", {\r\n        get: function () {\r\n            return this.meteringCategoryBatchClient;\r\n        },\r\n        enumerable: true,\r\n        configurable: true\r\n    });\r\n    /**\r\n     * Returns a promise that is resolved once the find action has been performed. Success response returns a list of metering resources matching the given criteria.\r\n     * @method\r\n     * @param options Query resource options object.\r\n     * @returns A promise that is resolved once the find action has been performed.\r\n     * @example meteringCategoryClient.find({\r\n                    pageNumber : 1,\r\n                    pageSize : 10,\r\n                    orderBy : '<field>',\r\n                    orderDirection : '<asc|desc>',\r\n                    search : '<search-phrase>'\r\n                })\r\n                .then(function (collection) {\r\n                    // perform success action here\r\n                },\r\n                 function (response, status, headers, config) {\r\n                     // perform error handling here\r\n                });\r\n     **/\r\n    MeteringCategoryClient.prototype.find = function (options) {\r\n        return this.apiClient.get(this.routeDefinition.find(options));\r\n    };\r\n    /**\r\n     * Returns a promise that is resolved once the get action has been performed. Success response returns the metering resource.\r\n     * @method\r\n     * @param id MeteringCategory id which uniquely identifies MeteringCategory resource that needs to be retrieved.\r\n     * @param options Query resource options object.\r\n     * @returns A promise that is resolved once the get action has been performed.\r\n     * @example meteringCategoryClient.get(id)\r\n                    .then(function (data) {\r\n                        // perform success action here\r\n                    },\r\n                     function (response, status, headers, config) {\r\n                         // perform error handling here\r\n                    });\r\n     **/\r\n    MeteringCategoryClient.prototype.get = function (id, options) {\r\n        return this.apiClient.get(this.meteringCategoryRoute.get(id, options));\r\n    };\r\n    /**\r\n     * Returns a promise that is resolved once the create metering action has been performed; this action creates a new metering resource.\r\n     * @method\r\n     * @param data An MeteringCategory object that needs to be inserted into the system.\r\n     * @returns A promise that is resolved once the create metering action has been performed.\r\n     * @example meteringCategoryClient.create({\r\n                    category : '<category-name>',\r\n                    unitName : 'Kb',\r\n                    unitFactor: 1,\r\n                    defaultSamplingRate: '<value>', - Defaults: Minute = 1,Hour = 2,Day = 3,Week = 4,Month = 5,Year = 6\r\n                    aggregateFunction: '<value>' - Defaults: None = 0,Count = 1,Avg = 2,Max = 3,Min = 4,Sum = 5\r\n                })\r\n                .then(function (data) {\r\n                    // perform success action here\r\n                },\r\n                 function (response, status, headers, config) {\r\n                     // perform error handling here\r\n                });\r\n     **/\r\n    MeteringCategoryClient.prototype.create = function (data) {\r\n        return this.apiClient.post(this.routeDefinition.create(), this.routeDefinition.createParams(data));\r\n    };\r\n    /**\r\n     * Returns a promise that is resolved once the update metering action has been performed; this action updates a metering resource. This route uses HAL enabled objects to obtain routes and therefore it doesn't apply `meteringCategoryRoute` route template. Here is an example of how a route can be obtained from HAL enabled objects:\r\n     * ```\r\n     * let params = modelMapepr.updateParams(meteringCategory);\r\n     * let uri = params['model'].links('put').href;\r\n     * ```\r\n     * @method\r\n     * @param data An meteringCategory object used to update specified MeteringCategory resource.\r\n     * @returns A promise that is resolved once the remove action has been performed.\r\n     * @example // meteringCategory is a resource previously fetched using get action.\r\n                    meteringCategory.defaultSamplingRate = 'Day';\r\n                    meteringCategoryClient.update(meteringCategory)\r\n                        .then(function (data) {\r\n                            // perform success action here\r\n                        },\r\n                         function (response, status, headers, config) {\r\n                             // perform error handling here\r\n                        });\r\n     **/\r\n    MeteringCategoryClient.prototype.update = function (data) {\r\n        return this.apiClient.put(this.routeDefinition.update(data), this.routeDefinition.updateParams(data));\r\n    };\r\n    /**\r\n     * Returns a promise that is resolved once the remove action has been performed. This action will remove a metering resource from the system if successfully completed. This route uses HAL enabled objects to obtain routes and therefore it doesn't apply `meteringCategoryRoute` route template. Here is an example of how a route can be obtained from HAL enabled objects:\r\n     * ```\r\n     * let params = modelMapper.removeParams(meteringCategory);\r\n     * let uri = params['model'].links('delete').href;\r\n     * ```\r\n     * @method\r\n     * @param data An meteringCategory object used to update specified MeteringCategory resource.\r\n     * @returns A promise that is resolved once the remove action has been performed.\r\n     * @example // meteringCategory is a resource previously fetched using get action.\r\n                    meteringCategoryClient.remove(meteringCategory)\r\n                        .then(function (data) {\r\n                            // perform success action here\r\n                        },\r\n                         function (response, status, headers, config) {\r\n                             // perform error handling here\r\n                        });\r\n     **/\r\n    MeteringCategoryClient.prototype.remove = function (data) {\r\n        return this.apiClient.delete(this.routeDefinition.delete(data));\r\n    };\r\n    return MeteringCategoryClient;\r\n}());\r\nMeteringCategoryClient = tslib_1.__decorate([\r\n    inversify_1.injectable(),\r\n    tslib_1.__param(0, inversify_1.inject(_1.TYPES.MeteringCategoryRoute)),\r\n    tslib_1.__param(1, inversify_1.inject(httpApi_1.httpTYPES.ApiClient)),\r\n    tslib_1.__param(2, inversify_1.inject(_1.TYPES.MeteringCategoryBatchClient)),\r\n    tslib_1.__metadata(\"design:paramtypes\", [typeof (_a = typeof _1.MeteringCategoryRoute !== \"undefined\" && _1.MeteringCategoryRoute) === \"function\" && _a || Object, typeof (_b = typeof httpApi_1.ApiClient !== \"undefined\" && httpApi_1.ApiClient) === \"function\" && _b || Object, typeof (_c = typeof _1.MeteringCategoryBatchClient !== \"undefined\" && _1.MeteringCategoryBatchClient) === \"function\" && _c || Object])\r\n], MeteringCategoryClient);\r\nexports.MeteringCategoryClient = MeteringCategoryClient;\r\nvar _a, _b, _c;\r\n/**\r\n * @copyright (c) 2017 Mono Ltd\r\n * @license MIT\r\n * @author Mono Ltd\r\n * @overview\r\n ***Notes:**\r\n - Refer to the [Baasic REST API](http://dev.baasic.com/api/reference/home) for detailed information about available Baasic REST API end-points.\r\n - All end-point objects are transformed by the associated route service.\r\n */ \r\n\n\n/***/ }),\n/* 284 */\n/***/ (function(module, exports, __webpack_require__) {\n\n\"use strict\";\n/* globals module */\r\n/**\r\n * @module meteringCategoryRoute  * @description Baasic Metering Category Route Definition provides Baasic route templates which can be expanded to Baasic REST URIs. Various services can use Baasic Metering Category Route Definition to obtain a needed routes while other routes will be obtained through HAL. By convention, all route services  use the same function names as their corresponding services.\r\n */\r\n\r\nObject.defineProperty(exports, \"__esModule\", { value: true });\r\nvar tslib_1 = __webpack_require__(1);\r\nvar inversify_1 = __webpack_require__(0);\r\nvar common_1 = __webpack_require__(2);\r\n;\r\nvar _1 = __webpack_require__(11);\r\nvar contracts_1 = __webpack_require__(3);\r\nvar MeteringCategoryRoute = (function (_super) {\r\n    tslib_1.__extends(MeteringCategoryRoute, _super);\r\n    function MeteringCategoryRoute(appOptions, meteringCategoryBatchRoute) {\r\n        var _this = _super.call(this, appOptions) || this;\r\n        _this.appOptions = appOptions;\r\n        _this.meteringCategoryBatchRoute = meteringCategoryBatchRoute;\r\n        _this.findRoute = 'metering/categories/{?searchQuery,page,rpp,sort,embed,fields}';\r\n        _this.getRoute = 'metering/categories/{id}/{?embed,fields}';\r\n        _this.createRoute = 'metering/categories';\r\n        _this.updateRoute = 'metering/categories/{id}';\r\n        _this.deleteRoute = 'metering/categories/{id}';\r\n        return _this;\r\n    }\r\n    Object.defineProperty(MeteringCategoryRoute.prototype, \"batch\", {\r\n        get: function () {\r\n            return this.meteringCategoryBatchRoute;\r\n        },\r\n        enumerable: true,\r\n        configurable: true\r\n    });\r\n    /**\r\n     * Parses find metering category route which can be expanded with additional options. Supported items are:\r\n     * - `searchQuery` - A string value used to identify metering resources using the phrase search.\r\n     * - `page` - A value used to set the page number, i.e. to retrieve certain metering subset from the storage.\r\n     * - `rpp` - A value used to limit the size of result set per page.\r\n     * - `sort` - A string used to set the metering property to sort the result collection by.\r\n     * - `embed` - Comma separated list of resources to be contained within the current representation.\r\n     * @method\r\n     * @param options Query resource options object.\r\n     * @example meteringCategoryRoute.find({searchQuery: '<search-phrase>'});\r\n     **/\r\n    MeteringCategoryRoute.prototype.find = function (options) {\r\n        return _super.prototype.baseFind.call(this, this.findRoute, options);\r\n    };\r\n    /**\r\n     * Parses get route; this route doesn't expose any properties.\r\n     * @method\r\n     * @param id MeteringCategory id which uniquely identifies MeteringCategory resource that needs to be retrieved.\r\n     * @param options Query resource options object.\r\n     * @example meteringCategoryRoute.get(id);\r\n     **/\r\n    MeteringCategoryRoute.prototype.get = function (id, options) {\r\n        return _super.prototype.baseGet.call(this, this.getRoute, id, options);\r\n    };\r\n    /**\r\n     * Parses create metering category route; this URI template does not expose any additional options.\r\n     * @method\r\n     * @example meteringCategoryRoute.create();\r\n     **/\r\n    MeteringCategoryRoute.prototype.create = function () {\r\n        return _super.prototype.baseCreate.call(this, this.createRoute, {});\r\n    };\r\n    /**\r\n     * Parses update metering category route; this URI template does not expose any additional options.\r\n     * @method\r\n     * @param data An meteringCategory object used to update specified MeteringCategory resource.\r\n     * @example meteringCategoryRoute.update();\r\n     **/\r\n    MeteringCategoryRoute.prototype.update = function (data) {\r\n        return _super.prototype.baseUpdate.call(this, this.updateRoute, data);\r\n    };\r\n    /**\r\n     * Parses delete metering category route; this URI template does not expose any additional options.\r\n     * @method\r\n     * @param data An meteringCategory object used to delete specified MeteringCategory resource.\r\n     * @example meteringCategoryRoute.delete();\r\n     **/\r\n    MeteringCategoryRoute.prototype.delete = function (data) {\r\n        return _super.prototype.baseDelete.call(this, this.deleteRoute, data);\r\n    };\r\n    return MeteringCategoryRoute;\r\n}(common_1.BaseRoute));\r\nMeteringCategoryRoute = tslib_1.__decorate([\r\n    inversify_1.injectable(),\r\n    tslib_1.__param(0, inversify_1.inject(contracts_1.TYPES.IAppOptions)),\r\n    tslib_1.__param(1, inversify_1.inject(_1.TYPES.MeteringCategoryBatchRoute)),\r\n    tslib_1.__metadata(\"design:paramtypes\", [typeof (_a = typeof contracts_1.IAppOptions !== \"undefined\" && contracts_1.IAppOptions) === \"function\" && _a || Object, typeof (_b = typeof _1.MeteringCategoryBatchRoute !== \"undefined\" && _1.MeteringCategoryBatchRoute) === \"function\" && _b || Object])\r\n], MeteringCategoryRoute);\r\nexports.MeteringCategoryRoute = MeteringCategoryRoute;\r\nvar _a, _b;\r\n/**\r\n * @copyright (c) 2017 Mono Ltd\r\n * @license MIT\r\n * @author Mono Ltd\r\n * @overview\r\n ***Notes:**\r\n - Refer to the [REST API documentation](http://github.com/Baasic/baasic-rest-api/wiki) for detailed information about available Baasic REST API end-points.\r\n - [URI Template](https://github.com/Baasic/uritemplate-js) syntax enables expanding the Baasic route templates to Baasic REST URIs providing it with an object that contains URI parameters.\r\n - All end-point objects are transformed by the associated route service.\r\n */ \r\n\n\n/***/ }),\n/* 285 */\n/***/ (function(module, exports, __webpack_require__) {\n\n\"use strict\";\n/* globals module */\r\n/**\r\n * @module meteringClient\r\n * @description  Metering Client provides an easy way to consume  Metering REST API end-points. In order to obtain a needed routes `meteringClient` uses `meteringRoute`.\r\n */\r\n\r\nObject.defineProperty(exports, \"__esModule\", { value: true });\r\nvar tslib_1 = __webpack_require__(1);\r\nvar inversify_1 = __webpack_require__(0);\r\n;\r\nvar httpApi_1 = __webpack_require__(4);\r\nvar _1 = __webpack_require__(11);\r\nvar MeteringClient = (function () {\r\n    function MeteringClient(meteringRoute, apiClient, meteringBatchClient, meteringStatisticsClient, meteringACLClient, meteringCategoryClient, meteringSettingsClient) {\r\n        this.meteringRoute = meteringRoute;\r\n        this.apiClient = apiClient;\r\n        this.meteringBatchClient = meteringBatchClient;\r\n        this.meteringStatisticsClient = meteringStatisticsClient;\r\n        this.meteringACLClient = meteringACLClient;\r\n        this.meteringCategoryClient = meteringCategoryClient;\r\n        this.meteringSettingsClient = meteringSettingsClient;\r\n    }\r\n    Object.defineProperty(MeteringClient.prototype, \"routeDefinition\", {\r\n        get: function () {\r\n            return this.meteringRoute;\r\n        },\r\n        enumerable: true,\r\n        configurable: true\r\n    });\r\n    Object.defineProperty(MeteringClient.prototype, \"batch\", {\r\n        get: function () {\r\n            return this.meteringBatchClient;\r\n        },\r\n        enumerable: true,\r\n        configurable: true\r\n    });\r\n    Object.defineProperty(MeteringClient.prototype, \"statistics\", {\r\n        get: function () {\r\n            return this.meteringStatisticsClient;\r\n        },\r\n        enumerable: true,\r\n        configurable: true\r\n    });\r\n    Object.defineProperty(MeteringClient.prototype, \"acl\", {\r\n        get: function () {\r\n            return this.meteringACLClient;\r\n        },\r\n        enumerable: true,\r\n        configurable: true\r\n    });\r\n    Object.defineProperty(MeteringClient.prototype, \"settings\", {\r\n        get: function () {\r\n            return this.meteringSettingsClient;\r\n        },\r\n        enumerable: true,\r\n        configurable: true\r\n    });\r\n    Object.defineProperty(MeteringClient.prototype, \"category\", {\r\n        get: function () {\r\n            return this.meteringCategoryClient;\r\n        },\r\n        enumerable: true,\r\n        configurable: true\r\n    });\r\n    /**\r\n     * Returns a promise that is resolved once the find action has been performed. Success response returns a list of metering resources matching the given criteria.\r\n     * @method\r\n     * @param options Query resource options object.\r\n     * @returns A promise that is resolved once the find action has been performed.\r\n     * @example meteringClient.find({\r\n                    pageNumber : 1,\r\n                    pageSize : 10,\r\n                    orderBy : '<field>',\r\n                    orderDirection : '<asc|desc>',\r\n                    categories: 'Storage,Requests,Bandwidth'\r\n                })\r\n                .then(function (collection) {\r\n                    // perform success action here\r\n                },\r\n                 function (response, status, headers, config) {\r\n                     // perform error handling here\r\n                });\r\n     **/\r\n    MeteringClient.prototype.find = function (options) {\r\n        return this.apiClient.get(this.routeDefinition.find(options));\r\n    };\r\n    /**\r\n     * Returns a promise that is resolved once the get action has been performed. Success response returns the metering resource.\r\n     * @method\r\n     * @param id MeteringData id which uniquely identifies MeteringData resource that needs to be retrieved.\r\n     * @param options Query resource options object.\r\n     * @returns A promise that is resolved once the get action has been performed.\r\n     * @example meteringClient.get()\r\n                    .then(function (data) {\r\n                        // perform success action here\r\n                    },\r\n                     function (response, status, headers, config) {\r\n                         // perform error handling here\r\n                    });\r\n     **/\r\n    MeteringClient.prototype.get = function (id, options) {\r\n        return this.apiClient.get(this.meteringRoute.get(id, options));\r\n    };\r\n    /**\r\n     * Returns a promise that is resolved once the create metering action has been performed; this action creates a new metering resource.\r\n     * @method\r\n     * @param data An MeteringData object that needs to be inserted into the system.\r\n     * @returns A promise that is resolved once the create metering action has been performed\r\n     * @example meteringClient.create({\r\n                    category : '<category-name>',\r\n                    name : '<sub-category-name>',\r\n                    value: '<value>'\r\n                })\r\n                .then(function (data) {\r\n                    // perform success action here\r\n                },\r\n                 function (response, status, headers, config) {\r\n                     // perform error handling here\r\n                });\r\n      **/\r\n    MeteringClient.prototype.create = function (data) {\r\n        return this.apiClient.post(this.routeDefinition.create(), this.routeDefinition.createParams(data));\r\n    };\r\n    /**\r\n     * Returns a promise that is resolved once the update metering action has been performed; this action updates a metering resource. This route uses HAL enabled objects to obtain routes and therefore it doesn't apply `meteringRoute` route template. Here is an example of how a route can be obtained from HAL enabled objects:\r\n     * ```\r\n     * let params = modelMapper.updateParams(meteringData);\r\n     * let uri = params['model'].links('put').href;\r\n     * ```\r\n     * @method\r\n     * @param data An metering data object used to update specified MeteringData resource.\r\n     * @returns A promise that is resolved once the update metering action has been performed.\r\n     * @example // meteringData is a resource previously fetched using get action.\r\n                    meteringData.value = '<some-new-value>';\r\n                    meteringClient.update(meteringData)\r\n                        .then(function (data) {\r\n                            // perform success action here\r\n                        },\r\n                         function (response, status, headers, config) {\r\n                             // perform error handling here\r\n                        });\r\n     **/\r\n    MeteringClient.prototype.update = function (data) {\r\n        return this.apiClient.put(this.routeDefinition.update(data), this.routeDefinition.updateParams(data));\r\n    };\r\n    /**\r\n     * Returns a promise that is resolved once the remove action has been performed. This action will remove a metering resource from the system if successfully completed. This route uses HAL enabled objects to obtain routes and therefore it doesn't apply `meteringRoute` route template. Here is an example of how a route can be obtained from HAL enabled objects:\r\n     * ```\r\n     * let params = modelMapper.removeParams(meteringData);\r\n     * let uri = params['model'].links('delete').href;\r\n     * ```\r\n     * @method\r\n     * @param data An metering data object used to remove specified MeteringData resource.\r\n     * @returns A promise that is resolved once the remove action has been performed.\r\n     * @example // meteringData is a resource previously fetched using get action.\r\n                        meteringClient.remove(meteringData)\r\n                            .then(function (data) {\r\n                                // perform success action here\r\n                            },\r\n                             function (response, status, headers, config) {\r\n                                 // perform error handling here\r\n                            });\r\n     **/\r\n    MeteringClient.prototype.remove = function (data) {\r\n        return this.apiClient.delete(this.routeDefinition.delete(data));\r\n    };\r\n    /**\r\n     * Returns a promise that is resolved once the purge action has been performed. This action will remove all metering resources from the system if successfully completed.\r\n     * @method\r\n     * @returns A promise that is resolved once the purge action has been performed.\r\n     * @example meteringClient.purge()\r\n                    .then(function (data) {\r\n                        // perform success action here\r\n                    },\r\n                     function (response, status, headers, config) {\r\n                         // perform error handling here\r\n                    });\r\n     **/\r\n    MeteringClient.prototype.purge = function () {\r\n        return this.apiClient.delete(this.routeDefinition.purge());\r\n    };\r\n    return MeteringClient;\r\n}());\r\nMeteringClient = tslib_1.__decorate([\r\n    inversify_1.injectable(),\r\n    tslib_1.__param(0, inversify_1.inject(_1.TYPES.MeteringRoute)),\r\n    tslib_1.__param(1, inversify_1.inject(httpApi_1.httpTYPES.ApiClient)),\r\n    tslib_1.__param(2, inversify_1.inject(_1.TYPES.MeteringBatchClient)),\r\n    tslib_1.__param(3, inversify_1.inject(_1.TYPES.MeteringStatisticsClient)),\r\n    tslib_1.__param(4, inversify_1.inject(_1.TYPES.MeteringACLClient)),\r\n    tslib_1.__param(5, inversify_1.inject(_1.TYPES.MeteringCategoryClient)),\r\n    tslib_1.__param(6, inversify_1.inject(_1.TYPES.MeteringSettingsClient)),\r\n    tslib_1.__metadata(\"design:paramtypes\", [typeof (_a = typeof _1.MeteringRoute !== \"undefined\" && _1.MeteringRoute) === \"function\" && _a || Object, typeof (_b = typeof httpApi_1.ApiClient !== \"undefined\" && httpApi_1.ApiClient) === \"function\" && _b || Object, typeof (_c = typeof _1.MeteringBatchClient !== \"undefined\" && _1.MeteringBatchClient) === \"function\" && _c || Object, typeof (_d = typeof _1.MeteringStatisticsClient !== \"undefined\" && _1.MeteringStatisticsClient) === \"function\" && _d || Object, typeof (_e = typeof _1.MeteringACLClient !== \"undefined\" && _1.MeteringACLClient) === \"function\" && _e || Object, typeof (_f = typeof _1.MeteringCategoryClient !== \"undefined\" && _1.MeteringCategoryClient) === \"function\" && _f || Object, typeof (_g = typeof _1.MeteringSettingsClient !== \"undefined\" && _1.MeteringSettingsClient) === \"function\" && _g || Object])\r\n], MeteringClient);\r\nexports.MeteringClient = MeteringClient;\r\nvar _a, _b, _c, _d, _e, _f, _g;\r\n/**\r\n * @copyright (c) 2017 Mono Ltd\r\n * @license MIT\r\n * @author Mono Ltd\r\n * @overview\r\n ***Notes:**\r\n - Refer to the [Baasic REST API](http://dev.baasic.com/api/reference/home) for detailed information about available Baasic REST API end-points.\r\n - All end-point objects are transformed by the associated route service.\r\n */ \r\n\n\n/***/ }),\n/* 286 */\n/***/ (function(module, exports, __webpack_require__) {\n\n\"use strict\";\n\r\nObject.defineProperty(exports, \"__esModule\", { value: true });\r\nvar tslib_1 = __webpack_require__(1);\r\n/* globals module */\r\n/**\r\n * @module meteringRoute\r\n * @description Baasic Metering Route Definition provides Baasic route templates which can be expanded to Baasic REST URIs. Various services can use Baasic Metering Route Definition to obtain a needed routes while other routes will be obtained through HAL. By convention, all route services  use the same function names as their corresponding services.\r\n */\r\nvar inversify_1 = __webpack_require__(0);\r\nvar common_1 = __webpack_require__(2);\r\n;\r\nvar _1 = __webpack_require__(11);\r\nvar contracts_1 = __webpack_require__(3);\r\nvar MeteringRoute = (function (_super) {\r\n    tslib_1.__extends(MeteringRoute, _super);\r\n    function MeteringRoute(appOptions, meteringBatchRoute, meteringStatisticsRoute, meteringACLRoute) {\r\n        var _this = _super.call(this, appOptions) || this;\r\n        _this.appOptions = appOptions;\r\n        _this.meteringBatchRoute = meteringBatchRoute;\r\n        _this.meteringStatisticsRoute = meteringStatisticsRoute;\r\n        _this.meteringACLRoute = meteringACLRoute;\r\n        _this.findRoute = 'metering/data/{?applicationId,searchQuery,categories,from,to,names,moduleNames,statuses,endpoints,sources,page,rpp,sort,embed,fields}';\r\n        _this.getRoute = 'metering/data/{id}/{?embed,fields}';\r\n        _this.createRoute = 'metering/data';\r\n        _this.updateRoute = 'metering/data/{id}';\r\n        _this.deleteRoute = '/metering/data/{id}';\r\n        _this.purgeRoute = 'metering/data/purge';\r\n        return _this;\r\n    }\r\n    Object.defineProperty(MeteringRoute.prototype, \"batch\", {\r\n        get: function () {\r\n            return this.meteringBatchRoute;\r\n        },\r\n        enumerable: true,\r\n        configurable: true\r\n    });\r\n    Object.defineProperty(MeteringRoute.prototype, \"statistics\", {\r\n        get: function () {\r\n            return this.meteringStatisticsRoute;\r\n        },\r\n        enumerable: true,\r\n        configurable: true\r\n    });\r\n    Object.defineProperty(MeteringRoute.prototype, \"acl\", {\r\n        get: function () {\r\n            return this.meteringACLRoute;\r\n        },\r\n        enumerable: true,\r\n        configurable: true\r\n    });\r\n    /**\r\n     * Parses find metering route which can be expanded with additional options. Supported items are:\r\n     * - `applicationId` - The application identifier.\r\n     * - `categories` - The metering categories  in CSV format.\r\n     * - `from` - The from date.\r\n     * - `to` - The to date.\r\n     * - `names` - The name of the resource inside the category in CSV format.\r\n     * - `moduleNames` - The name of the resource inside the category in CSV format.\r\n     * - `statuses` - The operation status in CSV format.\r\n     * - `endpoints` - The back-end endpoint in CSV format.\r\n     * - `sources` - The metering collector source in CSV format.\r\n     * - `searchQuery` - A string value used to identify metering resources using the phrase search.\r\n     * - `page` - A value used to set the page number, i.e. to retrieve certain metering subset from the storage.\r\n     * - `rpp` - A value used to limit the size of result set per page.\r\n     * - `sort` - A string used to set the metering property to sort the result collection by.\r\n     * - `embed` - Comma separated list of resources to be contained within the current representation.\r\n     * @method\r\n     * @param options Query resource options object.\r\n     * @example meteringRoute.find({searchQuery: '<search-phrase>'});\r\n     **/\r\n    MeteringRoute.prototype.find = function (options) {\r\n        return _super.prototype.baseFind.call(this, this.findRoute, options);\r\n    };\r\n    /**\r\n     * Parses get route; this route doesn't expose any properties.\r\n     * @method\r\n     * @param id MeteringData id which uniquely identifies MeteringData resource that needs to be retrieved.\r\n     * @param options Query resource options object.\r\n     * @example meteringRoute.get();\r\n     **/\r\n    MeteringRoute.prototype.get = function (id, options) {\r\n        return _super.prototype.baseGet.call(this, this.getRoute, id, options);\r\n    };\r\n    /**\r\n     * Parses create metering route; this URI template does not expose any additional options.\r\n     * @method\r\n     * @example meteringRoute.create();\r\n     **/\r\n    MeteringRoute.prototype.create = function () {\r\n        return _super.prototype.baseCreate.call(this, this.createRoute, {});\r\n    };\r\n    /**\r\n     * Parses update metering route; this URI template does not expose any additional options.\r\n     * @method\r\n     * @param data An metering data object used to update specified MeteringData resource.\r\n     * @example meteringRoute.update(data);\r\n     **/\r\n    MeteringRoute.prototype.update = function (data) {\r\n        return _super.prototype.baseUpdate.call(this, this.updateRoute, data);\r\n    };\r\n    /**\r\n     * Parses delete metering route; this URI template does not expose any additional options.\r\n     * @method\r\n     * @param data An metering data object used to delete specified MeteringData resource.\r\n     * @example meteringRoute.delete(data);\r\n     **/\r\n    MeteringRoute.prototype.delete = function (data) {\r\n        return _super.prototype.baseDelete.call(this, this.deleteRoute, data);\r\n    };\r\n    /**\r\n     * Parses purge metering data route: this URI template does not expose any additional options.\r\n     * @method\r\n     * @example meteringRoute.purge();\r\n     **/\r\n    MeteringRoute.prototype.purge = function () {\r\n        return _super.prototype.baseDelete.call(this, this.purgeRoute, {});\r\n    };\r\n    return MeteringRoute;\r\n}(common_1.BaseRoute));\r\nMeteringRoute = tslib_1.__decorate([\r\n    inversify_1.injectable(),\r\n    tslib_1.__param(0, inversify_1.inject(contracts_1.TYPES.IAppOptions)),\r\n    tslib_1.__param(1, inversify_1.inject(_1.TYPES.MeteringBatchRoute)),\r\n    tslib_1.__param(2, inversify_1.inject(_1.TYPES.MeteringStatisticsRoute)),\r\n    tslib_1.__param(3, inversify_1.inject(_1.TYPES.MeteringACLRoute)),\r\n    tslib_1.__metadata(\"design:paramtypes\", [typeof (_a = typeof contracts_1.IAppOptions !== \"undefined\" && contracts_1.IAppOptions) === \"function\" && _a || Object, typeof (_b = typeof _1.MeteringBatchRoute !== \"undefined\" && _1.MeteringBatchRoute) === \"function\" && _b || Object, typeof (_c = typeof _1.MeteringStatisticsRoute !== \"undefined\" && _1.MeteringStatisticsRoute) === \"function\" && _c || Object, typeof (_d = typeof _1.MeteringACLRoute !== \"undefined\" && _1.MeteringACLRoute) === \"function\" && _d || Object])\r\n], MeteringRoute);\r\nexports.MeteringRoute = MeteringRoute;\r\nvar _a, _b, _c, _d;\r\n/**\r\n * @copyright (c) 2017 Mono Ltd\r\n * @license MIT\r\n * @author Mono Ltd\r\n * @overview\r\n ***Notes:**\r\n - Refer to the [Baasic REST API](http://dev.baasic.com/api/reference/home) for detailed information about available Baasic REST API end-points.\r\n - [URI Template](https://github.com/Baasic/uritemplate-js) syntax enables expanding the Baasic route templates to Baasic REST URIs providing it with an object that contains URI parameters.\r\n - All end-point objects are transformed by the associated route service.\r\n */ \r\n\n\n/***/ }),\n/* 287 */\n/***/ (function(module, exports, __webpack_require__) {\n\n\"use strict\";\n/* globals module */\r\n/**\r\n * @module meteringSettingsClient\r\n * @description  Metering Settings Client provides an easy way to consume  Metering REST API end-points. In order to obtain a needed routes `meteringSettingsClient` uses `meteringSettingsRoute`.\r\n */\r\n\r\nObject.defineProperty(exports, \"__esModule\", { value: true });\r\nvar tslib_1 = __webpack_require__(1);\r\nvar inversify_1 = __webpack_require__(0);\r\n;\r\nvar httpApi_1 = __webpack_require__(4);\r\nvar _1 = __webpack_require__(11);\r\nvar MeteringSettingsClient = (function () {\r\n    function MeteringSettingsClient(meteringSettingsRoute, apiClient) {\r\n        this.meteringSettingsRoute = meteringSettingsRoute;\r\n        this.apiClient = apiClient;\r\n    }\r\n    Object.defineProperty(MeteringSettingsClient.prototype, \"routeDefinition\", {\r\n        get: function () {\r\n            return this.meteringSettingsRoute;\r\n        },\r\n        enumerable: true,\r\n        configurable: true\r\n    });\r\n    /**\r\n     * Returns a promise that is resolved once the get action has been performed. Success response returns the metering resource.\r\n     * @method\r\n     * @example meteringSettingsClient.get()\r\n                    .then(function (data) {\r\n                        // perform success action here\r\n                    },\r\n                      function (response, status, headers, config) {\r\n                          // perform error handling here\r\n                    });\r\n     **/\r\n    MeteringSettingsClient.prototype.get = function (options) {\r\n        return this.apiClient.get(this.routeDefinition.get(options));\r\n    };\r\n    /**\r\n     * Returns a promise that is resolved once the update metering action has been performed; this action updates a metering resource. This route uses HAL enabled objects to obtain routes and therefore it doesn't apply `meteringSettingsRoute` route template. Here is an example of how a route can be obtained from HAL enabled objects:\r\n     * ```\r\n     * let params = modelMapper.updateParams(meteringSettings);\r\n     * let uri = params['model'].links('put').href;\r\n     * ```\r\n     * @method\r\n     * @param data An meteringSetting object used to update specified MeteringSetting resource.\r\n     * @returns A promise that is resolved once the update metering action has been performed.\r\n     * @example // meteringSettings is a resource previously fetched using get action.\r\n                    meteringSettings.dataRetentionPeriod = 60;\r\n                    meteringSettingsClient.update(meteringSettings)\r\n                        .then(function (data) {\r\n                            // perform success action here\r\n                        },\r\n                         function (response, status, headers, config) {\r\n                             // perform error handling here\r\n                        });\r\n     **/\r\n    MeteringSettingsClient.prototype.update = function (data) {\r\n        return this.apiClient.put(this.routeDefinition.update(data), this.routeDefinition.updateParams(data));\r\n    };\r\n    return MeteringSettingsClient;\r\n}());\r\nMeteringSettingsClient = tslib_1.__decorate([\r\n    inversify_1.injectable(),\r\n    tslib_1.__param(0, inversify_1.inject(_1.TYPES.MeteringSettingsRoute)),\r\n    tslib_1.__param(1, inversify_1.inject(httpApi_1.httpTYPES.ApiClient)),\r\n    tslib_1.__metadata(\"design:paramtypes\", [typeof (_a = typeof _1.MeteringSettingsRoute !== \"undefined\" && _1.MeteringSettingsRoute) === \"function\" && _a || Object, typeof (_b = typeof httpApi_1.ApiClient !== \"undefined\" && httpApi_1.ApiClient) === \"function\" && _b || Object])\r\n], MeteringSettingsClient);\r\nexports.MeteringSettingsClient = MeteringSettingsClient;\r\nvar _a, _b;\r\n/**\r\n * @copyright (c) 2017 Mono Ltd\r\n * @license MIT\r\n * @author Mono Ltd\r\n * @overview\r\n ***Notes:**\r\n - Refer to the [Baasic REST API](http://dev.baasic.com/api/reference/home) for detailed information about available Baasic REST API end-points.\r\n - All end-point objects are transformed by the associated route service.\r\n */ \r\n\n\n/***/ }),\n/* 288 */\n/***/ (function(module, exports, __webpack_require__) {\n\n\"use strict\";\n/* globals module */\r\n/**\r\n * @module meteringSettingsRoute\r\n * @description Baasic Metering Settings Route Definition provides Baasic route templates which can be expanded to Baasic REST URIs. Various services can use Baasic Metering Settings Route Definition to obtain a needed routes while other routes will be obtained through HAL. By convention, all route services  use the same function names as their corresponding services.\r\n */\r\n\r\nObject.defineProperty(exports, \"__esModule\", { value: true });\r\nvar tslib_1 = __webpack_require__(1);\r\nvar inversify_1 = __webpack_require__(0);\r\nvar common_1 = __webpack_require__(2);\r\n;\r\nvar contracts_1 = __webpack_require__(3);\r\nvar MeteringSettingsRoute = (function (_super) {\r\n    tslib_1.__extends(MeteringSettingsRoute, _super);\r\n    function MeteringSettingsRoute(appOptions) {\r\n        var _this = _super.call(this, appOptions) || this;\r\n        _this.appOptions = appOptions;\r\n        _this.getRoute = 'metering/settings/{id}/{?embed,fields}';\r\n        _this.updateRoute = 'metering/settings/{id}';\r\n        return _this;\r\n    }\r\n    /**\r\n     * Parses get route; this route doesn't expose any properties.\r\n     * @method\r\n     * @example meteringSettingsRoute.get();\r\n     **/\r\n    MeteringSettingsRoute.prototype.get = function (options) {\r\n        return _super.prototype.baseGet.call(this, this.getRoute, undefined, options);\r\n    };\r\n    /**\r\n    * Parses updatea route; this route doesn't expose any properties.\r\n    * @method\r\n    * @param data An meteringSetting object used to update specified MeteringSetting resource.\r\n    * @example meteringSettingsRoute.update(data);\r\n    **/\r\n    MeteringSettingsRoute.prototype.update = function (data) {\r\n        return _super.prototype.baseUpdate.call(this, this.updateRoute, data);\r\n    };\r\n    return MeteringSettingsRoute;\r\n}(common_1.BaseRoute));\r\nMeteringSettingsRoute = tslib_1.__decorate([\r\n    inversify_1.injectable(),\r\n    tslib_1.__param(0, inversify_1.inject(contracts_1.TYPES.IAppOptions)),\r\n    tslib_1.__metadata(\"design:paramtypes\", [typeof (_a = typeof contracts_1.IAppOptions !== \"undefined\" && contracts_1.IAppOptions) === \"function\" && _a || Object])\r\n], MeteringSettingsRoute);\r\nexports.MeteringSettingsRoute = MeteringSettingsRoute;\r\nvar _a;\r\n/**\r\n * @copyright (c) 2017 Mono Ltd\r\n * @license MIT\r\n * @author Mono Ltd\r\n * @overview\r\n ***Notes:**\r\n - Refer to the [Baasic REST API](http://dev.baasic.com/api/reference/home) for detailed information about available Baasic REST API end-points.\r\n - [URI Template](https://github.com/Baasic/uritemplate-js) syntax enables expanding the Baasic route templates to Baasic REST URIs providing it with an object that contains URI parameters.\r\n - All end-point objects are transformed by the associated route service.\r\n */ \r\n\n\n/***/ }),\n/* 289 */\n/***/ (function(module, exports, __webpack_require__) {\n\n\"use strict\";\n/* globals module */\r\n/**\r\n * @module meteringStatisticsClient\r\n * @description  Metering Statistics Client provides an easy way to consume  Metering REST API end-points. In order to obtain a needed routes `meteringStatisticsClient` uses `meteringStatisticsRoute`.\r\n */\r\n\r\nObject.defineProperty(exports, \"__esModule\", { value: true });\r\nvar tslib_1 = __webpack_require__(1);\r\nvar inversify_1 = __webpack_require__(0);\r\n;\r\nvar httpApi_1 = __webpack_require__(4);\r\nvar _1 = __webpack_require__(11);\r\nvar MeteringStatisticsClient = (function () {\r\n    function MeteringStatisticsClient(meteringStatisticsRoute, apiClient) {\r\n        this.meteringStatisticsRoute = meteringStatisticsRoute;\r\n        this.apiClient = apiClient;\r\n    }\r\n    Object.defineProperty(MeteringStatisticsClient.prototype, \"routeDefinition\", {\r\n        /**\r\n          * Provides direct access to `meteringStatisticsRoute`.\r\n          * @method\r\n          * @example meteringStatisticsClient.routeDefinition.get(expandObject);\r\n          **/\r\n        get: function () {\r\n            return this.meteringStatisticsRoute;\r\n        },\r\n        enumerable: true,\r\n        configurable: true\r\n    });\r\n    /**\r\n     * Returns a promise that is resolved once the find action has been performed. Success response returns a list of metering resources matching the given criteria.\r\n     * @method\r\n     * @param options Query resource options object.\r\n     * @returns A promise that is resolved once the find action has been performed.\r\n     * @example meteringClient.find({\r\n                    pageNumber : 1,\r\n                    pageSize : 10,\r\n                    orderBy : '<field>',\r\n                    orderDirection : '<asc|desc>',\r\n                    category: 'Requests',\r\n                    rateBy : '<minute,hour,day,week,month,year>',\r\n                    from: '2 days ago',\r\n                    to: 'now'\r\n                })\r\n                .then(function (collection) {\r\n                    // perform success action here\r\n                },\r\n                 function (response, status, headers, config) {\r\n                     // perform error handling here\r\n                });\r\n     **/\r\n    MeteringStatisticsClient.prototype.find = function (options) {\r\n        return this.apiClient.get(this.routeDefinition.find(options));\r\n    };\r\n    return MeteringStatisticsClient;\r\n}());\r\nMeteringStatisticsClient = tslib_1.__decorate([\r\n    inversify_1.injectable(),\r\n    tslib_1.__param(0, inversify_1.inject(_1.TYPES.MeteringStatisticsRoute)),\r\n    tslib_1.__param(1, inversify_1.inject(httpApi_1.httpTYPES.ApiClient)),\r\n    tslib_1.__metadata(\"design:paramtypes\", [typeof (_a = typeof _1.MeteringStatisticsRoute !== \"undefined\" && _1.MeteringStatisticsRoute) === \"function\" && _a || Object, typeof (_b = typeof httpApi_1.ApiClient !== \"undefined\" && httpApi_1.ApiClient) === \"function\" && _b || Object])\r\n], MeteringStatisticsClient);\r\nexports.MeteringStatisticsClient = MeteringStatisticsClient;\r\nvar _a, _b;\r\n/**\r\n * @copyright (c) 2017 Mono Ltd\r\n * @license MIT\r\n * @author Mono Ltd\r\n * @overview\r\n ***Notes:**\r\n - Refer to the [Baasic REST API](http://dev.baasic.com/api/reference/home) for detailed information about available Baasic REST API end-points.\r\n - All end-point objects are transformed by the associated route service.\r\n */ \r\n\n\n/***/ }),\n/* 290 */\n/***/ (function(module, exports, __webpack_require__) {\n\n\"use strict\";\n/* globals module */\r\n/**\r\n * @module meteringStatisticsRoute\r\n * @description Baasic Metering Statistics Route Definition provides Baasic route templates which can be expanded to Baasic REST URIs. Various services can use Baasic Metering Statistics Route Definition Service to obtain a needed routes while other routes will be obtained through HAL. By convention, all route services  use the same function names as their corresponding services.\r\n */\r\n\r\nObject.defineProperty(exports, \"__esModule\", { value: true });\r\nvar tslib_1 = __webpack_require__(1);\r\nvar inversify_1 = __webpack_require__(0);\r\nvar common_1 = __webpack_require__(2);\r\n;\r\nvar contracts_1 = __webpack_require__(3);\r\nvar MeteringStatisticsRoute = (function (_super) {\r\n    tslib_1.__extends(MeteringStatisticsRoute, _super);\r\n    function MeteringStatisticsRoute(appOptions) {\r\n        var _this = _super.call(this, appOptions) || this;\r\n        _this.appOptions = appOptions;\r\n        _this.findRoute = 'metering/statistics/{category}/{?applicationIds,rateBy,from,to,names,moduleNames,statuses,endpoints,sources,page,rpp,sort,embed,fields}';\r\n        return _this;\r\n    }\r\n    /**\r\n     * Parses find metering route which can be expanded with additional options. Supported items are:\r\n     * - `category` - The metering category.\r\n     * - `applicationId` - The application identifier.\r\n     * - `rateBy` - The sampling rate by minute,hour,day,week, month or year.\r\n     * - `from` - The from date.\r\n     * - `to` - The to date.\r\n     * - `names` - The name of the resource inside the category in CSV format.\r\n     * - `moduleNames` - The name of the resource inside the category in CSV format.\r\n     * - `statuses` - The operation status in CSV format.\r\n     * - `endpoints` - The back-end endpoint in CSV format.\r\n     * - `sources` - The metering collector source in CSV format.\r\n     * - `page` - A value used to set the page number, i.e. to retrieve certain metering subset from the storage.\r\n     * - `rpp` - A value used to limit the size of result set per page.\r\n     * - `sort` - A string used to set the metering property to sort the result collection by.\r\n     * - `embed` - Comma separated list of resources to be contained within the current representation.\r\n     * @method\r\n     * @param options Query resource options object.\r\n     * @example meteringStatisticsRoute.find({category: '<category-name-or-id>'});\r\n     **/\r\n    MeteringStatisticsRoute.prototype.find = function (options) {\r\n        return _super.prototype.baseFind.call(this, this.findRoute, options);\r\n    };\r\n    return MeteringStatisticsRoute;\r\n}(common_1.BaseRoute));\r\nMeteringStatisticsRoute = tslib_1.__decorate([\r\n    inversify_1.injectable(),\r\n    tslib_1.__param(0, inversify_1.inject(contracts_1.TYPES.IAppOptions)),\r\n    tslib_1.__metadata(\"design:paramtypes\", [typeof (_a = typeof contracts_1.IAppOptions !== \"undefined\" && contracts_1.IAppOptions) === \"function\" && _a || Object])\r\n], MeteringStatisticsRoute);\r\nexports.MeteringStatisticsRoute = MeteringStatisticsRoute;\r\nvar _a;\r\n/**\r\n * @copyright (c) 2017 Mono Ltd\r\n * @license MIT\r\n * @author Mono Ltd\r\n * @overview\r\n ***Notes:**\r\n - Refer to the [Baasic REST API](http://dev.baasic.com/api/reference/home) for detailed information about available Baasic REST API end-points.\r\n - [URI Template](https://github.com/Baasic/uritemplate-js) syntax enables expanding the Baasic route templates to Baasic REST URIs providing it with an object that contains URI parameters.\r\n - All end-point objects are transformed by the associated route service.\r\n */ \r\n\n\n/***/ }),\n/* 291 */\n/***/ (function(module, exports, __webpack_require__) {\n\n\"use strict\";\n\r\nObject.defineProperty(exports, \"__esModule\", { value: true });\r\nvar inversify_1 = __webpack_require__(0);\r\nvar _1 = __webpack_require__(7);\r\nvar TYPES = {\r\n    NotificationsClient: Symbol(\"NotificationsClient\"),\r\n    NotificationsPublishBatchClient: Symbol(\"NotificationsPublishBatchClient\"),\r\n    NotificationsPublishBatchRoute: Symbol(\"NotificationsPublishBatchRoute\"),\r\n    NotificationsPublishRoute: Symbol(\"NotificationsPublishRoute\"),\r\n    NotificationsPublishClient: Symbol(\"NotificationsPublishClient\"),\r\n    NotificationsRegistrationsAnonymousBatchClient: Symbol(\"NotificationsRegistrationsAnonymousBatchClient\"),\r\n    NotificationsRegistrationsAnonymousBatchRoute: Symbol(\"NotificationsRegistrationsAnonymousBatchRoute\"),\r\n    NotificationsRegistrationsAnonymousClient: Symbol(\"BasicNotificationsRegistrationsAnonymousClient\"),\r\n    NotificationsRegistrationsAnonymousRoute: Symbol(\"NotificationsRegistrationsAnonymousRoute\"),\r\n    NotificationsRegistrationsRoute: Symbol(\"NotificationsRegistrationsRoute\"),\r\n    NotificationsRegistrationsUsersBatchRoute: Symbol(\"NotificationsRegistrationsUsersBatchRoute\"),\r\n    NotificationsRegistrationsUsersBatchClient: Symbol(\"NotificationsRegistrationsUsersBatchClient\"),\r\n    NotificationsRegistrationsUsersClient: Symbol(\"NotificationsRegistrationsUsersClient\"),\r\n    NotificationsRegistrationsUsersRoute: Symbol(\"NotificationsRegistrationsUsersRoute\"),\r\n    NotificationsRoute: Symbol(\"NotificationsRoute\"),\r\n    NotificationsRegistrationsClient: Symbol(\"NotificationsRegistrationsClient\"),\r\n    NotificationsSubscriptionsClient: Symbol(\"NotificationsSubscriptionsClient\"),\r\n    NotificationsSubscriptionsRoute: Symbol(\"NotificationsSubscriptionsRoute\"),\r\n    NotificationsSubscriptionsAnonymousBatchClient: Symbol(\"NotificationsSubscriptionsAnonymousBatchClient\"),\r\n    NotificationsSubscriptionsAnonymousBatchRoute: Symbol(\"NotificationsSubscriptionsAnonymousBatchRoute\"),\r\n    NotificationsSubscriptionsAnonymousRoute: Symbol(\"NotificationsSubscriptionsAnonymousRoute\"),\r\n    NotificationsSubscriptionsAnonymousClient: Symbol(\"NotificationsSubscriptionsAnonymousClient\"),\r\n    NotificationsSubscriptionsUsersRoute: Symbol(\"BasicNotificationsSubscriptionsRoute\"),\r\n    NotificationsSubscriptionsUsersBatchClient: Symbol(\"NotificationsSubscriptionsUsersBatchClient\"),\r\n    NotificationsSubscriptionsUsersBatchRoute: Symbol(\"NotificationsSubscriptionsUsersBatchRoute\"),\r\n    NotificationsSubscriptionsUsersClient: Symbol(\"NotificationsSubscriptionsUsersClient\"),\r\n    NotificationsSettingsRoute: Symbol(\"NotificationsSettingsRoute\"),\r\n    NotificationsSettingsClient: Symbol(\"NotificationsSettingsClient\")\r\n};\r\nexports.TYPES = TYPES;\r\nvar diModule = new inversify_1.ContainerModule(function (bind) {\r\n    bind(TYPES.NotificationsPublishBatchRoute).to(_1.NotificationsPublishBatchRoute);\r\n    bind(TYPES.NotificationsPublishBatchClient).to(_1.NotificationsPublishBatchClient);\r\n    bind(TYPES.NotificationsPublishRoute).to(_1.NotificationsPublishRoute);\r\n    bind(TYPES.NotificationsPublishClient).to(_1.NotificationsPublishClient);\r\n    bind(TYPES.NotificationsSubscriptionsUsersBatchRoute).to(_1.NotificationsSubscriptionsUsersBatchRoute);\r\n    bind(TYPES.NotificationsSubscriptionsUsersBatchClient).to(_1.NotificationsSubscriptionsUsersBatchClient);\r\n    bind(TYPES.NotificationsSubscriptionsUsersRoute).to(_1.NotificationsSubscriptionsUsersRoute);\r\n    bind(TYPES.NotificationsSubscriptionsUsersClient).to(_1.NotificationsSubscriptionsUsersClient);\r\n    bind(TYPES.NotificationsSubscriptionsAnonymousRoute).to(_1.NotificationsSubscriptionsAnonymousRoute);\r\n    bind(TYPES.NotificationsSubscriptionsAnonymousBatchRoute).to(_1.NotificationsSubscriptionsAnonymousBatchRoute);\r\n    bind(TYPES.NotificationsSubscriptionsAnonymousBatchClient).to(_1.NotificationsSubscriptionsAnonymousBatchClient);\r\n    bind(TYPES.NotificationsSubscriptionsAnonymousClient).to(_1.NotificationsSubscriptionsAnonymousClient);\r\n    bind(TYPES.NotificationsSubscriptionsRoute).to(_1.NotificationsSubscriptionsRoute);\r\n    bind(TYPES.NotificationsSubscriptionsClient).to(_1.NotificationsSubscriptionsClient);\r\n    bind(TYPES.NotificationsRegistrationsUsersBatchRoute).to(_1.NotificationsRegistrationsUsersBatchRoute);\r\n    bind(TYPES.NotificationsRegistrationsUsersBatchClient).to(_1.NotificationsRegistrationsUsersBatchClient);\r\n    bind(TYPES.NotificationsRegistrationsUsersRoute).to(_1.NotificationsRegistrationsUsersRoute);\r\n    bind(TYPES.NotificationsRegistrationsUsersClient).to(_1.NotificationsRegistrationsUsersClient);\r\n    bind(TYPES.NotificationsRegistrationsAnonymousBatchRoute).to(_1.NotificationsRegistrationsAnonymousBatchRoute);\r\n    bind(TYPES.NotificationsRegistrationsAnonymousBatchClient).to(_1.NotificationsRegistrationsAnonymousBatchClient);\r\n    bind(TYPES.NotificationsRegistrationsAnonymousRoute).to(_1.NotificationsRegistrationsAnonymousRoute);\r\n    bind(TYPES.NotificationsRegistrationsAnonymousClient).to(_1.NotificationsRegistrationsAnonymousClient);\r\n    bind(TYPES.NotificationsRegistrationsRoute).to(_1.NotificationsRegistrationsRoute);\r\n    bind(TYPES.NotificationsRegistrationsClient).to(_1.NotificationsRegistrationsClient);\r\n    bind(TYPES.NotificationsSettingsRoute).to(_1.NotificationsSettingsRoute);\r\n    bind(TYPES.NotificationsSettingsClient).to(_1.NotificationsSettingsClient);\r\n    bind(TYPES.NotificationsRoute).to(_1.NotificationsRoute);\r\n    bind(TYPES.NotificationsClient).to(_1.NotificationsClient);\r\n});\r\nexports.diModule = diModule;\r\n\n\n/***/ }),\n/* 292 */\n/***/ (function(module, exports, __webpack_require__) {\n\n\"use strict\";\n/* globals module */\r\n/**\r\n * @module notificationsClient\r\n * @description  Notifications Client provides an easy way to consume  Notifications REST API end-points. In order to obtain needed routes `notificationsClient` uses `notificationsRoute`.\r\n */\r\n\r\nObject.defineProperty(exports, \"__esModule\", { value: true });\r\nvar tslib_1 = __webpack_require__(1);\r\nvar inversify_1 = __webpack_require__(0);\r\nvar _1 = __webpack_require__(7);\r\nvar NotificationsClient = (function () {\r\n    function NotificationsClient(notificationsPublishClient, basicNotificationsSubscriptionsClient, notificationsRegistrationsClient, notificationsSettingsClient, notificationsRoute) {\r\n        this.notificationsPublishClient = notificationsPublishClient;\r\n        this.basicNotificationsSubscriptionsClient = basicNotificationsSubscriptionsClient;\r\n        this.notificationsRegistrationsClient = notificationsRegistrationsClient;\r\n        this.notificationsSettingsClient = notificationsSettingsClient;\r\n        this.notificationsRoute = notificationsRoute;\r\n    }\r\n    Object.defineProperty(NotificationsClient.prototype, \"routeDefinition\", {\r\n        get: function () {\r\n            return this.notificationsRoute;\r\n        },\r\n        enumerable: true,\r\n        configurable: true\r\n    });\r\n    Object.defineProperty(NotificationsClient.prototype, \"publish\", {\r\n        get: function () {\r\n            return this.notificationsPublishClient;\r\n        },\r\n        enumerable: true,\r\n        configurable: true\r\n    });\r\n    Object.defineProperty(NotificationsClient.prototype, \"subscriptions\", {\r\n        get: function () {\r\n            return this.basicNotificationsSubscriptionsClient;\r\n        },\r\n        enumerable: true,\r\n        configurable: true\r\n    });\r\n    Object.defineProperty(NotificationsClient.prototype, \"registrations\", {\r\n        get: function () {\r\n            return this.notificationsRegistrationsClient;\r\n        },\r\n        enumerable: true,\r\n        configurable: true\r\n    });\r\n    Object.defineProperty(NotificationsClient.prototype, \"settings\", {\r\n        get: function () {\r\n            return this.notificationsSettingsClient;\r\n        },\r\n        enumerable: true,\r\n        configurable: true\r\n    });\r\n    return NotificationsClient;\r\n}());\r\nNotificationsClient = tslib_1.__decorate([\r\n    inversify_1.injectable(),\r\n    tslib_1.__param(0, inversify_1.inject(_1.TYPES.NotificationsPublishClient)),\r\n    tslib_1.__param(1, inversify_1.inject(_1.TYPES.NotificationsSubscriptionsClient)),\r\n    tslib_1.__param(2, inversify_1.inject(_1.TYPES.NotificationsRegistrationsClient)),\r\n    tslib_1.__param(3, inversify_1.inject(_1.TYPES.NotificationsSettingsClient)),\r\n    tslib_1.__param(4, inversify_1.inject(_1.TYPES.NotificationsRoute)),\r\n    tslib_1.__metadata(\"design:paramtypes\", [typeof (_a = typeof _1.NotificationsPublishClient !== \"undefined\" && _1.NotificationsPublishClient) === \"function\" && _a || Object, typeof (_b = typeof _1.NotificationsSubscriptionsClient !== \"undefined\" && _1.NotificationsSubscriptionsClient) === \"function\" && _b || Object, typeof (_c = typeof _1.NotificationsRegistrationsClient !== \"undefined\" && _1.NotificationsRegistrationsClient) === \"function\" && _c || Object, typeof (_d = typeof _1.NotificationsSettingsClient !== \"undefined\" && _1.NotificationsSettingsClient) === \"function\" && _d || Object, typeof (_e = typeof _1.NotificationsRoute !== \"undefined\" && _1.NotificationsRoute) === \"function\" && _e || Object])\r\n], NotificationsClient);\r\nexports.NotificationsClient = NotificationsClient;\r\nvar _a, _b, _c, _d, _e;\r\n/**\r\n * @overview\r\n ***Notes:**\r\n - Refer to the [REST API documentation](https://github.com/Baasic/baasic-rest-api/wiki) for detailed information about available Baasic REST API end-points.\r\n - All end-point objects are transformed by the associated route service.\r\n */ \r\n\n\n/***/ }),\n/* 293 */\n/***/ (function(module, exports, __webpack_require__) {\n\n\"use strict\";\n/* globals module */\r\n/**\r\n * @module notificationsPublishBatchClient\r\n * @description  Notifications Publish Batch Client provides an easy way to consume  Notifications REST API end-points. In order to obtain needed routes `notificationsPublishBatchClient` uses `notificationsPublishBatchRoute`.\r\n */\r\n\r\nObject.defineProperty(exports, \"__esModule\", { value: true });\r\nvar tslib_1 = __webpack_require__(1);\r\nvar inversify_1 = __webpack_require__(0);\r\nvar httpApi_1 = __webpack_require__(4);\r\nvar _1 = __webpack_require__(7);\r\nvar NotificationsPublishBatchClient = (function () {\r\n    function NotificationsPublishBatchClient(notificationsPublishBatchRoute, apiClient) {\r\n        this.notificationsPublishBatchRoute = notificationsPublishBatchRoute;\r\n        this.apiClient = apiClient;\r\n    }\r\n    Object.defineProperty(NotificationsPublishBatchClient.prototype, \"routeDefinition\", {\r\n        get: function () {\r\n            return this.notificationsPublishBatchRoute;\r\n        },\r\n        enumerable: true,\r\n        configurable: true\r\n    });\r\n    /**\r\n     * Returns a promise that is resolved once the create notification action has been performed; this action creates new notification resources.\r\n     * @method\r\n     * @param data The notification collection.\r\n     * @returns A promise that is resolved once the create notification action has been performed.\r\n     * @example notificationsPublishBatchClient.create([{\r\n                    channels: ['<channel-name', '<channel-name>'],\r\n                    moduleName: '<module-name>',\r\n                    templateName: '<template-name>',\r\n                    templateContext: {\r\n                        prop1: '<prop1-value>',\r\n                        prop2: '<prop2-value>'\r\n                    }\r\n                }])\r\n                .then(function (data) {\r\n                    // perform success action here\r\n                },\r\n                 function (response, status, headers, config) {\r\n                     // perform error handling here\r\n                });\r\n     */\r\n    NotificationsPublishBatchClient.prototype.create = function (data) {\r\n        return this.apiClient.post(this.routeDefinition.create(), this.routeDefinition.createParams(data));\r\n    };\r\n    return NotificationsPublishBatchClient;\r\n}());\r\nNotificationsPublishBatchClient = tslib_1.__decorate([\r\n    inversify_1.injectable(),\r\n    tslib_1.__param(0, inversify_1.inject(_1.TYPES.NotificationsPublishBatchRoute)),\r\n    tslib_1.__param(1, inversify_1.inject(httpApi_1.httpTYPES.ApiClient)),\r\n    tslib_1.__metadata(\"design:paramtypes\", [typeof (_a = typeof _1.NotificationsPublishBatchRoute !== \"undefined\" && _1.NotificationsPublishBatchRoute) === \"function\" && _a || Object, typeof (_b = typeof httpApi_1.ApiClient !== \"undefined\" && httpApi_1.ApiClient) === \"function\" && _b || Object])\r\n], NotificationsPublishBatchClient);\r\nexports.NotificationsPublishBatchClient = NotificationsPublishBatchClient;\r\nvar _a, _b;\r\n/**\r\n * @overview\r\n ***Notes:**\r\n - Refer to the [REST API documentation](https://github.com/Baasic/baasic-rest-api/wiki) for detailed information about available Baasic REST API end-points.\r\n - All end-point objects are transformed by the associated route service.\r\n */ \r\n\n\n/***/ }),\n/* 294 */\n/***/ (function(module, exports, __webpack_require__) {\n\n\"use strict\";\n/* globals module */\r\n/**\r\n * @module notificationsPublishBatchRoute\r\n * @description Baasic Notifications Publish Batch Route Definition provides Baasic route templates which can be expanded to Baasic REST URIs. Various services can use Baasic Notifications Publish Batch Route Definition to obtain needed routes while other routes will be obtained through HAL. By convention, all route services use the same function names as their corresponding services.\r\n */\r\n\r\nObject.defineProperty(exports, \"__esModule\", { value: true });\r\nvar tslib_1 = __webpack_require__(1);\r\nvar inversify_1 = __webpack_require__(0);\r\nvar common_1 = __webpack_require__(2);\r\nvar contracts_1 = __webpack_require__(3);\r\nvar NotificationsPublishBatchRoute = (function (_super) {\r\n    tslib_1.__extends(NotificationsPublishBatchRoute, _super);\r\n    function NotificationsPublishBatchRoute(appOptions) {\r\n        var _this = _super.call(this, appOptions) || this;\r\n        _this.appOptions = appOptions;\r\n        _this.createRoute = 'notifications/publish/batch';\r\n        return _this;\r\n    }\r\n    /**\r\n     * Parses create publish batch route; this route does not expose any additional options.\r\n     * @method\r\n     * @example notificationsPublishBatchRoute.create();\r\n     */\r\n    NotificationsPublishBatchRoute.prototype.create = function () {\r\n        return _super.prototype.baseCreate.call(this, this.createRoute, {});\r\n    };\r\n    return NotificationsPublishBatchRoute;\r\n}(common_1.BaseRoute));\r\nNotificationsPublishBatchRoute = tslib_1.__decorate([\r\n    inversify_1.injectable(),\r\n    tslib_1.__param(0, inversify_1.inject(contracts_1.TYPES.IAppOptions)),\r\n    tslib_1.__metadata(\"design:paramtypes\", [typeof (_a = typeof contracts_1.IAppOptions !== \"undefined\" && contracts_1.IAppOptions) === \"function\" && _a || Object])\r\n], NotificationsPublishBatchRoute);\r\nexports.NotificationsPublishBatchRoute = NotificationsPublishBatchRoute;\r\nvar _a;\r\n/**\r\n * @overview\r\n ***Notes:**\r\n - Refer to the [REST API documentation](https://github.com/Baasic/baasic-rest-api/wiki) for detailed information about available Baasic REST API end-points.\r\n - [URI Template](https://github.com/Baasic/uritemplate-js) syntax enables expanding the Baasic route templates to Baasic REST URIs providing it with an object that contains URI parameters.\r\n - All end-point objects are transformed by the associated route service.\r\n */ \r\n\n\n/***/ }),\n/* 295 */\n/***/ (function(module, exports, __webpack_require__) {\n\n\"use strict\";\n/* globals module */\r\n/**\r\n * @module notificationsPublishClient\r\n * @description  Notifications Publish Client provides an easy way to consume  Notifications REST API end-points. In order to obtain needed routes `notificationsPublishClient` uses `notificationsPublishRoute`.\r\n */\r\n\r\nObject.defineProperty(exports, \"__esModule\", { value: true });\r\nvar tslib_1 = __webpack_require__(1);\r\nvar inversify_1 = __webpack_require__(0);\r\nvar httpApi_1 = __webpack_require__(4);\r\nvar _1 = __webpack_require__(7);\r\nvar NotificationsPublishClient = (function () {\r\n    function NotificationsPublishClient(notificationsPublishRoute, notificationsPublishBatchClient, apiClient) {\r\n        this.notificationsPublishRoute = notificationsPublishRoute;\r\n        this.notificationsPublishBatchClient = notificationsPublishBatchClient;\r\n        this.apiClient = apiClient;\r\n    }\r\n    Object.defineProperty(NotificationsPublishClient.prototype, \"routeDefinition\", {\r\n        get: function () {\r\n            return this.notificationsPublishRoute;\r\n        },\r\n        enumerable: true,\r\n        configurable: true\r\n    });\r\n    Object.defineProperty(NotificationsPublishClient.prototype, \"batch\", {\r\n        get: function () {\r\n            return this.notificationsPublishBatchClient;\r\n        },\r\n        enumerable: true,\r\n        configurable: true\r\n    });\r\n    /**\r\n     * Returns a promise that is resolved once the create notification action has been performed; this action creates a new notification resource.\r\n     * @method\r\n     * @param data The notification.\r\n     * @returns A promise that is resolved once the create notification action has been performed.\r\n     * @example notificationsPublishClient.create({\r\n                    channels: ['<channel-name', '<channel-name>'],\r\n                    moduleName: '<module-name>',\r\n                    templateName: '<template-name>',\r\n                    templateContext: {\r\n                        prop1: '<prop1-value>',\r\n                        prop2: '<prop2-value>'\r\n                    }\r\n                })\r\n                .then(function (data) {\r\n                    // perform success action here\r\n                },\r\n                 function (response, status, headers, config) {\r\n                     // perform error handling here\r\n                });\r\n     */\r\n    NotificationsPublishClient.prototype.create = function (data) {\r\n        return this.apiClient.post(this.routeDefinition.create(), this.routeDefinition.createParams(data));\r\n    };\r\n    return NotificationsPublishClient;\r\n}());\r\nNotificationsPublishClient = tslib_1.__decorate([\r\n    inversify_1.injectable(),\r\n    tslib_1.__param(0, inversify_1.inject(_1.TYPES.NotificationsPublishRoute)),\r\n    tslib_1.__param(1, inversify_1.inject(_1.TYPES.NotificationsPublishBatchClient)),\r\n    tslib_1.__param(2, inversify_1.inject(httpApi_1.httpTYPES.ApiClient)),\r\n    tslib_1.__metadata(\"design:paramtypes\", [typeof (_a = typeof _1.NotificationsPublishRoute !== \"undefined\" && _1.NotificationsPublishRoute) === \"function\" && _a || Object, typeof (_b = typeof _1.NotificationsPublishBatchClient !== \"undefined\" && _1.NotificationsPublishBatchClient) === \"function\" && _b || Object, typeof (_c = typeof httpApi_1.ApiClient !== \"undefined\" && httpApi_1.ApiClient) === \"function\" && _c || Object])\r\n], NotificationsPublishClient);\r\nexports.NotificationsPublishClient = NotificationsPublishClient;\r\nvar _a, _b, _c;\r\n/**\r\n * @overview\r\n ***Notes:**\r\n - Refer to the [REST API documentation](https://github.com/Baasic/baasic-rest-api/wiki) for detailed information about available Baasic REST API end-points.\r\n - All end-point objects are transformed by the associated route service.\r\n */ \r\n\n\n/***/ }),\n/* 296 */\n/***/ (function(module, exports, __webpack_require__) {\n\n\"use strict\";\n/* globals module */\r\n/**\r\n * @module notificationsPublishRoute\r\n * @description Baasic Notifications Publish Route Definition provides Baasic route templates which can be expanded to Baasic REST URIs. Various services can use Baasic Notifications Route Definition to obtain needed routes while other routes will be obtained through HAL. By convention, all route services use the same function names as their corresponding services.\r\n */\r\n\r\nObject.defineProperty(exports, \"__esModule\", { value: true });\r\nvar tslib_1 = __webpack_require__(1);\r\nvar inversify_1 = __webpack_require__(0);\r\nvar common_1 = __webpack_require__(2);\r\nvar contracts_1 = __webpack_require__(3);\r\nvar _1 = __webpack_require__(7);\r\nvar NotificationsPublishRoute = (function (_super) {\r\n    tslib_1.__extends(NotificationsPublishRoute, _super);\r\n    function NotificationsPublishRoute(appOptions, notificationsPublishBatchRoute) {\r\n        var _this = _super.call(this, appOptions) || this;\r\n        _this.appOptions = appOptions;\r\n        _this.notificationsPublishBatchRoute = notificationsPublishBatchRoute;\r\n        _this.createRoute = 'notifications/publish';\r\n        return _this;\r\n    }\r\n    NotificationsPublishRoute.prototype.batch = function () {\r\n        return this.notificationsPublishBatchRoute;\r\n    };\r\n    /**\r\n     * Parses create publish route; this route does not expose any additional options.\r\n     * @method\r\n     * @example notificationsPublishRoute.create();\r\n     */\r\n    NotificationsPublishRoute.prototype.create = function () {\r\n        return _super.prototype.baseCreate.call(this, this.createRoute, {});\r\n    };\r\n    return NotificationsPublishRoute;\r\n}(common_1.BaseRoute));\r\nNotificationsPublishRoute = tslib_1.__decorate([\r\n    inversify_1.injectable(),\r\n    tslib_1.__param(0, inversify_1.inject(contracts_1.TYPES.IAppOptions)),\r\n    tslib_1.__param(1, inversify_1.inject(_1.TYPES.NotificationsPublishBatchRoute)),\r\n    tslib_1.__metadata(\"design:paramtypes\", [typeof (_a = typeof contracts_1.IAppOptions !== \"undefined\" && contracts_1.IAppOptions) === \"function\" && _a || Object, typeof (_b = typeof _1.NotificationsPublishBatchRoute !== \"undefined\" && _1.NotificationsPublishBatchRoute) === \"function\" && _b || Object])\r\n], NotificationsPublishRoute);\r\nexports.NotificationsPublishRoute = NotificationsPublishRoute;\r\nvar _a, _b;\r\n/**\r\n * @overview\r\n ***Notes:**\r\n - Refer to the [REST API documentation](https://github.com/Baasic/baasic-rest-api/wiki) for detailed information about available Baasic REST API end-points.\r\n - [URI Template](https://github.com/Baasic/uritemplate-js) syntax enables expanding the Baasic route templates to Baasic REST URIs providing it with an object that contains URI parameters.\r\n - All end-point objects are transformed by the associated route service.\r\n */ \r\n\n\n/***/ }),\n/* 297 */\n/***/ (function(module, exports, __webpack_require__) {\n\n\"use strict\";\n/* globals module */\r\n/**\r\n * @module notificationsRegistrationsAnonymousBatchClient\r\n * @description  Notifications Registrations Anonymous Batch Client provides an easy way to consume  Notifications REST API end-points. In order to obtain needed routes `notificationsRegistrationsAnonymousBatchClient` uses `notificationsRegistrationsAnonymousBatchRoute`.\r\n */\r\n\r\nObject.defineProperty(exports, \"__esModule\", { value: true });\r\nvar tslib_1 = __webpack_require__(1);\r\nvar inversify_1 = __webpack_require__(0);\r\nvar httpApi_1 = __webpack_require__(4);\r\n;\r\nvar _1 = __webpack_require__(7);\r\nvar NotificationsRegistrationsAnonymousBatchClient = (function () {\r\n    function NotificationsRegistrationsAnonymousBatchClient(notificationsRegistrationsAnonymousBatchRoute, apiClient) {\r\n        this.notificationsRegistrationsAnonymousBatchRoute = notificationsRegistrationsAnonymousBatchRoute;\r\n        this.apiClient = apiClient;\r\n    }\r\n    Object.defineProperty(NotificationsRegistrationsAnonymousBatchClient.prototype, \"routeDefinition\", {\r\n        get: function () {\r\n            return this.notificationsRegistrationsAnonymousBatchRoute;\r\n        },\r\n        enumerable: true,\r\n        configurable: true\r\n    });\r\n    /**\r\n     * Returns a promise that is resolved once the create anonymous registration action has been performed; this action creates new anonymous registration resources.\r\n     * @method\r\n     * @param data AnonymousRegistration objects that need to be inserted into the system.\r\n     * @returns A promise that is resolved once the create anonymous registration action has been performed.\r\n     * @example notificationsRegistrationsAnonymousBatchClient.create([{\r\n                    provider: '<provider-name>',\r\n                    providerData: <provider-data>,\r\n                    expirationDate: <expiration-date>\r\n                }])\r\n                .then(function (data) {\r\n                    // perform success action here\r\n                },\r\n                 function (response, status, headers, config) {\r\n                     // perform error handling here\r\n                });\r\n     */\r\n    NotificationsRegistrationsAnonymousBatchClient.prototype.create = function (data) {\r\n        return this.apiClient.post(this.routeDefinition.create(), this.routeDefinition.createParams(data));\r\n    };\r\n    /**\r\n     * Returns a promise that is resolved once the remove action has been performed. This action will remove anonymous registration resources from the system if successfully completed.\r\n     * @method\r\n     * @param ids The registration ids which uniquely identify AnonymousRegistration resources that need to be deleted.\r\n     * @returns A promise that is resolved once the remove action has been performed.\r\n     * @example notificationsRegistrationsAnonymousBatchClient.remove(subscriptionIds)\r\n                   .then(function (data) {\r\n                       // perform success action here\r\n                   },\r\n                    function (response, status, headers, config) {\r\n                        // perform error handling here\r\n                   });\r\n    */\r\n    NotificationsRegistrationsAnonymousBatchClient.prototype.remove = function (ids) {\r\n        return this.apiClient.delete(this.notificationsRegistrationsAnonymousBatchRoute.delete(), undefined, ids);\r\n    };\r\n    /**\r\n     * Returns a promise that is resolved once the update anonymous registration action has been performed; this action updates specified anonymous registration  resources.\r\n     * @method\r\n     * @param data AnonymousRegistration objects used to update specified AnonymousRegistration resources.\r\n     * @returns A promise that is resolved once the update anonymous registration action has been performed.\r\n     * @example notificationsRegistrationsAnonymousBatchClient.update(registrations)\r\n                    .then(function (data) {\r\n                        // perform success action here\r\n                    },\r\n                     function (response, status, headers, config) {\r\n                         // perform error handling here\r\n                    });\r\n     */\r\n    NotificationsRegistrationsAnonymousBatchClient.prototype.update = function (data) {\r\n        return this.apiClient.put(this.routeDefinition.update(), this.routeDefinition.updateParams(data));\r\n    };\r\n    return NotificationsRegistrationsAnonymousBatchClient;\r\n}());\r\nNotificationsRegistrationsAnonymousBatchClient = tslib_1.__decorate([\r\n    inversify_1.injectable(),\r\n    tslib_1.__param(0, inversify_1.inject(_1.TYPES.NotificationsRegistrationsAnonymousBatchRoute)),\r\n    tslib_1.__param(1, inversify_1.inject(httpApi_1.httpTYPES.ApiClient)),\r\n    tslib_1.__metadata(\"design:paramtypes\", [typeof (_a = typeof _1.NotificationsRegistrationsAnonymousBatchRoute !== \"undefined\" && _1.NotificationsRegistrationsAnonymousBatchRoute) === \"function\" && _a || Object, typeof (_b = typeof httpApi_1.ApiClient !== \"undefined\" && httpApi_1.ApiClient) === \"function\" && _b || Object])\r\n], NotificationsRegistrationsAnonymousBatchClient);\r\nexports.NotificationsRegistrationsAnonymousBatchClient = NotificationsRegistrationsAnonymousBatchClient;\r\nvar _a, _b;\r\n/**\r\n * @overview\r\n ***Notes:**\r\n - Refer to the [REST API documentation](https://github.com/Baasic/baasic-rest-api/wiki) for detailed information about available Baasic REST API end-points.\r\n - All end-point objects are transformed by the associated route service.\r\n */ \r\n\n\n/***/ }),\n/* 298 */\n/***/ (function(module, exports, __webpack_require__) {\n\n\"use strict\";\n/* globals module */\r\n/**\r\n * @module notificationsRegistrationsAnonymousBatchRoute\r\n * @description Baasic Notifications Registrations Anonymous Batch Route Definition provides Baasic route templates which can be expanded to Baasic REST URIs. Various services can use Baasic Notifications Registrations Anonymous Batch Route Definition to obtain needed routes while other routes will be obtained through HAL. By convention, all route services use the same function names as their corresponding services.\r\n */\r\n\r\nObject.defineProperty(exports, \"__esModule\", { value: true });\r\nvar tslib_1 = __webpack_require__(1);\r\nvar inversify_1 = __webpack_require__(0);\r\nvar common_1 = __webpack_require__(2);\r\n;\r\nvar contracts_1 = __webpack_require__(3);\r\nvar NotificationsRegistrationsAnonymousBatchRoute = (function (_super) {\r\n    tslib_1.__extends(NotificationsRegistrationsAnonymousBatchRoute, _super);\r\n    function NotificationsRegistrationsAnonymousBatchRoute(appOptions) {\r\n        var _this = _super.call(this, appOptions) || this;\r\n        _this.appOptions = appOptions;\r\n        _this.createRoute = 'notifications/registrations/anonymous/batch';\r\n        _this.deleteRoute = 'notifications/registrations/anonymous/batch';\r\n        return _this;\r\n    }\r\n    /**\r\n     * Parses create anonymous registrations batch route; this route does not expose any additional options\r\n     * @method\r\n     * @example notificationsRegistrationsAnonymousBatchRoute.create();\r\n     */\r\n    NotificationsRegistrationsAnonymousBatchRoute.prototype.create = function () {\r\n        return this.baseCreate(this.createRoute, {});\r\n    };\r\n    /**\r\n     * Parses delete anonymous registrations batch route; this route does not expose any additional options\r\n     * @method\r\n     * @example notificationsRegistrationsAnonymousBatchRoute.delete();\r\n     */\r\n    NotificationsRegistrationsAnonymousBatchRoute.prototype.delete = function () {\r\n        return this.baseDelete(this.deleteRoute, {});\r\n    };\r\n    /**\r\n     * Parses update anonymous registrations batch route; this route does not expose any additional options\r\n     * @method\r\n     * @example notificationsRegistrationsAnonymousBatchRoute.update();\r\n     */\r\n    NotificationsRegistrationsAnonymousBatchRoute.prototype.update = function () {\r\n        return this.baseUpdate('notifications/registrations/anonymous/batch', {});\r\n    };\r\n    return NotificationsRegistrationsAnonymousBatchRoute;\r\n}(common_1.BaseRoute));\r\nNotificationsRegistrationsAnonymousBatchRoute = tslib_1.__decorate([\r\n    tslib_1.__param(0, inversify_1.inject(contracts_1.TYPES.IAppOptions)),\r\n    tslib_1.__metadata(\"design:paramtypes\", [typeof (_a = typeof contracts_1.IAppOptions !== \"undefined\" && contracts_1.IAppOptions) === \"function\" && _a || Object])\r\n], NotificationsRegistrationsAnonymousBatchRoute);\r\nexports.NotificationsRegistrationsAnonymousBatchRoute = NotificationsRegistrationsAnonymousBatchRoute;\r\nvar _a;\r\n/**\r\n * @overview\r\n ***Notes:**\r\n - Refer to the [REST API documentation](https://github.com/Baasic/baasic-rest-api/wiki) for detailed information about available Baasic REST API end-points.\r\n - [URI Template](https://github.com/Baasic/uritemplate-js) syntax enables expanding the Baasic route templates to Baasic REST URIs providing it with an object that contains URI parameters.\r\n - All end-point objects are transformed by the associated route service.\r\n */ \r\n\n\n/***/ }),\n/* 299 */\n/***/ (function(module, exports, __webpack_require__) {\n\n\"use strict\";\n/* globals module */\r\n/**\r\n * @module notificationsRegistrationsAnonymousClient\r\n * @description  Notifications Registrations Anonymous Client provides an easy way to consume  Notifications REST API end-points. In order to obtain needed routes `notificationsRegistrationsAnonymousClient` uses `notificationsRegistrationsAnonymousRoute`.\r\n */\r\n\r\nObject.defineProperty(exports, \"__esModule\", { value: true });\r\nvar tslib_1 = __webpack_require__(1);\r\nvar inversify_1 = __webpack_require__(0);\r\nvar httpApi_1 = __webpack_require__(4);\r\n;\r\nvar _1 = __webpack_require__(7);\r\nvar NotificationsRegistrationsAnonymousClient = (function () {\r\n    function NotificationsRegistrationsAnonymousClient(notificationsRegistrationsAnonymousRoute, notificationsRegistrationsAnonymousBatchClient, apiClient) {\r\n        this.notificationsRegistrationsAnonymousRoute = notificationsRegistrationsAnonymousRoute;\r\n        this.notificationsRegistrationsAnonymousBatchClient = notificationsRegistrationsAnonymousBatchClient;\r\n        this.apiClient = apiClient;\r\n    }\r\n    Object.defineProperty(NotificationsRegistrationsAnonymousClient.prototype, \"routeDefinition\", {\r\n        get: function () {\r\n            return this.notificationsRegistrationsAnonymousRoute;\r\n        },\r\n        enumerable: true,\r\n        configurable: true\r\n    });\r\n    Object.defineProperty(NotificationsRegistrationsAnonymousClient.prototype, \"batch\", {\r\n        get: function () {\r\n            return this.notificationsRegistrationsAnonymousBatchClient;\r\n        },\r\n        enumerable: true,\r\n        configurable: true\r\n    });\r\n    /**\r\n     * Returns a promise that is resolved once the create anonymous registration action has been performed; this action creates a new anonymous registration resource.\r\n     * @method\r\n     * @param data An AnonymousRegistration object that needs to be inserted into the system.\r\n     * @returns A promise that is resolved once the create anonymous registration action has been performed.\r\n     * @example notificationsRegistrationsAnonymousClient.create({\r\n                    provider: '<provider-name>',\r\n                    providerdata: <provider-data>,\r\n                    expirationData: '<expiration-date>'\r\n                })\r\n                .then(function (data) {\r\n                    // perform success action here\r\n                },\r\n                 function (response, status, headers, config) {\r\n                     // perform error handling here\r\n                });\r\n     */\r\n    NotificationsRegistrationsAnonymousClient.prototype.create = function (data) {\r\n        return this.apiClient.post(this.routeDefinition.create(), this.routeDefinition.createParams(data));\r\n    };\r\n    /**\r\n     * Returns a promise that is resolved once the find action has been performed. Success response returns a list of anonymous registration resources matching the given criteria.\r\n     * @method\r\n     * @param options Query resource options object.\r\n     * @returns A promise that is resolved once the find action has been performed.\r\n     * @example notificationsRegistrationsAnonymousClient.find({\r\n                   pageNumber : 1,\r\n                   pageSize : 10,\r\n                   orderBy : '<field>',\r\n                   orderDirection : '<asc|desc>',\r\n                   search : '<search-phrase>',\r\n                   providers: '<provider-name1>,<provider-name2>',\r\n                   embed: '<embed>'\r\n               })\r\n               .then(function (collection) {\r\n                   // perform success action here\r\n               },\r\n                function (response, status, headers, config) {\r\n                    // perform error handling here\r\n               });\r\n    */\r\n    NotificationsRegistrationsAnonymousClient.prototype.find = function (options) {\r\n        return this.apiClient.get(this.routeDefinition.find(options));\r\n    };\r\n    /**\r\n     * Returns a promise that is resolved once the get action has been performed. Success response returns the specified anonymous registration resource.\r\n     * @method\r\n     * @param id The registration identifier which uniquely identifies AnonymousRegistration resource that needs to be retrieved.\r\n     * @param options Query resource options object.\r\n     * @returns A promise that is resolved once the get action has been performed.\r\n     * @example notificationsRegistrationsAnonymousClient.get('<registration-id>')\r\n                    .then(function (data) {\r\n                        // perform success action here\r\n                    },\r\n                     function (response, status, headers, config) {\r\n                         // perform error handling here\r\n                    });\r\n     */\r\n    NotificationsRegistrationsAnonymousClient.prototype.get = function (id, options) {\r\n        return this.apiClient.get(this.notificationsRegistrationsAnonymousRoute.get(id, options));\r\n    };\r\n    /**\r\n     * Returns a promise that is resolved once the remove anonymous registration action has been performed. This action will remove a anonymous registration resource from the system if successfully completed. This route uses HAL enabled objects to obtain routes and therefore it doesn't apply `notificationsRegistrationsAnonymousRoute` route template. Here is an example of how a route can be obtained from HAL enabled objects:\r\n     * ```\r\n     * let params = modelMapper.removeParams(registration);\r\n     * var uri = params['model'].links('delete').href;\r\n     * ```\r\n     * @method\r\n     * @param data An object used to delete specified AnonymousRegistration resource.\r\n     * @returns A promise that is resolved once the remove anonymous registration action has been performed.\r\n     * @example // registration is a resource previously fetched using get action.\r\n                    notificationsRegistrationsAnonymousClient.remove(registration)\r\n                        .then(function (data) {\r\n                            // perform success action here\r\n                        },\r\n                         function (response, status, headers, config) {\r\n                             // perform error handling here\r\n                        });\r\n     */\r\n    NotificationsRegistrationsAnonymousClient.prototype.remove = function (data) {\r\n        return this.apiClient.delete(this.routeDefinition.delete(data));\r\n    };\r\n    /**\r\n     * Returns a promise that is resolved once the update anonymous registration action has been performed; this action updates a anonymous registration resource. This route uses HAL enabled objects to obtain routes and therefore it doesn't apply `notificationsRegistrationsAnonymousRoute` route template. Here is an example of how a route can be obtained from HAL enabled objects:\r\n     * ```\r\n     * let params = modelMapper.updateParams(registration);\r\n     * var uri = params['model'].links('put').href;\r\n     * ```\r\n     * @method\r\n     * @param data An object used to update specified AnonymousRegistration resource.\r\n     * @returns A promise that is resolved once the update anonymous registration action has been performed\r\n     * @example // registration is a resource previously fetched using get action.\r\n                        subscription.provider = '<provider-name>';\r\n                        notificationsRegistrationsAnonymousClient.update(registration)\r\n                            .then(function (data) {\r\n                                // perform success action here\r\n                            },\r\n                             function (response, status, headers, config) {\r\n                                 // perform error handling here\r\n                            });\r\n     */\r\n    NotificationsRegistrationsAnonymousClient.prototype.update = function (data) {\r\n        return this.apiClient.put(this.routeDefinition.update(data), this.routeDefinition.updateParams(data));\r\n    };\r\n    return NotificationsRegistrationsAnonymousClient;\r\n}());\r\nNotificationsRegistrationsAnonymousClient = tslib_1.__decorate([\r\n    inversify_1.injectable(),\r\n    tslib_1.__param(0, inversify_1.inject(_1.TYPES.NotificationsRegistrationsAnonymousRoute)),\r\n    tslib_1.__param(1, inversify_1.inject(_1.TYPES.NotificationsRegistrationsAnonymousBatchClient)),\r\n    tslib_1.__param(2, inversify_1.inject(httpApi_1.httpTYPES.ApiClient)),\r\n    tslib_1.__metadata(\"design:paramtypes\", [typeof (_a = typeof _1.NotificationsRegistrationsAnonymousRoute !== \"undefined\" && _1.NotificationsRegistrationsAnonymousRoute) === \"function\" && _a || Object, typeof (_b = typeof _1.NotificationsRegistrationsAnonymousBatchClient !== \"undefined\" && _1.NotificationsRegistrationsAnonymousBatchClient) === \"function\" && _b || Object, typeof (_c = typeof httpApi_1.ApiClient !== \"undefined\" && httpApi_1.ApiClient) === \"function\" && _c || Object])\r\n], NotificationsRegistrationsAnonymousClient);\r\nexports.NotificationsRegistrationsAnonymousClient = NotificationsRegistrationsAnonymousClient;\r\nvar _a, _b, _c;\r\n/**\r\n * @overview\r\n ***Notes:**\r\n - Refer to the [REST API documentation](https://github.com/Baasic/baasic-rest-api/wiki) for detailed information about available Baasic REST API end-points.\r\n - All end-point objects are transformed by the associated route service.\r\n */ \r\n\n\n/***/ }),\n/* 300 */\n/***/ (function(module, exports, __webpack_require__) {\n\n\"use strict\";\n/* globals module */\r\n/**\r\n * @module notificationsRegistrationsAnonymousRoute\r\n * @description Baasic Notifications Registrations Anonymous Route Definition provides Baasic route templates which can be expanded to Baasic REST URIs. Various services can use Baasic Notifications Registrations Anonymous Route Definition to obtain needed routes while other routes will be obtained through HAL. By convention, all route services use the same function names as their corresponding services.\r\n */\r\n\r\nObject.defineProperty(exports, \"__esModule\", { value: true });\r\nvar tslib_1 = __webpack_require__(1);\r\nvar inversify_1 = __webpack_require__(0);\r\nvar common_1 = __webpack_require__(2);\r\n;\r\nvar contracts_1 = __webpack_require__(3);\r\nvar _1 = __webpack_require__(7);\r\nvar NotificationsRegistrationsAnonymousRoute = (function (_super) {\r\n    tslib_1.__extends(NotificationsRegistrationsAnonymousRoute, _super);\r\n    function NotificationsRegistrationsAnonymousRoute(appOptions, notificationsRegistrationsAnonymousBatchRoute) {\r\n        var _this = _super.call(this, appOptions) || this;\r\n        _this.appOptions = appOptions;\r\n        _this.notificationsRegistrationsAnonymousBatchRoute = notificationsRegistrationsAnonymousBatchRoute;\r\n        _this.createRoute = 'notifications/registrations/anonymous';\r\n        _this.findRoute = 'notifications/registrations/anonymous/{?searchQuery,providers,page,rpp,sort,embed,fields}';\r\n        _this.getRoute = 'notifications/registrations/anonymous/{id}/{?embed}';\r\n        _this.updateRoute = 'notifications/registrations/anonymous/{id}';\r\n        _this.deleteRoute = 'notifications/registrations/anonymous/{id}';\r\n        return _this;\r\n    }\r\n    Object.defineProperty(NotificationsRegistrationsAnonymousRoute.prototype, \"batch\", {\r\n        get: function () {\r\n            return this.notificationsRegistrationsAnonymousBatchRoute;\r\n        },\r\n        enumerable: true,\r\n        configurable: true\r\n    });\r\n    /**\r\n     * Parses create anonymous registrations route; this route does not expose any additional options\r\n     * @method\r\n     * @example notificationsRegistrationsAnonymousRoute.create();\r\n     */\r\n    NotificationsRegistrationsAnonymousRoute.prototype.create = function () {\r\n        return _super.prototype.baseCreate.call(this, this.createRoute, {});\r\n    };\r\n    /**\r\n     * Parses find anonymous registrations route which can be expanded with additional options. Supported items are:\r\n     * - `searchQuery` - A string referencing user subscription properties using the phrase search.\r\n     * - `providers` - Comma separated list of notification providers.\r\n     * - `page` - A value used to set the page number, i.e. to retrieve certain user subscription subset from the storage.\r\n     * - `rpp` - A value used to limit the size of result set per page.\r\n     * - `sort` - A string used to set the user subscription property to sort the result collection by.\r\n     * - `embed` - Comma separated list of resources to be contained within the current representation.\r\n     * @method\r\n     * @param options Query resource options object.\r\n     * @example notificationsRegistrationsAnonymousRoute.find({\r\n                   searchQuery: '<search-phrase>',\r\n                   providers: '<provider-name>,<provider-name>'\r\n               });\r\n    */\r\n    NotificationsRegistrationsAnonymousRoute.prototype.find = function (options) {\r\n        return _super.prototype.baseFind.call(this, this.findRoute, options);\r\n    };\r\n    /**\r\n     * Parses get anonymous registrations route; this route should be expanded with the Id of anonymous registrations resource.\r\n     * @method\r\n     * @param id The registration identifier which uniquely identifies AnonymousRegistration resource that needs to be retrieved.\r\n     * @param options Query resource options object.\r\n     * @example notificationsRegistrationsAnonymousRoute.get({ id: '<registration-id>' });\r\n     */\r\n    NotificationsRegistrationsAnonymousRoute.prototype.get = function (id, options) {\r\n        return _super.prototype.baseGet.call(this, this.getRoute, id, options);\r\n    };\r\n    /**\r\n     * Parses update anonymous registrations route; this route should be expanded with the Id of anonymous registrations resource.\r\n     * @method\r\n     * @param data An object used to update specified AnonymousRegistration resource.\r\n     * @example notificationsRegistrationsAnonymousRoute.update(data);\r\n     */\r\n    NotificationsRegistrationsAnonymousRoute.prototype.update = function (data) {\r\n        return _super.prototype.baseUpdate.call(this, this.updateRoute, data);\r\n    };\r\n    /**\r\n     * Parses delete anonymous registrations route; this route should be expanded with the Id of anonymous registrations resource.\r\n     * @method\r\n     * @param data An object used to delete specified AnonymousRegistration resource.\r\n     * @example notificationsRegistrationsAnonymousRoute.delete(data);\r\n     */\r\n    NotificationsRegistrationsAnonymousRoute.prototype.delete = function (data) {\r\n        return _super.prototype.baseDelete.call(this, this.deleteRoute, data);\r\n    };\r\n    return NotificationsRegistrationsAnonymousRoute;\r\n}(common_1.BaseRoute));\r\nNotificationsRegistrationsAnonymousRoute = tslib_1.__decorate([\r\n    inversify_1.injectable(),\r\n    tslib_1.__param(0, inversify_1.inject(contracts_1.TYPES.IAppOptions)),\r\n    tslib_1.__param(1, inversify_1.inject(_1.TYPES.NotificationsRegistrationsAnonymousBatchRoute)),\r\n    tslib_1.__metadata(\"design:paramtypes\", [typeof (_a = typeof contracts_1.IAppOptions !== \"undefined\" && contracts_1.IAppOptions) === \"function\" && _a || Object, typeof (_b = typeof _1.NotificationsRegistrationsAnonymousBatchRoute !== \"undefined\" && _1.NotificationsRegistrationsAnonymousBatchRoute) === \"function\" && _b || Object])\r\n], NotificationsRegistrationsAnonymousRoute);\r\nexports.NotificationsRegistrationsAnonymousRoute = NotificationsRegistrationsAnonymousRoute;\r\nvar _a, _b;\r\n/**\r\n * @overview\r\n ***Notes:**\r\n - Refer to the [REST API documentation](https://github.com/Baasic/baasic-rest-api/wiki) for detailed information about available Baasic REST API end-points.\r\n - [URI Template](https://github.com/Baasic/uritemplate-js) syntax enables expanding the Baasic route templates to Baasic REST URIs providing it with an object that contains URI parameters.\r\n - All end-point objects are transformed by the associated route service.\r\n */ \r\n\n\n/***/ }),\n/* 301 */\n/***/ (function(module, exports, __webpack_require__) {\n\n\"use strict\";\n/* globals module */\r\n/**\r\n * @module notificationsRegistrationsClient\r\n * @description  Notifications Registrations Client provides an easy way to consume  Notifications REST API end-points. In order to obtain needed routes `notificationsRegistrationsClient` uses `notificationsRegistrationsRoute`.\r\n */\r\n\r\nObject.defineProperty(exports, \"__esModule\", { value: true });\r\nvar tslib_1 = __webpack_require__(1);\r\nvar inversify_1 = __webpack_require__(0);\r\nvar _1 = __webpack_require__(7);\r\nvar NotificationsRegistrationsClient = (function () {\r\n    function NotificationsRegistrationsClient(notificationsRegistrationsRoute, notificationsRegistrationsAnonymousClient, notificationsRegistrationsUsersClient) {\r\n        this.notificationsRegistrationsRoute = notificationsRegistrationsRoute;\r\n        this.notificationsRegistrationsAnonymousClient = notificationsRegistrationsAnonymousClient;\r\n        this.notificationsRegistrationsUsersClient = notificationsRegistrationsUsersClient;\r\n    }\r\n    Object.defineProperty(NotificationsRegistrationsClient.prototype, \"routeDefinition\", {\r\n        get: function () {\r\n            return this.notificationsRegistrationsRoute;\r\n        },\r\n        enumerable: true,\r\n        configurable: true\r\n    });\r\n    Object.defineProperty(NotificationsRegistrationsClient.prototype, \"anonymous\", {\r\n        get: function () {\r\n            return this.notificationsRegistrationsAnonymousClient;\r\n        },\r\n        enumerable: true,\r\n        configurable: true\r\n    });\r\n    Object.defineProperty(NotificationsRegistrationsClient.prototype, \"users\", {\r\n        get: function () {\r\n            return this.notificationsRegistrationsUsersClient;\r\n        },\r\n        enumerable: true,\r\n        configurable: true\r\n    });\r\n    return NotificationsRegistrationsClient;\r\n}());\r\nNotificationsRegistrationsClient = tslib_1.__decorate([\r\n    inversify_1.injectable(),\r\n    tslib_1.__param(0, inversify_1.inject(_1.TYPES.NotificationsRegistrationsRoute)),\r\n    tslib_1.__param(1, inversify_1.inject(_1.TYPES.NotificationsRegistrationsAnonymousClient)),\r\n    tslib_1.__param(2, inversify_1.inject(_1.TYPES.NotificationsRegistrationsUsersClient)),\r\n    tslib_1.__metadata(\"design:paramtypes\", [typeof (_a = typeof _1.NotificationsRegistrationsRoute !== \"undefined\" && _1.NotificationsRegistrationsRoute) === \"function\" && _a || Object, typeof (_b = typeof _1.NotificationsRegistrationsAnonymousClient !== \"undefined\" && _1.NotificationsRegistrationsAnonymousClient) === \"function\" && _b || Object, typeof (_c = typeof _1.NotificationsRegistrationsUsersClient !== \"undefined\" && _1.NotificationsRegistrationsUsersClient) === \"function\" && _c || Object])\r\n], NotificationsRegistrationsClient);\r\nexports.NotificationsRegistrationsClient = NotificationsRegistrationsClient;\r\nvar _a, _b, _c;\r\n/**\r\n * @overview\r\n ***Notes:**\r\n - Refer to the [REST API documentation](https://github.com/Baasic/baasic-rest-api/wiki) for detailed information about available Baasic REST API end-points.\r\n - All end-point objects are transformed by the associated route service.\r\n */ \r\n\n\n/***/ }),\n/* 302 */\n/***/ (function(module, exports, __webpack_require__) {\n\n\"use strict\";\n/* globals module */\r\n/**\r\n * @module notificationsRegistrationsRoute\r\n * @description Baasic Notifications Registrations Route Definition provides Baasic route templates which can be expanded to Baasic REST URIs. Various services can use Baasic Notifications Registrations Route Definition to obtain needed routes while other routes will be obtained through HAL. By convention, all route services use the same function names as their corresponding services.\r\n */\r\n\r\nObject.defineProperty(exports, \"__esModule\", { value: true });\r\nvar tslib_1 = __webpack_require__(1);\r\nvar inversify_1 = __webpack_require__(0);\r\nvar common_1 = __webpack_require__(2);\r\nvar contracts_1 = __webpack_require__(3);\r\nvar _1 = __webpack_require__(7);\r\nvar NotificationsRegistrationsRoute = (function (_super) {\r\n    tslib_1.__extends(NotificationsRegistrationsRoute, _super);\r\n    function NotificationsRegistrationsRoute(appOptions, notificationsRegistrationsUsersRoute, notificationsRegistrationsAnonymousRoute) {\r\n        var _this = _super.call(this, appOptions) || this;\r\n        _this.appOptions = appOptions;\r\n        _this.notificationsRegistrationsUsersRoute = notificationsRegistrationsUsersRoute;\r\n        _this.notificationsRegistrationsAnonymousRoute = notificationsRegistrationsAnonymousRoute;\r\n        return _this;\r\n    }\r\n    Object.defineProperty(NotificationsRegistrationsRoute.prototype, \"users\", {\r\n        get: function () {\r\n            return this.notificationsRegistrationsUsersRoute;\r\n        },\r\n        enumerable: true,\r\n        configurable: true\r\n    });\r\n    Object.defineProperty(NotificationsRegistrationsRoute.prototype, \"anonymous\", {\r\n        get: function () {\r\n            return this.notificationsRegistrationsAnonymousRoute;\r\n        },\r\n        enumerable: true,\r\n        configurable: true\r\n    });\r\n    return NotificationsRegistrationsRoute;\r\n}(common_1.BaseRoute));\r\nNotificationsRegistrationsRoute = tslib_1.__decorate([\r\n    inversify_1.injectable(),\r\n    tslib_1.__param(0, inversify_1.inject(contracts_1.TYPES.IAppOptions)),\r\n    tslib_1.__param(1, inversify_1.inject(_1.TYPES.NotificationsRegistrationsUsersRoute)),\r\n    tslib_1.__param(2, inversify_1.inject(_1.TYPES.NotificationsRegistrationsAnonymousRoute)),\r\n    tslib_1.__metadata(\"design:paramtypes\", [typeof (_a = typeof contracts_1.IAppOptions !== \"undefined\" && contracts_1.IAppOptions) === \"function\" && _a || Object, typeof (_b = typeof _1.NotificationsRegistrationsUsersRoute !== \"undefined\" && _1.NotificationsRegistrationsUsersRoute) === \"function\" && _b || Object, typeof (_c = typeof _1.NotificationsRegistrationsAnonymousRoute !== \"undefined\" && _1.NotificationsRegistrationsAnonymousRoute) === \"function\" && _c || Object])\r\n], NotificationsRegistrationsRoute);\r\nexports.NotificationsRegistrationsRoute = NotificationsRegistrationsRoute;\r\nvar _a, _b, _c;\r\n/**\r\n * @overview\r\n ***Notes:**\r\n - Refer to the [REST API documentation](https://github.com/Baasic/baasic-rest-api/wiki) for detailed information about available Baasic REST API end-points.\r\n - [URI Template](https://github.com/Baasic/uritemplate-js) syntax enables expanding the Baasic route templates to Baasic REST URIs providing it with an object that contains URI parameters.\r\n - All end-point objects are transformed by the associated route service.\r\n */ \r\n\n\n/***/ }),\n/* 303 */\n/***/ (function(module, exports, __webpack_require__) {\n\n\"use strict\";\n/* globals module */\r\n/**\r\n * @module notificationsRegistrationsUsersBatchClient\r\n * @description  Notifications Registrations Users Batch Client provides an easy way to consume  Notifications REST API end-points. In order to obtain needed routes `notificationsRegistrationsUsersBatchClient` uses `notificationsRegistrationsUsersBatchRoute`.\r\n */\r\n\r\nObject.defineProperty(exports, \"__esModule\", { value: true });\r\nvar tslib_1 = __webpack_require__(1);\r\nvar inversify_1 = __webpack_require__(0);\r\nvar httpApi_1 = __webpack_require__(4);\r\n;\r\nvar _1 = __webpack_require__(7);\r\nvar NotificationsRegistrationsUsersBatchClient = (function () {\r\n    function NotificationsRegistrationsUsersBatchClient(notificationsRegistrationsUsersBatchRoute, apiClient) {\r\n        this.notificationsRegistrationsUsersBatchRoute = notificationsRegistrationsUsersBatchRoute;\r\n        this.apiClient = apiClient;\r\n    }\r\n    Object.defineProperty(NotificationsRegistrationsUsersBatchClient.prototype, \"routeDefinition\", {\r\n        get: function () {\r\n            return this.notificationsRegistrationsUsersBatchRoute;\r\n        },\r\n        enumerable: true,\r\n        configurable: true\r\n    });\r\n    /**\r\n     * Returns a promise that is resolved once the create user registration action has been performed; this action creates new user registration resources.\r\n     * @method\r\n     * @param data UserRegistration collection that need to be inserted into the system.\r\n     * @returns A promise that is resolved once the create user registration action has been performed.\r\n     * @example notificationsRegistrationsUsersBatchClient.create([{\r\n                    provider: '<provider-name>',\r\n                    providerData: <provider-data>,\r\n                    userId: '<user-id>'\r\n                }])\r\n                .then(function (data) {\r\n                    // perform success action here\r\n                },\r\n                 function (response, status, headers, config) {\r\n                     // perform error handling here\r\n                });\r\n     */\r\n    NotificationsRegistrationsUsersBatchClient.prototype.create = function (data) {\r\n        return this.apiClient.post(this.routeDefinition.create(), this.routeDefinition.createParams(data));\r\n    };\r\n    /**\r\n     * Returns a promise that is resolved once the remove action has been performed. This action will remove user registration resources from the system if successfully completed.\r\n     * @method\r\n     * @param ids The subscription ids which uniquely identify UserRegistration resources that need to be deleted.\r\n     * @returns A promise that is resolved once the remove action has been performed.\r\n     * @example notificationsRegistrationsUsersBatchClient.remove(subscriptionIds)\r\n                    .then(function (data) {\r\n                        // perform success action here\r\n                    },\r\n                     function (response, status, headers, config) {\r\n                         // perform error handling here\r\n                    });\r\n     */\r\n    NotificationsRegistrationsUsersBatchClient.prototype.remove = function (ids) {\r\n        return this.apiClient.delete(this.notificationsRegistrationsUsersBatchRoute.delete(), undefined, ids);\r\n    };\r\n    /**\r\n     * Returns a promise that is resolved once the update user registration action has been performed; this action updates specified user registration resources.\r\n     * @method\r\n     * @param data UserRegistration objects used to update specified UserRegistration resources.\r\n     * @returns A promise that is resolved once the update user registration action has been performed.\r\n     * @example notificationsRegistrationsUsersBatchClient.update(registrations)\r\n                    .then(function (data) {\r\n                        // perform success action here\r\n                    },\r\n                     function (response, status, headers, config) {\r\n                         // perform error handling here\r\n                    });\r\n     */\r\n    NotificationsRegistrationsUsersBatchClient.prototype.update = function (data) {\r\n        return this.apiClient.put(this.routeDefinition.update(), this.routeDefinition.updateParams(data));\r\n    };\r\n    return NotificationsRegistrationsUsersBatchClient;\r\n}());\r\nNotificationsRegistrationsUsersBatchClient = tslib_1.__decorate([\r\n    inversify_1.injectable(),\r\n    tslib_1.__param(0, inversify_1.inject(_1.TYPES.NotificationsRegistrationsUsersBatchRoute)),\r\n    tslib_1.__param(1, inversify_1.inject(httpApi_1.httpTYPES.ApiClient)),\r\n    tslib_1.__metadata(\"design:paramtypes\", [typeof (_a = typeof _1.NotificationsRegistrationsUsersBatchRoute !== \"undefined\" && _1.NotificationsRegistrationsUsersBatchRoute) === \"function\" && _a || Object, typeof (_b = typeof httpApi_1.ApiClient !== \"undefined\" && httpApi_1.ApiClient) === \"function\" && _b || Object])\r\n], NotificationsRegistrationsUsersBatchClient);\r\nexports.NotificationsRegistrationsUsersBatchClient = NotificationsRegistrationsUsersBatchClient;\r\nvar _a, _b;\r\n/**\r\n * @overview\r\n ***Notes:**\r\n - Refer to the [REST API documentation](https://github.com/Baasic/baasic-rest-api/wiki) for detailed information about available Baasic REST API end-points.\r\n - All end-point objects are transformed by the associated route service.\r\n */ \r\n\n\n/***/ }),\n/* 304 */\n/***/ (function(module, exports, __webpack_require__) {\n\n\"use strict\";\n/* globals module */\r\n/**\r\n * @module notificationsRegistrationsUsersBatchRoute\r\n * @description Baasic Notifications Registrations Users Batch Route Definition provides Baasic route templates which can be expanded to Baasic REST URIs. Various services can use Baasic Notifications Registrations Users Batch Route Definition to obtain needed routes while other routes will be obtained through HAL. By convention, all route services use the same function names as their corresponding services.\r\n */\r\n\r\nObject.defineProperty(exports, \"__esModule\", { value: true });\r\nvar tslib_1 = __webpack_require__(1);\r\nvar inversify_1 = __webpack_require__(0);\r\nvar common_1 = __webpack_require__(2);\r\n;\r\nvar contracts_1 = __webpack_require__(3);\r\nvar NotificationsRegistrationsUsersBatchRoute = (function (_super) {\r\n    tslib_1.__extends(NotificationsRegistrationsUsersBatchRoute, _super);\r\n    function NotificationsRegistrationsUsersBatchRoute(appOptions) {\r\n        var _this = _super.call(this, appOptions) || this;\r\n        _this.appOptions = appOptions;\r\n        _this.createRoute = 'notifications/registrations/batch';\r\n        _this.deleteRoute = 'notifications/registrations/batch';\r\n        _this.updateRoute = 'notifications/registrations/batch';\r\n        return _this;\r\n    }\r\n    /**\r\n     * Parses create users registrations batch route; this route does not expose any additional options\r\n     * @method\r\n     * @example notificationsRegistrationsUsersBatchRoute.create();\r\n     */\r\n    NotificationsRegistrationsUsersBatchRoute.prototype.create = function () {\r\n        return this.baseCreate(this.createRoute, {});\r\n    };\r\n    /**\r\n     * Parses remove users registrations batch route; this route does not expose any additional options\r\n     * @method\r\n     * @example notificationsRegistrationsUsersBatchRoute.delete();\r\n     */\r\n    NotificationsRegistrationsUsersBatchRoute.prototype.delete = function () {\r\n        return this.baseDelete(this.deleteRoute, {});\r\n    };\r\n    /**\r\n     * Parses update users registrations batch route; this route does not expose any additional options\r\n     * @method\r\n     * @example notificationsRegistrationsUsersBatchRoute.update();\r\n     */\r\n    NotificationsRegistrationsUsersBatchRoute.prototype.update = function () {\r\n        return this.baseUpdate(this.updateRoute, {});\r\n    };\r\n    return NotificationsRegistrationsUsersBatchRoute;\r\n}(common_1.BaseRoute));\r\nNotificationsRegistrationsUsersBatchRoute = tslib_1.__decorate([\r\n    inversify_1.injectable(),\r\n    tslib_1.__param(0, inversify_1.inject(contracts_1.TYPES.IAppOptions)),\r\n    tslib_1.__metadata(\"design:paramtypes\", [typeof (_a = typeof contracts_1.IAppOptions !== \"undefined\" && contracts_1.IAppOptions) === \"function\" && _a || Object])\r\n], NotificationsRegistrationsUsersBatchRoute);\r\nexports.NotificationsRegistrationsUsersBatchRoute = NotificationsRegistrationsUsersBatchRoute;\r\nvar _a;\r\n/**\r\n * @overview\r\n ***Notes:**\r\n - Refer to the [REST API documentation](https://github.com/Baasic/baasic-rest-api/wiki) for detailed information about available Baasic REST API end-points.\r\n - [URI Template](https://github.com/Baasic/uritemplate-js) syntax enables expanding the Baasic route templates to Baasic REST URIs providing it with an object that contains URI parameters.\r\n - All end-point objects are transformed by the associated route service.\r\n */ \r\n\n\n/***/ }),\n/* 305 */\n/***/ (function(module, exports, __webpack_require__) {\n\n\"use strict\";\n/* globals module */\r\n/**\r\n * @module notificationsRegistrationsUsersClient\r\n * @description  Notifications Registrations Users Client provides an easy way to consume  Notifications REST API end-points. In order to obtain needed routes `notificationsRegistrationsUsersClient` uses `notificationsRegistrationsUsersRoute`.\r\n */\r\n\r\nObject.defineProperty(exports, \"__esModule\", { value: true });\r\nvar tslib_1 = __webpack_require__(1);\r\nvar inversify_1 = __webpack_require__(0);\r\nvar httpApi_1 = __webpack_require__(4);\r\n;\r\nvar _1 = __webpack_require__(7);\r\nvar NotificationsRegistrationsUsersClient = (function () {\r\n    function NotificationsRegistrationsUsersClient(notificationsRegistrationsUsersRoute, notificationsRegistrationsUsersBatchClient, apiClient) {\r\n        this.notificationsRegistrationsUsersRoute = notificationsRegistrationsUsersRoute;\r\n        this.notificationsRegistrationsUsersBatchClient = notificationsRegistrationsUsersBatchClient;\r\n        this.apiClient = apiClient;\r\n    }\r\n    Object.defineProperty(NotificationsRegistrationsUsersClient.prototype, \"routeDefinition\", {\r\n        get: function () {\r\n            return this.notificationsRegistrationsUsersRoute;\r\n        },\r\n        enumerable: true,\r\n        configurable: true\r\n    });\r\n    Object.defineProperty(NotificationsRegistrationsUsersClient.prototype, \"batch\", {\r\n        get: function () {\r\n            return this.notificationsRegistrationsUsersBatchClient;\r\n        },\r\n        enumerable: true,\r\n        configurable: true\r\n    });\r\n    /**\r\n     * Returns a promise that is resolved once the create user registration action has been performed; this action creates a new user registration resource.\r\n     * @method\r\n     * @param data An UserRegistration object that needs to be inserted into the system.\r\n     * @returns A promise that is resolved once the create user registration action has been performed.\r\n     * @example notificationsRegistrationsUsersClient.create({\r\n                    provider: '<provider-name>',\r\n                    providerData: <provider-data>,\r\n                    userId: '<user-id>'\r\n                })\r\n                .then(function (data) {\r\n                    // perform success action here\r\n                },\r\n                 function (response, status, headers, config) {\r\n                     // perform error handling here\r\n                });\r\n     */\r\n    NotificationsRegistrationsUsersClient.prototype.create = function (data) {\r\n        return this.apiClient.post(this.routeDefinition.create(), this.routeDefinition.createParams(data));\r\n    };\r\n    /**\r\n     * Returns a promise that is resolved once the find action has been performed. Success response returns a list of user registrations resources matching the given criteria.\r\n     * @method\r\n     * @param options Query resource options object.\r\n     * @returns A promise that is resolved once the find action has been performed.\r\n     * @example notificationsRegistrationsUsersClient.find({\r\n                   pageNumber : 1,\r\n                   pageSize : 10,\r\n                   orderBy : '<field>',\r\n                   orderDirection : '<asc|desc>',\r\n                   search : '<search-phrase>',\r\n                   providers: '<provider-name1>,<provider-name2>',\r\n                   userIds: '<user-id1>,<user-id2>',\r\n                   embed: '<embed>'\r\n               })\r\n               .then(function (collection) {\r\n                   // perform success action here\r\n               },\r\n                function (response, status, headers, config) {\r\n                    // perform error handling here\r\n               });\r\n    */\r\n    NotificationsRegistrationsUsersClient.prototype.find = function (options) {\r\n        return this.apiClient.get(this.routeDefinition.find(options));\r\n    };\r\n    /**\r\n     * Returns a promise that is resolved once the get action has been performed. Success response returns the specified user registrations resource.\r\n     * @method\r\n     * @param id The registration identifier which uniquely identifies UserRegistration resource that needs to be retrieved.\r\n     * @param options Query resource options object.\r\n     * @example notificationsRegistrationsUsersClient.get('<registration-id>')\r\n                   .then(function (data) {\r\n                       // perform success action here\r\n                   },\r\n                    function (response, status, headers, config) {\r\n                        // perform error handling here\r\n                   });\r\n    */\r\n    NotificationsRegistrationsUsersClient.prototype.get = function (id, options) {\r\n        return this.apiClient.get(this.notificationsRegistrationsUsersRoute.get(id, options));\r\n    };\r\n    /**\r\n     * Returns a promise that is resolved once the remove user registrations action has been performed. This action will remove a user registrations resource from the system if successfully completed. This route uses HAL enabled objects to obtain routes and therefore it doesn't apply `notificationsRegistrationsUsersRoute` route template. Here is an example of how a route can be obtained from HAL enabled objects:\r\n     * ```\r\n     * let params = modelMapper.removeParams(registration);\r\n     * let uri = params['model'].links('delete').href;\r\n     * ```\r\n     * @method\r\n     * @param data An object used to delete specified UserRegistration resource.\r\n     * @example // registration is a resource previously fetched using get action.\r\n                    notificationsRegistrationsUsersClient.remove(registration)\r\n                        .then(function (data) {\r\n                            // perform success action here\r\n                        },\r\n                         function (response, status, headers, config) {\r\n                             // perform error handling here\r\n                        });\r\n     */\r\n    NotificationsRegistrationsUsersClient.prototype.remove = function (data) {\r\n        return this.apiClient.delete(this.routeDefinition.delete(data));\r\n    };\r\n    /**\r\n     * Returns a promise that is resolved once the update user registration action has been performed; this action updates a user registration resource. This route uses HAL enabled objects to obtain routes and therefore it doesn't apply `notificationsRegistrationsUsersRoute` route template. Here is an example of how a route can be obtained from HAL enabled objects:\r\n     * ```\r\n     * let params = modelMapper.updateParams(subsregistrationcription);\r\n     * let uri = params['model'].links('put').href;\r\n     * ```\r\n     * @method\r\n     * @param data An object used to update specified UserRegistration resource.\r\n     * @returns A promise that is resolved once the update user registration action has been performed.\r\n     * @example // registration is a resource previously fetched using get action.\r\n                    registration.provider = '<provider-name>';\r\n                    notificationsRegistrationsUsersClient.update(registration)\r\n                        .then(function (data) {\r\n                            // perform success action here\r\n                        },\r\n                         function (response, status, headers, config) {\r\n                             // perform error handling here\r\n                        });\r\n     */\r\n    NotificationsRegistrationsUsersClient.prototype.update = function (data) {\r\n        return this.apiClient.put(this.routeDefinition.update(data), this.routeDefinition.updateParams(data));\r\n    };\r\n    return NotificationsRegistrationsUsersClient;\r\n}());\r\nNotificationsRegistrationsUsersClient = tslib_1.__decorate([\r\n    inversify_1.injectable(),\r\n    tslib_1.__param(0, inversify_1.inject(_1.TYPES.NotificationsRegistrationsUsersRoute)),\r\n    tslib_1.__param(1, inversify_1.inject(_1.TYPES.NotificationsRegistrationsUsersBatchClient)),\r\n    tslib_1.__param(2, inversify_1.inject(httpApi_1.httpTYPES.ApiClient)),\r\n    tslib_1.__metadata(\"design:paramtypes\", [typeof (_a = typeof _1.NotificationsRegistrationsUsersRoute !== \"undefined\" && _1.NotificationsRegistrationsUsersRoute) === \"function\" && _a || Object, typeof (_b = typeof _1.NotificationsRegistrationsUsersBatchClient !== \"undefined\" && _1.NotificationsRegistrationsUsersBatchClient) === \"function\" && _b || Object, typeof (_c = typeof httpApi_1.ApiClient !== \"undefined\" && httpApi_1.ApiClient) === \"function\" && _c || Object])\r\n], NotificationsRegistrationsUsersClient);\r\nexports.NotificationsRegistrationsUsersClient = NotificationsRegistrationsUsersClient;\r\nvar _a, _b, _c;\r\n/**\r\n * @overview\r\n ***Notes:**\r\n - Refer to the [REST API documentation](https://github.com/Baasic/baasic-rest-api/wiki) for detailed information about available Baasic REST API end-points.\r\n - All end-point objects are transformed by the associated route service.\r\n */ \r\n\n\n/***/ }),\n/* 306 */\n/***/ (function(module, exports, __webpack_require__) {\n\n\"use strict\";\n/* globals module */\r\n/**\r\n * @module notificationsRegistrationsUsersRoute\r\n * @description Baasic Notifications Registrations Users Route Definition provides Baasic route templates which can be expanded to Baasic REST URIs. Various services can use Baasic Notifications Registrations Users Route Definition to obtain needed routes while other routes will be obtained through HAL. By convention, all route services use the same function names as their corresponding services.\r\n */\r\n\r\nObject.defineProperty(exports, \"__esModule\", { value: true });\r\nvar tslib_1 = __webpack_require__(1);\r\nvar inversify_1 = __webpack_require__(0);\r\nvar common_1 = __webpack_require__(2);\r\n;\r\nvar contracts_1 = __webpack_require__(3);\r\nvar _1 = __webpack_require__(7);\r\nvar NotificationsRegistrationsUsersRoute = (function (_super) {\r\n    tslib_1.__extends(NotificationsRegistrationsUsersRoute, _super);\r\n    function NotificationsRegistrationsUsersRoute(appOptions, notificationsRegistrationsUsersBatchRoute) {\r\n        var _this = _super.call(this, appOptions) || this;\r\n        _this.appOptions = appOptions;\r\n        _this.notificationsRegistrationsUsersBatchRoute = notificationsRegistrationsUsersBatchRoute;\r\n        _this.createRoute = 'notifications/registrations';\r\n        _this.findRoute = 'notifications/registrations/{?searchQuery,userIds,providers,page,rpp,sort,embed,fields}';\r\n        _this.getRoute = 'notifications/registrations/{id}/{?embed}';\r\n        _this.deleteRoute = 'notifications/registrations/{id}';\r\n        _this.updateRoute = 'notifications/registrations/{id}';\r\n        return _this;\r\n    }\r\n    Object.defineProperty(NotificationsRegistrationsUsersRoute.prototype, \"batch\", {\r\n        get: function () {\r\n            return this.notificationsRegistrationsUsersBatchRoute;\r\n        },\r\n        enumerable: true,\r\n        configurable: true\r\n    });\r\n    /**\r\n     * Parses create users registrations route; this route does not expose any additional options\r\n     * @method\r\n     * @example notificationsRegistrationsUsersRoute.create();\r\n     */\r\n    NotificationsRegistrationsUsersRoute.prototype.create = function () {\r\n        return _super.prototype.baseCreate.call(this, this.createRoute, {});\r\n    };\r\n    /**\r\n     * Parses find users registrations route which can be expanded with additional options. Supported items are:\r\n     * - `searchQuery` - A string referencing user subscription properties using the phrase search.\r\n     * - `userIds` - Comma separated list of user identifiers.\r\n     * - `providers` - Comma separated list of notification providers.\r\n     * - `page` - A value used to set the page number, i.e. to retrieve certain user subscription subset from the storage.\r\n     * - `rpp` - A value used to limit the size of result set per page.\r\n     * - `sort` - A string used to set the user subscription property to sort the result collection by.\r\n     * - `embed` - Comma separated list of resources to be contained within the current representation.\r\n     * @method\r\n     * @param options Query resource options object.\r\n     * @example notificationsRegistrationsUsersRoute.find({ searchQuery: '<search-phrase>', providers: '<provider-name>,<provider-name>' });\r\n     */\r\n    NotificationsRegistrationsUsersRoute.prototype.find = function (options) {\r\n        return _super.prototype.baseFind.call(this, this.findRoute, options);\r\n    };\r\n    /**\r\n     * Parses get users registrations route; this route should be expanded with the Id of users registrations resource.\r\n     * @method\r\n     * @param id The registration identifier which uniquely identifies UserRegistration resource that needs to be retrieved.\r\n     * @param options Query resource options object.\r\n     * @example notificationsRegistrationsUsersRoute.get({ id: '<registration-id>' });\r\n     */\r\n    NotificationsRegistrationsUsersRoute.prototype.get = function (id, options) {\r\n        return _super.prototype.baseGet.call(this, this.getRoute, id, options);\r\n    };\r\n    /**\r\n     * Parses delete users registrations route; this route should be expanded with the Id of users registrations resource.\r\n     * @method\r\n     * @param data An object used to delete specified UserRegistration resource.\r\n     * @example notificationsRegistrationsUsersRoute.delete(data);\r\n     */\r\n    NotificationsRegistrationsUsersRoute.prototype.delete = function (data) {\r\n        return _super.prototype.baseDelete.call(this, this.deleteRoute, data);\r\n    };\r\n    /**\r\n     * Parses update users registrations route; this route should be expanded with the Id of users registrations resource.\r\n     * @method\r\n     * @param data An object used to update specified UserRegistration resource.\r\n     * @example notificationsRegistrationsUsersRoute.update(data);\r\n     */\r\n    NotificationsRegistrationsUsersRoute.prototype.update = function (data) {\r\n        return _super.prototype.baseUpdate.call(this, this.updateRoute, data);\r\n    };\r\n    return NotificationsRegistrationsUsersRoute;\r\n}(common_1.BaseRoute));\r\nNotificationsRegistrationsUsersRoute = tslib_1.__decorate([\r\n    inversify_1.injectable(),\r\n    tslib_1.__param(0, inversify_1.inject(contracts_1.TYPES.IAppOptions)),\r\n    tslib_1.__param(1, inversify_1.inject(_1.TYPES.NotificationsRegistrationsUsersBatchRoute)),\r\n    tslib_1.__metadata(\"design:paramtypes\", [typeof (_a = typeof contracts_1.IAppOptions !== \"undefined\" && contracts_1.IAppOptions) === \"function\" && _a || Object, typeof (_b = typeof _1.NotificationsRegistrationsUsersBatchRoute !== \"undefined\" && _1.NotificationsRegistrationsUsersBatchRoute) === \"function\" && _b || Object])\r\n], NotificationsRegistrationsUsersRoute);\r\nexports.NotificationsRegistrationsUsersRoute = NotificationsRegistrationsUsersRoute;\r\nvar _a, _b;\r\n/**\r\n * @overview\r\n ***Notes:**\r\n - Refer to the [REST API documentation](https://github.com/Baasic/baasic-rest-api/wiki) for detailed information about available Baasic REST API end-points.\r\n - [URI Template](https://github.com/Baasic/uritemplate-js) syntax enables expanding the Baasic route templates to Baasic REST URIs providing it with an object that contains URI parameters.\r\n - All end-point objects are transformed by the associated route service.\r\n */ \r\n\n\n/***/ }),\n/* 307 */\n/***/ (function(module, exports, __webpack_require__) {\n\n\"use strict\";\n/* globals module */\r\n/**\r\n * @module notificationsRoute\r\n * @description Baasic Notifications Route Definition provides Baasic route templates which can be expanded to Baasic REST URIs. Various services can use Baasic Notifications Route Definition to obtain needed routes while other routes will be obtained through HAL. By convention, all route services use the same function names as their corresponding services.\r\n */\r\n\r\nObject.defineProperty(exports, \"__esModule\", { value: true });\r\nvar tslib_1 = __webpack_require__(1);\r\nvar inversify_1 = __webpack_require__(0);\r\nvar common_1 = __webpack_require__(2);\r\nvar contracts_1 = __webpack_require__(3);\r\nvar _1 = __webpack_require__(7);\r\nvar NotificationsRoute = (function (_super) {\r\n    tslib_1.__extends(NotificationsRoute, _super);\r\n    function NotificationsRoute(appOptions, notificationsPublishRoute, basicNotificationsSubscriptionsRoute, notificationsRegistrationsRoute, notificationsSettingsRoute) {\r\n        var _this = _super.call(this, appOptions) || this;\r\n        _this.appOptions = appOptions;\r\n        _this.notificationsPublishRoute = notificationsPublishRoute;\r\n        _this.basicNotificationsSubscriptionsRoute = basicNotificationsSubscriptionsRoute;\r\n        _this.notificationsRegistrationsRoute = notificationsRegistrationsRoute;\r\n        _this.notificationsSettingsRoute = notificationsSettingsRoute;\r\n        return _this;\r\n    }\r\n    Object.defineProperty(NotificationsRoute.prototype, \"publish\", {\r\n        get: function () {\r\n            return this.notificationsPublishRoute;\r\n        },\r\n        enumerable: true,\r\n        configurable: true\r\n    });\r\n    Object.defineProperty(NotificationsRoute.prototype, \"subscriptions\", {\r\n        get: function () {\r\n            return this.basicNotificationsSubscriptionsRoute;\r\n        },\r\n        enumerable: true,\r\n        configurable: true\r\n    });\r\n    Object.defineProperty(NotificationsRoute.prototype, \"registrations\", {\r\n        get: function () {\r\n            return this.notificationsRegistrationsRoute;\r\n        },\r\n        enumerable: true,\r\n        configurable: true\r\n    });\r\n    Object.defineProperty(NotificationsRoute.prototype, \"settings\", {\r\n        get: function () {\r\n            return this.notificationsSettingsRoute;\r\n        },\r\n        enumerable: true,\r\n        configurable: true\r\n    });\r\n    return NotificationsRoute;\r\n}(common_1.BaseRoute));\r\nNotificationsRoute = tslib_1.__decorate([\r\n    inversify_1.injectable(),\r\n    tslib_1.__param(0, inversify_1.inject(contracts_1.TYPES.IAppOptions)),\r\n    tslib_1.__param(1, inversify_1.inject(_1.TYPES.NotificationsPublishRoute)),\r\n    tslib_1.__param(2, inversify_1.inject(_1.TYPES.NotificationsSubscriptionsRoute)),\r\n    tslib_1.__param(3, inversify_1.inject(_1.TYPES.NotificationsRegistrationsRoute)),\r\n    tslib_1.__param(4, inversify_1.inject(_1.TYPES.NotificationsSettingsRoute)),\r\n    tslib_1.__metadata(\"design:paramtypes\", [typeof (_a = typeof contracts_1.IAppOptions !== \"undefined\" && contracts_1.IAppOptions) === \"function\" && _a || Object, typeof (_b = typeof _1.NotificationsPublishRoute !== \"undefined\" && _1.NotificationsPublishRoute) === \"function\" && _b || Object, typeof (_c = typeof _1.NotificationsSubscriptionsRoute !== \"undefined\" && _1.NotificationsSubscriptionsRoute) === \"function\" && _c || Object, typeof (_d = typeof _1.NotificationsRegistrationsRoute !== \"undefined\" && _1.NotificationsRegistrationsRoute) === \"function\" && _d || Object, typeof (_e = typeof _1.NotificationsSettingsRoute !== \"undefined\" && _1.NotificationsSettingsRoute) === \"function\" && _e || Object])\r\n], NotificationsRoute);\r\nexports.NotificationsRoute = NotificationsRoute;\r\nvar _a, _b, _c, _d, _e;\r\n/**\r\n * @overview\r\n ***Notes:**\r\n - Refer to the [REST API documentation](https://github.com/Baasic/baasic-rest-api/wiki) for detailed information about available Baasic REST API end-points.\r\n - [URI Template](https://github.com/Baasic/uritemplate-js) syntax enables expanding the Baasic route templates to Baasic REST URIs providing it with an object that contains URI parameters.\r\n - All end-point objects are transformed by the associated route service.\r\n */ \r\n\n\n/***/ }),\n/* 308 */\n/***/ (function(module, exports, __webpack_require__) {\n\n\"use strict\";\n/* globals module */\r\n/**\r\n * @module notificationsSettingsClient\r\n * @description  Notifications Settings Client provides an easy way to consume  Notifications REST API end-points. In order to obtain needed routes `notificationsSettingsClient` uses `notificationsSettingsRoute`.\r\n */\r\n\r\nObject.defineProperty(exports, \"__esModule\", { value: true });\r\nvar tslib_1 = __webpack_require__(1);\r\nvar inversify_1 = __webpack_require__(0);\r\nvar httpApi_1 = __webpack_require__(4);\r\nvar _1 = __webpack_require__(7);\r\nvar NotificationsSettingsClient = (function () {\r\n    function NotificationsSettingsClient(notificationsSettingsRoute, apiClient) {\r\n        this.notificationsSettingsRoute = notificationsSettingsRoute;\r\n        this.apiClient = apiClient;\r\n    }\r\n    Object.defineProperty(NotificationsSettingsClient.prototype, \"routeDefinition\", {\r\n        get: function () {\r\n            return this.notificationsSettingsRoute;\r\n        },\r\n        enumerable: true,\r\n        configurable: true\r\n    });\r\n    /**\r\n     * Returns a promise that is resolved once the get action has been performed. Success response returns the specified setting resource.\r\n     * @method\r\n     * @param provider The notification provider name.\r\n     * @returns A promise that is resolved once the get action has been performed.\r\n     * @example notificationsSettingsClient.get('<provider-name>')\r\n                    .then(function (data) {\r\n                        // perform success action here\r\n                    },\r\n                     function (response, status, headers, config) {\r\n                         // perform error handling here\r\n                    });\r\n     */\r\n    NotificationsSettingsClient.prototype.get = function (provider) {\r\n        return this.apiClient.get(this.routeDefinition.get(provider));\r\n    };\r\n    /**\r\n     * Returns a promise that is resolved once the update settings action has been performed; this action updates a settings resource. This route uses HAL enabled objects to obtain routes and therefore it doesn't apply `notificationsSettingsRoute` route template. Here is an example of how a route can be obtained from HAL enabled objects:\r\n     * ```\r\n     * let params = modelMapper.updateParams(settings);\r\n     * let uri = params['model'].links('put').href;\r\n     * ```\r\n     * @method\r\n     * @param data The notification settings.\r\n     * @returns A promise that is resolved once the update settings action has been performed.\r\n     * @example // settings is a resource previously fetched using get action.\r\n                    notificationsSettingsClient.update(settings)\r\n                        .then(function (data) {\r\n                            // perform success action here\r\n                        },\r\n                         function (response, status, headers, config) {\r\n                             // perform error handling here\r\n                        });\r\n     */\r\n    NotificationsSettingsClient.prototype.update = function (data) {\r\n        return this.apiClient.put(this.routeDefinition.update(data), this.routeDefinition.updateParams(data));\r\n    };\r\n    return NotificationsSettingsClient;\r\n}());\r\nNotificationsSettingsClient = tslib_1.__decorate([\r\n    inversify_1.injectable(),\r\n    tslib_1.__param(0, inversify_1.inject(_1.TYPES.NotificationsSettingsRoute)),\r\n    tslib_1.__param(1, inversify_1.inject(httpApi_1.httpTYPES.ApiClient)),\r\n    tslib_1.__metadata(\"design:paramtypes\", [typeof (_a = typeof _1.NotificationsSettingsRoute !== \"undefined\" && _1.NotificationsSettingsRoute) === \"function\" && _a || Object, typeof (_b = typeof httpApi_1.ApiClient !== \"undefined\" && httpApi_1.ApiClient) === \"function\" && _b || Object])\r\n], NotificationsSettingsClient);\r\nexports.NotificationsSettingsClient = NotificationsSettingsClient;\r\nvar _a, _b;\r\n/**\r\n * @overview\r\n ***Notes:**\r\n - Refer to the [REST API documentation](https://github.com/Baasic/baasic-rest-api/wiki) for detailed information about available Baasic REST API end-points.\r\n - All end-point objects are transformed by the associated route service.\r\n */ \r\n\n\n/***/ }),\n/* 309 */\n/***/ (function(module, exports, __webpack_require__) {\n\n\"use strict\";\n/* globals module */\r\n/**\r\n * @module notificationsSettingsRoute\r\n * @description Baasic Notifications Settings Route Definition provides Baasic route templates which can be expanded to Baasic REST URIs. Various services can use Baasic Notifications Settings Route Definition to obtain needed routes while other routes will be obtained through HAL. By convention, all route services use the same function names as their corresponding services.\r\n */\r\n\r\nObject.defineProperty(exports, \"__esModule\", { value: true });\r\nvar tslib_1 = __webpack_require__(1);\r\nvar inversify_1 = __webpack_require__(0);\r\nvar common_1 = __webpack_require__(2);\r\nvar contracts_1 = __webpack_require__(3);\r\nvar NotificationsSettingsRoute = (function (_super) {\r\n    tslib_1.__extends(NotificationsSettingsRoute, _super);\r\n    function NotificationsSettingsRoute(appOptions) {\r\n        var _this = _super.call(this, appOptions) || this;\r\n        _this.appOptions = appOptions;\r\n        _this.getRoute = 'notifications/settings/{id}';\r\n        _this.updateRoute = 'notifications/settings/{id}';\r\n        return _this;\r\n    }\r\n    /**\r\n     * Parses get notification settings route; this route should be expanded with the notification provider name.\r\n     * @method\r\n     * @param provider The notification provider name.\r\n     * @example notificationsSettingsRoute.get({ id: '<provider-name>' });\r\n     */\r\n    NotificationsSettingsRoute.prototype.get = function (provider) {\r\n        return _super.prototype.baseGet.call(this, this.getRoute, provider);\r\n    };\r\n    /**\r\n     * Parses update notification settings route; this route should be expanded with the notification provider name.\r\n     * @method\r\n     * @param data The notification settings.\r\n     * @example notificationsSettingsRoute.update({ id: '<provider-name>' });\r\n     */\r\n    NotificationsSettingsRoute.prototype.update = function (data) {\r\n        return _super.prototype.baseUpdate.call(this, this.updateRoute, data);\r\n    };\r\n    return NotificationsSettingsRoute;\r\n}(common_1.BaseRoute));\r\nNotificationsSettingsRoute = tslib_1.__decorate([\r\n    inversify_1.injectable(),\r\n    tslib_1.__param(0, inversify_1.inject(contracts_1.TYPES.IAppOptions)),\r\n    tslib_1.__metadata(\"design:paramtypes\", [typeof (_a = typeof contracts_1.IAppOptions !== \"undefined\" && contracts_1.IAppOptions) === \"function\" && _a || Object])\r\n], NotificationsSettingsRoute);\r\nexports.NotificationsSettingsRoute = NotificationsSettingsRoute;\r\nvar _a;\r\n/**\r\n * @overview\r\n ***Notes:**\r\n - Refer to the [REST API documentation](https://github.com/Baasic/baasic-rest-api/wiki) for detailed information about available Baasic REST API end-points.\r\n - [URI Template](https://github.com/Baasic/uritemplate-js) syntax enables expanding the Baasic route templates to Baasic REST URIs providing it with an object that contains URI parameters.\r\n - All end-point objects are transformed by the associated route service.\r\n */ \r\n\n\n/***/ }),\n/* 310 */\n/***/ (function(module, exports, __webpack_require__) {\n\n\"use strict\";\n/* globals module */\r\n/**\r\n * @module notificationsSubscriptionsAnonymousBatchClient\r\n * @description  Notifications Subscriptions Anonymous Batch Client provides an easy way to consume  Notifications REST API end-points. In order to obtain needed routes `notificationsSubscriptionsAnonymousBatchClient` uses `notificationsSubscriptionsAnonymousBatchRoute`.\r\n */\r\n\r\nObject.defineProperty(exports, \"__esModule\", { value: true });\r\nvar tslib_1 = __webpack_require__(1);\r\nvar inversify_1 = __webpack_require__(0);\r\n;\r\nvar httpApi_1 = __webpack_require__(4);\r\nvar _1 = __webpack_require__(7);\r\nvar NotificationsSubscriptionsAnonymousBatchClient = (function () {\r\n    function NotificationsSubscriptionsAnonymousBatchClient(notificationsSubscriptionsAnonymousBatchRoute, apiClient) {\r\n        this.notificationsSubscriptionsAnonymousBatchRoute = notificationsSubscriptionsAnonymousBatchRoute;\r\n        this.apiClient = apiClient;\r\n    }\r\n    Object.defineProperty(NotificationsSubscriptionsAnonymousBatchClient.prototype, \"routeDefinition\", {\r\n        get: function () {\r\n            return this.notificationsSubscriptionsAnonymousBatchRoute;\r\n        },\r\n        enumerable: true,\r\n        configurable: true\r\n    });\r\n    /**\r\n     * Returns a promise that is resolved once the create anonymous subscription action has been performed; this action creates new anonymous subscription resources.\r\n     * @method\r\n     * @param data AnonymousSubscription objects that need to be inserted into the system.\r\n     * @returns A promise that is resolved once the create anonymous subscription action has been performed.\r\n     * @example notificationsSubscriptionsAnonymousBatchClient.create([{\r\n                    channel: '<channel-name>',\r\n                    registrationId: '<registration-id>' ž\r\n                }])\r\n                .then(function (data) {\r\n                    // perform success action here\r\n                },\r\n                 function (response, status, headers, config) {\r\n                     // perform error handling here\r\n                });\r\n     */\r\n    NotificationsSubscriptionsAnonymousBatchClient.prototype.create = function (data) {\r\n        return this.apiClient.post(this.routeDefinition.create(), this.routeDefinition.createParams(data));\r\n    };\r\n    /**\r\n     * Returns a promise that is resolved once the remove action has been performed. This action will remove anonymous subscription resources from the system if successfully completed.\r\n     * @method\r\n     * @param ids The subscription ids which uniquely identify AnonymousSubscription resources that need to be deleted.\r\n     * @returns a promise that is resolved once the remove action has been performed.\r\n     * @example notificationsSubscriptionsAnonymousBatchClient.remove(subscriptionIds)\r\n                   .then(function (data) {\r\n                       // perform success action here\r\n                   },\r\n                    function (response, status, headers, config) {\r\n                        // perform error handling here\r\n                   });\r\n    */\r\n    NotificationsSubscriptionsAnonymousBatchClient.prototype.remove = function (ids) {\r\n        return this.apiClient.delete(this.notificationsSubscriptionsAnonymousBatchRoute.delete(), undefined, ids);\r\n    };\r\n    /**\r\n     * Returns a promise that is resolved once the update anonymous subscriptions action has been performed; this action updates specified anonymous subscription resources.\r\n     * @method\r\n     * @param data AnonymousSubscription objects used to update specified AnonymousSubscription resources.\r\n     * @returns A promise that is resolved once the update anonymous subscriptions action has been performed.\r\n     * @example notificationsSubscriptionsAnonymousBatchClient.update(subscriptions)\r\n                    .then(function (data) {\r\n                        // perform success action here\r\n                    },\r\n                     function (response, status, headers, config) {\r\n                         // perform error handling here\r\n                    });\r\n     */\r\n    NotificationsSubscriptionsAnonymousBatchClient.prototype.update = function (data) {\r\n        return this.apiClient.put(this.routeDefinition.update(), this.routeDefinition.updateParams(data));\r\n    };\r\n    return NotificationsSubscriptionsAnonymousBatchClient;\r\n}());\r\nNotificationsSubscriptionsAnonymousBatchClient = tslib_1.__decorate([\r\n    inversify_1.injectable(),\r\n    tslib_1.__param(0, inversify_1.inject(_1.TYPES.NotificationsSubscriptionsAnonymousBatchRoute)),\r\n    tslib_1.__param(1, inversify_1.inject(httpApi_1.httpTYPES.ApiClient)),\r\n    tslib_1.__metadata(\"design:paramtypes\", [typeof (_a = typeof _1.NotificationsSubscriptionsAnonymousBatchRoute !== \"undefined\" && _1.NotificationsSubscriptionsAnonymousBatchRoute) === \"function\" && _a || Object, typeof (_b = typeof httpApi_1.ApiClient !== \"undefined\" && httpApi_1.ApiClient) === \"function\" && _b || Object])\r\n], NotificationsSubscriptionsAnonymousBatchClient);\r\nexports.NotificationsSubscriptionsAnonymousBatchClient = NotificationsSubscriptionsAnonymousBatchClient;\r\nvar _a, _b;\r\n/**\r\n * @overview\r\n ***Notes:**\r\n - Refer to the [REST API documentation](https://github.com/Baasic/baasic-rest-api/wiki) for detailed information about available Baasic REST API end-points.\r\n - All end-point objects are transformed by the associated route service.\r\n */ \r\n\n\n/***/ }),\n/* 311 */\n/***/ (function(module, exports, __webpack_require__) {\n\n\"use strict\";\n/* globals module */\r\n/**\r\n * @module notificationsSubscriptionsAnonymousBatchRoute\r\n * @description Baasic Notifications Subscriptions Anonymous Batch Route Definition provides Baasic route templates which can be expanded to Baasic REST URIs. Various services can use Baasic Notifications Subscriptions Anonymous Batch Route Definition to obtain needed routes while other routes will be obtained through HAL. By convention, all route services use the same function names as their corresponding services.\r\n */\r\n\r\nObject.defineProperty(exports, \"__esModule\", { value: true });\r\nvar tslib_1 = __webpack_require__(1);\r\nvar inversify_1 = __webpack_require__(0);\r\nvar common_1 = __webpack_require__(2);\r\n;\r\nvar contracts_1 = __webpack_require__(3);\r\nvar NotificationsSubscriptionsAnonymousBatchRoute = (function (_super) {\r\n    tslib_1.__extends(NotificationsSubscriptionsAnonymousBatchRoute, _super);\r\n    function NotificationsSubscriptionsAnonymousBatchRoute(appOptions) {\r\n        var _this = _super.call(this, appOptions) || this;\r\n        _this.appOptions = appOptions;\r\n        _this.createRoute = 'notifications/subscriptions/anonymous/batch';\r\n        _this.deleteRoute = 'notifications/subscriptions/anonymous/batch';\r\n        _this.updateRoute = 'notifications/subscriptions/anonymous/batch';\r\n        return _this;\r\n    }\r\n    /**\r\n     * Parses create anonymous subscription batch route; this route does not expose any additional options\r\n     * @method\r\n     * @example notificationsSubscriptionsAnonymousBatchRoute.create();\r\n     */\r\n    NotificationsSubscriptionsAnonymousBatchRoute.prototype.create = function () {\r\n        return this.baseCreate(this.createRoute, {});\r\n    };\r\n    /**\r\n     * Parses remove anonymous subscription batch route; this route does not expose any additional options\r\n     * @method\r\n     * @example baasicNotificationsSubscriptionsAnonymousBatchRouteDefinitio.delete();\r\n     */\r\n    NotificationsSubscriptionsAnonymousBatchRoute.prototype.delete = function () {\r\n        return this.baseDelete(this.deleteRoute, {});\r\n    };\r\n    /**\r\n     * Parses update anonymous subscription batch route; this route does not expose any additional options\r\n     * @method\r\n     * @example notificationsSubscriptionsAnonymousBatchRoute.update();\r\n     */\r\n    NotificationsSubscriptionsAnonymousBatchRoute.prototype.update = function () {\r\n        return this.baseUpdate(this.updateRoute, {});\r\n    };\r\n    return NotificationsSubscriptionsAnonymousBatchRoute;\r\n}(common_1.BaseRoute));\r\nNotificationsSubscriptionsAnonymousBatchRoute = tslib_1.__decorate([\r\n    inversify_1.injectable(),\r\n    tslib_1.__param(0, inversify_1.inject(contracts_1.TYPES.IAppOptions)),\r\n    tslib_1.__metadata(\"design:paramtypes\", [typeof (_a = typeof contracts_1.IAppOptions !== \"undefined\" && contracts_1.IAppOptions) === \"function\" && _a || Object])\r\n], NotificationsSubscriptionsAnonymousBatchRoute);\r\nexports.NotificationsSubscriptionsAnonymousBatchRoute = NotificationsSubscriptionsAnonymousBatchRoute;\r\nvar _a;\r\n/**\r\n * @overview\r\n ***Notes:**\r\n - Refer to the [REST API documentation](https://github.com/Baasic/baasic-rest-api/wiki) for detailed information about available Baasic REST API end-points.\r\n - [URI Template](https://github.com/Baasic/uritemplate-js) syntax enables expanding the Baasic route templates to Baasic REST URIs providing it with an object that contains URI parameters.\r\n - All end-point objects are transformed by the associated route service.\r\n */ \r\n\n\n/***/ }),\n/* 312 */\n/***/ (function(module, exports, __webpack_require__) {\n\n\"use strict\";\n/* globals module */\r\n/**\r\n * @module notificationsSubscriptionsAnonymousClient\r\n * @description  Notifications Subscriptions Anonymous Client provides an easy way to consume  Notifications REST API end-points. In order to obtain needed routes `notificationsSubscriptionsAnonymousClient` uses `notificationsSubscriptionsAnonymousRoute`.\r\n */\r\n\r\nObject.defineProperty(exports, \"__esModule\", { value: true });\r\nvar tslib_1 = __webpack_require__(1);\r\nvar inversify_1 = __webpack_require__(0);\r\n;\r\nvar httpApi_1 = __webpack_require__(4);\r\nvar _1 = __webpack_require__(7);\r\nvar NotificationsSubscriptionsAnonymousClient = (function () {\r\n    function NotificationsSubscriptionsAnonymousClient(notificationsSubscriptionsAnonymousRoute, notificationsSubscriptionsAnonymousBatchClient, apiClient) {\r\n        this.notificationsSubscriptionsAnonymousRoute = notificationsSubscriptionsAnonymousRoute;\r\n        this.notificationsSubscriptionsAnonymousBatchClient = notificationsSubscriptionsAnonymousBatchClient;\r\n        this.apiClient = apiClient;\r\n    }\r\n    Object.defineProperty(NotificationsSubscriptionsAnonymousClient.prototype, \"routeDefinition\", {\r\n        get: function () {\r\n            return this.notificationsSubscriptionsAnonymousRoute;\r\n        },\r\n        enumerable: true,\r\n        configurable: true\r\n    });\r\n    Object.defineProperty(NotificationsSubscriptionsAnonymousClient.prototype, \"batch\", {\r\n        get: function () {\r\n            return this.notificationsSubscriptionsAnonymousBatchClient;\r\n        },\r\n        enumerable: true,\r\n        configurable: true\r\n    });\r\n    /**\r\n     * Returns a promise that is resolved once the create anonymous subscription action has been performed; this action creates a new anonymous subscription resource.\r\n     * @method\r\n     * @param data An AnonymousSubscription object that needs to be inserted into the system.\r\n     * @returns A promise that is resolved once the create anonymous subscription action has been performed.\r\n     * @example notificationsSubscriptionsAnonymousClient.create({\r\n                    channel: '<channel-name>',\r\n                    registrationId: '<registration-id>'\r\n                })\r\n                .then(function (data) {\r\n                    // perform success action here\r\n                },\r\n                 function (response, status, headers, config) {\r\n                     // perform error handling here\r\n                });\r\n     */\r\n    NotificationsSubscriptionsAnonymousClient.prototype.create = function (data) {\r\n        return this.apiClient.post(this.routeDefinition.create(), this.routeDefinition.createParams(data));\r\n    };\r\n    /**\r\n     * Returns a promise that is resolved once the find action has been performed. Success response returns a list of anonymous subscription resources matching the given criteria.\r\n     * @method\r\n     * @param options Query resource options object.\r\n     * @returns A promise that is resolved once the find action has been performed.\r\n     * @example notificationsSubscriptionsAnonymousClient.find({\r\n                    pageNumber : 1,\r\n                    pageSize : 10,\r\n                    orderBy : '<field>',\r\n                    orderDirection : '<asc|desc>',\r\n                    search : '<search-phrase>',\r\n                    channels: '<channel-name1>,<channel-name2>',\r\n                    registrationIds: '<registration-id1>,<registration-id2>',\r\n                    embed: '<embed>'\r\n                })\r\n                .then(function (collection) {\r\n                    // perform success action here\r\n                },\r\n                 function (response, status, headers, config) {\r\n                     // perform error handling here\r\n                });\r\n     */\r\n    NotificationsSubscriptionsAnonymousClient.prototype.find = function (options) {\r\n        return this.apiClient.get(this.notificationsSubscriptionsAnonymousRoute.find());\r\n    };\r\n    /**\r\n     * Returns a promise that is resolved once the get action has been performed. Success response returns the specified anonymous subscription resource.\r\n     * @method\r\n     * @param id The subscription identifier which uniquely identifies AnonymousSubscription resource that needs to be retrieved.\r\n     * @param options Query resource options object.\r\n     * @returns A promise that is resolved once the get action has been performed.\r\n     * @example notificationsSubscriptionsAnonymousClient.get('<subscription-id>')\r\n                    .then(function (data) {\r\n                        // perform success action here\r\n                    },\r\n                     function (response, status, headers, config) {\r\n                         // perform error handling here\r\n                    });\r\n     */\r\n    NotificationsSubscriptionsAnonymousClient.prototype.get = function (id, options) {\r\n        return this.apiClient.get(this.notificationsSubscriptionsAnonymousRoute.get(id, options));\r\n    };\r\n    /**\r\n     * Returns a promise that is resolved once the remove anonymous subscription action has been performed. This action will remove a anonymous subscription resource from the system if successfully completed. This route uses HAL enabled objects to obtain routes and therefore it doesn't apply `notificationsSubscriptionsAnonymousRoute` route template. Here is an example of how a route can be obtained from HAL enabled objects:\r\n     * ```\r\n     * let params = modelMapper.removeParams(subscription);\r\n     * var uri = params['model'].links('delete').href;\r\n     * ```\r\n     * @method\r\n     * @param data The subscription identifier used to delete specific subscription resource in the system.\r\n     * @returns A promise that is resolved once the remove anonymous subscription action has been performed.\r\n     * @example // subscription is a resource previously fetched using get action.\r\n                        notificationsSubscriptionsAnonymousClient.remove(subscription)\r\n                            .then(function (data) {\r\n                                // perform success action here\r\n                            },\r\n                             function (response, status, headers, config) {\r\n                                 // perform error handling here\r\n                            });\r\n     */\r\n    NotificationsSubscriptionsAnonymousClient.prototype.remove = function (data) {\r\n        return this.apiClient.delete(this.routeDefinition.delete(data));\r\n    };\r\n    /**\r\n     * Returns a promise that is resolved once the update anonymous subscription action has been performed; this action updates a anonymous subscription resource. This route uses HAL enabled objects to obtain routes and therefore it doesn't apply `notificationsSubscriptionsAnonymousRoute` route template. Here is an example of how a route can be obtained from HAL enabled objects:\r\n     * ```\r\n     * let params = modelMapper.updateParams(subscription);\r\n     * let uri = params['model'].links('put').href;\r\n     * ```\r\n     * @method\r\n     * @param data An object used to update specified AnonymousSubscription resource.\r\n     * @returns A promise that is resolved once the update anonymous subscription action has been performed.\r\n     * @example // subscription is a resource previously fetched using get action.\r\n                    subscription.channel = '<channel-name>';\r\n                    notificationsSubscriptionsAnonymousClient.update(subscription)\r\n                        .then(function (data) {\r\n                            // perform success action here\r\n                        },\r\n                         function (response, status, headers, config) {\r\n                             // perform error handling here\r\n                        });\r\n     */\r\n    NotificationsSubscriptionsAnonymousClient.prototype.update = function (data) {\r\n        return this.apiClient.put(this.routeDefinition.update(data), this.routeDefinition.updateParams(data));\r\n    };\r\n    return NotificationsSubscriptionsAnonymousClient;\r\n}());\r\nNotificationsSubscriptionsAnonymousClient = tslib_1.__decorate([\r\n    inversify_1.injectable(),\r\n    tslib_1.__param(0, inversify_1.inject(_1.TYPES.NotificationsSubscriptionsAnonymousRoute)),\r\n    tslib_1.__param(1, inversify_1.inject(_1.TYPES.NotificationsSubscriptionsAnonymousBatchClient)),\r\n    tslib_1.__param(2, inversify_1.inject(httpApi_1.httpTYPES.ApiClient)),\r\n    tslib_1.__metadata(\"design:paramtypes\", [typeof (_a = typeof _1.NotificationsSubscriptionsAnonymousRoute !== \"undefined\" && _1.NotificationsSubscriptionsAnonymousRoute) === \"function\" && _a || Object, typeof (_b = typeof _1.NotificationsSubscriptionsAnonymousBatchClient !== \"undefined\" && _1.NotificationsSubscriptionsAnonymousBatchClient) === \"function\" && _b || Object, typeof (_c = typeof httpApi_1.ApiClient !== \"undefined\" && httpApi_1.ApiClient) === \"function\" && _c || Object])\r\n], NotificationsSubscriptionsAnonymousClient);\r\nexports.NotificationsSubscriptionsAnonymousClient = NotificationsSubscriptionsAnonymousClient;\r\nvar _a, _b, _c;\r\n/**\r\n * @overview\r\n ***Notes:**\r\n - Refer to the [REST API documentation](https://github.com/Baasic/baasic-rest-api/wiki) for detailed information about available Baasic REST API end-points.\r\n - All end-point objects are transformed by the associated route service.\r\n */ \r\n\n\n/***/ }),\n/* 313 */\n/***/ (function(module, exports, __webpack_require__) {\n\n\"use strict\";\n/* globals module */\r\n/**\r\n * @module notificationsSubscriptionsAnonymousRoute\r\n * @description Baasic Notifications Subscriptions Anonymous Route Definition provides Baasic route templates which can be expanded to Baasic REST URIs. Various services can use Baasic Notifications Subscriptions Anonymous Route Definition to obtain needed routes while other routes will be obtained through HAL. By convention, all route services use the same function names as their corresponding services.\r\n */\r\n\r\nObject.defineProperty(exports, \"__esModule\", { value: true });\r\nvar tslib_1 = __webpack_require__(1);\r\nvar inversify_1 = __webpack_require__(0);\r\nvar common_1 = __webpack_require__(2);\r\n;\r\nvar contracts_1 = __webpack_require__(3);\r\nvar _1 = __webpack_require__(7);\r\nvar NotificationsSubscriptionsAnonymousRoute = (function (_super) {\r\n    tslib_1.__extends(NotificationsSubscriptionsAnonymousRoute, _super);\r\n    function NotificationsSubscriptionsAnonymousRoute(notificationsSubscriptionsAnonymousBatchRoute, appOptions) {\r\n        var _this = _super.call(this, appOptions) || this;\r\n        _this.notificationsSubscriptionsAnonymousBatchRoute = notificationsSubscriptionsAnonymousBatchRoute;\r\n        _this.appOptions = appOptions;\r\n        _this.createRoute = 'notifications/subscriptions/batch';\r\n        _this.findRoute = 'notifications/subscriptions/anonymous/{?searchQuery,registrationIds,channels,page,rpp,sort,embed,fields}';\r\n        _this.getRoute = 'notifications/subscriptions/anonymous/{id}/{?embed,fields}';\r\n        _this.deleteRoute = 'notifications/subscriptions/anonymous/{id}';\r\n        _this.updateRoute = 'notifications/subscriptions/anonymous/{id}';\r\n        return _this;\r\n    }\r\n    Object.defineProperty(NotificationsSubscriptionsAnonymousRoute.prototype, \"batch\", {\r\n        get: function () {\r\n            return this.notificationsSubscriptionsAnonymousBatchRoute;\r\n        },\r\n        enumerable: true,\r\n        configurable: true\r\n    });\r\n    /**\r\n     * Parses create anonymous subscription route; this route does not expose any additional options\r\n     * @method\r\n     * @example notificationsSubscriptionsAnonymousRoute.create();\r\n     */\r\n    NotificationsSubscriptionsAnonymousRoute.prototype.create = function () {\r\n        return _super.prototype.baseCreate.call(this, this.createRoute, {});\r\n    };\r\n    /**\r\n     * Parses find anonymous subscriptions route which can be expanded with additional options. Supported items are:\r\n     * - `searchQuery` - A string referencing user subscription properties using the phrase search.\r\n     * - `registrationIds` - Comma separated list of anonymous registration identifiers.\r\n     * - `channels` - Comma separated list of channels.\r\n     * - `page` - A value used to set the page number, i.e. to retrieve certain user subscription subset from the storage.\r\n     * - `rpp` - A value used to limit the size of result set per page.\r\n     * - `sort` - A string used to set the user subscription property to sort the result collection by.\r\n     * - `embed` - Comma separated list of resources to be contained within the current representation.\r\n     * @method\r\n     * @param options Query resource options object.\r\n     * @example notificationsSubscriptionsAnonymousRoute.find({\r\n                   searchQuery: '<search-phrase>',\r\n                   channels: '<channel-name>,<channel-name>'\r\n               });\r\n    */\r\n    NotificationsSubscriptionsAnonymousRoute.prototype.find = function (options) {\r\n        return _super.prototype.baseFind.call(this, this.findRoute, options);\r\n    };\r\n    /**\r\n     * Parses get anonymous subscription route; this route should be expanded with the Id of anonymous subscription resource.\r\n     * @method\r\n     * @param id The subscription identifier which uniquely identifies AnonymousSubscription resource that needs to be retrieved.\r\n     * @param options Query resource options object.\r\n     * @example notificationsSubscriptionsAnonymousRoute.get({id: '<subscription-id>'});\r\n     */\r\n    NotificationsSubscriptionsAnonymousRoute.prototype.get = function (id, options) {\r\n        return _super.prototype.baseGet.call(this, this.getRoute, id, options);\r\n    };\r\n    /**\r\n     * Parses delete anonymous subscription route; this route should be expanded with the Id of anonymous subscription resource.\r\n     * @method\r\n     * @param data The subscription identifier used to delete specific subscription resource in the system.\r\n     * @example notificationsSubscriptionsAnonymousRoute.delete(data);\r\n     */\r\n    NotificationsSubscriptionsAnonymousRoute.prototype.delete = function (data) {\r\n        return _super.prototype.baseDelete.call(this, this.deleteRoute, data);\r\n    };\r\n    /**\r\n     * Parses update anonymous subscription route; this route should be expanded with the Id of anonymous subscription resource.\r\n     * @method\r\n     * @param data The subscription identifier used to update specific subscription resource in the system.\r\n     * @example notificationsSubscriptionsAnonymousRoute.update(data);\r\n     */\r\n    NotificationsSubscriptionsAnonymousRoute.prototype.update = function (data) {\r\n        return _super.prototype.baseUpdate.call(this, this.updateRoute, data);\r\n    };\r\n    return NotificationsSubscriptionsAnonymousRoute;\r\n}(common_1.BaseRoute));\r\nNotificationsSubscriptionsAnonymousRoute = tslib_1.__decorate([\r\n    inversify_1.injectable(),\r\n    tslib_1.__param(0, inversify_1.inject(_1.TYPES.NotificationsSubscriptionsAnonymousBatchRoute)),\r\n    tslib_1.__param(1, inversify_1.inject(contracts_1.TYPES.IAppOptions)),\r\n    tslib_1.__metadata(\"design:paramtypes\", [typeof (_a = typeof _1.NotificationsSubscriptionsAnonymousBatchRoute !== \"undefined\" && _1.NotificationsSubscriptionsAnonymousBatchRoute) === \"function\" && _a || Object, typeof (_b = typeof contracts_1.IAppOptions !== \"undefined\" && contracts_1.IAppOptions) === \"function\" && _b || Object])\r\n], NotificationsSubscriptionsAnonymousRoute);\r\nexports.NotificationsSubscriptionsAnonymousRoute = NotificationsSubscriptionsAnonymousRoute;\r\nvar _a, _b;\r\n/**\r\n * @overview\r\n ***Notes:**\r\n - Refer to the [REST API documentation](https://github.com/Baasic/baasic-rest-api/wiki) for detailed information about available Baasic REST API end-points.\r\n - [URI Template](https://github.com/Baasic/uritemplate-js) syntax enables expanding the Baasic route templates to Baasic REST URIs providing it with an object that contains URI parameters.\r\n - All end-point objects are transformed by the associated route service.\r\n */ \r\n\n\n/***/ }),\n/* 314 */\n/***/ (function(module, exports, __webpack_require__) {\n\n\"use strict\";\n/* globals module */\r\n/**\r\n * @module notificationsSubscriptionsClient\r\n * @description  Notifications Subscriptions Client provides an easy way to consume  Notifications REST API end-points. In order to obtain needed routes `notificationsSubscriptionsClient` uses `notificationsSubscriptionsRoute`.\r\n */\r\n\r\nObject.defineProperty(exports, \"__esModule\", { value: true });\r\nvar tslib_1 = __webpack_require__(1);\r\nvar inversify_1 = __webpack_require__(0);\r\nvar _1 = __webpack_require__(7);\r\nvar NotificationsSubscriptionsClient = (function () {\r\n    function NotificationsSubscriptionsClient(notificationsSubscriptionsRoute, notificationsSubscriptionsAnonymousClient, notificationsSubscriptionsUsersClient) {\r\n        this.notificationsSubscriptionsRoute = notificationsSubscriptionsRoute;\r\n        this.notificationsSubscriptionsAnonymousClient = notificationsSubscriptionsAnonymousClient;\r\n        this.notificationsSubscriptionsUsersClient = notificationsSubscriptionsUsersClient;\r\n    }\r\n    Object.defineProperty(NotificationsSubscriptionsClient.prototype, \"routeDefinition\", {\r\n        get: function () {\r\n            return this.notificationsSubscriptionsRoute;\r\n        },\r\n        enumerable: true,\r\n        configurable: true\r\n    });\r\n    Object.defineProperty(NotificationsSubscriptionsClient.prototype, \"anonymous\", {\r\n        get: function () {\r\n            return this.notificationsSubscriptionsAnonymousClient;\r\n        },\r\n        enumerable: true,\r\n        configurable: true\r\n    });\r\n    Object.defineProperty(NotificationsSubscriptionsClient.prototype, \"users\", {\r\n        get: function () {\r\n            return this.notificationsSubscriptionsUsersClient;\r\n        },\r\n        enumerable: true,\r\n        configurable: true\r\n    });\r\n    return NotificationsSubscriptionsClient;\r\n}());\r\nNotificationsSubscriptionsClient = tslib_1.__decorate([\r\n    inversify_1.injectable(),\r\n    tslib_1.__param(0, inversify_1.inject(_1.TYPES.NotificationsSubscriptionsRoute)),\r\n    tslib_1.__param(1, inversify_1.inject(_1.TYPES.NotificationsSubscriptionsAnonymousClient)),\r\n    tslib_1.__param(2, inversify_1.inject(_1.TYPES.NotificationsSubscriptionsUsersClient)),\r\n    tslib_1.__metadata(\"design:paramtypes\", [typeof (_a = typeof _1.NotificationsSubscriptionsRoute !== \"undefined\" && _1.NotificationsSubscriptionsRoute) === \"function\" && _a || Object, typeof (_b = typeof _1.NotificationsSubscriptionsAnonymousClient !== \"undefined\" && _1.NotificationsSubscriptionsAnonymousClient) === \"function\" && _b || Object, typeof (_c = typeof _1.NotificationsSubscriptionsUsersClient !== \"undefined\" && _1.NotificationsSubscriptionsUsersClient) === \"function\" && _c || Object])\r\n], NotificationsSubscriptionsClient);\r\nexports.NotificationsSubscriptionsClient = NotificationsSubscriptionsClient;\r\nvar _a, _b, _c;\r\n/**\r\n * @overview\r\n ***Notes:**\r\n - Refer to the [REST API documentation](https://github.com/Baasic/baasic-rest-api/wiki) for detailed information about available Baasic REST API end-points.\r\n - All end-point objects are transformed by the associated route service.\r\n */ \r\n\n\n/***/ }),\n/* 315 */\n/***/ (function(module, exports, __webpack_require__) {\n\n\"use strict\";\n/* globals module */\r\n/**\r\n * @module notificationsSubscriptionsRoute\r\n * @description Baasic Notifications Subscriptions Route Definition provides Baasic route templates which can be expanded to Baasic REST URIs. Various services can use Baasic Notifications Route Definition to obtain needed routes while other routes will be obtained through HAL. By convention, all route services use the same function names as their corresponding services.\r\n */\r\n\r\nObject.defineProperty(exports, \"__esModule\", { value: true });\r\nvar tslib_1 = __webpack_require__(1);\r\nvar inversify_1 = __webpack_require__(0);\r\nvar common_1 = __webpack_require__(2);\r\nvar contracts_1 = __webpack_require__(3);\r\nvar _1 = __webpack_require__(7);\r\nvar NotificationsSubscriptionsRoute = (function (_super) {\r\n    tslib_1.__extends(NotificationsSubscriptionsRoute, _super);\r\n    function NotificationsSubscriptionsRoute(notificationsSubscriptionsAnonymousRoute, notificationsSubscriptionsUsersRoute, appOptions) {\r\n        var _this = _super.call(this, appOptions) || this;\r\n        _this.notificationsSubscriptionsAnonymousRoute = notificationsSubscriptionsAnonymousRoute;\r\n        _this.notificationsSubscriptionsUsersRoute = notificationsSubscriptionsUsersRoute;\r\n        _this.appOptions = appOptions;\r\n        return _this;\r\n    }\r\n    Object.defineProperty(NotificationsSubscriptionsRoute.prototype, \"users\", {\r\n        get: function () {\r\n            return this.notificationsSubscriptionsUsersRoute;\r\n        },\r\n        enumerable: true,\r\n        configurable: true\r\n    });\r\n    Object.defineProperty(NotificationsSubscriptionsRoute.prototype, \"anonymous\", {\r\n        get: function () {\r\n            return this.notificationsSubscriptionsAnonymousRoute;\r\n        },\r\n        enumerable: true,\r\n        configurable: true\r\n    });\r\n    return NotificationsSubscriptionsRoute;\r\n}(common_1.BaseRoute));\r\nNotificationsSubscriptionsRoute = tslib_1.__decorate([\r\n    inversify_1.injectable(),\r\n    tslib_1.__param(0, inversify_1.inject(_1.TYPES.NotificationsSubscriptionsAnonymousRoute)),\r\n    tslib_1.__param(1, inversify_1.inject(_1.TYPES.NotificationsSubscriptionsUsersRoute)),\r\n    tslib_1.__param(2, inversify_1.inject(contracts_1.TYPES.IAppOptions)),\r\n    tslib_1.__metadata(\"design:paramtypes\", [typeof (_a = typeof _1.NotificationsSubscriptionsAnonymousRoute !== \"undefined\" && _1.NotificationsSubscriptionsAnonymousRoute) === \"function\" && _a || Object, typeof (_b = typeof _1.NotificationsSubscriptionsUsersRoute !== \"undefined\" && _1.NotificationsSubscriptionsUsersRoute) === \"function\" && _b || Object, typeof (_c = typeof contracts_1.IAppOptions !== \"undefined\" && contracts_1.IAppOptions) === \"function\" && _c || Object])\r\n], NotificationsSubscriptionsRoute);\r\nexports.NotificationsSubscriptionsRoute = NotificationsSubscriptionsRoute;\r\nvar _a, _b, _c;\r\n/**\r\n * @overview\r\n ***Notes:**\r\n - Refer to the [REST API documentation](https://github.com/Baasic/baasic-rest-api/wiki) for detailed information about available Baasic REST API end-points.\r\n - [URI Template](https://github.com/Baasic/uritemplate-js) syntax enables expanding the Baasic route templates to Baasic REST URIs providing it with an object that contains URI parameters.\r\n - All end-point objects are transformed by the associated route service.\r\n */ \r\n\n\n/***/ }),\n/* 316 */\n/***/ (function(module, exports, __webpack_require__) {\n\n\"use strict\";\n/* globals module */\r\n/**\r\n * @module notificationsSubscriptionsUsersBatchClient\r\n * @description  Notifications Subscriptions Users Batch Client provides an easy way to consume  Notifications REST API end-points. In order to obtain needed routes `notificationsSubscriptionsUsersBatchUsersClient` uses `notificationsSubscriptionsUsersBatchRoute`.\r\n */\r\n\r\nObject.defineProperty(exports, \"__esModule\", { value: true });\r\nvar tslib_1 = __webpack_require__(1);\r\nvar inversify_1 = __webpack_require__(0);\r\n;\r\nvar httpApi_1 = __webpack_require__(4);\r\nvar _1 = __webpack_require__(7);\r\nvar NotificationsSubscriptionsUsersBatchClient = (function () {\r\n    function NotificationsSubscriptionsUsersBatchClient(notificationsSubscriptionsUsersBatchRoute, apiClient) {\r\n        this.notificationsSubscriptionsUsersBatchRoute = notificationsSubscriptionsUsersBatchRoute;\r\n        this.apiClient = apiClient;\r\n    }\r\n    Object.defineProperty(NotificationsSubscriptionsUsersBatchClient.prototype, \"routeDefinition\", {\r\n        get: function () {\r\n            return this.notificationsSubscriptionsUsersBatchRoute;\r\n        },\r\n        enumerable: true,\r\n        configurable: true\r\n    });\r\n    /**\r\n     * Returns a promise that is resolved once the create user subscription action has been performed; this action creates new user subscription resources.\r\n     * @method\r\n     * @param data UserSubscription collection that need to be inserted into the system.\r\n     * @returns A promise that is resolved once the create user subscription action has been performed.\r\n     * @example notificationsSubscriptionsUsersBatchClient.create([{\r\n                    channel: '<channel-name>',\r\n                    userId: '<user-id>'\r\n                }])\r\n                .then(function (data) {\r\n                    // perform success action here\r\n                },\r\n                 function (response, status, headers, config) {\r\n                     // perform error handling here\r\n                });\r\n     */\r\n    NotificationsSubscriptionsUsersBatchClient.prototype.create = function (data) {\r\n        return this.apiClient.post(this.routeDefinition.create(), this.routeDefinition.createParams(data));\r\n    };\r\n    /**\r\n     * Returns a promise that is resolved once the remove action has been performed. This action will remove user subscription resources from the system if successfully completed.\r\n     * @method\r\n     * @param ids The subscription ids which uniquely identify UserSubscription resources that need to be deleted.\r\n     * @returns A promise that is resolved once the remove action has been performed.\r\n     * @example notificationsSubscriptionsUsersBatchClient.remove(subscriptionIds)\r\n                    .then(function (data) {\r\n                        // perform success action here\r\n                    },\r\n                     function (response, status, headers, config) {\r\n                         // perform error handling here\r\n                    });\r\n     */\r\n    NotificationsSubscriptionsUsersBatchClient.prototype.remove = function (ids) {\r\n        return this.apiClient.delete(this.notificationsSubscriptionsUsersBatchRoute.delete(), undefined, ids);\r\n    };\r\n    /**\r\n     * Returns a promise that is resolved once the update user subscriptions action has been performed; this action updates specified user subscription resources.\r\n     * @method\r\n     * @param data UserSubscription objects used to update specified UserSubscription resources.\r\n     * @returns A promise that is resolved once the update user subscriptions action has been performed.\r\n     * @example notificationsSubscriptionsUsersBatchClient.update(subscriptions)\r\n                    .then(function (data) {\r\n                        // perform success action here\r\n                    },\r\n                     function (response, status, headers, config) {\r\n                         // perform error handling here\r\n                    });\r\n     */\r\n    NotificationsSubscriptionsUsersBatchClient.prototype.update = function (data) {\r\n        return this.apiClient.put(this.routeDefinition.update(), this.routeDefinition.updateParams(data));\r\n    };\r\n    return NotificationsSubscriptionsUsersBatchClient;\r\n}());\r\nNotificationsSubscriptionsUsersBatchClient = tslib_1.__decorate([\r\n    inversify_1.injectable(),\r\n    tslib_1.__param(0, inversify_1.inject(_1.TYPES.NotificationsSubscriptionsUsersBatchRoute)),\r\n    tslib_1.__param(1, inversify_1.inject(httpApi_1.httpTYPES.ApiClient)),\r\n    tslib_1.__metadata(\"design:paramtypes\", [typeof (_a = typeof _1.NotificationsSubscriptionsUsersBatchRoute !== \"undefined\" && _1.NotificationsSubscriptionsUsersBatchRoute) === \"function\" && _a || Object, typeof (_b = typeof httpApi_1.ApiClient !== \"undefined\" && httpApi_1.ApiClient) === \"function\" && _b || Object])\r\n], NotificationsSubscriptionsUsersBatchClient);\r\nexports.NotificationsSubscriptionsUsersBatchClient = NotificationsSubscriptionsUsersBatchClient;\r\nvar _a, _b;\r\n/**\r\n * @overview\r\n ***Notes:**\r\n - Refer to the [REST API documentation](https://github.com/Baasic/baasic-rest-api/wiki) for detailed information about available Baasic REST API end-points.\r\n - All end-point objects are transformed by the associated route service.\r\n */ \r\n\n\n/***/ }),\n/* 317 */\n/***/ (function(module, exports, __webpack_require__) {\n\n\"use strict\";\n/* globals module */\r\n/**\r\n * @module notificationsSubscriptionsUsersBatchRoute\r\n * @description Baasic Notifications Subscriptions Users Batch Route Definition provides Baasic route templates which can be expanded to Baasic REST URIs. Various services can use Baasic Notifications Subscriptions Users Batch Route Definition to obtain needed routes while other routes will be obtained through HAL. By convention, all route services use the same function names as their corresponding services.\r\n */\r\n\r\nObject.defineProperty(exports, \"__esModule\", { value: true });\r\nvar tslib_1 = __webpack_require__(1);\r\nvar inversify_1 = __webpack_require__(0);\r\nvar common_1 = __webpack_require__(2);\r\n;\r\nvar contracts_1 = __webpack_require__(3);\r\nvar NotificationsSubscriptionsUsersBatchRoute = (function (_super) {\r\n    tslib_1.__extends(NotificationsSubscriptionsUsersBatchRoute, _super);\r\n    function NotificationsSubscriptionsUsersBatchRoute(appOptions) {\r\n        var _this = _super.call(this, appOptions) || this;\r\n        _this.appOptions = appOptions;\r\n        _this.createRoute = 'notifications/subscriptions/batch';\r\n        _this.deleteRoute = 'notifications/subscriptions/batch';\r\n        _this.updateRoute = 'notifications/subscriptions/batch';\r\n        return _this;\r\n    }\r\n    /**\r\n     * Parses create user subscriptions batch route; this route does not expose any additional options\r\n     * @method\r\n     * @example notificationsSubscriptionsUsersBatchRoute.create();\r\n     */\r\n    NotificationsSubscriptionsUsersBatchRoute.prototype.create = function () {\r\n        return _super.prototype.baseCreate.call(this, this.createRoute, {});\r\n    };\r\n    /**\r\n     * Parses remove user subscriptions batch route; this route does not expose any additional options\r\n     * @method\r\n     * @example notificationsSubscriptionsUsersBatchRoute.delete(ids);\r\n     */\r\n    NotificationsSubscriptionsUsersBatchRoute.prototype.delete = function () {\r\n        return _super.prototype.baseDelete.call(this, this.deleteRoute, {});\r\n    };\r\n    /**\r\n     * Parses update user subscriptions batch route; this route does not expose any additional options\r\n     * @method\r\n     * @example notificationsSubscriptionsUsersBatchRoute.update();\r\n     */\r\n    NotificationsSubscriptionsUsersBatchRoute.prototype.update = function () {\r\n        return _super.prototype.baseUpdate.call(this, this.updateRoute, {});\r\n    };\r\n    return NotificationsSubscriptionsUsersBatchRoute;\r\n}(common_1.BaseRoute));\r\nNotificationsSubscriptionsUsersBatchRoute = tslib_1.__decorate([\r\n    inversify_1.injectable(),\r\n    tslib_1.__param(0, inversify_1.inject(contracts_1.TYPES.IAppOptions)),\r\n    tslib_1.__metadata(\"design:paramtypes\", [typeof (_a = typeof contracts_1.IAppOptions !== \"undefined\" && contracts_1.IAppOptions) === \"function\" && _a || Object])\r\n], NotificationsSubscriptionsUsersBatchRoute);\r\nexports.NotificationsSubscriptionsUsersBatchRoute = NotificationsSubscriptionsUsersBatchRoute;\r\nvar _a;\r\n/**\r\n * @overview\r\n ***Notes:**\r\n - Refer to the [REST API documentation](https://github.com/Baasic/baasic-rest-api/wiki) for detailed information about available Baasic REST API end-points.\r\n - [URI Template](https://github.com/Baasic/uritemplate-js) syntax enables expanding the Baasic route templates to Baasic REST URIs providing it with an object that contains URI parameters.\r\n - All end-point objects are transformed by the associated route service.\r\n */ \r\n\n\n/***/ }),\n/* 318 */\n/***/ (function(module, exports, __webpack_require__) {\n\n\"use strict\";\n/* globals module */\r\n/**\r\n * @module notificationsSubscriptionsUsersClient\r\n * @description  Notifications Subscriptions Users Client provides an easy way to consume  Notifications REST API end-points. In order to obtain needed routes `notificationsSubscriptionsUsersClient` uses `notificationsSubscriptionsUsersRoute`.\r\n */\r\n\r\nObject.defineProperty(exports, \"__esModule\", { value: true });\r\nvar tslib_1 = __webpack_require__(1);\r\nvar inversify_1 = __webpack_require__(0);\r\n;\r\nvar httpApi_1 = __webpack_require__(4);\r\nvar _1 = __webpack_require__(7);\r\nvar NotificationsSubscriptionsUsersClient = (function () {\r\n    function NotificationsSubscriptionsUsersClient(notificationsSubscriptionsUsersRoute, NotificationsSubscriptionsUsersBatchClient, apiClient) {\r\n        this.notificationsSubscriptionsUsersRoute = notificationsSubscriptionsUsersRoute;\r\n        this.NotificationsSubscriptionsUsersBatchClient = NotificationsSubscriptionsUsersBatchClient;\r\n        this.apiClient = apiClient;\r\n    }\r\n    Object.defineProperty(NotificationsSubscriptionsUsersClient.prototype, \"routeDefinition\", {\r\n        get: function () {\r\n            return this.notificationsSubscriptionsUsersRoute;\r\n        },\r\n        enumerable: true,\r\n        configurable: true\r\n    });\r\n    Object.defineProperty(NotificationsSubscriptionsUsersClient.prototype, \"batch\", {\r\n        get: function () {\r\n            return this.NotificationsSubscriptionsUsersBatchClient;\r\n        },\r\n        enumerable: true,\r\n        configurable: true\r\n    });\r\n    /**\r\n     * Returns a promise that is resolved once the create user subscription action has been performed; this action creates a new user subscription resource.\r\n     * @method\r\n     * @param data An UserSubscription object that needs to be inserted into the system.\r\n     * @returns A promise that is resolved once the create user subscription action has been performed.\r\n     * @example notificationsSubscriptionsUsersClient.create({\r\n                    channel: '<channel-name>',\r\n                    userId: '<user-id>'\r\n                })\r\n                .then(function (data) {\r\n                    // perform success action here\r\n                },\r\n                 function (response, status, headers, config) {\r\n                     // perform error handling here\r\n                });\r\n     */\r\n    NotificationsSubscriptionsUsersClient.prototype.create = function (data) {\r\n        return this.apiClient.post(this.routeDefinition.create(), this.routeDefinition.createParams(data));\r\n    };\r\n    /**\r\n     * Returns a promise that is resolved once the find action has been performed. Success response returns a list of user subscription resources matching the given criteria.\r\n     * @method\r\n     * @param options Query resource options object.\r\n     * @returns A promise that is resolved once the find action has been performed.\r\n     * @example notificationsSubscriptionsUsersClient.find({\r\n                    pageNumber : 1,\r\n                    pageSize : 10,\r\n                    orderBy : '<field>',\r\n                    orderDirection : '<asc|desc>',\r\n                    search : '<search-phrase>',\r\n                    channels: '<channel-name1>,<channel-name2>',\r\n                    userIds: '<user-id1>,<user-id2>',\r\n                    embed: '<embed>'\r\n                })\r\n                .then(function (collection) {\r\n                    // perform success action here\r\n                },\r\n                 function (response, status, headers, config) {\r\n                     // perform error handling here\r\n                });\r\n     */\r\n    NotificationsSubscriptionsUsersClient.prototype.find = function (options) {\r\n        return this.apiClient.get(this.routeDefinition.find(options));\r\n    };\r\n    /**\r\n     * Returns a promise that is resolved once the get action has been performed. Success response returns the specified user subscription resource.\r\n     * @method\r\n     * @param id The subscription identifier which uniquely identifies UserSubscription resource that needs to be retrieved.\r\n     * @param options Query resource options object.\r\n     * @returns A promise that is resolved once the get action has been performed.\r\n     * @example notificationsSubscriptionsUsersClient.get('<subscription-id>')\r\n                   .then(function (data) {\r\n                       // perform success action here\r\n                   },\r\n                    function (response, status, headers, config) {\r\n                        // perform error handling here\r\n                   });\r\n    */\r\n    NotificationsSubscriptionsUsersClient.prototype.get = function (id, options) {\r\n        return this.apiClient.get(this.notificationsSubscriptionsUsersRoute.get(id, options));\r\n    };\r\n    /**\r\n     * Returns a promise that is resolved once the remove user subscription action has been performed. This action will remove a user subscription resource from the system if successfully completed. This route uses HAL enabled objects to obtain routes and therefore it doesn't apply `notificationsSubscriptionsUsersRoute` route template. Here is an example of how a route can be obtained from HAL enabled objects:\r\n     * ```\r\n     * let params = modelMapper.removeParams(subscription);\r\n     * let uri = params['model'].links('delete').href;\r\n     * ```\r\n     * @method\r\n     * @param data An object used to delete specified UserSubscription resource.\r\n     * @returns A promise that is resolved once the remove user subscription action has been performed.\r\n     * @example // subscription is a resource previously fetched using get action.\r\n                    notificationsSubscriptionsUsersClient.remove(subscription)\r\n                        .then(function (data) {\r\n                            // perform success action here\r\n                        },\r\n                         function (response, status, headers, config) {\r\n                             // perform error handling here\r\n                        });\r\n     */\r\n    NotificationsSubscriptionsUsersClient.prototype.remove = function (data) {\r\n        return this.apiClient.delete(this.routeDefinition.delete(data));\r\n    };\r\n    /**\r\n     * Returns a promise that is resolved once the update user subscription action has been performed; this action updates a user subscription resource. This route uses HAL enabled objects to obtain routes and therefore it doesn't apply `notificationsSubscriptionsUsersRoute` route template. Here is an example of how a route can be obtained from HAL enabled objects:\r\n     * ```\r\n     * let params = modelMapper.updateParams(subscription);\r\n     * let uri = params['model'].links('put').href;\r\n     * ```\r\n     * @method\r\n     * @param data An object used to update specified UserSubscription resource.\r\n     * @example // subscription is a resource previously fetched using get action.\r\n                       subscription.channel = '<channel-name>';\r\n                       notificationsSubscriptionsUsersClient.update(subscription)\r\n                           .then(function (data) {\r\n                               // perform success action here\r\n                           },\r\n                            function (response, status, headers, config) {\r\n                                // perform error handling here\r\n                           });\r\n    */\r\n    NotificationsSubscriptionsUsersClient.prototype.update = function (data) {\r\n        return this.apiClient.put(this.routeDefinition.update(data), this.routeDefinition.updateParams(data));\r\n    };\r\n    return NotificationsSubscriptionsUsersClient;\r\n}());\r\nNotificationsSubscriptionsUsersClient = tslib_1.__decorate([\r\n    inversify_1.injectable(),\r\n    tslib_1.__param(0, inversify_1.inject(_1.TYPES.NotificationsSubscriptionsUsersRoute)),\r\n    tslib_1.__param(1, inversify_1.inject(_1.TYPES.NotificationsSubscriptionsUsersBatchClient)),\r\n    tslib_1.__param(2, inversify_1.inject(httpApi_1.httpTYPES.ApiClient)),\r\n    tslib_1.__metadata(\"design:paramtypes\", [typeof (_a = typeof _1.NotificationsSubscriptionsUsersRoute !== \"undefined\" && _1.NotificationsSubscriptionsUsersRoute) === \"function\" && _a || Object, typeof (_b = typeof _1.NotificationsSubscriptionsUsersBatchClient !== \"undefined\" && _1.NotificationsSubscriptionsUsersBatchClient) === \"function\" && _b || Object, typeof (_c = typeof httpApi_1.ApiClient !== \"undefined\" && httpApi_1.ApiClient) === \"function\" && _c || Object])\r\n], NotificationsSubscriptionsUsersClient);\r\nexports.NotificationsSubscriptionsUsersClient = NotificationsSubscriptionsUsersClient;\r\nvar _a, _b, _c;\r\n/**\r\n * @overview\r\n ***Notes:**\r\n - Refer to the [REST API documentation](https://github.com/Baasic/baasic-rest-api/wiki) for detailed information about available Baasic REST API end-points.\r\n - All end-point objects are transformed by the associated route service.\r\n */ \r\n\n\n/***/ }),\n/* 319 */\n/***/ (function(module, exports, __webpack_require__) {\n\n\"use strict\";\n/* globals module */\r\n/**\r\n * @module notificationsSubscriptionsUsersRoute\r\n * @description Baasic Notifications Subscriptions Users Route Definition provides Baasic route templates which can be expanded to Baasic REST URIs. Various services can use Baasic Notifications Route Definition to obtain needed routes while other routes will be obtained through HAL. By convention, all route services use the same function names as their corresponding services.\r\n */\r\n\r\nObject.defineProperty(exports, \"__esModule\", { value: true });\r\nvar tslib_1 = __webpack_require__(1);\r\nvar inversify_1 = __webpack_require__(0);\r\nvar common_1 = __webpack_require__(2);\r\n;\r\nvar contracts_1 = __webpack_require__(3);\r\nvar _1 = __webpack_require__(7);\r\nvar NotificationsSubscriptionsUsersRoute = (function (_super) {\r\n    tslib_1.__extends(NotificationsSubscriptionsUsersRoute, _super);\r\n    function NotificationsSubscriptionsUsersRoute(appOptions, notificationsSubscriptionsUsersBatchRoute) {\r\n        var _this = _super.call(this, appOptions) || this;\r\n        _this.appOptions = appOptions;\r\n        _this.notificationsSubscriptionsUsersBatchRoute = notificationsSubscriptionsUsersBatchRoute;\r\n        _this.createRoute = 'notifications/subscriptions';\r\n        _this.findRoute = 'notifications/subscriptions/{?searchQuery,userIds,channels,page,rpp,sort,embed,fields}';\r\n        _this.getRoute = 'notifications/subscriptions/{id}/{?embed,fields}';\r\n        _this.deleteRoute = 'notifications/subscriptions/{id}';\r\n        _this.updateRoute = 'notifications/subscriptions/{id}';\r\n        return _this;\r\n    }\r\n    NotificationsSubscriptionsUsersRoute.prototype.batch = function () {\r\n        return this.notificationsSubscriptionsUsersBatchRoute;\r\n    };\r\n    /**\r\n     * Parses create user subscription route; this route does not expose any additional options\r\n     * @method\r\n     * @example notificationsSubscriptionsUsersRoute.create();\r\n     */\r\n    NotificationsSubscriptionsUsersRoute.prototype.create = function () {\r\n        return _super.prototype.baseCreate.call(this, this.createRoute, {});\r\n    };\r\n    /**\r\n     * Parses find user subscriptions route which can be expanded with additional options. Supported items are:\r\n     * - `searchQuery` - A string referencing user subscription properties using the phrase search.\r\n     * - `userIds` - Comma separated list of user identifiers.\r\n     * - `channels` - Comma separated list of channels.\r\n     * - `page` - A value used to set the page number, i.e. to retrieve certain user subscriptions subset from the storage.\r\n     * - `rpp` - A value used to limit the size of result set per page.\r\n     * - `sort` - A string used to set the user subscription property to sort the result collection by.\r\n     * - `embed` - Comma separated list of resources to be contained within the current representation.\r\n     * @method\r\n     * @example notificationsSubscriptionsUsersRoute.find({ searchQuery: '<search-phrase>', channels: '<channel-name>,<channel-name>' });\r\n     */\r\n    NotificationsSubscriptionsUsersRoute.prototype.find = function (options) {\r\n        return _super.prototype.baseFind.call(this, this.findRoute, options);\r\n    };\r\n    /**\r\n     * Parses get user subscription route; this route should be expanded with the Id of user subscription resource.\r\n     * @method\r\n     * @param id The subscription identifier which uniquely identifies UserSubscription resource that needs to be retrieved.\r\n     * @param options Query resource options object.\r\n     * @example notificationsSubscriptionsUsersRoute.get({ id: '<subscription-id>' });\r\n     */\r\n    NotificationsSubscriptionsUsersRoute.prototype.get = function (id, options) {\r\n        return _super.prototype.baseGet.call(this, this.getRoute, id, options);\r\n    };\r\n    /**\r\n     * Parses delete user subscription route; this route should be expanded with the Id of user subscription resource.\r\n     * @method\r\n     * @param data An object used to delete specified UserSubscription resource.\r\n     * @example notificationsSubscriptionsUsersRoute.delete(data);\r\n     */\r\n    NotificationsSubscriptionsUsersRoute.prototype.delete = function (data) {\r\n        return _super.prototype.baseDelete.call(this, this.deleteRoute, data);\r\n    };\r\n    /**\r\n     * Parses update user subscription route; this route should be expanded with the Id of user subscription resource.\r\n     * @method\r\n     * @param data An object used to update specified UserSubscription resource.\r\n     * @example notificationsSubscriptionsUsersRoute.update(data);\r\n     */\r\n    NotificationsSubscriptionsUsersRoute.prototype.update = function (data) {\r\n        return _super.prototype.baseUpdate.call(this, this.updateRoute, data);\r\n    };\r\n    return NotificationsSubscriptionsUsersRoute;\r\n}(common_1.BaseRoute));\r\nNotificationsSubscriptionsUsersRoute = tslib_1.__decorate([\r\n    inversify_1.injectable(),\r\n    tslib_1.__param(0, inversify_1.inject(contracts_1.TYPES.IAppOptions)),\r\n    tslib_1.__param(1, inversify_1.inject(_1.TYPES.NotificationsSubscriptionsUsersBatchRoute)),\r\n    tslib_1.__metadata(\"design:paramtypes\", [typeof (_a = typeof contracts_1.IAppOptions !== \"undefined\" && contracts_1.IAppOptions) === \"function\" && _a || Object, typeof (_b = typeof _1.NotificationsSubscriptionsUsersBatchRoute !== \"undefined\" && _1.NotificationsSubscriptionsUsersBatchRoute) === \"function\" && _b || Object])\r\n], NotificationsSubscriptionsUsersRoute);\r\nexports.NotificationsSubscriptionsUsersRoute = NotificationsSubscriptionsUsersRoute;\r\nvar _a, _b;\r\n/**\r\n * @overview\r\n ***Notes:**\r\n - Refer to the [REST API documentation](https://github.com/Baasic/baasic-rest-api/wiki) for detailed information about available Baasic REST API end-points.\r\n - [URI Template](https://github.com/Baasic/uritemplate-js) syntax enables expanding the Baasic route templates to Baasic REST URIs providing it with an object that contains URI parameters.\r\n - All end-point objects are transformed by the associated route service.\r\n */ \r\n\n\n/***/ }),\n/* 320 */\n/***/ (function(module, exports, __webpack_require__) {\n\n\"use strict\";\n\r\nObject.defineProperty(exports, \"__esModule\", { value: true });\r\nvar inversify_1 = __webpack_require__(0);\r\nvar _1 = __webpack_require__(21);\r\nvar TYPES = {\r\n    TemplatingBatchClient: Symbol(\"TemplatingBatchClient\"),\r\n    TemplatingBatchRoute: Symbol(\"TemplatingBatchRoute\"),\r\n    TemplatingClient: Symbol(\"TemplatingClient\"),\r\n    TemplatingRoute: Symbol(\"TemplatingRoute\")\r\n};\r\nexports.TYPES = TYPES;\r\nvar diModule = new inversify_1.ContainerModule(function (bind) {\r\n    bind(TYPES.TemplatingBatchRoute).to(_1.TemplatingBatchRoute);\r\n    bind(TYPES.TemplatingBatchClient).to(_1.TemplatingBatchClient);\r\n    bind(TYPES.TemplatingRoute).to(_1.TemplatingRoute);\r\n    bind(TYPES.TemplatingClient).to(_1.TemplatingClient);\r\n});\r\nexports.diModule = diModule;\r\n\n\n/***/ }),\n/* 321 */\n/***/ (function(module, exports, __webpack_require__) {\n\n\"use strict\";\n/* globals module */\r\n/**\r\n * @module templatingBatchClient\r\n * @description  Templating Batch Client provides an easy way to consume  Templating REST API end-points. In order to obtain a needed routes `templatingBatchClient` uses `templatingBatchRoute`.\r\n */\r\n\r\nObject.defineProperty(exports, \"__esModule\", { value: true });\r\nvar tslib_1 = __webpack_require__(1);\r\nvar inversify_1 = __webpack_require__(0);\r\n;\r\nvar httpApi_1 = __webpack_require__(4);\r\nvar _1 = __webpack_require__(21);\r\nvar TemplatingBatchClient = (function () {\r\n    function TemplatingBatchClient(templatingBatchRoute, apiClient) {\r\n        this.templatingBatchRoute = templatingBatchRoute;\r\n        this.apiClient = apiClient;\r\n    }\r\n    Object.defineProperty(TemplatingBatchClient.prototype, \"routeDefinition\", {\r\n        get: function () {\r\n            return this.templatingBatchRoute;\r\n        },\r\n        enumerable: true,\r\n        configurable: true\r\n    });\r\n    /**\r\n     * Returns a promise that is resolved once the create action has been performed; this action creates new template resources.\r\n     * @method\r\n     * @param data An Template objects that need to be inserted into the system.\r\n     * @returns A promise that is resolved once the create action has been performed.\r\n     * @example templatingBatchClient.create([{ content : '<content>', templateId : '<template-id>' }])\r\n                    .then(function (data) {\r\n                        // perform success action here\r\n                    },\r\n                     function (response, status, headers, config) {\r\n                        // perform error handling here\r\n                    });\r\n    **/\r\n    TemplatingBatchClient.prototype.create = function (data) {\r\n        return this.apiClient.post(this.routeDefinition.create(), this.routeDefinition.createParams(data));\r\n    };\r\n    /**\r\n     * Returns a promise that is resolved once the update action has been performed; this action updates specified template resources.\r\n     * @method\r\n     * @param data An Template objects that need to be inserted into the system.\r\n     * @returns A promise that is resolved once the update action has been performed.\r\n     * @example templatingBatchClient.update(templates)\r\n                    .then(function (data) {\r\n                        // perform success action here\r\n                    },\r\n                     function (response, status, headers, config) {\r\n                         // perform error handling here\r\n                    });\r\n     **/\r\n    TemplatingBatchClient.prototype.update = function (data) {\r\n        return this.apiClient.put(this.routeDefinition.update(), this.routeDefinition.updateParams(data));\r\n    };\r\n    /**\r\n     * Returns a promise that is resolved once the remove action has been performed. This action will remove template resources from the system if successfully completed.\r\n     * @method\r\n     * @param ids Template ids which uniquely identify Template resources that need to be deleted.\r\n     * @returns A promise that is resolved once the update action has been performed.\r\n     * @example templatingBatchClient.remove(companyIds)\r\n                    .then(function (data) {\r\n                        // perform success action here\r\n                    },\r\n                     function (response, status, headers, config) {\r\n                         // perform error handling here\r\n                    });\r\n     **/\r\n    TemplatingBatchClient.prototype.remove = function (ids) {\r\n        return this.apiClient.delete(this.templatingBatchRoute.delete(), undefined, ids);\r\n    };\r\n    return TemplatingBatchClient;\r\n}());\r\nTemplatingBatchClient = tslib_1.__decorate([\r\n    inversify_1.injectable(),\r\n    tslib_1.__param(0, inversify_1.inject(_1.TYPES.TemplatingBatchRoute)),\r\n    tslib_1.__param(1, inversify_1.inject(httpApi_1.httpTYPES.ApiClient)),\r\n    tslib_1.__metadata(\"design:paramtypes\", [typeof (_a = typeof _1.TemplatingBatchRoute !== \"undefined\" && _1.TemplatingBatchRoute) === \"function\" && _a || Object, typeof (_b = typeof httpApi_1.ApiClient !== \"undefined\" && httpApi_1.ApiClient) === \"function\" && _b || Object])\r\n], TemplatingBatchClient);\r\nexports.TemplatingBatchClient = TemplatingBatchClient;\r\nvar _a, _b;\r\n/**\r\n * @overview\r\n ***Notes:**\r\n - Refer to the [REST API documentation](https://github.com/Baasic/baasic-rest-api/wiki) for detailed information about available Baasic REST API end-points.\r\n - All end-point objects are transformed by the associated route definition.\r\n */ \r\n\n\n/***/ }),\n/* 322 */\n/***/ (function(module, exports, __webpack_require__) {\n\n\"use strict\";\n/*global module */\r\n/**\r\n * @module templatingBatchRoute\r\n * @description Baasic Templating Batch Route Definition provides Baasic route templates which can be expanded to Baasic REST URIs. Various services can use Baasic Templating Batch Route Definition to obtain a needed routes while other routes will be obtained through HAL. By convention, all route services use the same function names as their corresponding services.\r\n */\r\n\r\nObject.defineProperty(exports, \"__esModule\", { value: true });\r\nvar tslib_1 = __webpack_require__(1);\r\nvar inversify_1 = __webpack_require__(0);\r\nvar common_1 = __webpack_require__(2);\r\nvar contracts_1 = __webpack_require__(3);\r\nvar TemplatingBatchRoute = (function (_super) {\r\n    tslib_1.__extends(TemplatingBatchRoute, _super);\r\n    function TemplatingBatchRoute(appOptions) {\r\n        var _this = _super.call(this, appOptions) || this;\r\n        _this.appOptions = appOptions;\r\n        _this.createRoute = 'templates/batch';\r\n        _this.updateRoute = 'templates/batch';\r\n        _this.deleteRoute = 'templates/batch';\r\n        return _this;\r\n    }\r\n    /**\r\n     * Parses create route; this URI template does not expose any additional options.\r\n     * @method\r\n     * @example templatingBatchRoute.create();\r\n     **/\r\n    TemplatingBatchRoute.prototype.create = function () {\r\n        return _super.prototype.baseCreate.call(this, this.createRoute, {});\r\n    };\r\n    /**\r\n     * Parses update route; this URI template does not expose any additional options.\r\n     * @method\r\n     * @example templatingBatchRoute.update();\r\n     **/\r\n    TemplatingBatchRoute.prototype.update = function () {\r\n        return _super.prototype.baseUpdate.call(this, this.updateRoute, {});\r\n    };\r\n    /**\r\n     * Parses remove route; this URI template does not expose any additional options.\r\n     * @method\r\n     * @example templatingBatchRoute.delete();\r\n     **/\r\n    TemplatingBatchRoute.prototype.delete = function () {\r\n        return _super.prototype.baseDelete.call(this, this.deleteRoute, {});\r\n    };\r\n    return TemplatingBatchRoute;\r\n}(common_1.BaseRoute));\r\nTemplatingBatchRoute = tslib_1.__decorate([\r\n    inversify_1.injectable(),\r\n    tslib_1.__param(0, inversify_1.inject(contracts_1.TYPES.IAppOptions)),\r\n    tslib_1.__metadata(\"design:paramtypes\", [typeof (_a = typeof contracts_1.IAppOptions !== \"undefined\" && contracts_1.IAppOptions) === \"function\" && _a || Object])\r\n], TemplatingBatchRoute);\r\nexports.TemplatingBatchRoute = TemplatingBatchRoute;\r\nvar _a;\r\n/**\r\n * @overview\r\n ***Notes:**\r\n - Refer to the [REST API documentation](https://github.com/Baasic/baasic-rest-api/wiki) for detailed information about available Baasic REST API end-points.\r\n - [URI Template](https://github.com/Baasic/uritemplate-js) syntax enables expanding the Baasic route templates to Baasic REST URIs providing it with an object that contains URI parameters.\r\n - All end-point objects are transformed by the associated route definition.\r\n */ \r\n\n\n/***/ }),\n/* 323 */\n/***/ (function(module, exports, __webpack_require__) {\n\n\"use strict\";\n/* globals module */\r\n/**\r\n * @module templatingClient\r\n * @description  Templating Client provides an easy way to consume  Templating REST API end-points. In order to obtain a needed routes `templatingClient` uses `templatingRoute`.\r\n */\r\n\r\nObject.defineProperty(exports, \"__esModule\", { value: true });\r\nvar tslib_1 = __webpack_require__(1);\r\nvar inversify_1 = __webpack_require__(0);\r\n;\r\nvar httpApi_1 = __webpack_require__(4);\r\nvar _1 = __webpack_require__(21);\r\nvar TemplatingClient = (function () {\r\n    function TemplatingClient(templatingRoute, templatingBatchClient, apiClient) {\r\n        this.templatingRoute = templatingRoute;\r\n        this.templatingBatchClient = templatingBatchClient;\r\n        this.apiClient = apiClient;\r\n    }\r\n    Object.defineProperty(TemplatingClient.prototype, \"routeDefinition\", {\r\n        get: function () {\r\n            return this.templatingRoute;\r\n        },\r\n        enumerable: true,\r\n        configurable: true\r\n    });\r\n    Object.defineProperty(TemplatingClient.prototype, \"batch\", {\r\n        get: function () {\r\n            return this.templatingBatchClient;\r\n        },\r\n        enumerable: true,\r\n        configurable: true\r\n    });\r\n    /**\r\n     * Returns a promise that is resolved once the find action has been performed. Success response returns a list of template resources matching the given criteria.\r\n     * @method\r\n     * @param options Query resource options.\r\n     * @returns A promise that is resolved once the find action has been performed.\r\n     * @example templatingClient.find({\r\n                    pageNumber : 1,\r\n                    pageSize : 10,\r\n                    orderBy : '<field>',\r\n                    orderDirection : '<asc|desc>',\r\n                    search : '<search-phrase>'\r\n                })\r\n                .then(function (collection) {\r\n                    // perform success action here\r\n                },\r\n                 function (response, status, headers, config) {\r\n                     // perform error handling here\r\n                });\r\n     **/\r\n    TemplatingClient.prototype.find = function (options) {\r\n        return this.apiClient.get(this.routeDefinition.find(options));\r\n    };\r\n    /**\r\n     * Returns a promise that is resolved once the get action has been performed. Success response returns the specified template resource.\r\n     * @method\r\n     * @param id Template id which uniquely identifies Template resource that needs to be retrieved.\r\n     * @param options Query resource options object.\r\n     * @example templatingClient.get('<template-id>')\r\n                   .then(function (data) {\r\n                       // perform success action here\r\n                   },\r\n                    function (response, status, headers, config) {\r\n                        // perform error handling here\r\n                   });\r\n    **/\r\n    TemplatingClient.prototype.get = function (id, options) {\r\n        return this.apiClient.get(this.templatingRoute.get(id, options));\r\n    };\r\n    /**\r\n     * Returns a promise that is resolved once the create template action has been performed; this action creates a new template resource.\r\n     * @method\r\n     * @param data An Template object that needs to be inserted into the system.\r\n     * @returns A promise that is resolved once the create template action has been performed.\r\n     * @example templatingClient.create({  content : '<content>',  templateId : '<template-id>' })\r\n                    .then(function (data) {\r\n                        // perform success action here\r\n                    },\r\n                     function (response, status, headers, config) {\r\n                         // perform error handling here\r\n                    });\r\n     **/\r\n    TemplatingClient.prototype.create = function (data) {\r\n        return this.apiClient.post(this.routeDefinition.create(), this.routeDefinition.createParams(data));\r\n    };\r\n    /**\r\n     * Returns a promise that is resolved once the update template action has been performed; this action updates a template resource. This route uses HAL enabled objects to obtain routes and therefore it doesn't apply `baasicTemplatingRouteService` route template. Here is an example of how a route can be obtained from HAL enabled objects:\r\n     * ```\r\n     * let params = modelMapper.removeParams(template);\r\n     * let uri = params['model'].links('put').href;\r\n     * ```\r\n     * @method\r\n     * @param data An template object used to update specified Template resource.\r\n     * @returns A promise that is resolved once the update template action has been performed.\r\n     * @example // template is a resource previously fetched using get action.\r\n                    template.content = '<new-content>';\r\n                    templatingClient.update(template)\r\n                        .then(function (data) {\r\n                            // perform success action here\r\n                        },\r\n                         function (response, status, headers, config) {\r\n                             // perform error handling here\r\n                        });\r\n     **/\r\n    TemplatingClient.prototype.update = function (data) {\r\n        return this.apiClient.put(this.routeDefinition.update(data), this.routeDefinition.updateParams(data));\r\n    };\r\n    /**\r\n     * Returns a promise that is resolved once the remove action has been performed. This action will remove a template resource from the system if successfully completed. This route uses HAL enabled objects to obtain routes and therefore it doesn't apply `baasicTemplatingRouteDefiniton` route template. Here is an example of how a route can be obtained from HAL enabled objects:\r\n     * ```\r\n     * let params = modelMapper.removeParams(template);\r\n     * let uri = params['model'].links('delete').href;\r\n     * ```\r\n     * @method\r\n     * @param data An template object used to delete specified Template resource.\r\n     * @returns A promise that is resolved once the remove action has been performed.\r\n     * @example // template is a resource previously fetched using get action.\r\n                    templatingClient.remove(template)\r\n                        .then(function (data) {\r\n                            // perform success action here\r\n                        },\r\n                         function (response, status, headers, config) {\r\n                             // perform error handling here\r\n                        });\r\n     **/\r\n    TemplatingClient.prototype.remove = function (data) {\r\n        return this.apiClient.delete(this.routeDefinition.delete(data));\r\n    };\r\n    return TemplatingClient;\r\n}());\r\nTemplatingClient = tslib_1.__decorate([\r\n    inversify_1.injectable(),\r\n    tslib_1.__param(0, inversify_1.inject(_1.TYPES.TemplatingRoute)),\r\n    tslib_1.__param(1, inversify_1.inject(_1.TYPES.TemplatingBatchClient)),\r\n    tslib_1.__param(2, inversify_1.inject(httpApi_1.httpTYPES.ApiClient)),\r\n    tslib_1.__metadata(\"design:paramtypes\", [typeof (_a = typeof _1.TemplatingRoute !== \"undefined\" && _1.TemplatingRoute) === \"function\" && _a || Object, typeof (_b = typeof _1.TemplatingBatchClient !== \"undefined\" && _1.TemplatingBatchClient) === \"function\" && _b || Object, typeof (_c = typeof httpApi_1.ApiClient !== \"undefined\" && httpApi_1.ApiClient) === \"function\" && _c || Object])\r\n], TemplatingClient);\r\nexports.TemplatingClient = TemplatingClient;\r\nvar _a, _b, _c;\r\n/**\r\n * @overview\r\n ***Notes:**\r\n - Refer to the [REST API documentation](https://github.com/Baasic/baasic-rest-api/wiki) for detailed information about available Baasic REST API end-points.\r\n - All end-point objects are transformed by the associated route definition.\r\n */ \r\n\n\n/***/ }),\n/* 324 */\n/***/ (function(module, exports, __webpack_require__) {\n\n\"use strict\";\n/*global module */\r\n/**\r\n * @module templatingRoute\r\n * @description Baasic Templating Route Definition provides Baasic route templates which can be expanded to Baasic REST URIs. Various services can use Baasic Templating Route Definition to obtain a needed routes while other routes will be obtained through HAL. By convention, all route services use the same function names as their corresponding services.\r\n */\r\n\r\nObject.defineProperty(exports, \"__esModule\", { value: true });\r\nvar tslib_1 = __webpack_require__(1);\r\nvar inversify_1 = __webpack_require__(0);\r\nvar common_1 = __webpack_require__(2);\r\n;\r\nvar _1 = __webpack_require__(21);\r\nvar contracts_1 = __webpack_require__(3);\r\nvar TemplatingRoute = (function (_super) {\r\n    tslib_1.__extends(TemplatingRoute, _super);\r\n    function TemplatingRoute(appOptions, templatingBatchRoute) {\r\n        var _this = _super.call(this, appOptions) || this;\r\n        _this.appOptions = appOptions;\r\n        _this.templatingBatchRoute = templatingBatchRoute;\r\n        _this.findRoute = 'templates/{?searchQuery,page,rpp,sort,embed,fields,moduleNames}';\r\n        _this.getRoute = 'templates/{id}/{?embed,fields}';\r\n        _this.createRoute = 'templates';\r\n        _this.updateRoute = 'templates/{id}';\r\n        _this.deleteRoute = 'templates/{id}';\r\n        return _this;\r\n    }\r\n    Object.defineProperty(TemplatingRoute.prototype, \"batch\", {\r\n        get: function () {\r\n            return this.templatingBatchRoute;\r\n        },\r\n        enumerable: true,\r\n        configurable: true\r\n    });\r\n    /**\r\n     * Parses find route which can be expanded with additional options. Supported items are:\r\n     * - `searchQuery` - A string value used to identify template resources using the phrase search.\r\n     * - `page` - A value used to set the page number, i.e. to retrieve certain template subset from the storage.\r\n     * - `rpp` - A value used to limit the size of result set per page.\r\n     * - `sort` - A string used to set the template property to sort the result collection by.\r\n     * - `embed` - Comma separated list of resources to be contained within the current representation.\r\n     * @method\r\n     * @param options Query resource options.\r\n     * @example templatingRoute.find({searchQuery: '<search-phrase>'});\r\n     **/\r\n    TemplatingRoute.prototype.find = function (options) {\r\n        return _super.prototype.baseFind.call(this, this.findRoute, options);\r\n    };\r\n    /**\r\n     * Parses get route which must be expanded with the Id of the previously created template resource in the system.\r\n     * @method\r\n     * @param id Template id which uniquely identifies Template resource that needs to be retrieved.\r\n     * @param options Query resource options object.\r\n     * @example templatingRoute.get({id: '<template-id>'});\r\n     **/\r\n    TemplatingRoute.prototype.get = function (id, options) {\r\n        return _super.prototype.baseGet.call(this, this.getRoute, id, options);\r\n    };\r\n    /**\r\n     * Parses create route; this URI template does not expose any additional options.\r\n     * @method\r\n     * @example templatingRoute.create();\r\n     **/\r\n    TemplatingRoute.prototype.create = function () {\r\n        return _super.prototype.baseCreate.call(this, this.createRoute, {});\r\n    };\r\n    /**\r\n     * Parses update route; this URI template does not expose any additional options.\r\n     * @method\r\n     * @param data An template object used to update specified Template resource.\r\n     * @example templatingRoute.update(data);\r\n     **/\r\n    TemplatingRoute.prototype.update = function (data) {\r\n        return _super.prototype.baseUpdate.call(this, this.updateRoute, data);\r\n    };\r\n    /**\r\n     * Parses delete route; this URI template does not expose any additional options.\r\n     * @method\r\n     * @param data An template object used to delete specified Template resource.\r\n     * @example templatingRoute.update(data);\r\n     **/\r\n    TemplatingRoute.prototype.delete = function (data) {\r\n        return _super.prototype.baseDelete.call(this, this.deleteRoute, data);\r\n    };\r\n    return TemplatingRoute;\r\n}(common_1.BaseRoute));\r\nTemplatingRoute = tslib_1.__decorate([\r\n    inversify_1.injectable(),\r\n    tslib_1.__param(0, inversify_1.inject(contracts_1.TYPES.IAppOptions)),\r\n    tslib_1.__param(1, inversify_1.inject(_1.TYPES.TemplatingBatchRoute)),\r\n    tslib_1.__metadata(\"design:paramtypes\", [typeof (_a = typeof contracts_1.IAppOptions !== \"undefined\" && contracts_1.IAppOptions) === \"function\" && _a || Object, typeof (_b = typeof _1.TemplatingBatchRoute !== \"undefined\" && _1.TemplatingBatchRoute) === \"function\" && _b || Object])\r\n], TemplatingRoute);\r\nexports.TemplatingRoute = TemplatingRoute;\r\nvar _a, _b;\r\n/**\r\n * @overview\r\n ***Notes:**\r\n - Refer to the [REST API documentation](https://github.com/Baasic/baasic-rest-api/wiki) for detailed information about available Baasic REST API end-points.\r\n - [URI Template](https://github.com/Baasic/uritemplate-js) syntax enables expanding the Baasic route templates to Baasic REST URIs providing it with an object that contains URI parameters.\r\n - All end-point objects are transformed by the associated route definition.\r\n */ \r\n\n\n/***/ }),\n/* 325 */\n/***/ (function(module, exports, __webpack_require__) {\n\n\"use strict\";\n/* globals module */\r\n/**\r\n * @module companyBatchClient\r\n * @description  Company Batch Client provides Baasic route templates which can be expanded to Baasic REST URIs. Various services can use Baasic Company Route Service to obtain needed routes while other routes will be obtained through HAL. By convention, all route services use the same function names as their corresponding services.\r\n */\r\n\r\nObject.defineProperty(exports, \"__esModule\", { value: true });\r\nvar tslib_1 = __webpack_require__(1);\r\nvar inversify_1 = __webpack_require__(0);\r\nvar httpApi_1 = __webpack_require__(4);\r\nvar _1 = __webpack_require__(8);\r\nvar CompanyBatchClient = (function () {\r\n    function CompanyBatchClient(companyBatchRoute, apiClient) {\r\n        this.companyBatchRoute = companyBatchRoute;\r\n        this.apiClient = apiClient;\r\n    }\r\n    Object.defineProperty(CompanyBatchClient.prototype, \"routeDefinition\", {\r\n        get: function () {\r\n            return this.companyBatchRoute;\r\n        },\r\n        enumerable: true,\r\n        configurable: true\r\n    });\r\n    /**\r\n     * Returns a promise that is resolved once the create company action has been performed; this action creates new company resources.\r\n     * @method\r\n     * @param data A collection of company objects that need to be inserted into the system.\r\n     * @returns A promise that is resolved once the create company action has been performed.\r\n     * @example  companyBatchClient.create([{\r\n                    description : '<description>',\r\n                    name : '<name>',\r\n                    slug: '<slug>'\r\n                 }])\r\n                 .then(function (data) {\r\n                     // perform success action here\r\n                  },\r\n                   function (response, status, headers, config) {\r\n                       // perform error handling here\r\n                 });\r\n     **/\r\n    CompanyBatchClient.prototype.create = function (data) {\r\n        return this.apiClient.post(this.routeDefinition.create(), this.routeDefinition.createParams(data));\r\n    };\r\n    /**\r\n     * Returns a promise that is resolved once the update company action has been performed; this action updates specified company resources.\r\n     * @method\r\n     * @param data A collection of company objects used to update specified company resources.\r\n     * @returns A promise that is resolved once the update company action has been performed.\r\n     * @example   companyBatchClient.update(companies)\r\n                    .then(function (data) {\r\n                        // perform success action here\r\n                    },\r\n                     function (response, status, headers, config) {\r\n                         // perform error handling here\r\n                    });\r\n     **/\r\n    CompanyBatchClient.prototype.update = function (data) {\r\n        return this.apiClient.put(this.routeDefinition.update(), this.routeDefinition.updateParams(data));\r\n    };\r\n    /**\r\n     * Returns a promise that is resolved once the remove action has been performed. This action will remove company resources from the system if successfully completed.\r\n     * @method\r\n     * @param ids Collection of company ids which uniquely identifies company resources that need to be deleted.\r\n     * @returns A promise that is resolved once the remove action has been performed.\r\n     * @example companyBatchClient.remove(companyIds)\r\n                   .then(function (data) {\r\n                       // perform success action here\r\n                   },\r\n                    function (response, status, headers, config) {\r\n                        // perform error handling here\r\n                   });\r\n    **/\r\n    CompanyBatchClient.prototype.remove = function (ids) {\r\n        return this.apiClient.delete(this.companyBatchRoute.delete(), undefined, ids);\r\n    };\r\n    return CompanyBatchClient;\r\n}());\r\nCompanyBatchClient = tslib_1.__decorate([\r\n    inversify_1.injectable(),\r\n    tslib_1.__param(0, inversify_1.inject(_1.TYPES.CompanyBatchRoute)),\r\n    tslib_1.__param(1, inversify_1.inject(httpApi_1.httpTYPES.ApiClient)),\r\n    tslib_1.__metadata(\"design:paramtypes\", [typeof (_a = typeof _1.CompanyBatchRoute !== \"undefined\" && _1.CompanyBatchRoute) === \"function\" && _a || Object, typeof (_b = typeof httpApi_1.ApiClient !== \"undefined\" && httpApi_1.ApiClient) === \"function\" && _b || Object])\r\n], CompanyBatchClient);\r\nexports.CompanyBatchClient = CompanyBatchClient;\r\nvar _a, _b;\r\n/**\r\n * @overview\r\n ***Notes:**\r\n - Refer to the [REST API documentation](https://github.com/Baasic/baasic-rest-api/wiki) for detailed information about available Baasic REST API end-points.\r\n - All end-point objects are transformed by the associated route service.\r\n */ \r\n\n\n/***/ }),\n/* 326 */\n/***/ (function(module, exports, __webpack_require__) {\n\n\"use strict\";\n/* globals module */\r\n/**\r\n * @module companyBatchRoute\r\n * @description Baasic Company Batch Route Definition provides Baasic route templates which can be expanded to Baasic REST URIs. Various services can use Baasic Company Route Service to obtain needed routes while other routes will be obtained through HAL. By convention, all route services  use the same function names as their corresponding services.\r\n */\r\n\r\nObject.defineProperty(exports, \"__esModule\", { value: true });\r\nvar tslib_1 = __webpack_require__(1);\r\nvar inversify_1 = __webpack_require__(0);\r\nvar common_1 = __webpack_require__(2);\r\nvar contracts_1 = __webpack_require__(3);\r\nvar CompanyBatchRoute = (function (_super) {\r\n    tslib_1.__extends(CompanyBatchRoute, _super);\r\n    function CompanyBatchRoute(appOptions) {\r\n        var _this = _super.call(this, appOptions) || this;\r\n        _this.appOptions = appOptions;\r\n        _this.createRoute = 'lookups/companies/batch';\r\n        _this.updateRoute = 'lookups/companies/batch';\r\n        _this.deleteRoute = 'lookups/companies/batch';\r\n        return _this;\r\n    }\r\n    /**\r\n     * Parses create route; this URI template does not expose any additional options.\r\n     * @method\r\n     * @example companyRoute.create();\r\n     **/\r\n    CompanyBatchRoute.prototype.create = function () {\r\n        return _super.prototype.baseCreate.call(this, this.createRoute, {});\r\n    };\r\n    /**\r\n     * Parses update route; this URI template does not expose any additional options.\r\n     * @method\r\n     * @example companyRoute.update();\r\n     **/\r\n    CompanyBatchRoute.prototype.update = function () {\r\n        return _super.prototype.baseUpdate.call(this, this.updateRoute, {});\r\n    };\r\n    /**\r\n     * Parses remove route; this URI template does not expose any additional options.\r\n     * @method\r\n     * @example companyRoute.remove();\r\n     **/\r\n    CompanyBatchRoute.prototype.delete = function () {\r\n        return _super.prototype.baseDelete.call(this, this.deleteRoute, {});\r\n    };\r\n    return CompanyBatchRoute;\r\n}(common_1.BaseRoute));\r\nCompanyBatchRoute = tslib_1.__decorate([\r\n    tslib_1.__param(0, inversify_1.inject(contracts_1.TYPES.IAppOptions)),\r\n    tslib_1.__metadata(\"design:paramtypes\", [typeof (_a = typeof contracts_1.IAppOptions !== \"undefined\" && contracts_1.IAppOptions) === \"function\" && _a || Object])\r\n], CompanyBatchRoute);\r\nexports.CompanyBatchRoute = CompanyBatchRoute;\r\nvar _a;\r\n/**\r\n * @overview\r\n ***Notes:**\r\n - Refer to the [REST API documentation](https://github.com/Baasic/baasic-rest-api/wiki) for detailed information about available Baasic REST API end-points.\r\n - [URI Template](https://github.com/Baasic/uritemplate-js) syntax enables expanding the Baasic route templates to Baasic REST URIs providing it with an object that contains URI parameters.\r\n - All end-point objects are transformed by the associated route service.\r\n */ \r\n\n\n/***/ }),\n/* 327 */\n/***/ (function(module, exports, __webpack_require__) {\n\n\"use strict\";\n/* globals module */\r\n/**\r\n * @module companyClient\r\n * @description  Company Client provides Baasic route templates which can be expanded to Baasic REST URIs. Various services can use Baasic Company Route Service to obtain needed routes while other routes will be obtained through HAL. By convention, all route services use the same function names as their corresponding services.\r\n */\r\n\r\nObject.defineProperty(exports, \"__esModule\", { value: true });\r\nvar tslib_1 = __webpack_require__(1);\r\nvar inversify_1 = __webpack_require__(0);\r\n;\r\nvar httpApi_1 = __webpack_require__(4);\r\nvar _1 = __webpack_require__(8);\r\nvar CompanyClient = (function () {\r\n    function CompanyClient(companyBatchClient, companyRoute, apiClient) {\r\n        this.companyBatchClient = companyBatchClient;\r\n        this.companyRoute = companyRoute;\r\n        this.apiClient = apiClient;\r\n    }\r\n    Object.defineProperty(CompanyClient.prototype, \"routeDefinition\", {\r\n        get: function () {\r\n            return this.companyRoute;\r\n        },\r\n        enumerable: true,\r\n        configurable: true\r\n    });\r\n    Object.defineProperty(CompanyClient.prototype, \"batch\", {\r\n        get: function () {\r\n            return this.companyBatchClient;\r\n        },\r\n        enumerable: true,\r\n        configurable: true\r\n    });\r\n    /**\r\n     * Returns a promise that is resolved once the find action has been performed. Success response returns a list of company resources matching the given criteria.\r\n     * @method\r\n     * @param options Query resource options object.\r\n     * @returns A promise that is resolved once the find action has been performed.\r\n     * @example companyClient.find({\r\n                    pageNumber : 1,\r\n                    pageSize : 10,\r\n                    orderBy : '<field>',\r\n                    orderDirection : '<asc|desc>',\r\n                    search : '<search-phrase>'\r\n                })\r\n                .then(function (collection) {\r\n                    // perform success action here\r\n                },\r\n                 function (response, status, headers, config) {\r\n                     // perform error handling here\r\n                });\r\n     **/\r\n    CompanyClient.prototype.find = function (options) {\r\n        return this.apiClient.get(this.routeDefinition.find(options));\r\n    };\r\n    /**\r\n     * Returns a promise that is resolved once the get action has been performed. Success response returns the company resource.\r\n     * @method\r\n     * @param id Company id which uniquely identifies resource that needs to be retrieved.\r\n     * @returns A promise that is resolved once the get action has been performed.\r\n     * @param options Query resource options object.\r\n     * @example companyClient.get()\r\n                    .then(function (data) {\r\n                        // perform success action here\r\n                    },\r\n                     function (response, status, headers, config) {\r\n                         // perform error handling here\r\n                    });\r\n     **/\r\n    CompanyClient.prototype.get = function (id, options) {\r\n        return this.apiClient.get(this.companyRoute.get(id, options));\r\n    };\r\n    /**\r\n     * Returns a promise that is resolved once the create company action has been performed; this action creates a new company resource.\r\n     * @method\r\n     * @param data A company object that needs to be inserted into the system.\r\n     * @returns A promise that is resolved once the create company action has been performed.\r\n     * @example companyClient.create({\r\n                    description : '<description>',\r\n                    name : '<name>',\r\n                    slug: '<slug>'\r\n                })\r\n                .then(function (data) {\r\n                    // perform success action here\r\n                },\r\n                 function (response, status, headers, config) {\r\n                     // perform error handling here\r\n                });\r\n     **/\r\n    CompanyClient.prototype.create = function (data) {\r\n        return this.apiClient.post(this.routeDefinition.create(), this.routeDefinition.createParams(data));\r\n    };\r\n    /**\r\n     * Returns a promise that is resolved once the update company action has been performed; this action updates a company resource. This route uses HAL enabled objects to obtain routes and therefore it doesn't apply `companyRoute` route template. Here is an example of how a route can be obtained from HAL enabled objects:\r\n     * ```\r\n     * let params = modelMapper.removeParams(company);\r\n     * let uri = params['model'].links('put').href;\r\n     * ```\r\n     * @method\r\n     * @param data A company object used to update specified company resource.\r\n     * @returns A promise that is resolved once the update company action has been performed.\r\n     * @example // company is a resource previously fetched using get action.\r\n                    company.description = '<description>';\r\n                    baasicCompanyService.update(company)\r\n                        .then(function (data) {\r\n                            // perform success action here\r\n                        },\r\n                         function (response, status, headers, config) {\r\n                             // perform error handling here\r\n                        });\r\n     **/\r\n    CompanyClient.prototype.update = function (data) {\r\n        return this.apiClient.put(this.routeDefinition.update(data), this.routeDefinition.updateParams(data));\r\n    };\r\n    /**\r\n     * Returns a promise that is resolved once the remove action has been performed. This action will remove a company resource from the system if successfully completed. This route uses HAL enabled objects to obtain routes and therefore it doesn't apply `companyRoute` route template. Here is an example of how a route can be obtained from HAL enabled objects:\r\n     * ```\r\n     * let params = modelMapper.removeParams(company);\r\n     * let uri = params['model'].links('delete').href;\r\n     * ```\r\n     * @method\r\n     * @param data A company object used to delete specified company resource.\r\n     * @returns A promise that is resolved once the remove action has been performed.\r\n     * @example // company is a resource previously fetched using get action.\r\n                    companyClient.remove(company)\r\n                        .then(function (data) {\r\n                            // perform success action here\r\n                        },\r\n                         function (response, status, headers, config) {\r\n                             // perform error handling here\r\n                    });\r\n     **/\r\n    CompanyClient.prototype.remove = function (data) {\r\n        return this.apiClient.delete(this.routeDefinition.delete(data));\r\n    };\r\n    return CompanyClient;\r\n}());\r\nCompanyClient = tslib_1.__decorate([\r\n    inversify_1.injectable(),\r\n    tslib_1.__param(0, inversify_1.inject(_1.TYPES.CompanyBatchClient)),\r\n    tslib_1.__param(1, inversify_1.inject(_1.TYPES.CompanyRoute)),\r\n    tslib_1.__param(2, inversify_1.inject(httpApi_1.httpTYPES.ApiClient)),\r\n    tslib_1.__metadata(\"design:paramtypes\", [typeof (_a = typeof _1.CompanyBatchClient !== \"undefined\" && _1.CompanyBatchClient) === \"function\" && _a || Object, typeof (_b = typeof _1.CompanyRoute !== \"undefined\" && _1.CompanyRoute) === \"function\" && _b || Object, typeof (_c = typeof httpApi_1.ApiClient !== \"undefined\" && httpApi_1.ApiClient) === \"function\" && _c || Object])\r\n], CompanyClient);\r\nexports.CompanyClient = CompanyClient;\r\nvar _a, _b, _c;\r\n/**\r\n * @overview\r\n ***Notes:**\r\n - Refer to the [REST API documentation](https://github.com/Baasic/baasic-rest-api/wiki) for detailed information about available Baasic REST API end-points.\r\n - All end-point objects are transformed by the associated route service.\r\n */ \r\n\n\n/***/ }),\n/* 328 */\n/***/ (function(module, exports, __webpack_require__) {\n\n\"use strict\";\n/* globals module */\r\n/**\r\n * @module companyRoute\r\n * @description Baasic Company Route Definition provides Baasic route templates which can be expanded to Baasic REST URIs. Various services can use Baasic Company Route Service to obtain needed routes while other routes will be obtained through HAL. By convention, all route services  use the same function names as their corresponding services.\r\n */\r\n\r\nObject.defineProperty(exports, \"__esModule\", { value: true });\r\nvar tslib_1 = __webpack_require__(1);\r\nvar inversify_1 = __webpack_require__(0);\r\nvar common_1 = __webpack_require__(2);\r\n;\r\nvar _1 = __webpack_require__(8);\r\nvar contracts_1 = __webpack_require__(3);\r\nvar CompanyRoute = (function (_super) {\r\n    tslib_1.__extends(CompanyRoute, _super);\r\n    function CompanyRoute(appOptions, companyBatchRoute) {\r\n        var _this = _super.call(this, appOptions) || this;\r\n        _this.appOptions = appOptions;\r\n        _this.companyBatchRoute = companyBatchRoute;\r\n        _this.findRoute = 'lookups/companies/{?searchQuery,page,rpp,sort,embed,fields}';\r\n        _this.createRoute = 'lookups/companies';\r\n        _this.getRoute = 'lookups/companies/{id}/{?embed,fields}';\r\n        _this.updateRoute = 'lookups/companies/{id}';\r\n        _this.deleteRoute = 'lookups/companies/{id}';\r\n        return _this;\r\n    }\r\n    Object.defineProperty(CompanyRoute.prototype, \"batch\", {\r\n        get: function () {\r\n            return this.companyBatchRoute;\r\n        },\r\n        enumerable: true,\r\n        configurable: true\r\n    });\r\n    /**\r\n     * Parses find route which can be expanded with additional options. Supported items are:\r\n     * - `searchQuery` - A string referencing company properties using the phrase or BQL (Baasic Query Language) search.\r\n     * - `page` - A value used to set the page number, i.e. to retrieve certain company subset from the storage.\r\n     * - `rpp` - A value used to limit the size of result set per page.\r\n     * - `sort` - A string used to set the company property to sort the result collection by.\r\n     * - `embed` - Comma separated list of resources to be contained within the current representation.\r\n     * @method\r\n     * @param options Query resource options object.\r\n     * @example companyRoute.find({searchQuery: '<search-phrase>'});\r\n     **/\r\n    CompanyRoute.prototype.find = function (options) {\r\n        return _super.prototype.baseFind.call(this, this.findRoute, options);\r\n    };\r\n    /**\r\n     * Parses create route; this URI template does not expose any additional options.\r\n     * @method\r\n     * @example companyRoute.create();\r\n     **/\r\n    CompanyRoute.prototype.create = function () {\r\n        return _super.prototype.baseCreate.call(this, this.createRoute, {});\r\n    };\r\n    /**\r\n     * Parses get route; this route doesn't expose any properties.\r\n     * @method\r\n     * @param id Company id which uniquely identifies resource that needs to be retrieved.\r\n     * @param options Query resource options object.\r\n     * @example companyRoute.get();\r\n     **/\r\n    CompanyRoute.prototype.get = function (id, options) {\r\n        return _super.prototype.baseGet.call(this, this.getRoute, id, options);\r\n    };\r\n    CompanyRoute.prototype.update = function (data) {\r\n        return _super.prototype.baseUpdate.call(this, this.updateRoute, data);\r\n    };\r\n    CompanyRoute.prototype.delete = function (data) {\r\n        return _super.prototype.baseDelete.call(this, this.deleteRoute, data);\r\n    };\r\n    return CompanyRoute;\r\n}(common_1.BaseRoute));\r\nCompanyRoute = tslib_1.__decorate([\r\n    tslib_1.__param(0, inversify_1.inject(contracts_1.TYPES.IAppOptions)),\r\n    tslib_1.__param(1, inversify_1.inject(_1.TYPES.CompanyBatchRoute)),\r\n    tslib_1.__metadata(\"design:paramtypes\", [typeof (_a = typeof contracts_1.IAppOptions !== \"undefined\" && contracts_1.IAppOptions) === \"function\" && _a || Object, typeof (_b = typeof _1.CompanyBatchRoute !== \"undefined\" && _1.CompanyBatchRoute) === \"function\" && _b || Object])\r\n], CompanyRoute);\r\nexports.CompanyRoute = CompanyRoute;\r\nvar _a, _b;\r\n/**\r\n * @overview\r\n ***Notes:**\r\n - Refer to the [REST API documentation](https://github.com/Baasic/baasic-rest-api/wiki) for detailed information about available Baasic REST API end-points.\r\n - [URI Template](https://github.com/Baasic/uritemplate-js) syntax enables expanding the Baasic route templates to Baasic REST URIs providing it with an object that contains URI parameters.\r\n - All end-point objects are transformed by the associated route service.\r\n */ \r\n\n\n/***/ }),\n/* 329 */\n/***/ (function(module, exports, __webpack_require__) {\n\n\"use strict\";\n\r\nObject.defineProperty(exports, \"__esModule\", { value: true });\r\nvar inversify_1 = __webpack_require__(0);\r\nvar _1 = __webpack_require__(8);\r\nvar TYPES = {\r\n    CompanyBatchClient: Symbol(\"CompanyBatchClient\"),\r\n    CompanyBatchRoute: Symbol(\"CompanyBatchRoute\"),\r\n    CompanyClient: Symbol(\"CompanyClient\"),\r\n    CompanyRoute: Symbol(\"CompanyRoute\"),\r\n    OrganizationBatchClient: Symbol(\"OrganizationBatchClient\"),\r\n    OrganizationBatchRoute: Symbol(\"OrganizationBatchRoute\"),\r\n    OrganizationClient: Symbol(\"OrganizationClient\"),\r\n    OrganizationRoute: Symbol(\"OrganizationRoute\"),\r\n    SkillBatchClient: Symbol(\"SkillBatchClient\"),\r\n    SkillBatchRoute: Symbol(\"SkillBatchRoute\"),\r\n    SkillClient: Symbol(\"SkillClient\"),\r\n    SkillRoute: Symbol(\"SkillRoute\"),\r\n    UserEducationClient: Symbol(\"UserEducationClient\"),\r\n    UserEducationRoute: Symbol(\"UserEducationRoute\"),\r\n    UserProfileACLClient: Symbol(\"UserProfileACLClient\"),\r\n    UserProfileACLRoute: Symbol(\"UserProfileACLRoute\"),\r\n    UserProfileAvatarClient: Symbol(\"UserProfileAvatarClient\"),\r\n    UserProfileAvatarRoute: Symbol(\"UserProfileAvatarRoute\"),\r\n    UserProfileAvatarStreamsClient: Symbol(\"UserProfileAvatarStreamsClient\"),\r\n    UserProfileAvatarStreamsRoute: Symbol(\"UserProfileAvatarStreamsClient\"),\r\n    UserProfileClient: Symbol(\"UserProfileClient\"),\r\n    UserProfileRoute: Symbol(\"UserProfileRoute\"),\r\n    UserSkillClient: Symbol(\"UserSkillClient\"),\r\n    UserSkillRoute: Symbol(\"UserSkillRoute\"),\r\n    UserWorkClient: Symbol(\"UserWorkClient\"),\r\n    UserWorkRoute: Symbol(\"UserWorkRoute\"),\r\n    Root: Symbol(\"UserProfile-Root\")\r\n};\r\nexports.TYPES = TYPES;\r\nvar diModule = new inversify_1.ContainerModule(function (bind) {\r\n    bind(TYPES.CompanyBatchRoute).to(_1.CompanyBatchRoute);\r\n    bind(TYPES.CompanyBatchClient).to(_1.CompanyBatchClient);\r\n    bind(TYPES.CompanyRoute).to(_1.CompanyRoute);\r\n    bind(TYPES.CompanyClient).to(_1.CompanyClient);\r\n    bind(TYPES.OrganizationBatchRoute).to(_1.OrganizationBatchRoute);\r\n    bind(TYPES.OrganizationBatchClient).to(_1.OrganizationBatchClient);\r\n    bind(TYPES.OrganizationRoute).to(_1.OrganizationRoute);\r\n    bind(TYPES.OrganizationClient).to(_1.OrganizationClient);\r\n    bind(TYPES.SkillBatchRoute).to(_1.SkillBatchRoute);\r\n    bind(TYPES.SkillBatchClient).to(_1.SkillBatchClient);\r\n    bind(TYPES.SkillRoute).to(_1.SkillRoute);\r\n    bind(TYPES.SkillClient).to(_1.SkillClient);\r\n    bind(TYPES.UserEducationRoute).to(_1.UserEducationRoute);\r\n    bind(TYPES.UserEducationClient).to(_1.UserEducationClient);\r\n    bind(TYPES.UserProfileACLRoute).to(_1.UserProfileACLRoute);\r\n    bind(TYPES.UserProfileACLClient).to(_1.UserProfileACLClient);\r\n    bind(TYPES.UserProfileAvatarStreamsRoute).to(_1.UserProfileAvatarStreamsRoute);\r\n    bind(TYPES.UserProfileAvatarStreamsClient).to(_1.UserProfileAvatarStreamsClient);\r\n    bind(TYPES.UserProfileAvatarRoute).to(_1.UserProfileAvatarRoute);\r\n    bind(TYPES.UserProfileAvatarClient).to(_1.UserProfileAvatarClient);\r\n    bind(TYPES.UserProfileRoute).to(_1.UserProfileRoute);\r\n    bind(TYPES.UserProfileClient).to(_1.UserProfileClient);\r\n    bind(TYPES.UserSkillRoute).to(_1.UserSkillRoute);\r\n    bind(TYPES.UserSkillClient).to(_1.UserSkillClient);\r\n    bind(TYPES.UserWorkRoute).to(_1.UserWorkRoute);\r\n    bind(TYPES.UserWorkClient).to(_1.UserWorkClient);\r\n    bind(TYPES.Root).to(_1.Root);\r\n});\r\nexports.diModule = diModule;\r\n\n\n/***/ }),\n/* 330 */\n/***/ (function(module, exports, __webpack_require__) {\n\n\"use strict\";\n/* globals module */\r\n/**\r\n * @module organizationBatchClient\r\n * @description  Organization Batch Client provides Baasic route templates which can be expanded to Baasic REST URIs. Various services can use Baasic Organization Batch Route Definition to obtain needed routes while other routes will be obtained through HAL. By convention, all route services use the same function names as their corresponding services.\r\n */\r\n\r\nObject.defineProperty(exports, \"__esModule\", { value: true });\r\nvar tslib_1 = __webpack_require__(1);\r\nvar inversify_1 = __webpack_require__(0);\r\nvar httpApi_1 = __webpack_require__(4);\r\nvar _1 = __webpack_require__(8);\r\nvar OrganizationBatchClient = (function () {\r\n    function OrganizationBatchClient(organizationBatchRoute, apiClient) {\r\n        this.organizationBatchRoute = organizationBatchRoute;\r\n        this.apiClient = apiClient;\r\n    }\r\n    Object.defineProperty(OrganizationBatchClient.prototype, \"routeDefinition\", {\r\n        get: function () {\r\n            return this.organizationBatchRoute;\r\n        },\r\n        enumerable: true,\r\n        configurable: true\r\n    });\r\n    /**\r\n     * Returns a promise that is resolved once the create organization action has been performed; this action creates new organization resources.\r\n     * @method\r\n     * @param data A collection of organization objects that need to be inserted into the system.\r\n     * @returns A promise that is resolved once the create organization action has been performed.\r\n     * @example   organizationBatchClient.create([{\r\n                    description : '<description>',\r\n                    name : '<name>',\r\n                    slug: '<slug>'\r\n                  }])\r\n                  .then(function (data) {\r\n                      // perform success action here\r\n                   },\r\n                    function (response, status, headers, config) {\r\n                        // perform error handling here\r\n                   });\r\n     **/\r\n    OrganizationBatchClient.prototype.create = function (data) {\r\n        return this.apiClient.post(this.routeDefinition.create(), this.routeDefinition.createParams(data));\r\n    };\r\n    /**\r\n     * Returns a promise that is resolved once the update organization action has been performed; this action updates specified organization resources.\r\n     * @method\r\n     * @param data A collection of organization objects used to update specified organization resources.\r\n     * @returns A promise that is resolved once the update organization action has been performed.\r\n     * @example   organizationBatchClient.update(organizations)\r\n                    .then(function (data) {\r\n                        // perform success action here\r\n                    },\r\n                     function (response, status, headers, config) {\r\n                         // perform error handling here\r\n                    });\r\n     **/\r\n    OrganizationBatchClient.prototype.update = function (data) {\r\n        return this.apiClient.put(this.routeDefinition.update(), this.routeDefinition.updateParams(data));\r\n    };\r\n    /**\r\n     * Returns a promise that is resolved once the remove action has been performed. This action will remove organization resources from the system if successfully completed.\r\n     * @method\r\n     * @example organizationBatchClient.remove(organizationIds)\r\n                    .then(function (data) {\r\n                        // perform success action here\r\n                    },\r\n                     function (response, status, headers, config) {\r\n                         // perform error handling here\r\n                    });\r\n     **/\r\n    OrganizationBatchClient.prototype.remove = function (ids) {\r\n        return this.apiClient.delete(this.organizationBatchRoute.delete(), undefined, ids);\r\n    };\r\n    return OrganizationBatchClient;\r\n}());\r\nOrganizationBatchClient = tslib_1.__decorate([\r\n    inversify_1.injectable(),\r\n    tslib_1.__param(0, inversify_1.inject(_1.TYPES.OrganizationBatchRoute)),\r\n    tslib_1.__param(1, inversify_1.inject(httpApi_1.httpTYPES.ApiClient)),\r\n    tslib_1.__metadata(\"design:paramtypes\", [typeof (_a = typeof _1.OrganizationBatchRoute !== \"undefined\" && _1.OrganizationBatchRoute) === \"function\" && _a || Object, typeof (_b = typeof httpApi_1.ApiClient !== \"undefined\" && httpApi_1.ApiClient) === \"function\" && _b || Object])\r\n], OrganizationBatchClient);\r\nexports.OrganizationBatchClient = OrganizationBatchClient;\r\nvar _a, _b;\r\n/**\r\n * @overview\r\n ***Notes:**\r\n - Refer to the [REST API documentation](https://github.com/Baasic/baasic-rest-api/wiki) for detailed information about available Baasic REST API end-points.\r\n - All end-point objects are transformed by the associated route service.\r\n */ \r\n\n\n/***/ }),\n/* 331 */\n/***/ (function(module, exports, __webpack_require__) {\n\n\"use strict\";\n/* globals module */\r\n/**\r\n * @module organizationBatchRoute\r\n * @description Baasic Organization Batch Route Definition provides Baasic route templates which can be expanded to Baasic REST URIs. Various services can use Baasic Organization Route Service to obtain needed routes while other routes will be obtained through HAL. By convention, all route services  use the same function names as their corresponding services.\r\n */\r\n\r\nObject.defineProperty(exports, \"__esModule\", { value: true });\r\nvar tslib_1 = __webpack_require__(1);\r\nvar inversify_1 = __webpack_require__(0);\r\nvar common_1 = __webpack_require__(2);\r\nvar contracts_1 = __webpack_require__(3);\r\nvar OrganizationBatchRoute = (function (_super) {\r\n    tslib_1.__extends(OrganizationBatchRoute, _super);\r\n    function OrganizationBatchRoute(appOptions) {\r\n        var _this = _super.call(this, appOptions) || this;\r\n        _this.appOptions = appOptions;\r\n        _this.createRoute = 'lookups/organizations/batch';\r\n        _this.updateRoute = 'lookups/organizations/batch';\r\n        _this.deleteRoute = 'lookups/organizations/batch';\r\n        return _this;\r\n    }\r\n    /**\r\n     * Parses create route; this URI template does not expose any additional options.\r\n     * @method\r\n     * @example organizationBatchRoute.create();\r\n     **/\r\n    OrganizationBatchRoute.prototype.create = function () {\r\n        return _super.prototype.baseCreate.call(this, this.createRoute, {});\r\n    };\r\n    /**\r\n     * Parses update route; this URI template does not expose any additional options.\r\n     * @method\r\n     * @example organizationBatchRoute.update();\r\n     **/\r\n    OrganizationBatchRoute.prototype.update = function () {\r\n        return _super.prototype.baseUpdate.call(this, this.updateRoute, {});\r\n    };\r\n    /**\r\n     * Parses remove route; this URI template does not expose any additional options.\r\n     * @method\r\n     * @example organizationBatchRoute.delete();\r\n     **/\r\n    OrganizationBatchRoute.prototype.delete = function () {\r\n        return _super.prototype.baseDelete.call(this, this.deleteRoute, {});\r\n    };\r\n    return OrganizationBatchRoute;\r\n}(common_1.BaseRoute));\r\nOrganizationBatchRoute = tslib_1.__decorate([\r\n    tslib_1.__param(0, inversify_1.inject(contracts_1.TYPES.IAppOptions)),\r\n    tslib_1.__metadata(\"design:paramtypes\", [typeof (_a = typeof contracts_1.IAppOptions !== \"undefined\" && contracts_1.IAppOptions) === \"function\" && _a || Object])\r\n], OrganizationBatchRoute);\r\nexports.OrganizationBatchRoute = OrganizationBatchRoute;\r\nvar _a;\r\n/**\r\n * @overview\r\n ***Notes:**\r\n - Refer to the [REST API documentation](https://github.com/Baasic/baasic-rest-api/wiki) for detailed information about available Baasic REST API end-points.\r\n - [URI Template](https://github.com/Baasic/uritemplate-js) syntax enables expanding the Baasic route templates to Baasic REST URIs providing it with an object that contains URI parameters.\r\n - All end-point objects are transformed by the associated route service.\r\n */ \r\n\n\n/***/ }),\n/* 332 */\n/***/ (function(module, exports, __webpack_require__) {\n\n\"use strict\";\n/* globals module */\r\n/**\r\n * @module organizationClient\r\n * @description  Organization Client provides Baasic route templates which can be expanded to Baasic REST URIs. Various services can use Baasic Organization Route Service to obtain needed routes while other routes will be obtained through HAL. By convention, all route services use the same function names as their corresponding services.\r\n */\r\n\r\nObject.defineProperty(exports, \"__esModule\", { value: true });\r\nvar tslib_1 = __webpack_require__(1);\r\nvar inversify_1 = __webpack_require__(0);\r\n;\r\nvar httpApi_1 = __webpack_require__(4);\r\nvar _1 = __webpack_require__(8);\r\nvar OrganizationClient = (function () {\r\n    function OrganizationClient(organizationRoute, organizationBatchClient, apiClient) {\r\n        this.organizationRoute = organizationRoute;\r\n        this.organizationBatchClient = organizationBatchClient;\r\n        this.apiClient = apiClient;\r\n    }\r\n    Object.defineProperty(OrganizationClient.prototype, \"routeDefinition\", {\r\n        get: function () {\r\n            return this.organizationRoute;\r\n        },\r\n        enumerable: true,\r\n        configurable: true\r\n    });\r\n    Object.defineProperty(OrganizationClient.prototype, \"batch\", {\r\n        get: function () {\r\n            return this.organizationBatchClient;\r\n        },\r\n        enumerable: true,\r\n        configurable: true\r\n    });\r\n    /**\r\n     * Returns a promise that is resolved once the find action has been performed. Success response returns a list of organization resources matching the given criteria.\r\n     * @method\r\n     * @param options Query resource options object.\r\n     * @returns A promise that is resolved once the find action has been performed.\r\n     * @example organizationClient.find({\r\n                    pageNumber : 1,\r\n                    pageSize : 10,\r\n                    orderBy : '<field>',\r\n                    orderDirection : '<asc|desc>',\r\n                    search : '<search-phrase>'\r\n                })\r\n                .then(function (collection) {\r\n                    // perform success action here\r\n                },\r\n                 function (response, status, headers, config) {\r\n                     // perform error handling here\r\n                });\r\n     **/\r\n    OrganizationClient.prototype.find = function (options) {\r\n        return this.apiClient.get(this.routeDefinition.find(options));\r\n    };\r\n    /**\r\n     * Returns a promise that is resolved once the get action has been performed. Success response returns the organization resource.\r\n     * @method\r\n     * @param id Organization id which uniquely identifies resource that needs to be retrieved.\r\n     * @param options Query resource options object.\r\n     * @returns A promise that is resolved once the get action has been performed.\r\n     * @example organizationClient.get(id, options)\r\n                    .then(function (data) {\r\n                        // perform success action here\r\n                    },\r\n                     function (response, status, headers, config) {\r\n                         // perform error handling here\r\n                    });\r\n     **/\r\n    OrganizationClient.prototype.get = function (id, options) {\r\n        return this.apiClient.get(this.organizationRoute.get(id, options));\r\n    };\r\n    /**\r\n     * Returns a promise that is resolved once the create organization action has been performed; this action creates a new organization resource.\r\n     * @method\r\n     * @param data An organization object that needs to be inserted into the system.\r\n     * @returns A promise that is resolved once the create organization action has been performed.\r\n     * @example organizationClient.create({\r\n                    description : '<description>',\r\n                    name : '<name>',\r\n                    slug: '<slug>'\r\n                })\r\n                .then(function (data) {\r\n                    // perform success action here\r\n                },\r\n                 function (response, status, headers, config) {\r\n                     // perform error handling here\r\n                });\r\n     **/\r\n    OrganizationClient.prototype.create = function (data) {\r\n        return this.apiClient.post(this.routeDefinition.create(), this.routeDefinition.createParams(data));\r\n    };\r\n    /**\r\n     * Returns a promise that is resolved once the update organization action has been performed; this action updates an organization resource. This route uses HAL enabled objects to obtain routes and therefore it doesn't apply `organizationRoute` route template. Here is an example of how a route can be obtained from HAL enabled objects:\r\n     * ```\r\n     * let params = modelMapper.removeParams(organization);\r\n     * let uri = params['model'].links('put').href;\r\n     * ```\r\n     * @method\r\n     * @param data An organization object used to update specified organization resource.\r\n     * @returns A promise that is resolved once the update organization action has been performed.\r\n     * @example // organization is a resource previously fetched using get action.\r\n                    organization.description = '<description>';\r\n                    organizationClient.update(organization)\r\n                        .then(function (data) {\r\n                            // perform success action here\r\n                        },\r\n                         function (response, status, headers, config) {\r\n                             // perform error handling here\r\n                        });\r\n     **/\r\n    OrganizationClient.prototype.update = function (data) {\r\n        return this.apiClient.put(this.routeDefinition.update(data), this.routeDefinition.updateParams(data));\r\n    };\r\n    /**\r\n     * Returns a promise that is resolved once the remove action has been performed. This action will remove an organization resource from the system if successfully completed. This route uses HAL enabled objects to obtain routes and therefore it doesn't apply `organizationRoute` route template. Here is an example of how a route can be obtained from HAL enabled objects:\r\n     * ```\r\n     * let params = modelMapper.removeParams(organization);\r\n     * let uri = params['model'].links('delete').href;\r\n     * ```\r\n     * @method\r\n     * @param data An organization object used to delete specified organization resource.\r\n     * @returns A promise that is resolved once the remove action has been performed.\r\n     * @example // organization is a resource previously fetched using get action.\r\n                       organizationClient.remove(organization)\r\n                           .then(function (data) {\r\n                               // perform success action here\r\n                           },\r\n                            function (response, status, headers, config) {\r\n                                // perform error handling here\r\n                           });\r\n    **/\r\n    OrganizationClient.prototype.remove = function (data) {\r\n        return this.apiClient.delete(this.routeDefinition.delete(data));\r\n    };\r\n    return OrganizationClient;\r\n}());\r\nOrganizationClient = tslib_1.__decorate([\r\n    inversify_1.injectable(),\r\n    tslib_1.__param(0, inversify_1.inject(_1.TYPES.OrganizationRoute)),\r\n    tslib_1.__param(1, inversify_1.inject(_1.TYPES.OrganizationBatchClient)),\r\n    tslib_1.__param(2, inversify_1.inject(httpApi_1.httpTYPES.ApiClient)),\r\n    tslib_1.__metadata(\"design:paramtypes\", [typeof (_a = typeof _1.OrganizationRoute !== \"undefined\" && _1.OrganizationRoute) === \"function\" && _a || Object, typeof (_b = typeof _1.OrganizationBatchClient !== \"undefined\" && _1.OrganizationBatchClient) === \"function\" && _b || Object, typeof (_c = typeof httpApi_1.ApiClient !== \"undefined\" && httpApi_1.ApiClient) === \"function\" && _c || Object])\r\n], OrganizationClient);\r\nexports.OrganizationClient = OrganizationClient;\r\nvar _a, _b, _c;\r\n\n\n/***/ }),\n/* 333 */\n/***/ (function(module, exports, __webpack_require__) {\n\n\"use strict\";\n/* globals module */\r\n/**\r\n * @module organizationRoute\r\n * @description Baasic Organization Route Definition provides Baasic route templates which can be expanded to Baasic REST URIs. Various services can use Baasic Organization Route Service to obtain needed routes while other routes will be obtained through HAL. By convention, all route services  use the same function names as their corresponding services.\r\n */\r\n\r\nObject.defineProperty(exports, \"__esModule\", { value: true });\r\nvar tslib_1 = __webpack_require__(1);\r\nvar inversify_1 = __webpack_require__(0);\r\nvar common_1 = __webpack_require__(2);\r\n;\r\nvar _1 = __webpack_require__(8);\r\nvar contracts_1 = __webpack_require__(3);\r\nvar OrganizationRoute = (function (_super) {\r\n    tslib_1.__extends(OrganizationRoute, _super);\r\n    function OrganizationRoute(appOptions, organizationBatchRoute) {\r\n        var _this = _super.call(this, appOptions) || this;\r\n        _this.appOptions = appOptions;\r\n        _this.organizationBatchRoute = organizationBatchRoute;\r\n        _this.findRoute = 'lookups/organizations/{?searchQuery,page,rpp,sort,embed,fields}';\r\n        _this.getRoute = 'lookups/organizations/{id}/{?embed,fields}';\r\n        _this.createRoute = 'lookups/organizations';\r\n        _this.updateRoute = 'lookups/organizations/{id}';\r\n        _this.deleteRoute = 'lookups/organizations/{id}';\r\n        return _this;\r\n    }\r\n    Object.defineProperty(OrganizationRoute.prototype, \"batch\", {\r\n        get: function () {\r\n            return this.organizationBatchRoute;\r\n        },\r\n        enumerable: true,\r\n        configurable: true\r\n    });\r\n    /**\r\n     * Parses find route which can be expanded with additional options. Supported items are:\r\n     * - `searchQuery` - A string referencing organization properties using the phrase or BQL (Baasic Query Language) search.\r\n     * - `page` - A value used to set the page number, i.e. to retrieve certain organization subset from the storage.\r\n     * - `rpp` - A value used to limit the size of result set per page.\r\n     * - `sort` - A string used to set the organization property to sort the result collection by.\r\n     * - `embed` - Comma separated list of resources to be contained within the current representation.\r\n     * @method\r\n     * @param options Query resource options object.\r\n     * @example organizationRoute.find({searchQuery: '<search-phrase>'});\r\n     **/\r\n    OrganizationRoute.prototype.find = function (options) {\r\n        return _super.prototype.baseFind.call(this, this.findRoute, options);\r\n    };\r\n    /**\r\n     * Parses get route; this route doesn't expose any properties.\r\n     * @method\r\n     * @param id Organization id which uniquely identifies resource that needs to be retrieved.\r\n     * @param options Query resource options object.\r\n     * @example organizationRoute.get(id, options);\r\n     **/\r\n    OrganizationRoute.prototype.get = function (id, options) {\r\n        return _super.prototype.baseGet.call(this, this.getRoute, id, options);\r\n    };\r\n    /**\r\n     * Parses create route; this URI template does not expose any additional options.\r\n     * @method\r\n     * @example organizationRoute.create();\r\n     **/\r\n    OrganizationRoute.prototype.create = function () {\r\n        return _super.prototype.baseCreate.call(this, this.createRoute, {});\r\n    };\r\n    /**\r\n     * Parses update route; this URI template does not expose any additional options.\r\n     * @method\r\n     * @param data An organization object used to update specified organization resource.\r\n     * @example organizationRoute.updata(data);\r\n     **/\r\n    OrganizationRoute.prototype.update = function (data) {\r\n        return _super.prototype.baseUpdate.call(this, this.updateRoute, data);\r\n    };\r\n    /**\r\n     * Parses delete route; this URI template does not expose any additional options.\r\n     * @method\r\n     * @param data An organization object used to delete specified organization resource.\r\n     * @example organizationRoute.delete(data);\r\n     **/\r\n    OrganizationRoute.prototype.delete = function (data) {\r\n        return _super.prototype.baseDelete.call(this, this.deleteRoute, data);\r\n    };\r\n    return OrganizationRoute;\r\n}(common_1.BaseRoute));\r\nOrganizationRoute = tslib_1.__decorate([\r\n    tslib_1.__param(0, inversify_1.inject(contracts_1.TYPES.IAppOptions)),\r\n    tslib_1.__param(1, inversify_1.inject(_1.TYPES.OrganizationBatchRoute)),\r\n    tslib_1.__metadata(\"design:paramtypes\", [typeof (_a = typeof contracts_1.IAppOptions !== \"undefined\" && contracts_1.IAppOptions) === \"function\" && _a || Object, typeof (_b = typeof _1.OrganizationBatchRoute !== \"undefined\" && _1.OrganizationBatchRoute) === \"function\" && _b || Object])\r\n], OrganizationRoute);\r\nexports.OrganizationRoute = OrganizationRoute;\r\nvar _a, _b;\r\n/**\r\n * @overview\r\n ***Notes:**\r\n - Refer to the [REST API documentation](https://github.com/Baasic/baasic-rest-api/wiki) for detailed information about available Baasic REST API end-points.\r\n - [URI Template](https://github.com/Baasic/uritemplate-js) syntax enables expanding the Baasic route templates to Baasic REST URIs providing it with an object that contains URI parameters.\r\n - All end-point objects are transformed by the associated route service.\r\n */ \r\n\n\n/***/ }),\n/* 334 */\n/***/ (function(module, exports, __webpack_require__) {\n\n\"use strict\";\n\r\nObject.defineProperty(exports, \"__esModule\", { value: true });\r\nvar tslib_1 = __webpack_require__(1);\r\nvar _1 = __webpack_require__(8);\r\nvar inversify_1 = __webpack_require__(0);\r\nvar Root = (function () {\r\n    function Root(profile, company, organization, skill) {\r\n        this.profile = profile;\r\n        this.company = company;\r\n        this.organization = organization;\r\n        this.skill = skill;\r\n    }\r\n    return Root;\r\n}());\r\nRoot = tslib_1.__decorate([\r\n    inversify_1.injectable(),\r\n    tslib_1.__param(0, inversify_1.inject(_1.TYPES.UserProfileClient)),\r\n    tslib_1.__param(1, inversify_1.inject(_1.TYPES.CompanyClient)),\r\n    tslib_1.__param(2, inversify_1.inject(_1.TYPES.OrganizationClient)),\r\n    tslib_1.__param(3, inversify_1.inject(_1.TYPES.SkillClient)),\r\n    tslib_1.__metadata(\"design:paramtypes\", [typeof (_a = typeof _1.UserProfileClient !== \"undefined\" && _1.UserProfileClient) === \"function\" && _a || Object, typeof (_b = typeof _1.CompanyClient !== \"undefined\" && _1.CompanyClient) === \"function\" && _b || Object, typeof (_c = typeof _1.OrganizationClient !== \"undefined\" && _1.OrganizationClient) === \"function\" && _c || Object, typeof (_d = typeof _1.SkillClient !== \"undefined\" && _1.SkillClient) === \"function\" && _d || Object])\r\n], Root);\r\nexports.Root = Root;\r\nvar _a, _b, _c, _d;\r\n\n\n/***/ }),\n/* 335 */\n/***/ (function(module, exports, __webpack_require__) {\n\n\"use strict\";\n/* globals module */\r\n/**\r\n * @module skillBatchClient\r\n * @description Baasic Skill Batch Service provides Baasic route templates which can be expanded to Baasic REST URIs. Various services can use Baasic Skill Route Service to obtain needed routes while other routes will be obtained through HAL. By convention, all route services use the same function names as their corresponding services.\r\n */\r\n\r\nObject.defineProperty(exports, \"__esModule\", { value: true });\r\nvar tslib_1 = __webpack_require__(1);\r\nvar inversify_1 = __webpack_require__(0);\r\nvar httpApi_1 = __webpack_require__(4);\r\nvar _1 = __webpack_require__(8);\r\nvar SkillBatchClient = (function () {\r\n    function SkillBatchClient(skillBatchRoute, apiClient) {\r\n        this.skillBatchRoute = skillBatchRoute;\r\n        this.apiClient = apiClient;\r\n    }\r\n    Object.defineProperty(SkillBatchClient.prototype, \"routeDefinition\", {\r\n        get: function () {\r\n            return this.skillBatchRoute;\r\n        },\r\n        enumerable: true,\r\n        configurable: true\r\n    });\r\n    /**\r\n     * Returns a promise that is resolved once the create skill action has been performed; this action creates new skill resources.\r\n     * @method\r\n     * @param data A collection of skill objects that need to be inserted into the system.\r\n     * @returns A promise that is resolved once the create skill action has been performed.\r\n     * @example   skillClient.create([{\r\n                    description : '<description>',\r\n                    name : '<name>',\r\n                    slug: '<slug>'\r\n                  }])\r\n                  .then(function (data) {\r\n                      // perform success action here\r\n                  },\r\n                    function (response, status, headers, config) {\r\n                        // perform error handling here\r\n                  });\r\n     **/\r\n    SkillBatchClient.prototype.create = function (data) {\r\n        return this.apiClient.post(this.routeDefinition.create(), this.routeDefinition.createParams(data));\r\n    };\r\n    /**\r\n     * Returns a promise that is resolved once the update skill action has been performed; this action updates specified skill resources.\r\n     * @method\r\n     * @param data A collection of skill objects used to update specified skill resources.\r\n     * @returns A promise that is resolved once the update skill action has been performed.\r\n     * @example   skillBatchClient.update(companies)\r\n                    .then(function (data) {\r\n                        // perform success action here\r\n                    },\r\n                     function (response, status, headers, config) {\r\n                         // perform error handling here\r\n                    });\r\n     **/\r\n    SkillBatchClient.prototype.update = function (data) {\r\n        return this.apiClient.put(this.routeDefinition.update(), this.routeDefinition.updateParams(data));\r\n    };\r\n    /**\r\n     * Returns a promise that is resolved once the remove action has been performed. This action will remove skill resources from the system if successfully completed.\r\n     * @method\r\n     * @param ids Collection of skill ids which uniquely identifies skill resources that need to be deleted.\r\n     * @returns A promise that is resolved once the remove action has been performed.\r\n     * @example skillBatchClient.remove(skillIds)\r\n                    .then(function (data) {\r\n                        // perform success action here\r\n                    },\r\n                     function (response, status, headers, config) {\r\n                         // perform error handling here\r\n                    });\r\n     **/\r\n    SkillBatchClient.prototype.remove = function (ids) {\r\n        return this.apiClient.delete(this.skillBatchRoute.delete(), undefined, ids);\r\n    };\r\n    return SkillBatchClient;\r\n}());\r\nSkillBatchClient = tslib_1.__decorate([\r\n    inversify_1.injectable(),\r\n    tslib_1.__param(0, inversify_1.inject(_1.TYPES.SkillBatchRoute)),\r\n    tslib_1.__param(1, inversify_1.inject(httpApi_1.httpTYPES.ApiClient)),\r\n    tslib_1.__metadata(\"design:paramtypes\", [typeof (_a = typeof _1.SkillBatchRoute !== \"undefined\" && _1.SkillBatchRoute) === \"function\" && _a || Object, typeof (_b = typeof httpApi_1.ApiClient !== \"undefined\" && httpApi_1.ApiClient) === \"function\" && _b || Object])\r\n], SkillBatchClient);\r\nexports.SkillBatchClient = SkillBatchClient;\r\nvar _a, _b;\r\n/**\r\n * @overview\r\n ***Notes:**\r\n - Refer to the [REST API documentation](https://github.com/Baasic/baasic-rest-api/wiki) for detailed information about available Baasic REST API end-points.\r\n - All end-point objects are transformed by the associated route service.\r\n */ \r\n\n\n/***/ }),\n/* 336 */\n/***/ (function(module, exports, __webpack_require__) {\n\n\"use strict\";\n/* globals module */\r\n/**\r\n * @module skillBatchRoute\r\n * @description Baasic Skill Batch Route Definition provides Baasic route templates which can be expanded to Baasic REST URIs. Various services can use Baasic Skill Route Service to obtain needed routes while other routes will be obtained through HAL. By convention, all route services  use the same function names as their corresponding services.\r\n */\r\n\r\nObject.defineProperty(exports, \"__esModule\", { value: true });\r\nvar tslib_1 = __webpack_require__(1);\r\nvar inversify_1 = __webpack_require__(0);\r\nvar common_1 = __webpack_require__(2);\r\nvar contracts_1 = __webpack_require__(3);\r\nvar SkillBatchRoute = (function (_super) {\r\n    tslib_1.__extends(SkillBatchRoute, _super);\r\n    function SkillBatchRoute(appOptions) {\r\n        var _this = _super.call(this, appOptions) || this;\r\n        _this.appOptions = appOptions;\r\n        _this.createRoute = 'profile/lookups/skills/batch';\r\n        _this.updateRoute = 'profile/lookups/skills/batch';\r\n        _this.deleteRoute = 'profile/lookups/skills/batch';\r\n        return _this;\r\n    }\r\n    /**\r\n     * Parses create route; this URI template does not expose any additional options.\r\n     * @method\r\n     * @example skillBatchRoute.create();\r\n     **/\r\n    SkillBatchRoute.prototype.create = function () {\r\n        return _super.prototype.baseCreate.call(this, this.createRoute, {});\r\n    };\r\n    /**\r\n      * Parses update route; this URI template does not expose any additional options.\r\n      * @method\r\n      * @example skillBatchRoute.update();\r\n      **/\r\n    SkillBatchRoute.prototype.update = function () {\r\n        return _super.prototype.baseUpdate.call(this, this.updateRoute, {});\r\n    };\r\n    /**\r\n      * Parses delete route; this URI template does not expose any additional options.\r\n      * @method\r\n      * @example skillBatchRoute.delete();\r\n      **/\r\n    SkillBatchRoute.prototype.delete = function () {\r\n        return _super.prototype.baseDelete.call(this, this.deleteRoute, {});\r\n    };\r\n    return SkillBatchRoute;\r\n}(common_1.BaseRoute));\r\nSkillBatchRoute = tslib_1.__decorate([\r\n    tslib_1.__param(0, inversify_1.inject(contracts_1.TYPES.IAppOptions)),\r\n    tslib_1.__metadata(\"design:paramtypes\", [typeof (_a = typeof contracts_1.IAppOptions !== \"undefined\" && contracts_1.IAppOptions) === \"function\" && _a || Object])\r\n], SkillBatchRoute);\r\nexports.SkillBatchRoute = SkillBatchRoute;\r\nvar _a;\r\n/**\r\n * @overview\r\n ***Notes:**\r\n - Refer to the [REST API documentation](https://github.com/Baasic/baasic-rest-api/wiki) for detailed information about available Baasic REST API end-points.\r\n - [URI Template](https://github.com/Baasic/uritemplate-js) syntax enables expanding the Baasic route templates to Baasic REST URIs providing it with an object that contains URI parameters.\r\n - All end-point objects are transformed by the associated route service.\r\n */ \r\n\n\n/***/ }),\n/* 337 */\n/***/ (function(module, exports, __webpack_require__) {\n\n\"use strict\";\n/* globals module */\r\n/**\r\n * @module skillClient\r\n * @description  Skill Client provides Baasic route templates which can be expanded to Baasic REST URIs. Various services can use Baasic Skill Route Service to obtain needed routes while other routes will be obtained through HAL. By convention, all route services use the same function names as their corresponding services.\r\n */\r\n\r\nObject.defineProperty(exports, \"__esModule\", { value: true });\r\nvar tslib_1 = __webpack_require__(1);\r\nvar inversify_1 = __webpack_require__(0);\r\n;\r\nvar httpApi_1 = __webpack_require__(4);\r\nvar _1 = __webpack_require__(8);\r\nvar SkillClient = (function () {\r\n    function SkillClient(skillRoute, skillBatchClient, apiClient) {\r\n        this.skillRoute = skillRoute;\r\n        this.skillBatchClient = skillBatchClient;\r\n        this.apiClient = apiClient;\r\n    }\r\n    Object.defineProperty(SkillClient.prototype, \"routeDefinition\", {\r\n        get: function () {\r\n            return this.skillRoute;\r\n        },\r\n        enumerable: true,\r\n        configurable: true\r\n    });\r\n    Object.defineProperty(SkillClient.prototype, \"batch\", {\r\n        get: function () {\r\n            return this.skillBatchClient;\r\n        },\r\n        enumerable: true,\r\n        configurable: true\r\n    });\r\n    /**\r\n     * Returns a promise that is resolved once the find action has been performed. Success response returns a list of skill resources matching the given criteria.\r\n     * @method\r\n     * @param options Query resource options object.\r\n     * @returns A promise that is resolved once the find action has been performed.\r\n     * @example skillClient.find({\r\n                    pageNumber : 1,\r\n                    pageSize : 10,\r\n                    orderBy : '<field>',\r\n                    orderDirection : '<asc|desc>',\r\n                    search : '<search-phrase>'\r\n                })\r\n                .then(function (collection) {\r\n                    // perform success action here\r\n                },\r\n                 function (response, status, headers, config) {\r\n                     // perform error handling here\r\n                });\r\n     **/\r\n    SkillClient.prototype.find = function (options) {\r\n        return this.apiClient.get(this.routeDefinition.find(options));\r\n    };\r\n    /**\r\n     * Returns a promise that is resolved once the get action has been performed. Success response returns the skill resource.\r\n     * @method\r\n     * @param id Skill id which uniquely identifies skill resource that needs to be retrieved.\r\n     * @param options Query resource options object.\r\n     * @example skillClient.get(id, options)\r\n                    .then(function (data) {\r\n                        // perform success action here\r\n                    },\r\n                     function (response, status, headers, config) {\r\n                         // perform error handling here\r\n                    });\r\n     **/\r\n    SkillClient.prototype.get = function (id, options) {\r\n        return this.apiClient.get(this.skillRoute.get(id, options));\r\n    };\r\n    /**\r\n     * Returns a promise that is resolved once the create skill action has been performed; this action creates a new skill resource.\r\n     * @method\r\n     * @param data A skill object that needs to be inserted into the system.\r\n     * @returns A promise that is resolved once the create skill action has been performed.\r\n     * @example skillClient.create({\r\n                    description : '<description>',\r\n                    name : '<name>',\r\n                    slug: '<slug>'\r\n                })\r\n                .then(function (data) {\r\n                    // perform success action here\r\n                },\r\n                 function (response, status, headers, config) {\r\n                     // perform error handling here\r\n                });\r\n     **/\r\n    SkillClient.prototype.create = function (data) {\r\n        return this.apiClient.post(this.routeDefinition.create(), this.routeDefinition.createParams(data));\r\n    };\r\n    /**\r\n     * Returns a promise that is resolved once the update skill action has been performed; this action updates a skill resource. This route uses HAL enabled objects to obtain routes and therefore it doesn't apply `skillRoute` route template. Here is an example of how a route can be obtained from HAL enabled objects:\r\n     * ```\r\n     * let params = modelMapper.removeParams(skill);\r\n     * let uri = params['model'].links('put').href;\r\n     * ```\r\n     * @method\r\n     * @param data A skill object used to update specified skill resource.\r\n     * @returns A promise that is resolved once the update skill action has been performed.\r\n     * @example // skill is a resource previously fetched using get action.\r\n                    skill.description = '<description>';\r\n                    skillClient.update(skill)\r\n                        .then(function (data) {\r\n                            // perform success action here\r\n                        },\r\n                         function (response, status, headers, config) {\r\n                             // perform error handling here\r\n                        });\r\n     **/\r\n    SkillClient.prototype.update = function (data) {\r\n        return this.apiClient.put(this.routeDefinition.update(data), this.routeDefinition.updateParams(data));\r\n    };\r\n    /**\r\n     * Returns a promise that is resolved once the remove action has been performed. This action will remove a skill resource from the system if successfully completed. This route uses HAL enabled objects to obtain routes and therefore it doesn't apply `skillRoute` route template. Here is an example of how a route can be obtained from HAL enabled objects:\r\n     * ```\r\n     * let params = modelMapper.removeParams(skill);\r\n     * let uri = params['model'].links('delete').href;\r\n     * ```\r\n     * @method\r\n     * @param A skill object used to delete specified skill resource.\r\n     * @returns A promise that is resolved once the remove action has been performed.\r\n     * @example // skill is a resource previously fetched using get action.\r\n                       skillClient.remove(skill)\r\n                           .then(function (data) {\r\n                               // perform success action here\r\n                           },\r\n                            function (response, status, headers, config) {\r\n                                // perform error handling here\r\n                           });\r\n    **/\r\n    SkillClient.prototype.remove = function (data) {\r\n        return this.apiClient.delete(this.routeDefinition.delete(data));\r\n    };\r\n    return SkillClient;\r\n}());\r\nSkillClient = tslib_1.__decorate([\r\n    inversify_1.injectable(),\r\n    tslib_1.__param(0, inversify_1.inject(_1.TYPES.SkillRoute)),\r\n    tslib_1.__param(1, inversify_1.inject(_1.TYPES.SkillBatchClient)),\r\n    tslib_1.__param(2, inversify_1.inject(httpApi_1.httpTYPES.ApiClient)),\r\n    tslib_1.__metadata(\"design:paramtypes\", [typeof (_a = typeof _1.SkillRoute !== \"undefined\" && _1.SkillRoute) === \"function\" && _a || Object, typeof (_b = typeof _1.SkillBatchClient !== \"undefined\" && _1.SkillBatchClient) === \"function\" && _b || Object, typeof (_c = typeof httpApi_1.ApiClient !== \"undefined\" && httpApi_1.ApiClient) === \"function\" && _c || Object])\r\n], SkillClient);\r\nexports.SkillClient = SkillClient;\r\nvar _a, _b, _c;\r\n\n\n/***/ }),\n/* 338 */\n/***/ (function(module, exports, __webpack_require__) {\n\n\"use strict\";\n/* globals module */\r\n/**\r\n * @module skillRoute\r\n * @description Baasic Skill Route Definition provides Baasic route templates which can be expanded to Baasic REST URIs. Various services can use Baasic Skill Route Service to obtain needed routes while other routes will be obtained through HAL. By convention, all route services  use the same function names as their corresponding services.\r\n */\r\n\r\nObject.defineProperty(exports, \"__esModule\", { value: true });\r\nvar tslib_1 = __webpack_require__(1);\r\nvar inversify_1 = __webpack_require__(0);\r\nvar common_1 = __webpack_require__(2);\r\n;\r\nvar _1 = __webpack_require__(8);\r\nvar contracts_1 = __webpack_require__(3);\r\nvar SkillRoute = (function (_super) {\r\n    tslib_1.__extends(SkillRoute, _super);\r\n    function SkillRoute(appOptions, skillBatchRoute) {\r\n        var _this = _super.call(this, appOptions) || this;\r\n        _this.appOptions = appOptions;\r\n        _this.skillBatchRoute = skillBatchRoute;\r\n        _this.findRoute = 'profile/lookups/skills/{?searchQuery,page,rpp,sort,embed,fields}';\r\n        _this.getRoute = 'profile/lookups/skills';\r\n        _this.createRoute = 'profile/lookups/skills';\r\n        _this.updateRoute = 'profile/lookups/skills/{id}';\r\n        _this.deleteRoute = 'lookups/skills/{id}';\r\n        return _this;\r\n    }\r\n    Object.defineProperty(SkillRoute.prototype, \"batch\", {\r\n        get: function () {\r\n            return this.skillBatchRoute;\r\n        },\r\n        enumerable: true,\r\n        configurable: true\r\n    });\r\n    /**\r\n     * Parses find route which can be expanded with additional options. Supported items are:\r\n     * - `searchQuery` - A string referencing skill properties using the phrase or BQL (Baasic Query Language) search.\r\n     * - `page` - A value used to set the page number, i.e. to retrieve certain skill subset from the storage.\r\n     * - `rpp` - A value used to limit the size of result set per page.\r\n     * - `sort` - A string used to set the skill property to sort the result collection by.\r\n     * - `embed` - Comma separated list of resources to be contained within the current representation.\r\n     * @method\r\n     * @param options Query resource options object.\r\n     * @example skillRoute.find({searchQuery: '<search-phrase>'});\r\n     **/\r\n    SkillRoute.prototype.find = function (options) {\r\n        return _super.prototype.baseFind.call(this, this.findRoute, options);\r\n    };\r\n    /**\r\n     * Parses get route; this route doesn't expose any properties.\r\n     * @method\r\n     * @param id Skill id which uniquely identifies skill resource that needs to be retrieved.\r\n     * @param options Query resource options object.\r\n     * @example skillRoute.get(id, options);\r\n     **/\r\n    SkillRoute.prototype.get = function (id, options) {\r\n        return _super.prototype.baseGet.call(this, this.getRoute, id, options);\r\n    };\r\n    /**\r\n     * Parses create route; this URI template does not expose any additional options.\r\n     * @method\r\n     * @example skillRoute.create();\r\n     **/\r\n    SkillRoute.prototype.create = function () {\r\n        return _super.prototype.baseCreate.call(this, this.createRoute, {});\r\n    };\r\n    /**\r\n     * Parses update route; this URI template does not expose any additional options.\r\n     * @method\r\n     * @param data A skill object used to update specified skill resource.\r\n     * @example skillRoute.update(data);\r\n     **/\r\n    SkillRoute.prototype.update = function (data) {\r\n        return _super.prototype.baseUpdate.call(this, this.updateRoute, data);\r\n    };\r\n    /**\r\n     * Parses delete route; this URI template does not expose any additional options.\r\n     * @method\r\n     * @param data A skill object used to delete specified skill resource.\r\n     * @example skillRoute.delete(data);\r\n     **/\r\n    SkillRoute.prototype.delete = function (data) {\r\n        return _super.prototype.baseDelete.call(this, this.deleteRoute, data);\r\n    };\r\n    return SkillRoute;\r\n}(common_1.BaseRoute));\r\nSkillRoute = tslib_1.__decorate([\r\n    tslib_1.__param(0, inversify_1.inject(contracts_1.TYPES.IAppOptions)),\r\n    tslib_1.__param(1, inversify_1.inject(_1.TYPES.SkillBatchRoute)),\r\n    tslib_1.__metadata(\"design:paramtypes\", [typeof (_a = typeof contracts_1.IAppOptions !== \"undefined\" && contracts_1.IAppOptions) === \"function\" && _a || Object, typeof (_b = typeof _1.SkillBatchRoute !== \"undefined\" && _1.SkillBatchRoute) === \"function\" && _b || Object])\r\n], SkillRoute);\r\nexports.SkillRoute = SkillRoute;\r\nvar _a, _b;\r\n\n\n/***/ }),\n/* 339 */\n/***/ (function(module, exports, __webpack_require__) {\n\n\"use strict\";\n/* globals module */\r\n/**\r\n * @module userEducationClient  * @description  User Education Client provides Baasic route templates which can be expanded to Baasic REST URIs. Various services can use Baasic User Education Route Definition to obtain needed routes while other routes will be obtained through HAL. By convention, all route services use the same function names as their corresponding services.\r\n */\r\n\r\nObject.defineProperty(exports, \"__esModule\", { value: true });\r\nvar tslib_1 = __webpack_require__(1);\r\nvar inversify_1 = __webpack_require__(0);\r\n;\r\nvar httpApi_1 = __webpack_require__(4);\r\nvar _1 = __webpack_require__(8);\r\nvar UserEducationClient = (function () {\r\n    function UserEducationClient(userEducationRoute, apiClient) {\r\n        this.userEducationRoute = userEducationRoute;\r\n        this.apiClient = apiClient;\r\n    }\r\n    Object.defineProperty(UserEducationClient.prototype, \"routeDefinition\", {\r\n        get: function () {\r\n            return this.userEducationRoute;\r\n        },\r\n        enumerable: true,\r\n        configurable: true\r\n    });\r\n    /**\r\n     * Returns a promise that is resolved once the find action has been performed. Success response returns a list of user education resources matching the given criteria.\r\n     * @method\r\n     * @param options Query resource options object.\r\n     * @returns A promise that is resolved once the find action has been performed.\r\n     * @example userEducationClient.find({\r\n                    pageNumber : 1,\r\n                    pageSize : 10,\r\n                    orderBy : '<field>',\r\n                    orderDirection : '<asc|desc>',\r\n                    search : '<search-phrase>'\r\n                })\r\n                .then(function (collection) {\r\n                    // perform success action here\r\n                },\r\n                 function (response, status, headers, config) {\r\n                     // perform error handling here\r\n                });\r\n     **/\r\n    UserEducationClient.prototype.find = function (options) {\r\n        return this.apiClient.get(this.routeDefinition.find(options));\r\n    };\r\n    /**\r\n     * Returns a promise that is resolved once the get action has been performed. Success response returns the user education resource.\r\n     * @method\r\n     * @example userEducationClient.get(id)\r\n                    .then(function (data) {\r\n                        // perform success action here\r\n                    },\r\n                     function (response, status, headers, config) {\r\n                         // perform error handling here\r\n                    });\r\n     **/\r\n    UserEducationClient.prototype.get = function (id, options) {\r\n        return this.apiClient.get(this.userEducationRoute.get(id, options));\r\n    };\r\n    /**\r\n     * Returns a promise that is resolved once the create user education action has been performed; this action creates a new user education resource.\r\n     * @method\r\n     * @param data An user education object that needs to be inserted into the system.\r\n     * @returns A promise that is resolved once the create user education action has been performed.\r\n     * @example userEducationClient.create({\r\n                    organizationName : '<organization-name>',\r\n                    summary: '<summary>',\r\n                    userId: '<user-id>'\r\n                })\r\n                .then(function (data) {\r\n                    // perform success action here\r\n                },\r\n                 function (response, status, headers, config) {\r\n                     // perform error handling here\r\n                });\r\n     **/\r\n    UserEducationClient.prototype.create = function (data) {\r\n        return this.apiClient.post(this.routeDefinition.create(data), this.routeDefinition.createParams(data));\r\n    };\r\n    /**\r\n     * Returns a promise that is resolved once the update user education action has been performed; this action updates a user education resource. This route uses HAL enabled objects to obtain routes and therefore it doesn't apply `userEducationRoute` route template. Here is an example of how a route can be obtained from HAL enabled objects:\r\n     * ```\r\n     * let params = modelMapper.removeParams(education);\r\n     * let uri = params['model'].links('put').href;\r\n     * ```\r\n     * @method\r\n     * @param data An user education object used to update specified user education resource.\r\n     * @returns A promise that is resolved once the update user education action has been performed.\r\n     * @example // education is a resource previously fetched using get action.\r\n                    education.degree = '<degree>';\r\n                    userEducationClient.update(education)\r\n                        .then(function (data) {\r\n                            // perform success action here\r\n                        },\r\n                         function (response, status, headers, config) {\r\n                             // perform error handling here\r\n                        });\r\n     **/\r\n    UserEducationClient.prototype.update = function (data) {\r\n        return this.apiClient.put(this.routeDefinition.update(data), this.routeDefinition.updateParams(data));\r\n    };\r\n    /**\r\n     * Returns a promise that is resolved once the remove action has been performed. This action will remove a user education resource from the system if successfully completed. This route uses HAL enabled objects to obtain routes and therefore it doesn't apply `baasicUserEducationRoutDefinition` route template. Here is an example of how a route can be obtained from HAL enabled objects:\r\n     * ```\r\n     * let params = modelMapper.removeParams(education);\r\n     * let uri = params['model'].links('delete').href;\r\n     * ```\r\n     * @method\r\n     * @example // education is a resource previously fetched using get action.\r\n                    userEducationClient.remove(education)\r\n                        .then(function (data) {\r\n                            // perform success action here\r\n                        },\r\n                         function (response, status, headers, config) {\r\n                             // perform error handling here\r\n                        });\r\n     **/\r\n    UserEducationClient.prototype.remove = function (data) {\r\n        return this.apiClient.delete(this.routeDefinition.delete(data));\r\n    };\r\n    return UserEducationClient;\r\n}());\r\nUserEducationClient = tslib_1.__decorate([\r\n    inversify_1.injectable(),\r\n    tslib_1.__param(0, inversify_1.inject(_1.TYPES.UserEducationRoute)),\r\n    tslib_1.__param(1, inversify_1.inject(httpApi_1.httpTYPES.ApiClient)),\r\n    tslib_1.__metadata(\"design:paramtypes\", [typeof (_a = typeof _1.UserEducationRoute !== \"undefined\" && _1.UserEducationRoute) === \"function\" && _a || Object, typeof (_b = typeof httpApi_1.ApiClient !== \"undefined\" && httpApi_1.ApiClient) === \"function\" && _b || Object])\r\n], UserEducationClient);\r\nexports.UserEducationClient = UserEducationClient;\r\nvar _a, _b;\r\n/**\r\n * @overview\r\n ***Notes:**\r\n - Refer to the [REST API documentation](https://github.com/Baasic/baasic-rest-api/wiki) for detailed information about available Baasic REST API end-points.\r\n - All end-point objects are transformed by the associated route service.\r\n */ \r\n\n\n/***/ }),\n/* 340 */\n/***/ (function(module, exports, __webpack_require__) {\n\n\"use strict\";\n/* globals module */\r\n/**\r\n * @module userEducationRoute\r\n * @description Baasic User Education Route Definition provides Baasic route templates which can be expanded to Baasic REST URIs. Various services can use Baasic User Education Route Definition to obtain needed routes while other routes will be obtained through HAL. By convention, all route services use the same function names as their corresponding services.\r\n */\r\n\r\nObject.defineProperty(exports, \"__esModule\", { value: true });\r\nvar tslib_1 = __webpack_require__(1);\r\nvar inversify_1 = __webpack_require__(0);\r\nvar common_1 = __webpack_require__(2);\r\n;\r\nvar contracts_1 = __webpack_require__(3);\r\nvar UserEducationRoute = (function (_super) {\r\n    tslib_1.__extends(UserEducationRoute, _super);\r\n    function UserEducationRoute(appOptions) {\r\n        var _this = _super.call(this, appOptions) || this;\r\n        _this.appOptions = appOptions;\r\n        _this.findRoute = 'profiles/{userId}/educations/{?searchQuery,page,rpp,sort,embed,fields}';\r\n        _this.getRoute = 'profiles/{userId}/educations/{id}/{?embed,fields}';\r\n        _this.createRoute = 'profiles/{userId}/educations';\r\n        _this.updateRoute = 'profiles/{userId}/educations/{id}';\r\n        _this.deleteRoute = 'profiles/{userId}/educations/{id}';\r\n        return _this;\r\n    }\r\n    /**\r\n     * Parses find route which can be expanded with additional options. Supported items are:\r\n     * - `searchQuery` - A string referencing user education properties using the phrase or BQL (Baasic Query Language) search.\r\n     * - `page` - A value used to set the page number, i.e. to retrieve certain user education subset from the storage.\r\n     * - `rpp` - A value used to limit the size of result set per page.\r\n     * - `sort` - A string used to set the user education property to sort the result collection by.\r\n     * - `embed` - Comma separated list of resources to be contained within the current representation.\r\n     * @method\r\n     * @param options Query resource options object.\r\n     * @example userEducationRoute.find({searchQuery: '<search-phrase>'});\r\n     **/\r\n    UserEducationRoute.prototype.find = function (options) {\r\n        return _super.prototype.baseFind.call(this, this.findRoute, options);\r\n    };\r\n    /**\r\n     * Parses get route; this route doesn't expose any properties.\r\n     * @method\r\n     * @param id User education id which uniquely identifies user education resource that needs to be retrieved.\r\n     * @param options Query resource options object.\r\n     * @example userEducationRoute.get(id);\r\n     **/\r\n    UserEducationRoute.prototype.get = function (id, options) {\r\n        return _super.prototype.baseGet.call(this, this.getRoute, id, options);\r\n    };\r\n    /**\r\n     * Parses create route; this URI template does not expose any additional options.\r\n     * @method\r\n     * @param data An user education object that needs to be inserted into the system.\r\n     * @example userEducationRoute.create(data);\r\n     **/\r\n    UserEducationRoute.prototype.create = function (data) {\r\n        return _super.prototype.baseCreate.call(this, this.createRoute, data);\r\n    };\r\n    /**\r\n     * Parses update route; this URI template does not expose any additional options.\r\n     * @method\r\n     * @param data An user education object used to update specified skill resource.\r\n     * @example userEducationRoute.update(data);\r\n     **/\r\n    UserEducationRoute.prototype.update = function (data) {\r\n        return _super.prototype.baseUpdate.call(this, this.updateRoute, data);\r\n    };\r\n    /**\r\n     * Parses delte route; this URI template does not expose any additional options.\r\n     * @method\r\n     * @param data An user education object used to delete specified skill resource.\r\n     * @example userEducationRoute.delete(data);\r\n     **/\r\n    UserEducationRoute.prototype.delete = function (data) {\r\n        return _super.prototype.baseDelete.call(this, this.deleteRoute, data);\r\n    };\r\n    return UserEducationRoute;\r\n}(common_1.BaseRoute));\r\nUserEducationRoute = tslib_1.__decorate([\r\n    tslib_1.__param(0, inversify_1.inject(contracts_1.TYPES.IAppOptions)),\r\n    tslib_1.__metadata(\"design:paramtypes\", [typeof (_a = typeof contracts_1.IAppOptions !== \"undefined\" && contracts_1.IAppOptions) === \"function\" && _a || Object])\r\n], UserEducationRoute);\r\nexports.UserEducationRoute = UserEducationRoute;\r\nvar _a;\r\n/**\r\n * @overview\r\n ***Notes:**\r\n - Refer to the [REST API documentation](https://github.com/Baasic/baasic-rest-api/wiki) for detailed information about available Baasic REST API end-points.\r\n - [URI Template](https://github.com/Baasic/uritemplate-js) syntax enables expanding the Baasic route templates to Baasic REST URIs providing it with an object that contains URI parameters.\r\n - All end-point objects are transformed by the associated route service.\r\n */ \r\n\n\n/***/ }),\n/* 341 */\n/***/ (function(module, exports, __webpack_require__) {\n\n\"use strict\";\n/* globals module */\r\n/**\r\n * @module userProfileACLClient\r\n * @description  User Profile ACL Client provides an easy way to consume  User Profile REST API end-points. In order to obtain needed routes `userProfileACLClient` uses `userProfileACLRoute`.\r\n */\r\n\r\nObject.defineProperty(exports, \"__esModule\", { value: true });\r\nvar tslib_1 = __webpack_require__(1);\r\nvar inversify_1 = __webpack_require__(0);\r\n;\r\nvar httpApi_1 = __webpack_require__(4);\r\nvar _1 = __webpack_require__(8);\r\nvar UserProfileACLClient = (function () {\r\n    function UserProfileACLClient(userProfileACLRoute, apiClient) {\r\n        this.userProfileACLRoute = userProfileACLRoute;\r\n        this.apiClient = apiClient;\r\n    }\r\n    Object.defineProperty(UserProfileACLClient.prototype, \"routeDefinition\", {\r\n        get: function () {\r\n            return this.userProfileACLRoute;\r\n        },\r\n        enumerable: true,\r\n        configurable: true\r\n    });\r\n    /**\r\n     * Returns a promise that is resolved once the get action has been performed. Success response returns a list of ACL policies established for the specified user profile resource.\r\n     * @method\r\n     * @param options Query resource options object.\r\n     * @returns A promise that is resolved once the get action has been performed.\r\n     * @example userProfileACLClient.get({id: '<profile-id>'})\r\n                    .then(function (data) {\r\n                        // perform success action here\r\n                    },\r\n                     function (response, status, headers, config) {\r\n                         // perform error handling here\r\n                    });\r\n     **/\r\n    UserProfileACLClient.prototype.get = function (options) {\r\n        return this.apiClient.get(this.routeDefinition.get(options));\r\n    };\r\n    /**\r\n     * Returns a promise that is resolved once the update acl action has been performed, this action creates new ACL policy for the specified user profile resource.\r\n     * @method\r\n     * @param options ACL options object.\r\n     * @returns A promise that is resolved once the update acl action has been performed.\r\n     * @example let options = {id : '<profile-id>'};\r\n                let aclObj =  {  actionId: '<action-id'>,  roleId: '<roleId>',  userId: '<userId>' };\r\n                options[baasicConstants.modelPropertyName] = aclObj;\r\n                userProfileACLClient.update(options)\r\n                    .then(function (data) {\r\n                        // perform success action here\r\n                    },\r\n                     function (response, status, headers, config) {\r\n                         // perform error handling here\r\n                    });\r\n     **/\r\n    UserProfileACLClient.prototype.update = function (options) {\r\n        return this.apiClient.put(this.routeDefinition.update(options), this.routeDefinition.updateParams(options));\r\n    };\r\n    /**\r\n     * Returns a promise that is resolved once the removeByUser action has been performed. This action deletes ACL policy assigned to the specified user and user profile resource.\r\n     * @method\r\n     * @param profileId User profile id which uniquely identifies user profile resource whose security privileges need to be retrieved and updated.\r\n     * @param action Action abbreviation which identifies ACL policy assigned to the specified user and user profile resource.\r\n     *               Supported Values:\r\n     *               \"Create\"\r\n     *               \"Delete\"\r\n     *               \"Read\"\r\n     *               \"Update\"\r\n     * @param user A value that uniquely identifies user for which ACL policy needs to be removed.\r\n     * @param data ACL policy object used to delete specified ACL policy resource.\r\n     * @returns A promise that is resolved once the removeByUser action has been performed.\r\n     * @example userProfileACLClient.removeByUser('<profile-id>', '<access-action>', '<username>')\r\n                    .then(function (data) {\r\n                        // perform success action here\r\n                    },\r\n                     function (response, status, headers, config) {\r\n                         // perform error handling here\r\n                    });\r\n     **/\r\n    UserProfileACLClient.prototype.removeByUser = function (profileId, action, user, data) {\r\n        return this.apiClient.delete(this.userProfileACLRoute.deleteByUser(profileId, action, user, data));\r\n    };\r\n    /**\r\n     * Returns a promise that is resolved once the removeByRole action has been performed. This action deletes ACL policy assigned to the specified role and user profile resource.\r\n     * @method\r\n     * @param profileId User profile id which uniquely identifies user profile resource whose security privileges need to be retrieved and updated.\r\n     * @param action Action abbreviation which identifies ACL policy assigned to the specified user and user profile resource.\r\n     *               Supported Values:\r\n     *               \"Create\"\r\n     *               \"Delete\"\r\n     *               \"Read\"\r\n     *               \"Update\"\r\n     * @param role A value that uniquely identifies role for which ACL policy needs to be removed.\r\n     * @param data  ACL policy object used to delete specified ACL policy resource.\r\n     * @returns A promise that is resolved once the removeByRole action has been performed.\r\n     * @example userProfileACLClient.removeByRole('<profile-id>', '<access-action>', '<role-name>')\r\n                    .then(function (data) {\r\n                        // perform success action here\r\n                    },\r\n                     function (response, status, headers, config) {\r\n                         // perform error handling here\r\n                    });\r\n     **/\r\n    UserProfileACLClient.prototype.removeByRole = function (profileId, action, role, data) {\r\n        return this.apiClient.delete(this.userProfileACLRoute.deleteByRole(profileId, action, role, data));\r\n    };\r\n    return UserProfileACLClient;\r\n}());\r\nUserProfileACLClient = tslib_1.__decorate([\r\n    inversify_1.injectable(),\r\n    tslib_1.__param(0, inversify_1.inject(_1.TYPES.UserProfileACLRoute)),\r\n    tslib_1.__param(1, inversify_1.inject(httpApi_1.httpTYPES.ApiClient)),\r\n    tslib_1.__metadata(\"design:paramtypes\", [typeof (_a = typeof _1.UserProfileACLRoute !== \"undefined\" && _1.UserProfileACLRoute) === \"function\" && _a || Object, typeof (_b = typeof httpApi_1.ApiClient !== \"undefined\" && httpApi_1.ApiClient) === \"function\" && _b || Object])\r\n], UserProfileACLClient);\r\nexports.UserProfileACLClient = UserProfileACLClient;\r\nvar _a, _b;\r\n/**\r\n * @copyright (c) 2017 Mono Ltd\r\n * @license MIT\r\n * @author Mono Ltd\r\n * @overview\r\n ***Notes:**\r\n - Refer to the [Baasic REST API](http://dev.baasic.com/api/reference/home) for detailed information about available Baasic REST API end-points.\r\n - All end-point objects are transformed by the associated route service.\r\n */ \r\n\n\n/***/ }),\n/* 342 */\n/***/ (function(module, exports, __webpack_require__) {\n\n\"use strict\";\n/* globals module */\r\n/**\r\n * @module userProfileACLRoute\r\n * @description Baasic User ACL Profile Route Definition provides Baasic route templates which can be expanded to Baasic REST URIs. Various services can use Baasic User Profile ACL Route Definition to obtain needed routes while other routes will be obtained through HAL. By convention, all route services  use the same function names as their corresponding services.\r\n */\r\n\r\nObject.defineProperty(exports, \"__esModule\", { value: true });\r\nvar tslib_1 = __webpack_require__(1);\r\nvar inversify_1 = __webpack_require__(0);\r\nvar common_1 = __webpack_require__(2);\r\n;\r\nvar contracts_1 = __webpack_require__(3);\r\nvar UserProfileACLRoute = (function (_super) {\r\n    tslib_1.__extends(UserProfileACLRoute, _super);\r\n    function UserProfileACLRoute(appOptions) {\r\n        var _this = _super.call(this, appOptions) || this;\r\n        _this.appOptions = appOptions;\r\n        _this.getRoute = 'profiles/{id}/acl/{?fields}';\r\n        _this.updateRoute = 'profiles/{id}/acl/{?fields}';\r\n        _this.deleteByUserRoute = 'profiles/{id}/acl/actions/{accessAction}/users/{user}/';\r\n        _this.deleteByRoleRoute = 'profiles/{id}/acl/actions/{accessAction}/roles/{role}/';\r\n        return _this;\r\n    }\r\n    /**\r\n     * Parses get user profile acl route; this URI template should be expanded with the Id of the user profile resource.\r\n     * @method\r\n     * @param options Query resource options object.\r\n     * @example userProfileACLRoute.get({id: '<profile-id>'});\r\n     **/\r\n    UserProfileACLRoute.prototype.get = function (options) {\r\n        var params = this.utility.extend({}, options);\r\n        return _super.prototype.baseCreate.call(this, this.getRoute, params);\r\n    };\r\n    /**\r\n     * Parses update user profile acl route; this URI template should be expanded with the Id of the user profile.\r\n     * @method\r\n     * @param options ACL options object.\r\n     * @example userProfileACLRoute.update({id: '<profile-id>'});\r\n     **/\r\n    UserProfileACLRoute.prototype.update = function (options) {\r\n        var params = this.utility.extend({}, options);\r\n        return _super.prototype.baseCreate.call(this, this.updateRoute, params);\r\n    };\r\n    UserProfileACLRoute.prototype.updateParams = function (options) {\r\n        var params = this.utility.extend({}, options);\r\n        return params[this.modelMapper.modelPropertyName];\r\n    };\r\n    /**\r\n     * Parses deleteByUser user profile acl route which can be expanded with additional options. Supported items are:\r\n     * - `id` - Id of the user profile resource.\r\n     * - `accessAction` - Action abbreviation which identifies ACL policy assigned to the specified user and user profile resource.\r\n     * - `user` - A value which uniquely identifies user for which ACL policy needs to be removed.\r\n     * @method\r\n     * @param profileId User profile id which uniquely identifies user profile resource whose security privileges need to be retrieved and updated.\r\n     * @param action Action abbreviation which identifies ACL policy assigned to the specified user and user profile resource.\r\n     *               Supported Values:\r\n     *               \"Create\"\r\n     *               \"Delete\"\r\n     *               \"Read\"\r\n     *               \"Update\"\r\n     * @param user A value that uniquely identifies user for which ACL policy needs to be removed.\r\n     * @param data ACL policy object used to delete specified ACL policy resource.\r\n     * @example userProfileACLRoute.deleteByUser({ id: '<profile-id>', accessAction: '<access-action>', user: '<username>' });\r\n     **/\r\n    UserProfileACLRoute.prototype.deleteByUser = function (profileId, action, user, data) {\r\n        var params = this.modelMapper.removeParams(data);\r\n        params.profileId = profileId;\r\n        params.user = user;\r\n        params.accessAction = action;\r\n        return _super.prototype.baseCreate.call(this, this.deleteByUserRoute, params);\r\n    };\r\n    /**\r\n     * Parses deleteByUser user profile acl route which can be expanded with additional options. Supported items are:\r\n     * - `id` - Id of the user profile.\r\n     * - `accessAction` - Action abbreviation which identifies ACL policy assigned to the specified role and user profile resource.\r\n     * - `role` - A value which uniquely identifies role for which ACL policy needs to be removed.\r\n     * @method\r\n     * @param profileId User profile id which uniquely identifies user profile resource whose security privileges need to be retrieved and updated.\r\n     * @param action Action abbreviation which identifies ACL policy assigned to the specified user and user profile resource.\r\n     *               Supported Values:\r\n     *               \"Create\"\r\n     *               \"Delete\"\r\n     *               \"Read\"\r\n     *               \"Update\"\r\n     * @param role A value that uniquely identifies role for which ACL policy needs to be removed.\r\n     * @param data  ACL policy object used to delete specified ACL policy resource.\r\n     * @example userProfileACLRoute.deleteByRole.expand({ id: '<profile-id>', accessAction: '<access-action>', role: '<role-name>' });\r\n     **/\r\n    UserProfileACLRoute.prototype.deleteByRole = function (profileId, action, role, data) {\r\n        var params = this.modelMapper.removeParams(data);\r\n        params.profileId = profileId;\r\n        params.role = role;\r\n        params.accessAction = action;\r\n        return _super.prototype.baseCreate.call(this, this.deleteByRoleRoute, params);\r\n    };\r\n    return UserProfileACLRoute;\r\n}(common_1.BaseRoute));\r\nUserProfileACLRoute = tslib_1.__decorate([\r\n    tslib_1.__param(0, inversify_1.inject(contracts_1.TYPES.IAppOptions)),\r\n    tslib_1.__metadata(\"design:paramtypes\", [typeof (_a = typeof contracts_1.IAppOptions !== \"undefined\" && contracts_1.IAppOptions) === \"function\" && _a || Object])\r\n], UserProfileACLRoute);\r\nexports.UserProfileACLRoute = UserProfileACLRoute;\r\nvar _a;\r\n/**\r\n * @copyright (c) 2017 Mono Ltd\r\n * @license MIT\r\n * @author Mono Ltd\r\n * @overview\r\n ***Notes:**\r\n - Refer to the [Baasic REST API](http://dev.baasic.com/api/reference/home) for detailed information about available Baasic REST API end-points.\r\n - [URI Template](https://github.com/Baasic/uritemplate-js) syntax enables expanding the Baasic route templates to Baasic REST URIs providing it with an object that contains URI parameters.\r\n - All end-point objects are transformed by the associated route service.\r\n */ \r\n\n\n/***/ }),\n/* 343 */\n/***/ (function(module, exports, __webpack_require__) {\n\n\"use strict\";\n/* globals module */\r\n/**\r\n * @module userProfileAvatarClient\r\n * @description  User Profile Avatar Client provides Baasic route templates which can be expanded to Baasic REST URIs. Various services can use Baasic User Profile Avatar Route Definition to obtain needed routes while other routes will be obtained through HAL. By convention, all route services use the same function names as their corresponding services.\r\n */\r\n\r\nObject.defineProperty(exports, \"__esModule\", { value: true });\r\nvar tslib_1 = __webpack_require__(1);\r\nvar inversify_1 = __webpack_require__(0);\r\n;\r\nvar httpApi_1 = __webpack_require__(4);\r\nvar _1 = __webpack_require__(8);\r\nvar UserProfileAvatarClient = (function () {\r\n    function UserProfileAvatarClient(userProfileAvatarRoute, userProfileAvatarStreamsClient, apiClient) {\r\n        this.userProfileAvatarRoute = userProfileAvatarRoute;\r\n        this.userProfileAvatarStreamsClient = userProfileAvatarStreamsClient;\r\n        this.apiClient = apiClient;\r\n    }\r\n    Object.defineProperty(UserProfileAvatarClient.prototype, \"routeDefinition\", {\r\n        get: function () {\r\n            return this.userProfileAvatarRoute;\r\n        },\r\n        enumerable: true,\r\n        configurable: true\r\n    });\r\n    Object.defineProperty(UserProfileAvatarClient.prototype, \"streams\", {\r\n        get: function () {\r\n            return this.userProfileAvatarStreamsClient;\r\n        },\r\n        enumerable: true,\r\n        configurable: true\r\n    });\r\n    /**\r\n     * Returns a promise that is resolved once the get action has been performed. Success response returns requested file resource.\r\n     * @method\r\n     * @param id User Profile id which uniquely identifies user avatar resource that needs to be retrieved.\r\n     * @param options Query resource options object.\r\n     * @returns A promise that is resolved once the get action has been performed.\r\n     * @example userProfileAvatarClient.get('<file-id>')\r\n                   .then(function (data) {\r\n                       // perform success action here\r\n                   },\r\n                    function (response, status, headers, config) {\r\n                        // perform error handling here\r\n                   });\r\n    **/\r\n    UserProfileAvatarClient.prototype.get = function (id, options) {\r\n        return this.apiClient.get(this.userProfileAvatarRoute.get(id, options));\r\n    };\r\n    /**\r\n     * Returns a promise that is resolved once the update file action has been performed; this action will update a file resource if successfully completed. This route uses HAL enabled objects to obtain routes and therefore it doesn't apply `userProfileAvatarRoute` route template. Here is an example of how a route can be obtained from HAL enabled objects:\r\n     * ```\r\n     * let params = modelMapper.updateParams(fileEntry);\r\n     * let uri = params['model'].links('put').href;\r\n     * ```\r\n     * @method\r\n     * @param data Avatar file object that need to be updated in the system.\r\n     * @returns A promise that is resolved once the update file action has been performed.\r\n     * @example // fileEntry is a file resource previously fetched using get action.\r\n                       fileEntry.description = '<description>';\r\n                       userProfileAvatarClient.update(fileEntry)\r\n                           .then(function (data) {\r\n                               // perform success action here\r\n                           },\r\n                            function (response, status, headers, config) {\r\n                           });\r\n                                // perform error handling here\r\n    **/\r\n    UserProfileAvatarClient.prototype.update = function (data) {\r\n        return this.apiClient.put(this.userProfileAvatarRoute.update(data), data);\r\n    };\r\n    /**\r\n     * Returns a promise that is resolved once the link action has been performed; this action links file resource from other modules into the Profile Files module (For example: file resources from the Media Vault module can be linked directly into the Profile Files module).\r\n     * @method\r\n     * @param id User Profile id which uniquely identifies user avatar resource that needs to be retrieved.\r\n     * @param data A profile avatar file object that need to be inserted into the system.\r\n     * @returns A promise that is resolved once the link action has been performed.\r\n     * @example userProfileAvatarClient.link(fileObject)\r\n                    .then(function (data) {\r\n                        // perform success action here\r\n                    },\r\n                     function (response, status, headers, config) {\r\n                         // perform error handling here\r\n                    });\r\n     **/\r\n    UserProfileAvatarClient.prototype.link = function (id, data) {\r\n        return this.apiClient.post(this.routeDefinition.link(id, data), this.routeDefinition.createParams(data, id));\r\n    };\r\n    /**\r\n     * Returns a promise that is resolved once the unlink action has been performed. This action will remove one or many file resources from the system if successfully completed. This route uses HAL enabled objects to obtain routes and therefore it doesn't apply userProfileAvatarRoute route template. Here is an example of how a route can be obtained from HAL enabled objects:\r\n     * ```\r\n     * let params = modelMapper.removeParams(fileEntry);\r\n     * let uri = params['model'].links('unlink').href;\r\n     * ```\r\n     * @method\r\n     * @param data A profile avatar file object used to remove specific profile avatar from the system.\r\n     * @param options Query resource options object.\r\n     * @returns A promise that is resolved once the unlink action has been performed.\r\n     * @example // fileEntry is a file resource previously fetched using get action. The following action will remove the original file resource and all accompanying derived file resources.\r\n                    userProfileAvatarRoute.remove(fileEntry)\r\n                        .then(function (data) {\r\n                            // perform success action here\r\n                        },\r\n                         function (response, status, headers, config) {\r\n                             // perform error handling here\r\n                        });\r\n     **/\r\n    UserProfileAvatarClient.prototype.unlink = function (data, options) {\r\n        return this.apiClient.delete(this.userProfileAvatarRoute.unlink(data, options));\r\n    };\r\n    return UserProfileAvatarClient;\r\n}());\r\nUserProfileAvatarClient = tslib_1.__decorate([\r\n    inversify_1.injectable(),\r\n    tslib_1.__param(0, inversify_1.inject(_1.TYPES.UserProfileAvatarRoute)),\r\n    tslib_1.__param(1, inversify_1.inject(_1.TYPES.UserProfileAvatarStreamsClient)),\r\n    tslib_1.__param(2, inversify_1.inject(httpApi_1.httpTYPES.ApiClient)),\r\n    tslib_1.__metadata(\"design:paramtypes\", [typeof (_a = typeof _1.UserProfileAvatarRoute !== \"undefined\" && _1.UserProfileAvatarRoute) === \"function\" && _a || Object, typeof (_b = typeof _1.UserProfileAvatarStreamsClient !== \"undefined\" && _1.UserProfileAvatarStreamsClient) === \"function\" && _b || Object, typeof (_c = typeof httpApi_1.ApiClient !== \"undefined\" && httpApi_1.ApiClient) === \"function\" && _c || Object])\r\n], UserProfileAvatarClient);\r\nexports.UserProfileAvatarClient = UserProfileAvatarClient;\r\nvar _a, _b, _c;\r\n/**\r\n * @overview\r\n ***Notes:**\r\n - Refer to the [REST API documentation](https://github.com/Baasic/baasic-rest-api/wiki) for detailed information about available Baasic REST API end-points.\r\n - All end-point objects are transformed by the associated route service.\r\n */ \r\n\n\n/***/ }),\n/* 344 */\n/***/ (function(module, exports, __webpack_require__) {\n\n\"use strict\";\n/* globals module */\r\n/**\r\n * @module userProfileAvatarRoute\r\n * @description Baasic User Profile Avatar Route Definition provides Baasic route templates which can be expanded to Baasic REST URIs. Various services can use Baasic User Profile Avatar Route Definition to obtain needed routes while other routes will be obtained through HAL. By convention, all route services use the same function names as their corresponding services.\r\n */\r\n\r\nObject.defineProperty(exports, \"__esModule\", { value: true });\r\nvar tslib_1 = __webpack_require__(1);\r\nvar inversify_1 = __webpack_require__(0);\r\nvar common_1 = __webpack_require__(2);\r\n;\r\nvar _1 = __webpack_require__(8);\r\nvar contracts_1 = __webpack_require__(3);\r\nvar UserProfileAvatarRoute = (function (_super) {\r\n    tslib_1.__extends(UserProfileAvatarRoute, _super);\r\n    function UserProfileAvatarRoute(appOptions, userProfileAvatarStreamsRoute) {\r\n        var _this = _super.call(this, appOptions) || this;\r\n        _this.appOptions = appOptions;\r\n        _this.userProfileAvatarStreamsRoute = userProfileAvatarStreamsRoute;\r\n        _this.getRoute = 'profiles/{id}/avatars/{?embed,fields}';\r\n        _this.updateRoute = 'profiles/{userId}/avatars';\r\n        _this.linkRoute = 'profiles/{id}/avatars/link';\r\n        _this.unlinkRoute = 'profiles/{userId}/avatars/unlink';\r\n        return _this;\r\n    }\r\n    Object.defineProperty(UserProfileAvatarRoute.prototype, \"streams\", {\r\n        get: function () {\r\n            return this.userProfileAvatarStreamsRoute;\r\n        },\r\n        enumerable: true,\r\n        configurable: true\r\n    });\r\n    /**\r\n     * Parses get route; this route should be expanded with the Id of the profile.\r\n     * @method\r\n     * @param id User Profile id which uniquely identifies user avatar resource that needs to be retrieved.\r\n     * @param options Query resource options object.\r\n     * @example userProfileAvatarRoute.get({id: '<file-id>'});\r\n     **/\r\n    UserProfileAvatarRoute.prototype.get = function (id, options) {\r\n        return _super.prototype.baseGet.call(this, this.getRoute, id, options);\r\n    };\r\n    /**\r\n     * Parses update route; this URI template does not expose any additional options.\r\n     * @method\r\n     * @param data A Profile Avatar object used to update specified Profile Avatar resource.\r\n     * @example userProfileAvatarRoute.update(data);\r\n     **/\r\n    UserProfileAvatarRoute.prototype.update = function (data) {\r\n        return _super.prototype.baseUpdate.call(this, this.updateRoute, data);\r\n    };\r\n    /**\r\n     * Parses link route; this route should be expanded with the Id of the profile.\r\n     * @method\r\n     * @param id User Profile id which uniquely identifies user avatar resource that needs to be retrieved.\r\n     * @param data A Profile Avatar object used to link specified Profile Avatar resource.\r\n     * @example userProfileAvatarRoute.link({id: '<file-id>'});\r\n     **/\r\n    UserProfileAvatarRoute.prototype.link = function (id, data) {\r\n        var params = this.utility.extend({}, data);\r\n        params.id = id;\r\n        return _super.prototype.baseCreate.call(this, this.linkRoute, params);\r\n    };\r\n    /**\r\n     * Parses link route; this route should be expanded with the Id of the profile.\r\n     * @method\r\n     * @param data A Profile Avatar object used to unlink specified Profile Avatar resource.\r\n     * @param options Query resource options object.\r\n     * @example userProfileAvatarRoute.unlink(data);\r\n     **/\r\n    UserProfileAvatarRoute.prototype.unlink = function (data, options) {\r\n        if (!options) {\r\n            options = {};\r\n        }\r\n        return _super.prototype.baseDelete.call(this, this.unlinkRoute, data, options);\r\n    };\r\n    UserProfileAvatarRoute.prototype.createParams = function (data, id) {\r\n        var params = this.utility.extend(data);\r\n        params.id = id;\r\n        return _super.prototype.createParams.call(this, params);\r\n    };\r\n    return UserProfileAvatarRoute;\r\n}(common_1.BaseRoute));\r\nUserProfileAvatarRoute = tslib_1.__decorate([\r\n    tslib_1.__param(0, inversify_1.inject(contracts_1.TYPES.IAppOptions)),\r\n    tslib_1.__param(1, inversify_1.inject(_1.TYPES.UserProfileAvatarStreamsRoute)),\r\n    tslib_1.__metadata(\"design:paramtypes\", [typeof (_a = typeof contracts_1.IAppOptions !== \"undefined\" && contracts_1.IAppOptions) === \"function\" && _a || Object, typeof (_b = typeof _1.UserProfileAvatarStreamsRoute !== \"undefined\" && _1.UserProfileAvatarStreamsRoute) === \"function\" && _b || Object])\r\n], UserProfileAvatarRoute);\r\nexports.UserProfileAvatarRoute = UserProfileAvatarRoute;\r\nvar _a, _b;\r\n/**\r\n * @overview\r\n ***Notes:**\r\n - Refer to the [REST API documentation](https://github.com/Baasic/baasic-rest-api/wiki) for detailed information about available Baasic REST API end-points.\r\n - [URI Template](https://github.com/Baasic/uritemplate-js) syntax enables expanding the Baasic route templates to Baasic REST URIs providing it with an object that contains URI parameters.\r\n - All end-point objects are transformed by the associated route service.\r\n */ \r\n\n\n/***/ }),\n/* 345 */\n/***/ (function(module, exports, __webpack_require__) {\n\n\"use strict\";\n/* globals module */\r\n/**\r\n * @module userProfileAvatarStreamsClient\r\n * @description  User Profile Avatar Streams Client provides Baasic route templates which can be expanded to Baasic REST URIs. Various services can use Baasic User Profile Avatar Streams Route Definition to obtain needed routes while other routes will be obtained through HAL. By convention, all route services use the same function names as their corresponding services.\r\n */\r\n\r\nObject.defineProperty(exports, \"__esModule\", { value: true });\r\nvar tslib_1 = __webpack_require__(1);\r\nvar inversify_1 = __webpack_require__(0);\r\nvar httpApi_1 = __webpack_require__(4);\r\nvar _1 = __webpack_require__(8);\r\nvar UserProfileAvatarStreamsClient = (function () {\r\n    function UserProfileAvatarStreamsClient(userProfileAvatarStreamsRoute, apiClient) {\r\n        this.userProfileAvatarStreamsRoute = userProfileAvatarStreamsRoute;\r\n        this.apiClient = apiClient;\r\n    }\r\n    Object.defineProperty(UserProfileAvatarStreamsClient.prototype, \"routeDefinition\", {\r\n        get: function () {\r\n            return this.userProfileAvatarStreamsRoute;\r\n        },\r\n        enumerable: true,\r\n        configurable: true\r\n    });\r\n    /**\r\n     * Returns a promise that is resolved once the get action has been performed. Success response returns the file stream if successfully completed. If derived resource's format is passed, such as `width` and `height` for the image type of file resource, the operation will return a stream of the derived resource. Otherwise, stream of the original file resource will be retrieved.\r\n     * @method\r\n     * @param data User unique identifier.\r\n     * @returns A promise that is resolved once the get action has been performed.\r\n     * @example // Request the original file stream\r\n                    userProfileAvatarStreamsClient.get({id: '<file-id>'})\r\n                        .then(function (data) {\r\n                            // perform success action here\r\n                        },\r\n                         function (response, status, headers, config) {\r\n                             // perform error handling here\r\n                        });\r\n                    // Request derived file stream\r\n                    userProfileAvatarStreamsClient.get({id: '<file-id>', width: <width>, height: <height>})\r\n                        .then(function (data) {\r\n                            // perform success action here\r\n                        },\r\n                         function (response, status, headers, config) {\r\n                             // perform error handling here\r\n                        });\r\n     **/\r\n    UserProfileAvatarStreamsClient.prototype.get = function (data) {\r\n        return this.apiClient.get(this.routeDefinition.get(data));\r\n    };\r\n    /**\r\n     * Returns a promise that is resolved once the get action has been performed. Success response returns the file stream as a blob. If derived resource's format is passed, such as `width` and `height` for the image type of file resource, the operation will return a blob of the derived file resource. Otherwise, blob of the original file resource will be retrieved. For more information on Blob objects please see [Blob Documentation](https://developer.mozilla.org/en-US/docs/Web/API/Blob).\r\n     * @method\r\n     * @example // Request the original blob\r\n                    userProfileAvatarStreamsClient.getBlob('<file-id>')\r\n                        .then(function (data) {\r\n                            // perform success action here\r\n                        },\r\n                         function (response, status, headers, config) {\r\n                             // perform error handling here\r\n                        });\r\n                        // Request derived blob\r\n                        userProfileAvatarStreamsClient.getBlob({id: '<file-id>', width: <width>, height: <height>})\r\n                            .then(function (data) {\r\n                                // perform success action here\r\n                            },\r\n                             function (response, status, headers, config) {\r\n                                 // perform error handling here\r\n                            });\r\n     **/\r\n    UserProfileAvatarStreamsClient.prototype.getBlob = function (data) {\r\n        return this.apiClient.get(this.userProfileAvatarStreamsRoute.get(data), { 'Accept': 'application/octet-stream' });\r\n    };\r\n    /**\r\n     * Returns a promise that is resolved once the create file stream action has been performed; this action will upload the specified blob. For more information on Blob objects please see [Blob Documentation](https://developer.mozilla.org/en-US/docs/Web/API/Blob).\r\n     * @method\r\n     * @param id\r\n     * @param data\r\n     * @param stream\r\n     * @returns A promise that is resolved once the create file stream action has been performed.\r\n     * @example userProfileAvatarStreamsClient.create('<file-id>', '<filename'>, <blob>)\r\n                    .then(function (data) {\r\n                        // perform success action here\r\n                    },\r\n                     function (response, status, headers, config) {\r\n                         // perform error handling here\r\n                    });\r\n     **/\r\n    UserProfileAvatarStreamsClient.prototype.create = function (id, data, stream) {\r\n        var formData = new FormData();\r\n        formData.append('file', stream);\r\n        return this.apiClient.post(this.userProfileAvatarStreamsRoute.create(id, data), data, { 'Content-Type': undefined });\r\n    };\r\n    /**\r\n     * Returns a promise that is resolved once the update file stream action has been performed; this action will replace the existing stream with a new one. Alternatively, if a derived stream is being updated it will either create a new derived stream or replace the existing one. In order to update a derived stream, format needs to be passed (For example: `width` and `height` for the image type of file stream data type).\r\n     * @method\r\n     * @param data\r\n     * @param stream\r\n     * @returns A promise that is resolved once the update file stream action has been performed.\r\n     * @example // Update original file stream\r\n                    userProfileAvatarStreamsClient.update('<file-id>', <file-stream>)\r\n                        .then(function (data) {\r\n                            // perform success action here\r\n                        },\r\n                         function (response, status, headers, config) {\r\n                             // perform error handling here\r\n                        });\r\n                        // Update derived file stream\r\n                        userProfileAvatarStreamsClient.update({id: '<file-id>', width: <width>, height: <height>}, <file-stream>)\r\n                            .then(function (data) {\r\n                                // perform success action here\r\n                            },\r\n                             function (response, status, headers, config) {\r\n                                 // perform error handling here\r\n                            });\r\n     **/\r\n    UserProfileAvatarStreamsClient.prototype.update = function (data, stream) {\r\n        var formData = new FormData();\r\n        formData.append('file', stream);\r\n        return this.apiClient.put(this.userProfileAvatarStreamsRoute.update(data), data, { 'Content-Type': undefined });\r\n    };\r\n    return UserProfileAvatarStreamsClient;\r\n}());\r\nUserProfileAvatarStreamsClient = tslib_1.__decorate([\r\n    inversify_1.injectable(),\r\n    tslib_1.__param(0, inversify_1.inject(_1.TYPES.UserProfileAvatarStreamsRoute)),\r\n    tslib_1.__param(1, inversify_1.inject(httpApi_1.httpTYPES.ApiClient)),\r\n    tslib_1.__metadata(\"design:paramtypes\", [typeof (_a = typeof _1.UserProfileAvatarStreamsRoute !== \"undefined\" && _1.UserProfileAvatarStreamsRoute) === \"function\" && _a || Object, typeof (_b = typeof httpApi_1.ApiClient !== \"undefined\" && httpApi_1.ApiClient) === \"function\" && _b || Object])\r\n], UserProfileAvatarStreamsClient);\r\nexports.UserProfileAvatarStreamsClient = UserProfileAvatarStreamsClient;\r\nvar _a, _b;\r\n/**\r\n * @overview\r\n ***Notes:**\r\n - Refer to the [REST API documentation](https://github.com/Baasic/baasic-rest-api/wiki) for detailed information about available Baasic REST API end-points.\r\n - All end-point objects are transformed by the associated route service.\r\n */ \r\n\n\n/***/ }),\n/* 346 */\n/***/ (function(module, exports, __webpack_require__) {\n\n\"use strict\";\n/* globals module */\r\n/**\r\n * @module userProfileAvatarStreamsRoute\r\n * @description Baasic User Profile Avatar Streams Route Definition provides Baasic route templates which can be expanded to Baasic REST URIs. Various services can use Baasic User Profile Avatar Streams Route Definition to obtain needed routes while other routes will be obtained through HAL. By convention, all route services use the same function names as their corresponding services.\r\n */\r\n\r\nObject.defineProperty(exports, \"__esModule\", { value: true });\r\nvar tslib_1 = __webpack_require__(1);\r\nvar inversify_1 = __webpack_require__(0);\r\nvar common_1 = __webpack_require__(2);\r\nvar contracts_1 = __webpack_require__(3);\r\nvar UserProfileAvatarStreamsRoute = (function (_super) {\r\n    tslib_1.__extends(UserProfileAvatarStreamsRoute, _super);\r\n    function UserProfileAvatarStreamsRoute(appOptions) {\r\n        var _this = _super.call(this, appOptions) || this;\r\n        _this.appOptions = appOptions;\r\n        _this.getRoute = 'profiles/{id}/avatar-streams/{?width,height}';\r\n        _this.createRoute = 'profiles/{id}/avatar-streams/{filename}';\r\n        _this.updateRoute = 'profiles/{id}/avatar-streams/{?width,height}';\r\n        return _this;\r\n    }\r\n    /**\r\n     * Parses get route; this route should be expanded with id of profile. Additional supported items are:\r\n     * - `width` - width of desired derived image.\r\n     * - `height` - height of desired derived image.\r\n     * @method\r\n     * @example userProfileAvatarStreamsRoute.get({id: '<file-id>'});\r\n     **/\r\n    UserProfileAvatarStreamsRoute.prototype.get = function (data) {\r\n        if (!this.utility.isObject(data)) {\r\n            data = {\r\n                id: data\r\n            };\r\n        }\r\n        return _super.prototype.baseCreate.call(this, this.getRoute, data);\r\n    };\r\n    /**\r\n     * Parses create route; this route should be expanded with the filename which indicates where the stream will be saved as well with id of the profile.\r\n     * @method\r\n     * @example userProfileAvatarStreamRoute.create({ filename: '<filename>', id: '<file-id>' });\r\n     **/\r\n    UserProfileAvatarStreamsRoute.prototype.create = function (id, data) {\r\n        if (!this.utility.isObject(data)) {\r\n            data = {\r\n                filename: data\r\n            };\r\n        }\r\n        var params = this.utility.extend({}, data);\r\n        params.id = id;\r\n        return _super.prototype.baseCreate.call(this, this.createRoute, params);\r\n    };\r\n    /**\r\n     * Parses update route; this route should be expanded with the id of the profile. Additional supported items are:\r\n     * - `width` - width of derived image to update.\r\n     * - `height` - height of derived image to update.\r\n     * @method\r\n     * @param data\r\n     * @example userProfileAvatarStreamsRoute.update({id: '<file-id>'});\r\n     **/\r\n    UserProfileAvatarStreamsRoute.prototype.update = function (data) {\r\n        if (!this.utility.isObject(data)) {\r\n            data = {\r\n                id: data\r\n            };\r\n        }\r\n        return _super.prototype.baseCreate.call(this, this.updateRoute, data);\r\n    };\r\n    return UserProfileAvatarStreamsRoute;\r\n}(common_1.BaseRoute));\r\nUserProfileAvatarStreamsRoute = tslib_1.__decorate([\r\n    tslib_1.__param(0, inversify_1.inject(contracts_1.TYPES.IAppOptions)),\r\n    tslib_1.__metadata(\"design:paramtypes\", [typeof (_a = typeof contracts_1.IAppOptions !== \"undefined\" && contracts_1.IAppOptions) === \"function\" && _a || Object])\r\n], UserProfileAvatarStreamsRoute);\r\nexports.UserProfileAvatarStreamsRoute = UserProfileAvatarStreamsRoute;\r\nvar _a;\r\n/**\r\n * @overview\r\n ***Notes:**\r\n - Refer to the [REST API documentation](https://github.com/Baasic/baasic-rest-api/wiki) for detailed information about available Baasic REST API end-points.\r\n - [URI Template](https://github.com/Baasic/uritemplate-js) syntax enables expanding the Baasic route templates to Baasic REST URIs providing it with an object that contains URI parameters.\r\n - All end-point objects are transformed by the associated route service.\r\n */ \r\n\n\n/***/ }),\n/* 347 */\n/***/ (function(module, exports, __webpack_require__) {\n\n\"use strict\";\n/* globals module */\r\n/**\r\n * @module userProfileClient\r\n * @description  User Profile Client provides an easy way to consume  User Profile REST API end-points. In order to obtain needed routes `userProfileClient` uses `userProfileRoute`.\r\n */\r\n\r\nObject.defineProperty(exports, \"__esModule\", { value: true });\r\nvar tslib_1 = __webpack_require__(1);\r\nvar inversify_1 = __webpack_require__(0);\r\n;\r\nvar httpApi_1 = __webpack_require__(4);\r\nvar _1 = __webpack_require__(8);\r\nvar UserProfileClient = (function () {\r\n    function UserProfileClient(userProfileACLClient, userProfileRoute, apiClient, userEducationClient, userProfileAvatarClient, userSkillClient, userWorkClient) {\r\n        this.userProfileACLClient = userProfileACLClient;\r\n        this.userProfileRoute = userProfileRoute;\r\n        this.apiClient = apiClient;\r\n        this.userEducationClient = userEducationClient;\r\n        this.userProfileAvatarClient = userProfileAvatarClient;\r\n        this.userSkillClient = userSkillClient;\r\n        this.userWorkClient = userWorkClient;\r\n    }\r\n    Object.defineProperty(UserProfileClient.prototype, \"acl\", {\r\n        get: function () {\r\n            return this.userProfileACLClient;\r\n        },\r\n        enumerable: true,\r\n        configurable: true\r\n    });\r\n    Object.defineProperty(UserProfileClient.prototype, \"routeDefinition\", {\r\n        get: function () {\r\n            return this.userProfileRoute;\r\n        },\r\n        enumerable: true,\r\n        configurable: true\r\n    });\r\n    Object.defineProperty(UserProfileClient.prototype, \"education\", {\r\n        get: function () {\r\n            return this.userEducationClient;\r\n        },\r\n        enumerable: true,\r\n        configurable: true\r\n    });\r\n    Object.defineProperty(UserProfileClient.prototype, \"avatar\", {\r\n        get: function () {\r\n            return this.userProfileAvatarClient;\r\n        },\r\n        enumerable: true,\r\n        configurable: true\r\n    });\r\n    Object.defineProperty(UserProfileClient.prototype, \"skill\", {\r\n        get: function () {\r\n            return this.userSkillClient;\r\n        },\r\n        enumerable: true,\r\n        configurable: true\r\n    });\r\n    Object.defineProperty(UserProfileClient.prototype, \"work\", {\r\n        get: function () {\r\n            return this.userWorkClient;\r\n        },\r\n        enumerable: true,\r\n        configurable: true\r\n    });\r\n    /**\r\n     * Returns a promise that is resolved once the find action has been performed. Success response returns a list of user profile resources matching the given criteria.\r\n     * @method\r\n     * @param options Query resource options object.\r\n     * @returns A promise that is resolved once the find action has been performed.\r\n     * @example userProfileClient.find({\r\n                    pageNumber : 1,\r\n                    pageSize : 10,\r\n                    orderBy : '<field>',\r\n                    orderDirection : '<asc|desc>',\r\n                    search : '<search-phrase>'\r\n                })\r\n                .then(function (collection) {\r\n                    // perform success action here\r\n                },\r\n                 function (response, status, headers, config) {\r\n                     // perform error handling here\r\n                });\r\n     **/\r\n    UserProfileClient.prototype.find = function (options) {\r\n        return this.apiClient.get(this.routeDefinition.find(options));\r\n    };\r\n    /**\r\n     * Returns a promise that is resolved once the get action has been performed. Success response returns the user profile resource.\r\n     * @method\r\n     * @param id User profile id which uniquely identifies user profile resource that needs to be retrieved.\r\n     * @param options Query resource options object.\r\n     * @returns A promise that is resolved once the get action has been performed.\r\n     * @example userProfileClient.get()\r\n                    .then(function (data) {\r\n                        // perform success action here\r\n                    },\r\n                     function (response, status, headers, config) {\r\n                         // perform error handling here\r\n                    });\r\n     **/\r\n    UserProfileClient.prototype.get = function (id, options) {\r\n        return this.apiClient.get(this.userProfileRoute.get(id, options));\r\n    };\r\n    /**\r\n     * Returns a promise that is resolved once the create user profile action has been performed; this action creates a new user profile resource.\r\n     * @method\r\n     * @param data An user profile object that needs to be inserted into the system.\r\n     * @returns A promise that is resolved once the create user profile action has been performed.\r\n     * @example userProfileClient.create({\r\n                    firstName : '<first-name>',\r\n                    lastName : '<last-name>',\r\n                    displayName: '<nick-name>'\r\n                }.then(function (data) {\r\n                    // perform success action here\r\n                },\r\n                 function (response, status, headers, config) {\r\n                     // perform error handling here\r\n                });\r\n     **/\r\n    UserProfileClient.prototype.create = function (data) {\r\n        return this.apiClient.post(this.routeDefinition.create(), this.routeDefinition.createParams(data));\r\n    };\r\n    /**\r\n     * Returns a promise that is resolved once the update user profile action has been performed; this action updates a user profile resource. This route uses HAL enabled objects to obtain routes and therefore it doesn't apply `userProfileRoute` route template. Here is an example of how a route can be obtained from HAL enabled objects:\r\n     * ```\r\n     * let params = modelMapper.removeParams(userProfile);\r\n     * let uri = params['model'].links('put').href;\r\n     * ```\r\n     * @method\r\n     * @param data An user profile object used to update specified user profile resource.\r\n     * @returns A promise that is resolved once the update user profile action has been performed.\r\n     * @example // userProfile is a resource previously fetched using get action.\r\n                       userProfile.displayName = '<nick-name>';\r\n                       userProfileClient.update(userProfile)\r\n                           .then(function (data) {\r\n                               // perform success action here\r\n                           },\r\n                            function (response, status, headers, config) {\r\n                                // perform error handling here\r\n                           });\r\n    **/\r\n    UserProfileClient.prototype.update = function (data) {\r\n        return this.apiClient.put(this.routeDefinition.update(data), this.routeDefinition.updateParams(data));\r\n    };\r\n    /**\r\n     * Returns a promise that is resolved once the remove action has been performed. This action will remove a user profile resource from the system if successfully completed. This route uses HAL enabled objects to obtain routes and therefore it doesn't apply `userProfileRoute` route template. Here is an example of how a route can be obtained from HAL enabled objects:\r\n     * ```\r\n     * let params = modelMapper.removeParams(userProfile);\r\n     * let uri = params['model'].links('delete').href;\r\n     * ```\r\n     * @method\r\n     * @param data An user profile object used to delete specified user profile resource.\r\n     * @returns A promise that is resolved once the remove action has been performed.\r\n     * @example // userProfile is a resource previously fetched using get action.\r\n                    userProfileClient.remove(userProfile)\r\n                        .then(function (data) {\r\n                            // perform success action here\r\n                        },\r\n                         function (response, status, headers, config) {\r\n                             // perform error handling here\r\n                        });\r\n     **/\r\n    UserProfileClient.prototype.remove = function (data) {\r\n        return this.apiClient.delete(this.routeDefinition.delete(data));\r\n    };\r\n    return UserProfileClient;\r\n}());\r\nUserProfileClient = tslib_1.__decorate([\r\n    inversify_1.injectable(),\r\n    tslib_1.__param(0, inversify_1.inject(_1.TYPES.UserProfileACLClient)),\r\n    tslib_1.__param(1, inversify_1.inject(_1.TYPES.UserProfileRoute)),\r\n    tslib_1.__param(2, inversify_1.inject(httpApi_1.httpTYPES.ApiClient)),\r\n    tslib_1.__param(3, inversify_1.inject(_1.TYPES.UserEducationClient)),\r\n    tslib_1.__param(4, inversify_1.inject(_1.TYPES.UserProfileAvatarClient)),\r\n    tslib_1.__param(5, inversify_1.inject(_1.TYPES.UserSkillClient)),\r\n    tslib_1.__param(6, inversify_1.inject(_1.TYPES.UserWorkClient)),\r\n    tslib_1.__metadata(\"design:paramtypes\", [typeof (_a = typeof _1.UserProfileACLClient !== \"undefined\" && _1.UserProfileACLClient) === \"function\" && _a || Object, typeof (_b = typeof _1.UserProfileRoute !== \"undefined\" && _1.UserProfileRoute) === \"function\" && _b || Object, typeof (_c = typeof httpApi_1.ApiClient !== \"undefined\" && httpApi_1.ApiClient) === \"function\" && _c || Object, typeof (_d = typeof _1.UserEducationClient !== \"undefined\" && _1.UserEducationClient) === \"function\" && _d || Object, typeof (_e = typeof _1.UserProfileAvatarClient !== \"undefined\" && _1.UserProfileAvatarClient) === \"function\" && _e || Object, typeof (_f = typeof _1.UserSkillClient !== \"undefined\" && _1.UserSkillClient) === \"function\" && _f || Object, typeof (_g = typeof _1.UserWorkClient !== \"undefined\" && _1.UserWorkClient) === \"function\" && _g || Object])\r\n], UserProfileClient);\r\nexports.UserProfileClient = UserProfileClient;\r\nvar _a, _b, _c, _d, _e, _f, _g;\r\n/**\r\n * @copyright (c) 2017 Mono Ltd\r\n * @license MIT\r\n * @author Mono Ltd\r\n * @overview\r\n ***Notes:**\r\n - Refer to the [Baasic REST API](http://dev.baasic.com/api/reference/home) for detailed information about available Baasic REST API end-points.\r\n - All end-point objects are transformed by the associated route definition.\r\n */ \r\n\n\n/***/ }),\n/* 348 */\n/***/ (function(module, exports, __webpack_require__) {\n\n\"use strict\";\n/* globals module */\r\n/**\r\n * @module userProfileRoute\r\n * @description Baasic User Profile Route Definition provides Baasic route templates which can be expanded to Baasic REST URIs. Various services can use Baasic User Profile Route Definition to obtain needed routes while other routes will be obtained through HAL. By convention, all route services  use the same function names as their corresponding services.\r\n */\r\n\r\nObject.defineProperty(exports, \"__esModule\", { value: true });\r\nvar tslib_1 = __webpack_require__(1);\r\nvar inversify_1 = __webpack_require__(0);\r\nvar common_1 = __webpack_require__(2);\r\n;\r\nvar _1 = __webpack_require__(8);\r\nvar contracts_1 = __webpack_require__(3);\r\nvar UserProfileRoute = (function (_super) {\r\n    tslib_1.__extends(UserProfileRoute, _super);\r\n    function UserProfileRoute(appOptions, userProfileACLRoute) {\r\n        var _this = _super.call(this, appOptions) || this;\r\n        _this.appOptions = appOptions;\r\n        _this.userProfileACLRoute = userProfileACLRoute;\r\n        _this.findRoute = 'profiles/{?searchQuery,page,rpp,sort,embed,fields}';\r\n        _this.getRoute = 'profiles/{id}/{?embed,fields}';\r\n        _this.createRoute = 'profiles';\r\n        _this.updateRoute = 'profiles/{id}';\r\n        _this.deleteRoute = 'profiles/{id}';\r\n        return _this;\r\n    }\r\n    Object.defineProperty(UserProfileRoute.prototype, \"acl\", {\r\n        get: function () {\r\n            return this.userProfileACLRoute;\r\n        },\r\n        enumerable: true,\r\n        configurable: true\r\n    });\r\n    /**\r\n     * Parses find user profile route which can be expanded with additional options. Supported items are:\r\n     * - `searchQuery` - A string value used to identify user profile resources using the phrase search.\r\n     * - `page` - A value used to set the page number, i.e. to retrieve certain user profile subset from the storage.\r\n     * - `rpp` - A value used to limit the size of result set per page.\r\n     * - `sort` - A string used to set the user profile property to sort the result collection by.\r\n     * - `embed` - Comma separated list of resources to be contained within the current representation.\r\n     * @method\r\n     * @param options Query resource options object.\r\n     * @example userProfileRoute.find.({searchQuery: '<search-phrase>'});\r\n     **/\r\n    UserProfileRoute.prototype.find = function (options) {\r\n        return _super.prototype.baseFind.call(this, this.findRoute, options);\r\n    };\r\n    /**\r\n     * Parses get route; this route doesn't expose any properties.\r\n     * @method\r\n     * @param id User profile id which uniquely identifies user profile resource that needs to be retrieved.\r\n     * @param options Query resource options object.\r\n     * @example userProfileRoute.get(id, options);\r\n     **/\r\n    UserProfileRoute.prototype.get = function (id, options) {\r\n        return _super.prototype.baseGet.call(this, this.getRoute, id, options);\r\n    };\r\n    /**\r\n     * Parses create user profile route; this URI template does not expose any additional options.\r\n     * @method\r\n     * @example baasicUserProfileRouteService.create();\r\n     **/\r\n    UserProfileRoute.prototype.create = function () {\r\n        return _super.prototype.baseCreate.call(this, this.createRoute, {});\r\n    };\r\n    /**\r\n     * Parses update user profile route; this URI template does not expose any additional options.\r\n     * @method\r\n     * @param data An user profile object used to update specified user profile resource.\r\n     * @example baasicUserProfileRouteService.update(data);\r\n     **/\r\n    UserProfileRoute.prototype.update = function (data) {\r\n        return _super.prototype.baseUpdate.call(this, this.updateRoute, data);\r\n    };\r\n    /**\r\n     * Parses update user profile route; this URI template does not expose any additional options.\r\n     * @method\r\n     * @param data An user profile object used to delete specified user profile resource.\r\n     * @example baasicUserProfileRouteService.delete(data);\r\n     **/\r\n    UserProfileRoute.prototype.delete = function (data) {\r\n        return _super.prototype.baseDelete.call(this, this.deleteRoute, data);\r\n    };\r\n    return UserProfileRoute;\r\n}(common_1.BaseRoute));\r\nUserProfileRoute = tslib_1.__decorate([\r\n    tslib_1.__param(0, inversify_1.inject(contracts_1.TYPES.IAppOptions)),\r\n    tslib_1.__param(1, inversify_1.inject(_1.TYPES.UserProfileACLRoute)),\r\n    tslib_1.__metadata(\"design:paramtypes\", [typeof (_a = typeof contracts_1.IAppOptions !== \"undefined\" && contracts_1.IAppOptions) === \"function\" && _a || Object, typeof (_b = typeof _1.UserProfileACLRoute !== \"undefined\" && _1.UserProfileACLRoute) === \"function\" && _b || Object])\r\n], UserProfileRoute);\r\nexports.UserProfileRoute = UserProfileRoute;\r\nvar _a, _b;\r\n/**\r\n * @copyright (c) 2017 Mono Ltd\r\n * @license MIT\r\n * @author Mono Ltd\r\n * @overview\r\n ***Notes:**\r\n - Refer to the [Baasic REST API](http://dev.baasic.com/api/reference/home) for detailed information about available Baasic REST API end-points.\r\n - [URI Template](https://github.com/Baasic/uritemplate-js) syntax enables expanding the Baasic route templates to Baasic REST URIs providing it with an object that contains URI parameters.\r\n - All end-point objects are transformed by the associated route definition.\r\n */ \r\n\n\n/***/ }),\n/* 349 */\n/***/ (function(module, exports, __webpack_require__) {\n\n\"use strict\";\n/* globals module */\r\n/**\r\n * @module userSkillClient\r\n * @description  User Skill Client provides Baasic route templates which can be expanded to Baasic REST URIs. Various services can use Baasic User Skill Route Definition to obtain needed routes while other routes will be obtained through HAL. By convention, all route services use the same function names as their corresponding services.\r\n */\r\n\r\nObject.defineProperty(exports, \"__esModule\", { value: true });\r\nvar tslib_1 = __webpack_require__(1);\r\nvar inversify_1 = __webpack_require__(0);\r\n;\r\nvar httpApi_1 = __webpack_require__(4);\r\nvar _1 = __webpack_require__(8);\r\nvar UserSkillClient = (function () {\r\n    function UserSkillClient(userSkillRoute, apiClient) {\r\n        this.userSkillRoute = userSkillRoute;\r\n        this.apiClient = apiClient;\r\n    }\r\n    Object.defineProperty(UserSkillClient.prototype, \"routeDefinition\", {\r\n        get: function () {\r\n            return this.userSkillRoute;\r\n        },\r\n        enumerable: true,\r\n        configurable: true\r\n    });\r\n    /**\r\n     * Returns a promise that is resolved once the find action has been performed. Success response returns a list of user skill resources matching the given criteria.\r\n     * @method\r\n     * @param options Query resource options object.\r\n     * @returns A promise that is resolved once the find action has been performed.\r\n     * @example userSkillClient.find({\r\n                    pageNumber : 1,\r\n                    pageSize : 10,\r\n                    orderBy : '<field>',\r\n                    orderDirection : '<asc|desc>',\r\n                    search : '<search-phrase>'\r\n                })\r\n                .then(function (collection) {\r\n                    // perform success action here\r\n                },\r\n                 function (response, status, headers, config) {\r\n                     // perform error handling here\r\n                });\r\n     **/\r\n    UserSkillClient.prototype.find = function (options) {\r\n        return this.apiClient.get(this.routeDefinition.find(options));\r\n    };\r\n    /**\r\n     * Returns a promise that is resolved once the get action has been performed. Success response returns the user skill resource.\r\n     * @method\r\n     * @param id User profile id or display name which uniquely identifies user profile whose skill resources need to be retrieved.\r\n     * @param options Query resource options object.\r\n     * @returns A promise that is resolved once the get action has been performed.\r\n     * @example userSkillClient.get()\r\n                    .then(function (data) {\r\n                        // perform success action here\r\n                    },\r\n                     function (response, status, headers, config) {\r\n                         // perform error handling here\r\n                    });\r\n     **/\r\n    UserSkillClient.prototype.get = function (id, options) {\r\n        return this.apiClient.get(this.userSkillRoute.get(id, options));\r\n    };\r\n    /**\r\n     * Returns a promise that is resolved once the create user skill action has been performed; this action creates a new user skill resource.\r\n     * @method\r\n     * @param data An user skill object that needs to be inserted into the system.\r\n     * @returns A promise that is resolved once the create user skill action has been performed.\r\n     * @example userSkillClient.create({ skillName : '<skill-name>', userId: '<user-id>' })\r\n                    .then(function (data) {\r\n                        // perform success action here\r\n                    },\r\n                     function (response, status, headers, config) {\r\n                         // perform error handling here\r\n                    });\r\n     **/\r\n    UserSkillClient.prototype.create = function (data) {\r\n        return this.apiClient.post(this.routeDefinition.create(data), this.routeDefinition.createParams(data));\r\n    };\r\n    /**\r\n     * Returns a promise that is resolved once the update user skill action has been performed; this action updates a user skill resource. This route uses HAL enabled objects to obtain routes and therefore it doesn't apply `userSkillRoute` route template. Here is an example of how a route can be obtained from HAL enabled objects:\r\n     * ```\r\n     * let params = modelMapper.removeParams(skill);\r\n     * let uri = params['model'].links('put').href;\r\n     * ```\r\n     * @method\r\n     * @param data An user skill object used to update specified user skill resource.\r\n     * @returns A promise that is resolved once the update user skill action has been performed.\r\n     * @example // skill is a resource previously fetched using get action.\r\n                       skill.description = '<description>';\r\n                       userSkillClient.update(skill)\r\n                           .then(function (data) {\r\n                               // perform success action here\r\n                           },\r\n                            function (response, status, headers, config) {\r\n                                // perform error handling here\r\n                           });\r\n    **/\r\n    UserSkillClient.prototype.update = function (data) {\r\n        return this.apiClient.put(this.routeDefinition.update(data), this.routeDefinition.updateParams(data));\r\n    };\r\n    /**\r\n     * Returns a promise that is resolved once the remove action has been performed. This action will remove a user skill resource from the system if successfully completed. This route uses HAL enabled objects to obtain routes and therefore it doesn't apply `userSkillRoute` route template. Here is an example of how a route can be obtained from HAL enabled objects:\r\n     * ```\r\n     * let params = modelMapper.removeParams(skill);\r\n     * let uri = params['model'].links('delete').href;\r\n     * ```\r\n     * @method\r\n     * @param data An user skill object used to delete specific user skill resource in the system.\r\n     * @returns A promise that is resolved once the remove action has been performed.\r\n     * @example // skill is a resource previously fetched using get action.\r\n                    userSkillClient.remove(skill)\r\n                        .then(function (data) {\r\n                            // perform success action here\r\n                        },\r\n                         function (response, status, headers, config) {\r\n                             // perform error handling here\r\n                        });\r\n     **/\r\n    UserSkillClient.prototype.remove = function (data) {\r\n        return this.apiClient.delete(this.routeDefinition.delete(data));\r\n    };\r\n    return UserSkillClient;\r\n}());\r\nUserSkillClient = tslib_1.__decorate([\r\n    inversify_1.injectable(),\r\n    tslib_1.__param(0, inversify_1.inject(_1.TYPES.UserSkillRoute)),\r\n    tslib_1.__param(1, inversify_1.inject(httpApi_1.httpTYPES.ApiClient)),\r\n    tslib_1.__metadata(\"design:paramtypes\", [typeof (_a = typeof _1.UserSkillRoute !== \"undefined\" && _1.UserSkillRoute) === \"function\" && _a || Object, typeof (_b = typeof httpApi_1.ApiClient !== \"undefined\" && httpApi_1.ApiClient) === \"function\" && _b || Object])\r\n], UserSkillClient);\r\nexports.UserSkillClient = UserSkillClient;\r\nvar _a, _b;\r\n/**\r\n * @overview\r\n ***Notes:**\r\n - Refer to the [REST API documentation](https://github.com/Baasic/baasic-rest-api/wiki) for detailed information about available Baasic REST API end-points.\r\n - All end-point objects are transformed by the associated route definition.\r\n */ \r\n\n\n/***/ }),\n/* 350 */\n/***/ (function(module, exports, __webpack_require__) {\n\n\"use strict\";\n/* globals module */\r\n/**\r\n * @module userSkillRoute\r\n * @description Baasic User Skill Route Definition provides Baasic route templates which can be expanded to Baasic REST URIs. Various services can use Baasic User Skill Route Definition to obtain needed routes while other routes will be obtained through HAL. By convention, all route services use the same function names as their corresponding services.\r\n */\r\n\r\nObject.defineProperty(exports, \"__esModule\", { value: true });\r\nvar tslib_1 = __webpack_require__(1);\r\nvar inversify_1 = __webpack_require__(0);\r\nvar common_1 = __webpack_require__(2);\r\n;\r\nvar contracts_1 = __webpack_require__(3);\r\nvar UserSkillRoute = (function (_super) {\r\n    tslib_1.__extends(UserSkillRoute, _super);\r\n    function UserSkillRoute(appOptions) {\r\n        var _this = _super.call(this, appOptions) || this;\r\n        _this.appOptions = appOptions;\r\n        _this.findRoute = 'profiles/{userId}/skills/{?searchQuery,page,rpp,sort,embed,fields}';\r\n        _this.getRoute = 'profiles/{userId}/skills/{id}/{?embed,fields}';\r\n        _this.createRoute = 'profiles/{userId}/skills';\r\n        _this.updateRoute = 'profiles/{userId}/skills/{id}';\r\n        _this.deleteRoute = 'profiles/{userId}/skills/{id}';\r\n        return _this;\r\n    }\r\n    /**\r\n     * Parses find route which can be expanded with additional options. Supported items are:\r\n     * - `searchQuery` - A string referencing user skill properties using the phrase or BQL (Baasic Query Language) search.\r\n     * - `page` - A value used to set the page number, i.e. to retrieve certain user skill subset from the storage.\r\n     * - `rpp` - A value used to limit the size of result set per page.\r\n     * - `sort` - A string used to set the user skill property to sort the result collection by.\r\n     * - `embed` - Comma separated list of resources to be contained within the current representation.\r\n     * @method\r\n     * @param options Query resource options object.\r\n     * @example userSkillRoute.find({searchQuery: '<search-phrase>'});\r\n     **/\r\n    UserSkillRoute.prototype.find = function (options) {\r\n        return _super.prototype.baseFind.call(this, this.findRoute, options);\r\n    };\r\n    /**\r\n     * Parses get route; this route doesn't expose any properties.\r\n     * @method\r\n     * @param id User profile id or display name which uniquely identifies user profile whose skill resources need to be retrieved.\r\n     * @param options Query resource options object.\r\n     * @example userSkillRoute.get(id, options);\r\n     **/\r\n    UserSkillRoute.prototype.get = function (id, options) {\r\n        return _super.prototype.baseGet.call(this, this.getRoute, id, options);\r\n    };\r\n    /**\r\n     * Parses create route; this URI template does not expose any additional options.\r\n     * @method\r\n     * @param data An user skill object that needs to be inserted into the system.\r\n     * @example userSkillRoute.create(data);\r\n     **/\r\n    UserSkillRoute.prototype.create = function (data) {\r\n        return _super.prototype.baseCreate.call(this, this.createRoute, data);\r\n    };\r\n    /**\r\n     * Parses update route; this URI template does not expose any additional options.\r\n     * @method\r\n     * @param data An user skill object used to update specific user skill resource in the system.\r\n     * @example userSkillRoute.update(data);\r\n     **/\r\n    UserSkillRoute.prototype.update = function (data) {\r\n        return _super.prototype.baseUpdate.call(this, this.updateRoute, data);\r\n    };\r\n    /**\r\n     * Parses delete route; this URI template does not expose any additional options.\r\n     * @method\r\n     * @param data An user skill object used to delete specific user skill resource in the system.\r\n     * @example userSkillRoute.delete(data);\r\n     **/\r\n    UserSkillRoute.prototype.delete = function (data) {\r\n        return _super.prototype.baseDelete.call(this, this.deleteRoute, data);\r\n    };\r\n    return UserSkillRoute;\r\n}(common_1.BaseRoute));\r\nUserSkillRoute = tslib_1.__decorate([\r\n    tslib_1.__param(0, inversify_1.inject(contracts_1.TYPES.IAppOptions)),\r\n    tslib_1.__metadata(\"design:paramtypes\", [typeof (_a = typeof contracts_1.IAppOptions !== \"undefined\" && contracts_1.IAppOptions) === \"function\" && _a || Object])\r\n], UserSkillRoute);\r\nexports.UserSkillRoute = UserSkillRoute;\r\nvar _a;\r\n/**\r\n * @overview\r\n ***Notes:**\r\n - Refer to the [REST API documentation](https://github.com/Baasic/baasic-rest-api/wiki) for detailed information about available Baasic REST API end-points.\r\n - [URI Template](https://github.com/Baasic/uritemplate-js) syntax enables expanding the Baasic route templates to Baasic REST URIs providing it with an object that contains URI parameters.\r\n - All end-point objects are transformed by the associated route definition.\r\n */ \r\n\n\n/***/ }),\n/* 351 */\n/***/ (function(module, exports, __webpack_require__) {\n\n\"use strict\";\n/* globals module */\r\n/**\r\n * @module userWorkClient\r\n * @description  User Work Client provides  route templates which can be expanded to  REST URIs. Various services can use  User Work Route Client to obtain needed routes while other routes will be obtained through HAL. By convention, all route services use the same function names as their corresponding services.\r\n */\r\n\r\nObject.defineProperty(exports, \"__esModule\", { value: true });\r\nvar tslib_1 = __webpack_require__(1);\r\nvar inversify_1 = __webpack_require__(0);\r\n;\r\nvar httpApi_1 = __webpack_require__(4);\r\nvar _1 = __webpack_require__(8);\r\nvar UserWorkClient = (function () {\r\n    function UserWorkClient(userWorkRoute, apiClient) {\r\n        this.userWorkRoute = userWorkRoute;\r\n        this.apiClient = apiClient;\r\n    }\r\n    Object.defineProperty(UserWorkClient.prototype, \"routeDefinition\", {\r\n        get: function () {\r\n            return this.userWorkRoute;\r\n        },\r\n        enumerable: true,\r\n        configurable: true\r\n    });\r\n    /**\r\n     * Returns a promise that is resolved once the find action has been performed. Success response returns a list of user work resources matching the given criteria.\r\n     * @method\r\n     * @param options Query resource options object.\r\n     * @returns A promise that is resolved once the find action has been performed.\r\n     * @example userWorkClient.find({\r\n                    pageNumber : 1,\r\n                    pageSize : 10,\r\n                    orderBy : '<field>',\r\n                    orderDirection : '<asc|desc>',\r\n                    search : '<search-phrase>'\r\n                })\r\n                .then(function (collection) {\r\n                    // perform success action here\r\n                },\r\n                 function (response, status, headers, config) {\r\n                     // perform error handling here\r\n                });\r\n     **/\r\n    UserWorkClient.prototype.find = function (options) {\r\n        return this.apiClient.get(this.routeDefinition.find(options));\r\n    };\r\n    /**\r\n     * Returns a promise that is resolved once the get action has been performed. Success response returns the user work resource.\r\n     * @method\r\n     * @param id User work id which uniquely identifies resource that needs to be retrieved.\r\n     * @param options Query resource options object.\r\n     * @example userWorkClient.get()\r\n                    .then(function (data) {\r\n                        // perform success action here\r\n                    },\r\n                     function (response, status, headers, config) {\r\n                         // perform error handling here\r\n                    });\r\n     **/\r\n    UserWorkClient.prototype.get = function (id, options) {\r\n        return this.apiClient.get(this.routeDefinition.get(id, options));\r\n    };\r\n    /**\r\n     * Returns a promise that is resolved once the create user work action has been performed; this action creates a new user work resource.\r\n     * @method\r\n     * @param data An user work object that needs to be inserted into the system.\r\n     * @returns A promise that is resolved once the create user work action has been performed.\r\n     * @example userWorkClient.create({ companyName : '<company-name>', userId: '<user-id>' })\r\n                    .then(function (data) {\r\n                        // perform success action here\r\n                    },\r\n                     function (response, status, headers, config) {\r\n                         // perform error handling here\r\n                    });\r\n     **/\r\n    UserWorkClient.prototype.create = function (data) {\r\n        return this.apiClient.post(this.routeDefinition.create(data), this.routeDefinition.createParams(data));\r\n    };\r\n    /**\r\n     * Returns a promise that is resolved once the update user work action has been performed; this action updates a user work resource. This route uses HAL enabled objects to obtain routes and therefore it doesn't apply `userWorkRoute` route template. Here is an example of how a route can be obtained from HAL enabled objects:\r\n     * ```\r\n     * let params = modelMapper.updateParams(work);\r\n     * let uri = params['model'].links('put').href;\r\n     * ```\r\n     * @method\r\n     * @param data An user work object used to update specified user work resource.\r\n     * @returns A promise that is resolved once the update user work action has been performed.\r\n     * @example // work is a resource previously fetched using get action.\r\n                    work.companyName = '<company-name>';\r\n                    userWorkClient.update(work)\r\n                        .then(function (data) {\r\n                            // perform success action here\r\n                        },\r\n                         function (response, status, headers, config) {\r\n                             // perform error handling here\r\n                        });\r\n     **/\r\n    UserWorkClient.prototype.update = function (data) {\r\n        return this.apiClient.put(this.routeDefinition.update(data), this.routeDefinition.updateParams(data));\r\n    };\r\n    /**\r\n     * Returns a promise that is resolved once the remove action has been performed. This action will remove a user work resource from the system if successfully completed. This route uses HAL enabled objects to obtain routes and therefore it doesn't apply `userWorkRoute` route template. Here is an example of how a route can be obtained from HAL enabled objects:\r\n     * ```\r\n     * let params = modelMapper.removeParams(work);\r\n     * let uri = params['model'].links('delete').href;\r\n     * ```\r\n     * @method\r\n     * @example // work is a resource previously fetched using get action.\r\n                       userWorkClient.remove(work)\r\n                           .then(function (data) {\r\n                               // perform success action here\r\n                           },\r\n                            function (response, status, headers, config) {\r\n                                // perform error handling here\r\n                           });\r\n    **/\r\n    UserWorkClient.prototype.remove = function (data) {\r\n        return this.apiClient.delete(this.routeDefinition.delete(data));\r\n    };\r\n    return UserWorkClient;\r\n}());\r\nUserWorkClient = tslib_1.__decorate([\r\n    inversify_1.injectable(),\r\n    tslib_1.__param(0, inversify_1.inject(_1.TYPES.UserWorkRoute)),\r\n    tslib_1.__param(1, inversify_1.inject(httpApi_1.httpTYPES.ApiClient)),\r\n    tslib_1.__metadata(\"design:paramtypes\", [typeof (_a = typeof _1.UserWorkRoute !== \"undefined\" && _1.UserWorkRoute) === \"function\" && _a || Object, typeof (_b = typeof httpApi_1.ApiClient !== \"undefined\" && httpApi_1.ApiClient) === \"function\" && _b || Object])\r\n], UserWorkClient);\r\nexports.UserWorkClient = UserWorkClient;\r\nvar _a, _b;\r\n/**\r\n * @overview\r\n ***Notes:**\r\n - Refer to the [REST API documentation](https://github.com/Baasic/baasic-rest-api/wiki) for detailed information about available Baasic REST API end-points.\r\n - All end-point objects are transformed by the associated route definition.\r\n */ \r\n\n\n/***/ }),\n/* 352 */\n/***/ (function(module, exports, __webpack_require__) {\n\n\"use strict\";\n/* globals module */\r\n/**\r\n * @module userWorkRoute\r\n * @description Baasic User Work Route Definition provides Baasic route templates which can be expanded to Baasic REST URIs. Various services can use Baasic User Work Route Definition to obtain needed routes while other routes will be obtained through HAL. By convention, all route services use the same function names as their corresponding services.\r\n */\r\n\r\nObject.defineProperty(exports, \"__esModule\", { value: true });\r\nvar tslib_1 = __webpack_require__(1);\r\nvar inversify_1 = __webpack_require__(0);\r\nvar common_1 = __webpack_require__(2);\r\n;\r\nvar contracts_1 = __webpack_require__(3);\r\nvar UserWorkRoute = (function (_super) {\r\n    tslib_1.__extends(UserWorkRoute, _super);\r\n    function UserWorkRoute(appOptions) {\r\n        var _this = _super.call(this, appOptions) || this;\r\n        _this.appOptions = appOptions;\r\n        _this.findRoute = 'profiles/{userId}/work/{?searchQuery,page,rpp,sort,embed,fields}';\r\n        _this.getRoute = 'profiles/{userId}/work/{id}/{?embed,fields}';\r\n        _this.createRoute = 'profiles/{userId}/work';\r\n        _this.updateRoute = 'profiles/{userId}/work/{id}';\r\n        _this.deleteRoute = 'profiles/{userId}/work/{id}';\r\n        return _this;\r\n    }\r\n    /**\r\n     * Parses find route which can be expanded with additional options. Supported items are:\r\n     * - `searchQuery` - A string referencing user work properties using the phrase or BQL (Baasic Query Language) search.\r\n     * - `page` - A value used to set the page number, i.e. to retrieve certain user work subset from the storage.\r\n     * - `rpp` - A value used to limit the size of result set per page.\r\n     * - `sort` - A string used to set the user work property to sort the result collection by.\r\n     * - `embed` - Comma separated list of resources to be contained within the current representation.\r\n     * @method\r\n     * @param options Query resource options object.\r\n     * @example userWorkRoute.find({searchQuery: '<search-phrase>'});\r\n     **/\r\n    UserWorkRoute.prototype.find = function (options) {\r\n        return _super.prototype.baseFind.call(this, this.findRoute, options);\r\n    };\r\n    /**\r\n     * Parses get route; this route doesn't expose any properties.\r\n     * @method\r\n     * @param id User work id which uniquely identifies resource that needs to be retrieved.\r\n     * @param options Query resource options object.\r\n     * @example userWorkRoute.get(id, options);\r\n     **/\r\n    UserWorkRoute.prototype.get = function (id, options) {\r\n        return _super.prototype.baseGet.call(this, this.getRoute, id, options);\r\n    };\r\n    /**\r\n     * Parses create route; this URI template does not expose any additional options.\r\n     * @method\r\n     * @param data An user work object that needs to be inserted into the system.\r\n     * @example userWorkRoute.create(data);\r\n     **/\r\n    UserWorkRoute.prototype.create = function (data) {\r\n        return _super.prototype.baseCreate.call(this, this.createRoute, data);\r\n    };\r\n    /**\r\n      * Parses update route; this URI template does not expose any additional options.\r\n      * @method\r\n      * @param data An user work object used to update specified user work resource.\r\n      * @example userWorkRoute.create(data);\r\n      **/\r\n    UserWorkRoute.prototype.update = function (data) {\r\n        return _super.prototype.baseUpdate.call(this, this.updateRoute, data);\r\n    };\r\n    UserWorkRoute.prototype.delete = function (data) {\r\n        return _super.prototype.baseDelete.call(this, this.deleteRoute, data);\r\n    };\r\n    return UserWorkRoute;\r\n}(common_1.BaseRoute));\r\nUserWorkRoute = tslib_1.__decorate([\r\n    tslib_1.__param(0, inversify_1.inject(contracts_1.TYPES.IAppOptions)),\r\n    tslib_1.__metadata(\"design:paramtypes\", [typeof (_a = typeof contracts_1.IAppOptions !== \"undefined\" && contracts_1.IAppOptions) === \"function\" && _a || Object])\r\n], UserWorkRoute);\r\nexports.UserWorkRoute = UserWorkRoute;\r\nvar _a;\r\n/**\r\n * @overview\r\n ***Notes:**\r\n - Refer to the [REST API documentation](https://github.com/Baasic/baasic-rest-api/wiki) for detailed information about available Baasic REST API end-points.\r\n - [URI Template](https://github.com/Baasic/uritemplate-js) syntax enables expanding the Baasic route templates to Baasic REST URIs providing it with an object that contains URI parameters.\r\n - All end-point objects are transformed by the associated route definition.\r\n */ \r\n\n\n/***/ }),\n/* 353 */\n/***/ (function(module, exports, __webpack_require__) {\n\n\"use strict\";\n\r\nObject.defineProperty(exports, \"__esModule\", { value: true });\r\nvar inversify_1 = __webpack_require__(0);\r\nvar _1 = __webpack_require__(22);\r\nvar TYPES = {\r\n    ValueSetClient: Symbol(\"ValueSetClient\"),\r\n    ValueSetItemClient: Symbol(\"ValueSetItemClient\"),\r\n    ValueSetItemRoute: Symbol(\"ValueSetItemRoute\"),\r\n    ValueSetRoute: Symbol(\"ValueSetRoute\")\r\n};\r\nexports.TYPES = TYPES;\r\nvar diModule = new inversify_1.ContainerModule(function (bind) {\r\n    bind(TYPES.ValueSetItemRoute).to(_1.ValueSetItemRoute);\r\n    bind(TYPES.ValueSetItemClient).to(_1.ValueSetItemClient);\r\n    bind(TYPES.ValueSetRoute).to(_1.ValueSetRoute);\r\n    bind(TYPES.ValueSetClient).to(_1.ValueSetClient);\r\n});\r\nexports.diModule = diModule;\r\n\n\n/***/ }),\n/* 354 */\n/***/ (function(module, exports, __webpack_require__) {\n\n\"use strict\";\n/**\r\n * @module valueSetClient\r\n * @description  Value Set Client provides an easy way to consume Baasic Value Set REST end-points. In order to obtain needed routes `baasicValueSetService` uses `baasicValueSetRouteService`.\r\n */\r\n\r\nObject.defineProperty(exports, \"__esModule\", { value: true });\r\nvar tslib_1 = __webpack_require__(1);\r\nvar inversify_1 = __webpack_require__(0);\r\n;\r\nvar httpApi_1 = __webpack_require__(4);\r\nvar _1 = __webpack_require__(22);\r\nvar ValueSetClient = (function () {\r\n    function ValueSetClient(valueSetRoute, valueSetItemClient, apiClient) {\r\n        this.valueSetRoute = valueSetRoute;\r\n        this.valueSetItemClient = valueSetItemClient;\r\n        this.apiClient = apiClient;\r\n    }\r\n    Object.defineProperty(ValueSetClient.prototype, \"items\", {\r\n        get: function () {\r\n            return this.valueSetItemClient;\r\n        },\r\n        enumerable: true,\r\n        configurable: true\r\n    });\r\n    Object.defineProperty(ValueSetClient.prototype, \"routeDefinition\", {\r\n        /**\r\n         * Provides direct access to `valueSetRoute`.\r\n         * @method\r\n         * @example valueSetClient.routeDefinition.get().expand(expandObject);\r\n        **/\r\n        get: function () {\r\n            return this.valueSetRoute;\r\n        },\r\n        enumerable: true,\r\n        configurable: true\r\n    });\r\n    /**\r\n     * Returns a promise that is resolved once the find action has been performed. Success response returns a list of value set resources matching given criteria.\r\n     * @param options query resource options object\r\n     * @returns A promise that is resolved once the find action has beend performed.\r\n     * @method\r\n     * @example valueSetClient.find({\r\n                    pageNumber: 1,\r\n                    pageSize : 10,\r\n                    orderBy : '<field>',\r\n                    orderDirection : '<asc|desc>',\r\n                    search : '<search-phrase>'\r\n                })\r\n                .then(function (collection) {\r\n                    // perform success action here\r\n                },\r\n                 function (response, status, headers, config) {\r\n                    // perform error handling here\r\n                });\r\n     **/\r\n    ValueSetClient.prototype.find = function (options) {\r\n        return this.apiClient.get(this.routeDefinition.find(options));\r\n    };\r\n    /**\r\n     * Returns a promise that is resolved once the get action has been performed. Success response returns the specified value set resource.\r\n     * @param setName value set name\r\n     * @param options query resource options object\r\n     * @returns A promise that is resolved once the get action has been performed.\r\n     * @method\r\n     * @example valueSetClient.get('<value-set-name>')\r\n                   .success(function (data) {\r\n                       // perform success action here\r\n                   })\r\n                   .error(function (response, status, headers, config) {\r\n                       // perform error handling here\r\n                   });\r\n    **/\r\n    ValueSetClient.prototype.get = function (setName, options) {\r\n        return this.apiClient.get(this.valueSetRoute.get(setName, options));\r\n    };\r\n    /**\r\n     * Returns a promise that is resolved once the create value set action has been performed; this action creates a new value set resource.\r\n     * @param data A key value object that needs to be inserted into the system.\r\n     * @returns A promise that is resolved once the create value set action has beend performed.\r\n     * @method\r\n     * @example valueSetClient.create({\r\n                    name: '<value-set-name>',\r\n                    description: '<description>',\r\n                    values: [{value: '<value>'}]\r\n                })\r\n                .then(function (data) {\r\n                    // perform success action here\r\n                },\r\n                 function (response, status, headers, config) {\r\n                    // perform error handling here\r\n                });\r\n     **/\r\n    ValueSetClient.prototype.create = function (data) {\r\n        return this.apiClient.post(this.routeDefinition.create(), this.routeDefinition.createParams(data));\r\n    };\r\n    /**\r\n     * Returns a promise that is resolved once the update value set action has been performed; this action updates a value set resource. This route uses HAL enabled objects to obtain routes and therefore it doesn't apply `baasicValueSetService` route template. Here is an example of how a route can be obtained from HAL enabled objects:\r\n     * ```\r\n     * let params = modelMapper.removeParams(valueSet);\r\n     * let uri = params['model'].links('put').href;\r\n     * ```\r\n     * @param data Value set object used to update specified value set resource.\r\n     * @returns A promise that is resolved once the update value set action has been performed.\r\n     * @method\r\n     * @example // valueSet is a resource previously fetched using get action.\r\n                    valueSet.name = '<new-name>';\r\n                    valueSetClient.update(valueSet)\r\n                        .then(function (data) {\r\n                            // perform success action here\r\n                        },\r\n                         function (response, status, headers, config) {\r\n                            // perform error handling here\r\n                        });\r\n     **/\r\n    ValueSetClient.prototype.update = function (data) {\r\n        return this.apiClient.put(this.routeDefinition.update(data), this.routeDefinition.updateParams(data));\r\n    };\r\n    /**\r\n     * Returns a promise that is resolved once the remove action has been performed. This action will delete a value set resource if the action is completed successfully. This route uses HAL enabled objects to obtain routes and therefore it doesn't apply `valueSetClient` route template. Here is an example of how a route can be obtained from HAL enabled objects:\r\n     * ```\r\n     * let params = modelMapper.removeParams(valueSet);\r\n     * let uri = params['model'].links('delete').href;\r\n     * ```\r\n     * @param data A value set object used to delete specified value set resource.\r\n     * @method\r\n     * @example // valueSet is a resource previously fetched using get action.\r\n                    valueSetClient.remove(valueSet)\r\n                        .then(function (data) {\r\n                            // perform success action here\r\n                        },\r\n                         function (response, status, headers, config) {\r\n                            // perform error handling here\r\n                        });\r\n     **/\r\n    ValueSetClient.prototype.remove = function (data) {\r\n        return this.apiClient.delete(this.routeDefinition.delete(data));\r\n    };\r\n    return ValueSetClient;\r\n}());\r\nValueSetClient = tslib_1.__decorate([\r\n    inversify_1.injectable(),\r\n    tslib_1.__param(0, inversify_1.inject(_1.TYPES.ValueSetRoute)),\r\n    tslib_1.__param(1, inversify_1.inject(_1.TYPES.ValueSetItemClient)),\r\n    tslib_1.__param(2, inversify_1.inject(httpApi_1.httpTYPES.ApiClient)),\r\n    tslib_1.__metadata(\"design:paramtypes\", [typeof (_a = typeof _1.ValueSetRoute !== \"undefined\" && _1.ValueSetRoute) === \"function\" && _a || Object, typeof (_b = typeof _1.ValueSetItemClient !== \"undefined\" && _1.ValueSetItemClient) === \"function\" && _b || Object, typeof (_c = typeof httpApi_1.ApiClient !== \"undefined\" && httpApi_1.ApiClient) === \"function\" && _c || Object])\r\n], ValueSetClient);\r\nexports.ValueSetClient = ValueSetClient;\r\nvar _a, _b, _c;\r\n/**\r\n * @copyright (c) 2017 Mono Ltd\r\n * @license MIT\r\n * @author Mono Ltd\r\n * @overview\r\n ***Notes:**\r\n - Refer to the [Baasic REST API](http://dev.baasic.com/api/reference/home) for detailed information about available Baasic REST API end-points.\r\n - All end-point objects are transformed by the associated route service.\r\n*/ \r\n\n\n/***/ }),\n/* 355 */\n/***/ (function(module, exports, __webpack_require__) {\n\n\"use strict\";\n\r\nObject.defineProperty(exports, \"__esModule\", { value: true });\r\nvar tslib_1 = __webpack_require__(1);\r\n/**\r\n * @module valueSetItemClient\r\n * @description  Value Set Item Client provides an easy way to consume  Value Set Item REST end-points. In order to obtain needed routes `valueSetItemClient` uses `valueSetItemRoute`.\r\n */\r\nvar inversify_1 = __webpack_require__(0);\r\n;\r\nvar httpApi_1 = __webpack_require__(4);\r\nvar _1 = __webpack_require__(22);\r\nvar ValueSetItemClient = (function () {\r\n    function ValueSetItemClient(valueSetItemRoute, apiClient) {\r\n        this.valueSetItemRoute = valueSetItemRoute;\r\n        this.apiClient = apiClient;\r\n    }\r\n    Object.defineProperty(ValueSetItemClient.prototype, \"routeDefinition\", {\r\n        get: function () {\r\n            return this.valueSetItemRoute;\r\n        },\r\n        enumerable: true,\r\n        configurable: true\r\n    });\r\n    /**\r\n     * Returns a promise that is resolved once the find action has been performed. Success response returns a list of value set item resources matching given criteria.\r\n     * @param options Query resource options object.\r\n     * @returns A promise that is resolved once the find action has been performed.\r\n     * @method items.find\r\n     * @example valueSetItemClient.find({\r\n                    setName: '<value-set-name>',\r\n                    pageNumber : 1,\r\n                    pageSize : 10,\r\n                    orderBy : '<field>',\r\n                    orderDirection : '<asc|desc>',\r\n                    search : '<search-phrase>' })\r\n                .then(function (collection) {\r\n                    // perform success action here\r\n                },\r\n                 function (response, status, headers, config) {\r\n                    // perform error handling here\r\n                });\r\n     **/\r\n    ValueSetItemClient.prototype.find = function (options) {\r\n        return this.apiClient.get(this.routeDefinition.find(options));\r\n    };\r\n    /**\r\n     * Returns a promise that is resolved once the get action has been performed. Success response returns the specified value set item resource.\r\n     * @param setName value set name\r\n     * @param id unique identifier of value set resource\r\n     * @param options query resource options object\r\n     * @returns A promise that is resolved once the get action has been performed.\r\n     * @method items.get\r\n     * @example valueSetItemClient.get('<value-set-name>', '<set-item-id>')\r\n                   .then(function (data) {\r\n                        // perform success action here\r\n                },\r\n                 function (response, status, headers, config) {\r\n                    // perform error handling here\r\n                });\r\n     **/\r\n    ValueSetItemClient.prototype.get = function (setName, id, options) {\r\n        return this.apiClient.get(this.valueSetItemRoute.get(setName, id, options));\r\n    };\r\n    /**\r\n     * Returns a promise that is resolved once the create value set item action has been performed; this action creates a new value set item resource.\r\n     * @method\r\n     * @param data A value set item object that needs to be inserted into the system.\r\n     * @returns A promise that is resolved once the create value set item action has been performed.\r\n     * @example valueSetItemClient.create({\r\n                    setId: '<value-set-id>',\r\n                    value: '<value>'\r\n                })\r\n                .then(function (data) {\r\n                    // perform success action here\r\n                },\r\n                 function (response, status, headers, config) {\r\n                    // perform error handling here\r\n                });\r\n     **/\r\n    ValueSetItemClient.prototype.create = function (data) {\r\n        return this.apiClient.post(this.routeDefinition.create(data), this.routeDefinition.createParams(data));\r\n    };\r\n    /**\r\n     * Returns a promise that is resolved once the update value set item action has been performed; this action updates a value set item resource. This route uses HAL enabled objects to obtain routes and therefore it doesn't apply `valueSetClient` route template. Here is an example of how a route can be obtained from HAL enabled objects:\r\n     * ```\r\n     * let params = modelMapper.removeParams(valueSetItem);\r\n     * let uri = params['model'].links('put').href;\r\n     * ```\r\n     * @method\r\n     * @param data A value set item object used to update specified value set resource.\r\n     * @returns A promise that is resolved once the update value set item action has been performed.\r\n     * @example // valueSetItem is a resource previously fetched using get action.\r\n                valueSetItem.value = '<new-value>';\r\n                valueSetItemClient.update(valueSetItem)\r\n                    .then(function (data) {\r\n                        // perform success action here\r\n                    },\r\n                     function (response, status, headers, config) {\r\n                         // perform error handling here\r\n                    });\r\n     **/\r\n    ValueSetItemClient.prototype.update = function (data) {\r\n        return this.apiClient.put(this.routeDefinition.update(data), this.routeDefinition.updateParams(data));\r\n    };\r\n    /**\r\n     * Returns a promise that is resolved once the remove action has been performed. This action will delete a value set item if the action is completed successfully. This route uses HAL enabled objects to obtain routes and therefore it doesn't apply `valueSetClient` route template. Here is an example of how a route can be obtained from HAL enabled objects:\r\n     * ```\r\n     * let params = modelMapper.removeParams(valueSetItem);\r\n     * let uri = params['model'].links('delete').href;\r\n     * ```\r\n     * @param data A value set item object used to delete specified value set resource.\r\n     * @returns A promise that is resolved once the remove action has been performed.\r\n     * @method\r\n     * @example // valueSetItem is a resource previously fetched using get action.\r\n                valueSetItemClient.remove(valueSetItem)\r\n                    .then(function (data) {\r\n                        // perform success action here\r\n                    },\r\n                     function (response, status, headers, config) {\r\n                        // perform error handling here\r\n                    });\r\n     **/\r\n    ValueSetItemClient.prototype.remove = function (data) {\r\n        return this.apiClient.delete(this.routeDefinition.delete(data));\r\n    };\r\n    return ValueSetItemClient;\r\n}());\r\nValueSetItemClient = tslib_1.__decorate([\r\n    inversify_1.injectable(),\r\n    tslib_1.__param(0, inversify_1.inject(_1.TYPES.ValueSetItemRoute)),\r\n    tslib_1.__param(1, inversify_1.inject(httpApi_1.httpTYPES.ApiClient)),\r\n    tslib_1.__metadata(\"design:paramtypes\", [typeof (_a = typeof _1.ValueSetItemRoute !== \"undefined\" && _1.ValueSetItemRoute) === \"function\" && _a || Object, typeof (_b = typeof httpApi_1.ApiClient !== \"undefined\" && httpApi_1.ApiClient) === \"function\" && _b || Object])\r\n], ValueSetItemClient);\r\nexports.ValueSetItemClient = ValueSetItemClient;\r\nvar _a, _b;\r\n/**\r\n * @copyright (c) 2017 Mono Ltd\r\n * @license MIT\r\n * @author Mono Ltd\r\n * @overview\r\n ***Notes:**\r\n - Refer to the [Baasic REST API](http://dev.baasic.com/api/reference/home) for detailed information about available Baasic REST API end-points.\r\n - All end-point objects are transformed by the associated route service.\r\n*/ \r\n\n\n/***/ }),\n/* 356 */\n/***/ (function(module, exports, __webpack_require__) {\n\n\"use strict\";\n\r\nObject.defineProperty(exports, \"__esModule\", { value: true });\r\nvar tslib_1 = __webpack_require__(1);\r\n/**\r\n * @module valueSetItemRoute\r\n * @description Baasic Value Set Item Route Definition provides Baasic route templates which can be expanded to Baasic REST URIs. Various services can use Baasic Value Set Item Route Service to obtain needed routes while other routes will be obtained through HAL. By convention, all route services  use the same function names as their corresponding services.\r\n */\r\nvar inversify_1 = __webpack_require__(0);\r\nvar common_1 = __webpack_require__(2);\r\n;\r\nvar contracts_1 = __webpack_require__(3);\r\nvar ValueSetItemRoute = (function (_super) {\r\n    tslib_1.__extends(ValueSetItemRoute, _super);\r\n    function ValueSetItemRoute(appOptions) {\r\n        var _this = _super.call(this, appOptions) || this;\r\n        _this.appOptions = appOptions;\r\n        _this.findRoute = 'value-sets/{setName}/items/{?searchQuery,page,rpp,sort,embed,fields}';\r\n        _this.getRoute = 'value-sets/{setName}/items/{id}/{?embed,fields}';\r\n        _this.createRoute = 'value-sets/{setName}/items/';\r\n        _this.updateRoute = 'value-sets/{setId}/items/{id}';\r\n        _this.deleteRoute = 'value-sets/{setId}/items/{id}';\r\n        return _this;\r\n    }\r\n    /**\r\n     * Parses find value set items route which can be expanded with additional options. Supported items are:\r\n     * - `setName` - Value set name.\r\n     * - `searchQuery` - A string value used to identify value set items using the phrase search.\r\n     * - `page` - A value used to set the page number, i.e. to retrieve certain value set item subset from the storage.\r\n     * - `rpp` - A value used to limit the size of result set per page.\r\n     * - `sort` - A string used to set the value set item property to sort the result collection by.\r\n     * - `embed` - Comma separated list of resources to be contained within the current representation.\r\n     * @method items.find\r\n     * @param options Options object.\r\n     * @example valueSetItemRoute.find(options);\r\n     **/\r\n    ValueSetItemRoute.prototype.find = function (options) {\r\n        return _super.prototype.baseFind.call(this, this.findRoute, options);\r\n    };\r\n    /**\r\n     * Parses get route which must be expanded with the following items:\r\n     * - `setName` - Value set name.\r\n     * - `id` - Value set item id.\r\n     * @method\r\n     * @param setName Value set name.\r\n     * @param id Value set id.\r\n     * @param options Query resource options object.\r\n     * @example valueSetItemRoute.get(setName, id, options);\r\n     **/\r\n    ValueSetItemRoute.prototype.get = function (setName, id, options) {\r\n        var params = this.utility.extend({}, options);\r\n        params.setName = setName;\r\n        return _super.prototype.baseGet.call(this, this.getRoute, id, options);\r\n    };\r\n    /**\r\n     * Parses create value set item route; the URI template should be expanded with the value set name.\r\n     * @method\r\n     * @param data A value set item object that needs to be inserted into the system.\r\n     * @example valueSetItemRoute.create(data);\r\n     **/\r\n    ValueSetItemRoute.prototype.create = function (data) {\r\n        return _super.prototype.baseCreate.call(this, this.createRoute, data);\r\n    };\r\n    /**\r\n     * Parses update value set item route.\r\n     * @method\r\n     * @param data A value set item object used to update specified value set resource.\r\n     * @example valueSetItemRoute.update(data);\r\n     */\r\n    ValueSetItemRoute.prototype.update = function (data) {\r\n        return _super.prototype.baseUpdate.call(this, this.updateRoute, data);\r\n    };\r\n    /**\r\n     * Parses delete value set item route.\r\n     * @method\r\n     * @param data A value set item object used to delete specified value set resource.\r\n     * @example valueSetItemRoute.delete(data);\r\n     */\r\n    ValueSetItemRoute.prototype.delete = function (data) {\r\n        return _super.prototype.baseDelete.call(this, this.deleteRoute, data);\r\n    };\r\n    return ValueSetItemRoute;\r\n}(common_1.BaseRoute));\r\nValueSetItemRoute = tslib_1.__decorate([\r\n    inversify_1.injectable(),\r\n    tslib_1.__param(0, inversify_1.inject(contracts_1.TYPES.IAppOptions)),\r\n    tslib_1.__metadata(\"design:paramtypes\", [typeof (_a = typeof contracts_1.IAppOptions !== \"undefined\" && contracts_1.IAppOptions) === \"function\" && _a || Object])\r\n], ValueSetItemRoute);\r\nexports.ValueSetItemRoute = ValueSetItemRoute;\r\nvar _a;\r\n/**\r\n * @copyright (c) 2017 Mono Ltd\r\n * @license MIT\r\n * @author Mono Ltd\r\n * @overview\r\n ***Notes:**\r\n - Refer to the [Baasic REST API](http://dev.baasic.com/api/reference/home) for detailed information about available Baasic REST API end-points.\r\n - [URI Template](https://github.com/Baasic/uritemplate-js) syntax enables expanding the Baasic route templates to Baasic REST URIs providing it with an object that contains URI parameters.\r\n - All end-point objects are transformed by the associated route service.\r\n*/ \r\n\n\n/***/ }),\n/* 357 */\n/***/ (function(module, exports, __webpack_require__) {\n\n\"use strict\";\n/**\r\n * @module valueSetRoute\r\n * @description Baasic Value Set Route Definition provides Baasic route templates which can be expanded to Baasic REST URIs. Various services can use Baasic Value Set Route Service to obtain needed routes while other routes will be obtained through HAL. By convention, all route services  use the same function names as their corresponding services.\r\n */\r\n\r\nObject.defineProperty(exports, \"__esModule\", { value: true });\r\nvar tslib_1 = __webpack_require__(1);\r\nvar inversify_1 = __webpack_require__(0);\r\nvar common_1 = __webpack_require__(2);\r\n;\r\nvar _1 = __webpack_require__(22);\r\nvar contracts_1 = __webpack_require__(3);\r\nvar ValueSetRoute = (function (_super) {\r\n    tslib_1.__extends(ValueSetRoute, _super);\r\n    function ValueSetRoute(appOptions, valueSetItemRoute) {\r\n        var _this = _super.call(this, appOptions) || this;\r\n        _this.appOptions = appOptions;\r\n        _this.valueSetItemRoute = valueSetItemRoute;\r\n        _this.findRoute = 'value-sets/{?searchQuery,page,rpp,sort,embed,fields}';\r\n        _this.getRoute = 'value-sets/{setName}/{?embed,fields}';\r\n        _this.createRoute = 'value-sets';\r\n        _this.updateRoute = 'value-sets/{id}';\r\n        _this.deleteRoute = 'value-sets/{id}';\r\n        return _this;\r\n    }\r\n    Object.defineProperty(ValueSetRoute.prototype, \"items\", {\r\n        get: function () {\r\n            return this.valueSetItemRoute;\r\n        },\r\n        enumerable: true,\r\n        configurable: true\r\n    });\r\n    /**\r\n     * Parses find value set route which can be expanded with additional options. Supported items are:\r\n     * - `searchQuery` - A string value used to identify value set resources using the phrase search.\r\n     * - `page` - A value used to set the page number, i.e. to retrieve certain value set subset from the storage.\r\n     * - `rpp` - A value used to limit the size of result set per page.\r\n     * - `sort` - A string used to set the value set property to sort the result collection by.\r\n     * - `embed` - Comma separated list of resources to be contained within the current representation.\r\n     * @method\r\n     * @param options Query resource options object.\r\n     * @example valueSetRoute.find(options);\r\n     **/\r\n    ValueSetRoute.prototype.find = function (options) {\r\n        return _super.prototype.baseFind.call(this, this.findRoute, options);\r\n    };\r\n    /**\r\n     * Parses get value set route which must be expanded with the name of the previously created value set resource in the system.\r\n     * @method\r\n     * @param setName Value Set name.\r\n     * @param options Query resource options object.\r\n     * @example valueSetRoute.get(setName, options);\r\n     **/\r\n    ValueSetRoute.prototype.get = function (setName, options) {\r\n        return _super.prototype.baseGet.call(this, this.getRoute, setName, options, 'setName');\r\n    };\r\n    /**\r\n     * Parses create value set route; this URI template does not expose any additional options.\r\n     * @method\r\n     * @example valueSetRoute.create();\r\n     **/\r\n    ValueSetRoute.prototype.create = function () {\r\n        return _super.prototype.baseCreate.call(this, this.createRoute, {});\r\n    };\r\n    /**\r\n     * Parses update value set route.\r\n     * @method\r\n     * @param data Value set object used to update specified value set resource.\r\n     * @example valueSetRoute.update(data);\r\n     */\r\n    ValueSetRoute.prototype.update = function (data) {\r\n        return _super.prototype.baseUpdate.call(this, this.updateRoute, data);\r\n    };\r\n    /**\r\n     * Parses delete value set route.\r\n     * @method\r\n     * @param data A value set object used to delete specified value set resource.\r\n     * @example valueSetRoute.delete(data);\r\n     */\r\n    ValueSetRoute.prototype.delete = function (data) {\r\n        return _super.prototype.baseDelete.call(this, this.deleteRoute, data);\r\n    };\r\n    return ValueSetRoute;\r\n}(common_1.BaseRoute));\r\nValueSetRoute = tslib_1.__decorate([\r\n    tslib_1.__param(0, inversify_1.inject(contracts_1.TYPES.IAppOptions)),\r\n    tslib_1.__param(1, inversify_1.inject(_1.TYPES.ValueSetItemRoute)),\r\n    tslib_1.__metadata(\"design:paramtypes\", [typeof (_a = typeof contracts_1.IAppOptions !== \"undefined\" && contracts_1.IAppOptions) === \"function\" && _a || Object, typeof (_b = typeof _1.ValueSetItemRoute !== \"undefined\" && _1.ValueSetItemRoute) === \"function\" && _b || Object])\r\n], ValueSetRoute);\r\nexports.ValueSetRoute = ValueSetRoute;\r\nvar _a, _b;\r\n/**\r\n * @copyright (c) 2017 Mono Ltd\r\n * @license MIT\r\n * @author Mono Ltd\r\n * @overview\r\n ***Notes:**\r\n - Refer to the [Baasic REST API](http://dev.baasic.com/api/reference/home) for detailed information about available Baasic REST API end-points.\r\n - [URI Template](https://github.com/Baasic/uritemplate-js) syntax enables expanding the Baasic route templates to Baasic REST URIs providing it with an object that contains URI parameters.\r\n - All end-point objects are transformed by the associated route service.\r\n*/ \r\n\n\n/***/ }),\n/* 358 */\n/***/ (function(module, exports, __webpack_require__) {\n\n/*global unescape, module, define, window, global*/\r\n\r\n/*\r\n UriTemplate Copyright (c) 2012-2013 Franz Antesberger. All Rights Reserved.\r\n Available via the MIT license.\r\n*/\r\n\r\n(function (exportCallback) {\r\n    \"use strict\";\r\n\r\nvar UriTemplateError = (function () {\r\n\r\n    function UriTemplateError (options) {\r\n        this.options = options;\r\n    }\r\n\r\n    UriTemplateError.prototype.toString = function () {\r\n        if (JSON && JSON.stringify) {\r\n            return JSON.stringify(this.options);\r\n        }\r\n        else {\r\n            return this.options;\r\n        }\r\n    };\r\n\r\n    return UriTemplateError;\r\n}());\r\n\r\nvar objectHelper = (function () {\r\n    function isArray (value) {\r\n        return Object.prototype.toString.apply(value) === '[object Array]';\r\n    }\r\n\r\n    function isString (value) {\r\n        return Object.prototype.toString.apply(value) === '[object String]';\r\n    }\r\n    \r\n    function isNumber (value) {\r\n        return Object.prototype.toString.apply(value) === '[object Number]';\r\n    }\r\n    \r\n    function isBoolean (value) {\r\n        return Object.prototype.toString.apply(value) === '[object Boolean]';\r\n    }\r\n    \r\n    function join (arr, separator) {\r\n        var\r\n            result = '',\r\n            first = true,\r\n            index;\r\n        for (index = 0; index < arr.length; index += 1) {\r\n            if (first) {\r\n                first = false;\r\n            }\r\n            else {\r\n                result += separator;\r\n            }\r\n            result += arr[index];\r\n        }\r\n        return result;\r\n    }\r\n\r\n    function map (arr, mapper) {\r\n        var\r\n            result = [],\r\n            index = 0;\r\n        for (; index < arr.length; index += 1) {\r\n            result.push(mapper(arr[index]));\r\n        }\r\n        return result;\r\n    }\r\n\r\n    function filter (arr, predicate) {\r\n        var\r\n            result = [],\r\n            index = 0;\r\n        for (; index < arr.length; index += 1) {\r\n            if (predicate(arr[index])) {\r\n                result.push(arr[index]);\r\n            }\r\n        }\r\n        return result;\r\n    }\r\n\r\n    function deepFreezeUsingObjectFreeze (object) {\r\n        if (typeof object !== \"object\" || object === null) {\r\n            return object;\r\n        }\r\n        Object.freeze(object);\r\n        var property, propertyName;\r\n        for (propertyName in object) {\r\n            if (object.hasOwnProperty(propertyName)) {\r\n                property = object[propertyName];\r\n                // be aware, arrays are 'object', too\r\n                if (typeof property === \"object\") {\r\n                    deepFreeze(property);\r\n                }\r\n            }\r\n        }\r\n        return object;\r\n    }\r\n\r\n    function deepFreeze (object) {\r\n        if (typeof Object.freeze === 'function') {\r\n            return deepFreezeUsingObjectFreeze(object);\r\n        }\r\n        return object;\r\n    }\r\n\r\n\r\n    return {\r\n        isArray: isArray,\r\n        isString: isString,\r\n        isNumber: isNumber,\r\n        isBoolean: isBoolean,\r\n        join: join,\r\n        map: map,\r\n        filter: filter,\r\n        deepFreeze: deepFreeze\r\n    };\r\n}());\r\n\r\nvar charHelper = (function () {\r\n\r\n    function isAlpha (chr) {\r\n        return (chr >= 'a' && chr <= 'z') || ((chr >= 'A' && chr <= 'Z'));\r\n    }\r\n\r\n    function isDigit (chr) {\r\n        return chr >= '0' && chr <= '9';\r\n    }\r\n\r\n    function isHexDigit (chr) {\r\n        return isDigit(chr) || (chr >= 'a' && chr <= 'f') || (chr >= 'A' && chr <= 'F');\r\n    }\r\n\r\n    return {\r\n        isAlpha: isAlpha,\r\n        isDigit: isDigit,\r\n        isHexDigit: isHexDigit\r\n    };\r\n}());\r\n\r\nvar pctEncoder = (function () {\r\n    var utf8 = {\r\n        encode: function (chr) {\r\n            // see http://ecmanaut.blogspot.de/2006/07/encoding-decoding-utf8-in-javascript.html\r\n            return unescape(encodeURIComponent(chr));\r\n        },\r\n        numBytes: function (firstCharCode) {\r\n            if (firstCharCode <= 0x7F) {\r\n                return 1;\r\n            }\r\n            else if (0xC2 <= firstCharCode && firstCharCode <= 0xDF) {\r\n                return 2;\r\n            }\r\n            else if (0xE0 <= firstCharCode && firstCharCode <= 0xEF) {\r\n                return 3;\r\n            }\r\n            else if (0xF0 <= firstCharCode && firstCharCode <= 0xF4) {\r\n                return 4;\r\n            }\r\n            // no valid first octet\r\n            return 0;\r\n        },\r\n        isValidFollowingCharCode: function (charCode) {\r\n            return 0x80 <= charCode && charCode <= 0xBF;\r\n        }\r\n    };\r\n\r\n    /**\r\n     * encodes a character, if needed or not.\r\n     * @param chr\r\n     * @return pct-encoded character\r\n     */\r\n    function encodeCharacter (chr) {\r\n        var\r\n            result = '',\r\n            octets = utf8.encode(chr),\r\n            octet,\r\n            index;\r\n        for (index = 0; index < octets.length; index += 1) {\r\n            octet = octets.charCodeAt(index);\r\n            result += '%' + (octet < 0x10 ? '0' : '') + octet.toString(16).toUpperCase();\r\n        }\r\n        return result;\r\n    }\r\n\r\n    /**\r\n     * Returns, whether the given text at start is in the form 'percent hex-digit hex-digit', like '%3F'\r\n     * @param text\r\n     * @param start\r\n     * @return {boolean|*|*}\r\n     */\r\n    function isPercentDigitDigit (text, start) {\r\n        return text.charAt(start) === '%' && charHelper.isHexDigit(text.charAt(start + 1)) && charHelper.isHexDigit(text.charAt(start + 2));\r\n    }\r\n\r\n    /**\r\n     * Parses a hex number from start with length 2.\r\n     * @param text a string\r\n     * @param start the start index of the 2-digit hex number\r\n     * @return {Number}\r\n     */\r\n    function parseHex2 (text, start) {\r\n        return parseInt(text.substr(start, 2), 16);\r\n    }\r\n\r\n    /**\r\n     * Returns whether or not the given char sequence is a correctly pct-encoded sequence.\r\n     * @param chr\r\n     * @return {boolean}\r\n     */\r\n    function isPctEncoded (chr) {\r\n        if (!isPercentDigitDigit(chr, 0)) {\r\n            return false;\r\n        }\r\n        var firstCharCode = parseHex2(chr, 1);\r\n        var numBytes = utf8.numBytes(firstCharCode);\r\n        if (numBytes === 0) {\r\n            return false;\r\n        }\r\n        for (var byteNumber = 1; byteNumber < numBytes; byteNumber += 1) {\r\n            if (!isPercentDigitDigit(chr, 3*byteNumber) || !utf8.isValidFollowingCharCode(parseHex2(chr, 3*byteNumber + 1))) {\r\n                return false;\r\n            }\r\n        }\r\n        return true;\r\n    }\r\n\r\n    /**\r\n     * Reads as much as needed from the text, e.g. '%20' or '%C3%B6'. It does not decode!\r\n     * @param text\r\n     * @param startIndex\r\n     * @return the character or pct-string of the text at startIndex\r\n     */\r\n    function pctCharAt(text, startIndex) {\r\n        var chr = text.charAt(startIndex);\r\n        if (!isPercentDigitDigit(text, startIndex)) {\r\n            return chr;\r\n        }\r\n        var utf8CharCode = parseHex2(text, startIndex + 1);\r\n        var numBytes = utf8.numBytes(utf8CharCode);\r\n        if (numBytes === 0) {\r\n            return chr;\r\n        }\r\n        for (var byteNumber = 1; byteNumber < numBytes; byteNumber += 1) {\r\n            if (!isPercentDigitDigit(text, startIndex + 3 * byteNumber) || !utf8.isValidFollowingCharCode(parseHex2(text, startIndex + 3 * byteNumber + 1))) {\r\n                return chr;\r\n            }\r\n        }\r\n        return text.substr(startIndex, 3 * numBytes);\r\n    }\r\n\r\n    return {\r\n        encodeCharacter: encodeCharacter,\r\n        isPctEncoded: isPctEncoded,\r\n        pctCharAt: pctCharAt\r\n    };\r\n}());\r\n\r\nvar rfcCharHelper = (function () {\r\n\r\n    /**\r\n     * Returns if an character is an varchar character according 2.3 of rfc 6570\r\n     * @param chr\r\n     * @return (Boolean)\r\n     */\r\n    function isVarchar (chr) {\r\n        return charHelper.isAlpha(chr) || charHelper.isDigit(chr) || chr === '_' || pctEncoder.isPctEncoded(chr);\r\n    }\r\n\r\n    /**\r\n     * Returns if chr is an unreserved character according 1.5 of rfc 6570\r\n     * @param chr\r\n     * @return {Boolean}\r\n     */\r\n    function isUnreserved (chr) {\r\n        return charHelper.isAlpha(chr) || charHelper.isDigit(chr) || chr === '-' || chr === '.' || chr === '_' || chr === '~';\r\n    }\r\n\r\n    /**\r\n     * Returns if chr is an reserved character according 1.5 of rfc 6570\r\n     * or the percent character mentioned in 3.2.1.\r\n     * @param chr\r\n     * @return {Boolean}\r\n     */\r\n    function isReserved (chr) {\r\n        return chr === ':' || chr === '/' || chr === '?' || chr === '#' || chr === '[' || chr === ']' || chr === '@' || chr === '!' || chr === '$' || chr === '&' || chr === '(' ||\r\n            chr === ')' || chr === '*' || chr === '+' || chr === ',' || chr === ';' || chr === '=' || chr === \"'\";\r\n    }\r\n\r\n    return {\r\n        isVarchar: isVarchar,\r\n        isUnreserved: isUnreserved,\r\n        isReserved: isReserved\r\n    };\r\n\r\n}());\r\n\r\n/**\r\n * encoding of rfc 6570\r\n */\r\nvar encodingHelper = (function () {\r\n\r\n    function encode (text, passReserved) {\r\n        var\r\n            result = '',\r\n            index,\r\n            chr = '';\r\n        if (typeof text === \"number\" || typeof text === \"boolean\") {\r\n            text = text.toString();\r\n        }\r\n        for (index = 0; index < text.length; index += chr.length) {\r\n            chr = text.charAt(index);\r\n            result += rfcCharHelper.isUnreserved(chr) || (passReserved && rfcCharHelper.isReserved(chr)) ? chr : pctEncoder.encodeCharacter(chr);\r\n        }\r\n        return result;\r\n    }\r\n\r\n    function encodePassReserved (text) {\r\n        return encode(text, true);\r\n    }\r\n\r\n    function encodeLiteralCharacter (literal, index) {\r\n        var chr = pctEncoder.pctCharAt(literal, index);\r\n        if (chr.length > 1) {\r\n            return chr;\r\n        }\r\n        else {\r\n            return rfcCharHelper.isReserved(chr) || rfcCharHelper.isUnreserved(chr) ? chr : pctEncoder.encodeCharacter(chr);\r\n        }\r\n    }\r\n\r\n    function encodeLiteral (literal) {\r\n        var\r\n            result = '',\r\n            index,\r\n            chr = '';\r\n        for (index = 0; index < literal.length; index += chr.length) {\r\n            chr = pctEncoder.pctCharAt(literal, index);\r\n            if (chr.length > 1) {\r\n                result += chr;\r\n            }\r\n            else {\r\n                result += rfcCharHelper.isReserved(chr) || rfcCharHelper.isUnreserved(chr) ? chr : pctEncoder.encodeCharacter(chr);\r\n            }\r\n        }\r\n        return result;\r\n    }\r\n\r\n    return {\r\n        encode: encode,\r\n        encodePassReserved: encodePassReserved,\r\n        encodeLiteral: encodeLiteral,\r\n        encodeLiteralCharacter: encodeLiteralCharacter\r\n    };\r\n\r\n}());\r\n\r\n\r\n// the operators defined by rfc 6570\r\nvar operators = (function () {\r\n\r\n    var\r\n        bySymbol = {};\r\n\r\n    function create (symbol) {\r\n        bySymbol[symbol] = {\r\n            symbol: symbol,\r\n            separator: (symbol === '?') ? '&' : (symbol === '' || symbol === '+' || symbol === '#') ? ',' : symbol,\r\n            named: symbol === ';' || symbol === '&' || symbol === '?',\r\n            ifEmpty: (symbol === '&' || symbol === '?') ? '=' : '',\r\n            first: (symbol === '+' ) ? '' : symbol,\r\n            encode: (symbol === '+' || symbol === '#') ? encodingHelper.encodePassReserved : encodingHelper.encode,\r\n            toString: function () {\r\n                return this.symbol;\r\n            }\r\n        };\r\n    }\r\n\r\n    create('');\r\n    create('+');\r\n    create('#');\r\n    create('.');\r\n    create('/');\r\n    create(';');\r\n    create('?');\r\n    create('&');\r\n    return {\r\n        valueOf: function (chr) {\r\n            if (bySymbol[chr]) {\r\n                return bySymbol[chr];\r\n            }\r\n            if (\"=,!@|\".indexOf(chr) >= 0) {\r\n                return null;\r\n            }\r\n            return bySymbol[''];\r\n        }\r\n    };\r\n}());\r\n\r\n\r\n/**\r\n * Detects, whether a given element is defined in the sense of rfc 6570\r\n * Section 2.3 of the RFC makes clear defintions:\r\n * * undefined and null are not defined.\r\n * * the empty string is defined\r\n * * an array (\"list\") is defined, if it is not empty (even if all elements are not defined)\r\n * * an object (\"map\") is defined, if it contains at least one property with defined value\r\n * @param object\r\n * @return {Boolean}\r\n */\r\nfunction isDefined (object) {\r\n    var\r\n        propertyName;\r\n    if (object === null || object === undefined) {\r\n        return false;\r\n    }\r\n    if (objectHelper.isArray(object)) {\r\n        // Section 2.3: A variable defined as a list value is considered undefined if the list contains zero members\r\n        return object.length > 0;\r\n    }\r\n    if (typeof object === \"string\" || typeof object === \"number\" || typeof object === \"boolean\") {\r\n        // falsy values like empty strings, false or 0 are \"defined\"\r\n        return true;\r\n    }\r\n    // else Object\r\n    for (propertyName in object) {\r\n        if (object.hasOwnProperty(propertyName) && isDefined(object[propertyName])) {\r\n            return true;\r\n        }\r\n    }\r\n    return false;\r\n}\r\n\r\nvar LiteralExpression = (function () {\r\n    function LiteralExpression (literal) {\r\n        this.literal = encodingHelper.encodeLiteral(literal);\r\n    }\r\n\r\n    LiteralExpression.prototype.expand = function () {\r\n        return this.literal;\r\n    };\r\n\r\n    LiteralExpression.prototype.toString = LiteralExpression.prototype.expand;\r\n\r\n    return LiteralExpression;\r\n}());\r\n\r\nvar parse = (function () {\r\n\r\n    function parseExpression (expressionText) {\r\n        var\r\n            operator,\r\n            varspecs = [],\r\n            varspec = null,\r\n            varnameStart = null,\r\n            maxLengthStart = null,\r\n            index,\r\n            chr = '';\r\n\r\n        function closeVarname () {\r\n            var varname = expressionText.substring(varnameStart, index);\r\n            if (varname.length === 0) {\r\n                throw new UriTemplateError({expressionText: expressionText, message: \"a varname must be specified\", position: index});\r\n            }\r\n            varspec = {varname: varname, exploded: false, maxLength: null};\r\n            varnameStart = null;\r\n        }\r\n\r\n        function closeMaxLength () {\r\n            if (maxLengthStart === index) {\r\n                throw new UriTemplateError({expressionText: expressionText, message: \"after a ':' you have to specify the length\", position: index});\r\n            }\r\n            varspec.maxLength = parseInt(expressionText.substring(maxLengthStart, index), 10);\r\n            maxLengthStart = null;\r\n        }\r\n\r\n        operator = (function (operatorText) {\r\n            var op = operators.valueOf(operatorText);\r\n            if (op === null) {\r\n                throw new UriTemplateError({expressionText: expressionText, message: \"illegal use of reserved operator\", position: index, operator: operatorText});\r\n            }\r\n            return op;\r\n        }(expressionText.charAt(0)));\r\n        index = operator.symbol.length;\r\n\r\n        varnameStart = index;\r\n\r\n        for (; index < expressionText.length; index += chr.length) {\r\n            chr = pctEncoder.pctCharAt(expressionText, index);\r\n\r\n            if (varnameStart !== null) {\r\n                // the spec says: varname =  varchar *( [\".\"] varchar )\r\n                // so a dot is allowed except for the first char\r\n                if (chr === '.') {\r\n                    if (varnameStart === index) {\r\n                        throw new UriTemplateError({expressionText: expressionText, message: \"a varname MUST NOT start with a dot\", position: index});\r\n                    }\r\n                    continue;\r\n                }\r\n                if (rfcCharHelper.isVarchar(chr)) {\r\n                    continue;\r\n                }\r\n                closeVarname();\r\n            }\r\n            if (maxLengthStart !== null) {\r\n                if (index === maxLengthStart && chr === '0') {\r\n                    throw new UriTemplateError({expressionText: expressionText, message: \"A :prefix must not start with digit 0\", position: index});\r\n                }\r\n                if (charHelper.isDigit(chr)) {\r\n                    if (index - maxLengthStart >= 4) {\r\n                        throw new UriTemplateError({expressionText: expressionText, message: \"A :prefix must have max 4 digits\", position: index});\r\n                    }\r\n                    continue;\r\n                }\r\n                closeMaxLength();\r\n            }\r\n            if (chr === ':') {\r\n                if (varspec.maxLength !== null) {\r\n                    throw new UriTemplateError({expressionText: expressionText, message: \"only one :maxLength is allowed per varspec\", position: index});\r\n                }\r\n                if (varspec.exploded) {\r\n                    throw new UriTemplateError({expressionText: expressionText, message: \"an exploeded varspec MUST NOT be varspeced\", position: index});\r\n                }\r\n                maxLengthStart = index + 1;\r\n                continue;\r\n            }\r\n            if (chr === '*') {\r\n                if (varspec === null) {\r\n                    throw new UriTemplateError({expressionText: expressionText, message: \"exploded without varspec\", position: index});\r\n                }\r\n                if (varspec.exploded) {\r\n                    throw new UriTemplateError({expressionText: expressionText, message: \"exploded twice\", position: index});\r\n                }\r\n                if (varspec.maxLength) {\r\n                    throw new UriTemplateError({expressionText: expressionText, message: \"an explode (*) MUST NOT follow to a prefix\", position: index});\r\n                }\r\n                varspec.exploded = true;\r\n                continue;\r\n            }\r\n            // the only legal character now is the comma\r\n            if (chr === ',') {\r\n                varspecs.push(varspec);\r\n                varspec = null;\r\n                varnameStart = index + 1;\r\n                continue;\r\n            }\r\n            throw new UriTemplateError({expressionText: expressionText, message: \"illegal character\", character: chr, position: index});\r\n        } // for chr\r\n        if (varnameStart !== null) {\r\n            closeVarname();\r\n        }\r\n        if (maxLengthStart !== null) {\r\n            closeMaxLength();\r\n        }\r\n        varspecs.push(varspec);\r\n        return new VariableExpression(expressionText, operator, varspecs);\r\n    }\r\n\r\n    function parse (uriTemplateText) {\r\n        // assert filled string\r\n        var\r\n            index,\r\n            chr,\r\n            expressions = [],\r\n            braceOpenIndex = null,\r\n            literalStart = 0;\r\n        for (index = 0; index < uriTemplateText.length; index += 1) {\r\n            chr = uriTemplateText.charAt(index);\r\n            if (literalStart !== null) {\r\n                if (chr === '}') {\r\n                    throw new UriTemplateError({templateText: uriTemplateText, message: \"unopened brace closed\", position: index});\r\n                }\r\n                if (chr === '{') {\r\n                    if (literalStart < index) {\r\n                        expressions.push(new LiteralExpression(uriTemplateText.substring(literalStart, index)));\r\n                    }\r\n                    literalStart = null;\r\n                    braceOpenIndex = index;\r\n                }\r\n                continue;\r\n            }\r\n\r\n            if (braceOpenIndex !== null) {\r\n                // here just { is forbidden\r\n                if (chr === '{') {\r\n                    throw new UriTemplateError({templateText: uriTemplateText, message: \"brace already opened\", position: index});\r\n                }\r\n                if (chr === '}') {\r\n                    if (braceOpenIndex + 1 === index) {\r\n                        throw new UriTemplateError({templateText: uriTemplateText, message: \"empty braces\", position: braceOpenIndex});\r\n                    }\r\n                    try {\r\n                        expressions.push(parseExpression(uriTemplateText.substring(braceOpenIndex + 1, index)));\r\n                    }\r\n                    catch (error) {\r\n                        if (error.prototype === UriTemplateError.prototype) {\r\n                            throw new UriTemplateError({templateText: uriTemplateText, message: error.options.message, position: braceOpenIndex + error.options.position, details: error.options});\r\n                        }\r\n                        throw error;\r\n                    }\r\n                    braceOpenIndex = null;\r\n                    literalStart = index + 1;\r\n                }\r\n                continue;\r\n            }\r\n            throw new Error('reached unreachable code');\r\n        }\r\n        if (braceOpenIndex !== null) {\r\n            throw new UriTemplateError({templateText: uriTemplateText, message: \"unclosed brace\", position: braceOpenIndex});\r\n        }\r\n        if (literalStart < uriTemplateText.length) {\r\n            expressions.push(new LiteralExpression(uriTemplateText.substr(literalStart)));\r\n        }\r\n        return new UriTemplate(uriTemplateText, expressions);\r\n    }\r\n\r\n    return parse;\r\n}());\r\n\r\nvar VariableExpression = (function () {\r\n    // helper function if JSON is not available\r\n    function prettyPrint (value) {\r\n        return (JSON && JSON.stringify) ? JSON.stringify(value) : value;\r\n    }\r\n\r\n    function isEmpty (value) {\r\n        if (!isDefined(value)) {\r\n            return true;\r\n        }\r\n        if (objectHelper.isString(value)) {\r\n            return value === '';\r\n        }\r\n        if (objectHelper.isNumber(value) || objectHelper.isBoolean(value)) {\r\n            return false;\r\n        }\r\n        if (objectHelper.isArray(value)) {\r\n            return value.length === 0;\r\n        }\r\n        for (var propertyName in value) {\r\n            if (value.hasOwnProperty(propertyName)) {\r\n                return false;\r\n            }\r\n        }\r\n        return true;\r\n    }\r\n\r\n    function propertyArray (object) {\r\n        var\r\n            result = [],\r\n            propertyName;\r\n        for (propertyName in object) {\r\n            if (object.hasOwnProperty(propertyName)) {\r\n                result.push({name: propertyName, value: object[propertyName]});\r\n            }\r\n        }\r\n        return result;\r\n    }\r\n\r\n    function VariableExpression (templateText, operator, varspecs) {\r\n        this.templateText = templateText;\r\n        this.operator = operator;\r\n        this.varspecs = varspecs;\r\n    }\r\n\r\n    VariableExpression.prototype.toString = function () {\r\n        return this.templateText;\r\n    };\r\n\r\n    function expandSimpleValue(varspec, operator, value) {\r\n        var result = '';\r\n        value = value.toString();\r\n        if (operator.named) {\r\n            result += encodingHelper.encodeLiteral(varspec.varname);\r\n            if (value === '') {\r\n                result += operator.ifEmpty;\r\n                return result;\r\n            }\r\n            result += '=';\r\n        }\r\n        if (varspec.maxLength !== null) {\r\n            value = value.substr(0, varspec.maxLength);\r\n        }\r\n        result += operator.encode(value);\r\n        return result;\r\n    }\r\n\r\n    function valueDefined (nameValue) {\r\n        return isDefined(nameValue.value);\r\n    }\r\n\r\n    function expandNotExploded(varspec, operator, value) {\r\n        var\r\n            arr = [],\r\n            result = '';\r\n        if (operator.named) {\r\n            result += encodingHelper.encodeLiteral(varspec.varname);\r\n            if (isEmpty(value)) {\r\n                result += operator.ifEmpty;\r\n                return result;\r\n            }\r\n            result += '=';\r\n        }\r\n        if (objectHelper.isArray(value)) {\r\n            arr = value;\r\n            arr = objectHelper.filter(arr, isDefined);\r\n            arr = objectHelper.map(arr, operator.encode);\r\n            result += objectHelper.join(arr, ',');\r\n        }\r\n        else {\r\n            arr = propertyArray(value);\r\n            arr = objectHelper.filter(arr, valueDefined);\r\n            arr = objectHelper.map(arr, function (nameValue) {\r\n                return operator.encode(nameValue.name) + ',' + operator.encode(nameValue.value);\r\n            });\r\n            result += objectHelper.join(arr, ',');\r\n        }\r\n        return result;\r\n    }\r\n\r\n    function expandExplodedNamed (varspec, operator, value) {\r\n        var\r\n            isArray = objectHelper.isArray(value),\r\n            arr = [];\r\n        if (isArray) {\r\n            arr = value;\r\n            arr = objectHelper.filter(arr, isDefined);\r\n            arr = objectHelper.map(arr, function (listElement) {\r\n                var tmp = encodingHelper.encodeLiteral(varspec.varname);\r\n                if (isEmpty(listElement)) {\r\n                    tmp += operator.ifEmpty;\r\n                }\r\n                else {\r\n                    tmp += '=' + operator.encode(listElement);\r\n                }\r\n                return tmp;\r\n            });\r\n        }\r\n        else {\r\n            arr = propertyArray(value);\r\n            arr = objectHelper.filter(arr, valueDefined);\r\n            arr = objectHelper.map(arr, function (nameValue) {\r\n                var tmp = encodingHelper.encodeLiteral(nameValue.name);\r\n                if (isEmpty(nameValue.value)) {\r\n                    tmp += operator.ifEmpty;\r\n                }\r\n                else {\r\n                    tmp += '=' + operator.encode(nameValue.value);\r\n                }\r\n                return tmp;\r\n            });\r\n        }\r\n        return objectHelper.join(arr, operator.separator);\r\n    }\r\n\r\n    function expandExplodedUnnamed (operator, value) {\r\n        var\r\n            arr = [],\r\n            result = '';\r\n        if (objectHelper.isArray(value)) {\r\n            arr = value;\r\n            arr = objectHelper.filter(arr, isDefined);\r\n            arr = objectHelper.map(arr, operator.encode);\r\n            result += objectHelper.join(arr, operator.separator);\r\n        }\r\n        else {\r\n            arr = propertyArray(value);\r\n            arr = objectHelper.filter(arr, function (nameValue) {\r\n                return isDefined(nameValue.value);\r\n            });\r\n            arr = objectHelper.map(arr, function (nameValue) {\r\n                return operator.encode(nameValue.name) + '=' + operator.encode(nameValue.value);\r\n            });\r\n            result += objectHelper.join(arr, operator.separator);\r\n        }\r\n        return result;\r\n    }\r\n\r\n\r\n    VariableExpression.prototype.expand = function (variables) {\r\n        var\r\n            expanded = [],\r\n            index,\r\n            varspec,\r\n            value,\r\n            valueIsArr,\r\n            oneExploded = false,\r\n            operator = this.operator;\r\n\r\n        // expand each varspec and join with operator's separator\r\n        for (index = 0; index < this.varspecs.length; index += 1) {\r\n            varspec = this.varspecs[index];\r\n            value = variables[varspec.varname];\r\n            // if (!isDefined(value)) {\r\n            // if (variables.hasOwnProperty(varspec.name)) {\r\n            if (value === null || value === undefined) {\r\n                continue;\r\n            }\r\n            if (varspec.exploded) {\r\n                oneExploded = true;\r\n            }\r\n            valueIsArr = objectHelper.isArray(value);\r\n            if (typeof value === \"string\" || typeof value === \"number\" || typeof value === \"boolean\") {\r\n                expanded.push(expandSimpleValue(varspec, operator, value));\r\n            }\r\n            else if (varspec.maxLength && isDefined(value)) {\r\n                // 2.4.1 of the spec says: \"Prefix modifiers are not applicable to variables that have composite values.\"\r\n                throw new Error('Prefix modifiers are not applicable to variables that have composite values. You tried to expand ' + this + \" with \" + prettyPrint(value));\r\n            }\r\n            else if (!varspec.exploded) {\r\n                if (operator.named || !isEmpty(value)) {\r\n                    expanded.push(expandNotExploded(varspec, operator, value));\r\n                }\r\n            }\r\n            else if (isDefined(value)) {\r\n                if (operator.named) {\r\n                    expanded.push(expandExplodedNamed(varspec, operator, value));\r\n                }\r\n                else {\r\n                    expanded.push(expandExplodedUnnamed(operator, value));\r\n                }\r\n            }\r\n        }\r\n\r\n        if (expanded.length === 0) {\r\n            return \"\";\r\n        }\r\n        else {\r\n            return operator.first + objectHelper.join(expanded, operator.separator);\r\n        }\r\n    };\r\n\r\n    return VariableExpression;\r\n}());\r\n\r\nvar UriTemplate = (function () {\r\n    function UriTemplate (templateText, expressions) {\r\n        this.templateText = templateText;\r\n        this.expressions = expressions;\r\n        objectHelper.deepFreeze(this);\r\n    }\r\n\r\n    UriTemplate.prototype.toString = function () {\r\n        return this.templateText;\r\n    };\r\n\r\n    UriTemplate.prototype.expand = function (variables) {\r\n        // this.expressions.map(function (expression) {return expression.expand(variables);}).join('');\r\n        var\r\n            index,\r\n            result = '';\r\n        for (index = 0; index < this.expressions.length; index += 1) {\r\n            result += this.expressions[index].expand(variables);\r\n        }\r\n        return result;\r\n    };\r\n\r\n    UriTemplate.parse = parse;\r\n    UriTemplate.UriTemplateError = UriTemplateError;\r\n    return UriTemplate;\r\n}());\r\n\r\n    exportCallback(UriTemplate);\r\n\r\n}(function (UriTemplate) {\r\n        \"use strict\";\r\n        // export UriTemplate, when module is present, or pass it to window or global\r\n        if (true) {\r\n            module.exports = UriTemplate;\r\n        }\r\n        else if (typeof define === \"function\") {\r\n            define([],function() {\r\n                return UriTemplate;\r\n            });\r\n        }\r\n        else if (typeof window !== \"undefined\") {\r\n            window.UriTemplate = UriTemplate;\r\n        }\r\n        else {\r\n            global.UriTemplate = UriTemplate;\r\n        }\r\n    }\r\n));\r\n\n\n/***/ })\n/******/ ]);\n});\n\n\n// WEBPACK FOOTER //\n// baasic-sdk-javascript.js"," \t// The module cache\n \tvar installedModules = {};\n\n \t// The require function\n \tfunction __webpack_require__(moduleId) {\n\n \t\t// Check if module is in cache\n \t\tif(installedModules[moduleId])\n \t\t\treturn installedModules[moduleId].exports;\n\n \t\t// Create a new module (and put it into the cache)\n \t\tvar module = installedModules[moduleId] = {\n \t\t\ti: moduleId,\n \t\t\tl: false,\n \t\t\texports: {}\n \t\t};\n\n \t\t// Execute the module function\n \t\tmodules[moduleId].call(module.exports, module, module.exports, __webpack_require__);\n\n \t\t// Flag the module as loaded\n \t\tmodule.l = true;\n\n \t\t// Return the exports of the module\n \t\treturn module.exports;\n \t}\n\n\n \t// expose the modules object (__webpack_modules__)\n \t__webpack_require__.m = modules;\n\n \t// expose the module cache\n \t__webpack_require__.c = installedModules;\n\n \t// identity function for calling harmony imports with the correct context\n \t__webpack_require__.i = function(value) { return value; };\n\n \t// define getter function for harmony exports\n \t__webpack_require__.d = function(exports, name, getter) {\n \t\tif(!__webpack_require__.o(exports, name)) {\n \t\t\tObject.defineProperty(exports, name, {\n \t\t\t\tconfigurable: false,\n \t\t\t\tenumerable: true,\n \t\t\t\tget: getter\n \t\t\t});\n \t\t}\n \t};\n\n \t// getDefaultExport function for compatibility with non-harmony modules\n \t__webpack_require__.n = function(module) {\n \t\tvar getter = module && module.__esModule ?\n \t\t\tfunction getDefault() { return module['default']; } :\n \t\t\tfunction getModuleExports() { return module; };\n \t\t__webpack_require__.d(getter, 'a', getter);\n \t\treturn getter;\n \t};\n\n \t// Object.prototype.hasOwnProperty.call\n \t__webpack_require__.o = function(object, property) { return Object.prototype.hasOwnProperty.call(object, property); };\n\n \t// __webpack_public_path__\n \t__webpack_require__.p = \"\";\n\n \t// Load entry module and return exports\n \treturn __webpack_require__(__webpack_require__.s = 37);\n\n\n\n// WEBPACK FOOTER //\n// webpack/bootstrap 24d9c7b289d724cf5ab0","\"use strict\";\nvar container_1 = require(\"./container/container\");\nexports.Container = container_1.Container;\nvar container_module_1 = require(\"./container/container_module\");\nexports.ContainerModule = container_module_1.ContainerModule;\nvar injectable_1 = require(\"./annotation/injectable\");\nexports.injectable = injectable_1.injectable;\nvar tagged_1 = require(\"./annotation/tagged\");\nexports.tagged = tagged_1.tagged;\nvar named_1 = require(\"./annotation/named\");\nexports.named = named_1.named;\nvar inject_1 = require(\"./annotation/inject\");\nexports.inject = inject_1.inject;\nvar optional_1 = require(\"./annotation/optional\");\nexports.optional = optional_1.optional;\nvar unmanaged_1 = require(\"./annotation/unmanaged\");\nexports.unmanaged = unmanaged_1.unmanaged;\nvar multi_inject_1 = require(\"./annotation/multi_inject\");\nexports.multiInject = multi_inject_1.multiInject;\nvar target_name_1 = require(\"./annotation/target_name\");\nexports.targetName = target_name_1.targetName;\nvar guid_1 = require(\"./utils/guid\");\nexports.guid = guid_1.guid;\nvar decorator_utils_1 = require(\"./annotation/decorator_utils\");\nexports.decorate = decorator_utils_1.decorate;\nvar constraint_helpers_1 = require(\"./syntax/constraint_helpers\");\nexports.traverseAncerstors = constraint_helpers_1.traverseAncerstors;\nexports.taggedConstraint = constraint_helpers_1.taggedConstraint;\nexports.namedConstraint = constraint_helpers_1.namedConstraint;\nexports.typeConstraint = constraint_helpers_1.typeConstraint;\nvar serialization_1 = require(\"./utils/serialization\");\nexports.getServiceIdentifierAsString = serialization_1.getServiceIdentifierAsString;\n\n\n\n//////////////////\n// WEBPACK FOOTER\n// ./~/inversify/lib/inversify.js\n// module id = 0\n// module chunks = 0","/*! *****************************************************************************\r\nCopyright (c) Microsoft Corporation. All rights reserved.\r\nLicensed under the Apache License, Version 2.0 (the \"License\"); you may not use\r\nthis file except in compliance with the License. You may obtain a copy of the\r\nLicense at http://www.apache.org/licenses/LICENSE-2.0\r\n\r\nTHIS CODE IS PROVIDED ON AN *AS IS* BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\r\nKIND, EITHER EXPRESS OR IMPLIED, INCLUDING WITHOUT LIMITATION ANY IMPLIED\r\nWARRANTIES OR CONDITIONS OF TITLE, FITNESS FOR A PARTICULAR PURPOSE,\r\nMERCHANTABLITY OR NON-INFRINGEMENT.\r\n\r\nSee the Apache Version 2.0 License for specific language governing permissions\r\nand limitations under the License.\r\n***************************************************************************** */\r\n/* global Reflect, Promise */\r\n\r\nvar extendStatics = Object.setPrototypeOf ||\r\n    ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||\r\n    function (d, b) { for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p]; };\r\n\r\nexport function __extends(d, b) {\r\n    extendStatics(d, b);\r\n    function __() { this.constructor = d; }\r\n    d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());\r\n}\r\n\r\nexport var __assign = Object.assign || function __assign(t) {\r\n    for (var s, i = 1, n = arguments.length; i < n; i++) {\r\n        s = arguments[i];\r\n        for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p)) t[p] = s[p];\r\n    }\r\n    return t;\r\n};\r\n\r\nexport function __rest(s, e) {\r\n    var t = {};\r\n    for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p) && e.indexOf(p) < 0)\r\n        t[p] = s[p];\r\n    if (s != null && typeof Object.getOwnPropertySymbols === \"function\")\r\n        for (var i = 0, p = Object.getOwnPropertySymbols(s); i < p.length; i++) if (e.indexOf(p[i]) < 0)\r\n            t[p[i]] = s[p[i]];\r\n    return t;\r\n}\r\n\r\nexport function __decorate(decorators, target, key, desc) {\r\n    var c = arguments.length, r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;\r\n    if (typeof Reflect === \"object\" && typeof Reflect.decorate === \"function\") r = Reflect.decorate(decorators, target, key, desc);\r\n    else for (var i = decorators.length - 1; i >= 0; i--) if (d = decorators[i]) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;\r\n    return c > 3 && r && Object.defineProperty(target, key, r), r;\r\n}\r\n\r\nexport function __param(paramIndex, decorator) {\r\n    return function (target, key) { decorator(target, key, paramIndex); }\r\n}\r\n\r\nexport function __metadata(metadataKey, metadataValue) {\r\n    if (typeof Reflect === \"object\" && typeof Reflect.metadata === \"function\") return Reflect.metadata(metadataKey, metadataValue);\r\n}\r\n\r\nexport function __awaiter(thisArg, _arguments, P, generator) {\r\n    return new (P || (P = Promise))(function (resolve, reject) {\r\n        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }\r\n        function rejected(value) { try { step(generator.throw(value)); } catch (e) { reject(e); } }\r\n        function step(result) { result.done ? resolve(result.value) : new P(function (resolve) { resolve(result.value); }).then(fulfilled, rejected); }\r\n        step((generator = generator.apply(thisArg, _arguments || [])).next());\r\n    });\r\n}\r\n\r\nexport function __generator(thisArg, body) {\r\n    var _ = { label: 0, sent: function() { if (t[0] & 1) throw t[1]; return t[1]; }, trys: [], ops: [] }, f, y, t, g;\r\n    return g = { next: verb(0), \"throw\": verb(1), \"return\": verb(2) }, typeof Symbol === \"function\" && (g[Symbol.iterator] = function() { return this; }), g;\r\n    function verb(n) { return function (v) { return step([n, v]); }; }\r\n    function step(op) {\r\n        if (f) throw new TypeError(\"Generator is already executing.\");\r\n        while (_) try {\r\n            if (f = 1, y && (t = y[op[0] & 2 ? \"return\" : op[0] ? \"throw\" : \"next\"]) && !(t = t.call(y, op[1])).done) return t;\r\n            if (y = 0, t) op = [0, t.value];\r\n            switch (op[0]) {\r\n                case 0: case 1: t = op; break;\r\n                case 4: _.label++; return { value: op[1], done: false };\r\n                case 5: _.label++; y = op[1]; op = [0]; continue;\r\n                case 7: op = _.ops.pop(); _.trys.pop(); continue;\r\n                default:\r\n                    if (!(t = _.trys, t = t.length > 0 && t[t.length - 1]) && (op[0] === 6 || op[0] === 2)) { _ = 0; continue; }\r\n                    if (op[0] === 3 && (!t || (op[1] > t[0] && op[1] < t[3]))) { _.label = op[1]; break; }\r\n                    if (op[0] === 6 && _.label < t[1]) { _.label = t[1]; t = op; break; }\r\n                    if (t && _.label < t[2]) { _.label = t[2]; _.ops.push(op); break; }\r\n                    if (t[2]) _.ops.pop();\r\n                    _.trys.pop(); continue;\r\n            }\r\n            op = body.call(thisArg, _);\r\n        } catch (e) { op = [6, e]; y = 0; } finally { f = t = 0; }\r\n        if (op[0] & 5) throw op[1]; return { value: op[0] ? op[1] : void 0, done: true };\r\n    }\r\n}\r\n\r\nexport function __exportStar(m, exports) {\r\n    for (var p in m) if (!exports.hasOwnProperty(p)) exports[p] = m[p];\r\n}\r\n\r\nexport function __values(o) {\r\n    var m = typeof Symbol === \"function\" && o[Symbol.iterator], i = 0;\r\n    if (m) return m.call(o);\r\n    return {\r\n        next: function () {\r\n            if (o && i >= o.length) o = void 0;\r\n            return { value: o && o[i++], done: !o };\r\n        }\r\n    };\r\n};\r\n\r\nexport function __read(o, n) {\r\n    var m = typeof Symbol === \"function\" && o[Symbol.iterator];\r\n    if (!m) return o;\r\n    var i = m.call(o), r, ar = [], e;\r\n    try {\r\n        while ((n === void 0 || n-- > 0) && !(r = i.next()).done) ar.push(r.value);\r\n    }\r\n    catch (error) { e = { error: error }; }\r\n    finally {\r\n        try {\r\n            if (r && !r.done && (m = i[\"return\"])) m.call(i);\r\n        }\r\n        finally { if (e) throw e.error; }\r\n    }\r\n    return ar;\r\n};\r\n\r\nexport function __spread() {\r\n    for (var ar = [], i = 0; i < arguments.length; i++)\r\n        ar = ar.concat(__read(arguments[i]));\r\n    return ar;\r\n};\r\n\r\nexport function __asyncGenerator(thisArg, _arguments, generator) {\r\n    if (!Symbol.asyncIterator) throw new TypeError(\"Symbol.asyncIterator is not defined.\");\r\n    var g = generator.apply(thisArg, _arguments || []), q = [], c, i;\r\n    return i = { next: verb(\"next\"), \"throw\": verb(\"throw\"), \"return\": verb(\"return\") }, i[Symbol.asyncIterator] = function () { return this; }, i;\r\n    function verb(n) { return function (v) { return new Promise(function (a, b) { q.push([n, v, a, b]), next(); }); }; }\r\n    function next() { if (!c && q.length) resume((c = q.shift())[0], c[1]); }\r\n    function resume(n, v) { try { step(g[n](v)); } catch (e) { settle(c[3], e); } }\r\n    function step(r) { r.done ? settle(c[2], r) : r.value[0] === \"yield\" ? settle(c[2], { value: r.value[1], done: false }) : Promise.resolve(r.value[1]).then(r.value[0] === \"delegate\" ? delegate : fulfill, reject); }\r\n    function delegate(r) { step(r.done ? r : { value: [\"yield\", r.value], done: false }); }\r\n    function fulfill(value) { resume(\"next\", value); }\r\n    function reject(value) { resume(\"throw\", value); }\r\n    function settle(f, v) { c = void 0, f(v), next(); }\r\n};\r\n\r\nexport function __asyncDelegator(o) {\r\n    var i = { next: verb(\"next\"), \"throw\": verb(\"throw\", function (e) { throw e; }), \"return\": verb(\"return\", function (v) { return { value: v, done: true }; }) };\r\n    return o = __asyncValues(o), i[Symbol.iterator] = function () { return this; }, i;\r\n    function verb(n, f) { return function (v) { return { value: [\"delegate\", (o[n] || f).call(o, v)], done: false }; }; }\r\n};\r\n\r\nexport function __asyncValues(o) {\r\n    if (!Symbol.asyncIterator) throw new TypeError(\"Symbol.asyncIterator is not defined.\");\r\n    var m = o[Symbol.asyncIterator];\r\n    return m ? m.call(o) : typeof __values === \"function\" ? __values(o) : o[Symbol.iterator]();\r\n};\n\n\n//////////////////\n// WEBPACK FOOTER\n// ./~/tslib/tslib.es6.js\n// module id = 1\n// module chunks = 0","\"use strict\";\r\nfunction __export(m) {\r\n    for (var p in m) if (!exports.hasOwnProperty(p)) exports[p] = m[p];\r\n}\r\nObject.defineProperty(exports, \"__esModule\", { value: true });\r\n__export(require(\"./IHALParser\"));\r\nvar diModule_1 = require(\"./diModule\");\r\nexports.commonDIModule = diModule_1.diModule;\r\nvar diModule_2 = require(\"./diModule\");\r\nexports.TYPES = diModule_2.TYPES;\r\n__export(require(\"./utility\"));\r\n__export(require(\"./modelMapper\"));\r\n__export(require(\"./baseRoute\"));\r\n__export(require(\"./halParser\"));\r\n__export(require(\"./contracts\"));\r\n\n\n\n//////////////////\n// WEBPACK FOOTER\n// ./src/common/index.ts\n// module id = 2\n// module chunks = 0","\"use strict\";\r\nfunction __export(m) {\r\n    for (var p in m) if (!exports.hasOwnProperty(p)) exports[p] = m[p];\r\n}\r\nObject.defineProperty(exports, \"__esModule\", { value: true });\r\n__export(require(\"./IStorageHandler\"));\r\n__export(require(\"./IEventHandler\"));\r\n__export(require(\"./IToken\"));\r\n__export(require(\"./ITokenHandler\"));\r\n__export(require(\"./IUser\"));\r\n__export(require(\"./IUserHandler\"));\r\n__export(require(\"./IDefaultStorageConfig\"));\r\n__export(require(\"./IBaasicOptions\"));\r\n__export(require(\"./IBaasicAppOptions\"));\r\n__export(require(\"./IAppOptions\"));\r\n__export(require(\"./IBaasicApp\"));\r\n__export(require(\"./diModule\"));\r\n\n\n\n//////////////////\n// WEBPACK FOOTER\n// ./src/core/contracts/index.ts\n// module id = 3\n// module chunks = 0","\"use strict\";\r\nfunction __export(m) {\r\n    for (var p in m) if (!exports.hasOwnProperty(p)) exports[p] = m[p];\r\n}\r\nObject.defineProperty(exports, \"__esModule\", { value: true });\r\nvar diModule_1 = require(\"./diModule\");\r\nexports.httpDIModule = diModule_1.diModule;\r\nvar diModule_2 = require(\"./diModule\");\r\nexports.httpTYPES = diModule_2.TYPES;\r\n__export(require(\"./IHttpHeaders\"));\r\n__export(require(\"./IHttpRequest\"));\r\n__export(require(\"./IHttpResponse\"));\r\n__export(require(\"./IHttpClient\"));\r\n__export(require(\"./baasicApiClient\"));\r\n\n\n\n//////////////////\n// WEBPACK FOOTER\n// ./src/httpApi/index.ts\n// module id = 4\n// module chunks = 0","\"use strict\";\r\nfunction __export(m) {\r\n    for (var p in m) if (!exports.hasOwnProperty(p)) exports[p] = m[p];\r\n}\r\nObject.defineProperty(exports, \"__esModule\", { value: true });\r\n__export(require(\"./diModule\"));\r\n__export(require(\"./commerceRoute\"));\r\n__export(require(\"./commerceClient\"));\r\n__export(require(\"./lookups\"));\r\n__export(require(\"./customer\"));\r\n__export(require(\"./invoice\"));\r\n__export(require(\"./paymentTransaction\"));\r\n__export(require(\"./product\"));\r\n\n\n\n//////////////////\n// WEBPACK FOOTER\n// ./src/modules/commerce/index.ts\n// module id = 5\n// module chunks = 0","\"use strict\";\r\nfunction __export(m) {\r\n    for (var p in m) if (!exports.hasOwnProperty(p)) exports[p] = m[p];\r\n}\r\nObject.defineProperty(exports, \"__esModule\", { value: true });\r\n__export(require(\"./diModule\"));\r\n__export(require(\"./alphabet\"));\r\n__export(require(\"./constants\"));\r\n__export(require(\"./articleUtility\"));\r\n__export(require(\"./articleClient\"));\r\n__export(require(\"./articleSubscriptions\"));\r\n__export(require(\"./articleRatings\"));\r\n__export(require(\"./articleTags\"));\r\n__export(require(\"./articleComments\"));\r\n__export(require(\"./articleFiles\"));\r\n__export(require(\"./articleACLRoute\"));\r\n__export(require(\"./articleACLClient\"));\r\n__export(require(\"./articleCommentRepliesRoute\"));\r\n__export(require(\"./articleCommentRepliesClient\"));\r\n__export(require(\"./articleCommentsRoute\"));\r\n__export(require(\"./articleCommentsClient\"));\r\n__export(require(\"./articleFilesBatchRoute\"));\r\n__export(require(\"./articleFilesBatchClient\"));\r\n__export(require(\"./articleFilesStreamsRoute\"));\r\n__export(require(\"./articleFilesStreamsClient\"));\r\n__export(require(\"./articleFilesRoute\"));\r\n__export(require(\"./articleFilesClient\"));\r\n__export(require(\"./articleRatingsRoute\"));\r\n__export(require(\"./articleRatingsClient\"));\r\n__export(require(\"./articleSettingsRoute\"));\r\n__export(require(\"./articleSettingsClient\"));\r\n__export(require(\"./articleTagsSubscriptionsRoute\"));\r\n__export(require(\"./articleTagsSubscriptionsClient\"));\r\n__export(require(\"./articleTagsRoute\"));\r\n__export(require(\"./articleTagsClient\"));\r\n__export(require(\"./articleSubscriptionsRoute\"));\r\n__export(require(\"./articleSubscriptionsClient\"));\r\n__export(require(\"./articleRoute\"));\r\n__export(require(\"./articleClient\"));\r\n__export(require(\"./root\"));\r\n\n\n\n//////////////////\n// WEBPACK FOOTER\n// ./src/modules/article/index.ts\n// module id = 6\n// module chunks = 0","\"use strict\";\r\nfunction __export(m) {\r\n    for (var p in m) if (!exports.hasOwnProperty(p)) exports[p] = m[p];\r\n}\r\nObject.defineProperty(exports, \"__esModule\", { value: true });\r\n__export(require(\"./diModule\"));\r\n__export(require(\"./notificationsPublishBatchRoute\"));\r\n__export(require(\"./notificationsPublishBatchClient\"));\r\n__export(require(\"./notificationsPublishRoute\"));\r\n__export(require(\"./notificationsPublishClient\"));\r\n__export(require(\"./notificationsRegistrationsAnonymousBatchRoute\"));\r\n__export(require(\"./notificationsRegistrationsAnonymousBatchClient\"));\r\n__export(require(\"./notificationsRegistrationsAnonymousRoute\"));\r\n__export(require(\"./notificationsRegistrationsAnonymousClient\"));\r\n__export(require(\"./notificationsRegistrationsUsersBatchRoute\"));\r\n__export(require(\"./notificationsRegistrationsUsersBatchClient\"));\r\n__export(require(\"./notificationsRegistrationsUsersRoute\"));\r\n__export(require(\"./notificationsRegistrationsUsersClient\"));\r\n__export(require(\"./notificationsRegistrationsRoute\"));\r\n__export(require(\"./notificationsRegistrationsClient\"));\r\n__export(require(\"./notificationsSubscriptionsUsersBatchRoute\"));\r\n__export(require(\"./notificationsSubscriptionsUsersBatchClient\"));\r\n__export(require(\"./notificationsSubscriptionsAnonymousBatchRoute\"));\r\n__export(require(\"./notificationsSubscriptionsAnonymousBatchClient\"));\r\n__export(require(\"./notificationsSubscriptionsAnonymousRoute\"));\r\n__export(require(\"./notificationsSubscriptionsAnonymousClient\"));\r\n__export(require(\"./notificationsSubscriptionsUsersRoute\"));\r\n__export(require(\"./notificationsSubscriptionsUsersClient\"));\r\n__export(require(\"./notificationsSubscriptionsRoute\"));\r\n__export(require(\"./notificationsSubscriptionsClient\"));\r\n__export(require(\"./notificationsSettingsRoute\"));\r\n__export(require(\"./notificationsSettingsClient\"));\r\n__export(require(\"./notificationsRoute\"));\r\n__export(require(\"./notificationsClient\"));\r\n\n\n\n//////////////////\n// WEBPACK FOOTER\n// ./src/modules/notifications/index.ts\n// module id = 7\n// module chunks = 0","\"use strict\";\r\nfunction __export(m) {\r\n    for (var p in m) if (!exports.hasOwnProperty(p)) exports[p] = m[p];\r\n}\r\nObject.defineProperty(exports, \"__esModule\", { value: true });\r\n__export(require(\"./diModule\"));\r\n__export(require(\"./companyBatchRoute\"));\r\n__export(require(\"./companyBatchClient\"));\r\n__export(require(\"./companyRoute\"));\r\n__export(require(\"./companyClient\"));\r\n__export(require(\"./organizationBatchRoute\"));\r\n__export(require(\"./organizationBatchClient\"));\r\n__export(require(\"./organizationRoute\"));\r\n__export(require(\"./organizationClient\"));\r\n__export(require(\"./skillBatchRoute\"));\r\n__export(require(\"./skillBatchClient\"));\r\n__export(require(\"./skillRoute\"));\r\n__export(require(\"./skillClient\"));\r\n__export(require(\"./userEducationRoute\"));\r\n__export(require(\"./userEducationClient\"));\r\n__export(require(\"./userProfileAvatarStreamsRoute\"));\r\n__export(require(\"./userProfileAvatarStreamsClient\"));\r\n__export(require(\"./userProfileAvatarRoute\"));\r\n__export(require(\"./userProfileAvatarClient\"));\r\n__export(require(\"./userProfileACLRoute\"));\r\n__export(require(\"./userProfileACLClient\"));\r\n__export(require(\"./userProfileRoute\"));\r\n__export(require(\"./userProfileClient\"));\r\n__export(require(\"./userSkillRoute\"));\r\n__export(require(\"./userSkillClient\"));\r\n__export(require(\"./userWorkRoute\"));\r\n__export(require(\"./userWorkClient\"));\r\n__export(require(\"./root\"));\r\n\n\n\n//////////////////\n// WEBPACK FOOTER\n// ./src/modules/userProfile/index.ts\n// module id = 8\n// module chunks = 0","\"use strict\";\nexports.NAMED_TAG = \"named\";\nexports.NAME_TAG = \"name\";\nexports.UNMANAGED_TAG = \"unmanaged\";\nexports.OPTIONAL_TAG = \"optional\";\nexports.INJECT_TAG = \"inject\";\nexports.MULTI_INJECT_TAG = \"multi_inject\";\nexports.TAGGED = \"inversify:tagged\";\nexports.TAGGED_PROP = \"inversify:tagged_props\";\nexports.PARAM_TYPES = \"inversify:paramtypes\";\nexports.DESIGN_PARAM_TYPES = \"design:paramtypes\";\n\n\n\n//////////////////\n// WEBPACK FOOTER\n// ./~/inversify/lib/constants/metadata_keys.js\n// module id = 9\n// module chunks = 0","\"use strict\";\r\nfunction __export(m) {\r\n    for (var p in m) if (!exports.hasOwnProperty(p)) exports[p] = m[p];\r\n}\r\nObject.defineProperty(exports, \"__esModule\", { value: true });\r\n__export(require(\"./diModule\"));\r\n__export(require(\"./loginSocialRoute\"));\r\n__export(require(\"./loginSocialClient\"));\r\n__export(require(\"./loginRoute\"));\r\n__export(require(\"./loginClient\"));\r\n__export(require(\"./passwordRecoveryRoute\"));\r\n__export(require(\"./passwordRecoveryClient\"));\r\n__export(require(\"./registerRoute\"));\r\n__export(require(\"./registerClient\"));\r\n__export(require(\"./roleRoute\"));\r\n__export(require(\"./roleClient\"));\r\n__export(require(\"./userSocialLoginRoute\"));\r\n__export(require(\"./userRoute\"));\r\n__export(require(\"./userSocialLoginClient\"));\r\n__export(require(\"./userClient\"));\r\n__export(require(\"./permissionRoute\"));\r\n__export(require(\"./permissionClient\"));\r\n__export(require(\"./lookupRoute\"));\r\n__export(require(\"./lookupClient\"));\r\n__export(require(\"./root\"));\r\n\n\n\n//////////////////\n// WEBPACK FOOTER\n// ./src/modules/membership/index.ts\n// module id = 10\n// module chunks = 0","\"use strict\";\r\nfunction __export(m) {\r\n    for (var p in m) if (!exports.hasOwnProperty(p)) exports[p] = m[p];\r\n}\r\nObject.defineProperty(exports, \"__esModule\", { value: true });\r\n__export(require(\"./diModule\"));\r\n__export(require(\"./meteringCategoryBatchRoute\"));\r\n__export(require(\"./meteringCategoryBatchClient\"));\r\n__export(require(\"./meteringCategoryRoute\"));\r\n__export(require(\"./meteringCategoryClient\"));\r\n__export(require(\"./meteringBatchRoute\"));\r\n__export(require(\"./meteringBatchClient\"));\r\n__export(require(\"./meteringStatisticsRoute\"));\r\n__export(require(\"./meteringStatisticsClient\"));\r\n__export(require(\"./meteringACLRoute\"));\r\n__export(require(\"./meteringACLClient\"));\r\n__export(require(\"./meteringRoute\"));\r\n__export(require(\"./meteringClient\"));\r\n__export(require(\"./meteringSettingsRoute\"));\r\n__export(require(\"./meteringSettingsClient\"));\r\n\n\n\n//////////////////\n// WEBPACK FOOTER\n// ./src/modules/metering/index.ts\n// module id = 11\n// module chunks = 0","\"use strict\";\nvar METADATA_KEY = require(\"../constants/metadata_keys\");\nvar Metadata = (function () {\n    function Metadata(key, value) {\n        this.key = key;\n        this.value = value;\n    }\n    Metadata.prototype.toString = function () {\n        if (this.key === METADATA_KEY.NAMED_TAG) {\n            return \"named: \" + this.value.toString() + \" \";\n        }\n        else {\n            return \"tagged: { key:\" + this.key.toString() + \", value: \" + this.value + \" }\";\n        }\n    };\n    return Metadata;\n}());\nexports.Metadata = Metadata;\n\n\n\n//////////////////\n// WEBPACK FOOTER\n// ./~/inversify/lib/planning/metadata.js\n// module id = 12\n// module chunks = 0","\"use strict\";\nexports.DUPLICATED_INJECTABLE_DECORATOR = \"Cannot apply @injectable decorator multiple times.\";\nexports.DUPLICATED_METADATA = \"Metadata key was used more than once in a parameter:\";\nexports.NULL_ARGUMENT = \"NULL argument\";\nexports.KEY_NOT_FOUND = \"Key Not Found\";\nexports.AMBIGUOUS_MATCH = \"Ambiguous match found for serviceIdentifier:\";\nexports.CANNOT_UNBIND = \"Could not unbind serviceIdentifier:\";\nexports.NOT_REGISTERED = \"No matching bindings found for serviceIdentifier:\";\nexports.MISSING_INJECTABLE_ANNOTATION = \"Missing required @injectable annotation in:\";\nexports.MISSING_INJECT_ANNOTATION = \"Missing required @inject or @multiInject annotation in:\";\nexports.CIRCULAR_DEPENDENCY = \"Circular dependency found:\";\nexports.NOT_IMPLEMENTED = \"Sorry, this feature is not fully implemented yet.\";\nexports.INVALID_BINDING_TYPE = \"Invalid binding type:\";\nexports.NO_MORE_SNAPSHOTS_AVAILABLE = \"No snapshot available to restore.\";\nexports.INVALID_MIDDLEWARE_RETURN = \"Invalid return type in middleware. Middleware must return!\";\nexports.INVALID_FUNCTION_BINDING = \"Value provided to function binding must be a function!\";\nexports.INVALID_TO_SELF_VALUE = \"The toSelf function can only be applied when a constructor is \" +\n    \"used as service identifier\";\nexports.INVALID_DECORATOR_OPERATION = \"The @inject @multiInject @tagged and @named decorators \" +\n    \"must be applied to the parameters of a class constructor or a class property.\";\nexports.ARGUMENTS_LENGTH_MISMATCH_1 = \"The number of constructor arguments in the derived class \";\nexports.ARGUMENTS_LENGTH_MISMATCH_2 = \" must be >= than the number of constructor arguments of its base class.\";\nexports.CONTAINER_OPTIONS_MUST_BE_AN_OBJECT = \"Invalid Container constructor argument. Container options \" +\n    \"must be an object.\";\nexports.CONTAINER_OPTIONS_INVALID_DEFAULT_SCOPE = \"Invalid Container option. Default scope must \" +\n    \"be a string ('singleton' or 'transient').\";\nexports.INVALID_BINDING_PROPERTY = \"TODO\";\n\n\n\n//////////////////\n// WEBPACK FOOTER\n// ./~/inversify/lib/constants/error_msgs.js\n// module id = 13\n// module chunks = 0","\"use strict\";\nvar METADATA_KEY = require(\"../constants/metadata_keys\");\nvar ERROR_MSGS = require(\"../constants/error_msgs\");\nfunction tagParameter(annotationTarget, propertyName, parameterIndex, metadata) {\n    var metadataKey = METADATA_KEY.TAGGED;\n    _tagParameterOrProperty(metadataKey, annotationTarget, propertyName, metadata, parameterIndex);\n}\nexports.tagParameter = tagParameter;\nfunction tagProperty(annotationTarget, propertyName, metadata) {\n    var metadataKey = METADATA_KEY.TAGGED_PROP;\n    _tagParameterOrProperty(metadataKey, annotationTarget.constructor, propertyName, metadata);\n}\nexports.tagProperty = tagProperty;\nfunction _tagParameterOrProperty(metadataKey, annotationTarget, propertyName, metadata, parameterIndex) {\n    var paramsOrPropertiesMetadata = {};\n    var isParameterDecorator = (typeof parameterIndex === \"number\");\n    var key = (parameterIndex !== undefined && isParameterDecorator) ? parameterIndex.toString() : propertyName;\n    if (isParameterDecorator === true && propertyName !== undefined) {\n        throw new Error(ERROR_MSGS.INVALID_DECORATOR_OPERATION);\n    }\n    if (Reflect.hasOwnMetadata(metadataKey, annotationTarget) === true) {\n        paramsOrPropertiesMetadata = Reflect.getMetadata(metadataKey, annotationTarget);\n    }\n    var paramOrPropertyMetadata = paramsOrPropertiesMetadata[key];\n    if (Array.isArray(paramOrPropertyMetadata) !== true) {\n        paramOrPropertyMetadata = [];\n    }\n    else {\n        for (var i = 0; i < paramOrPropertyMetadata.length; i++) {\n            var m = paramOrPropertyMetadata[i];\n            if (m.key === metadata.key) {\n                throw new Error(ERROR_MSGS.DUPLICATED_METADATA + \" \" + m.key);\n            }\n        }\n    }\n    paramOrPropertyMetadata.push(metadata);\n    paramsOrPropertiesMetadata[key] = paramOrPropertyMetadata;\n    Reflect.defineMetadata(metadataKey, paramsOrPropertiesMetadata, annotationTarget);\n}\nfunction _decorate(decorators, target) {\n    Reflect.decorate(decorators, target);\n}\nfunction _param(paramIndex, decorator) {\n    return function (target, key) { decorator(target, key, paramIndex); };\n}\nfunction decorate(decorator, target, parameterIndex) {\n    if (typeof parameterIndex === \"number\") {\n        _decorate([_param(parameterIndex, decorator)], target);\n    }\n    else {\n        _decorate([decorator], target);\n    }\n}\nexports.decorate = decorate;\n\n\n\n//////////////////\n// WEBPACK FOOTER\n// ./~/inversify/lib/annotation/decorator_utils.js\n// module id = 14\n// module chunks = 0","\"use strict\";\nvar BindingScopeEnum = {\n    Singleton: \"Singleton\",\n    Transient: \"Transient\"\n};\nexports.BindingScopeEnum = BindingScopeEnum;\nvar BindingTypeEnum = {\n    ConstantValue: \"ConstantValue\",\n    Constructor: \"Constructor\",\n    DynamicValue: \"DynamicValue\",\n    Factory: \"Factory\",\n    Function: \"Function\",\n    Instance: \"Instance\",\n    Invalid: \"Invalid\",\n    Provider: \"Provider\"\n};\nexports.BindingTypeEnum = BindingTypeEnum;\nvar TargetTypeEnum = {\n    ClassProperty: \"ClassProperty\",\n    ConstructorArgument: \"ConstructorArgument\",\n    Variable: \"Variable\"\n};\nexports.TargetTypeEnum = TargetTypeEnum;\n\n\n\n//////////////////\n// WEBPACK FOOTER\n// ./~/inversify/lib/constants/literal_types.js\n// module id = 15\n// module chunks = 0","\"use strict\";\r\nfunction __export(m) {\r\n    for (var p in m) if (!exports.hasOwnProperty(p)) exports[p] = m[p];\r\n}\r\nObject.defineProperty(exports, \"__esModule\", { value: true });\r\n__export(require(\"./diModule\"));\r\n__export(require(\"./MediaVaultStreamsRoute\"));\r\n__export(require(\"./MediaVaultStreamsClient\"));\r\n__export(require(\"./MediaVaultBatchRoute\"));\r\n__export(require(\"./MediaVaultBatchClient\"));\r\n__export(require(\"./MediaVaultSettingsRoute\"));\r\n__export(require(\"./MediaVaultSettingsClient\"));\r\n__export(require(\"./MediaVaultProcessingProviderSettingsRoute\"));\r\n__export(require(\"./MediaVaultProcessingProviderSettingsClient\"));\r\n__export(require(\"./MediaVaultRoute\"));\r\n__export(require(\"./MediaVaultClient\"));\r\n\n\n\n//////////////////\n// WEBPACK FOOTER\n// ./src/modules/mediaVault/index.ts\n// module id = 16\n// module chunks = 0","\"use strict\";\nfunction guid() {\n    function s4() {\n        return Math.floor((1 + Math.random()) * 0x10000)\n            .toString(16)\n            .substring(1);\n    }\n    return s4() + s4() + \"-\" + s4() + \"-\" + s4() + \"-\" +\n        s4() + \"-\" + s4() + s4() + s4();\n}\nexports.guid = guid;\n\n\n\n//////////////////\n// WEBPACK FOOTER\n// ./~/inversify/lib/utils/guid.js\n// module id = 17\n// module chunks = 0","\"use strict\";\r\nfunction __export(m) {\r\n    for (var p in m) if (!exports.hasOwnProperty(p)) exports[p] = m[p];\r\n}\r\nObject.defineProperty(exports, \"__esModule\", { value: true });\r\n__export(require(\"./diModule\"));\r\n__export(require(\"./filesStreamsRoute\"));\r\n__export(require(\"./filesStreamsClient\"));\r\n__export(require(\"./filesBatchRoute\"));\r\n__export(require(\"./filesBatchClient\"));\r\n__export(require(\"./filesACLRoute\"));\r\n__export(require(\"./filesACLClient\"));\r\n__export(require(\"./filesRoute\"));\r\n__export(require(\"./filesClient\"));\r\n\n\n\n//////////////////\n// WEBPACK FOOTER\n// ./src/modules/file/index.ts\n// module id = 18\n// module chunks = 0","\"use strict\";\r\nfunction __export(m) {\r\n    for (var p in m) if (!exports.hasOwnProperty(p)) exports[p] = m[p];\r\n}\r\nObject.defineProperty(exports, \"__esModule\", { value: true });\r\n__export(require(\"./diModule\"));\r\n__export(require(\"./dynamicSchemaRoute\"));\r\n__export(require(\"./dynamicSchemaClient\"));\r\n__export(require(\"./dynamicResourceACLRoute\"));\r\n__export(require(\"./dynamicResourceACLClient\"));\r\n__export(require(\"./dynamicResourceRoute\"));\r\n__export(require(\"./dynamicResourceClient\"));\r\n\n\n\n//////////////////\n// WEBPACK FOOTER\n// ./src/modules/dynamicResource/index.ts\n// module id = 19\n// module chunks = 0","\"use strict\";\nvar ERROR_MSGS = require(\"../constants/error_msgs\");\nfunction getServiceIdentifierAsString(serviceIdentifier) {\n    if (typeof serviceIdentifier === \"function\") {\n        var _serviceIdentifier = serviceIdentifier;\n        return _serviceIdentifier.name;\n    }\n    else if (typeof serviceIdentifier === \"symbol\") {\n        return serviceIdentifier.toString();\n    }\n    else {\n        var _serviceIdentifier = serviceIdentifier;\n        return _serviceIdentifier;\n    }\n}\nexports.getServiceIdentifierAsString = getServiceIdentifierAsString;\nfunction listRegisteredBindingsForServiceIdentifier(container, serviceIdentifier, getBindings) {\n    var registeredBindingsList = \"\";\n    var registeredBindings = getBindings(container, serviceIdentifier);\n    if (registeredBindings.length !== 0) {\n        registeredBindingsList = \"\\nRegistered bindings:\";\n        registeredBindings.forEach(function (binding) {\n            var name = \"Object\";\n            if (binding.implementationType !== null) {\n                name = getFunctionName(binding.implementationType);\n            }\n            registeredBindingsList = registeredBindingsList + \"\\n \" + name;\n            if (binding.constraint.metaData) {\n                registeredBindingsList = registeredBindingsList + \" - \" + binding.constraint.metaData;\n            }\n        });\n    }\n    return registeredBindingsList;\n}\nexports.listRegisteredBindingsForServiceIdentifier = listRegisteredBindingsForServiceIdentifier;\nfunction circularDependencyToException(request, previousServiceIdentifiers) {\n    if (previousServiceIdentifiers === void 0) { previousServiceIdentifiers = []; }\n    var parentServiceIdentifier = getServiceIdentifierAsString(request.serviceIdentifier);\n    previousServiceIdentifiers.push(parentServiceIdentifier);\n    request.childRequests.forEach(function (childRequest) {\n        var childServiceIdentifier = getServiceIdentifierAsString(childRequest.serviceIdentifier);\n        if (previousServiceIdentifiers.indexOf(childServiceIdentifier) === -1) {\n            if (childRequest.childRequests.length > 0) {\n                circularDependencyToException(childRequest, previousServiceIdentifiers);\n            }\n            else {\n                previousServiceIdentifiers.push(childServiceIdentifier);\n            }\n        }\n        else {\n            previousServiceIdentifiers.push(childServiceIdentifier);\n            var services = previousServiceIdentifiers.reduce(function (prev, curr) {\n                return (prev !== \"\") ? prev + \" -> \" + curr : \"\" + curr;\n            }, \"\");\n            throw new Error(ERROR_MSGS.CIRCULAR_DEPENDENCY + \" \" + services);\n        }\n    });\n}\nexports.circularDependencyToException = circularDependencyToException;\nfunction listMetadataForTarget(serviceIdentifierString, target) {\n    if (target.isTagged() || target.isNamed()) {\n        var m_1 = \"\";\n        var namedTag = target.getNamedTag();\n        var otherTags = target.getCustomTags();\n        if (namedTag !== null) {\n            m_1 += namedTag.toString() + \"\\n\";\n        }\n        if (otherTags !== null) {\n            otherTags.forEach(function (tag) {\n                m_1 += tag.toString() + \"\\n\";\n            });\n        }\n        return \" \" + serviceIdentifierString + \"\\n \" + serviceIdentifierString + \" - \" + m_1;\n    }\n    else {\n        return \" \" + serviceIdentifierString;\n    }\n}\nexports.listMetadataForTarget = listMetadataForTarget;\nfunction getFunctionName(v) {\n    if (v.name) {\n        return v.name;\n    }\n    else {\n        var name_1 = v.toString();\n        var match = name_1.match(/^function\\s*([^\\s(]+)/);\n        return match ? match[1] : \"Anonymous function: \" + name_1;\n    }\n}\nexports.getFunctionName = getFunctionName;\n\n\n\n//////////////////\n// WEBPACK FOOTER\n// ./~/inversify/lib/utils/serialization.js\n// module id = 20\n// module chunks = 0","\"use strict\";\r\nfunction __export(m) {\r\n    for (var p in m) if (!exports.hasOwnProperty(p)) exports[p] = m[p];\r\n}\r\nObject.defineProperty(exports, \"__esModule\", { value: true });\r\n__export(require(\"./diModule\"));\r\n__export(require(\"./templatingBatchRoute\"));\r\n__export(require(\"./templatingBatchClient\"));\r\n__export(require(\"./templatingRoute\"));\r\n__export(require(\"./templatingClient\"));\r\n\n\n\n//////////////////\n// WEBPACK FOOTER\n// ./src/modules/templating/index.ts\n// module id = 21\n// module chunks = 0","\"use strict\";\r\nfunction __export(m) {\r\n    for (var p in m) if (!exports.hasOwnProperty(p)) exports[p] = m[p];\r\n}\r\nObject.defineProperty(exports, \"__esModule\", { value: true });\r\n__export(require(\"./diModule\"));\r\n__export(require(\"./valueSetItemRoute\"));\r\n__export(require(\"./valueSetItemClient\"));\r\n__export(require(\"./valueSetRoute\"));\r\n__export(require(\"./valueSetClient\"));\r\n\n\n\n//////////////////\n// WEBPACK FOOTER\n// ./src/modules/valueSet/index.ts\n// module id = 22\n// module chunks = 0","\"use strict\";\nvar binding_when_syntax_1 = require(\"./binding_when_syntax\");\nvar BindingOnSyntax = (function () {\n    function BindingOnSyntax(binding) {\n        this._binding = binding;\n    }\n    BindingOnSyntax.prototype.onActivation = function (handler) {\n        this._binding.onActivation = handler;\n        return new binding_when_syntax_1.BindingWhenSyntax(this._binding);\n    };\n    return BindingOnSyntax;\n}());\nexports.BindingOnSyntax = BindingOnSyntax;\n\n\n\n//////////////////\n// WEBPACK FOOTER\n// ./~/inversify/lib/syntax/binding_on_syntax.js\n// module id = 23\n// module chunks = 0","\"use strict\";\nvar binding_on_syntax_1 = require(\"./binding_on_syntax\");\nvar constraint_helpers_1 = require(\"./constraint_helpers\");\nvar BindingWhenSyntax = (function () {\n    function BindingWhenSyntax(binding) {\n        this._binding = binding;\n    }\n    BindingWhenSyntax.prototype.when = function (constraint) {\n        this._binding.constraint = constraint;\n        return new binding_on_syntax_1.BindingOnSyntax(this._binding);\n    };\n    BindingWhenSyntax.prototype.whenTargetNamed = function (name) {\n        this._binding.constraint = constraint_helpers_1.namedConstraint(name);\n        return new binding_on_syntax_1.BindingOnSyntax(this._binding);\n    };\n    BindingWhenSyntax.prototype.whenTargetIsDefault = function () {\n        this._binding.constraint = function (request) {\n            var targetIsDefault = (request.target !== null) &&\n                (request.target.isNamed() === false) &&\n                (request.target.isTagged() === false);\n            return targetIsDefault;\n        };\n        return new binding_on_syntax_1.BindingOnSyntax(this._binding);\n    };\n    BindingWhenSyntax.prototype.whenTargetTagged = function (tag, value) {\n        this._binding.constraint = constraint_helpers_1.taggedConstraint(tag)(value);\n        return new binding_on_syntax_1.BindingOnSyntax(this._binding);\n    };\n    BindingWhenSyntax.prototype.whenInjectedInto = function (parent) {\n        this._binding.constraint = function (request) {\n            return constraint_helpers_1.typeConstraint(parent)(request.parentRequest);\n        };\n        return new binding_on_syntax_1.BindingOnSyntax(this._binding);\n    };\n    BindingWhenSyntax.prototype.whenParentNamed = function (name) {\n        this._binding.constraint = function (request) {\n            return constraint_helpers_1.namedConstraint(name)(request.parentRequest);\n        };\n        return new binding_on_syntax_1.BindingOnSyntax(this._binding);\n    };\n    BindingWhenSyntax.prototype.whenParentTagged = function (tag, value) {\n        this._binding.constraint = function (request) {\n            return constraint_helpers_1.taggedConstraint(tag)(value)(request.parentRequest);\n        };\n        return new binding_on_syntax_1.BindingOnSyntax(this._binding);\n    };\n    BindingWhenSyntax.prototype.whenAnyAncestorIs = function (ancestor) {\n        this._binding.constraint = function (request) {\n            return constraint_helpers_1.traverseAncerstors(request, constraint_helpers_1.typeConstraint(ancestor));\n        };\n        return new binding_on_syntax_1.BindingOnSyntax(this._binding);\n    };\n    BindingWhenSyntax.prototype.whenNoAncestorIs = function (ancestor) {\n        this._binding.constraint = function (request) {\n            return !constraint_helpers_1.traverseAncerstors(request, constraint_helpers_1.typeConstraint(ancestor));\n        };\n        return new binding_on_syntax_1.BindingOnSyntax(this._binding);\n    };\n    BindingWhenSyntax.prototype.whenAnyAncestorNamed = function (name) {\n        this._binding.constraint = function (request) {\n            return constraint_helpers_1.traverseAncerstors(request, constraint_helpers_1.namedConstraint(name));\n        };\n        return new binding_on_syntax_1.BindingOnSyntax(this._binding);\n    };\n    BindingWhenSyntax.prototype.whenNoAncestorNamed = function (name) {\n        this._binding.constraint = function (request) {\n            return !constraint_helpers_1.traverseAncerstors(request, constraint_helpers_1.namedConstraint(name));\n        };\n        return new binding_on_syntax_1.BindingOnSyntax(this._binding);\n    };\n    BindingWhenSyntax.prototype.whenAnyAncestorTagged = function (tag, value) {\n        this._binding.constraint = function (request) {\n            return constraint_helpers_1.traverseAncerstors(request, constraint_helpers_1.taggedConstraint(tag)(value));\n        };\n        return new binding_on_syntax_1.BindingOnSyntax(this._binding);\n    };\n    BindingWhenSyntax.prototype.whenNoAncestorTagged = function (tag, value) {\n        this._binding.constraint = function (request) {\n            return !constraint_helpers_1.traverseAncerstors(request, constraint_helpers_1.taggedConstraint(tag)(value));\n        };\n        return new binding_on_syntax_1.BindingOnSyntax(this._binding);\n    };\n    BindingWhenSyntax.prototype.whenAnyAncestorMatches = function (constraint) {\n        this._binding.constraint = function (request) {\n            return constraint_helpers_1.traverseAncerstors(request, constraint);\n        };\n        return new binding_on_syntax_1.BindingOnSyntax(this._binding);\n    };\n    BindingWhenSyntax.prototype.whenNoAncestorMatches = function (constraint) {\n        this._binding.constraint = function (request) {\n            return !constraint_helpers_1.traverseAncerstors(request, constraint);\n        };\n        return new binding_on_syntax_1.BindingOnSyntax(this._binding);\n    };\n    return BindingWhenSyntax;\n}());\nexports.BindingWhenSyntax = BindingWhenSyntax;\n\n\n\n//////////////////\n// WEBPACK FOOTER\n// ./~/inversify/lib/syntax/binding_when_syntax.js\n// module id = 24\n// module chunks = 0","\"use strict\";\r\nfunction __export(m) {\r\n    for (var p in m) if (!exports.hasOwnProperty(p)) exports[p] = m[p];\r\n}\r\nObject.defineProperty(exports, \"__esModule\", { value: true });\r\n__export(require(\"./diModule\"));\r\n__export(require(\"./applicationSettingsRoute\"));\r\n__export(require(\"./applicationSettingsClient\"));\r\n\n\n\n//////////////////\n// WEBPACK FOOTER\n// ./src/modules/applicationSettings/index.ts\n// module id = 25\n// module chunks = 0","\"use strict\";\r\nfunction __export(m) {\r\n    for (var p in m) if (!exports.hasOwnProperty(p)) exports[p] = m[p];\r\n}\r\nObject.defineProperty(exports, \"__esModule\", { value: true });\r\n__export(require(\"./diModule\"));\r\n__export(require(\"./keyValueRoute\"));\r\n__export(require(\"./keyValueClient\"));\r\n\n\n\n//////////////////\n// WEBPACK FOOTER\n// ./src/modules/keyValue/index.ts\n// module id = 26\n// module chunks = 0","\"use strict\";\nvar metadata_1 = require(\"../planning/metadata\");\nvar queryable_string_1 = require(\"./queryable_string\");\nvar guid_1 = require(\"../utils/guid\");\nvar METADATA_KEY = require(\"../constants/metadata_keys\");\nvar Target = (function () {\n    function Target(type, name, serviceIdentifier, namedOrTagged) {\n        this.guid = guid_1.guid();\n        this.type = type;\n        this.serviceIdentifier = serviceIdentifier;\n        this.name = new queryable_string_1.QueryableString(name || \"\");\n        this.metadata = new Array();\n        var metadataItem = null;\n        if (typeof namedOrTagged === \"string\") {\n            metadataItem = new metadata_1.Metadata(METADATA_KEY.NAMED_TAG, namedOrTagged);\n        }\n        else if (namedOrTagged instanceof metadata_1.Metadata) {\n            metadataItem = namedOrTagged;\n        }\n        if (metadataItem !== null) {\n            this.metadata.push(metadataItem);\n        }\n    }\n    Target.prototype.hasTag = function (key) {\n        for (var i = 0; i < this.metadata.length; i++) {\n            var m = this.metadata[i];\n            if (m.key === key) {\n                return true;\n            }\n        }\n        return false;\n    };\n    Target.prototype.isArray = function () {\n        return this.hasTag(METADATA_KEY.MULTI_INJECT_TAG);\n    };\n    Target.prototype.matchesArray = function (name) {\n        return this.matchesTag(METADATA_KEY.MULTI_INJECT_TAG)(name);\n    };\n    Target.prototype.isNamed = function () {\n        return this.hasTag(METADATA_KEY.NAMED_TAG);\n    };\n    Target.prototype.isTagged = function () {\n        return this.metadata.some(function (m) {\n            return (m.key !== METADATA_KEY.INJECT_TAG) &&\n                (m.key !== METADATA_KEY.MULTI_INJECT_TAG) &&\n                (m.key !== METADATA_KEY.NAME_TAG) &&\n                (m.key !== METADATA_KEY.UNMANAGED_TAG) &&\n                (m.key !== METADATA_KEY.NAMED_TAG);\n        });\n    };\n    Target.prototype.isOptional = function () {\n        return this.matchesTag(METADATA_KEY.OPTIONAL_TAG)(true);\n    };\n    Target.prototype.getNamedTag = function () {\n        if (this.isNamed()) {\n            return this.metadata.filter(function (m) { return m.key === METADATA_KEY.NAMED_TAG; })[0];\n        }\n        return null;\n    };\n    Target.prototype.getCustomTags = function () {\n        if (this.isTagged()) {\n            return this.metadata.filter(function (m) {\n                return (m.key !== METADATA_KEY.INJECT_TAG) &&\n                    (m.key !== METADATA_KEY.MULTI_INJECT_TAG) &&\n                    (m.key !== METADATA_KEY.NAME_TAG) &&\n                    (m.key !== METADATA_KEY.UNMANAGED_TAG) &&\n                    (m.key !== METADATA_KEY.NAMED_TAG);\n            });\n        }\n        return null;\n    };\n    Target.prototype.matchesNamedTag = function (name) {\n        return this.matchesTag(METADATA_KEY.NAMED_TAG)(name);\n    };\n    Target.prototype.matchesTag = function (key) {\n        var _this = this;\n        return function (value) {\n            for (var i = 0; i < _this.metadata.length; i++) {\n                var m = _this.metadata[i];\n                if (m.key === key && m.value === value) {\n                    return true;\n                }\n            }\n            return false;\n        };\n    };\n    return Target;\n}());\nexports.Target = Target;\n\n\n\n//////////////////\n// WEBPACK FOOTER\n// ./~/inversify/lib/planning/target.js\n// module id = 27\n// module chunks = 0","\"use strict\";\nvar binding_when_syntax_1 = require(\"./binding_when_syntax\");\nvar binding_on_syntax_1 = require(\"./binding_on_syntax\");\nvar BindingWhenOnSyntax = (function () {\n    function BindingWhenOnSyntax(binding) {\n        this._binding = binding;\n        this._bindingWhenSyntax = new binding_when_syntax_1.BindingWhenSyntax(this._binding);\n        this._bindingOnSyntax = new binding_on_syntax_1.BindingOnSyntax(this._binding);\n    }\n    BindingWhenOnSyntax.prototype.when = function (constraint) {\n        return this._bindingWhenSyntax.when(constraint);\n    };\n    BindingWhenOnSyntax.prototype.whenTargetNamed = function (name) {\n        return this._bindingWhenSyntax.whenTargetNamed(name);\n    };\n    BindingWhenOnSyntax.prototype.whenTargetIsDefault = function () {\n        return this._bindingWhenSyntax.whenTargetIsDefault();\n    };\n    BindingWhenOnSyntax.prototype.whenTargetTagged = function (tag, value) {\n        return this._bindingWhenSyntax.whenTargetTagged(tag, value);\n    };\n    BindingWhenOnSyntax.prototype.whenInjectedInto = function (parent) {\n        return this._bindingWhenSyntax.whenInjectedInto(parent);\n    };\n    BindingWhenOnSyntax.prototype.whenParentNamed = function (name) {\n        return this._bindingWhenSyntax.whenParentNamed(name);\n    };\n    BindingWhenOnSyntax.prototype.whenParentTagged = function (tag, value) {\n        return this._bindingWhenSyntax.whenParentTagged(tag, value);\n    };\n    BindingWhenOnSyntax.prototype.whenAnyAncestorIs = function (ancestor) {\n        return this._bindingWhenSyntax.whenAnyAncestorIs(ancestor);\n    };\n    BindingWhenOnSyntax.prototype.whenNoAncestorIs = function (ancestor) {\n        return this._bindingWhenSyntax.whenNoAncestorIs(ancestor);\n    };\n    BindingWhenOnSyntax.prototype.whenAnyAncestorNamed = function (name) {\n        return this._bindingWhenSyntax.whenAnyAncestorNamed(name);\n    };\n    BindingWhenOnSyntax.prototype.whenAnyAncestorTagged = function (tag, value) {\n        return this._bindingWhenSyntax.whenAnyAncestorTagged(tag, value);\n    };\n    BindingWhenOnSyntax.prototype.whenNoAncestorNamed = function (name) {\n        return this._bindingWhenSyntax.whenNoAncestorNamed(name);\n    };\n    BindingWhenOnSyntax.prototype.whenNoAncestorTagged = function (tag, value) {\n        return this._bindingWhenSyntax.whenNoAncestorTagged(tag, value);\n    };\n    BindingWhenOnSyntax.prototype.whenAnyAncestorMatches = function (constraint) {\n        return this._bindingWhenSyntax.whenAnyAncestorMatches(constraint);\n    };\n    BindingWhenOnSyntax.prototype.whenNoAncestorMatches = function (constraint) {\n        return this._bindingWhenSyntax.whenNoAncestorMatches(constraint);\n    };\n    BindingWhenOnSyntax.prototype.onActivation = function (handler) {\n        return this._bindingOnSyntax.onActivation(handler);\n    };\n    return BindingWhenOnSyntax;\n}());\nexports.BindingWhenOnSyntax = BindingWhenOnSyntax;\n\n\n\n//////////////////\n// WEBPACK FOOTER\n// ./~/inversify/lib/syntax/binding_when_on_syntax.js\n// module id = 28\n// module chunks = 0","\"use strict\";\nvar metadata_1 = require(\"../planning/metadata\");\nvar METADATA_KEY = require(\"../constants/metadata_keys\");\nvar traverseAncerstors = function (request, constraint) {\n    var parent = request.parentRequest;\n    if (parent !== null) {\n        return constraint(parent) ? true : traverseAncerstors(parent, constraint);\n    }\n    else {\n        return false;\n    }\n};\nexports.traverseAncerstors = traverseAncerstors;\nvar taggedConstraint = function (key) { return function (value) {\n    var constraint = function (request) {\n        return request !== null && request.target !== null && request.target.matchesTag(key)(value);\n    };\n    constraint.metaData = new metadata_1.Metadata(key, value);\n    return constraint;\n}; };\nexports.taggedConstraint = taggedConstraint;\nvar namedConstraint = taggedConstraint(METADATA_KEY.NAMED_TAG);\nexports.namedConstraint = namedConstraint;\nvar typeConstraint = function (type) { return function (request) {\n    var binding = null;\n    if (request !== null) {\n        binding = request.bindings[0];\n        if (typeof type === \"string\") {\n            var serviceIdentifier = binding.serviceIdentifier;\n            return serviceIdentifier === type;\n        }\n        else {\n            var constructor = request.bindings[0].implementationType;\n            return type === constructor;\n        }\n    }\n    return false;\n}; };\nexports.typeConstraint = typeConstraint;\n\n\n\n//////////////////\n// WEBPACK FOOTER\n// ./~/inversify/lib/syntax/constraint_helpers.js\n// module id = 29\n// module chunks = 0","\"use strict\";\r\nObject.defineProperty(exports, \"__esModule\", { value: true });\r\nvar inversify_1 = require(\"inversify\");\r\nvar _1 = require(\"./\");\r\nvar TYPES = {\r\n    Utility: Symbol(\"Utility\"),\r\n    ModelMapper: Symbol(\"ModelMapper\"),\r\n    IHALParser: Symbol(\"IHALParser\")\r\n};\r\nexports.TYPES = TYPES;\r\nvar diModule = new inversify_1.ContainerModule(function (bind) {\r\n    bind(TYPES.Utility).to(_1.Utility);\r\n    bind(TYPES.ModelMapper).to(_1.ModelMapper);\r\n    bind(TYPES.IHALParser).toConstantValue(_1.HALParser);\r\n});\r\nexports.diModule = diModule;\r\n\n\n\n//////////////////\n// WEBPACK FOOTER\n// ./src/common/diModule.ts\n// module id = 30\n// module chunks = 0","\"use strict\";\r\nfunction __export(m) {\r\n    for (var p in m) if (!exports.hasOwnProperty(p)) exports[p] = m[p];\r\n}\r\nObject.defineProperty(exports, \"__esModule\", { value: true });\r\n__export(require(\"./tokenHandler\"));\r\n__export(require(\"./userHandler\"));\r\nvar diModule_1 = require(\"./diModule\");\r\nexports.coreDIModule = diModule_1.diModule;\r\n\n\n\n//////////////////\n// WEBPACK FOOTER\n// ./src/core/index.ts\n// module id = 31\n// module chunks = 0","\"use strict\";\r\nObject.defineProperty(exports, \"__esModule\", { value: true });\r\nvar inversify_1 = require(\"inversify\");\r\nvar _1 = require(\"./\");\r\nvar TYPES = {\r\n    ApiClient: Symbol(\"ApiClient\"),\r\n    IHttpClient: Symbol(\"IHttpClient\")\r\n};\r\nexports.TYPES = TYPES;\r\nvar diModule = new inversify_1.ContainerModule(function (bind) {\r\n    bind(TYPES.ApiClient).to(_1.ApiClient);\r\n});\r\nexports.diModule = diModule;\r\n\n\n\n//////////////////\n// WEBPACK FOOTER\n// ./src/httpApi/diModule.ts\n// module id = 32\n// module chunks = 0","/* globals module */\r\n/**\r\n * @module articleClient\r\n * @description  Articles Client provides an easy way to consume  Articles REST API end-points. In order to obtain needed routes `articleClient` uses `articleRoute`.\r\n */\r\n\"use strict\";\r\nObject.defineProperty(exports, \"__esModule\", { value: true });\r\nvar tslib_1 = require(\"tslib\");\r\nvar inversify_1 = require(\"inversify\");\r\n;\r\nvar common_1 = require(\"../../common\");\r\nvar httpApi_1 = require(\"../../httpApi\");\r\nvar _1 = require(\"./\");\r\nvar ArticleClient = (function () {\r\n    function ArticleClient(articleInstanceCommentsClient, articleInstanceFilesClient, articleInstanceRatingsClient, articleInstanceTagsClient, articleInstanceSubscriptionsClient, articleRoute, articleACLClient, apiClient) {\r\n        this.articleInstanceCommentsClient = articleInstanceCommentsClient;\r\n        this.articleInstanceFilesClient = articleInstanceFilesClient;\r\n        this.articleInstanceRatingsClient = articleInstanceRatingsClient;\r\n        this.articleInstanceTagsClient = articleInstanceTagsClient;\r\n        this.articleInstanceSubscriptionsClient = articleInstanceSubscriptionsClient;\r\n        this.articleRoute = articleRoute;\r\n        this.articleACLClient = articleACLClient;\r\n        this.apiClient = apiClient;\r\n        this.utility = new common_1.Utility();\r\n        this.articleUtility = new _1.BaasicArticleUtility();\r\n        this.statuses = _1.ArticleStatus;\r\n        this.commentStatuses = _1.CommentStatus;\r\n    }\r\n    Object.defineProperty(ArticleClient.prototype, \"routeDefinition\", {\r\n        /**\r\n         * Provides direct access to `articleRoute`.\r\n         * @method\r\n         * @example articleClient.routeDefinition.get();\r\n         **/\r\n        get: function () {\r\n            return this.articleRoute;\r\n        },\r\n        enumerable: true,\r\n        configurable: true\r\n    });\r\n    Object.defineProperty(ArticleClient.prototype, \"comments\", {\r\n        get: function () {\r\n            return this.articleInstanceCommentsClient;\r\n        },\r\n        enumerable: true,\r\n        configurable: true\r\n    });\r\n    Object.defineProperty(ArticleClient.prototype, \"files\", {\r\n        get: function () {\r\n            return this.articleInstanceFilesClient;\r\n        },\r\n        enumerable: true,\r\n        configurable: true\r\n    });\r\n    Object.defineProperty(ArticleClient.prototype, \"tags\", {\r\n        get: function () {\r\n            return this.articleInstanceTagsClient;\r\n        },\r\n        enumerable: true,\r\n        configurable: true\r\n    });\r\n    Object.defineProperty(ArticleClient.prototype, \"ratings\", {\r\n        get: function () {\r\n            return this.articleInstanceRatingsClient;\r\n        },\r\n        enumerable: true,\r\n        configurable: true\r\n    });\r\n    Object.defineProperty(ArticleClient.prototype, \"subscriptions\", {\r\n        get: function () {\r\n            return this.articleInstanceSubscriptionsClient;\r\n        },\r\n        enumerable: true,\r\n        configurable: true\r\n    });\r\n    Object.defineProperty(ArticleClient.prototype, \"acl\", {\r\n        get: function () {\r\n            return this.articleACLClient;\r\n        },\r\n        enumerable: true,\r\n        configurable: true\r\n    });\r\n    /**\r\n     * Returns a promise that is resolved once the find action has been performed. Success response returns a list of article resources matching the given criteria.\r\n     * @method\r\n     * @param options A promise that is resolved once the find action has been performed.\r\n     * @returns A promise that is resolved once the find action has been performed.\r\n     * @example articleClient.find({\r\n                    pageNumber : 1,\r\n                    pageSize : 10,\r\n                    orderBy : '<field>',\r\n                    orderDirection : '<asc|desc>',\r\n                    search : '<search-phrase>'\r\n                })\r\n                .then(function (collection) {\r\n                    // perform success action here\r\n                },\r\n                 function (response, status, headers, config) {\r\n                     // perform error handling here\r\n                });\r\n     **/\r\n    ArticleClient.prototype.find = function (options) {\r\n        return this.apiClient.get(this.routeDefinition.find(options));\r\n    };\r\n    /**\r\n     * Returns a promise that is resolved once the get action has been performed. Success response returns a single article resource.\r\n     * @method\r\n     * @param id Article slug or id which uniquely identifies article resource that needs to be retrieved.\r\n     * @param options Options object that contains embed items.\r\n     * @returns a promise that is resolved once the get action has been performed.\r\n     * @example articleClient.get('<article-id>')\r\n                    .then(function (data) {\r\n                        // perform success action here\r\n                    },\r\n                     function (response, status, headers, config) {\r\n                         // perform error handling here\r\n                    });\r\n     **/\r\n    ArticleClient.prototype.get = function (id, options) {\r\n        return this.apiClient.get(this.articleRoute.get(id, options));\r\n    };\r\n    /**\r\n     * Returns a promise that is resolved once the create article action has been performed, this action creates a new article resource.\r\n     * @method\r\n     * @param data An article object that needs to be inserted into the system.\r\n     * @returns a promise that is resolved once the create article action has been performed.\r\n     * @example articleClient.create({\r\n                    publishDate : new Date(),\r\n                    title : '<title>',\r\n                    content : '<content>',\r\n                    slug : '',\r\n                    status : baasicArticleService.statuses.draft,\r\n                    $tags : ['<tag1>', '<tag2>']\r\n                })\r\n                .then(function (data) {\r\n                    // perform success action here\r\n                },\r\n                 function (response, status, headers, config) {\r\n                     // perform error handling here\r\n                });\r\n     **/\r\n    ArticleClient.prototype.create = function (data) {\r\n        return this.apiClient.post(this.routeDefinition.create(), this.routeDefinition.createParams(data));\r\n    };\r\n    /**\r\n     * Returns a promise that is resolved once the update article action has been performed; this action updates an article resource. This route uses HAL enabled objects to obtain routes and therefore it doesn't apply `articleRoute` route template. Here is an example of how a route can be obtained from HAL enabled objects:\r\n     * ```\r\n     * let params = modelMapper.updateParams(article);\r\n     * let uri = params['model'].links('put').href;\r\n     * ```\r\n     * @method\r\n     * @param data An article object that needs to be updated into the system.\r\n     * @returns A promise that is resolved once the update article action has been performed.\r\n     * @example // article is a resource previously fetched using get action.\r\n                    article.title = '<title>';\r\n                    articleClient.update(article)\r\n                        .then(function (data) {\r\n                            // perform success action here\r\n                        },\r\n                         function (response, status, headers, config) {\r\n                             // perform error handling here\r\n                        });\r\n     **/\r\n    ArticleClient.prototype.update = function (data) {\r\n        return this.apiClient.put(this.routeDefinition.update(data), this.routeDefinition.updateParams(data));\r\n    };\r\n    /**\r\n     * Returns a promise that is resolved once the saveDraft article action has been performed. This action saves an article with \"draft\" status. If an article does not exist it will create a new article resource otherwise it will update an existing article resource.\r\n     * @method\r\n     * @param data An article object that needs to be inserted into the system.\r\n     * @returns A promise that is resolved once the saveDraft article action has been performed.\r\n     * @example // article is a resource previously fetched using get action.\r\n                        articleClient.saveDraft(article)\r\n                            .then(function (data) {\r\n                                // perform success action here\r\n                            },\r\n                             function (response, status, headers, config) {\r\n                                 // perform error handling here\r\n                            });\r\n     **/\r\n    ArticleClient.prototype.saveDraft = function (data) {\r\n        if (this.utility.isUndefined(data.id)) {\r\n            // Create new draft\r\n            return this.create(data);\r\n        }\r\n        // Update draft\r\n        return this.update(data);\r\n    };\r\n    /**\r\n     * Returns a promise that is resolved once the remove article action has been performed. If the action is successfully completed, the article resource will be permanently removed from the system. This route uses HAL enabled objects to obtain routes and therefore it doesn't apply `articleRoute` route template. Here is an example of how a route can be obtained from HAL enabled objects:\r\n     * ```\r\n     * let params = modelMapper.removeParams(article);\r\n     * let uri = params['model'].links('delete').href;\r\n     * ```\r\n     * @method\r\n     * @param data An article object that needs to be removed from the system.\r\n     * @returns A promise that is resolved once the remove article action has been performed.\r\n     * @example // article is a resource previously fetched using get action.\r\n                    articleClient.remove(article)\r\n                        .then(function (data) {\r\n                            // perform success action here\r\n                        },\r\n                         function (response, status, headers, config) {\r\n                             // perform error handling here\r\n                        });\r\n     **/\r\n    ArticleClient.prototype.remove = function (data) {\r\n        return this.apiClient.delete(this.routeDefinition.delete(data));\r\n    };\r\n    /**\r\n     * Returns a promise that is resolved once the archive article action has been performed. This action sets the status of an article from \"published\" to \"archive\". This route uses HAL enabled objects to obtain routes and therefore it doesn't apply `articleRoute` route template. Here is an example of how a route can be obtained from HAL enabled objects:\r\n     * ```\r\n     * let params = modelMapper.updateParams(article);\r\n     * let uri = params['model'].links('archive').href;\r\n     * ```\r\n     * @method\r\n     * @param data An article object.\r\n     * @param options Notification options.\r\n     * @returns A promise that is resolved once the archive article action has been performed.\r\n     * @example // article is a resource previously fetched using get action.\r\n                    articleClient.archive(article, articleOptions)\r\n                        .then(function (data) {\r\n                            // perform success action here\r\n                        },\r\n                         function (response, status, headers, config) {\r\n                             // perform error handling here\r\n                        });\r\n     **/\r\n    ArticleClient.prototype.archive = function (data, options) {\r\n        return this.apiClient.put(this.routeDefinition.archive(data), this.routeDefinition.updateParams(options));\r\n    };\r\n    /**\r\n     * Returns a promise that is resolved once the restore article action has been performed. This action sets the status of an article from \"archive\" to \"published\". This route uses HAL enabled objects to obtain routes and therefore it doesn't apply `baasicArticleRouteService` route template. Here is an example of how a route can be obtained from HAL enabled objects:\r\n     * ```\r\n     * let params = modelMapper.updateParams(article);\r\n     * let uri = params['model'].links('restore').href;\r\n     * ```\r\n     * @method\r\n     * @param data Article object.\r\n     * @returns A promise that is resolved once the restore article action has been performed.\r\n     * @example // article is a resource previously fetched using get action.\r\n                        articleClient.restore(article)\r\n                            .then(function (data) {\r\n                                // perform success action here\r\n                            },\r\n                             function (response, status, headers, config) {\r\n                                 // perform error handling here\r\n                            });\r\n     **/\r\n    ArticleClient.prototype.restore = function (data) {\r\n        return this.apiClient.put(this.routeDefinition.restore(data), this.routeDefinition.updateParams(data));\r\n    };\r\n    /**\r\n     * Returns a promise that is resolved once the unpublish article action has been performed. This action sets the status of an article from \"published\" to \"draft\". This route uses HAL enabled objects to obtain routes and therefore it doesn't apply `articleRoute` route template. Here is an example of how a route can be obtained from HAL enabled objects:\r\n     * ```\r\n     * let params = modelMapper.updateParams(article);\r\n     * let uri = params['model'].links('unpublish').href;\r\n     * ```\r\n     * @method\r\n     * @param data An article object.\r\n     * @returns A promise that is resolved once the unpublish article action has been performed.\r\n     * @example \t// article is a resource previously fetched using get action.\r\n                        articleClient.unpublish(article)\r\n                            .then(function (data) {\r\n                                // perform success action here\r\n                            },\r\n                             function (response, status, headers, config) {\r\n                                 // perform error handling here\r\n                            });\r\n     **/\r\n    ArticleClient.prototype.unpublish = function (data) {\r\n        return this.apiClient.put(this.routeDefinition.unpublish(data), this.routeDefinition.updateParams(data));\r\n    };\r\n    /**\r\n     * Returns a promise that is resolved once the publish article action has been performed. This action sets the status of an article from \"draft\" to \"published\".\r\n     * @method\r\n     * @param data An article object.\r\n     * @param articleOptions Notification options.\r\n     * @returns A promise that is resolved once the unpublish article action has been performed.\r\n     * @example articleClient.publish(article, articleOptions)\r\n                    .then(function (data) {\r\n                        // perform success action here\r\n                    },\r\n                     function (response, status, headers, config) {\r\n                         // perform error handling here\r\n                    });\r\n     **/\r\n    ArticleClient.prototype.publish = function (data, articleOptions) {\r\n        return this.apiClient.put(this.routeDefinition.publish(data), this.routeDefinition.updateParams(articleOptions));\r\n    };\r\n    /**\r\n     * Returns a promise that is resolved once the purge articles action has been performed. Please note that all article resources will be deleted from the system once the action is successfully completed and therefore it can only be executed by user assigned to account owner role.\r\n     * @method\r\n     * @example articleClient.purge({})\r\n                    .then(function (data) {\r\n                        // perform success action here\r\n                    },\r\n                     function (response, status, headers, config) {\r\n                         // perform error handling here\r\n                    });\r\n     **/\r\n    ArticleClient.prototype.purge = function (options) {\r\n        return this.apiClient.delete(this.routeDefinition.purge(options));\r\n    };\r\n    return ArticleClient;\r\n}());\r\nArticleClient = tslib_1.__decorate([\r\n    inversify_1.injectable(),\r\n    tslib_1.__param(0, inversify_1.inject(_1.TYPES.ArticleInstanceCommentsClient)),\r\n    tslib_1.__param(1, inversify_1.inject(_1.TYPES.ArticleInstanceFilesClient)),\r\n    tslib_1.__param(2, inversify_1.inject(_1.TYPES.ArticleInstanceRatingsClient)),\r\n    tslib_1.__param(3, inversify_1.inject(_1.TYPES.ArticleInstanceTagsClient)),\r\n    tslib_1.__param(4, inversify_1.inject(_1.TYPES.ArticleInstanceSubscriptionsClient)),\r\n    tslib_1.__param(5, inversify_1.inject(_1.TYPES.ArticleRoute)),\r\n    tslib_1.__param(6, inversify_1.inject(_1.TYPES.ArticleACLClient)),\r\n    tslib_1.__param(7, inversify_1.inject(httpApi_1.httpTYPES.ApiClient)),\r\n    tslib_1.__metadata(\"design:paramtypes\", [typeof (_a = typeof _1.ArticleInstanceCommentsClient !== \"undefined\" && _1.ArticleInstanceCommentsClient) === \"function\" && _a || Object, typeof (_b = typeof _1.ArticleInstanceFilesClient !== \"undefined\" && _1.ArticleInstanceFilesClient) === \"function\" && _b || Object, typeof (_c = typeof _1.ArticleInstanceRatingsClient !== \"undefined\" && _1.ArticleInstanceRatingsClient) === \"function\" && _c || Object, typeof (_d = typeof _1.ArticleInstanceTagsClient !== \"undefined\" && _1.ArticleInstanceTagsClient) === \"function\" && _d || Object, typeof (_e = typeof _1.ArticleInstanceSubscriptionsClient !== \"undefined\" && _1.ArticleInstanceSubscriptionsClient) === \"function\" && _e || Object, typeof (_f = typeof _1.ArticleRoute !== \"undefined\" && _1.ArticleRoute) === \"function\" && _f || Object, typeof (_g = typeof _1.ArticleACLClient !== \"undefined\" && _1.ArticleACLClient) === \"function\" && _g || Object, typeof (_h = typeof httpApi_1.ApiClient !== \"undefined\" && httpApi_1.ApiClient) === \"function\" && _h || Object])\r\n], ArticleClient);\r\nexports.ArticleClient = ArticleClient;\r\nvar _a, _b, _c, _d, _e, _f, _g, _h;\r\n/**\r\n * @overview\r\n ***Notes:**\r\n - Refer to the [REST API documentation](https://github.com/Baasic/baasic-rest-api/wiki) for detailed information about available Baasic REST API end-points.\r\n - All end-point objects are transformed by the associated route service.\r\n */ \r\n\n\n\n//////////////////\n// WEBPACK FOOTER\n// ./src/modules/article/articleClient.ts\n// module id = 33\n// module chunks = 0","\"use strict\";\r\nfunction __export(m) {\r\n    for (var p in m) if (!exports.hasOwnProperty(p)) exports[p] = m[p];\r\n}\r\nObject.defineProperty(exports, \"__esModule\", { value: true });\r\n__export(require(\"./addressType\"));\r\n__export(require(\"./country\"));\r\n__export(require(\"./countryState\"));\r\n__export(require(\"./paymentMethod\"));\r\n__export(require(\"./paymentTransactionStatus\"));\r\n__export(require(\"./recurringCyclePeriodType\"));\r\n__export(require(\"./subscriptionStatus\"));\r\n__export(require(\"./invoiceStatus\"));\r\n__export(require(\"./lookups\"));\r\n\n\n\n//////////////////\n// WEBPACK FOOTER\n// ./src/modules/commerce/lookups/index.ts\n// module id = 34\n// module chunks = 0","\"use strict\";\r\nObject.defineProperty(exports, \"__esModule\", { value: true });\r\nvar common_1 = require(\"./common\");\r\nvar contracts_1 = require(\"./core/contracts\");\r\nvar core_1 = require(\"./core\");\r\nvar _1 = require(\"./\");\r\nvar httpApi_1 = require(\"./httpApi\");\r\nvar modules = require(\"./modules\");\r\nvar BaasicApp = (function () {\r\n    function BaasicApp(apiKey, options) {\r\n        this.apiKey = apiKey;\r\n        this.options = options;\r\n        this.utility = new common_1.Utility();\r\n        if (!this.apiKey) {\r\n            throw new Error(\"API Key is required.\");\r\n        }\r\n        var opt = {};\r\n        if (options) {\r\n            opt = options;\r\n        }\r\n        this.settings = this.utility.extendAs({}, BaasicApp.defaultSettings, opt);\r\n        this.diModule = new _1.DIModule();\r\n        this.diModule.init(this, [common_1.commonDIModule, core_1.coreDIModule, httpApi_1.httpDIModule, modules]);\r\n        this.tokenHandler = this.diModule.kernel.get(contracts_1.TYPES.ITokenHandler);\r\n        this.userHandler = this.diModule.kernel.get(contracts_1.TYPES.IUserHandler);\r\n        this.eventHandler = this.diModule.kernel.get(contracts_1.TYPES.IEventHandler);\r\n        this.apiClient = this.diModule.kernel.get(httpApi_1.httpTYPES.ApiClient);\r\n        this.membershipModule = this.diModule.kernel.get(modules.Membership.TYPES.Root);\r\n        //Modules\r\n        this.applicationSettingModule = this.diModule.kernel.get(modules.ApplicationSettings.TYPES.ApplicationSettingsClient);\r\n        this.keyValueModule = this.diModule.kernel.get(modules.KeyValue.TYPES.KeyValueClient);\r\n        this.valueSetModule = this.diModule.kernel.get(modules.ValueSet.TYPES.ValueSetClient);\r\n        this.userProfileModule = this.diModule.kernel.get(modules.UserProfile.TYPES.Root);\r\n        this.templatingModule = this.diModule.kernel.get(modules.Templating.TYPES.TemplatingClient);\r\n        this.meteringModule = this.diModule.kernel.get(modules.Metering.TYPES.MeteringClient);\r\n        this.mediaVaultModule = this.diModule.kernel.get(modules.MediaVault.TYPES.MediaVaultClient);\r\n        this.fileModule = this.diModule.kernel.get(modules.Files.TYPES.FilesClient);\r\n        this.dynamicResourceModule = this.diModule.kernel.get(modules.DynamicResource.TYPES.DynamicResourceClient);\r\n        this.notificationModule = this.diModule.kernel.get(modules.Notifications.TYPES.NotificationsClient);\r\n        this.articleModule = this.diModule.kernel.get(modules.Article.TYPES.Root);\r\n        this.commerceModule = this.diModule.kernel.get(modules.Commerce.TYPES.CommerceClient);\r\n    }\r\n    BaasicApp.prototype.getAccessToken = function () {\r\n        return this.tokenHandler.get(contracts_1.TokenTypes.Access);\r\n    };\r\n    BaasicApp.prototype.updateAccessToken = function (value) {\r\n        this.tokenHandler.store(value);\r\n    };\r\n    BaasicApp.prototype.getApiKey = function () {\r\n        return this.apiKey;\r\n    };\r\n    BaasicApp.prototype.getApiUrl = function () {\r\n        return this.settings.apiUrl;\r\n    };\r\n    BaasicApp.prototype.getUser = function () {\r\n        return this.userHandler.getUser();\r\n    };\r\n    BaasicApp.prototype.setUser = function (userInfo) {\r\n        this.userHandler.setUser(userInfo);\r\n    };\r\n    return BaasicApp;\r\n}());\r\nBaasicApp.defaultSettings = {\r\n    useSSL: true,\r\n    apiRootUrl: 'api.baasic.com',\r\n    apiVersion: 'v1',\r\n    enableHALJSON: false\r\n};\r\nexports.BaasicApp = BaasicApp;\r\n\n\n\n//////////////////\n// WEBPACK FOOTER\n// ./src/baasicApp.ts\n// module id = 35\n// module chunks = 0","\"use strict\";\r\nObject.defineProperty(exports, \"__esModule\", { value: true });\r\nvar inversify_1 = require(\"inversify\");\r\nvar httpApi_1 = require(\"./httpApi\");\r\nvar contracts_1 = require(\"./core/contracts\");\r\nvar jQuery_1 = require(\"./httpApi/jQuery\");\r\nvar localStorage_1 = require(\"./core/localStorage\");\r\nvar browserEvents_1 = require(\"./core/browserEvents\");\r\nvar DIModule = (function () {\r\n    function DIModule() {\r\n        this.diModules = [];\r\n        this.kernel = new inversify_1.Container();\r\n    }\r\n    DIModule.prototype.init = function (app, modules) {\r\n        var _this = this;\r\n        var diModule = new inversify_1.ContainerModule(function (bind) {\r\n            var apiKey = app.getApiKey();\r\n            if (app.settings) {\r\n                var appOptions = {\r\n                    apiKey: apiKey,\r\n                    apiUrl: new URL((app.settings.useSSL ? 'https' : 'http') + \"://\" + app.settings.apiRootUrl + \"/\" + app.settings.apiVersion + \"/\" + apiKey + \"/\"),\r\n                    enableHALJSON: app.settings.enableHALJSON\r\n                };\r\n                app.settings.apiUrl = appOptions.apiUrl;\r\n                _this.kernel.bind(contracts_1.TYPES.IAppOptions).toConstantValue(appOptions);\r\n                _this.kernel.bind(contracts_1.TYPES.IBaasicAppOptions).toConstantValue(app.settings);\r\n            }\r\n            _this.bindHandler(httpApi_1.httpTYPES.IHttpClient, app.settings.httpClient, jQuery_1.JQueryHttpClient);\r\n            _this.bindHandlerWithOptions(contracts_1.TYPES.IStorageHandler, contracts_1.TYPES.IDefaultStorageConfig, app.settings.storageHandler, localStorage_1.LocalStorageHandler);\r\n            _this.bindHandler(contracts_1.TYPES.IEventHandler, app.settings.eventHandler, browserEvents_1.BrowserEventHandler);\r\n            _this.kernel.bind(contracts_1.TYPES.IBaasicApp).toConstantValue(app);\r\n        });\r\n        this.diModules.push(diModule);\r\n        for (var _i = 0, modules_1 = modules; _i < modules_1.length; _i++) {\r\n            var m = modules_1[_i];\r\n            this.addModule(m);\r\n        }\r\n        (_a = this.kernel).load.apply(_a, this.diModules);\r\n        var _a;\r\n    };\r\n    DIModule.prototype.bindHandler = function (type, value, defaultBinding) {\r\n        if (value) {\r\n            this.kernel.bind(type).toConstantValue(value());\r\n        }\r\n        else {\r\n            this.kernel.bind(type).to(defaultBinding);\r\n        }\r\n    };\r\n    DIModule.prototype.bindHandlerWithOptions = function (type, optionType, value, defaultBinding) {\r\n        if (value) {\r\n            if (value instanceof Function) {\r\n                this.kernel.bind(type).toConstantValue(value());\r\n                return;\r\n            }\r\n            else {\r\n                this.kernel.bind(optionType).toConstantValue(value);\r\n            }\r\n        }\r\n        this.kernel.bind(type).to(defaultBinding);\r\n    };\r\n    DIModule.prototype.addModule = function (module) {\r\n        if (module instanceof inversify_1.ContainerModule) {\r\n            this.diModules.push(module);\r\n        }\r\n        else if (module instanceof Object && !(module instanceof Function)) {\r\n            for (var mod in module) {\r\n                this.addModule(module[mod]);\r\n            }\r\n        }\r\n    };\r\n    return DIModule;\r\n}());\r\nexports.DIModule = DIModule;\r\n;\r\n\n\n\n//////////////////\n// WEBPACK FOOTER\n// ./src/diModule.ts\n// module id = 36\n// module chunks = 0","\"use strict\";\r\nfunction __export(m) {\r\n    for (var p in m) if (!exports.hasOwnProperty(p)) exports[p] = m[p];\r\n}\r\nObject.defineProperty(exports, \"__esModule\", { value: true });\r\n__export(require(\"./diModule\"));\r\n__export(require(\"./baasicApp\"));\r\nvar httpApi_1 = require(\"./httpApi\");\r\nexports.IHttpClient = httpApi_1.IHttpClient;\r\nexports.IHttpHeaders = httpApi_1.IHttpHeaders;\r\nexports.IHttpRequest = httpApi_1.IHttpRequest;\r\nexports.IHttpResponse = httpApi_1.IHttpResponse;\r\nvar contracts_1 = require(\"./core/contracts\");\r\nexports.IStorageHandler = contracts_1.IStorageHandler;\r\nexports.IEventHandler = contracts_1.IEventHandler;\r\nexports.ITokenHandler = contracts_1.ITokenHandler;\r\nexports.IBaasicAppOptions = contracts_1.IBaasicAppOptions;\r\nexports.IBaasicOptions = contracts_1.IBaasicOptions;\r\nexports.IToken = contracts_1.IToken;\r\nexports.TokenTypes = contracts_1.TokenTypes;\r\nexports.IUser = contracts_1.IUser;\r\nexports.IUserHandler = contracts_1.IUserHandler;\r\nexports.IDefaultStorageConfig = contracts_1.IDefaultStorageConfig;\r\n__export(require(\"./common\"));\r\n\n\n\n//////////////////\n// WEBPACK FOOTER\n// ./src/index.ts\n// module id = 37\n// module chunks = 0","\"use strict\";\nvar metadata_1 = require(\"../planning/metadata\");\nvar decorator_utils_1 = require(\"./decorator_utils\");\nvar METADATA_KEY = require(\"../constants/metadata_keys\");\nfunction inject(serviceIdentifier) {\n    return function (target, targetKey, index) {\n        var metadata = new metadata_1.Metadata(METADATA_KEY.INJECT_TAG, serviceIdentifier);\n        if (typeof index === \"number\") {\n            decorator_utils_1.tagParameter(target, targetKey, index, metadata);\n        }\n        else {\n            decorator_utils_1.tagProperty(target, targetKey, metadata);\n        }\n    };\n}\nexports.inject = inject;\n\n\n\n//////////////////\n// WEBPACK FOOTER\n// ./~/inversify/lib/annotation/inject.js\n// module id = 38\n// module chunks = 0","\"use strict\";\nvar METADATA_KEY = require(\"../constants/metadata_keys\");\nvar ERRORS_MSGS = require(\"../constants/error_msgs\");\nfunction injectable() {\n    return function (target) {\n        if (Reflect.hasOwnMetadata(METADATA_KEY.PARAM_TYPES, target) === true) {\n            throw new Error(ERRORS_MSGS.DUPLICATED_INJECTABLE_DECORATOR);\n        }\n        var types = Reflect.getMetadata(METADATA_KEY.DESIGN_PARAM_TYPES, target) || [];\n        Reflect.defineMetadata(METADATA_KEY.PARAM_TYPES, types, target);\n        return target;\n    };\n}\nexports.injectable = injectable;\n\n\n\n//////////////////\n// WEBPACK FOOTER\n// ./~/inversify/lib/annotation/injectable.js\n// module id = 39\n// module chunks = 0","\"use strict\";\nvar metadata_1 = require(\"../planning/metadata\");\nvar decorator_utils_1 = require(\"./decorator_utils\");\nvar METADATA_KEY = require(\"../constants/metadata_keys\");\nfunction multiInject(serviceIdentifier) {\n    return function (target, targetKey, index) {\n        var metadata = new metadata_1.Metadata(METADATA_KEY.MULTI_INJECT_TAG, serviceIdentifier);\n        if (typeof index === \"number\") {\n            decorator_utils_1.tagParameter(target, targetKey, index, metadata);\n        }\n        else {\n            decorator_utils_1.tagProperty(target, targetKey, metadata);\n        }\n    };\n}\nexports.multiInject = multiInject;\n\n\n\n//////////////////\n// WEBPACK FOOTER\n// ./~/inversify/lib/annotation/multi_inject.js\n// module id = 40\n// module chunks = 0","\"use strict\";\nvar metadata_1 = require(\"../planning/metadata\");\nvar decorator_utils_1 = require(\"./decorator_utils\");\nvar METADATA_KEY = require(\"../constants/metadata_keys\");\nfunction named(name) {\n    return function (target, targetKey, index) {\n        var metadata = new metadata_1.Metadata(METADATA_KEY.NAMED_TAG, name);\n        if (typeof index === \"number\") {\n            decorator_utils_1.tagParameter(target, targetKey, index, metadata);\n        }\n        else {\n            decorator_utils_1.tagProperty(target, targetKey, metadata);\n        }\n    };\n}\nexports.named = named;\n\n\n\n//////////////////\n// WEBPACK FOOTER\n// ./~/inversify/lib/annotation/named.js\n// module id = 41\n// module chunks = 0","\"use strict\";\nvar metadata_1 = require(\"../planning/metadata\");\nvar decorator_utils_1 = require(\"./decorator_utils\");\nvar METADATA_KEY = require(\"../constants/metadata_keys\");\nfunction optional() {\n    return function (target, targetKey, index) {\n        var metadata = new metadata_1.Metadata(METADATA_KEY.OPTIONAL_TAG, true);\n        if (typeof index === \"number\") {\n            decorator_utils_1.tagParameter(target, targetKey, index, metadata);\n        }\n        else {\n            decorator_utils_1.tagProperty(target, targetKey, metadata);\n        }\n    };\n}\nexports.optional = optional;\n\n\n\n//////////////////\n// WEBPACK FOOTER\n// ./~/inversify/lib/annotation/optional.js\n// module id = 42\n// module chunks = 0","\"use strict\";\nvar metadata_1 = require(\"../planning/metadata\");\nvar decorator_utils_1 = require(\"./decorator_utils\");\nfunction tagged(metadataKey, metadataValue) {\n    return function (target, targetKey, index) {\n        var metadata = new metadata_1.Metadata(metadataKey, metadataValue);\n        if (typeof index === \"number\") {\n            decorator_utils_1.tagParameter(target, targetKey, index, metadata);\n        }\n        else {\n            decorator_utils_1.tagProperty(target, targetKey, metadata);\n        }\n    };\n}\nexports.tagged = tagged;\n\n\n\n//////////////////\n// WEBPACK FOOTER\n// ./~/inversify/lib/annotation/tagged.js\n// module id = 43\n// module chunks = 0","\"use strict\";\nvar metadata_1 = require(\"../planning/metadata\");\nvar decorator_utils_1 = require(\"./decorator_utils\");\nvar METADATA_KEY = require(\"../constants/metadata_keys\");\nfunction targetName(name) {\n    return function (target, targetKey, index) {\n        var metadata = new metadata_1.Metadata(METADATA_KEY.NAME_TAG, name);\n        decorator_utils_1.tagParameter(target, targetKey, index, metadata);\n    };\n}\nexports.targetName = targetName;\n\n\n\n//////////////////\n// WEBPACK FOOTER\n// ./~/inversify/lib/annotation/target_name.js\n// module id = 44\n// module chunks = 0","\"use strict\";\nvar metadata_1 = require(\"../planning/metadata\");\nvar decorator_utils_1 = require(\"./decorator_utils\");\nvar METADATA_KEY = require(\"../constants/metadata_keys\");\nfunction unmanaged() {\n    return function (target, targetKey, index) {\n        var metadata = new metadata_1.Metadata(METADATA_KEY.UNMANAGED_TAG, true);\n        decorator_utils_1.tagParameter(target, targetKey, index, metadata);\n    };\n}\nexports.unmanaged = unmanaged;\n\n\n\n//////////////////\n// WEBPACK FOOTER\n// ./~/inversify/lib/annotation/unmanaged.js\n// module id = 45\n// module chunks = 0","\"use strict\";\nvar guid_1 = require(\"../utils/guid\");\nvar literal_types_1 = require(\"../constants/literal_types\");\nvar Binding = (function () {\n    function Binding(serviceIdentifier, defaultScope) {\n        this.guid = guid_1.guid();\n        this.activated = false;\n        this.serviceIdentifier = serviceIdentifier;\n        this.scope = defaultScope;\n        this.type = literal_types_1.BindingTypeEnum.Invalid;\n        this.constraint = function (request) { return true; };\n        this.implementationType = null;\n        this.cache = null;\n        this.factory = null;\n        this.provider = null;\n        this.onActivation = null;\n        this.dynamicValue = null;\n    }\n    Binding.prototype.clone = function () {\n        var clone = new Binding(this.serviceIdentifier, this.scope);\n        clone.activated = false;\n        clone.implementationType = this.implementationType;\n        clone.dynamicValue = this.dynamicValue;\n        clone.scope = this.scope;\n        clone.type = this.type;\n        clone.factory = this.factory;\n        clone.provider = this.provider;\n        clone.constraint = this.constraint;\n        clone.onActivation = this.onActivation;\n        clone.cache = this.cache;\n        return clone;\n    };\n    return Binding;\n}());\nexports.Binding = Binding;\n\n\n\n//////////////////\n// WEBPACK FOOTER\n// ./~/inversify/lib/bindings/binding.js\n// module id = 46\n// module chunks = 0","\"use strict\";\nvar BindingCount = {\n    MultipleBindingsAvailable: 2,\n    NoBindingsAvailable: 0,\n    OnlyOneBindingAvailable: 1\n};\nexports.BindingCount = BindingCount;\n\n\n\n//////////////////\n// WEBPACK FOOTER\n// ./~/inversify/lib/bindings/binding_count.js\n// module id = 47\n// module chunks = 0","\"use strict\";\nvar binding_1 = require(\"../bindings/binding\");\nvar lookup_1 = require(\"./lookup\");\nvar planner_1 = require(\"../planning/planner\");\nvar resolver_1 = require(\"../resolution/resolver\");\nvar binding_to_syntax_1 = require(\"../syntax/binding_to_syntax\");\nvar serialization_1 = require(\"../utils/serialization\");\nvar container_snapshot_1 = require(\"./container_snapshot\");\nvar guid_1 = require(\"../utils/guid\");\nvar ERROR_MSGS = require(\"../constants/error_msgs\");\nvar METADATA_KEY = require(\"../constants/metadata_keys\");\nvar literal_types_1 = require(\"../constants/literal_types\");\nvar Container = (function () {\n    function Container(containerOptions) {\n        if (containerOptions !== undefined) {\n            if (typeof containerOptions !== \"object\") {\n                throw new Error(\"\" + ERROR_MSGS.CONTAINER_OPTIONS_MUST_BE_AN_OBJECT);\n            }\n            else if (containerOptions.defaultScope === undefined) {\n                throw new Error(\"\" + ERROR_MSGS.CONTAINER_OPTIONS_INVALID_DEFAULT_SCOPE);\n            }\n            else if (containerOptions.defaultScope !== literal_types_1.BindingScopeEnum.Singleton &&\n                containerOptions.defaultScope !== literal_types_1.BindingScopeEnum.Transient) {\n                throw new Error(\"\" + ERROR_MSGS.CONTAINER_OPTIONS_INVALID_DEFAULT_SCOPE);\n            }\n            this.options = {\n                defaultScope: containerOptions.defaultScope\n            };\n        }\n        else {\n            this.options = {\n                defaultScope: literal_types_1.BindingScopeEnum.Transient\n            };\n        }\n        this.guid = guid_1.guid();\n        this._bindingDictionary = new lookup_1.Lookup();\n        this._snapshots = [];\n        this._middleware = null;\n        this.parent = null;\n    }\n    Container.merge = function (container1, container2) {\n        var container = new Container();\n        var bindingDictionary = planner_1.getBindingDictionary(container);\n        var bindingDictionary1 = planner_1.getBindingDictionary(container1);\n        var bindingDictionary2 = planner_1.getBindingDictionary(container2);\n        function copyDictionary(origing, destination) {\n            origing.traverse(function (key, value) {\n                value.forEach(function (binding) {\n                    destination.add(binding.serviceIdentifier, binding.clone());\n                });\n            });\n        }\n        copyDictionary(bindingDictionary1, bindingDictionary);\n        copyDictionary(bindingDictionary2, bindingDictionary);\n        return container;\n    };\n    Container.prototype.load = function () {\n        var _this = this;\n        var modules = [];\n        for (var _i = 0; _i < arguments.length; _i++) {\n            modules[_i] = arguments[_i];\n        }\n        var setModuleId = function (bindingToSyntax, moduleId) {\n            bindingToSyntax._binding.moduleId = moduleId;\n        };\n        var getBindFunction = function (moduleId) {\n            return function (serviceIdentifier) {\n                var _bind = _this.bind.bind(_this);\n                var bindingToSyntax = _bind(serviceIdentifier);\n                setModuleId(bindingToSyntax, moduleId);\n                return bindingToSyntax;\n            };\n        };\n        var getUnbindFunction = function (moduleId) {\n            return function (serviceIdentifier) {\n                var _unbind = _this.unbind.bind(_this);\n                _unbind(serviceIdentifier);\n            };\n        };\n        var getIsboundFunction = function (moduleId) {\n            return function (serviceIdentifier) {\n                var _isBound = _this.isBound.bind(_this);\n                return _isBound(serviceIdentifier);\n            };\n        };\n        var getRebindFunction = function (moduleId) {\n            return function (serviceIdentifier) {\n                var _rebind = _this.rebind.bind(_this);\n                var bindingToSyntax = _rebind(serviceIdentifier);\n                setModuleId(bindingToSyntax, moduleId);\n                return bindingToSyntax;\n            };\n        };\n        modules.forEach(function (module) {\n            var bindFunction = getBindFunction(module.guid);\n            var unbindFunction = getUnbindFunction(module.guid);\n            var isboundFunction = getIsboundFunction(module.guid);\n            var rebindFunction = getRebindFunction(module.guid);\n            module.registry(bindFunction, unbindFunction, isboundFunction, rebindFunction);\n        });\n    };\n    Container.prototype.unload = function () {\n        var _this = this;\n        var modules = [];\n        for (var _i = 0; _i < arguments.length; _i++) {\n            modules[_i] = arguments[_i];\n        }\n        var conditionFactory = function (expected) { return function (item) {\n            return item.moduleId === expected;\n        }; };\n        modules.forEach(function (module) {\n            var condition = conditionFactory(module.guid);\n            _this._bindingDictionary.removeByCondition(condition);\n        });\n    };\n    Container.prototype.bind = function (serviceIdentifier) {\n        var defaultScope = literal_types_1.BindingScopeEnum.Transient;\n        defaultScope = (this.options.defaultScope === defaultScope) ? defaultScope : literal_types_1.BindingScopeEnum.Singleton;\n        var binding = new binding_1.Binding(serviceIdentifier, defaultScope);\n        this._bindingDictionary.add(serviceIdentifier, binding);\n        return new binding_to_syntax_1.BindingToSyntax(binding);\n    };\n    Container.prototype.rebind = function (serviceIdentifier) {\n        this.unbind(serviceIdentifier);\n        return this.bind(serviceIdentifier);\n    };\n    Container.prototype.unbind = function (serviceIdentifier) {\n        try {\n            this._bindingDictionary.remove(serviceIdentifier);\n        }\n        catch (e) {\n            throw new Error(ERROR_MSGS.CANNOT_UNBIND + \" \" + serialization_1.getServiceIdentifierAsString(serviceIdentifier));\n        }\n    };\n    Container.prototype.unbindAll = function () {\n        this._bindingDictionary = new lookup_1.Lookup();\n    };\n    Container.prototype.isBound = function (serviceIdentifier) {\n        return this._bindingDictionary.hasKey(serviceIdentifier);\n    };\n    Container.prototype.isBoundNamed = function (serviceIdentifier, named) {\n        return this.isBoundTagged(serviceIdentifier, METADATA_KEY.NAMED_TAG, named);\n    };\n    Container.prototype.isBoundTagged = function (serviceIdentifier, key, value) {\n        var bindings = this._bindingDictionary.get(serviceIdentifier);\n        var request = planner_1.createMockRequest(this, serviceIdentifier, key, value);\n        return bindings.some(function (b) { return b.constraint(request); });\n    };\n    Container.prototype.snapshot = function () {\n        this._snapshots.push(container_snapshot_1.ContainerSnapshot.of(this._bindingDictionary.clone(), this._middleware));\n    };\n    Container.prototype.restore = function () {\n        var snapshot = this._snapshots.pop();\n        if (snapshot === undefined) {\n            throw new Error(ERROR_MSGS.NO_MORE_SNAPSHOTS_AVAILABLE);\n        }\n        this._bindingDictionary = snapshot.bindings;\n        this._middleware = snapshot.middleware;\n    };\n    Container.prototype.createChild = function () {\n        var child = new Container();\n        child.parent = this;\n        return child;\n    };\n    Container.prototype.applyMiddleware = function () {\n        var middlewares = [];\n        for (var _i = 0; _i < arguments.length; _i++) {\n            middlewares[_i] = arguments[_i];\n        }\n        var initial = (this._middleware) ? this._middleware : this._planAndResolve();\n        this._middleware = middlewares.reduce(function (prev, curr) {\n            return curr(prev);\n        }, initial);\n    };\n    Container.prototype.get = function (serviceIdentifier) {\n        return this._get(false, false, literal_types_1.TargetTypeEnum.Variable, serviceIdentifier);\n    };\n    Container.prototype.getTagged = function (serviceIdentifier, key, value) {\n        return this._get(false, false, literal_types_1.TargetTypeEnum.Variable, serviceIdentifier, key, value);\n    };\n    Container.prototype.getNamed = function (serviceIdentifier, named) {\n        return this.getTagged(serviceIdentifier, METADATA_KEY.NAMED_TAG, named);\n    };\n    Container.prototype.getAll = function (serviceIdentifier) {\n        return this._get(true, true, literal_types_1.TargetTypeEnum.Variable, serviceIdentifier);\n    };\n    Container.prototype.getAllTagged = function (serviceIdentifier, key, value) {\n        return this._get(false, true, literal_types_1.TargetTypeEnum.Variable, serviceIdentifier, key, value);\n    };\n    Container.prototype.getAllNamed = function (serviceIdentifier, named) {\n        return this.getAllTagged(serviceIdentifier, METADATA_KEY.NAMED_TAG, named);\n    };\n    Container.prototype._get = function (avoidConstraints, isMultiInject, targetType, serviceIdentifier, key, value) {\n        var result = null;\n        var defaultArgs = {\n            avoidConstraints: avoidConstraints,\n            contextInterceptor: function (context) { return context; },\n            isMultiInject: isMultiInject,\n            key: key,\n            serviceIdentifier: serviceIdentifier,\n            targetType: targetType,\n            value: value\n        };\n        if (this._middleware) {\n            result = this._middleware(defaultArgs);\n            if (result === undefined || result === null) {\n                throw new Error(ERROR_MSGS.INVALID_MIDDLEWARE_RETURN);\n            }\n        }\n        else {\n            result = this._planAndResolve()(defaultArgs);\n        }\n        return result;\n    };\n    Container.prototype._planAndResolve = function () {\n        var _this = this;\n        return function (args) {\n            var context = planner_1.plan(_this, args.isMultiInject, args.targetType, args.serviceIdentifier, args.key, args.value, args.avoidConstraints);\n            context = args.contextInterceptor(context);\n            var result = resolver_1.resolve(context);\n            return result;\n        };\n    };\n    return Container;\n}());\nexports.Container = Container;\n\n\n\n//////////////////\n// WEBPACK FOOTER\n// ./~/inversify/lib/container/container.js\n// module id = 48\n// module chunks = 0","\"use strict\";\nvar guid_1 = require(\"../utils/guid\");\nvar ContainerModule = (function () {\n    function ContainerModule(registry) {\n        this.guid = guid_1.guid();\n        this.registry = registry;\n    }\n    return ContainerModule;\n}());\nexports.ContainerModule = ContainerModule;\n\n\n\n//////////////////\n// WEBPACK FOOTER\n// ./~/inversify/lib/container/container_module.js\n// module id = 49\n// module chunks = 0","\"use strict\";\nvar ContainerSnapshot = (function () {\n    function ContainerSnapshot() {\n    }\n    ContainerSnapshot.of = function (bindings, middleware) {\n        var snapshot = new ContainerSnapshot();\n        snapshot.bindings = bindings;\n        snapshot.middleware = middleware;\n        return snapshot;\n    };\n    return ContainerSnapshot;\n}());\nexports.ContainerSnapshot = ContainerSnapshot;\n\n\n\n//////////////////\n// WEBPACK FOOTER\n// ./~/inversify/lib/container/container_snapshot.js\n// module id = 50\n// module chunks = 0","\"use strict\";\nvar ERROR_MSGS = require(\"../constants/error_msgs\");\nvar Lookup = (function () {\n    function Lookup() {\n        this._map = new Map();\n    }\n    Lookup.prototype.getMap = function () {\n        return this._map;\n    };\n    Lookup.prototype.add = function (serviceIdentifier, value) {\n        if (serviceIdentifier === null || serviceIdentifier === undefined) {\n            throw new Error(ERROR_MSGS.NULL_ARGUMENT);\n        }\n        ;\n        if (value === null || value === undefined) {\n            throw new Error(ERROR_MSGS.NULL_ARGUMENT);\n        }\n        ;\n        var entry = this._map.get(serviceIdentifier);\n        if (entry !== undefined) {\n            entry.push(value);\n            this._map.set(serviceIdentifier, entry);\n        }\n        else {\n            this._map.set(serviceIdentifier, [value]);\n        }\n    };\n    Lookup.prototype.get = function (serviceIdentifier) {\n        if (serviceIdentifier === null || serviceIdentifier === undefined) {\n            throw new Error(ERROR_MSGS.NULL_ARGUMENT);\n        }\n        var entry = this._map.get(serviceIdentifier);\n        if (entry !== undefined) {\n            return entry;\n        }\n        else {\n            throw new Error(ERROR_MSGS.KEY_NOT_FOUND);\n        }\n    };\n    Lookup.prototype.remove = function (serviceIdentifier) {\n        if (serviceIdentifier === null || serviceIdentifier === undefined) {\n            throw new Error(ERROR_MSGS.NULL_ARGUMENT);\n        }\n        if (!this._map.delete(serviceIdentifier)) {\n            throw new Error(ERROR_MSGS.KEY_NOT_FOUND);\n        }\n    };\n    Lookup.prototype.removeByCondition = function (condition) {\n        var _this = this;\n        this._map.forEach(function (entries, key) {\n            var updatedEntries = entries.filter(function (entry) { return !condition(entry); });\n            if (updatedEntries.length > 0) {\n                _this._map.set(key, updatedEntries);\n            }\n            else {\n                _this._map.delete(key);\n            }\n        });\n    };\n    Lookup.prototype.hasKey = function (serviceIdentifier) {\n        if (serviceIdentifier === null || serviceIdentifier === undefined) {\n            throw new Error(ERROR_MSGS.NULL_ARGUMENT);\n        }\n        return this._map.has(serviceIdentifier);\n    };\n    Lookup.prototype.clone = function () {\n        var copy = new Lookup();\n        this._map.forEach(function (value, key) {\n            value.forEach(function (b) { return copy.add(key, b.clone()); });\n        });\n        return copy;\n    };\n    Lookup.prototype.traverse = function (func) {\n        this._map.forEach(function (value, key) {\n            func(key, value);\n        });\n    };\n    ;\n    return Lookup;\n}());\nexports.Lookup = Lookup;\n\n\n\n//////////////////\n// WEBPACK FOOTER\n// ./~/inversify/lib/container/lookup.js\n// module id = 51\n// module chunks = 0","\"use strict\";\nvar guid_1 = require(\"../utils/guid\");\nvar Context = (function () {\n    function Context(container) {\n        this.guid = guid_1.guid();\n        this.container = container;\n    }\n    Context.prototype.addPlan = function (plan) {\n        this.plan = plan;\n    };\n    return Context;\n}());\nexports.Context = Context;\n\n\n\n//////////////////\n// WEBPACK FOOTER\n// ./~/inversify/lib/planning/context.js\n// module id = 52\n// module chunks = 0","\"use strict\";\nvar Plan = (function () {\n    function Plan(parentContext, rootRequest) {\n        this.parentContext = parentContext;\n        this.rootRequest = rootRequest;\n    }\n    return Plan;\n}());\nexports.Plan = Plan;\n\n\n\n//////////////////\n// WEBPACK FOOTER\n// ./~/inversify/lib/planning/plan.js\n// module id = 53\n// module chunks = 0","\"use strict\";\nvar plan_1 = require(\"./plan\");\nvar context_1 = require(\"./context\");\nvar request_1 = require(\"./request\");\nvar target_1 = require(\"./target\");\nvar binding_count_1 = require(\"../bindings/binding_count\");\nvar reflection_utils_1 = require(\"./reflection_utils\");\nvar metadata_1 = require(\"../planning/metadata\");\nvar ERROR_MSGS = require(\"../constants/error_msgs\");\nvar METADATA_KEY = require(\"../constants/metadata_keys\");\nvar literal_types_1 = require(\"../constants/literal_types\");\nvar serialization_1 = require(\"../utils/serialization\");\nfunction getBindingDictionary(cntnr) {\n    return cntnr._bindingDictionary;\n}\nexports.getBindingDictionary = getBindingDictionary;\nfunction _createTarget(isMultiInject, targetType, serviceIdentifier, name, key, value) {\n    var metadataKey = isMultiInject ? METADATA_KEY.MULTI_INJECT_TAG : METADATA_KEY.INJECT_TAG;\n    var injectMetadata = new metadata_1.Metadata(metadataKey, serviceIdentifier);\n    var target = new target_1.Target(targetType, name, serviceIdentifier, injectMetadata);\n    if (key !== undefined) {\n        var tagMetadata = new metadata_1.Metadata(key, value);\n        target.metadata.push(tagMetadata);\n    }\n    return target;\n}\nfunction _getActiveBindings(avoidConstraints, context, parentRequest, target) {\n    var bindings = getBindings(context.container, target.serviceIdentifier);\n    var activeBindings = [];\n    if (avoidConstraints === false) {\n        activeBindings = bindings.filter(function (binding) {\n            var request = new request_1.Request(binding.serviceIdentifier, context, parentRequest, binding, target);\n            return binding.constraint(request);\n        });\n    }\n    else {\n        activeBindings = bindings;\n    }\n    _validateActiveBindingCount(target.serviceIdentifier, activeBindings, target, context.container);\n    return activeBindings;\n}\nfunction _validateActiveBindingCount(serviceIdentifier, bindings, target, container) {\n    switch (bindings.length) {\n        case binding_count_1.BindingCount.NoBindingsAvailable:\n            if (target.isOptional() === true) {\n                return bindings;\n            }\n            else {\n                var serviceIdentifierString = serialization_1.getServiceIdentifierAsString(serviceIdentifier);\n                var msg = ERROR_MSGS.NOT_REGISTERED;\n                msg += serialization_1.listMetadataForTarget(serviceIdentifierString, target);\n                msg += serialization_1.listRegisteredBindingsForServiceIdentifier(container, serviceIdentifierString, getBindings);\n                throw new Error(msg);\n            }\n        case binding_count_1.BindingCount.OnlyOneBindingAvailable:\n            if (target.isArray() === false) {\n                return bindings;\n            }\n        case binding_count_1.BindingCount.MultipleBindingsAvailable:\n        default:\n            if (target.isArray() === false) {\n                var serviceIdentifierString = serialization_1.getServiceIdentifierAsString(serviceIdentifier), msg = ERROR_MSGS.AMBIGUOUS_MATCH + \" \" + serviceIdentifierString;\n                msg += serialization_1.listRegisteredBindingsForServiceIdentifier(container, serviceIdentifierString, getBindings);\n                throw new Error(msg);\n            }\n            else {\n                return bindings;\n            }\n    }\n}\nfunction _createSubRequests(avoidConstraints, serviceIdentifier, context, parentRequest, target) {\n    try {\n        var activeBindings = void 0;\n        var childRequest_1;\n        if (parentRequest === null) {\n            activeBindings = _getActiveBindings(avoidConstraints, context, null, target);\n            childRequest_1 = new request_1.Request(serviceIdentifier, context, null, activeBindings, target);\n            var plan_2 = new plan_1.Plan(context, childRequest_1);\n            context.addPlan(plan_2);\n        }\n        else {\n            activeBindings = _getActiveBindings(avoidConstraints, context, parentRequest, target);\n            childRequest_1 = parentRequest.addChildRequest(target.serviceIdentifier, activeBindings, target);\n        }\n        activeBindings.forEach(function (binding) {\n            var subChildRequest = null;\n            if (target.isArray()) {\n                subChildRequest = childRequest_1.addChildRequest(binding.serviceIdentifier, binding, target);\n            }\n            else {\n                subChildRequest = childRequest_1;\n            }\n            if (binding.type === literal_types_1.BindingTypeEnum.Instance && binding.implementationType !== null) {\n                var dependencies = reflection_utils_1.getDependencies(binding.implementationType);\n                dependencies.forEach(function (dependency) {\n                    _createSubRequests(false, dependency.serviceIdentifier, context, subChildRequest, dependency);\n                });\n            }\n        });\n    }\n    catch (error) {\n        if (error instanceof RangeError && parentRequest !== null) {\n            serialization_1.circularDependencyToException(parentRequest.parentContext.plan.rootRequest);\n        }\n        else {\n            throw new Error(error.message);\n        }\n    }\n}\nfunction getBindings(container, serviceIdentifier) {\n    var bindings = [];\n    var bindingDictionary = getBindingDictionary(container);\n    if (bindingDictionary.hasKey(serviceIdentifier)) {\n        bindings = bindingDictionary.get(serviceIdentifier);\n    }\n    else if (container.parent !== null) {\n        bindings = getBindings(container.parent, serviceIdentifier);\n    }\n    return bindings;\n}\nfunction plan(container, isMultiInject, targetType, serviceIdentifier, key, value, avoidConstraints) {\n    if (avoidConstraints === void 0) { avoidConstraints = false; }\n    var context = new context_1.Context(container);\n    var target = _createTarget(isMultiInject, targetType, serviceIdentifier, \"\", key, value);\n    _createSubRequests(avoidConstraints, serviceIdentifier, context, null, target);\n    return context;\n}\nexports.plan = plan;\nfunction createMockRequest(container, serviceIdentifier, key, value) {\n    var target = new target_1.Target(literal_types_1.TargetTypeEnum.Variable, \"\", serviceIdentifier, new metadata_1.Metadata(key, value));\n    var context = new context_1.Context(container);\n    var request = new request_1.Request(serviceIdentifier, context, null, [], target);\n    return request;\n}\nexports.createMockRequest = createMockRequest;\n\n\n\n//////////////////\n// WEBPACK FOOTER\n// ./~/inversify/lib/planning/planner.js\n// module id = 54\n// module chunks = 0","\"use strict\";\nvar QueryableString = (function () {\n    function QueryableString(str) {\n        this.str = str;\n    }\n    QueryableString.prototype.startsWith = function (searchString) {\n        return this.str.indexOf(searchString) === 0;\n    };\n    QueryableString.prototype.endsWith = function (searchString) {\n        var reverseString = \"\";\n        var reverseSearchString = searchString.split(\"\").reverse().join(\"\");\n        reverseString = this.str.split(\"\").reverse().join(\"\");\n        return this.startsWith.call({ str: reverseString }, reverseSearchString);\n    };\n    QueryableString.prototype.contains = function (searchString) {\n        return (this.str.indexOf(searchString) !== -1);\n    };\n    QueryableString.prototype.equals = function (compareString) {\n        return this.str === compareString;\n    };\n    QueryableString.prototype.value = function () {\n        return this.str;\n    };\n    return QueryableString;\n}());\nexports.QueryableString = QueryableString;\n\n\n\n//////////////////\n// WEBPACK FOOTER\n// ./~/inversify/lib/planning/queryable_string.js\n// module id = 55\n// module chunks = 0","\"use strict\";\nvar serialization_1 = require(\"../utils/serialization\");\nvar target_1 = require(\"./target\");\nvar ERROR_MSGS = require(\"../constants/error_msgs\");\nvar METADATA_KEY = require(\"../constants/metadata_keys\");\nvar literal_types_1 = require(\"../constants/literal_types\");\nfunction getDependencies(func) {\n    var constructorName = serialization_1.getFunctionName(func);\n    var targets = getTargets(func, false);\n    var baseClassDepencencyCount = getBaseClassDepencencyCount(func);\n    if (targets.length < baseClassDepencencyCount) {\n        var error = ERROR_MSGS.ARGUMENTS_LENGTH_MISMATCH_1 +\n            constructorName + ERROR_MSGS.ARGUMENTS_LENGTH_MISMATCH_2;\n        throw new Error(error);\n    }\n    return targets;\n}\nexports.getDependencies = getDependencies;\nfunction getTargets(func, isBaseClass) {\n    var constructorName = serialization_1.getFunctionName(func);\n    var serviceIdentifiers = Reflect.getMetadata(METADATA_KEY.PARAM_TYPES, func);\n    if (serviceIdentifiers === undefined) {\n        var msg = ERROR_MSGS.MISSING_INJECTABLE_ANNOTATION + \" \" + constructorName + \".\";\n        throw new Error(msg);\n    }\n    var constructorArgsMetadata = Reflect.getMetadata(METADATA_KEY.TAGGED, func) || [];\n    var targets = (getConstructorArgsAsTargets(isBaseClass, constructorName, serviceIdentifiers, constructorArgsMetadata, func.length)).concat((getClassPropsAsTargets(func)));\n    return targets;\n}\nfunction getConstructorArgsAsTargets(isBaseClass, constructorName, serviceIdentifiers, constructorArgsMetadata, constructorLength) {\n    var targets = [];\n    for (var i = 0; i < constructorLength; i++) {\n        var targetMetadata = constructorArgsMetadata[i.toString()] || [];\n        var metadata = formatTargetMetadata(targetMetadata);\n        var serviceIndentifier = serviceIdentifiers[i];\n        var hasInjectAnnotations = (metadata.inject || metadata.multiInject);\n        serviceIndentifier = (hasInjectAnnotations) ? (hasInjectAnnotations) : serviceIndentifier;\n        var isObject = serviceIndentifier === Object;\n        var isFunction = serviceIndentifier === Function;\n        var isUndefined = serviceIndentifier === undefined;\n        var isUnknownType = (isObject || isFunction || isUndefined);\n        if (isBaseClass === false && isUnknownType) {\n            var msg = ERROR_MSGS.MISSING_INJECT_ANNOTATION + \" argument \" + i + \" in class \" + constructorName + \".\";\n            throw new Error(msg);\n        }\n        var target = new target_1.Target(literal_types_1.TargetTypeEnum.ConstructorArgument, metadata.targetName, serviceIndentifier);\n        target.metadata = targetMetadata;\n        targets.push(target);\n    }\n    return targets;\n}\nfunction getClassPropsAsTargets(func) {\n    var classPropsMetadata = Reflect.getMetadata(METADATA_KEY.TAGGED_PROP, func) || [];\n    var targets = [];\n    var keys = Object.keys(classPropsMetadata);\n    for (var i = 0; i < keys.length; i++) {\n        var key = keys[i];\n        var targetMetadata = classPropsMetadata[key];\n        var metadata = formatTargetMetadata(classPropsMetadata[key]);\n        var targetName = metadata.targetName || key;\n        var serviceIndentifier = (metadata.inject || metadata.multiInject);\n        var target = new target_1.Target(literal_types_1.TargetTypeEnum.ClassProperty, targetName, serviceIndentifier);\n        target.metadata = targetMetadata;\n        targets.push(target);\n    }\n    var baseConstructor = Object.getPrototypeOf(func.prototype).constructor;\n    if (baseConstructor !== Object) {\n        var baseTargets = getClassPropsAsTargets(baseConstructor);\n        targets = targets.concat(baseTargets);\n    }\n    return targets;\n}\nfunction getBaseClassDepencencyCount(func) {\n    var baseConstructor = Object.getPrototypeOf(func.prototype).constructor;\n    if (baseConstructor !== Object) {\n        var targets = getTargets(baseConstructor, true);\n        var metadata = targets.map(function (t) {\n            return t.metadata.filter(function (m) {\n                return m.key === METADATA_KEY.UNMANAGED_TAG;\n            });\n        });\n        var unmanagedCount = [].concat.apply([], metadata).length;\n        var dependencyCount = targets.length - unmanagedCount;\n        if (dependencyCount > 0) {\n            return dependencyCount;\n        }\n        else {\n            return getBaseClassDepencencyCount(baseConstructor);\n        }\n    }\n    else {\n        return 0;\n    }\n}\nfunction formatTargetMetadata(targetMetadata) {\n    var targetMetadataMap = {};\n    targetMetadata.forEach(function (m) {\n        targetMetadataMap[m.key.toString()] = m.value;\n    });\n    return {\n        inject: targetMetadataMap[METADATA_KEY.INJECT_TAG],\n        multiInject: targetMetadataMap[METADATA_KEY.MULTI_INJECT_TAG],\n        targetName: targetMetadataMap[METADATA_KEY.NAME_TAG],\n        unmanaged: targetMetadataMap[METADATA_KEY.UNMANAGED_TAG]\n    };\n}\n\n\n\n//////////////////\n// WEBPACK FOOTER\n// ./~/inversify/lib/planning/reflection_utils.js\n// module id = 56\n// module chunks = 0","\"use strict\";\nvar guid_1 = require(\"../utils/guid\");\nvar Request = (function () {\n    function Request(serviceIdentifier, parentContext, parentRequest, bindings, target) {\n        this.guid = guid_1.guid();\n        this.serviceIdentifier = serviceIdentifier;\n        this.parentContext = parentContext;\n        this.parentRequest = parentRequest;\n        this.target = target;\n        this.childRequests = [];\n        this.bindings = (Array.isArray(bindings) ? bindings : [bindings]);\n    }\n    Request.prototype.addChildRequest = function (serviceIdentifier, bindings, target) {\n        var child = new Request(serviceIdentifier, this.parentContext, this, bindings, target);\n        this.childRequests.push(child);\n        return child;\n    };\n    return Request;\n}());\nexports.Request = Request;\n\n\n\n//////////////////\n// WEBPACK FOOTER\n// ./~/inversify/lib/planning/request.js\n// module id = 57\n// module chunks = 0","\"use strict\";\nvar literal_types_1 = require(\"../constants/literal_types\");\nfunction _injectProperties(instance, childRequests, resolveRequest) {\n    var propertyInjectionsRequests = childRequests.filter(function (childRequest) {\n        return (childRequest.target !== null && childRequest.target.type === literal_types_1.TargetTypeEnum.ClassProperty);\n    });\n    var propertyInjections = propertyInjectionsRequests.map(function (childRequest) {\n        return resolveRequest(childRequest);\n    });\n    propertyInjectionsRequests.forEach(function (r, index) {\n        var propertyName = \"\";\n        propertyName = r.target.name.value();\n        var injection = propertyInjections[index];\n        instance[propertyName] = injection;\n    });\n    return instance;\n}\nfunction _createInstance(Func, injections) {\n    return new (Func.bind.apply(Func, [void 0].concat(injections)))();\n}\nfunction resolveInstance(constr, childRequests, resolveRequest) {\n    var result = null;\n    if (childRequests.length > 0) {\n        var constructorInjectionsRequests = childRequests.filter(function (childRequest) {\n            return (childRequest.target !== null && childRequest.target.type === literal_types_1.TargetTypeEnum.ConstructorArgument);\n        });\n        var constructorInjections = constructorInjectionsRequests.map(function (childRequest) {\n            return resolveRequest(childRequest);\n        });\n        result = _createInstance(constr, constructorInjections);\n        result = _injectProperties(result, childRequests, resolveRequest);\n    }\n    else {\n        result = new constr();\n    }\n    return result;\n}\nexports.resolveInstance = resolveInstance;\n\n\n\n//////////////////\n// WEBPACK FOOTER\n// ./~/inversify/lib/resolution/instantiation.js\n// module id = 58\n// module chunks = 0","\"use strict\";\nvar literal_types_1 = require(\"../constants/literal_types\");\nvar serialization_1 = require(\"../utils/serialization\");\nvar instantiation_1 = require(\"./instantiation\");\nvar ERROR_MSGS = require(\"../constants/error_msgs\");\nfunction _resolveRequest(request) {\n    var bindings = request.bindings;\n    var childRequests = request.childRequests;\n    var targetIsAnAray = request.target && request.target.isArray();\n    var targetParentIsNotAnArray = !request.parentRequest ||\n        !request.parentRequest.target ||\n        !request.target ||\n        !request.parentRequest.target.matchesArray(request.target.serviceIdentifier);\n    if (targetIsAnAray && targetParentIsNotAnArray) {\n        return childRequests.map(function (childRequest) {\n            return _resolveRequest(childRequest);\n        });\n    }\n    else {\n        var result = null;\n        if (request.target.isOptional() === true && bindings.length === 0) {\n            return undefined;\n        }\n        var binding = bindings[0];\n        var isSingleton = binding.scope === literal_types_1.BindingScopeEnum.Singleton;\n        if (isSingleton && binding.activated === true) {\n            return binding.cache;\n        }\n        if (binding.type === literal_types_1.BindingTypeEnum.ConstantValue) {\n            result = binding.cache;\n        }\n        else if (binding.type === literal_types_1.BindingTypeEnum.Function) {\n            result = binding.cache;\n        }\n        else if (binding.type === literal_types_1.BindingTypeEnum.Constructor) {\n            result = binding.implementationType;\n        }\n        else if (binding.type === literal_types_1.BindingTypeEnum.DynamicValue && binding.dynamicValue !== null) {\n            result = binding.dynamicValue(request.parentContext);\n        }\n        else if (binding.type === literal_types_1.BindingTypeEnum.Factory && binding.factory !== null) {\n            result = binding.factory(request.parentContext);\n        }\n        else if (binding.type === literal_types_1.BindingTypeEnum.Provider && binding.provider !== null) {\n            result = binding.provider(request.parentContext);\n        }\n        else if (binding.type === literal_types_1.BindingTypeEnum.Instance && binding.implementationType !== null) {\n            result = instantiation_1.resolveInstance(binding.implementationType, childRequests, _resolveRequest);\n        }\n        else {\n            var serviceIdentifier = serialization_1.getServiceIdentifierAsString(request.serviceIdentifier);\n            throw new Error(ERROR_MSGS.INVALID_BINDING_TYPE + \" \" + serviceIdentifier);\n        }\n        if (typeof binding.onActivation === \"function\") {\n            result = binding.onActivation(request.parentContext, result);\n        }\n        if (isSingleton) {\n            binding.cache = result;\n            binding.activated = true;\n        }\n        return result;\n    }\n}\nfunction resolve(context) {\n    return _resolveRequest(context.plan.rootRequest);\n}\nexports.resolve = resolve;\n\n\n\n//////////////////\n// WEBPACK FOOTER\n// ./~/inversify/lib/resolution/resolver.js\n// module id = 59\n// module chunks = 0","\"use strict\";\nvar literal_types_1 = require(\"../constants/literal_types\");\nvar binding_when_on_syntax_1 = require(\"./binding_when_on_syntax\");\nvar BindingInSyntax = (function () {\n    function BindingInSyntax(binding) {\n        this._binding = binding;\n    }\n    BindingInSyntax.prototype.inSingletonScope = function () {\n        this._binding.scope = literal_types_1.BindingScopeEnum.Singleton;\n        return new binding_when_on_syntax_1.BindingWhenOnSyntax(this._binding);\n    };\n    BindingInSyntax.prototype.inTransientScope = function () {\n        this._binding.scope = literal_types_1.BindingScopeEnum.Transient;\n        return new binding_when_on_syntax_1.BindingWhenOnSyntax(this._binding);\n    };\n    return BindingInSyntax;\n}());\nexports.BindingInSyntax = BindingInSyntax;\n\n\n\n//////////////////\n// WEBPACK FOOTER\n// ./~/inversify/lib/syntax/binding_in_syntax.js\n// module id = 60\n// module chunks = 0","\"use strict\";\nvar binding_in_syntax_1 = require(\"./binding_in_syntax\");\nvar binding_when_syntax_1 = require(\"./binding_when_syntax\");\nvar binding_on_syntax_1 = require(\"./binding_on_syntax\");\nvar BindingInWhenOnSyntax = (function () {\n    function BindingInWhenOnSyntax(binding) {\n        this._binding = binding;\n        this._bindingWhenSyntax = new binding_when_syntax_1.BindingWhenSyntax(this._binding);\n        this._bindingOnSyntax = new binding_on_syntax_1.BindingOnSyntax(this._binding);\n        this._bindingInSyntax = new binding_in_syntax_1.BindingInSyntax(binding);\n    }\n    BindingInWhenOnSyntax.prototype.inSingletonScope = function () {\n        return this._bindingInSyntax.inSingletonScope();\n    };\n    BindingInWhenOnSyntax.prototype.inTransientScope = function () {\n        return this._bindingInSyntax.inTransientScope();\n    };\n    BindingInWhenOnSyntax.prototype.when = function (constraint) {\n        return this._bindingWhenSyntax.when(constraint);\n    };\n    BindingInWhenOnSyntax.prototype.whenTargetNamed = function (name) {\n        return this._bindingWhenSyntax.whenTargetNamed(name);\n    };\n    BindingInWhenOnSyntax.prototype.whenTargetIsDefault = function () {\n        return this._bindingWhenSyntax.whenTargetIsDefault();\n    };\n    BindingInWhenOnSyntax.prototype.whenTargetTagged = function (tag, value) {\n        return this._bindingWhenSyntax.whenTargetTagged(tag, value);\n    };\n    BindingInWhenOnSyntax.prototype.whenInjectedInto = function (parent) {\n        return this._bindingWhenSyntax.whenInjectedInto(parent);\n    };\n    BindingInWhenOnSyntax.prototype.whenParentNamed = function (name) {\n        return this._bindingWhenSyntax.whenParentNamed(name);\n    };\n    BindingInWhenOnSyntax.prototype.whenParentTagged = function (tag, value) {\n        return this._bindingWhenSyntax.whenParentTagged(tag, value);\n    };\n    BindingInWhenOnSyntax.prototype.whenAnyAncestorIs = function (ancestor) {\n        return this._bindingWhenSyntax.whenAnyAncestorIs(ancestor);\n    };\n    BindingInWhenOnSyntax.prototype.whenNoAncestorIs = function (ancestor) {\n        return this._bindingWhenSyntax.whenNoAncestorIs(ancestor);\n    };\n    BindingInWhenOnSyntax.prototype.whenAnyAncestorNamed = function (name) {\n        return this._bindingWhenSyntax.whenAnyAncestorNamed(name);\n    };\n    BindingInWhenOnSyntax.prototype.whenAnyAncestorTagged = function (tag, value) {\n        return this._bindingWhenSyntax.whenAnyAncestorTagged(tag, value);\n    };\n    BindingInWhenOnSyntax.prototype.whenNoAncestorNamed = function (name) {\n        return this._bindingWhenSyntax.whenNoAncestorNamed(name);\n    };\n    BindingInWhenOnSyntax.prototype.whenNoAncestorTagged = function (tag, value) {\n        return this._bindingWhenSyntax.whenNoAncestorTagged(tag, value);\n    };\n    BindingInWhenOnSyntax.prototype.whenAnyAncestorMatches = function (constraint) {\n        return this._bindingWhenSyntax.whenAnyAncestorMatches(constraint);\n    };\n    BindingInWhenOnSyntax.prototype.whenNoAncestorMatches = function (constraint) {\n        return this._bindingWhenSyntax.whenNoAncestorMatches(constraint);\n    };\n    BindingInWhenOnSyntax.prototype.onActivation = function (handler) {\n        return this._bindingOnSyntax.onActivation(handler);\n    };\n    return BindingInWhenOnSyntax;\n}());\nexports.BindingInWhenOnSyntax = BindingInWhenOnSyntax;\n\n\n\n//////////////////\n// WEBPACK FOOTER\n// ./~/inversify/lib/syntax/binding_in_when_on_syntax.js\n// module id = 61\n// module chunks = 0","\"use strict\";\nvar binding_in_when_on_syntax_1 = require(\"./binding_in_when_on_syntax\");\nvar binding_when_on_syntax_1 = require(\"./binding_when_on_syntax\");\nvar literal_types_1 = require(\"../constants/literal_types\");\nvar ERROR_MSGS = require(\"../constants/error_msgs\");\nvar BindingToSyntax = (function () {\n    function BindingToSyntax(binding) {\n        this._binding = binding;\n    }\n    BindingToSyntax.prototype.to = function (constructor) {\n        this._binding.type = literal_types_1.BindingTypeEnum.Instance;\n        this._binding.implementationType = constructor;\n        return new binding_in_when_on_syntax_1.BindingInWhenOnSyntax(this._binding);\n    };\n    BindingToSyntax.prototype.toSelf = function () {\n        if (typeof this._binding.serviceIdentifier !== \"function\") {\n            throw new Error(\"\" + ERROR_MSGS.INVALID_TO_SELF_VALUE);\n        }\n        var self = this._binding.serviceIdentifier;\n        return this.to(self);\n    };\n    BindingToSyntax.prototype.toConstantValue = function (value) {\n        this._binding.type = literal_types_1.BindingTypeEnum.ConstantValue;\n        this._binding.cache = value;\n        this._binding.dynamicValue = null;\n        this._binding.implementationType = null;\n        return new binding_when_on_syntax_1.BindingWhenOnSyntax(this._binding);\n    };\n    BindingToSyntax.prototype.toDynamicValue = function (func) {\n        this._binding.type = literal_types_1.BindingTypeEnum.DynamicValue;\n        this._binding.cache = null;\n        this._binding.dynamicValue = func;\n        this._binding.implementationType = null;\n        return new binding_in_when_on_syntax_1.BindingInWhenOnSyntax(this._binding);\n    };\n    BindingToSyntax.prototype.toConstructor = function (constructor) {\n        this._binding.type = literal_types_1.BindingTypeEnum.Constructor;\n        this._binding.implementationType = constructor;\n        return new binding_when_on_syntax_1.BindingWhenOnSyntax(this._binding);\n    };\n    BindingToSyntax.prototype.toFactory = function (factory) {\n        this._binding.type = literal_types_1.BindingTypeEnum.Factory;\n        this._binding.factory = factory;\n        return new binding_when_on_syntax_1.BindingWhenOnSyntax(this._binding);\n    };\n    BindingToSyntax.prototype.toFunction = function (func) {\n        if (typeof func !== \"function\") {\n            throw new Error(ERROR_MSGS.INVALID_FUNCTION_BINDING);\n        }\n        ;\n        var bindingWhenOnSyntax = this.toConstantValue(func);\n        this._binding.type = literal_types_1.BindingTypeEnum.Function;\n        return bindingWhenOnSyntax;\n    };\n    BindingToSyntax.prototype.toAutoFactory = function (serviceIdentifier) {\n        this._binding.type = literal_types_1.BindingTypeEnum.Factory;\n        this._binding.factory = function (context) {\n            return function () {\n                return context.container.get(serviceIdentifier);\n            };\n        };\n        return new binding_when_on_syntax_1.BindingWhenOnSyntax(this._binding);\n    };\n    BindingToSyntax.prototype.toProvider = function (provider) {\n        this._binding.type = literal_types_1.BindingTypeEnum.Provider;\n        this._binding.provider = provider;\n        return new binding_when_on_syntax_1.BindingWhenOnSyntax(this._binding);\n    };\n    return BindingToSyntax;\n}());\nexports.BindingToSyntax = BindingToSyntax;\n\n\n\n//////////////////\n// WEBPACK FOOTER\n// ./~/inversify/lib/syntax/binding_to_syntax.js\n// module id = 62\n// module chunks = 0","\"use strict\";\r\nObject.defineProperty(exports, \"__esModule\", { value: true });\r\n\n\n\n//////////////////\n// WEBPACK FOOTER\n// ./src/common/IHALParser.ts\n// module id = 63\n// module chunks = 0","\"use strict\";\r\nObject.defineProperty(exports, \"__esModule\", { value: true });\r\nvar tslib_1 = require(\"tslib\");\r\nvar uritemplate = require(\"uritemplate\");\r\nvar _1 = require(\"./\");\r\nvar contracts_1 = require(\"../core/contracts\");\r\nvar inversify_1 = require(\"inversify\");\r\nvar BaseRoute = (function () {\r\n    function BaseRoute(appOptions) {\r\n        this.appOptions = appOptions;\r\n        this.utility = new _1.Utility();\r\n        this.modelMapper = new _1.ModelMapper();\r\n    }\r\n    /**\r\n     * Parses resources route which can be expanded with additional options. Supported items are:\r\n     * - `searchQuery` - A string value used to identify resources using the phrase search.\r\n     * - `page` - A value used to set the page number, i.e. to retrieve certain resource subset from the storage.\r\n     * - `rpp` - A value used to limit the size of result set per page.\r\n     * - `sort` - A string used to set the resource property to sort the result collection by.\r\n     * - `embed` - Comma separated list of resources to be contained within the current representation.\r\n     * @method\r\n     * @returns Query resources uri with search params\r\n     * @example baasicBaseDefinition.find();\r\n     **/\r\n    BaseRoute.prototype.baseFind = function (route, options) {\r\n        var params = this.modelMapper.findParams(options);\r\n        return uritemplate.parse(route).expand(params);\r\n    };\r\n    /**\r\n      * Parses get resource route which must be expanded with the Id of the previously created resource in the system.\r\n      * @returns get resource uri\r\n      * @method\r\n      * @example baseRoute.get(route, id);\r\n      **/\r\n    BaseRoute.prototype.baseGet = function (route, id, options, propName) {\r\n        return uritemplate.parse(route).expand(this.modelMapper.getParams(id, options, propName));\r\n    };\r\n    /**\r\n      * Parses get resource route which must be expanded with the Id of the previously created resource in the system.\r\n      * @returns get resource uri\r\n      * @method\r\n      * @example baseRoute.create();\r\n      **/\r\n    BaseRoute.prototype.baseCreate = function (route, data) {\r\n        return uritemplate.parse(route).expand(data);\r\n    };\r\n    /**\r\n     * Parses get resource route.\r\n     * @returns update resource uri\r\n     * @method\r\n     * @example baseRoute.update();\r\n     */\r\n    BaseRoute.prototype.baseUpdate = function (route, data, options, linkName) {\r\n        var link = linkName ? linkName : 'put';\r\n        var params = this.modelMapper.updateParams(data);\r\n        var model = params[this.modelMapper.modelPropertyName];\r\n        if (typeof options === 'undefined') {\r\n            if (this.appOptions.enableHALJSON && model.links) {\r\n                return model.links(link).href;\r\n            }\r\n            else {\r\n                return uritemplate.parse(route).expand(model);\r\n            }\r\n        }\r\n        else {\r\n            var opt = this.utility.extend(model, options);\r\n            if (this.appOptions.enableHALJSON && model.links) {\r\n                return uritemplate.parse(model.links(link).href).expand(opt);\r\n            }\r\n            else {\r\n                return uritemplate.parse(route).expand(opt);\r\n            }\r\n        }\r\n    };\r\n    /**\r\n     * Parses delete resource route.\r\n     * @returns delete resource uri.\r\n     * @method\r\n     * @example baseRoute.delete();\r\n     */\r\n    BaseRoute.prototype.baseDelete = function (route, data, options, linkName) {\r\n        var link = linkName ? linkName : 'delete';\r\n        var params = this.modelMapper.removeParams(data);\r\n        var model = params[this.modelMapper.modelPropertyName];\r\n        if (typeof options === 'undefined') {\r\n            if (this.appOptions.enableHALJSON && model.links) {\r\n                return model.links(link).href;\r\n            }\r\n            else {\r\n                return uritemplate.parse(route).expand(model);\r\n            }\r\n        }\r\n        else {\r\n            var opt = this.utility.extend(model, options);\r\n            if (this.appOptions.enableHALJSON && model.links) {\r\n                return uritemplate.parse(model.links(link).href).expand(opt);\r\n            }\r\n            else {\r\n                return uritemplate.parse(route).expand(opt);\r\n            }\r\n        }\r\n    };\r\n    BaseRoute.prototype.createParams = function (data, prop) {\r\n        var propertyName = prop || this.modelMapper.modelPropertyName;\r\n        return this.modelMapper.createParams(data)[propertyName];\r\n    };\r\n    BaseRoute.prototype.updateParams = function (data) {\r\n        return this.modelMapper.updateParams(data)[this.modelMapper.modelPropertyName];\r\n    };\r\n    BaseRoute.prototype.deleteParams = function (data) {\r\n        return this.modelMapper.removeParams(data)[this.modelMapper.modelPropertyName];\r\n    };\r\n    /**\r\n     * Parses and expands URI templates based on [RFC6570](http://tools.ietf.org/html/rfc6570) specifications. For more information please visit the project [GitHub](https://github.com/Baasic/uritemplate-js) page.\r\n     * @method\r\n     * @example baseRoute.parse('<route>/{?embed,fields,options}').expand({embed: '<embedded-resource>'});\r\n     **/\r\n    BaseRoute.prototype.parse = function (route) {\r\n        return uritemplate.parse(route);\r\n    };\r\n    return BaseRoute;\r\n}());\r\nBaseRoute = tslib_1.__decorate([\r\n    inversify_1.injectable(),\r\n    tslib_1.__metadata(\"design:paramtypes\", [typeof (_a = typeof contracts_1.IAppOptions !== \"undefined\" && contracts_1.IAppOptions) === \"function\" && _a || Object])\r\n], BaseRoute);\r\nexports.BaseRoute = BaseRoute;\r\nvar _a;\r\n/**\r\n * @copyright (c) 2017 Mono Ltd\r\n * @license MIT\r\n * @author Mono Ltd\r\n * @overview\r\n ***Notes:**\r\n - Refer to the [Baasic REST API](http://dev.baasic.com/api/reference/home) for detailed information about available Baasic REST API end-points.\r\n - [URI Template](https://github.com/Baasic/uritemplate-js) syntax enables expanding the Baasic route templates to Baasic REST URIs providing it with an object that contains URI parameters.\r\n - All end-point objects are transformed by the associated route service.\r\n */ \r\n\n\n\n//////////////////\n// WEBPACK FOOTER\n// ./src/common/baseRoute.ts\n// module id = 64\n// module chunks = 0","\"use strict\";\r\nObject.defineProperty(exports, \"__esModule\", { value: true });\r\n\n\n\n//////////////////\n// WEBPACK FOOTER\n// ./src/common/contracts/IACL.ts\n// module id = 65\n// module chunks = 0","\"use strict\";\r\nObject.defineProperty(exports, \"__esModule\", { value: true });\r\n\n\n\n//////////////////\n// WEBPACK FOOTER\n// ./src/common/contracts/IACLAction.ts\n// module id = 66\n// module chunks = 0","\"use strict\";\r\nObject.defineProperty(exports, \"__esModule\", { value: true });\r\n\n\n\n//////////////////\n// WEBPACK FOOTER\n// ./src/common/contracts/IACLOptions.ts\n// module id = 67\n// module chunks = 0","\"use strict\";\r\nObject.defineProperty(exports, \"__esModule\", { value: true });\r\n\n\n\n//////////////////\n// WEBPACK FOOTER\n// ./src/common/contracts/IACLPolicy.ts\n// module id = 68\n// module chunks = 0","\"use strict\";\r\nObject.defineProperty(exports, \"__esModule\", { value: true });\r\n\n\n\n//////////////////\n// WEBPACK FOOTER\n// ./src/common/contracts/IACLRole.ts\n// module id = 69\n// module chunks = 0","\"use strict\";\r\nObject.defineProperty(exports, \"__esModule\", { value: true });\r\n\n\n\n//////////////////\n// WEBPACK FOOTER\n// ./src/common/contracts/IACLUser.ts\n// module id = 70\n// module chunks = 0","\"use strict\";\r\nObject.defineProperty(exports, \"__esModule\", { value: true });\r\n\n\n\n//////////////////\n// WEBPACK FOOTER\n// ./src/common/contracts/IGetRequestOptions.ts\n// module id = 71\n// module chunks = 0","\"use strict\";\r\nObject.defineProperty(exports, \"__esModule\", { value: true });\r\n\n\n\n//////////////////\n// WEBPACK FOOTER\n// ./src/common/contracts/IModel.ts\n// module id = 72\n// module chunks = 0","\"use strict\";\r\nObject.defineProperty(exports, \"__esModule\", { value: true });\r\n\n\n\n//////////////////\n// WEBPACK FOOTER\n// ./src/common/contracts/IOptions.ts\n// module id = 73\n// module chunks = 0","\"use strict\";\r\nObject.defineProperty(exports, \"__esModule\", { value: true });\r\n\n\n\n//////////////////\n// WEBPACK FOOTER\n// ./src/common/contracts/IQueryModel.ts\n// module id = 74\n// module chunks = 0","\"use strict\";\r\nObject.defineProperty(exports, \"__esModule\", { value: true });\r\n\n\n\n//////////////////\n// WEBPACK FOOTER\n// ./src/common/contracts/IQueryOptions.ts\n// module id = 75\n// module chunks = 0","\"use strict\";\r\nObject.defineProperty(exports, \"__esModule\", { value: true });\r\n\n\n\n//////////////////\n// WEBPACK FOOTER\n// ./src/common/contracts/IResponse.ts\n// module id = 76\n// module chunks = 0","\"use strict\";\r\nfunction __export(m) {\r\n    for (var p in m) if (!exports.hasOwnProperty(p)) exports[p] = m[p];\r\n}\r\nObject.defineProperty(exports, \"__esModule\", { value: true });\r\n__export(require(\"./IModel\"));\r\n__export(require(\"./IQueryModel\"));\r\n__export(require(\"./IOptions\"));\r\n__export(require(\"./IACL\"));\r\n__export(require(\"./IACLAction\"));\r\n__export(require(\"./IACLRole\"));\r\n__export(require(\"./IACLUser\"));\r\n__export(require(\"./IACLOptions\"));\r\n__export(require(\"./IACLPolicy\"));\r\n__export(require(\"./IResponse\"));\r\n__export(require(\"./IGetRequestOptions\"));\r\n__export(require(\"./IQueryOptions\"));\r\n\n\n\n//////////////////\n// WEBPACK FOOTER\n// ./src/common/contracts/index.ts\n// module id = 77\n// module chunks = 0","\"use strict\";\r\nObject.defineProperty(exports, \"__esModule\", { value: true });\r\nvar _1 = require(\"./\");\r\nvar utility = new _1.Utility();\r\n//HAL Parser is based on https://github.com/Baasic/angular-hal & https://github.com/jasonaden/angular-hal implementation. Parser is used to parse [HAL (Hyptertext Application Language)](http://stateless.co/hal_specification.html) JSON structures into usable JavaScript objects.\r\nvar __bind = function (fn, me) { return function () { return fn.apply(me, arguments); }; };\r\nvar removeNamespace;\r\nremoveNamespace = function (name, ns) {\r\n    ns = ns ? ns + ':' : '';\r\n    if (ns) { }\r\n    if (name.substr(0, ns.length) === ns) {\r\n        return name.substr(ns.length);\r\n    }\r\n    else {\r\n        return name;\r\n    }\r\n};\r\nvar Link, Links, Resource;\r\nfunction Parser(ns) {\r\n    this.ns = ns;\r\n    this.parse = __bind(this.parse, this);\r\n}\r\nParser.prototype.parse = function (hal) {\r\n    var json, _embedded, _links;\r\n    json = utility.extend(hal);\r\n    _links = json._links, _embedded = json._embedded;\r\n    delete json._links;\r\n    delete json._embedded;\r\n    return new Resource(json, _links, _embedded, this.ns);\r\n};\r\nResource = (function () {\r\n    function Resource(data, links, embedded, ns) {\r\n        var em, name, prop, resourceLinks;\r\n        ns = ns ? ns : '';\r\n        utility.extend(this, data);\r\n        resourceLinks = links ? new Links(links) : {};\r\n        for (name in embedded) {\r\n            prop = embedded[name];\r\n            this[removeNamespace(name, ns)] = (function () {\r\n                var _i, _len, _results;\r\n                if (prop) {\r\n                    if (Array.isArray(prop)) {\r\n                        _results = [];\r\n                        for (_i = 0, _len = prop.length; _i < _len; _i++) {\r\n                            em = prop[_i];\r\n                            _results.push(new Parser(ns).parse(em, ns));\r\n                        }\r\n                        return _results;\r\n                    }\r\n                    else {\r\n                        return new Parser(ns).parse(prop, ns);\r\n                    }\r\n                }\r\n            })();\r\n        }\r\n        this.links = function (name) {\r\n            var key;\r\n            if (name == null) {\r\n                name = '';\r\n            }\r\n            key = name === 'self' ? name : resourceLinks[name] ? name : ns + ':' + name;\r\n            if (resourceLinks[key]) {\r\n                return resourceLinks[key];\r\n            }\r\n            else {\r\n                return resourceLinks;\r\n            }\r\n        };\r\n    }\r\n    return Resource;\r\n})();\r\nLinks = (function () {\r\n    function Links(links, ns) {\r\n        var link, lk, name;\r\n        if (!(links != null ? links.self : void 0)) {\r\n            console.log('Self link is missing.');\r\n        }\r\n        for (name in links) {\r\n            link = links[name];\r\n            this[name] = (function () {\r\n                var _i, _len, _results;\r\n                if (Array.isArray(link)) {\r\n                    _results = [];\r\n                    for (_i = 0, _len = link.length; _i < _len; _i++) {\r\n                        lk = link[_i];\r\n                        _results.push(new Link(lk, ns));\r\n                    }\r\n                    return _results;\r\n                }\r\n                else {\r\n                    return new Link(link, ns);\r\n                }\r\n            })();\r\n        }\r\n    }\r\n    return Links;\r\n})();\r\nLink = (function () {\r\n    function Link(link, ns) {\r\n        if (!(link != null ? link.href : void 0)) {\r\n            throw 'href is required for all links';\r\n        }\r\n        this.href = link.href, this.name = link.name, this.profile = link.profile;\r\n        this.templated = !!link.templated;\r\n        this.title = link.title || '';\r\n    }\r\n    return Link;\r\n})();\r\nvar HALParser;\r\nexports.HALParser = HALParser;\r\nexports.HALParser = HALParser = new Parser('JavaScriptSDK');\r\n\n\n\n//////////////////\n// WEBPACK FOOTER\n// ./src/common/halParser.ts\n// module id = 78\n// module chunks = 0","/**\r\n * @module modelMapper\r\n * @description This service is used to perform low level model or option transformations before they are sent to the Baasic back-end.\r\n **/\r\n\"use strict\";\r\nObject.defineProperty(exports, \"__esModule\", { value: true });\r\nvar _1 = require(\"./\");\r\nvar ModelMapper = (function () {\r\n    function ModelMapper() {\r\n        this.idPropertyName = 'id';\r\n        this.modelPropertyName = 'model';\r\n        this.utility = new _1.Utility();\r\n    }\r\n    ModelMapper.prototype.FindParams = function (options) {\r\n        var object = {};\r\n        if (this.utility.isObject(options)) {\r\n            this.utility.extend(object, options);\r\n            if (options.hasOwnProperty('orderBy') && options.hasOwnProperty('orderDirection')) {\r\n                object.sort = options.orderBy ? options.orderBy + '|' + options.orderDirection : null;\r\n            }\r\n            if (options.hasOwnProperty('search')) {\r\n                object.searchQuery = options.search;\r\n            }\r\n            if (options.hasOwnProperty('pageNumber')) {\r\n                object.page = options.pageNumber;\r\n            }\r\n            if (options.hasOwnProperty('pageSize')) {\r\n                object.rpp = options.pageSize;\r\n            }\r\n        }\r\n        else {\r\n            object.searchQuery = options;\r\n        }\r\n        return object;\r\n    };\r\n    ModelMapper.prototype.KeyParams = function (id, options, propName) {\r\n        var object = {};\r\n        if (this.utility.isObject(id)) {\r\n            this.utility.extend(object, id);\r\n        }\r\n        else {\r\n            if (propName !== undefined) {\r\n                object[propName] = id;\r\n            }\r\n            else {\r\n                object[this.idPropertyName] = id;\r\n            }\r\n        }\r\n        if (options !== undefined && this.utility.isObject(options)) {\r\n            this.utility.extend(object, options);\r\n        }\r\n        return object;\r\n    };\r\n    ModelMapper.prototype.ModelParams = function (data) {\r\n        var object = {};\r\n        if (data && data.hasOwnProperty(this.modelPropertyName)) {\r\n            this.utility.extend(object, data);\r\n        }\r\n        else {\r\n            object[this.modelPropertyName] = data;\r\n        }\r\n        return object;\r\n    };\r\n    /**\r\n     * Parses Baasic Api pagination, sorting and search parameters.\r\n     * @param options query resources options object\r\n     * @method\r\n     * @example modelMapper.findParams({ pageNumber:1, pageSize:10 });\r\n     **/\r\n    ModelMapper.prototype.findParams = function (options) {\r\n        return this.FindParams(options);\r\n    };\r\n    /**\r\n     * Parses specified key parameters; initial object can be expanded with additional parameters.\r\n     * @param id Resources unique identifier\r\n     * @param options query resources options object\r\n     * @param propName property name\r\n     * @method\r\n     * @example modelMapper.getParams(('<value>', {additionalOptions: '<option>'},'<property-name>'));\r\n     **/\r\n    ModelMapper.prototype.getParams = function (id, options, propName) {\r\n        return this.KeyParams(id, options, propName);\r\n    };\r\n    /**\r\n     * Performs create resource transforms on an object so that it can be safely expanded with additional properties.\r\n     * @param data data object\r\n     * @method\r\n     * @example modelMapper.createParams({});\r\n     **/\r\n    ModelMapper.prototype.createParams = function (data) {\r\n        return this.ModelParams(data);\r\n    };\r\n    /**\r\n     * Performs update resource transforms on transforms an object so that it can be safely expanded with additional properties.\r\n     * @param data data object\r\n     * @method\r\n     * @example modelMapper.updateParams({});\r\n     **/\r\n    ModelMapper.prototype.updateParams = function (data) {\r\n        return this.ModelParams(data);\r\n    };\r\n    /**\r\n     * Performs remove resource transforms on transforms an object so that it can be safely expanded with additional properties.\r\n     * @param data data object\r\n     * @method\r\n     * @example modelMapper.removeParams({});\r\n     **/\r\n    ModelMapper.prototype.removeParams = function (data) {\r\n        return this.ModelParams(data);\r\n    };\r\n    return ModelMapper;\r\n}());\r\nexports.ModelMapper = ModelMapper;\r\n\n\n\n//////////////////\n// WEBPACK FOOTER\n// ./src/common/modelMapper.ts\n// module id = 79\n// module chunks = 0","\"use strict\";\r\nObject.defineProperty(exports, \"__esModule\", { value: true });\r\nvar tslib_1 = require(\"tslib\");\r\nvar inversify_1 = require(\"inversify\");\r\nvar Utility = (function () {\r\n    function Utility() {\r\n    }\r\n    /**\r\n     * Order an array by specified order type.\r\n     * @param values of T type\r\n     * @param orderType property name\r\n     * @returns ordered array.\r\n     */\r\n    Utility.prototype.OrderByArray = function (values, orderType) {\r\n        return values.sort(function (a, b) {\r\n            if (a[orderType] < b[orderType]) {\r\n                return -1;\r\n            }\r\n            if (a[orderType] > b[orderType]) {\r\n                return 1;\r\n            }\r\n            return 0;\r\n        });\r\n    };\r\n    /**\r\n     * Checks if provided value is javascript object.\r\n     * @param value any given value\r\n     * @returns true if provided value is object, otherwise false.\r\n     */\r\n    Utility.prototype.isObject = function (value) {\r\n        return value !== null && typeof value === 'object';\r\n    };\r\n    Utility.prototype.isUndefined = function (value) {\r\n        return typeof value === 'undefined';\r\n    };\r\n    /**\r\n     * Copies properties from source object to destination object.\r\n     * @param dstObj destination object\r\n     * @param srcObj source object\r\n     * @returns destination object with new properties from source object.\r\n     */\r\n    Utility.prototype.extend = function (dstObj) {\r\n        var srcObj = [];\r\n        for (var _i = 1; _i < arguments.length; _i++) {\r\n            srcObj[_i - 1] = arguments[_i];\r\n        }\r\n        var newObj = dstObj;\r\n        for (var _a = 0, srcObj_1 = srcObj; _a < srcObj_1.length; _a++) {\r\n            var obj = srcObj_1[_a];\r\n            for (var key in obj) {\r\n                //copy all the fields\r\n                newObj[key] = obj[key];\r\n            }\r\n        }\r\n        return newObj;\r\n    };\r\n    /**\r\n     * Copies properties from source object to destination object.\r\n     * @param dstObj destination object\r\n     * @param srcObj source object\r\n     * @returns destination object with new properties from source object.\r\n     */\r\n    Utility.prototype.extendAs = function (dstObj) {\r\n        var srcObj = [];\r\n        for (var _i = 1; _i < arguments.length; _i++) {\r\n            srcObj[_i - 1] = arguments[_i];\r\n        }\r\n        srcObj.unshift(dstObj);\r\n        return this.extend.apply(this, srcObj);\r\n    };\r\n    return Utility;\r\n}());\r\nUtility = tslib_1.__decorate([\r\n    inversify_1.injectable(),\r\n    tslib_1.__metadata(\"design:paramtypes\", [])\r\n], Utility);\r\nexports.Utility = Utility;\r\n\n\n\n//////////////////\n// WEBPACK FOOTER\n// ./src/common/utility.ts\n// module id = 80\n// module chunks = 0","\"use strict\";\r\nObject.defineProperty(exports, \"__esModule\", { value: true });\r\nvar tslib_1 = require(\"tslib\");\r\nvar common_1 = require(\"../../common\");\r\nvar contracts_1 = require(\"../contracts\");\r\nvar inversify_1 = require(\"inversify\");\r\nvar utility = new common_1.Utility();\r\nvar BrowserEventHandler = (function () {\r\n    function BrowserEventHandler(storageHandler, application) {\r\n        this.storageHandler = storageHandler;\r\n        this.application = application;\r\n        this.messageBusKey = 'baasic-message-bus-' + this.application.getApiKey();\r\n        var jQueryLoaded = window.jQuery;\r\n        if (jQueryLoaded) {\r\n            this.triggerEvent = function (eventName, data) {\r\n                var event = utility.extend($.Event(eventName), data);\r\n                $(document).trigger(event);\r\n            };\r\n        }\r\n        else if (CustomEvent && typeof CustomEvent === 'function') {\r\n            this.triggerEvent = function (eventName, data) {\r\n                var event = utility.extend(new CustomEvent(eventName), data);\r\n                document.dispatchEvent(event);\r\n            };\r\n        }\r\n        else if (document.createEvent) {\r\n            this.triggerEvent = function (eventName, data) {\r\n                var event = utility.extend(document.createEvent('CustomEvent'), data);\r\n                event.initEvent(eventName, true, true);\r\n                document.dispatchEvent(event);\r\n            };\r\n        }\r\n        else {\r\n            this.triggerEvent = function (eventName, data) {\r\n                var doc = document;\r\n                var event = utility.extend(doc.createEventObject(), data);\r\n                event.eventType = eventName;\r\n                doc.fireEvent('on' + event.eventType, event);\r\n            };\r\n        }\r\n        if (jQueryLoaded) {\r\n            this.addEvent = function (eventName, func) { return $(window).on(eventName, func); };\r\n        }\r\n        else if (window.addEventListener) {\r\n            this.addEvent = function (eventName, func) { return window.addEventListener(eventName, func, false); };\r\n        }\r\n        else if (window.attachEvent) {\r\n            this.addEvent = function (eventName, func) { return window.attachEvent('on' + eventName, func); };\r\n        }\r\n        else {\r\n            this.addEvent = function (eventName, func) { return window['on' + eventName] = func; };\r\n        }\r\n        this.initEventing();\r\n    }\r\n    BrowserEventHandler.prototype.pushMessage = function (message, args) {\r\n        this.storageHandler.remove(this.messageBusKey);\r\n        this.storageHandler.set(this.messageBusKey, JSON.stringify({\r\n            message: message,\r\n            args: args\r\n        }));\r\n    };\r\n    BrowserEventHandler.prototype.initEventing = function () {\r\n        this.addEvent('storage', function (e) {\r\n            e = e || event;\r\n            if (e.originalEvent) {\r\n                e = e.originalEvent;\r\n            }\r\n            if (e.key === this.messageBusKey) {\r\n                var value = e.newValue;\r\n                if (value && value !== '') {\r\n                    var data = JSON.parse(value);\r\n                    this.eventHandler.triggerEvent(data.message.type, this.utility.extend(data.args, { app: this.application }));\r\n                }\r\n            }\r\n        });\r\n    };\r\n    return BrowserEventHandler;\r\n}());\r\nBrowserEventHandler = tslib_1.__decorate([\r\n    inversify_1.injectable(),\r\n    tslib_1.__param(0, inversify_1.inject(contracts_1.TYPES.IStorageHandler)),\r\n    tslib_1.__param(1, inversify_1.inject(contracts_1.TYPES.IBaasicApp)),\r\n    tslib_1.__metadata(\"design:paramtypes\", [typeof (_a = typeof contracts_1.IStorageHandler !== \"undefined\" && contracts_1.IStorageHandler) === \"function\" && _a || Object, typeof (_b = typeof contracts_1.IBaasicApp !== \"undefined\" && contracts_1.IBaasicApp) === \"function\" && _b || Object])\r\n], BrowserEventHandler);\r\nexports.BrowserEventHandler = BrowserEventHandler;\r\n;\r\nvar _a, _b;\r\n\n\n\n//////////////////\n// WEBPACK FOOTER\n// ./src/core/browserEvents/browserEventHandler.ts\n// module id = 81\n// module chunks = 0","\"use strict\";\r\nfunction __export(m) {\r\n    for (var p in m) if (!exports.hasOwnProperty(p)) exports[p] = m[p];\r\n}\r\nObject.defineProperty(exports, \"__esModule\", { value: true });\r\n__export(require(\"./browserEventHandler\"));\r\n\n\n\n//////////////////\n// WEBPACK FOOTER\n// ./src/core/browserEvents/index.ts\n// module id = 82\n// module chunks = 0","\"use strict\";\r\nObject.defineProperty(exports, \"__esModule\", { value: true });\r\n\n\n\n//////////////////\n// WEBPACK FOOTER\n// ./src/core/contracts/IAppOptions.ts\n// module id = 83\n// module chunks = 0","\"use strict\";\r\nObject.defineProperty(exports, \"__esModule\", { value: true });\r\n\n\n\n//////////////////\n// WEBPACK FOOTER\n// ./src/core/contracts/IBaasicApp.ts\n// module id = 84\n// module chunks = 0","\"use strict\";\r\nObject.defineProperty(exports, \"__esModule\", { value: true });\r\n\n\n\n//////////////////\n// WEBPACK FOOTER\n// ./src/core/contracts/IBaasicAppOptions.ts\n// module id = 85\n// module chunks = 0","\"use strict\";\r\nObject.defineProperty(exports, \"__esModule\", { value: true });\r\n\n\n\n//////////////////\n// WEBPACK FOOTER\n// ./src/core/contracts/IBaasicOptions.ts\n// module id = 86\n// module chunks = 0","\"use strict\";\r\nObject.defineProperty(exports, \"__esModule\", { value: true });\r\n\n\n\n//////////////////\n// WEBPACK FOOTER\n// ./src/core/contracts/IDefaultStorageConfig.ts\n// module id = 87\n// module chunks = 0","\"use strict\";\r\nObject.defineProperty(exports, \"__esModule\", { value: true });\r\n\n\n\n//////////////////\n// WEBPACK FOOTER\n// ./src/core/contracts/IEventHandler.ts\n// module id = 88\n// module chunks = 0","\"use strict\";\r\nObject.defineProperty(exports, \"__esModule\", { value: true });\r\n\n\n\n//////////////////\n// WEBPACK FOOTER\n// ./src/core/contracts/IStorageHandler.ts\n// module id = 89\n// module chunks = 0","\"use strict\";\r\nObject.defineProperty(exports, \"__esModule\", { value: true });\r\nexports.TokenTypes = {\r\n    Access: 'access',\r\n    Refresh: 'refresh'\r\n};\r\n\n\n\n//////////////////\n// WEBPACK FOOTER\n// ./src/core/contracts/IToken.ts\n// module id = 90\n// module chunks = 0","\"use strict\";\r\nObject.defineProperty(exports, \"__esModule\", { value: true });\r\n\n\n\n//////////////////\n// WEBPACK FOOTER\n// ./src/core/contracts/ITokenHandler.ts\n// module id = 91\n// module chunks = 0","\"use strict\";\r\nObject.defineProperty(exports, \"__esModule\", { value: true });\r\n\n\n\n//////////////////\n// WEBPACK FOOTER\n// ./src/core/contracts/IUser.ts\n// module id = 92\n// module chunks = 0","\"use strict\";\r\nObject.defineProperty(exports, \"__esModule\", { value: true });\r\n\n\n\n//////////////////\n// WEBPACK FOOTER\n// ./src/core/contracts/IUserHandler.ts\n// module id = 93\n// module chunks = 0","\"use strict\";\r\nObject.defineProperty(exports, \"__esModule\", { value: true });\r\nvar TYPES = {\r\n    IBaasicAppOptions: Symbol(\"IBaasicAppOptions\"),\r\n    IAppOptions: Symbol(\"IAppOptions\"),\r\n    IStorageHandler: Symbol(\"IStorageHandler\"),\r\n    IEventHandler: Symbol(\"IEventHandler\"),\r\n    ITokenHandler: Symbol(\"ITokenHandler\"),\r\n    IUserHandler: Symbol(\"IUserHandler\"),\r\n    IBaasicApp: Symbol(\"IBaasicApp\"),\r\n    IDefaultStorageConfig: Symbol(\"IDefaultStorageConfig\")\r\n};\r\nexports.TYPES = TYPES;\r\n\n\n\n//////////////////\n// WEBPACK FOOTER\n// ./src/core/contracts/diModule.ts\n// module id = 94\n// module chunks = 0","\"use strict\";\r\nObject.defineProperty(exports, \"__esModule\", { value: true });\r\nvar inversify_1 = require(\"inversify\");\r\nvar contracts_1 = require(\"./contracts\");\r\nvar _1 = require(\"./\");\r\nvar diModule = new inversify_1.ContainerModule(function (bind) {\r\n    bind(contracts_1.TYPES.ITokenHandler).to(_1.TokenHandler);\r\n    bind(contracts_1.TYPES.IUserHandler).to(_1.UserHandler);\r\n});\r\nexports.diModule = diModule;\r\n\n\n\n//////////////////\n// WEBPACK FOOTER\n// ./src/core/diModule.ts\n// module id = 95\n// module chunks = 0","\"use strict\";\r\nObject.defineProperty(exports, \"__esModule\", { value: true });\r\nvar tslib_1 = require(\"tslib\");\r\nvar contracts_1 = require(\"../contracts\");\r\nvar inversify_1 = require(\"inversify\");\r\nvar LocalStorageHandler = (function () {\r\n    function LocalStorageHandler(config) {\r\n        config = config || {};\r\n        if (!localStorage) {\r\n            throw new Error(\"Local storage not found.\");\r\n        }\r\n        var parseKey = config.keyGenerator;\r\n        var getHandler;\r\n        if (parseKey) {\r\n            getHandler = function (fn) { return function () { arguments[0] = parseKey(arguments[0]); return fn.apply(this, arguments); }; };\r\n        }\r\n        else {\r\n            getHandler = function (fn) { return fn; };\r\n        }\r\n        this.clear = localStorage.clear;\r\n        this.remove = getHandler(this.removeItem);\r\n        this.set = getHandler(this.setItem);\r\n        this.get = getHandler(this.getItem);\r\n    }\r\n    LocalStorageHandler.prototype.removeItem = function (key) {\r\n        localStorage.removeItem(key);\r\n    };\r\n    LocalStorageHandler.prototype.getItem = function (key) {\r\n        return JSON.parse(localStorage.getItem(key));\r\n    };\r\n    LocalStorageHandler.prototype.setItem = function (key, data) {\r\n        localStorage.setItem(key, JSON.stringify(data));\r\n    };\r\n    return LocalStorageHandler;\r\n}());\r\nLocalStorageHandler = tslib_1.__decorate([\r\n    inversify_1.injectable(),\r\n    tslib_1.__param(0, inversify_1.inject(contracts_1.TYPES.IDefaultStorageConfig)), tslib_1.__param(0, inversify_1.optional()),\r\n    tslib_1.__metadata(\"design:paramtypes\", [typeof (_a = typeof contracts_1.IDefaultStorageConfig !== \"undefined\" && contracts_1.IDefaultStorageConfig) === \"function\" && _a || Object])\r\n], LocalStorageHandler);\r\nexports.LocalStorageHandler = LocalStorageHandler;\r\n;\r\nvar _a;\r\n\n\n\n//////////////////\n// WEBPACK FOOTER\n// ./src/core/localStorage/LocalStorageHandler.ts\n// module id = 96\n// module chunks = 0","\"use strict\";\r\nfunction __export(m) {\r\n    for (var p in m) if (!exports.hasOwnProperty(p)) exports[p] = m[p];\r\n}\r\nObject.defineProperty(exports, \"__esModule\", { value: true });\r\n__export(require(\"./LocalStorageHandler\"));\r\n\n\n\n//////////////////\n// WEBPACK FOOTER\n// ./src/core/localStorage/index.ts\n// module id = 97\n// module chunks = 0","\"use strict\";\r\nObject.defineProperty(exports, \"__esModule\", { value: true });\r\nvar tslib_1 = require(\"tslib\");\r\nvar common_1 = require(\"../common\");\r\nvar contracts_1 = require(\"./contracts\");\r\nvar inversify_1 = require(\"inversify\");\r\nvar TokenHandler = (function () {\r\n    function TokenHandler(eventHandler, storageHandler, application) {\r\n        this.eventHandler = eventHandler;\r\n        this.storageHandler = storageHandler;\r\n        this.application = application;\r\n        this.utility = new common_1.Utility();\r\n        this.messageTypes = {\r\n            tokenExpired: 'tokenExpired',\r\n            tokenUpdated: 'tokenUpdated'\r\n        };\r\n        this.initEventing();\r\n        this.tokenKey = 'baasic-auth-token-' + this.application.getApiKey();\r\n        this.token = this.get(contracts_1.TokenTypes.Access);\r\n        if (this.token) {\r\n            this.userAccessTokenTimerHandle = this.setExpirationTimer(this.token);\r\n        }\r\n    }\r\n    TokenHandler.prototype.store = function (token) {\r\n        //Type guard for plain JavaScript\r\n        var anyToken = token;\r\n        if (anyToken && !this.utility.isUndefined(anyToken.access_token)) {\r\n            var t = {\r\n                token: anyToken.access_token,\r\n                expires_in: anyToken.expires_in,\r\n                sliding_window: anyToken.sliding_window,\r\n                tokenUrl: anyToken.access_url_token,\r\n                type: anyToken.token_type\r\n            };\r\n            token = t;\r\n        }\r\n        this.syncToken(token);\r\n        if (token === undefined || token === null) {\r\n            this.storageHandler.remove(this.tokenKey);\r\n        }\r\n        else {\r\n            this.storageHandler.set(this.tokenKey, JSON.stringify(token));\r\n        }\r\n        if (token === undefined || token === null) {\r\n            this.triggerTokenExpired(this.application);\r\n        }\r\n        else {\r\n            this.triggerTokenUpdated(this.application);\r\n        }\r\n    };\r\n    TokenHandler.prototype.get = function (type) {\r\n        return JSON.parse(this.storageHandler.get(this.tokenKey));\r\n    };\r\n    TokenHandler.prototype.triggerTokenExpired = function (app) {\r\n        var data = { app: app };\r\n        this.eventHandler.triggerEvent('tokenExpired', data);\r\n        this.eventHandler.pushMessage({\r\n            type: this.messageTypes.tokenExpired\r\n        }, {});\r\n    };\r\n    TokenHandler.prototype.triggerTokenUpdated = function (app) {\r\n        var data = { app: app };\r\n        this.eventHandler.triggerEvent('tokenUpdated', data);\r\n        this.eventHandler.pushMessage({\r\n            type: this.messageTypes.tokenUpdated\r\n        }, {});\r\n    };\r\n    TokenHandler.prototype.setExpirationTimer = function (token) {\r\n        if (token && token.expireTime) {\r\n            var expiresIn = token.expireTime - new Date().getTime();\r\n            if (expiresIn > 0) {\r\n                var self = this;\r\n                return setTimeout(function () {\r\n                    self.store(null);\r\n                    self.triggerTokenExpired(self.application);\r\n                }, expiresIn);\r\n            }\r\n            else {\r\n                this.store(null);\r\n            }\r\n        }\r\n        return null;\r\n    };\r\n    TokenHandler.prototype.syncToken = function (newToken) {\r\n        clearTimeout(this.userAccessTokenTimerHandle);\r\n        if (newToken !== undefined && newToken !== null) {\r\n            if (!newToken.expireTime) {\r\n                var expiresIn = newToken.expires_in;\r\n                var slidingWindow = newToken.sliding_window;\r\n                /*jshint camelcase: true */\r\n                if (expiresIn) {\r\n                    newToken.expireTime = new Date().getTime() + (expiresIn * 1000);\r\n                }\r\n                else if (slidingWindow) {\r\n                    newToken.expireTime = new Date().getTime() + (slidingWindow * 1000);\r\n                }\r\n            }\r\n            this.userAccessTokenTimerHandle = this.setExpirationTimer(newToken);\r\n        }\r\n    };\r\n    TokenHandler.prototype.initEventing = function () {\r\n        this.eventHandler.addEvent('tokenExpired', function (e) {\r\n            e = e || event;\r\n            if (e.originalEvent) {\r\n                e = e.originalEvent;\r\n            }\r\n            this.syncToken(null);\r\n        });\r\n    };\r\n    return TokenHandler;\r\n}());\r\nTokenHandler = tslib_1.__decorate([\r\n    inversify_1.injectable(),\r\n    tslib_1.__param(0, inversify_1.inject(contracts_1.TYPES.IEventHandler)),\r\n    tslib_1.__param(1, inversify_1.inject(contracts_1.TYPES.IStorageHandler)),\r\n    tslib_1.__param(2, inversify_1.inject(contracts_1.TYPES.IBaasicApp)),\r\n    tslib_1.__metadata(\"design:paramtypes\", [typeof (_a = typeof contracts_1.IEventHandler !== \"undefined\" && contracts_1.IEventHandler) === \"function\" && _a || Object, typeof (_b = typeof contracts_1.IStorageHandler !== \"undefined\" && contracts_1.IStorageHandler) === \"function\" && _b || Object, typeof (_c = typeof contracts_1.IBaasicApp !== \"undefined\" && contracts_1.IBaasicApp) === \"function\" && _c || Object])\r\n], TokenHandler);\r\nexports.TokenHandler = TokenHandler;\r\n;\r\nvar _a, _b, _c;\r\n\n\n\n//////////////////\n// WEBPACK FOOTER\n// ./src/core/tokenHandler.ts\n// module id = 98\n// module chunks = 0","\"use strict\";\r\nObject.defineProperty(exports, \"__esModule\", { value: true });\r\nvar tslib_1 = require(\"tslib\");\r\nvar contracts_1 = require(\"./contracts\");\r\nvar inversify_1 = require(\"inversify\");\r\nvar UserHandler = (function () {\r\n    function UserHandler(eventHandler, storageHandler, application) {\r\n        var _this = this;\r\n        this.eventHandler = eventHandler;\r\n        this.storageHandler = storageHandler;\r\n        this.application = application;\r\n        this.messageTypes = {\r\n            userChanged: 'userChanged'\r\n        };\r\n        this.userInfoKey = 'baasic-user-info-' + this.application.getApiKey();\r\n        this.user = {\r\n            isAuthenticated: function () {\r\n                var token = _this.application.getAccessToken();\r\n                return token !== undefined && token !== null && (token.expireTime === undefined || token.expireTime === null || (token.expireTime - new Date().getTime()) > 0);\r\n            }\r\n        };\r\n    }\r\n    UserHandler.prototype.getUser = function () {\r\n        var userInfo = JSON.parse(this.storageHandler.get(this.userInfoKey));\r\n        if (userInfo) {\r\n            this.user.user = userInfo;\r\n        }\r\n        else {\r\n            delete this.user.user;\r\n        }\r\n        return this.user;\r\n    };\r\n    UserHandler.prototype.setUser = function (userInfo) {\r\n        if (userInfo === undefined || userInfo === null) {\r\n            this.storageHandler.remove(this.userInfoKey);\r\n        }\r\n        else {\r\n            this.storageHandler.set(this.userInfoKey, JSON.stringify(userInfo));\r\n        }\r\n        this.eventHandler.pushMessage({\r\n            type: this.messageTypes.userChanged\r\n        }, {\r\n            user: this.getUser()\r\n        });\r\n    };\r\n    return UserHandler;\r\n}());\r\nUserHandler = tslib_1.__decorate([\r\n    inversify_1.injectable(),\r\n    tslib_1.__param(0, inversify_1.inject(contracts_1.TYPES.IEventHandler)),\r\n    tslib_1.__param(1, inversify_1.inject(contracts_1.TYPES.IStorageHandler)),\r\n    tslib_1.__param(2, inversify_1.inject(contracts_1.TYPES.IBaasicApp)),\r\n    tslib_1.__metadata(\"design:paramtypes\", [typeof (_a = typeof contracts_1.IEventHandler !== \"undefined\" && contracts_1.IEventHandler) === \"function\" && _a || Object, typeof (_b = typeof contracts_1.IStorageHandler !== \"undefined\" && contracts_1.IStorageHandler) === \"function\" && _b || Object, typeof (_c = typeof contracts_1.IBaasicApp !== \"undefined\" && contracts_1.IBaasicApp) === \"function\" && _c || Object])\r\n], UserHandler);\r\nexports.UserHandler = UserHandler;\r\nvar _a, _b, _c;\r\n\n\n\n//////////////////\n// WEBPACK FOOTER\n// ./src/core/userHandler.ts\n// module id = 99\n// module chunks = 0","\"use strict\";\r\nObject.defineProperty(exports, \"__esModule\", { value: true });\r\n\n\n\n//////////////////\n// WEBPACK FOOTER\n// ./src/httpApi/IHttpClient.ts\n// module id = 100\n// module chunks = 0","\"use strict\";\r\nObject.defineProperty(exports, \"__esModule\", { value: true });\r\n\n\n\n//////////////////\n// WEBPACK FOOTER\n// ./src/httpApi/IHttpHeaders.ts\n// module id = 101\n// module chunks = 0","\"use strict\";\r\nObject.defineProperty(exports, \"__esModule\", { value: true });\r\n\n\n\n//////////////////\n// WEBPACK FOOTER\n// ./src/httpApi/IHttpRequest.ts\n// module id = 102\n// module chunks = 0","\"use strict\";\r\nObject.defineProperty(exports, \"__esModule\", { value: true });\r\n\n\n\n//////////////////\n// WEBPACK FOOTER\n// ./src/httpApi/IHttpResponse.ts\n// module id = 103\n// module chunks = 0","\"use strict\";\r\nObject.defineProperty(exports, \"__esModule\", { value: true });\r\nvar tslib_1 = require(\"tslib\");\r\nvar inversify_1 = require(\"inversify\");\r\nvar _1 = require(\"./\");\r\nvar contracts_1 = require(\"../core/contracts\");\r\nvar common_1 = require(\"../common\");\r\nvar ApiClient = (function () {\r\n    function ApiClient(appOptions, httpClient, tokenHandler, halParser) {\r\n        this.appOptions = appOptions;\r\n        this.httpClient = httpClient;\r\n        this.tokenHandler = tokenHandler;\r\n        this.halParser = halParser;\r\n        this.wwwAuthenticateTokenizer = (function () {\r\n            var ws = '(?:(?:\\\\r\\\\n)?[ \\\\t])+', token = '(?:[\\\\x21\\\\x23-\\\\x27\\\\x2A\\\\x2B\\\\x2D\\\\x2E\\\\x30-\\\\x39\\\\x3F\\\\x41-\\\\x5A\\\\x5E-\\\\x7A\\\\x7C\\\\x7E]+)', quotedString = '\"(?:[\\\\x00-\\\\x0B\\\\x0D-\\\\x21\\\\x23-\\\\x5B\\\\\\\\x5D-\\\\x7F]|' + ws + '|\\\\\\\\[\\\\x00-\\\\x7F])*\"';\r\n            return new RegExp(token + '(?:=(?:' + quotedString + '|' + token + '))?', 'g');\r\n        })();\r\n        this.createPromise = httpClient.createPromise;\r\n    }\r\n    ApiClient.prototype.request = function (request) {\r\n        var _this = this;\r\n        if (request && request.url) {\r\n            request.url = this.compileUrl(request.url);\r\n        }\r\n        var headers = request.headers || (request.headers = {});\r\n        var authToken = this.tokenHandler.get();\r\n        if (authToken) {\r\n            /*jshint camelcase: false */\r\n            headers[\"AUTHORIZATION\"] = \"BEARER \" + authToken.token;\r\n        }\r\n        if (request.data && !this.headerExists(headers, 'Content-Type')) {\r\n            headers['Content-Type'] = 'application/json; charset=UTF-8';\r\n        }\r\n        if (this.appOptions.enableHALJSON) {\r\n            if (!this.headerExists(headers, 'Accept')) {\r\n                headers[\"Accept\"] = 'application/hal+json; charset=UTF-8';\r\n            }\r\n        }\r\n        var self = this;\r\n        var promise = this.httpClient.request(request);\r\n        promise.then(function (data) {\r\n            var contentType = self.getHeader(data.headers, 'Content-Type');\r\n            if (contentType && contentType.toLowerCase().indexOf('application/hal+json') !== -1) {\r\n                data.data = self.halParser.parse(data.data);\r\n            }\r\n            return data;\r\n        }, function (response) {\r\n            var wwwAuthenticate = _this.parseWWWAuthenticateHeader(response.headers['WWW-Authenticate']);\r\n            if (wwwAuthenticate) {\r\n                if (wwwAuthenticate.scheme.toLowerCase() === 'bearer') {\r\n                    var details = wwwAuthenticate.details;\r\n                    if (details) {\r\n                        if (details.error) {\r\n                            switch (details.error) {\r\n                                case 'invalid_token':\r\n                                    _this.tokenHandler.store(null);\r\n                                    break;\r\n                                case 'invalid_request':\r\n                                    /*jshint camelcase: false */\r\n                                    switch (details.error_description) {\r\n                                        /*jshint camelcase: true */\r\n                                        case 'Missing or invalid session':\r\n                                            _this.tokenHandler.store(null);\r\n                                            break;\r\n                                    }\r\n                                    break;\r\n                            }\r\n                        }\r\n                    }\r\n                }\r\n            }\r\n            return response;\r\n        });\r\n        return promise;\r\n    };\r\n    ApiClient.prototype.get = function (url, headers) {\r\n        return this.internalRequest(url, \"GET\", undefined, headers);\r\n    };\r\n    ApiClient.prototype.delete = function (url, headers, data) {\r\n        return this.internalRequest(url, \"DELETE\", data, headers);\r\n    };\r\n    ApiClient.prototype.post = function (url, data, headers) {\r\n        return this.internalRequest(url, \"POST\", data, headers);\r\n    };\r\n    ApiClient.prototype.put = function (url, data, headers) {\r\n        return this.internalRequest(url, \"PUT\", data, headers);\r\n    };\r\n    ApiClient.prototype.patch = function (url, data, headers) {\r\n        return this.internalRequest(url, \"PATCH\", data, headers);\r\n    };\r\n    ApiClient.prototype.compileUrl = function (url) {\r\n        if (typeof url === \"string\") {\r\n            var rootUrl = this.appOptions.apiUrl.toString();\r\n            if (url.indexOf(rootUrl) < 0) {\r\n                return new URL(\"\" + rootUrl + url);\r\n            }\r\n        }\r\n        return url;\r\n    };\r\n    ApiClient.prototype.internalRequest = function (url, method, data, headers) {\r\n        url = this.compileUrl(url);\r\n        var request = {\r\n            url: url,\r\n            method: method\r\n        };\r\n        if (data) {\r\n            request.data = data;\r\n        }\r\n        if (headers) {\r\n            request.headers = headers;\r\n        }\r\n        return this.request(request);\r\n    };\r\n    ApiClient.prototype.unquote = function (quotedString) {\r\n        return quotedString.substr(1, quotedString.length - 2).replace(/(?:(?:\\r\\n)?[ \\t])+/g, ' ');\r\n    };\r\n    ApiClient.prototype.headerExists = function (headers, key) {\r\n        return headers && (headers.hasOwnProperty(key) || headers.hasOwnProperty(key.toLowerCase()));\r\n    };\r\n    ApiClient.prototype.getHeader = function (headers, key) {\r\n        if (headers) {\r\n            var header = headers[key] || headers[key.toLowerCase()];\r\n            if (Array.isArray(header)) {\r\n                header = header.join(';');\r\n            }\r\n            return header;\r\n        }\r\n        return undefined;\r\n    };\r\n    ApiClient.prototype.parseWWWAuthenticateHeader = function (value) {\r\n        if (value) {\r\n            var tokens = value.match(this.wwwAuthenticateTokenizer);\r\n            if (tokens && tokens.length > 0) {\r\n                var wwwAutheniticate = {\r\n                    scheme: tokens[0]\r\n                };\r\n                if (tokens.length > 1) {\r\n                    var details = {};\r\n                    for (var i = 1, l = tokens.length; i < l; i++) {\r\n                        var values = tokens[i].split('=');\r\n                        details[values[0]] = this.unquote(values[1]);\r\n                    }\r\n                    wwwAutheniticate.details = details;\r\n                }\r\n                return wwwAutheniticate;\r\n            }\r\n        }\r\n    };\r\n    return ApiClient;\r\n}());\r\nApiClient = tslib_1.__decorate([\r\n    inversify_1.injectable(),\r\n    tslib_1.__param(0, inversify_1.inject(contracts_1.TYPES.IAppOptions)),\r\n    tslib_1.__param(1, inversify_1.inject(_1.httpTYPES.IHttpClient)),\r\n    tslib_1.__param(2, inversify_1.inject(contracts_1.TYPES.ITokenHandler)),\r\n    tslib_1.__param(3, inversify_1.inject(common_1.TYPES.IHALParser)),\r\n    tslib_1.__metadata(\"design:paramtypes\", [typeof (_a = typeof contracts_1.IAppOptions !== \"undefined\" && contracts_1.IAppOptions) === \"function\" && _a || Object, typeof (_b = typeof _1.IHttpClient !== \"undefined\" && _1.IHttpClient) === \"function\" && _b || Object, typeof (_c = typeof contracts_1.ITokenHandler !== \"undefined\" && contracts_1.ITokenHandler) === \"function\" && _c || Object, typeof (_d = typeof common_1.IHALParser !== \"undefined\" && common_1.IHALParser) === \"function\" && _d || Object])\r\n], ApiClient);\r\nexports.ApiClient = ApiClient;\r\n;\r\nvar _a, _b, _c, _d;\r\n\n\n\n//////////////////\n// WEBPACK FOOTER\n// ./src/httpApi/baasicApiClient.ts\n// module id = 104\n// module chunks = 0","\"use strict\";\r\nfunction __export(m) {\r\n    for (var p in m) if (!exports.hasOwnProperty(p)) exports[p] = m[p];\r\n}\r\nObject.defineProperty(exports, \"__esModule\", { value: true });\r\n__export(require(\"./jQueryHttpClient\"));\r\n\n\n\n//////////////////\n// WEBPACK FOOTER\n// ./src/httpApi/jQuery/index.ts\n// module id = 105\n// module chunks = 0","\"use strict\";\r\nObject.defineProperty(exports, \"__esModule\", { value: true });\r\nvar tslib_1 = require(\"tslib\");\r\nvar inversify_1 = require(\"inversify\");\r\nvar JQueryHttpClient = (function () {\r\n    function JQueryHttpClient() {\r\n    }\r\n    JQueryHttpClient.prototype.request = function (request) {\r\n        var jqueryParams = {\r\n            method: request.method,\r\n            xhrFields: {\r\n                withCredentials: true\r\n            }\r\n        };\r\n        if (request.headers) {\r\n            jqueryParams.headers = request.headers;\r\n        }\r\n        if (request.data) {\r\n            jqueryParams.data = request.data;\r\n        }\r\n        return $.ajax(request.url.toString(), jqueryParams)\r\n            .then(function (data, textStatus, jqXHR) {\r\n            return {\r\n                request: request,\r\n                statusText: textStatus,\r\n                statusCode: jqXHR.status,\r\n                headers: parseHeaders(jqXHR.getAllResponseHeaders()),\r\n                data: data\r\n            };\r\n        }, function (jqXHR, textStatus, errorThrown) {\r\n            return {\r\n                request: request,\r\n                statusText: textStatus,\r\n                statusCode: jqXHR.status,\r\n                headers: parseHeaders(jqXHR.getAllResponseHeaders()),\r\n                data: jqXHR.responseText || jqXHR.responseXML\r\n            };\r\n        });\r\n    };\r\n    JQueryHttpClient.prototype.createPromise = function (deferFn) {\r\n        var deferred = $.Deferred();\r\n        deferFn(deferred.resolve, deferred.reject);\r\n        return deferred.promise();\r\n    };\r\n    return JQueryHttpClient;\r\n}());\r\nJQueryHttpClient = tslib_1.__decorate([\r\n    inversify_1.injectable()\r\n], JQueryHttpClient);\r\nexports.JQueryHttpClient = JQueryHttpClient;\r\nfunction parseHeaders(headers) {\r\n    var result = {};\r\n    if (headers) {\r\n        var arrayOfLines = headers.match(/[^\\r\\n]+/g);\r\n        for (var i = 0; i < arrayOfLines.length; i++) {\r\n            var line = arrayOfLines[i];\r\n            var keyValue = line.split(':');\r\n            if (keyValue.length === 2) {\r\n                result[keyValue[0]] = keyValue[1].trim();\r\n            }\r\n            else if (keyValue.length === 1) {\r\n                result[keyValue[0]] = null;\r\n            }\r\n        }\r\n    }\r\n    return result;\r\n}\r\n\n\n\n//////////////////\n// WEBPACK FOOTER\n// ./src/httpApi/jQuery/jQueryHttpClient.ts\n// module id = 106\n// module chunks = 0","/* globals module */\r\n/**\r\n * @module applicationSettingsClient\r\n * @description  Application Settings Client provides an easy way to consume  Application Settings REST API end-points. In order to obtain needed routes `applicationSettingsClient` uses `applicationSettingsRoute`.\r\n */\r\n\"use strict\";\r\nObject.defineProperty(exports, \"__esModule\", { value: true });\r\nvar tslib_1 = require(\"tslib\");\r\nvar inversify_1 = require(\"inversify\");\r\n;\r\nvar httpApi_1 = require(\"../../httpApi\");\r\nvar _1 = require(\"./\");\r\nvar ApplicationSettingsClient = (function () {\r\n    function ApplicationSettingsClient(applicationSettingsRoute, apiClient) {\r\n        this.applicationSettingsRoute = applicationSettingsRoute;\r\n        this.apiClient = apiClient;\r\n    }\r\n    Object.defineProperty(ApplicationSettingsClient.prototype, \"routeDefinition\", {\r\n        /**\r\n         * Provides direct access to `applicationSettingsRoute`.\r\n         * @method\r\n         * @example ApplicationSettingsClient.routeDefinition.get(options)\r\n         **/\r\n        get: function () {\r\n            return this.applicationSettingsRoute;\r\n        },\r\n        enumerable: true,\r\n        configurable: true\r\n    });\r\n    /**\r\n     * Returns a promise that is resolved once the get action has been performed. Success response returns the application settings resource.\r\n     * @method\r\n     * @param options Query resource options object.\r\n     * @example applicationSettingsClient.get()\r\n                    .then(function (data) {\r\n                        // perform success action here\r\n                    },\r\n                     function (response, status, headers, config) {\r\n                        // perform error handling here\r\n                    });\r\n     **/\r\n    ApplicationSettingsClient.prototype.get = function (options) {\r\n        return this.apiClient.get(this.routeDefinition.get(options));\r\n    };\r\n    /**\r\n     * Returns a promise that is resolved once the update application settings action has been performed. This action updates the application setting resource. This route uses HAL enabled objects to obtain routes and therefore it doesn't use `applicationSettingsRoute` route template. Here is an example of how a route can be obtained from HAL enabled objects:\r\n     * ```\r\n     * let params = modelMapper.removeParams(appSettings);\r\n     * let uri = params['model'].links('put').href;\r\n     * ```\r\n     * @method\r\n     * @param data An application object used to update application settings of the specified application resource.\r\n     * @example // appSettings is a resource previously fetched using get action.\r\n                    appSettings.allowAnyOrigin = true;\r\n                    applicationSettingsClient.update(appSettings)\r\n                        .then(function (data) {\r\n                            // perform success action here\r\n                        },\r\n                         function (response, status, headers, config) {\r\n                            // perform error handling here\r\n                        });\r\n     **/\r\n    ApplicationSettingsClient.prototype.update = function (data) {\r\n        return this.apiClient.put(this.routeDefinition.update(data), this.routeDefinition.updateParams(data));\r\n    };\r\n    return ApplicationSettingsClient;\r\n}());\r\nApplicationSettingsClient = tslib_1.__decorate([\r\n    inversify_1.injectable(),\r\n    tslib_1.__param(0, inversify_1.inject(_1.TYPES.ApplicationSettingsRoute)),\r\n    tslib_1.__param(1, inversify_1.inject(httpApi_1.httpTYPES.ApiClient)),\r\n    tslib_1.__metadata(\"design:paramtypes\", [typeof (_a = typeof _1.ApplicationSettingsRoute !== \"undefined\" && _1.ApplicationSettingsRoute) === \"function\" && _a || Object, typeof (_b = typeof httpApi_1.ApiClient !== \"undefined\" && httpApi_1.ApiClient) === \"function\" && _b || Object])\r\n], ApplicationSettingsClient);\r\nexports.ApplicationSettingsClient = ApplicationSettingsClient;\r\nvar _a, _b;\r\n/**\r\n * @copyright (c) 2017 Mono Ltd\r\n * @license MIT\r\n * @author Mono Ltd\r\n * @overview\r\n ***Notes:**\r\n - Refer to the [Baasic REST API](http://dev.baasic.com/api/reference/home) for detailed information about available Baasic REST API end-points.\r\n - All end-point objects are transformed by the associated route service.\r\n */ \r\n\n\n\n//////////////////\n// WEBPACK FOOTER\n// ./src/modules/applicationSettings/applicationSettingsClient.ts\n// module id = 107\n// module chunks = 0","/* globals module */\r\n/**\r\n * @module applicationSettingsRoute\r\n * @description Baasic Application Settings Route Definition provides Baasic route templates which can be expanded to Baasic REST URIs. Various services can use Baasic Application Settings Route Service to obtain needed routes while other routes will be obtained through HAL. By convention, all route services  use the same function names as their corresponding services.\r\n */\r\n\"use strict\";\r\nObject.defineProperty(exports, \"__esModule\", { value: true });\r\nvar tslib_1 = require(\"tslib\");\r\nvar inversify_1 = require(\"inversify\");\r\nvar common_1 = require(\"../../common\");\r\nvar contracts_1 = require(\"../../core/contracts\");\r\nvar ApplicationSettingsRoute = (function (_super) {\r\n    tslib_1.__extends(ApplicationSettingsRoute, _super);\r\n    function ApplicationSettingsRoute(appOptions) {\r\n        var _this = _super.call(this, appOptions) || this;\r\n        _this.appOptions = appOptions;\r\n        _this.getRoute = 'applications/{?embed,fields}';\r\n        _this.updateRoute = 'applications/';\r\n        return _this;\r\n    }\r\n    /**\r\n     * Parses get route; this route doesn't expose any properties.\r\n     * @method\r\n     * @param options Query resource options object.\r\n     * @example applicationSettingsRoute.get();\r\n     **/\r\n    ApplicationSettingsRoute.prototype.get = function (options) {\r\n        return _super.prototype.baseGet.call(this, this.getRoute, undefined, options);\r\n    };\r\n    /**\r\n     * Parses update route; this route doesn't expose any properties.\r\n     * @method\r\n     * @param data An application object used to update application settings of the specified application resource.\r\n     * @example applicationSettingsRoute.update();\r\n     **/\r\n    ApplicationSettingsRoute.prototype.update = function (data) {\r\n        return _super.prototype.baseUpdate.call(this, this.updateRoute, data);\r\n    };\r\n    return ApplicationSettingsRoute;\r\n}(common_1.BaseRoute));\r\nApplicationSettingsRoute = tslib_1.__decorate([\r\n    inversify_1.injectable(),\r\n    tslib_1.__param(0, inversify_1.inject(contracts_1.TYPES.IAppOptions)),\r\n    tslib_1.__metadata(\"design:paramtypes\", [typeof (_a = typeof contracts_1.IAppOptions !== \"undefined\" && contracts_1.IAppOptions) === \"function\" && _a || Object])\r\n], ApplicationSettingsRoute);\r\nexports.ApplicationSettingsRoute = ApplicationSettingsRoute;\r\nvar _a;\r\n/**\r\n * @copyright (c) 2017 Mono Ltd\r\n * @license MIT\r\n * @author Mono Ltd\r\n * @overview\r\n ***Notes:**\r\n - Refer to the [Baasic REST API](http://dev.baasic.com/api/reference/home) for detailed information about available Baasic REST API end-points.\r\n - [URI Template](https://github.com/Baasic/uritemplate-js) syntax enables expanding the Baasic route templates to Baasic REST URIs providing it with an object that contains URI parameters.\r\n - All end-point objects are transformed by the associated route service.\r\n */ \r\n\n\n\n//////////////////\n// WEBPACK FOOTER\n// ./src/modules/applicationSettings/applicationSettingsRoute.ts\n// module id = 108\n// module chunks = 0","\"use strict\";\r\nObject.defineProperty(exports, \"__esModule\", { value: true });\r\nvar inversify_1 = require(\"inversify\");\r\nvar _1 = require(\"./\");\r\nvar TYPES = {\r\n    ApplicationSettingsClient: Symbol(\"ApplicationSettingsClient\"),\r\n    ApplicationSettingsRoute: Symbol(\"ApplicationSettingsRoute\")\r\n};\r\nexports.TYPES = TYPES;\r\nvar diModule = new inversify_1.ContainerModule(function (bind) {\r\n    bind(TYPES.ApplicationSettingsRoute).to(_1.ApplicationSettingsRoute);\r\n    bind(TYPES.ApplicationSettingsClient).to(_1.ApplicationSettingsClient);\r\n});\r\nexports.diModule = diModule;\r\n\n\n\n//////////////////\n// WEBPACK FOOTER\n// ./src/modules/applicationSettings/diModule.ts\n// module id = 109\n// module chunks = 0","\"use strict\";\r\nObject.defineProperty(exports, \"__esModule\", { value: true });\r\nvar ALPHABET = {\r\n    a: /[\\u0061\\u24D0\\uFF41\\u1E9A\\u00E0\\u00E1\\u00E2\\u1EA7\\u1EA5\\u1EAB\\u1EA9\\u00E3\\u0101\\u0103\\u1EB1\\u1EAF\\u1EB5\\u1EB3\\u0227\\u01E1\\u00E4\\u01DF\\u1EA3\\u00E5\\u01FB\\u01CE\\u0201\\u0203\\u1EA1\\u1EAD\\u1EB7\\u1E01\\u0105\\u2C65\\u0250]/ig,\r\n    aa: /[\\uA733]/ig,\r\n    ae: /[\\u00E6\\u01FD\\u01E3]/ig,\r\n    ao: /[\\uA735]/ig,\r\n    au: /[\\uA737]/ig,\r\n    av: /[\\uA739\\uA73B]/ig,\r\n    ay: /[\\uA73D]/ig,\r\n    b: /[\\u0062\\u24D1\\uFF42\\u1E03\\u1E05\\u1E07\\u0180\\u0183\\u0253]/ig,\r\n    c: /[\\u0063\\u24D2\\uFF43\\u0107\\u0109\\u010B\\u010D\\u00E7\\u1E09\\u0188\\u023C\\uA73F\\u2184]/ig,\r\n    d: /[\\u0064\\u24D3\\uFF44\\u1E0B\\u010F\\u1E0D\\u1E11\\u1E13\\u1E0F\\u0111\\u018C\\u0256\\u0257\\uA77A]/ig,\r\n    dz: /[\\u01F3\\u01C6]/ig,\r\n    e: /[\\u0065\\u24D4\\uFF45\\u00E8\\u00E9\\u00EA\\u1EC1\\u1EBF\\u1EC5\\u1EC3\\u1EBD\\u0113\\u1E15\\u1E17\\u0115\\u0117\\u00EB\\u1EBB\\u011B\\u0205\\u0207\\u1EB9\\u1EC7\\u0229\\u1E1D\\u0119\\u1E19\\u1E1B\\u0247\\u025B\\u01DD]/ig,\r\n    f: /[\\u0066\\u24D5\\uFF46\\u1E1F\\u0192\\uA77C]/ig,\r\n    g: /[\\u0067\\u24D6\\uFF47\\u01F5\\u011D\\u1E21\\u011F\\u0121\\u01E7\\u0123\\u01E5\\u0260\\uA7A1\\u1D79\\uA77F]/ig,\r\n    h: /[\\u0068\\u24D7\\uFF48\\u0125\\u1E23\\u1E27\\u021F\\u1E25\\u1E29\\u1E2B\\u1E96\\u0127\\u2C68\\u2C76\\u0265]/ig,\r\n    hv: /[\\u0195]/ig,\r\n    i: /[\\u0069\\u24D8\\uFF49\\u00EC\\u00ED\\u00EE\\u0129\\u012B\\u012D\\u00EF\\u1E2F\\u1EC9\\u01D0\\u0209\\u020B\\u1ECB\\u012F\\u1E2D\\u0268\\u0131]/ig,\r\n    j: /[\\u006A\\u24D9\\uFF4A\\u0135\\u01F0\\u0249]/ig,\r\n    k: /[\\u006B\\u24DA\\uFF4B\\u1E31\\u01E9\\u1E33\\u0137\\u1E35\\u0199\\u2C6A\\uA741\\uA743\\uA745\\uA7A3]/ig,\r\n    l: /[\\u006C\\u24DB\\uFF4C\\u0140\\u013A\\u013E\\u1E37\\u1E39\\u013C\\u1E3D\\u1E3B\\u017F\\u0142\\u019A\\u026B\\u2C61\\uA749\\uA781\\uA747]/ig,\r\n    lj: /[\\u01C9]/ig,\r\n    m: /[\\u006D\\u24DC\\uFF4D\\u1E3F\\u1E41\\u1E43\\u0271\\u026F]/ig,\r\n    n: /[\\u006E\\u24DD\\uFF4E\\u01F9\\u0144\\u00F1\\u1E45\\u0148\\u1E47\\u0146\\u1E4B\\u1E49\\u019E\\u0272\\u0149\\uA791\\uA7A5]/ig,\r\n    nj: /[\\u01CC]/ig,\r\n    o: /[\\u006F\\u24DE\\uFF4F\\u00F2\\u00F3\\u00F4\\u1ED3\\u1ED1\\u1ED7\\u1ED5\\u00F5\\u1E4D\\u022D\\u1E4F\\u014D\\u1E51\\u1E53\\u014F\\u022F\\u0231\\u00F6\\u022B\\u1ECF\\u0151\\u01D2\\u020D\\u020F\\u01A1\\u1EDD\\u1EDB\\u1EE1\\u1EDF\\u1EE3\\u1ECD\\u1ED9\\u01EB\\u01ED\\u00F8\\u01FF\\u0254\\uA74B\\uA74D\\u0275]/ig,\r\n    oi: /[\\u01A3]/ig,\r\n    ou: /[\\u0223]/ig,\r\n    oo: /[\\uA74F]/ig,\r\n    p: /[\\u0070\\u24DF\\uFF50\\u1E55\\u1E57\\u01A5\\u1D7D\\uA751\\uA753\\uA755]/ig,\r\n    q: /[\\u0071\\u24E0\\uFF51\\u024B\\uA757\\uA759]/ig,\r\n    r: /[\\u0072\\u24E1\\uFF52\\u0155\\u1E59\\u0159\\u0211\\u0213\\u1E5B\\u1E5D\\u0157\\u1E5F\\u024D\\u027D\\uA75B\\uA7A7\\uA783]/ig,\r\n    s: /[\\u0073\\u24E2\\uFF53\\u015B\\u1E65\\u015D\\u1E61\\u0161\\u1E67\\u1E63\\u1E69\\u0219\\u015F\\u023F\\uA7A9\\uA785\\u1E9B]/ig,\r\n    ss: /[\\u00DF\\u1E9E]/ig,\r\n    t: /[\\u0074\\u24E3\\uFF54\\u1E6B\\u1E97\\u0165\\u1E6D\\u021B\\u0163\\u1E71\\u1E6F\\u0167\\u01AD\\u0288\\u2C66\\uA787]/ig,\r\n    tz: /[\\uA729]/ig,\r\n    u: /[\\u0075\\u24E4\\uFF55\\u00F9\\u00FA\\u00FB\\u0169\\u1E79\\u016B\\u1E7B\\u016D\\u00FC\\u01DC\\u01D8\\u01D6\\u01DA\\u1EE7\\u016F\\u0171\\u01D4\\u0215\\u0217\\u01B0\\u1EEB\\u1EE9\\u1EEF\\u1EED\\u1EF1\\u1EE5\\u1E73\\u0173\\u1E77\\u1E75\\u0289]/ig,\r\n    v: /[\\u0076\\u24E5\\uFF56\\u1E7D\\u1E7F\\u028B\\uA75F\\u028C]/ig,\r\n    vy: /[\\uA761]/ig,\r\n    w: /[\\u0077\\u24E6\\uFF57\\u1E81\\u1E83\\u0175\\u1E87\\u1E85\\u1E98\\u1E89\\u2C73]/ig,\r\n    x: /[\\u0078\\u24E7\\uFF58\\u1E8B\\u1E8D]/ig,\r\n    y: /[\\u0079\\u24E8\\uFF59\\u1EF3\\u00FD\\u0177\\u1EF9\\u0233\\u1E8F\\u00FF\\u1EF7\\u1E99\\u1EF5\\u01B4\\u024F\\u1EFF]/ig,\r\n    z: /[\\u007A\\u24E9\\uFF5A\\u017A\\u1E91\\u017C\\u017E\\u1E93\\u1E95\\u01B6\\u0225\\u0240\\u2C6C\\uA763]/ig,\r\n    '': /[\\u0300\\u0301\\u0302\\u0303\\u0308]/ig\r\n};\r\nexports.ALPHABET = ALPHABET;\r\n\n\n\n//////////////////\n// WEBPACK FOOTER\n// ./src/modules/article/alphabet.ts\n// module id = 110\n// module chunks = 0","/* globals module */\r\n/**\r\n * @module articleACLClient\r\n * @description  Article ACL Client provides an easy way to consume  Articles REST API end-points. In order to obtain needed routes `articleACLClient` uses `articleACLRoute`.\r\n */\r\n\"use strict\";\r\nObject.defineProperty(exports, \"__esModule\", { value: true });\r\nvar tslib_1 = require(\"tslib\");\r\nvar inversify_1 = require(\"inversify\");\r\n;\r\nvar httpApi_1 = require(\"../../httpApi\");\r\nvar _1 = require(\"./\");\r\nvar ArticleACLClient = (function () {\r\n    function ArticleACLClient(articleACLRoute, apiClient) {\r\n        this.articleACLRoute = articleACLRoute;\r\n        this.apiClient = apiClient;\r\n    }\r\n    Object.defineProperty(ArticleACLClient.prototype, \"routeDefinition\", {\r\n        get: function () {\r\n            return this.articleACLRoute;\r\n        },\r\n        enumerable: true,\r\n        configurable: true\r\n    });\r\n    /**\r\n     * Returns a promise that is resolved once the get action has been performed. Success response returns a list of ACL policies established for the specified article resource.\r\n     * @method\r\n     * @example articleACLClient.get({id: '<article-id>'})\r\n                    .then(function (data) {\r\n                        // perform success action here\r\n                    },\r\n                     function (response, status, headers, config) {\r\n                         // perform error handling here\r\n                    });\r\n     **/\r\n    ArticleACLClient.prototype.get = function (options) {\r\n        return this.apiClient.get(this.routeDefinition.get(options));\r\n    };\r\n    /**\r\n     * Returns a promise that is resolved once the update acl action has been performed, this action creates new ACL policy for the specified article resource.\r\n     * @method\r\n     * @param options An ACL policy object that needs to be updated in the system. This object specifies parameters necessary for establishing user and/or role set of rights.\r\n     * @returns A promise that is resolved once the update acl action has been performed.\r\n     * @example let options = {id : '<article-id>'};\r\n                let aclObj =  {\r\n                    actionId: '<action-id'>,\r\n                    roleId: '<roleId>',\r\n                    userId: '<userId>'\r\n                };\r\n                options[baasicConstants.modelPropertyName] = aclObj;\r\n                articleACLClient.update(options)\r\n                    .then(function (data) {\r\n                        // perform success action here\r\n                    },\r\n                     function (response, status, headers, config) {\r\n                         // perform error handling here\r\n                    });\r\n     **/\r\n    ArticleACLClient.prototype.update = function (options) {\r\n        return this.apiClient.put(this.routeDefinition.update(options), this.routeDefinition.updateParams(options));\r\n    };\r\n    /**\r\n     * Returns a promise that is resolved once the removeByUser action has been performed. This action deletes ACL policy assigned to the specified user and article resource.\r\n     * @method\r\n     * @param articleId Article id which uniquely identifies article resource whose security privileges need to be retrieved and updated.\r\n     * @param action Action abbreviation which identifies ACL policy assigned to the specified user and article resource.\r\n     *               Supported Values:\r\n     *               \"Create\"\r\n     *               \"Delete\"\r\n     *               \"Read\"\r\n     *               \"Update\"\r\n     * @param user A value that uniquely identifies user for which ACL policy needs to be removed.\r\n     * @param data An ACL policy object that needs to be updated in the system.\r\n     * @returns A promise that is resolved once the removeByUser action has been performed.\r\n     * @example articleACLClient.removeByUser('<article-id>', '<access-action>', '<username>')\r\n                    .then(function (data) {\r\n                        // perform success action here\r\n                    },\r\n                     function (response, status, headers, config) {\r\n                         // perform error handling here\r\n                    });\r\n     **/\r\n    ArticleACLClient.prototype.removeByUser = function (articleId, action, user, data) {\r\n        return this.apiClient.delete(this.articleACLRoute.deleteByUser(articleId, action, user, data));\r\n    };\r\n    /**\r\n     * Returns a promise that is resolved once the removeByRole action has been performed. This action deletes ACL policy assigned to the specified role and article resource.\r\n     * @method\r\n     * @param articleId Article id which uniquely identifies article resource whose security privileges need to be retrieved and updated.\r\n     * @param action Action abbreviation which identifies ACL policy assigned to the specified user and article resource.\r\n     *               Supported Values:\r\n     *               \"Create\"\r\n     *               \"Delete\"\r\n     *               \"Read\"\r\n     *               \"Update\"\r\n     * @param role A value that uniquely identifies role for which ACL policy needs to be removed.\r\n     * @param data An ACL policy object that needs to be updated in the system.\r\n     * @returns A promise that is resolved once the removeByRole action has been performed.\r\n     * @example articleACLClient.removeByRole('<article-id>', '<access-action>', '<role-name>')\r\n                    .then(function (data) {\r\n                        // perform success action here\r\n                    },\r\n                     function (response, status, headers, config) {\r\n                         // perform error handling here\r\n                    });\r\n     **/\r\n    ArticleACLClient.prototype.removeByRole = function (articleId, action, role, data) {\r\n        return this.apiClient.delete(this.articleACLRoute.deleteByRole(articleId, action, role, data));\r\n    };\r\n    return ArticleACLClient;\r\n}());\r\nArticleACLClient = tslib_1.__decorate([\r\n    inversify_1.injectable(),\r\n    tslib_1.__param(0, inversify_1.inject(_1.TYPES.ArticleACLRoute)),\r\n    tslib_1.__param(1, inversify_1.inject(httpApi_1.httpTYPES.ApiClient)),\r\n    tslib_1.__metadata(\"design:paramtypes\", [typeof (_a = typeof _1.ArticleACLRoute !== \"undefined\" && _1.ArticleACLRoute) === \"function\" && _a || Object, typeof (_b = typeof httpApi_1.ApiClient !== \"undefined\" && httpApi_1.ApiClient) === \"function\" && _b || Object])\r\n], ArticleACLClient);\r\nexports.ArticleACLClient = ArticleACLClient;\r\nvar _a, _b;\r\n/**\r\n * @copyright (c) 2017 Mono Ltd\r\n * @license MIT\r\n * @author Mono Ltd\r\n * @overview\r\n ***Notes:**\r\n - Refer to the [Baasic REST API](http://dev.baasic.com/api/reference/home) for detailed information about available Baasic REST API end-points.\r\n - All end-point objects are transformed by the associated route service.\r\n */ \r\n\n\n\n//////////////////\n// WEBPACK FOOTER\n// ./src/modules/article/articleACLClient.ts\n// module id = 111\n// module chunks = 0","/* globals module */\r\n/**\r\n * @module baasicArticleACLRouteService\r\n * @description Baasic Article ACL Route Definition provides Baasic route templates which can be expanded to Baasic REST URIs. Various services can use Baasic Article Route Service to obtain needed routes while other routes will be obtained through HAL. By convention, all route services use the same function names as their corresponding services.\r\n */\r\n\"use strict\";\r\nObject.defineProperty(exports, \"__esModule\", { value: true });\r\nvar tslib_1 = require(\"tslib\");\r\nvar inversify_1 = require(\"inversify\");\r\nvar common_1 = require(\"../../common\");\r\n;\r\nvar contracts_1 = require(\"../../core/contracts\");\r\nvar ArticleACLRoute = (function (_super) {\r\n    tslib_1.__extends(ArticleACLRoute, _super);\r\n    function ArticleACLRoute(appOptions) {\r\n        var _this = _super.call(this, appOptions) || this;\r\n        _this.appOptions = appOptions;\r\n        _this.getRoute = 'articles/{id}/acl/{?fields}';\r\n        _this.updateRoute = 'articles/{id}/acl/{?fields}';\r\n        _this.deleteByUserRoute = 'articles/{id}/acl/actions/{accessAction}/users/{user}/';\r\n        _this.deleteByRoleRoute = 'articles/{id}/acl/actions/{accessAction}/roles/{role}/';\r\n        return _this;\r\n    }\r\n    /**\r\n     * Parses get article acl route; this URI template should be expanded with the Id of the article.\r\n     * @method\r\n     * @example articleACLRoute.get({id: '<article-id>'});\r\n     **/\r\n    ArticleACLRoute.prototype.get = function (options) {\r\n        var params = this.utility.extend({}, options);\r\n        return _super.prototype.baseCreate.call(this, this.getRoute, params);\r\n    };\r\n    /**\r\n     * Parses update article acl route; this URI template should be expanded with the Id of the article.\r\n     * @method\r\n     * @example articleACLRoute.update({id: '<article-id>'});\r\n     **/\r\n    ArticleACLRoute.prototype.update = function (options) {\r\n        var params = this.utility.extend({}, options);\r\n        return _super.prototype.baseCreate.call(this, this.updateRoute, params);\r\n    };\r\n    /**\r\n     * Parses deleteByUser article acl route which can be expanded with additional options. Supported items are:\r\n     * - `id` - Id of the article.\r\n     * - `accessAction` - Action abbreviation which identifies ACL policy assigned to the specified user and article resource.\r\n     * - `user` - A value which uniquely identifies user for which ACL policy needs to be removed.\r\n     * @method\r\n     * @param articleId Article id which uniquely identifies article resource whose security privileges need to be retrieved and updated.\r\n     * @param action Action abbreviation which identifies ACL policy assigned to the specified user and article resource.\r\n     *               Supported Values:\r\n     *               \"Create\"\r\n     *               \"Delete\"\r\n     *               \"Read\"\r\n     *               \"Update\"\r\n     * @param user A value that uniquely identifies user for which ACL policy needs to be removed.\r\n     * @param data An ACL policy object that needs to be updated in the system.\r\n     * @example articleACLRoute.deleteByUser({\r\n                        id: '<article-id>',\r\n                        accessAction: '<access-action>',\r\n                        user: '<username>'\r\n                });\r\n     **/\r\n    ArticleACLRoute.prototype.deleteByUser = function (articleId, action, user, data) {\r\n        var params = this.modelMapper.removeParams(data);\r\n        params.articleId = articleId;\r\n        params.user = user;\r\n        params.accessAction = action;\r\n        return _super.prototype.baseCreate.call(this, this.deleteByUserRoute, params);\r\n    };\r\n    /**\r\n     * Parses deleteByUser article acl route which can be expanded with additional options. Supported items are:\r\n     * - `id` - Id of the article.\r\n     * - `accessAction` - Action abbreviation which identifies ACL policy assigned to the specified role and article resource.\r\n     * - `role` - A value which uniquely identifies role for which ACL policy needs to be removed.\r\n     * @method\r\n     * @param articleId Article id which uniquely identifies article resource whose security privileges need to be retrieved and updated.\r\n     * @param action Action abbreviation which identifies ACL policy assigned to the specified user and article resource.\r\n     *               Supported Values:\r\n     *               \"Create\"\r\n     *               \"Delete\"\r\n     *               \"Read\"\r\n     *               \"Update\"\r\n     * @param role A value that uniquely identifies role for which ACL policy needs to be removed.\r\n     * @param data An ACL policy object that needs to be updated in the system.\r\n     * @example articleACLRoute.deleteByRole({\r\n                    id: '<article-id>',\r\n                    accessAction: '<access-action>',\r\n                    role: '<role-name>'\r\n                });\r\n     **/\r\n    ArticleACLRoute.prototype.deleteByRole = function (articleId, action, role, data) {\r\n        var params = this.modelMapper.removeParams(data);\r\n        params.articleId = articleId;\r\n        params.role = role;\r\n        params.accessAction = action;\r\n        return _super.prototype.baseCreate.call(this, this.deleteByRoleRoute, params);\r\n    };\r\n    ArticleACLRoute.prototype.updateParams = function (options) {\r\n        var params = this.utility.extend({}, options);\r\n        return params[this.modelMapper.modelPropertyName];\r\n    };\r\n    return ArticleACLRoute;\r\n}(common_1.BaseRoute));\r\nArticleACLRoute = tslib_1.__decorate([\r\n    tslib_1.__param(0, inversify_1.inject(contracts_1.TYPES.IAppOptions)),\r\n    tslib_1.__metadata(\"design:paramtypes\", [typeof (_a = typeof contracts_1.IAppOptions !== \"undefined\" && contracts_1.IAppOptions) === \"function\" && _a || Object])\r\n], ArticleACLRoute);\r\nexports.ArticleACLRoute = ArticleACLRoute;\r\nvar _a;\r\n/**\r\n * @copyright (c) 2017 Mono Ltd\r\n * @license MIT\r\n * @author Mono Ltd\r\n * @overview\r\n ***Notes:**\r\n - Refer to the [Baasic REST API](http://dev.baasic.com/api/reference/home) for detailed information about available Baasic REST API end-points.\r\n - [URI Template](https://github.com/Baasic/uritemplate-js) syntax enables expanding the Baasic route templates to Baasic REST URIs providing it with an object that contains URI parameters.\r\n - All end-point objects are transformed by the associated route service.\r\n */ \r\n\n\n\n//////////////////\n// WEBPACK FOOTER\n// ./src/modules/article/articleACLRoute.ts\n// module id = 112\n// module chunks = 0","/* globals module */\r\n/**\r\n * @module articleCommentRepliesClient\r\n * @description  Article Comment Replies Client provides an easy way to consume  Article Comment Replies REST API end-points. `articleCommentRepliesService` functions enable performing standard CRUD operations directly on article comment reply resources, whereas the `articleClient` functions allow management between article and article comment reply. In order to obtain needed routes `articleCommentRepliesService` uses `articleCommentRepliesRoute`.\r\n*/\r\n\"use strict\";\r\nObject.defineProperty(exports, \"__esModule\", { value: true });\r\nvar tslib_1 = require(\"tslib\");\r\nvar inversify_1 = require(\"inversify\");\r\n;\r\nvar httpApi_1 = require(\"../../httpApi\");\r\nvar _1 = require(\"./\");\r\nvar ArticleCommentRepliesClient = (function () {\r\n    function ArticleCommentRepliesClient(articleCommentRepliesRoute, apiClient) {\r\n        this.articleCommentRepliesRoute = articleCommentRepliesRoute;\r\n        this.apiClient = apiClient;\r\n        /**\r\n         * Contains a reference to valid list of article comment reply states. It returns an object containing all article comment reply states.\r\n         * @method\r\n         * @example articleCommentRepliesClient.statuses.approved;\r\n         **/\r\n        this.statuses = _1.CommentStatus;\r\n    }\r\n    Object.defineProperty(ArticleCommentRepliesClient.prototype, \"routeDefinition\", {\r\n        /**\r\n         * Provides direct access to `articleCommentRepliesRoute`.\r\n         * @method\r\n         * @example articleCommentRepliesClient.routeDefinition.get();\r\n         **/\r\n        get: function () {\r\n            return this.articleCommentRepliesRoute;\r\n        },\r\n        enumerable: true,\r\n        configurable: true\r\n    });\r\n    /**\r\n     * Returns a promise that is resolved once the approve article comment reply action has been performed. This action sets the state of an article comment reply to \"approved\". This route uses HAL enabled objects to obtain routes and therefore it doesn't apply `articleCommentRepliesRoute` route template. Here is an example of how a route can be obtained from HAL enabled objects:\r\n     * ```\r\n     * let params = modelMapper.updateParams(articleCommentReply);\r\n     * let uri = params['model'].links('comment-approve').href;\r\n     * ```\r\n     * @method\r\n     * @param data Article Comment Reply object.\r\n     * @param options Notification configuration used to control the article comment recourse access when managing notification distribution.\r\n     * @returns A promise that is resolved once the approve article comment reply action has been performed.\r\n     * @example // articleCommentReply is a resource previously fetched using get action.\r\n                    articleCommentRepliesClient.approve(articleCommentReply, commentOptions)\r\n                        .then(function (data) {\r\n                            // perform success action here\r\n                        },\r\n                         function (response, status, headers, config) {\r\n                            // perform error handling here\r\n                        });\r\n     **/\r\n    ArticleCommentRepliesClient.prototype.approve = function (data, options) {\r\n        return this.apiClient.put(this.routeDefinition.approve(data), this.routeDefinition.updateParams(data));\r\n    };\r\n    /**\r\n     * Returns a promise that is resolved once the unapprove article comment reply action has been performed. This action sets the state of an article comment reply to \"unapproved\". This route uses HAL enabled objects to obtain routes and therefore it doesn't apply `articleCommentRepliesRoute` route template. Here is an example of how a route can be obtained from HAL enabled objects:\r\n     * ```\r\n     * let params = modelMapper.updateParams(articleCommentReply);\r\n     * let uri = params['model'].links('comment-unapprove').href;\r\n     * ```\r\n     * @method\r\n     * @param data Article Comment Reply object.\r\n     * @returns A promise that is resolved once the unapprove article comment reply action has been performed.\r\n     * @example // articleCommentReply is a resource previously fetched using get action.\r\n                    articleCommentRepliesClient.unapprove(articleCommentReply)\r\n                        .then(function (data) {\r\n                            // perform success action here\r\n                        },\r\n                         function (response, status, headers, config) {\r\n                            // perform error handling here\r\n                        });\r\n     **/\r\n    ArticleCommentRepliesClient.prototype.unapprove = function (data) {\r\n        return this.apiClient.put(this.routeDefinition.unapprove(data), this.routeDefinition.updateParams(data));\r\n    };\r\n    /**\r\n     * Returns a promise that is resolved once the create article comment reply action has been performed; this action creates a new comment reply for an article.\r\n     * @method\r\n     * @param data An article comment reply object that needs to be inserted into the system.\r\n     * @returns A promise that is resolved once the create article comment reply action has been performed.\r\n     * @example articleCommentRepliesClient.create('<article-id>', {\r\n                    commentId : '<comment-id>',\r\n                    comment : <comment>,\r\n                    userId : '<user-id>' })\r\n                .then(function (data) {\r\n                    // perform success action here\r\n                },\r\n                 function (response, status, headers, config) {\r\n                    // perform error handling here\r\n                });\r\n     **/\r\n    ArticleCommentRepliesClient.prototype.create = function (data) {\r\n        return this.apiClient.post(this.routeDefinition.create(data), this.routeDefinition.createParams(data));\r\n    };\r\n    /**\r\n     * Returns a promise that is resolved once the find action has been performed. Success response returns a list of article comment reply resources matching the given criteria.\r\n     * @method\r\n     * @param options Query resource options object.\r\n     * @returns A promise that is resolved once the find action has been performed.\r\n     * @example articleCommentRepliesClient.find({\r\n                    pageNumber : 1,\r\n                    pageSize : 10,\r\n                    orderBy : '<field>',\r\n                    orderDirection : '<asc|desc>',\r\n                    search : '<search-phrase>'\r\n                })\r\n                .then(function (collection) {\r\n                    // perform success action here\r\n                },\r\n                 function (response, status, headers, config) {\r\n                    // perform error handling here\r\n                });\r\n     **/\r\n    ArticleCommentRepliesClient.prototype.find = function (options) {\r\n        return this.apiClient.get(this.routeDefinition.find(options));\r\n    };\r\n    /**\r\n     * Returns a promise that is resolved once the flag article comment reply action has been performed. This action sets the state of an article comment reply to \"flagged\". This route uses HAL enabled objects to obtain routes and therefore it doesn't apply `articleCommentRepliesRoute` route template. Here is an example of how a route can be obtained from HAL enabled objects:\r\n     * ```\r\n     * let params = modelMapper.updateParams(articleCommentReply);\r\n     * let uri = params['model'].links('comment-flag').href;\r\n     * ```\r\n     * @method\r\n     * @param data Article Comment Reply object.\r\n     * @returns A promise that is resolved once the flag article comment reply action has been performed.\r\n     * @example     // articleCommentReply is a resource previously fetched using get action.\r\n                        articleCommentRepliesClient.flag(articleCommentReply)\r\n                            .then(function (data) {\r\n                                // perform success action here\r\n                            },\r\n                             function (response, status, headers, config) {\r\n                                // perform error handling here\r\n                            });\r\n     **/\r\n    ArticleCommentRepliesClient.prototype.flag = function (data) {\r\n        return this.apiClient.put(this.routeDefinition.flag(data), this.routeDefinition.updateParams(data));\r\n    };\r\n    /**\r\n     * Returns a promise that is resolved once the unflag article comment reply action has been performed. This action removes the \"flagged\" comment reply state. This route uses HAL enabled objects to obtain routes and therefore it doesn't apply `articleCommentRepliesRoute` route template. Here is an example of how a route can be obtained from HAL enabled objects:\r\n     * ```\r\n     * let params = modelMapper.updateParams(articleCommentReply);\r\n     * let uri = params['model'].links('comment-unflag').href;\r\n     * ```\r\n     * @method\r\n     * @param data Article Comment Reply object.\r\n     * @returns A promise that is resolved once the unflag article comment reply action has been performed.\r\n     * @example // articleCommentReply is a resource previously fetched using get action.\r\n                    articleCommentRepliesClient.unflag(articleCommentReply)\r\n                        .success(function (data) {\r\n                            // perform success action here\r\n                        }).error(function (response, status, headers, config) {\r\n                            // perform error handling here\r\n                        });\r\n     **/\r\n    ArticleCommentRepliesClient.prototype.unflag = function (data) {\r\n        return this.apiClient.put(this.routeDefinition.unflag(data), this.routeDefinition.updateParams(data));\r\n    };\r\n    /**\r\n     * Returns a promise that is resolved once the get action has been performed. Success response returns the specified article comment reply resource.\r\n     * @method\r\n     * @param id Id which uniquely identifies article comment reply resource that needs to be retrieved.\r\n     * @param options Options object that contains embed data.\r\n     * @returns A promise that is resolved once the get action has been performed.\r\n     * @example articleCommentRepliesClient.get('<comment-reply-id>')\r\n                    .then(function (data) {\r\n                        // perform success action here\r\n                    },\r\n                     function (response, status, headers, config) {\r\n                         // perform error handling here\r\n                    });\r\n     **/\r\n    ArticleCommentRepliesClient.prototype.get = function (id, options) {\r\n        return this.apiClient.get(this.articleCommentRepliesRoute.get(id, options));\r\n    };\r\n    /**\r\n     * Returns a promise that is resolved once the remove article comment reply action has been performed. If the action is successfully completed, the article comment reply resource will be permanently removed from the system. This route uses HAL enabled objects to obtain routes and therefore it doesn't apply `articleCommentRepliesRoute` route template. Here is an example of how a route can be obtained from HAL enabled objects:\r\n     * ```\r\n     * let params = apiClient.removeParams(articleCommentReply);\r\n     * let uri = params['model'].links('delete').href;\r\n     * ```\r\n     * @method\r\n     * @param data An article Comment Reply object used to update specified article comment reply resource.\r\n     * @returns A promise that is resolved once the remove article comment reply action has been performed.\r\n     * @example // articleCommentReply is a resource previously fetched using get action.\r\n                    articleCommentRepliesClient.remove(articleCommentReply)\r\n                        .then(function (data) {\r\n                            // perform success action here\r\n                        },\r\n                         function (response, status, headers, config) {\r\n                            // perform error handling here\r\n                        });\r\n     **/\r\n    ArticleCommentRepliesClient.prototype.remove = function (data) {\r\n        return this.apiClient.delete(this.routeDefinition.delete(data));\r\n    };\r\n    /**\r\n     * Returns a promise that is resolved once the report article comment reply action has been performed. This action sets the state of an article comment reply to \"reported\". This route uses HAL enabled objects to obtain routes and therefore it doesn't apply `articleCommentRepliesRoute` route template. Here is an example of how a route can be obtained from HAL enabled objects:\r\n     * ```\r\n     * let params = modelMapper.updateParams(articleCommentReply);\r\n     * let uri = params['model'].links('comment-report').href;\r\n     * ```\r\n     * @method\r\n     * @param data Article Comment Reply object.\r\n     * @param options Notification configuration used to control the article comment recourse access when managing notification distribution.\r\n     * @returns A promise that is resolved once the report article comment reply action has been performed.\r\n     * @example // articleCommentReply is a resource previously fetched using get action.\r\n                    articleCommentRepliesClient.report(articleCommentReply, commentOptions)\r\n                        .then(function (data) {\r\n                            // perform success action here\r\n                        },\r\n                         function (response, status, headers, config) {\r\n                            // perform error handling here\r\n                        });\r\n     **/\r\n    ArticleCommentRepliesClient.prototype.report = function (data, options) {\r\n        return this.apiClient.put(this.routeDefinition.report(data), this.routeDefinition.updateParams(options));\r\n    };\r\n    /**\r\n     * Returns a promise that is resolved once the unreport article comment reply action has been performed. This action removes the \"reported\" comment reply state. This route uses HAL enabled objects to obtain routes and therefore it doesn't apply `articleCommentRepliesRoute` route template. Here is an example of how a route can be obtained from HAL enabled objects:\r\n     * ```\r\n     * let params = modelMapper.updateParams(articleCommentReply);\r\n     * let uri = params['model'].links('comment-unreport').href;\r\n     * ```\r\n     * @method\r\n     * @param data Article Comment Reply object.\r\n     * @returns A promise that is resolved once the unreport article comment reply action has been performed.\r\n     * @example // articleCommentReply is a resource previously fetched using get action.\r\n                    articleCommentRepliesClient.unreport(articleCommentReply)\r\n                        .then(function (data) {\r\n                            // perform success action here\r\n                        },\r\n                         function (response, status, headers, config) {\r\n                            // perform error handling here\r\n                        });\r\n     **/\r\n    ArticleCommentRepliesClient.prototype.unreport = function (data) {\r\n        return this.apiClient.put(this.routeDefinition.unreport(data), this.routeDefinition.updateParams(data));\r\n    };\r\n    /**\r\n     * Returns a promise that is resolved once the mark as spam article comment reply action has been performed. This action sets the state of an article comment reply to \"spam\". This route uses HAL enabled objects to obtain routes and therefore it doesn't apply `articleCommentRepliesRoute` route template. Here is an example of how a route can be obtained from HAL enabled objects:\r\n     * ```\r\n     * let params = modelMapper.updateParams(articleCommentReply);\r\n     * let uri = params['model'].links('comment-spam').href;\r\n     * ```\r\n     * @method\r\n     * @param data Article Comment Reply object.\r\n     * @returns A promise that is resolved once the mark as spam article comment reply action has been performed.\r\n     * @example // articleCommentReply is a resource previously fetched using get action.\r\n                    articleCommentRepliesClient.spam(articleCommentReply)\r\n                        .then(function (data) {\r\n                            // perform success action here\r\n                        },\r\n                         function (response, status, headers, config) {\r\n                            // perform error handling here\r\n                        });\r\n     **/\r\n    ArticleCommentRepliesClient.prototype.spam = function (data) {\r\n        return this.apiClient.put(this.routeDefinition.spam(data), this.routeDefinition.updateParams(data));\r\n    };\r\n    /**\r\n     * Returns a promise that is resolved once the unspam article comment reply action has been performed. This action removes the \"spam\" comment reply state. This route uses HAL enabled objects to obtain routes and therefore it doesn't apply `articleCommentRepliesRoute` route template. Here is an example of how a route can be obtained from HAL enabled objects:\r\n     * ```\r\n     * let params = modelMapper.updateParams(articleCommentReply);\r\n     * let uri = params['model'].links('comment-unspam').href;\r\n     * ```\r\n     * @method\r\n     * @param data Article Comment Reply object.\r\n     * @returns A promise that is resolved once the unspam article comment reply action has been performed.\r\n     * @example // articleCommentReply is a resource previously fetched using get action.\r\n                      articleCommentRepliesClient.unspam(articleCommentReply)\r\n                        .then(function (data) {\r\n                            // perform success action here\r\n                        },\r\n                         function (response, status, headers, config) {\r\n                            // perform error handling here\r\n                        });\r\n     **/\r\n    ArticleCommentRepliesClient.prototype.unspam = function (data) {\r\n        return this.apiClient.put(this.routeDefinition.unspam(data), this.routeDefinition.updateParams(data));\r\n    };\r\n    /**\r\n     * Returns a promise that is resolved once the update article comment reply action has been performed; this action updates an article comment reply resource. This route uses HAL enabled objects to obtain routes and therefore it doesn't apply `articleCommentRepliesRoute` route template. Here is an example of how a route can be obtained from HAL enabled objects:\r\n     * ```\r\n     * let params = modelMapper.updateParams(articleCommentReply);\r\n     * let uri = params['model'].links('put').href;\r\n     * ```\r\n     * @method\r\n     * @param data An Article Comments Reply object used to update specified article comment reply resource.\r\n     * @returns A promise that is resolved once the update article comment reply action has been performed.\r\n     * @example // articleCommentReply is a resource previously fetched using get action.\r\n                    articleCommentRepliesClient.update(articleCommentReply)\r\n                        .then(function (data) {\r\n                            // perform success action here\r\n                        },\r\n                         function (response, status, headers, config) {\r\n                            // perform error handling here\r\n                        });\r\n     **/\r\n    ArticleCommentRepliesClient.prototype.update = function (data) {\r\n        return this.apiClient.put(this.routeDefinition.update(data), this.routeDefinition.updateParams(data));\r\n    };\r\n    return ArticleCommentRepliesClient;\r\n}());\r\nArticleCommentRepliesClient = tslib_1.__decorate([\r\n    inversify_1.injectable(),\r\n    tslib_1.__param(0, inversify_1.inject(_1.TYPES.ArticleCommentRepliesRoute)),\r\n    tslib_1.__param(1, inversify_1.inject(httpApi_1.httpTYPES.ApiClient)),\r\n    tslib_1.__metadata(\"design:paramtypes\", [typeof (_a = typeof _1.ArticleCommentRepliesRoute !== \"undefined\" && _1.ArticleCommentRepliesRoute) === \"function\" && _a || Object, typeof (_b = typeof httpApi_1.ApiClient !== \"undefined\" && httpApi_1.ApiClient) === \"function\" && _b || Object])\r\n], ArticleCommentRepliesClient);\r\nexports.ArticleCommentRepliesClient = ArticleCommentRepliesClient;\r\nvar _a, _b;\r\n/**\r\n * @overview\r\n ***Notes:**\r\n - Refer to the [REST API documentation](https://github.com/Baasic/baasic-rest-api/wiki) for detailed information about available Baasic REST API end-points.\r\n - All end-point objects are transformed by the associated route service.\r\n */ \r\n\n\n\n//////////////////\n// WEBPACK FOOTER\n// ./src/modules/article/articleCommentRepliesClient.ts\n// module id = 113\n// module chunks = 0","/* globals module */\r\n/**\r\n * @module articleCommentRepliesRoute\r\n * @description Baasic Article Comment Replies Route Definition provides Baasic route templates which can be expanded to Baasic REST URIs. Various services can use Baasic Article Comment Replies Route Service to obtain needed routes while other routes will be obtained through HAL. By convention, all route services use the same function names as their corresponding services.\r\n */\r\n\"use strict\";\r\nObject.defineProperty(exports, \"__esModule\", { value: true });\r\nvar tslib_1 = require(\"tslib\");\r\nvar inversify_1 = require(\"inversify\");\r\nvar common_1 = require(\"../../common\");\r\n;\r\nvar contracts_1 = require(\"../../core/contracts\");\r\nvar ArticleCommentRepliesRoute = (function (_super) {\r\n    tslib_1.__extends(ArticleCommentRepliesRoute, _super);\r\n    function ArticleCommentRepliesRoute(appOptions) {\r\n        var _this = _super.call(this, appOptions) || this;\r\n        _this.appOptions = appOptions;\r\n        _this.findRoute = 'article-comment-replies/{?searchQuery,statuses,page,rpp,sort,embed,fields}';\r\n        _this.getRoute = 'article-comment-replies/{id}/{?embed,fields}';\r\n        _this.createRoute = 'article-comment-replies';\r\n        _this.updateRoute = 'article-comment-replies/{id}';\r\n        _this.deleteRoute = 'article-comment-replies/{id}';\r\n        _this.approveRoute = 'article-comment-replies/{id}/approve';\r\n        _this.unapproveRoute = 'article-comment-replies/{id}/unapprove';\r\n        _this.flagRoute = 'article-comment-replies/{id}/flag';\r\n        _this.unflagRoute = 'article-comment-replies/{id}/unflag';\r\n        _this.reportRoute = 'article-comment-replies/{id}/report';\r\n        _this.unreportRoute = 'article-comment-replies/{id}/unreport';\r\n        _this.spamRoute = 'article-comment-replies/{id}/spam';\r\n        _this.unspamRoute = 'article-comment-replies/{id}/unspam';\r\n        return _this;\r\n    }\r\n    /**\r\n     * Parses find route which can be expanded with additional options. Supported items are:\r\n     * - `searchQuery` - A string value used to identify article comment reply resources using the phrase search.\r\n     * - `page` - A value used to set the page number, i.e. to retrieve certain article comment reply subset from the storage.\r\n     * - `rpp` - A value used to limit the size of result set per page.\r\n     * - `sort` - A string used to set the article comment reply property to sort the result collection by.\r\n     * - `embed` - Comma separated list of resources to be contained within the current representation.\r\n     * - `statuses` - Comma separated list of article comment reply states that specify where search should be done (Allowed states: Approved, Spam, Reported, Flagged and UnApproved).\r\n     * @method\r\n     * @param options Query resource options object.\r\n     * @example articleCommentRepliesRoute.find({ searchQuery: '<search-phrase>' });\r\n     **/\r\n    ArticleCommentRepliesRoute.prototype.find = function (options) {\r\n        return _super.prototype.baseFind.call(this, this.findRoute, options);\r\n    };\r\n    /**\r\n     * Parses get route which can be expanded with additional options. Supported items are:\r\n     * - `id` - Id which uniquely identifies article comment reply resource that needs to be retrieved.\r\n     * - `embed` - Comma separated list of resources to be contained within the current representation.\r\n     * @method\r\n     * @param id Id which uniquely identifies article comment reply resource that needs to be retrieved.\r\n     * @param options Options object that contains embed data.\r\n     * @example articleCommentRepliesRoute.get({ id: '<comment-reply-id>' });\r\n     **/\r\n    ArticleCommentRepliesRoute.prototype.get = function (id, options) {\r\n        return _super.prototype.baseGet.call(this, this.getRoute, id, options);\r\n    };\r\n    /**\r\n     * Parses create article comment reply route; this URI template does not support any additional items.\r\n     * @method\r\n     * @param data An article comment reply object that needs to be inserted into the system.\r\n     * @example articleCommentRepliesRoute.create(data);\r\n     **/\r\n    ArticleCommentRepliesRoute.prototype.create = function (data) {\r\n        return _super.prototype.baseCreate.call(this, this.createRoute, data);\r\n    };\r\n    /**\r\n     * Parses update article comment reply route; this URI template does not support any additional items.\r\n     * @method\r\n     * @param data An Article Comments Reply object used to update specified article comment reply resource.\r\n     * @example articleCommentRepliesRoute.update(data);\r\n     **/\r\n    ArticleCommentRepliesRoute.prototype.update = function (data) {\r\n        return _super.prototype.baseUpdate.call(this, this.updateRoute, data);\r\n    };\r\n    /**\r\n    * Parses delete article comment reply route; this URI template does not support any additional items.\r\n    * @method\r\n    * @param data Article Comment Reply object.\r\n    * @example articleCommentRepliesRoute.delete(data);\r\n    **/\r\n    ArticleCommentRepliesRoute.prototype.delete = function (data) {\r\n        return _super.prototype.baseDelete.call(this, this.deleteRoute, data);\r\n    };\r\n    /**\r\n     * Parses approve article comment reply route; this URI template does not support any additional items.\r\n     * @method\r\n     * @param data Article Comment Reply object.\r\n     * @example articleCommentRepliesRoute.approve(data);\r\n     **/\r\n    ArticleCommentRepliesRoute.prototype.approve = function (data) {\r\n        return _super.prototype.baseUpdate.call(this, this.approveRoute, data, undefined, 'comment-approve');\r\n    };\r\n    /**\r\n    * Parses unapprove article comment reply route; this URI template does not support any additional items.\r\n    * @method\r\n    * @param data Article Comment Reply object.\r\n    * @example articleCommentRepliesRoute.unapprove(data);\r\n    **/\r\n    ArticleCommentRepliesRoute.prototype.unapprove = function (data) {\r\n        return _super.prototype.baseUpdate.call(this, this.unapproveRoute, data, undefined, 'comment-unapprove');\r\n    };\r\n    /**\r\n    * Parses flag article comment reply route; this URI template does not support any additional items.\r\n    * @method\r\n    * @param data Article Comment Reply object.\r\n    * @example articleCommentRepliesRoute.flag(data);\r\n    **/\r\n    ArticleCommentRepliesRoute.prototype.flag = function (data) {\r\n        return _super.prototype.baseUpdate.call(this, this.flagRoute, data, undefined, 'comment-flag');\r\n    };\r\n    /**\r\n    * Parses unflag article comment reply route; this URI template does not support any additional items.\r\n    * @method\r\n    * @param data Article Comment Reply object.\r\n    * @example articleCommentRepliesRoute.unflag(data);\r\n    **/\r\n    ArticleCommentRepliesRoute.prototype.unflag = function (data) {\r\n        return _super.prototype.baseUpdate.call(this, this.unflagRoute, data, undefined, 'comment-unflag');\r\n    };\r\n    /**\r\n    * Parses report article comment reply route; this URI template does not support any additional items.\r\n    * @method\r\n    * @param data Article Comment Reply object.\r\n    * @example articleCommentRepliesRoute.report(data);\r\n    **/\r\n    ArticleCommentRepliesRoute.prototype.report = function (data) {\r\n        return _super.prototype.baseUpdate.call(this, this.reportRoute, data, undefined, 'comment-report');\r\n    };\r\n    /**\r\n    * Parses unreport article comment reply route; this URI template does not support any additional items.\r\n    * @method\r\n    * @param data Article Comment Reply object.\r\n    * @example articleCommentRepliesRoute.unreport(data);\r\n    **/\r\n    ArticleCommentRepliesRoute.prototype.unreport = function (data) {\r\n        return _super.prototype.baseUpdate.call(this, this.unreportRoute, data, undefined, 'comment-unreport');\r\n    };\r\n    /**\r\n    * Parses spam article comment reply route; this URI template does not support any additional items.\r\n    * @method\r\n    * @param data Article Comment Reply object.\r\n    * @example articleCommentRepliesRoute.spam(data);\r\n    **/\r\n    ArticleCommentRepliesRoute.prototype.spam = function (data) {\r\n        return _super.prototype.baseUpdate.call(this, this.spamRoute, data, undefined, 'comment-spam');\r\n    };\r\n    /**\r\n    * Parses unspam article comment reply route; this URI template does not support any additional items.\r\n    * @method\r\n    * @param data Article Comment Reply object.\r\n    * @example articleCommentRepliesRoute.unspam(data);\r\n    **/\r\n    ArticleCommentRepliesRoute.prototype.unspam = function (data) {\r\n        return _super.prototype.baseUpdate.call(this, this.unspamRoute, data, undefined, 'comment-unspam');\r\n    };\r\n    return ArticleCommentRepliesRoute;\r\n}(common_1.BaseRoute));\r\nArticleCommentRepliesRoute = tslib_1.__decorate([\r\n    inversify_1.injectable(),\r\n    tslib_1.__param(0, inversify_1.inject(contracts_1.TYPES.IAppOptions)),\r\n    tslib_1.__metadata(\"design:paramtypes\", [typeof (_a = typeof contracts_1.IAppOptions !== \"undefined\" && contracts_1.IAppOptions) === \"function\" && _a || Object])\r\n], ArticleCommentRepliesRoute);\r\nexports.ArticleCommentRepliesRoute = ArticleCommentRepliesRoute;\r\nvar _a;\r\n/**\r\n * @overview\r\n ***Notes:**\r\n - Refer to the [REST API documentation](https://github.com/Baasic/baasic-rest-api/wiki) for detailed information about available Baasic REST API end-points.\r\n - [URI Template](https://github.com/Baasic/uritemplate-js) syntax enables expanding the Baasic route templates to Baasic REST URIs providing it with an object that contains URI parameters.\r\n - All end-point objects are transformed by the associated route service.\r\n*/ \r\n\n\n\n//////////////////\n// WEBPACK FOOTER\n// ./src/modules/article/articleCommentRepliesRoute.ts\n// module id = 114\n// module chunks = 0","/* globals module */\r\n/**\r\n * @module articleCommentsClient\r\n * @description  Article Comments Client provides an easy way to consume  Article Comments REST API end-points. `articleCommentsClient` functions enable performing standard CRUD operations directly on article comment resources, whereas the `articleClient` functions allow management between article and article comments. In order to obtain needed routes `articleCommentsClient` uses `articleCommentsRoute`.\r\n */\r\n\"use strict\";\r\nObject.defineProperty(exports, \"__esModule\", { value: true });\r\nvar tslib_1 = require(\"tslib\");\r\nvar inversify_1 = require(\"inversify\");\r\n;\r\nvar httpApi_1 = require(\"../../httpApi\");\r\nvar _1 = require(\"./\");\r\nvar ArticleCommentsClient = (function () {\r\n    function ArticleCommentsClient(articleCommentRepliesClient, articleCommentsRoute, apiClient) {\r\n        this.articleCommentRepliesClient = articleCommentRepliesClient;\r\n        this.articleCommentsRoute = articleCommentsRoute;\r\n        this.apiClient = apiClient;\r\n        /**\r\n        * Contains a reference to valid list of article comment states. It returns an object containing all article comment states.\r\n        * @method\r\n        * @example articleCommentsClient.statuses.approved;\r\n        **/\r\n        this.statuses = _1.CommentStatus;\r\n    }\r\n    Object.defineProperty(ArticleCommentsClient.prototype, \"replies\", {\r\n        /**\r\n         * Provides direct access to `articleCommentRepliesClient`.\r\n         * @method\r\n         **/\r\n        get: function () {\r\n            return this.articleCommentRepliesClient;\r\n        },\r\n        enumerable: true,\r\n        configurable: true\r\n    });\r\n    Object.defineProperty(ArticleCommentsClient.prototype, \"routeDefinition\", {\r\n        /**\r\n         * Provides direct access to `articleCommentsRoute`.\r\n         * @method\r\n         * @example articleCommentsRoute.routeDefinition.get();\r\n         **/\r\n        get: function () {\r\n            return this.articleCommentsRoute;\r\n        },\r\n        enumerable: true,\r\n        configurable: true\r\n    });\r\n    /**\r\n     * Returns a promise that is resolved once the approve article comment action has been performed. This action sets the state of an article comment to \"approved\". This route uses HAL enabled objects to obtain routes and therefore it doesn't apply `articleCommentsRoute` route template. Here is an example of how a route can be obtained from HAL enabled objects:\r\n     * ```\r\n     * let params = modelMapper.updateParams(articleComment);\r\n     * let uri = params['model'].links('comment-approve').href;\r\n     * ```\r\n     * @method\r\n     * @param data Article Comment object.\r\n     * @param options Notification configuration used to control the article comment recourse access when managing notification distribution.\r\n     * @returns A promise that is resolved once the approve article comment action has been performed.\r\n     * @example // articleComment is a resource previously fetched using get action.\r\n                    articleCommentsClient.approve(articleComment, commentOptions)\r\n                        .then(function (data) {\r\n                            // perform success action here\r\n                        },\r\n                         function (response, status, headers, config) {\r\n                            // perform error handling here\r\n                        });\r\n     **/\r\n    ArticleCommentsClient.prototype.approve = function (data, options) {\r\n        return this.apiClient.put(this.routeDefinition.approve(data), this.routeDefinition.updateParams(options));\r\n    };\r\n    /**\r\n     * Returns a promise that is resolved once the unapprove article comment action has been performed. This action sets the state of an article comment to \"unapproved\". This route uses HAL enabled objects to obtain routes and therefore it doesn't apply `articleCommentsRoute` route template. Here is an example of how a route can be obtained from HAL enabled objects:\r\n     * ```\r\n     * let params = modelMapper.updateParams(articleComment);\r\n     * let uri = params['model'].links('comment-unapprove').href;\r\n     * ```\r\n     * @method\r\n     * @param data Article Comment object.\r\n     * @returns A promise that is resolved once the unapprove article comment action has been performed.\r\n     * @example // articleComment is a resource previously fetched using get action.\r\n                    articleCommentsClient.unapprove(articleComment)\r\n                        .then(function (data) {\r\n                            // perform success action here\r\n                        },\r\n                         function (response, status, headers, config) {\r\n                            // perform error handling here\r\n                        });\r\n     **/\r\n    ArticleCommentsClient.prototype.unapprove = function (data) {\r\n        return this.apiClient.put(this.routeDefinition.unapprove(data), this.routeDefinition.updateParams(data));\r\n    };\r\n    /**\r\n     * Returns a promise that is resolved once the create article comment action has been performed; this action creates a new comment for an article.\r\n     * @method\r\n     * @param data Article Comment object.\r\n     * @returns A promise that is resolved once the create article comment action has been performed.\r\n     * @example articleCommentsClient.create({\r\n                        articleId : '<article-id>',\r\n                        comment : <comment>,\r\n                        userId : '<user-id>' })\r\n                    .then(function (data) {\r\n                        // perform success action here\r\n                    },\r\n                     function (response, status, headers, config) {\r\n                        // perform error handling here\r\n                    });\r\n     **/\r\n    ArticleCommentsClient.prototype.create = function (data) {\r\n        return this.apiClient.post(this.routeDefinition.create(data), this.routeDefinition.createParams(data));\r\n    };\r\n    /**\r\n     * Returns a promise that is resolved once the find action has been performed. Success response returns a list of article comment resources matching the given criteria.\r\n     * @method\r\n     * @param options Query resource options object.\r\n     * @returns A promise that is resolved once the find action has been performed.\r\n     * @example articleCommentsClient.find({\r\n                    pageNumber : 1,\r\n                    pageSize : 10,\r\n                    orderBy : '<field>',\r\n                    orderDirection : '<asc|desc>',\r\n                    search : '<search-phrase>'\r\n                })\r\n                .success(function (collection) {\r\n                    // perform success action here\r\n                })\r\n                .error(function (response, status, headers, config) {\r\n                    // perform error handling here\r\n                });\r\n     **/\r\n    ArticleCommentsClient.prototype.find = function (options) {\r\n        return this.apiClient.get(this.routeDefinition.find(options));\r\n    };\r\n    /**\r\n     * Returns a promise that is resolved once the flag article comment action has been performed. This action sets the state of an article comment to \"flagged\". This route uses HAL enabled objects to obtain routes and therefore it doesn't apply `articleCommentsRoute` route template. Here is an example of how a route can be obtained from HAL enabled objects:\r\n     * ```\r\n     * let params = modelMapper.updateParams(articleComment);\r\n     * let uri = params['model'].links('comment-flag').href;\r\n     * ```\r\n     * @method\r\n     * @param data Article Comment object.\r\n     * @returns A promise that is resolved once the flag article comment action has been performed.\r\n     * @example // articleComment is a resource previously fetched using get action.\r\n                    articleCommentsClient.flag(articleComment)\r\n                        .then(function (data) {\r\n                            // perform success action here\r\n                        },\r\n                         function (response, status, headers, config) {\r\n                            // perform error handling here\r\n                        });\r\n     **/\r\n    ArticleCommentsClient.prototype.flag = function (data) {\r\n        return this.apiClient.put(this.routeDefinition.flag(data), this.routeDefinition.updateParams(data));\r\n    };\r\n    /**\r\n     * Returns a promise that is resolved once the unflag article comment action has been performed. This action removes the \"flagged\" comment mark. This route uses HAL enabled objects to obtain routes and therefore it doesn't apply `articleCommentsRoute` route template. Here is an example of how a route can be obtained from HAL enabled objects:\r\n     * ```\r\n     * let params = modelMapper.updateParams(articleComment);\r\n     * let uri = params['model'].links('comment-unflag').href;\r\n     * ```\r\n     * @method\r\n     * @param data Article Comment object.\r\n     * @returns A promise that is resolved once the unflag article comment action has been performed.\r\n     * @example // articleComment is a resource previously fetched using get action.\r\n                    articleCommentsClient.unflag(articleComment)\r\n                        .then(function (data) {\r\n                            // perform success action here\r\n                        },\r\n                         function (response, status, headers, config) {\r\n                            // perform error handling here\r\n                        });\r\n     **/\r\n    ArticleCommentsClient.prototype.unflag = function (data) {\r\n        return this.apiClient.put(this.routeDefinition.unflag(data), this.routeDefinition.updateParams(data));\r\n    };\r\n    /**\r\n     * Returns a promise that is resolved once the get action has been performed. Success response returns the specified article comment resource.\r\n     * @method\r\n     * @param id Id which uniquely identifies article comment resource that needs to be retrieved.\r\n     * @param options Options object that contains embed data.\r\n     * @returns A promise that is resolved once the get action has been performed.\r\n     * @example articleCommentsClient.get('<article-id>', '<comment-id>')\r\n                   .then(function (data) {\r\n                       // perform success action here\r\n                   },\r\n                    function (response, status, headers, config) {\r\n                       // perform error handling here\r\n                   });\r\n    **/\r\n    ArticleCommentsClient.prototype.get = function (id, options) {\r\n        return this.apiClient.get(this.articleCommentsRoute.get(id, options));\r\n    };\r\n    /**\r\n     * Returns a promise that is resolved once the remove article comment action has been performed. If the action is successfully completed, the article comment resource and its replies will be permanently removed from the system. This route uses HAL enabled objects to obtain routes and therefore it doesn't apply `articleCommentsRoute` route template. Here is an example of how a route can be obtained from HAL enabled objects:\r\n     ```\r\n     let params = modelMapper.removeParams(articleComment);\r\n     let uri = params['model'].links('delete').href;\r\n     ```\r\n     * @method\r\n     * @param data Article Comment object.\r\n     * @returns A promise that is resolved once the remove article comment action has been performed.\r\n     * @example // articleComment is a resource previously fetched using get action.\r\n                       articleCommentsClient.remove(articleComment)\r\n                           .then(function (data) {\r\n                               // perform success action here\r\n                           },\r\n                            function (response, status, headers, config) {\r\n                               // perform error handling here\r\n                           });\r\n    **/\r\n    ArticleCommentsClient.prototype.remove = function (data) {\r\n        return this.apiClient.delete(this.routeDefinition.delete(data));\r\n    };\r\n    /**\r\n     * Returns a promise that is resolved once the report article comment action has been performed. This action sets the state of an article comment to \"reported\". This route uses HAL enabled objects to obtain routes and therefore it doesn't apply `articleCommentsRoute` route template. Here is an example of how a route can be obtained from HAL enabled objects:\r\n     * ```\r\n     * let params = modelMapper.updateParams(articleComment);\r\n     * let uri = params['model'].links('comment-report').href;\r\n     * ```\r\n     * @method\r\n     * @param data Article Comment object.\r\n     * @param options Notification configuration used to control the article comment recourse access when managing notification distribution.\r\n     * @returns A promise that is resolved once the report article comment action has been performed.\r\n     * @example // articleComment is a resource previously fetched using get action.\r\n                    articleCommentsClient.report(articleComment, commentOptions)\r\n                        .success(function (data) {\r\n                            // perform success action here\r\n                        })\r\n                        .error(function (response, status, headers, config) {\r\n                            // perform error handling here\r\n                        });\r\n     **/\r\n    ArticleCommentsClient.prototype.report = function (data, options) {\r\n        return this.apiClient.put(this.routeDefinition.report(data), this.routeDefinition.updateParams(options));\r\n    };\r\n    /**\r\n     * Returns a promise that is resolved once the unreport article comment action has been performed. This action removes the \"reported\" comment mark. This route uses HAL enabled objects to obtain routes and therefore it doesn't apply `articleCommentsRoute` route template. Here is an example of how a route can be obtained from HAL enabled objects:\r\n     * ```\r\n     * let params = modelMapper.updateParams(articleComment);\r\n     * let uri = params['model'].links('comment-unreport').href;\r\n     * ```\r\n     * @method\r\n     * @param data Article Comment object.\r\n     * @returns A promise that is resolved once the unreport article comment action has been performed.\r\n     * @example // articleComment is a resource previously fetched using get action.\r\n                    articleCommentsClient.unreport(articleComment)\r\n                        .then(function (data) {\r\n                            // perform success action here\r\n                        },\r\n                         function (response, status, headers, config) {\r\n                            // perform error handling here\r\n                        });\r\n     **/\r\n    ArticleCommentsClient.prototype.unreport = function (data) {\r\n        return this.apiClient.put(this.routeDefinition.unreport(data), this.routeDefinition.updateParams(data));\r\n    };\r\n    /**\r\n     * Returns a promise that is resolved once the update article comment action has been performed; this action updates an article comment resource. This route uses HAL enabled objects to obtain routes and therefore it doesn't apply `articleCommentsRoute` route template. Here is an example of how a route can be obtained from HAL enabled objects:\r\n     * ```\r\n     * let params = modelMapper.updateParams(articleComment);\r\n     * let uri = params['model'].links('put').href;\r\n     * ```\r\n     * @method\r\n     * @param data Article Comment object.\r\n     * @returns A promise that is resolved once the update article comment action has been performed.\r\n     * @example // articleComment is a resource previously fetched using get action.\r\n                    articleCommentsClient.update(articleComment)\r\n                        .then(function (data) {\r\n                            // perform success action here\r\n                        },\r\n                         function (response, status, headers, config) {\r\n                             // perform error handling here\r\n                        });\r\n     **/\r\n    ArticleCommentsClient.prototype.update = function (data) {\r\n        return this.apiClient.put(this.routeDefinition.update(data), this.routeDefinition.updateParams(data));\r\n    };\r\n    return ArticleCommentsClient;\r\n}());\r\nArticleCommentsClient = tslib_1.__decorate([\r\n    inversify_1.injectable(),\r\n    tslib_1.__param(0, inversify_1.inject(_1.TYPES.ArticleCommentRepliesClient)),\r\n    tslib_1.__param(1, inversify_1.inject(_1.TYPES.ArticleCommentsRoute)),\r\n    tslib_1.__param(2, inversify_1.inject(httpApi_1.httpTYPES.ApiClient)),\r\n    tslib_1.__metadata(\"design:paramtypes\", [typeof (_a = typeof _1.ArticleCommentRepliesClient !== \"undefined\" && _1.ArticleCommentRepliesClient) === \"function\" && _a || Object, typeof (_b = typeof _1.ArticleCommentsRoute !== \"undefined\" && _1.ArticleCommentsRoute) === \"function\" && _b || Object, typeof (_c = typeof httpApi_1.ApiClient !== \"undefined\" && httpApi_1.ApiClient) === \"function\" && _c || Object])\r\n], ArticleCommentsClient);\r\nexports.ArticleCommentsClient = ArticleCommentsClient;\r\nvar _a, _b, _c;\r\n/**\r\n * @overview\r\n ***Notes:**\r\n - Refer to the [REST API documentation](https://github.com/Baasic/baasic-rest-api/wiki) for detailed information about available Baasic REST API end-points.\r\n - All end-point objects are transformed by the associated route service.\r\n */ \r\n\n\n\n//////////////////\n// WEBPACK FOOTER\n// ./src/modules/article/articleCommentsClient.ts\n// module id = 115\n// module chunks = 0","/* globals module */\r\n/**\r\n * @module articleCommentsRoute\r\n * @description Baasic Article Comments Route Definition provides Baasic route templates which can be expanded to Baasic REST URIs. Various services can use Baasic Article Comments Route Definition to obtain needed routes while other routes will be obtained through HAL. By convention, all route services use the same function names as their corresponding services.\r\n*/\r\n\"use strict\";\r\nObject.defineProperty(exports, \"__esModule\", { value: true });\r\nvar tslib_1 = require(\"tslib\");\r\nvar inversify_1 = require(\"inversify\");\r\nvar common_1 = require(\"../../common\");\r\n;\r\nvar contracts_1 = require(\"../../core/contracts\");\r\nvar ArticleCommentsRoute = (function (_super) {\r\n    tslib_1.__extends(ArticleCommentsRoute, _super);\r\n    function ArticleCommentsRoute(appOptions) {\r\n        var _this = _super.call(this, appOptions) || this;\r\n        _this.appOptions = appOptions;\r\n        _this.findRoute = 'article-comments/{?searchQuery,statuses,page,rpp,sort,embed,fields}';\r\n        _this.getRoute = 'article-comments/{id}/{?embed,fields}';\r\n        _this.createRoute = 'article-comments/';\r\n        _this.updateRoute = 'article-comments/{id}';\r\n        _this.deleteRoute = 'article-comments/{id}';\r\n        _this.approveRoute = 'article-comments/{id}/approve';\r\n        _this.unapproveRoute = 'article-comments/{id}/unapprove';\r\n        _this.flagRoute = 'article-comments/{id}';\r\n        _this.unflagRoute = 'article-comments/{id}/unflag';\r\n        _this.reportRoute = 'article-comments/{id}/report';\r\n        _this.unreportRoute = 'article-comments/{id}/unreport';\r\n        return _this;\r\n    }\r\n    /**\r\n     * Parses find route which can be expanded with additional options. Supported items are:\r\n     * - `searchQuery` - A string value used to identify article comment resources using the phrase search.\r\n     * - `page` - A value used to set the page number, i.e. to retrieve certain article comment subset from the storage.\r\n     * - `rpp` - A value used to limit the size of result set per page.\r\n     * - `sort` - A string used to set the article comment property to sort the result collection by.\r\n     * - `embed` - Comma separated list of resources to be contained within the current representation.\r\n     * - `statuses` - Comma separated list of article comment states that specify where search should be done (Allowed states: Approved, Spam, Reported, Flagged and UnApproved).\r\n     * @method\r\n     * @param options Query resource options object.\r\n     * @example articleCommentsRoute.find({ searchQuery: '<search-phrase>' });\r\n     **/\r\n    ArticleCommentsRoute.prototype.find = function (options) {\r\n        return _super.prototype.baseFind.call(this, this.findRoute, options);\r\n    };\r\n    /**\r\n     * Parses get route which can be expanded with additional options. Supported items are:\r\n     * - `id` - Id which uniquely identifies article comment resource that needs to be retrieved.\r\n     * - `embed` - Comma separated list of resources to be contained within the current representation.\r\n     * @method\r\n     * @param id Id which uniquely identifies article comment resource that needs to be retrieved.\r\n     * @param options Options object that contains embed data.\r\n     * @example articleCommentsRoute.get().expand({ id: '<comment-id>' });\r\n     **/\r\n    ArticleCommentsRoute.prototype.get = function (id, options) {\r\n        return _super.prototype.baseGet.call(this, this.getRoute, id, options);\r\n    };\r\n    /**\r\n     * Parses create route; this URI template doesnt support any additional options.\r\n     * @method\r\n     * @param data An article comment object that needs to be inserted into the system.\r\n     * @example articleCommentsRoute.create(data);\r\n     **/\r\n    ArticleCommentsRoute.prototype.create = function (data) {\r\n        return _super.prototype.baseCreate.call(this, this.createRoute, data);\r\n    };\r\n    /**\r\n     * Parses update route; this URI template doesnt support any additional options.\r\n     * @method An article comment object used to update specified article comment resource.\r\n     * @example articleCommentsRoute.update(data);\r\n     **/\r\n    ArticleCommentsRoute.prototype.update = function (data) {\r\n        return _super.prototype.baseUpdate.call(this, this.updateRoute, data);\r\n    };\r\n    /**\r\n     * Parses delete route; this URI template doesnt support any additional options.\r\n     * @method An article comment object used to delete specified article comment resource.\r\n     * @example articleCommentsRoute.delete(data);\r\n     **/\r\n    ArticleCommentsRoute.prototype.delete = function (data) {\r\n        return _super.prototype.baseDelete.call(this, this.deleteRoute, data);\r\n    };\r\n    /**\r\n    * Parses approve route; this URI template doesnt support any additional options.\r\n    * @method An article comment object.\r\n    * @example articleCommentsRoute.approve(data);\r\n    **/\r\n    ArticleCommentsRoute.prototype.approve = function (data) {\r\n        return _super.prototype.baseUpdate.call(this, this.approveRoute, data, undefined, 'comment-approve');\r\n    };\r\n    /**\r\n    * Parses unapprove route; this URI template doesnt support any additional options.\r\n    * @method An article comment object.\r\n    * @example articleCommentsRoute.unapprove(data);\r\n    **/\r\n    ArticleCommentsRoute.prototype.unapprove = function (data) {\r\n        return _super.prototype.baseUpdate.call(this, this.unapproveRoute, data, undefined, 'comment-unapprove');\r\n    };\r\n    /**\r\n    * Parses flag route; this URI template doesnt support any additional options.\r\n    * @method An article comment object.\r\n    * @example articleCommentsRoute.flag(data);\r\n    **/\r\n    ArticleCommentsRoute.prototype.flag = function (data) {\r\n        return _super.prototype.baseUpdate.call(this, this.flagRoute, data, undefined, 'comment-flag');\r\n    };\r\n    /**\r\n    * Parses unflag route; this URI template doesnt support any additional options.\r\n    * @method An article comment object.\r\n    * @example articleCommentsRoute.unflag(data);\r\n    **/\r\n    ArticleCommentsRoute.prototype.unflag = function (data) {\r\n        return _super.prototype.baseUpdate.call(this, this.unflagRoute, data, undefined, 'comment-unflag');\r\n    };\r\n    /**\r\n    * Parses report route; this URI template doesnt support any additional options.\r\n    * @method An article comment object.\r\n    * @example articleCommentsRoute.report(data);\r\n    **/\r\n    ArticleCommentsRoute.prototype.report = function (data) {\r\n        return _super.prototype.baseUpdate.call(this, this.reportRoute, data, undefined, 'comment-report');\r\n    };\r\n    /**\r\n    * Parses unreport route; this URI template doesnt support any additional options.\r\n    * @method An article comment object.\r\n    * @example articleCommentsRoute.unreport(data);\r\n    **/\r\n    ArticleCommentsRoute.prototype.unreport = function (data) {\r\n        return _super.prototype.baseUpdate.call(this, this.unreportRoute, data, undefined, 'comment-unreport');\r\n    };\r\n    return ArticleCommentsRoute;\r\n}(common_1.BaseRoute));\r\nArticleCommentsRoute = tslib_1.__decorate([\r\n    inversify_1.injectable(),\r\n    tslib_1.__param(0, inversify_1.inject(contracts_1.TYPES.IAppOptions)),\r\n    tslib_1.__metadata(\"design:paramtypes\", [typeof (_a = typeof contracts_1.IAppOptions !== \"undefined\" && contracts_1.IAppOptions) === \"function\" && _a || Object])\r\n], ArticleCommentsRoute);\r\nexports.ArticleCommentsRoute = ArticleCommentsRoute;\r\nvar _a;\r\n/**\r\n * @overview\r\n ***Notes:**\r\n - Refer to the [REST API documentation](https://github.com/Baasic/baasic-rest-api/wiki) for detailed information about available Baasic REST API end-points.\r\n - [URI Template](https://github.com/Baasic/uritemplate-js) syntax enables expanding the Baasic route templates to Baasic REST URIs providing it with an object that contains URI parameters.\r\n - All end-point objects are transformed by the associated route service.\r\n*/ \r\n\n\n\n//////////////////\n// WEBPACK FOOTER\n// ./src/modules/article/articleCommentsRoute.ts\n// module id = 116\n// module chunks = 0","/* globals module */\r\n/**\r\n * @module articleInstanceCommentsClient\r\n * @description  Article Instance Comments Client provides an easy way to consume  Article Comments REST API end-points. `articleCommentsClient` functions enable performing standard CRUD operations directly on article comment resources, whereas the `articleClient` functions allow management between article and article comments. In order to obtain needed routes `articleCommentsClient` uses `articleCommentsRoute`.\r\n */\r\n\"use strict\";\r\nObject.defineProperty(exports, \"__esModule\", { value: true });\r\nvar tslib_1 = require(\"tslib\");\r\nvar inversify_1 = require(\"inversify\");\r\n;\r\nvar httpApi_1 = require(\"../../../httpApi\");\r\nvar _1 = require(\"../\");\r\nvar ArticleInstanceCommentsClient = (function () {\r\n    function ArticleInstanceCommentsClient(articleInstanceCommentsRoute, articleInstanceCommentsRepliesClient, apiClient) {\r\n        this.articleInstanceCommentsRoute = articleInstanceCommentsRoute;\r\n        this.articleInstanceCommentsRepliesClient = articleInstanceCommentsRepliesClient;\r\n        this.apiClient = apiClient;\r\n        /**\r\n       * Contains a reference to valid list of article comment states. It returns an object containing all article comment states.\r\n       * @method\r\n       * @example articleInstanceCommentsClient.statuses.approved;\r\n       **/\r\n        this.statuses = _1.CommentStatus;\r\n    }\r\n    Object.defineProperty(ArticleInstanceCommentsClient.prototype, \"routeDefinition\", {\r\n        get: function () {\r\n            return this.articleInstanceCommentsRoute;\r\n        },\r\n        enumerable: true,\r\n        configurable: true\r\n    });\r\n    Object.defineProperty(ArticleInstanceCommentsClient.prototype, \"replies\", {\r\n        get: function () {\r\n            return this.articleInstanceCommentsRepliesClient;\r\n        },\r\n        enumerable: true,\r\n        configurable: true\r\n    });\r\n    /**\r\n     * Returns a promise that is resolved once the approve article comment action has been performed. This action sets the state of an article comment to \"approved\". This route uses HAL enabled objects to obtain routes and therefore it doesn't apply `articleCommentsRoute` route template. Here is an example of how a route can be obtained from HAL enabled objects:\r\n     * ```\r\n     * let params = modelMapper.updateParams(articleComment);\r\n     * let uri = params['model'].links('comment-approve').href;\r\n     * ```\r\n     * @method\r\n     * @param data Article Comment object.\r\n     * @param options Notification configuration used to control the article comment recourse access when managing notification distribution.\r\n     * @returns A promise that is resolved once the approve article comment action has been performed.\r\n     * @example // articleComment is a resource previously fetched using get action.\r\n                    articleInstanceCommentsClient.approve(articleComment, commentOptions)\r\n                        .then(function (data) {\r\n                            // perform success action here\r\n                        },\r\n                         function (response, status, headers, config) {\r\n                            // perform error handling here\r\n                        });\r\n     **/\r\n    ArticleInstanceCommentsClient.prototype.approve = function (data, options) {\r\n        return this.apiClient.put(this.routeDefinition.approve(data), this.routeDefinition.createParams(options));\r\n    };\r\n    /**\r\n     * Returns a promise that is resolved once the unapprove article comment action has been performed. This action sets the state of an article comment to \"unapproved\". This route uses HAL enabled objects to obtain routes and therefore it doesn't apply `articleCommentsRoute` route template. Here is an example of how a route can be obtained from HAL enabled objects:\r\n     * ```\r\n     * let params = modelMapper.updateParams(articleComment);\r\n     * let uri = params['model'].links('comment-unapprove').href;\r\n     * ```\r\n     * @method\r\n     * @param data Article Comment object.\r\n     * @returns A promise that is resolved once the unapprove article comment action has been performed.\r\n     * @example // articleComment is a resource previously fetched using get action.\r\n                    articleInstanceCommentsClient.unapprove(articleComment)\r\n                        .then(function (data) {\r\n                            // perform success action here\r\n                        },\r\n                         function (response, status, headers, config) {\r\n                            // perform error handling here\r\n                        });\r\n     **/\r\n    ArticleInstanceCommentsClient.prototype.unapprove = function (data) {\r\n        return this.apiClient.put(this.routeDefinition.unapprove(data), this.routeDefinition.updateParams(data));\r\n    };\r\n    /**\r\n     * Returns a promise that is resolved once the create article comment action has been performed; this action creates a new comment for an article.\r\n     * @method\r\n     * @param data An article comment object that needs to be inserted into the system.\r\n     * @returns A promise that is resolved once the create article comment action has been performed.\r\n     * @example articleInstanceCommentsClient.create({\r\n                        articleId : '<article-id>',\r\n                        comment : <comment>,\r\n                        userId : '<user-id>' })\r\n                    .then(function (data) {\r\n                        // perform success action here\r\n                    },\r\n                     function (response, status, headers, config) {\r\n                        // perform error handling here\r\n                    });\r\n     **/\r\n    ArticleInstanceCommentsClient.prototype.create = function (data) {\r\n        return this.apiClient.post(this.routeDefinition.create(data), this.routeDefinition.createParams(data));\r\n    };\r\n    /**\r\n     * Returns a promise that is resolved once the find action has been performed. Success response returns a list of article comment resources matching the given criteria.\r\n     * @method\r\n     * @param articleId Article slug or id which uniquely identifies article whose comment resources need to be retrieved.\r\n     * @param options Query resource options object.\r\n     * @returns A promise that is resolved once the find action has been performed.\r\n     * @example articleInstanceCommentsClient.find({\r\n                    pageNumber : 1,\r\n                    pageSize : 10,\r\n                    orderBy : '<field>',\r\n                    orderDirection : '<asc|desc>',\r\n                    search : '<search-phrase>'\r\n                })\r\n                .success(function (collection) {\r\n                    // perform success action here\r\n                })\r\n                .error(function (response, status, headers, config) {\r\n                    // perform error handling here\r\n                });\r\n     **/\r\n    ArticleInstanceCommentsClient.prototype.find = function (articleId, options) {\r\n        return this.apiClient.get(this.articleInstanceCommentsRoute.find(articleId, options));\r\n    };\r\n    /**\r\n     * Returns a promise that is resolved once the flag article comment action has been performed. This action sets the state of an article comment to \"flagged\". This route uses HAL enabled objects to obtain routes and therefore it doesn't apply `articleCommentsRoute` route template. Here is an example of how a route can be obtained from HAL enabled objects:\r\n     * ```\r\n     * let params = modelMapper.updateParams(articleComment);\r\n     * let uri = params['model'].links('comment-flag').href;\r\n     * ```\r\n     * @method\r\n     * @param data Article Comment object.\r\n     * @returns A promise that is resolved once the flag article comment action has been performed.\r\n     * @example // articleComment is a resource previously fetched using get action.\r\n                    articleInstanceCommentsClient.flag(articleComment)\r\n                        .then(function (data) {\r\n                            // perform success action here\r\n                        },\r\n                         function (response, status, headers, config) {\r\n                            // perform error handling here\r\n                        });\r\n     **/\r\n    ArticleInstanceCommentsClient.prototype.flag = function (data) {\r\n        return this.apiClient.put(this.routeDefinition.flag(data), this.routeDefinition.updateParams(data));\r\n    };\r\n    /**\r\n     * Returns a promise that is resolved once the unflag article comment action has been performed. This action removes the \"flagged\" comment mark. This route uses HAL enabled objects to obtain routes and therefore it doesn't apply `articleCommentsRoute` route template. Here is an example of how a route can be obtained from HAL enabled objects:\r\n     * ```\r\n     * let params = modelMapper.updateParams(articleComment);\r\n     * let uri = params['model'].links('comment-unflag').href;\r\n     * ```\r\n     * @method\r\n     * @param data Article Comment object.\r\n     * @returns A promise that is resolved once the unflag article comment action has been performed.\r\n     * @example // articleComment is a resource previously fetched using get action.\r\n                    articleInstanceCommentsClient.unflag(articleComment)\r\n                        .then(function (data) {\r\n                            // perform success action here\r\n                        },\r\n                         function (response, status, headers, config) {\r\n                            // perform error handling here\r\n                        });\r\n     **/\r\n    ArticleInstanceCommentsClient.prototype.unflag = function (data) {\r\n        return this.apiClient.put(this.routeDefinition.unflag(data), this.routeDefinition.updateParams(data));\r\n    };\r\n    /**\r\n     * Returns a promise that is resolved once the get action has been performed. Success response returns the specified article comment resource.\r\n     * @method\r\n     * @param articleId Article slug or id which uniquely identifies article whose comment resource needs to be retrieved.\r\n     * @param commentId Id which identifies article comment resource that needs to be retrieved.\r\n     * @param options Options object that contains embed data.\r\n     * @returns A promise that is resolved once the get action has been performed.\r\n     * @example articleInstanceCommentsClient.get('<article-id>', '<comment-id>')\r\n                   .then(function (data) {\r\n                       // perform success action here\r\n                   },\r\n                    function (response, status, headers, config) {\r\n                       // perform error handling here\r\n                   });\r\n    **/\r\n    ArticleInstanceCommentsClient.prototype.get = function (articleId, commentId, options) {\r\n        return this.apiClient.get(this.articleInstanceCommentsRoute.get(articleId, commentId, options));\r\n    };\r\n    /**\r\n     * Returns a promise that is resolved once the remove article comment action has been performed. If the action is successfully completed, the article comment resource and its replies will be permanently removed from the system. This route uses HAL enabled objects to obtain routes and therefore it doesn't apply `articleCommentsRoute` route template. Here is an example of how a route can be obtained from HAL enabled objects:\r\n     ```\r\n     let params = modelMapper.removeParams(articleComment);\r\n     let uri = params['model'].links('delete').href;\r\n     ```\r\n     * @method\r\n     * @param data An article comment object used to delete specified article comment resource.\r\n     * @returns A promise that is resolved once the remove article comment action has been performed.\r\n     * @example // articleComment is a resource previously fetched using get action.\r\n                       articleInstanceCommentsClient.remove(articleComment)\r\n                           .then(function (data) {\r\n                               // perform success action here\r\n                           },\r\n                            function (response, status, headers, config) {\r\n                               // perform error handling here\r\n                           });\r\n    **/\r\n    ArticleInstanceCommentsClient.prototype.remove = function (data) {\r\n        return this.apiClient.delete(this.routeDefinition.delete(data));\r\n    };\r\n    /**\r\n     * Returns a promise that is resolved once the removeAll article comment action has been performed. This action will remove all comments and comment replies from an article if successfully completed. This route uses HAL enabled objects to obtain routes and therefore it doesn't apply `articleInstanceRoute` route template. Here is an example of how a route can be obtained from HAL enabled objects:\r\n     * ```\r\n     * let params = modelMapper.removeParams(articleComment);\r\n     * let uri = params['model'].links('delete-comments-by-article').href;\r\n     * ```\r\n     * @method\r\n     * @param data An article object used to delete specified article comment resource.\r\n     * @returns A promise that is resolved once the removeAll article comment action has been performed.\r\n     * @example // articleComment is a resource previously fetched using get action.\r\n                    articleInstanceCommentsClient.removeAll(articleComment)\r\n                        .then(function (data) {\r\n                            // perform success action here\r\n                        },\r\n                         function (response, status, headers, config) {\r\n                             // perform error handling here\r\n                        });\r\n     **/\r\n    ArticleInstanceCommentsClient.prototype.removeAll = function (data) {\r\n        return this.apiClient.delete(this.routeDefinition.deleteAll(data));\r\n    };\r\n    /**\r\n     * Returns a promise that is resolved once the report article comment action has been performed. This action sets the state of an article comment to \"reported\". This route uses HAL enabled objects to obtain routes and therefore it doesn't apply `articleCommentsRoute` route template. Here is an example of how a route can be obtained from HAL enabled objects:\r\n     * ```\r\n     * let params = modelMapper.updateParams(articleComment);\r\n     * let uri = params['model'].links('comment-report').href;\r\n     * ```\r\n     * @method\r\n     * @param data Article Comment object.\r\n     * @param options Notification configuration used to control the article comment recourse access when managing notification distribution.\r\n     * @returns A promise that is resolved once the report article comment action has been performed.\r\n     * @example // articleComment is a resource previously fetched using get action.\r\n                    articleInstanceCommentsClient.report(articleComment, commentOptions)\r\n                        .success(function (data) {\r\n                            // perform success action here\r\n                        })\r\n                        .error(function (response, status, headers, config) {\r\n                            // perform error handling here\r\n                        });\r\n     **/\r\n    ArticleInstanceCommentsClient.prototype.report = function (data, options) {\r\n        return this.apiClient.put(this.routeDefinition.report(data), this.routeDefinition.updateParams(options));\r\n    };\r\n    /**\r\n     * Returns a promise that is resolved once the unreport article comment action has been performed. This action removes the \"reported\" comment mark. This route uses HAL enabled objects to obtain routes and therefore it doesn't apply `articleCommentsRoute` route template. Here is an example of how a route can be obtained from HAL enabled objects:\r\n     * ```\r\n     * let params = modelMapper.updateParams(articleComment);\r\n     * let uri = params['model'].links('comment-unreport').href;\r\n     * ```\r\n     * @method\r\n     * @param data Article Comment object.\r\n     * @returns A promise that is resolved once the unreport article comment action has been performed.\r\n     * @example // articleComment is a resource previously fetched using get action.\r\n                    articleInstanceCommentsClient.unreport(articleComment)\r\n                        .then(function (data) {\r\n                            // perform success action here\r\n                        },\r\n                         function (response, status, headers, config) {\r\n                            // perform error handling here\r\n                        });\r\n     **/\r\n    ArticleInstanceCommentsClient.prototype.unreport = function (data) {\r\n        return this.apiClient.put(this.routeDefinition.unreport(data), this.routeDefinition.updateParams(data));\r\n    };\r\n    /**\r\n     * Returns a promise that is resolved once the update article comment action has been performed; this action updates an article comment resource. This route uses HAL enabled objects to obtain routes and therefore it doesn't apply `articleCommentsRoute` route template. Here is an example of how a route can be obtained from HAL enabled objects:\r\n     * ```\r\n     * let params = modelMapper.updateParams(articleComment);\r\n     * let uri = params['model'].links('put').href;\r\n     * ```\r\n     * @method\r\n     * @param data An article comments object used to update specified article comment resource.\r\n     * @returns A promise that is resolved once the update article comment action has been performed.\r\n     * @example // articleComment is a resource previously fetched using get action.\r\n                    articleInstanceCommentsClient.update(articleComment)\r\n                        .then(function (data) {\r\n                            // perform success action here\r\n                        },\r\n                         function (response, status, headers, config) {\r\n                             // perform error handling here\r\n                        });\r\n     **/\r\n    ArticleInstanceCommentsClient.prototype.update = function (data) {\r\n        return this.apiClient.put(this.routeDefinition.update(data), this.routeDefinition.updateParams(data));\r\n    };\r\n    /**\r\n     * Returns a promise that is resolved once the mark as spam article comment action has been performed. This action sets the state of an article comment to \"spam\". This route uses HAL enabled objects to obtain routes and therefore it doesn't apply `articleInstanceRoute` route template. Here is an example of how a route can be obtained from HAL enabled objects:\r\n     * ```\r\n     * let params = modelMapper.updateParams(articleComment);\r\n     * let uri = params['model'].links('comment-spam').href;\r\n     * ```\r\n     * @method\r\n     * @param data Article Comment object.\r\n     * @returns A promise that is resolved once the mark as spam article comment action has been performed.\r\n     * @example // articleComment is a resource previously fetched using get action.\r\n                    articleInstanceClient.spam(articleComment)\r\n                        .then(function (data) {\r\n                            // perform success action here\r\n                        },\r\n                         function (response, status, headers, config) {\r\n                             // perform error handling here\r\n                        });\r\n     **/\r\n    ArticleInstanceCommentsClient.prototype.spam = function (data) {\r\n        return this.apiClient.put(this.routeDefinition.spam(data), this.routeDefinition.updateParams(data));\r\n    };\r\n    /**\r\n     * Returns a promise that is resolved once the unspam article comment action has been performed. This action removes the \"spam\" comment state. This route uses HAL enabled objects to obtain routes and therefore it doesn't apply `articleInstanceRoute` route template. Here is an example of how a route can be obtained from HAL enabled objects:\r\n     * ```\r\n     * let params = modelMapper.updateParams(articleComment);\r\n     * let uri = params['model'].links('comment-unspam').href;\r\n     * ```\r\n     * @method\r\n     * @param data Article Comment object.\r\n     * @returns A promise that is resolved once the unspam article comment action has been performed.\r\n     * @example // articleComment is a resource previously fetched using get action.\r\n                        articleInstanceClient.unspam(articleComment)\r\n                            .then(function (data) {\r\n                                // perform success action here\r\n                            },\r\n                             function (response, status, headers, config) {\r\n                                 // perform error handling here\r\n                            });\r\n     **/\r\n    ArticleInstanceCommentsClient.prototype.unspam = function (data) {\r\n        return this.apiClient.put(this.routeDefinition.unspam(data), this.routeDefinition.updateParams(data));\r\n    };\r\n    return ArticleInstanceCommentsClient;\r\n}());\r\nArticleInstanceCommentsClient = tslib_1.__decorate([\r\n    inversify_1.injectable(),\r\n    tslib_1.__param(0, inversify_1.inject(_1.TYPES.ArticleInstanceCommentsRoute)),\r\n    tslib_1.__param(1, inversify_1.inject(_1.TYPES.ArticleCommentRepliesClient)),\r\n    tslib_1.__param(2, inversify_1.inject(httpApi_1.httpTYPES.ApiClient)),\r\n    tslib_1.__metadata(\"design:paramtypes\", [typeof (_a = typeof _1.ArticleInstanceCommentsRoute !== \"undefined\" && _1.ArticleInstanceCommentsRoute) === \"function\" && _a || Object, typeof (_b = typeof _1.ArticleInstanceCommentRepliesClient !== \"undefined\" && _1.ArticleInstanceCommentRepliesClient) === \"function\" && _b || Object, typeof (_c = typeof httpApi_1.ApiClient !== \"undefined\" && httpApi_1.ApiClient) === \"function\" && _c || Object])\r\n], ArticleInstanceCommentsClient);\r\nexports.ArticleInstanceCommentsClient = ArticleInstanceCommentsClient;\r\nvar _a, _b, _c;\r\n/**\r\n * @overview\r\n ***Notes:**\r\n - Refer to the [REST API documentation](https://github.com/Baasic/baasic-rest-api/wiki) for detailed information about available Baasic REST API end-points.\r\n - All end-point objects are transformed by the associated route service.\r\n */ \r\n\n\n\n//////////////////\n// WEBPACK FOOTER\n// ./src/modules/article/articleComments/InstanceCommentsClient.ts\n// module id = 117\n// module chunks = 0","/* globals module */\r\n/**\r\n * @module articleInstanceCommentRepliesClient\r\n * @description  Article Instance Comment Replies Client provides an easy way to consume  Article Comment Replies REST API end-points. `articleCommentRepliesService` functions enable performing standard CRUD operations directly on article comment reply resources, whereas the `articleClient` functions allow management between article and article comment reply. In order to obtain needed routes `articleCommentRepliesService` uses `articleCommentRepliesRoute`.\r\n*/\r\n\"use strict\";\r\nObject.defineProperty(exports, \"__esModule\", { value: true });\r\nvar tslib_1 = require(\"tslib\");\r\nvar inversify_1 = require(\"inversify\");\r\n;\r\nvar httpApi_1 = require(\"../../../httpApi\");\r\nvar _1 = require(\"../\");\r\nvar ArticleInstanceCommentRepliesClient = (function () {\r\n    function ArticleInstanceCommentRepliesClient(articleInstanceCommentRepliesRoute, apiClient) {\r\n        this.articleInstanceCommentRepliesRoute = articleInstanceCommentRepliesRoute;\r\n        this.apiClient = apiClient;\r\n        /**\r\n         * Contains a reference to valid list of article comment reply states. It returns an object containing all article comment reply states.\r\n         * @method\r\n         * @example articleCommentRepliesClient.statuses.approved;\r\n         **/\r\n        this.statuses = _1.CommentStatus;\r\n    }\r\n    Object.defineProperty(ArticleInstanceCommentRepliesClient.prototype, \"routeDefinition\", {\r\n        /**\r\n         * Provides direct access to `articleCommentRepliesRoute`.\r\n         * @method\r\n         * @example articleInstanceCommentRepliesClient.routeDefinition.get();\r\n         **/\r\n        get: function () {\r\n            return this.articleInstanceCommentRepliesRoute;\r\n        },\r\n        enumerable: true,\r\n        configurable: true\r\n    });\r\n    /**\r\n     * Returns a promise that is resolved once the approve article comment reply action has been performed. This action sets the state of an article comment reply to \"approved\". This route uses HAL enabled objects to obtain routes and therefore it doesn't apply `articleCommentRepliesRoute` route template. Here is an example of how a route can be obtained from HAL enabled objects:\r\n     * ```\r\n     * let params = modelMapper.updateParams(articleCommentReply);\r\n     * let uri = params['model'].links('comment-approve').href;\r\n     * ```\r\n     * @method\r\n     * @param data Article Comment Reply object.\r\n     * @param options Notification configuration used to control the article comment recourse access when managing notification distribution.\r\n     * @example // articleCommentReply is a resource previously fetched using get action.\r\n                    articleInstanceCommentRepliesClient.approve(articleCommentReply, commentOptions)\r\n                        .then(function (data) {\r\n                            // perform success action here\r\n                        },\r\n                         function (response, status, headers, config) {\r\n                            // perform error handling here\r\n                        });\r\n     **/\r\n    ArticleInstanceCommentRepliesClient.prototype.approve = function (data, options) {\r\n        return this.apiClient.put(this.routeDefinition.approve(data), this.routeDefinition.updateParams(data));\r\n    };\r\n    /**\r\n     * Returns a promise that is resolved once the unapprove article comment reply action has been performed. This action sets the state of an article comment reply to \"unapproved\". This route uses HAL enabled objects to obtain routes and therefore it doesn't apply `articleCommentRepliesRoute` route template. Here is an example of how a route can be obtained from HAL enabled objects:\r\n     * ```\r\n     * let params = modelMapper.updateParams(articleCommentReply);\r\n     * let uri = params['model'].links('comment-unapprove').href;\r\n     * ```\r\n     * @method\r\n     * @param data Article Comment Reply object.\r\n     * @returns A promise that is resolved once the unapprove article comment reply action has been performed.\r\n     * @example // articleCommentReply is a resource previously fetched using get action.\r\n                    articleInstanceCommentRepliesClient.unapprove(articleCommentReply)\r\n                        .then(function (data) {\r\n                            // perform success action here\r\n                        },\r\n                         function (response, status, headers, config) {\r\n                            // perform error handling here\r\n                        });\r\n     **/\r\n    ArticleInstanceCommentRepliesClient.prototype.unapprove = function (data) {\r\n        return this.apiClient.put(this.routeDefinition.unapprove(data), this.routeDefinition.updateParams(data));\r\n    };\r\n    /**\r\n     * Returns a promise that is resolved once the create article comment reply action has been performed; this action creates a new comment reply for an article.\r\n     * @method\r\n     * @param articleId Article id which uniquely identifies article that needs to be updated with new comment reply resource.\r\n     * @param data An article comment reply object that needs to be inserted into the system.\r\n     * @returns A promise that is resolved once the create article comment reply action has been performed.\r\n     * @example articleInstanceCommentRepliesClient.create('<article-id>', {\r\n                    commentId : '<comment-id>',\r\n                    comment : <comment>,\r\n                    userId : '<user-id>' })\r\n                .then(function (data) {\r\n                    // perform success action here\r\n                },\r\n                 function (response, status, headers, config) {\r\n                    // perform error handling here\r\n                });\r\n     **/\r\n    ArticleInstanceCommentRepliesClient.prototype.create = function (articleId, data) {\r\n        return this.apiClient.post(this.routeDefinition.create(articleId, data), this.routeDefinition.createParams(data));\r\n    };\r\n    /**\r\n     * Returns a promise that is resolved once the find action has been performed. Success response returns a list of article comment reply resources matching the given criteria.\r\n     * @method\r\n     * @param articleId Article id which uniquely identifies article whose comment reply resources need to be retrieved.\r\n     * @param commentId Comment id which uniquely identifies comment whose reply resources need to be retrieved.\r\n     * @param options Query resource options.\r\n     * @returns A promise that is resolved once the find action has been performed.\r\n     * @example articleInstanceCommentRepliesClient.find({\r\n                    pageNumber : 1,\r\n                    pageSize : 10,\r\n                    orderBy : '<field>',\r\n                    orderDirection : '<asc|desc>',\r\n                    search : '<search-phrase>'\r\n                })\r\n                .then(function (collection) {\r\n                    // perform success action here\r\n                },\r\n                 function (response, status, headers, config) {\r\n                    // perform error handling here\r\n                });\r\n     **/\r\n    ArticleInstanceCommentRepliesClient.prototype.find = function (articleId, commentId, options) {\r\n        return this.apiClient.get(this.articleInstanceCommentRepliesRoute.find(articleId, commentId, options));\r\n    };\r\n    /**\r\n     * Returns a promise that is resolved once the flag article comment reply action has been performed. This action sets the state of an article comment reply to \"flagged\". This route uses HAL enabled objects to obtain routes and therefore it doesn't apply `articleCommentRepliesRoute` route template. Here is an example of how a route can be obtained from HAL enabled objects:\r\n     * ```\r\n     * let params = modelMapper.updateParams(articleCommentReply);\r\n     * let uri = params['model'].links('comment-flag').href;\r\n     * ```\r\n     * @method\r\n     * @param data Article Comment Reply object.\r\n     * @returns A promise that is resolved once the flag article comment reply action has been performed.\r\n     * @example     // articleCommentReply is a resource previously fetched using get action.\r\n                        articleInstanceCommentRepliesClient.flag(articleCommentReply)\r\n                            .then(function (data) {\r\n                                // perform success action here\r\n                            },\r\n                             function (response, status, headers, config) {\r\n                                // perform error handling here\r\n                            });\r\n     **/\r\n    ArticleInstanceCommentRepliesClient.prototype.flag = function (data) {\r\n        return this.apiClient.put(this.routeDefinition.flag(data), this.routeDefinition.updateParams(data));\r\n    };\r\n    /**\r\n     * Returns a promise that is resolved once the unflag article comment reply action has been performed. This action removes the \"flagged\" comment reply state. This route uses HAL enabled objects to obtain routes and therefore it doesn't apply `articleCommentRepliesRoute` route template. Here is an example of how a route can be obtained from HAL enabled objects:\r\n     * ```\r\n     * let params = modelMapper.updateParams(articleCommentReply);\r\n     * let uri = params['model'].links('comment-unflag').href;\r\n     * ```\r\n     * @method\r\n     * @param data Article Comment Reply object.\r\n     * @returns A promise that is resolved once the unflag article comment reply action has been performed.\r\n     * @example // articleCommentReply is a resource previously fetched using get action.\r\n                    articleInstanceCommentRepliesClient.unflag(articleCommentReply)\r\n                        .success(function (data) {\r\n                            // perform success action here\r\n                        }).error(function (response, status, headers, config) {\r\n                            // perform error handling here\r\n                        });\r\n     **/\r\n    ArticleInstanceCommentRepliesClient.prototype.unflag = function (data) {\r\n        return this.apiClient.put(this.routeDefinition.unflag(data), this.routeDefinition.updateParams(data));\r\n    };\r\n    /**\r\n     * Returns a promise that is resolved once the get action has been performed. Success response returns the specified article comment reply resource.\r\n     * @method\r\n     * @param articleId Article id which uniquely identifies article whose comment reply resource needs to be retrieved.\r\n     * @param commentId Comment id which uniquely identifies comment whose reply resource needs to be retrieved.\r\n     * @param replyId Id which uniquely identifies article comment reply resource that needs to be retrieved.\r\n     * @param options Options object that contains embed data.\r\n     * @returns A promise that is resolved once the get action has been performed.\r\n     * @example articleInstanceCommentRepliesClient.get('<comment-reply-id>')\r\n                    .then(function (data) {\r\n                        // perform success action here\r\n                    },\r\n                     function (response, status, headers, config) {\r\n                         // perform error handling here\r\n                    });\r\n     **/\r\n    ArticleInstanceCommentRepliesClient.prototype.get = function (articleId, commentId, replyId, options) {\r\n        return this.apiClient.get(this.articleInstanceCommentRepliesRoute.get(articleId, commentId, replyId, options));\r\n    };\r\n    /**\r\n     * Returns a promise that is resolved once the remove article comment reply action has been performed. If the action is successfully completed, the article comment reply resource will be permanently removed from the system. This route uses HAL enabled objects to obtain routes and therefore it doesn't apply `articleCommentRepliesRoute` route template. Here is an example of how a route can be obtained from HAL enabled objects:\r\n     * ```\r\n     * let params = apiClient.removeParams(articleCommentReply);\r\n     * let uri = params['model'].links('delete').href;\r\n     * ```\r\n     * @method\r\n     * @param data An article comment object used to delete specified article comment reply resource.\r\n     * @returns A promise that is resolved once the remove article comment reply action has been performed.\r\n     * @example // articleCommentReply is a resource previously fetched using get action.\r\n                    articleInstanceCommentRepliesClient.remove(articleCommentReply)\r\n                        .then(function (data) {\r\n                            // perform success action here\r\n                        },\r\n                         function (response, status, headers, config) {\r\n                            // perform error handling here\r\n                        });\r\n     **/\r\n    ArticleInstanceCommentRepliesClient.prototype.remove = function (data) {\r\n        return this.apiClient.delete(this.routeDefinition.delete(data));\r\n    };\r\n    /**\r\n     * Returns a promise that is resolved once the removeAll article comment reply action has been performed. This action will remove all comment replies from an article comment if successfully completed. This route uses HAL enabled objects to obtain routes and therefore it doesn't apply `articleInstanceCommentsRepliesRoute` route template. Here is an example of how a route can be obtained from HAL enabled objects:\r\n     * ```\r\n     * let params = modelMapper.removeParams(articleCommentReply);\r\n     * let uri = params['model'].links('delete-comments-by-article').href;\r\n     * ```\r\n     * @method\r\n     * @param data Article object used to delete all article comments in the system.\r\n     * @returns a promise that is resolved once the removeAll article comment reply action has been performed.\r\n     * @example // articleCommentReply is a resource previously fetched using get action.\r\n                    articleInstanceCommentRepliesClient.removeAll(articleCommentReply)\r\n                        .then(function (data) {\r\n                            // perform success action here\r\n                        },\r\n                         function (response, status, headers, config) {\r\n                             // perform error handling here\r\n                        });\r\n     **/\r\n    ArticleInstanceCommentRepliesClient.prototype.removeAll = function (data) {\r\n        return this.apiClient.delete(this.routeDefinition.deleteAll(data));\r\n    };\r\n    /**\r\n     * Returns a promise that is resolved once the report article comment reply action has been performed. This action sets the state of an article comment reply to \"reported\". This route uses HAL enabled objects to obtain routes and therefore it doesn't apply `articleCommentRepliesRoute` route template. Here is an example of how a route can be obtained from HAL enabled objects:\r\n     * ```\r\n     * let params = modelMapper.updateParams(articleCommentReply);\r\n     * let uri = params['model'].links('comment-report').href;\r\n     * ```\r\n     * @method\r\n     * @param data Article Comment Reply object.\r\n     * @param options Notification configuration used to control the article comment recourse access when managing notification distribution.\r\n     * @returns A promise that is resolved once the report article comment reply action has been performed.\r\n     * @example // articleCommentReply is a resource previously fetched using get action.\r\n                    articleInstanceCommentRepliesClient.report(articleCommentReply, commentOptions)\r\n                        .then(function (data) {\r\n                            // perform success action here\r\n                        },\r\n                         function (response, status, headers, config) {\r\n                            // perform error handling here\r\n                        });\r\n     **/\r\n    ArticleInstanceCommentRepliesClient.prototype.report = function (data, options) {\r\n        return this.apiClient.put(this.routeDefinition.report(data), this.routeDefinition.updateParams(options));\r\n    };\r\n    /**\r\n     * Returns a promise that is resolved once the unreport article comment reply action has been performed. This action removes the \"reported\" comment reply state. This route uses HAL enabled objects to obtain routes and therefore it doesn't apply `articleCommentRepliesRoute` route template. Here is an example of how a route can be obtained from HAL enabled objects:\r\n     * ```\r\n     * let params = modelMapper.updateParams(articleCommentReply);\r\n     * let uri = params['model'].links('comment-unreport').href;\r\n     * ```\r\n     * @method\r\n     * @param data Article Comment Reply object.\r\n     * @returns A promise that is resolved once the unreport article comment reply action has been performed.\r\n     * @example // articleCommentReply is a resource previously fetched using get action.\r\n                    articleInstanceCommentRepliesClient.unreport(articleCommentReply)\r\n                        .then(function (data) {\r\n                            // perform success action here\r\n                        },\r\n                         function (response, status, headers, config) {\r\n                            // perform error handling here\r\n                        });\r\n     **/\r\n    ArticleInstanceCommentRepliesClient.prototype.unreport = function (data) {\r\n        return this.apiClient.put(this.routeDefinition.unreport(data), this.routeDefinition.updateParams(data));\r\n    };\r\n    /**\r\n     * Returns a promise that is resolved once the mark as spam article comment reply action has been performed. This action sets the state of an article comment reply to \"spam\". This route uses HAL enabled objects to obtain routes and therefore it doesn't apply `articleCommentRepliesRoute` route template. Here is an example of how a route can be obtained from HAL enabled objects:\r\n     * ```\r\n     * let params = modelMapper.updateParams(articleCommentReply);\r\n     * let uri = params['model'].links('comment-spam').href;\r\n     * ```\r\n     * @method\r\n     * @param data Article Comment Reply object.\r\n     * @returns A promise that is resolved once the mark as spam article comment reply action has been performed.\r\n     * @example // articleCommentReply is a resource previously fetched using get action.\r\n                    articleInstanceCommentRepliesClient.spam(articleCommentReply)\r\n                        .then(function (data) {\r\n                            // perform success action here\r\n                        },\r\n                         function (response, status, headers, config) {\r\n                            // perform error handling here\r\n                        });\r\n     **/\r\n    ArticleInstanceCommentRepliesClient.prototype.spam = function (data) {\r\n        return this.apiClient.put(this.routeDefinition.spam(data), this.routeDefinition.updateParams(data));\r\n    };\r\n    /**\r\n     * Returns a promise that is resolved once the unspam article comment reply action has been performed. This action removes the \"spam\" comment reply state. This route uses HAL enabled objects to obtain routes and therefore it doesn't apply `articleCommentRepliesRoute` route template. Here is an example of how a route can be obtained from HAL enabled objects:\r\n     * ```\r\n     * let params = modelMapper.updateParams(articleCommentReply);\r\n     * let uri = params['model'].links('comment-unspam').href;\r\n     * ```\r\n     * @method\r\n     * @param data Article Comment Reply object.\r\n     * @returns a promise that is resolved once the unspam article comment reply action has been performed.\r\n     * @example // articleCommentReply is a resource previously fetched using get action.\r\n                      articleInstanceCommentRepliesClient.unspam(articleCommentReply)\r\n                        .then(function (data) {\r\n                            // perform success action here\r\n                        },\r\n                         function (response, status, headers, config) {\r\n                            // perform error handling here\r\n                        });\r\n     **/\r\n    ArticleInstanceCommentRepliesClient.prototype.unspam = function (data) {\r\n        return this.apiClient.put(this.routeDefinition.unspam(data), this.routeDefinition.updateParams(data));\r\n    };\r\n    /**\r\n     * Returns a promise that is resolved once the update article comment reply action has been performed; this action updates an article comment reply resource. This route uses HAL enabled objects to obtain routes and therefore it doesn't apply `articleCommentRepliesRoute` route template. Here is an example of how a route can be obtained from HAL enabled objects:\r\n     * ```\r\n     * let params = modelMapper.updateParams(articleCommentReply);\r\n     * let uri = params['model'].links('put').href;\r\n     * ```\r\n     * @method\r\n     * @param data An article comment object used to update specified article comment reply resource.\r\n     * @returns A promise that is resolved once the update article comment reply action has been performed.\r\n     * @example // articleCommentReply is a resource previously fetched using get action.\r\n                    articleInstanceCommentRepliesClient.update(articleCommentReply)\r\n                        .then(function (data) {\r\n                            // perform success action here\r\n                        },\r\n                         function (response, status, headers, config) {\r\n                            // perform error handling here\r\n                        });\r\n     **/\r\n    ArticleInstanceCommentRepliesClient.prototype.update = function (data) {\r\n        return this.apiClient.put(this.routeDefinition.update(data), this.routeDefinition.updateParams(data));\r\n    };\r\n    return ArticleInstanceCommentRepliesClient;\r\n}());\r\nArticleInstanceCommentRepliesClient = tslib_1.__decorate([\r\n    inversify_1.injectable(),\r\n    tslib_1.__param(0, inversify_1.inject(_1.TYPES.ArticleInstanceCommentRepliesRoute)),\r\n    tslib_1.__param(1, inversify_1.inject(httpApi_1.httpTYPES.ApiClient)),\r\n    tslib_1.__metadata(\"design:paramtypes\", [typeof (_a = typeof _1.ArticleInstanceCommentRepliesRoute !== \"undefined\" && _1.ArticleInstanceCommentRepliesRoute) === \"function\" && _a || Object, typeof (_b = typeof httpApi_1.ApiClient !== \"undefined\" && httpApi_1.ApiClient) === \"function\" && _b || Object])\r\n], ArticleInstanceCommentRepliesClient);\r\nexports.ArticleInstanceCommentRepliesClient = ArticleInstanceCommentRepliesClient;\r\nvar _a, _b;\r\n/**\r\n * @overview\r\n ***Notes:**\r\n - Refer to the [REST API documentation](https://github.com/Baasic/baasic-rest-api/wiki) for detailed information about available Baasic REST API end-points.\r\n - All end-point objects are transformed by the associated route service.\r\n */ \r\n\n\n\n//////////////////\n// WEBPACK FOOTER\n// ./src/modules/article/articleComments/InstanceCommentsRepliesClient.ts\n// module id = 118\n// module chunks = 0","/* globals module */\r\n/**\r\n * @module articleInstanceCommentRepliesRoute\r\n * @description Baasic Article Instance Comment Replies Route Definition provides Baasic route templates which can be expanded to Baasic REST URIs. Various services can use Baasic Article Instance Comment Replies Route Service to obtain needed routes while other routes will be obtained through HAL. By convention, all route services use the same function names as their corresponding services.\r\n */\r\n\"use strict\";\r\nObject.defineProperty(exports, \"__esModule\", { value: true });\r\nvar tslib_1 = require(\"tslib\");\r\nvar inversify_1 = require(\"inversify\");\r\nvar common_1 = require(\"../../../common\");\r\n;\r\nvar contracts_1 = require(\"../../../core/contracts\");\r\nvar ArticleInstanceCommentRepliesRoute = (function (_super) {\r\n    tslib_1.__extends(ArticleInstanceCommentRepliesRoute, _super);\r\n    function ArticleInstanceCommentRepliesRoute(appOptions) {\r\n        var _this = _super.call(this, appOptions) || this;\r\n        _this.appOptions = appOptions;\r\n        _this.findRoute = 'articles/{articleId}/comments/{commentId}/replies/{?searchQuery,statuses,page,rpp,sort,embed,fields}';\r\n        _this.getRoute = 'articles/{articleId}/comments/{commentId}/replies/{id}/{?embed,fields}';\r\n        _this.createRoute = 'articles/{articleId}/comments/{commentId}/replies';\r\n        _this.updateRoute = 'articles/{articleId}/comments/{id}';\r\n        _this.approveRoute = 'articles/{articleId}/comments/{commentId}/replies/{id}/approve';\r\n        _this.unapproveRoute = '/articles/{articleId}/comments/{commentId}/replies/{id}/unapprove';\r\n        _this.flagRoute = 'articles/{articleId}/comments/{commentId}/replies/{id}/flag';\r\n        _this.unflagRoute = 'articles/{articleId}/comments/{commentId}/replies/{id}/unflag';\r\n        _this.reportRoute = 'articles/{articleId}/comments/{commentId}/replies/{id}/report';\r\n        _this.deleteRoute = 'articles/{articleId}/comments/{id}';\r\n        _this.deleteAllRoute = 'articles/{articleId}/comments';\r\n        _this.unreportRoute = 'articles/{articleId}/comments/{commentId}/replies/{id}/unreport';\r\n        _this.spamRoute = 'articles/{articleId}/comments/{commentId}/replies/{id}/spam';\r\n        _this.unspamRoute = '/articles/{articleId}/comments/{commentId}/replies/{id}/unspam';\r\n        return _this;\r\n    }\r\n    /**\r\n     * Parses find route which can be expanded with additional options. Supported items are:\r\n     * - `searchQuery` - A string value used to identify article comment reply resources using the phrase search.\r\n     * - `page` - A value used to set the page number, i.e. to retrieve certain article comment reply subset from the storage.\r\n     * - `rpp` - A value used to limit the size of result set per page.\r\n     * - `sort` - A string used to set the article comment reply property to sort the result collection by.\r\n     * - `embed` - Comma separated list of resources to be contained within the current representation.\r\n     * - `statuses` - Comma separated list of article comment reply states that specify where search should be done (Allowed states: Approved, Spam, Reported, Flagged and UnApproved).\r\n     * @method\r\n     * @param articleId Article id which uniquely identifies article whose comment reply resources need to be retrieved.\r\n     * @param commentId Comment id which uniquely identifies comment whose reply resources need to be retrieved.\r\n     * @param options Query resource options.\r\n     * @example articleCommentRepliesRoute.find({ searchQuery: '<search-phrase>' });\r\n     **/\r\n    ArticleInstanceCommentRepliesRoute.prototype.find = function (articleId, commentId, options) {\r\n        var params = this.modelMapper.findParams(options);\r\n        params.articleId = articleId;\r\n        params.commentId = commentId;\r\n        return _super.prototype.baseFind.call(this, this.findRoute, options);\r\n    };\r\n    /**\r\n     * Parses get route which can be expanded with additional options. Supported items are:\r\n     * - `id` - Id which uniquely identifies article comment reply resource that needs to be retrieved.\r\n     * - `embed` - Comma separated list of resources to be contained within the current representation.\r\n     * @method\r\n     * @example articleCommentRepliesRoute.get({ id: '<comment-reply-id>' });\r\n     **/\r\n    ArticleInstanceCommentRepliesRoute.prototype.get = function (articleId, commentId, replyId, options) {\r\n        var params = this.utility.extend({}, options);\r\n        params.articleId = articleId;\r\n        params.commentId = commentId;\r\n        return _super.prototype.baseGet.call(this, this.getRoute, replyId, params);\r\n    };\r\n    /**\r\n     * Parses create article comment reply route; this URI template does not support any additional items.\r\n     * @method\r\n     * @example articleCommentRepliesRoute.create(data);\r\n     **/\r\n    ArticleInstanceCommentRepliesRoute.prototype.create = function (articleId, data) {\r\n        var params = this.utility.extend({}, data);\r\n        params.articleId = articleId;\r\n        return _super.prototype.baseCreate.call(this, this.createRoute, params);\r\n    };\r\n    ArticleInstanceCommentRepliesRoute.prototype.update = function (data) {\r\n        return _super.prototype.baseUpdate.call(this, this.updateRoute, data);\r\n    };\r\n    ArticleInstanceCommentRepliesRoute.prototype.approve = function (data) {\r\n        return _super.prototype.baseUpdate.call(this, this.approveRoute, data, undefined, 'comment-approve');\r\n    };\r\n    ArticleInstanceCommentRepliesRoute.prototype.unapprove = function (data) {\r\n        return _super.prototype.baseUpdate.call(this, this.unapproveRoute, data, undefined, 'comment-unapprove');\r\n    };\r\n    ArticleInstanceCommentRepliesRoute.prototype.flag = function (data) {\r\n        return _super.prototype.baseUpdate.call(this, this.flagRoute, data, undefined, 'comment-flag');\r\n    };\r\n    ArticleInstanceCommentRepliesRoute.prototype.unflag = function (data) {\r\n        return _super.prototype.baseUpdate.call(this, this.unflagRoute, data, undefined, 'comment-unflag');\r\n    };\r\n    ArticleInstanceCommentRepliesRoute.prototype.report = function (data) {\r\n        return _super.prototype.baseUpdate.call(this, this.reportRoute, data, undefined, 'comment-report');\r\n    };\r\n    ArticleInstanceCommentRepliesRoute.prototype.delete = function (data) {\r\n        return _super.prototype.baseDelete.call(this, this.deleteRoute, data);\r\n    };\r\n    ArticleInstanceCommentRepliesRoute.prototype.deleteAll = function (data) {\r\n        return _super.prototype.baseUpdate.call(this, this.deleteAllRoute, data, undefined, 'delete-comments-by-article');\r\n    };\r\n    ArticleInstanceCommentRepliesRoute.prototype.unreport = function (data) {\r\n        return _super.prototype.baseUpdate.call(this, this.unreportRoute, data, undefined, 'comment-unreport');\r\n    };\r\n    ArticleInstanceCommentRepliesRoute.prototype.spam = function (data) {\r\n        return _super.prototype.baseUpdate.call(this, this.spamRoute, data, undefined, 'comment-spam');\r\n    };\r\n    ArticleInstanceCommentRepliesRoute.prototype.unspam = function (data) {\r\n        return _super.prototype.baseUpdate.call(this, this.unspamRoute, data, undefined, 'comment-unspam');\r\n    };\r\n    return ArticleInstanceCommentRepliesRoute;\r\n}(common_1.BaseRoute));\r\nArticleInstanceCommentRepliesRoute = tslib_1.__decorate([\r\n    inversify_1.injectable(),\r\n    tslib_1.__param(0, inversify_1.inject(contracts_1.TYPES.IAppOptions)),\r\n    tslib_1.__metadata(\"design:paramtypes\", [typeof (_a = typeof contracts_1.IAppOptions !== \"undefined\" && contracts_1.IAppOptions) === \"function\" && _a || Object])\r\n], ArticleInstanceCommentRepliesRoute);\r\nexports.ArticleInstanceCommentRepliesRoute = ArticleInstanceCommentRepliesRoute;\r\nvar _a;\r\n/**\r\n * @overview\r\n ***Notes:**\r\n - Refer to the [REST API documentation](https://github.com/Baasic/baasic-rest-api/wiki) for detailed information about available Baasic REST API end-points.\r\n - [URI Template](https://github.com/Baasic/uritemplate-js) syntax enables expanding the Baasic route templates to Baasic REST URIs providing it with an object that contains URI parameters.\r\n - All end-point objects are transformed by the associated route service.\r\n*/ \r\n\n\n\n//////////////////\n// WEBPACK FOOTER\n// ./src/modules/article/articleComments/InstanceCommentsRepliesRoute.ts\n// module id = 119\n// module chunks = 0","/* globals module */\r\n/**\r\n * @module articleInstanceCommentsRoute\r\n * @description Baasic Article Instance Comments Route Definition provides Baasic route templates which can be expanded to Baasic REST URIs. Various services can use Baasic Article Instance Comments Route Definition to obtain needed routes while other routes will be obtained through HAL. By convention, all route services use the same function names as their corresponding services.\r\n*/\r\n\"use strict\";\r\nObject.defineProperty(exports, \"__esModule\", { value: true });\r\nvar tslib_1 = require(\"tslib\");\r\nvar inversify_1 = require(\"inversify\");\r\nvar common_1 = require(\"../../../common\");\r\n;\r\nvar contracts_1 = require(\"../../../core/contracts\");\r\nvar _1 = require(\"../\");\r\nvar ArticleInstanceCommentsRoute = (function (_super) {\r\n    tslib_1.__extends(ArticleInstanceCommentsRoute, _super);\r\n    function ArticleInstanceCommentsRoute(articleInstanceCommentRepliesRoute, appOptions) {\r\n        var _this = _super.call(this, appOptions) || this;\r\n        _this.articleInstanceCommentRepliesRoute = articleInstanceCommentRepliesRoute;\r\n        _this.appOptions = appOptions;\r\n        _this.findRoute = 'articles/{articleId}/comments/{?searchQuery,statuses,page,rpp,sort,embed,fields}';\r\n        _this.getRoute = 'articles/{articleId}/comments/{id}/{?embed,fields}';\r\n        _this.createRoute = 'articles/{articleId}/comments/';\r\n        _this.updateRoute = 'articles/{articleId}/comments/{id}';\r\n        _this.deleteRoute = 'articles/{articleId}/comments/{id}';\r\n        _this.deleteAllRoute = 'articles/{articleId}/comments/{id}';\r\n        _this.approveRoute = 'articles/{articleId}/comments/{id}/approve';\r\n        _this.unapproveRoute = 'articles/{articleId}/comments/{id}/unapprove';\r\n        _this.flagRoute = 'articles/{articleId}/comments/{id}/flag';\r\n        _this.unflagRoute = 'articles/{articleId}/comments/{id}/unflag';\r\n        _this.reportRoute = 'articles/{articleId}/comments/{id}/report';\r\n        _this.unreportRoute = 'articles/{articleId}/comments/{id}/unreport';\r\n        _this.spamRoute = 'articles/{articleId}/comments/{id}/spam';\r\n        _this.unspamRoute = 'articles/{articleId}/comments/{id}/unspam';\r\n        return _this;\r\n    }\r\n    Object.defineProperty(ArticleInstanceCommentsRoute.prototype, \"replies\", {\r\n        get: function () {\r\n            return this.articleInstanceCommentRepliesRoute;\r\n        },\r\n        enumerable: true,\r\n        configurable: true\r\n    });\r\n    /**\r\n     * Parses find route which can be expanded with additional options. Supported items are:\r\n     * - `searchQuery` - A string value used to identify article comment resources using the phrase search.\r\n     * - `page` - A value used to set the page number, i.e. to retrieve certain article comment subset from the storage.\r\n     * - `rpp` - A value used to limit the size of result set per page.\r\n     * - `sort` - A string used to set the article comment property to sort the result collection by.\r\n     * - `embed` - Comma separated list of resources to be contained within the current representation.\r\n     * - `statuses` - Comma separated list of article comment states that specify where search should be done (Allowed states: Approved, Spam, Reported, Flagged and UnApproved).\r\n     * @method\r\n     * @param articleId Article slug or id which uniquely identifies article whose comment resources need to be retrieved.\r\n     * @param options Query resource options object.\r\n     * @example articleInstanceCommentsRoute.find({ searchQuery: '<search-phrase>' });\r\n     **/\r\n    ArticleInstanceCommentsRoute.prototype.find = function (articleId, options) {\r\n        var params = this.modelMapper.findParams(options);\r\n        params.articleId = articleId;\r\n        return _super.prototype.baseCreate.call(this, this.findRoute, params);\r\n    };\r\n    /**\r\n     * Parses get route which can be expanded with additional options. Supported items are:\r\n     * - `id` - Id which uniquely identifies article comment resource that needs to be retrieved.\r\n     * - `embed` - Comma separated list of resources to be contained within the current representation.\r\n     * @method\r\n     * @param articleId Article slug or id which uniquely identifies article whose comment resource needs to be retrieved.\r\n     * @param commentId Id which identifies article comment resource that needs to be retrieved.\r\n     * @param options Options object that contains embed data.\r\n     * @example articleInstanceCommentsRoute.get().expand({ id: '<comment-id>' });\r\n     **/\r\n    ArticleInstanceCommentsRoute.prototype.get = function (articleId, commentId, options) {\r\n        var params = this.utility.extend({}, options);\r\n        params.articleId = articleId;\r\n        params.id = commentId;\r\n        return _super.prototype.baseGet.call(this, this.getRoute, params);\r\n    };\r\n    /**\r\n     * Parses create route; this URI template doesnt support any additional options.\r\n     * @method\r\n     * @param data An article comment object that needs to be inserted into the system.\r\n     * @example articleInstanceCommentsRoute.create(data);\r\n     **/\r\n    ArticleInstanceCommentsRoute.prototype.create = function (data) {\r\n        return _super.prototype.baseCreate.call(this, this.createRoute, data);\r\n    };\r\n    /**\r\n     * Parses update route; this URI template doesnt support any additional options.\r\n     * @method\r\n     * @param data An article comments object used to update specified article comment resource.\r\n     * @example articleInstanceCommentsRoute.update(data);\r\n     **/\r\n    ArticleInstanceCommentsRoute.prototype.update = function (data) {\r\n        return _super.prototype.baseUpdate.call(this, this.updateRoute, data);\r\n    };\r\n    /**\r\n     * Parses delete route; this URI template doesnt support any additional options.\r\n     * @method\r\n     * @param data An article comments object used to delete specified article comment resource.\r\n     * @example articleInstanceCommentsRoute.delete(data);\r\n     **/\r\n    ArticleInstanceCommentsRoute.prototype.delete = function (data) {\r\n        return _super.prototype.baseDelete.call(this, this.deleteRoute, data);\r\n    };\r\n    /**\r\n     * Parses delete all route; this URI template doesnt support any additional options.\r\n     * @method\r\n     * @param data An article object used to delete specified article comment resource.\r\n     * @example articleInstanceCommentsRoute.deleteAll(data);\r\n     **/\r\n    ArticleInstanceCommentsRoute.prototype.deleteAll = function (data) {\r\n        return _super.prototype.baseDelete.call(this, this.deleteAllRoute, data, undefined, 'delete-comments-by-article');\r\n    };\r\n    /**\r\n     * Parses approve route; this URI template doesnt support any additional options.\r\n     * @method\r\n     * @param data An article comment object.\r\n     * @example articleInstanceCommentsRoute.approve(data);\r\n     **/\r\n    ArticleInstanceCommentsRoute.prototype.approve = function (data) {\r\n        return _super.prototype.baseUpdate.call(this, this.approveRoute, data, undefined, 'comment-approve');\r\n    };\r\n    /**\r\n     * Parses unapprove route; this URI template doesnt support any additional options.\r\n     * @method\r\n     * @param data An article comment object.\r\n     * @example articleInstanceCommentsRoute.unapprove(data);\r\n     **/\r\n    ArticleInstanceCommentsRoute.prototype.unapprove = function (data) {\r\n        return _super.prototype.baseUpdate.call(this, this.unapproveRoute, data, undefined, 'comment-unapprove');\r\n    };\r\n    /**\r\n     * Parses flag route; this URI template doesnt support any additional options.\r\n     * @method\r\n     * @param data An article comment object.\r\n     * @example articleInstanceCommentsRoute.flag(data);\r\n     **/\r\n    ArticleInstanceCommentsRoute.prototype.flag = function (data) {\r\n        return _super.prototype.baseUpdate.call(this, this.flagRoute, data, undefined, 'comment-flag');\r\n    };\r\n    /**\r\n     * Parses unflag route; this URI template doesnt support any additional options.\r\n     * @method\r\n     * @param data An article comment object.\r\n     * @example articleInstanceCommentsRoute.unflag(data);\r\n     **/\r\n    ArticleInstanceCommentsRoute.prototype.unflag = function (data) {\r\n        return _super.prototype.baseUpdate.call(this, this.unflagRoute, data, undefined, 'comment-unflag');\r\n    };\r\n    /**\r\n     * Parses report route; this URI template doesnt support any additional options.\r\n     * @method\r\n     * @param data An article comment object.\r\n     * @example articleInstanceCommentsRoute.report(data);\r\n     **/\r\n    ArticleInstanceCommentsRoute.prototype.report = function (data) {\r\n        return _super.prototype.baseUpdate.call(this, this.reportRoute, data, undefined, 'comment-report');\r\n    };\r\n    /**\r\n     * Parses unreport route; this URI template doesnt support any additional options.\r\n     * @method\r\n     * @param data An article comment object.\r\n     * @example articleInstanceCommentsRoute.unreport(data);\r\n     **/\r\n    ArticleInstanceCommentsRoute.prototype.unreport = function (data) {\r\n        return _super.prototype.baseUpdate.call(this, this.unreportRoute, data, undefined, 'comment-unreport');\r\n    };\r\n    /**\r\n     * Parses spam route; this URI template doesnt support any additional options.\r\n     * @method\r\n     * @param data An article comment object.\r\n     * @example articleInstanceCommentsRoute.spam(data);\r\n     **/\r\n    ArticleInstanceCommentsRoute.prototype.spam = function (data) {\r\n        return _super.prototype.baseUpdate.call(this, this.spamRoute, data, undefined, 'comment-spam');\r\n    };\r\n    /**\r\n     * Parses unspam route; this URI template doesnt support any additional options.\r\n     * @method\r\n     * @param data An article comment object.\r\n     * @example articleInstanceCommentsRoute.unspam(data);\r\n     **/\r\n    ArticleInstanceCommentsRoute.prototype.unspam = function (data) {\r\n        return _super.prototype.baseUpdate.call(this, this.unspamRoute, data, undefined, 'comment-unspam');\r\n    };\r\n    return ArticleInstanceCommentsRoute;\r\n}(common_1.BaseRoute));\r\nArticleInstanceCommentsRoute = tslib_1.__decorate([\r\n    inversify_1.injectable(),\r\n    tslib_1.__param(0, inversify_1.inject(_1.TYPES.ArticleInstanceCommentRepliesRoute)),\r\n    tslib_1.__param(1, inversify_1.inject(contracts_1.TYPES.IAppOptions)),\r\n    tslib_1.__metadata(\"design:paramtypes\", [typeof (_a = typeof _1.ArticleInstanceCommentRepliesRoute !== \"undefined\" && _1.ArticleInstanceCommentRepliesRoute) === \"function\" && _a || Object, typeof (_b = typeof contracts_1.IAppOptions !== \"undefined\" && contracts_1.IAppOptions) === \"function\" && _b || Object])\r\n], ArticleInstanceCommentsRoute);\r\nexports.ArticleInstanceCommentsRoute = ArticleInstanceCommentsRoute;\r\nvar _a, _b;\r\n/**\r\n * @overview\r\n ***Notes:**\r\n - Refer to the [REST API documentation](https://github.com/Baasic/baasic-rest-api/wiki) for detailed information about available Baasic REST API end-points.\r\n - [URI Template](https://github.com/Baasic/uritemplate-js) syntax enables expanding the Baasic route templates to Baasic REST URIs providing it with an object that contains URI parameters.\r\n - All end-point objects are transformed by the associated route service.\r\n*/ \r\n\n\n\n//////////////////\n// WEBPACK FOOTER\n// ./src/modules/article/articleComments/InstanceCommentsRoute.ts\n// module id = 120\n// module chunks = 0","\"use strict\";\r\nfunction __export(m) {\r\n    for (var p in m) if (!exports.hasOwnProperty(p)) exports[p] = m[p];\r\n}\r\nObject.defineProperty(exports, \"__esModule\", { value: true });\r\n__export(require(\"./InstanceCommentsRepliesRoute\"));\r\n__export(require(\"./InstanceCommentsRepliesClient\"));\r\n__export(require(\"./InstanceCommentsRoute\"));\r\n__export(require(\"./InstanceCommentsClient\"));\r\n\n\n\n//////////////////\n// WEBPACK FOOTER\n// ./src/modules/article/articleComments/index.ts\n// module id = 121\n// module chunks = 0","/* globals module */\r\n/**\r\n * @module articleFilesBatchClient\r\n * @description  Files Batch Client provides Baasic route templates which can be expanded to Baasic REST URIs. Various services can use Baasic Files Route Service to obtain needed routes while other routes will be obtained through HAL. By convention, all route services use the same function names as their corresponding services.\r\n*/\r\n\"use strict\";\r\nObject.defineProperty(exports, \"__esModule\", { value: true });\r\nvar tslib_1 = require(\"tslib\");\r\nvar inversify_1 = require(\"inversify\");\r\n;\r\nvar httpApi_1 = require(\"../../httpApi\");\r\nvar _1 = require(\"./\");\r\nvar ArticleFilesBatchClient = (function () {\r\n    function ArticleFilesBatchClient(articleFilesBatchRoute, apiClient) {\r\n        this.articleFilesBatchRoute = articleFilesBatchRoute;\r\n        this.apiClient = apiClient;\r\n    }\r\n    Object.defineProperty(ArticleFilesBatchClient.prototype, \"routeDefinition\", {\r\n        get: function () {\r\n            return this.articleFilesBatchRoute;\r\n        },\r\n        enumerable: true,\r\n        configurable: true\r\n    });\r\n    /**\r\n     * Returns a promise that is resolved once the unlink action has been performed. This action will remove file resources from the system if successfully completed. If derived resource's format is passed, such as `width` and `height` for the image type of file resource, the operation will remove just derived resource. Otherwise, specified file and all its accompanying derived resources will be removed from the system.\r\n     * @method\r\n     * @param data Collection of article files that needs to be deleted.\r\n     * @returns A promise that is resolved once the unlink action has been performed.\r\n     * @example // Remove original file resources\r\n                   articleFilesBatchClient.unlink([{ id: '<file-id>' }])\r\n                       .then(function (data) {\r\n                           // perform success action here\r\n                       },\r\n                        function (response, status, headers, config) {\r\n                           // perform error handling here\r\n                       });\r\n               // Remove derived file resources\r\n                   articleFilesBatchClient.unlink([{ id: '<file-id>', fileFormat: { width: <width>, height: <height> } }])\r\n                       .then(function (data) {\r\n                           // perform success action here\r\n                       },\r\n                        function (response, status, headers, config) {\r\n                           // perform error handling here\r\n                       });\r\n    **/\r\n    ArticleFilesBatchClient.prototype.unlink = function (data) {\r\n        return this.apiClient.delete(this.articleFilesBatchRoute.unlink(), undefined, data);\r\n    };\r\n    /**\r\n     * Returns a promise that is resolved once the update action has been performed; this action updates specified file resources.\r\n     * @method\r\n     * @param data A collection of article files objects used to update specified article files.\r\n     * @returns A promise that is resolved once the update action has been performed.\r\n     * @example articleFilesClient.batch.update(files)\r\n                    .then(function (data) {\r\n                        // perform success action here\r\n                    },\r\n                     function (response, status, headers, config) {\r\n                        // perform error handling here\r\n                    });\r\n     **/\r\n    ArticleFilesBatchClient.prototype.update = function (data) {\r\n        return this.apiClient.put(this.routeDefinition.update(), this.routeDefinition.updateParams(data));\r\n    };\r\n    /**\r\n     * Returns a promise that is resolved once the link action has been performed; this action links file resources from other modules into the Files module (For example: file resources from the Media Vault module can be linked directly into the Files module).\r\n     * @method\r\n     * @param data A collection of article file objects that need to be inserted into the system.\r\n     * @returns A promise that is resolved once the link action has been performed.\r\n     * @example articleFilesClient.batch.link(files)\r\n                    .then(function (data) {\r\n                        // perform success action here\r\n                    },\r\n                     function (response, status, headers, config) {\r\n                        // perform error handling here\r\n                    });\r\n     **/\r\n    ArticleFilesBatchClient.prototype.link = function (data) {\r\n        return this.apiClient.post(this.routeDefinition.link(), this.routeDefinition.createParams(data));\r\n    };\r\n    return ArticleFilesBatchClient;\r\n}());\r\nArticleFilesBatchClient = tslib_1.__decorate([\r\n    inversify_1.injectable(),\r\n    tslib_1.__param(0, inversify_1.inject(_1.TYPES.ArticleFilesBatchRoute)),\r\n    tslib_1.__param(1, inversify_1.inject(httpApi_1.httpTYPES.ApiClient)),\r\n    tslib_1.__metadata(\"design:paramtypes\", [typeof (_a = typeof _1.ArticleFilesBatchRoute !== \"undefined\" && _1.ArticleFilesBatchRoute) === \"function\" && _a || Object, typeof (_b = typeof httpApi_1.ApiClient !== \"undefined\" && httpApi_1.ApiClient) === \"function\" && _b || Object])\r\n], ArticleFilesBatchClient);\r\nexports.ArticleFilesBatchClient = ArticleFilesBatchClient;\r\nvar _a, _b;\r\n/**\r\n * @overview\r\n ***Notes:**\r\n - Refer to the [REST API documentation](https://github.com/Baasic/baasic-rest-api/wiki) for detailed information about available Baasic REST API end-points.\r\n - All end-point objects are transformed by the associated route service.\r\n*/\r\n\n\n\n//////////////////\n// WEBPACK FOOTER\n// ./src/modules/article/articleFilesBatchClient.ts\n// module id = 122\n// module chunks = 0","/* globals module */\r\n/**\r\n * @module articleFilesBatchRoute\r\n * @description Baasic Article Files Batch Route Definition provides Baasic route templates which can be expanded to Baasic REST URIs. Various services can use Baasic Article Files Batch Route Service to obtain needed routes while other routes will be obtained through HAL. By convention, all route services use the same function names as their corresponding services.\r\n*/\r\n\"use strict\";\r\nObject.defineProperty(exports, \"__esModule\", { value: true });\r\nvar tslib_1 = require(\"tslib\");\r\nvar inversify_1 = require(\"inversify\");\r\nvar common_1 = require(\"../../common\");\r\n;\r\nvar contracts_1 = require(\"../../core/contracts\");\r\nvar ArticleFilesBatchRoute = (function (_super) {\r\n    tslib_1.__extends(ArticleFilesBatchRoute, _super);\r\n    function ArticleFilesBatchRoute(appOptions) {\r\n        var _this = _super.call(this, appOptions) || this;\r\n        _this.appOptions = appOptions;\r\n        _this.unlinkRoute = 'article-files/batch/unlink';\r\n        _this.updateRoute = 'article-files/batch';\r\n        _this.linkRoute = 'article-files/batch/link';\r\n        return _this;\r\n    }\r\n    /**\r\n     * Parses unlink route; this URI template does not expose any additional options.\r\n     * @method\r\n     * @example articleFilesBatchRoute.unlink();\r\n     **/\r\n    ArticleFilesBatchRoute.prototype.unlink = function () {\r\n        return _super.prototype.baseCreate.call(this, this.unlinkRoute, {});\r\n    };\r\n    /**\r\n     * Parses update route; this URI template does not expose any additional options.\r\n     * @method\r\n     * @example articleFilesStreamsRoute.update();\r\n     **/\r\n    ArticleFilesBatchRoute.prototype.update = function () {\r\n        return _super.prototype.baseCreate.call(this, this.updateRoute, {});\r\n    };\r\n    /**\r\n     * Parses update route; this URI template does not expose any additional options.\r\n     * @method\r\n     * @example articleFilesStreamsRoute.link();\r\n     **/\r\n    ArticleFilesBatchRoute.prototype.link = function () {\r\n        return _super.prototype.baseCreate.call(this, this.linkRoute, {});\r\n    };\r\n    return ArticleFilesBatchRoute;\r\n}(common_1.BaseRoute));\r\nArticleFilesBatchRoute = tslib_1.__decorate([\r\n    inversify_1.injectable(),\r\n    tslib_1.__param(0, inversify_1.inject(contracts_1.TYPES.IAppOptions)),\r\n    tslib_1.__metadata(\"design:paramtypes\", [typeof (_a = typeof contracts_1.IAppOptions !== \"undefined\" && contracts_1.IAppOptions) === \"function\" && _a || Object])\r\n], ArticleFilesBatchRoute);\r\nexports.ArticleFilesBatchRoute = ArticleFilesBatchRoute;\r\nvar _a;\r\n/**\r\n * @overview\r\n ***Notes:**\r\n - Refer to the [REST API documentation](https://github.com/Baasic/baasic-rest-api/wiki) for detailed information about available Baasic REST API end-points.\r\n - [URI Template](https://github.com/Baasic/uritemplate-js) syntax enables expanding the Baasic route templates to Baasic REST URIs providing it with an object that contains URI parameters.\r\n - All end-point objects are transformed by the associated route service.\r\n*/\r\n\n\n\n//////////////////\n// WEBPACK FOOTER\n// ./src/modules/article/articleFilesBatchRoute.ts\n// module id = 123\n// module chunks = 0","/* globals module */\r\n/**\r\n * @module articleFilesClient\r\n * @description  Files Client provides Baasic route templates which can be expanded to Baasic REST URIs. Various services can use Baasic Files Route Service to obtain needed routes while other routes will be obtained through HAL. By convention, all route services use the same function names as their corresponding services.\r\n*/\r\n\"use strict\";\r\nObject.defineProperty(exports, \"__esModule\", { value: true });\r\nvar tslib_1 = require(\"tslib\");\r\nvar inversify_1 = require(\"inversify\");\r\n;\r\nvar httpApi_1 = require(\"../../httpApi\");\r\nvar _1 = require(\"./\");\r\nvar ArticleFilesClient = (function () {\r\n    function ArticleFilesClient(articleFilesRoute, articleFilesStreamsClient, ArticleFilesBatchClient, apiClient) {\r\n        this.articleFilesRoute = articleFilesRoute;\r\n        this.articleFilesStreamsClient = articleFilesStreamsClient;\r\n        this.ArticleFilesBatchClient = ArticleFilesBatchClient;\r\n        this.apiClient = apiClient;\r\n    }\r\n    Object.defineProperty(ArticleFilesClient.prototype, \"routeDefinition\", {\r\n        get: function () {\r\n            return this.articleFilesRoute;\r\n        },\r\n        enumerable: true,\r\n        configurable: true\r\n    });\r\n    Object.defineProperty(ArticleFilesClient.prototype, \"streams\", {\r\n        get: function () {\r\n            return this.articleFilesStreamsClient;\r\n        },\r\n        enumerable: true,\r\n        configurable: true\r\n    });\r\n    Object.defineProperty(ArticleFilesClient.prototype, \"batch\", {\r\n        get: function () {\r\n            return this.ArticleFilesBatchClient;\r\n        },\r\n        enumerable: true,\r\n        configurable: true\r\n    });\r\n    /**\r\n     * Returns a promise that is resolved once the find action has been performed. Success response returns a list of file resources matching the given criteria.\r\n     * @method\r\n     * @param options Query resource options object.\r\n     * @returns A promise that is resolved once the find action has been performed.\r\n     * @example articleFilesClient.find({\r\n                    pageNumber : 1,\r\n                    pageSize : 10,\r\n                    orderBy : '<field>',\r\n                    orderDirection : '<asc|desc>',\r\n                    search : '<search-phrase>'\r\n                })\r\n                .then(function (collection) {\r\n                    // perform success action here\r\n                },\r\n                 function (response, status, headers, config) {\r\n                    // perform error handling here\r\n                });\r\n     **/\r\n    ArticleFilesClient.prototype.find = function (options) {\r\n        return this.apiClient.get(this.routeDefinition.find(options));\r\n    };\r\n    /**\r\n     * Returns a promise that is resolved once the get action has been performed. Success response returns requested file resource.\r\n     * @method\r\n     * @param id Article file id which uniquely identifies article resource that needs to be retrieved.\r\n     * @param options Options object that contains embed data.\r\n     * @returns A promise that is resolved once the get action has been performed.\r\n     * @example articleFilesClient.get('<file-id>')\r\n                   .then(function (data) {\r\n                       // perform success action here\r\n                   },\r\n                    function (response, status, headers, config) {\r\n                       // perform error handling here\r\n                   });\r\n    **/\r\n    ArticleFilesClient.prototype.get = function (id, options) {\r\n        return this.apiClient.get(this.articleFilesRoute.get(id, options));\r\n    };\r\n    /**\r\n     * Returns a promise that is resolved once the unlink action has been performed. This action will remove one or many file resources from the system if successfully completed. Specified file and all its accompanying derived resources will be removed from the system. This route uses HAL enabled objects to obtain routes and therefore it doesn't apply baasicArticleFilesRouteService route template. Here is an example of how a route can be obtained from HAL enabled objects:\r\n     * ```\r\n     * let params = modelMapper.removeParams(fileEntry);\r\n     * let uri = params['model'].links('unlink').href;\r\n     * ```\r\n     * @method\r\n     * @param data Article file object.\r\n     * @param options options object.\r\n     * @returns A promise that is resolved once the unlink action has been performed.\r\n     * @example // fileEntry is a file resource previously fetched using get action. The following action will remove the original file resource and all accompanying derived file resources.\r\n                    articleFilesRoute.remove(fileEntry)\r\n                        .then(function (data) {\r\n                            // perform success action here\r\n                        },\r\n                         function (response, status, headers, config) {\r\n                            // perform error handling here\r\n                        });\r\n     **/\r\n    ArticleFilesClient.prototype.unlink = function (data, options) {\r\n        if (!options) {\r\n            options = {};\r\n        }\r\n        return this.apiClient.delete(this.articleFilesRoute.unlink(data, options));\r\n    };\r\n    /**\r\n     * Returns a promise that is resolved once the update file action has been performed; this action will update a file resource if successfully completed. This route uses HAL enabled objects to obtain routes and therefore it doesn't apply `baasicArticleFilesRouteService` route template. Here is an example of how a route can be obtained from HAL enabled objects:\r\n     ```\r\n     let params = modelMapper.updateParams(fileEntry);\r\n     let uri = params['model'].links('put').href;\r\n     ```\r\n     * @method\r\n     * @param data Article file object that need to be updated in the system.\r\n     * @returns A promise that is resolved once the update file action has been performed.\r\n     * @example // fileEntry is a file resource previously fetched using get action.\r\n                   fileEntry.description = '<description>';\r\n                   articleFilesClient.update(fileEntry)\r\n                       .then(function (data) {\r\n                           // perform success action here\r\n                       },\r\n                        function (response, status, headers, config) {\r\n                           // perform error handling here\r\n                       });\r\n    **/\r\n    ArticleFilesClient.prototype.update = function (data) {\r\n        return this.apiClient.put(this.routeDefinition.update(data), this.routeDefinition.updateParams(data));\r\n    };\r\n    /**\r\n     * Returns a promise that is resolved once the link action has been performed; this action links file resource from other modules into the Article Files module (For example: file resources from the Media Vault module can be linked directly into the Article Files module).\r\n     * @method\r\n     * @param data Article file object.\r\n     * @returns A promise that is resolved once the link action has been performed.\r\n     * @example articleFilesClient.link(fileObject)\r\n                    .then(function (response, status, headers, config) {\r\n                        // perform success handling here\r\n                    },\r\n                        function (response, status, headers, config) {\r\n                        // perform error handling here\r\n                    });\r\n     **/\r\n    ArticleFilesClient.prototype.link = function (data) {\r\n        return this.apiClient.post(this.routeDefinition.link(), this.routeDefinition.createParams(data));\r\n    };\r\n    return ArticleFilesClient;\r\n}());\r\nArticleFilesClient = tslib_1.__decorate([\r\n    inversify_1.injectable(),\r\n    tslib_1.__param(0, inversify_1.inject(_1.TYPES.ArticleFilesRoute)),\r\n    tslib_1.__param(1, inversify_1.inject(_1.TYPES.ArticleFilesStreamsClient)),\r\n    tslib_1.__param(2, inversify_1.inject(_1.TYPES.ArticleFilesBatchClient)),\r\n    tslib_1.__param(3, inversify_1.inject(httpApi_1.httpTYPES.ApiClient)),\r\n    tslib_1.__metadata(\"design:paramtypes\", [typeof (_a = typeof _1.ArticleFilesRoute !== \"undefined\" && _1.ArticleFilesRoute) === \"function\" && _a || Object, typeof (_b = typeof _1.ArticleFilesStreamsClient !== \"undefined\" && _1.ArticleFilesStreamsClient) === \"function\" && _b || Object, typeof (_c = typeof _1.ArticleFilesBatchClient !== \"undefined\" && _1.ArticleFilesBatchClient) === \"function\" && _c || Object, typeof (_d = typeof httpApi_1.ApiClient !== \"undefined\" && httpApi_1.ApiClient) === \"function\" && _d || Object])\r\n], ArticleFilesClient);\r\nexports.ArticleFilesClient = ArticleFilesClient;\r\nvar _a, _b, _c, _d;\r\n/**\r\n * @overview\r\n ***Notes:**\r\n - Refer to the [REST API documentation](https://github.com/Baasic/baasic-rest-api/wiki) for detailed information about available Baasic REST API end-points.\r\n - All end-point objects are transformed by the associated route service.\r\n*/ \r\n\n\n\n//////////////////\n// WEBPACK FOOTER\n// ./src/modules/article/articleFilesClient.ts\n// module id = 124\n// module chunks = 0","/* globals module */\r\n/**\r\n * @module articleFilesRoute\r\n * @description Baasic Article Files Route Definition provides Baasic route templates which can be expanded to Baasic REST URIs. Various services can use Baasic Article Files Route Service to obtain needed routes while other routes will be obtained through HAL. By convention, all route services use the same function names as their corresponding services.\r\n*/\r\n\"use strict\";\r\nObject.defineProperty(exports, \"__esModule\", { value: true });\r\nvar tslib_1 = require(\"tslib\");\r\nvar inversify_1 = require(\"inversify\");\r\nvar common_1 = require(\"../../common\");\r\n;\r\nvar contracts_1 = require(\"../../core/contracts\");\r\nvar _1 = require(\"./\");\r\nvar ArticleFilesRoute = (function (_super) {\r\n    tslib_1.__extends(ArticleFilesRoute, _super);\r\n    function ArticleFilesRoute(articleFilesStreamsRoute, articleFilesBatchRoute, appOptions) {\r\n        var _this = _super.call(this, appOptions) || this;\r\n        _this.articleFilesStreamsRoute = articleFilesStreamsRoute;\r\n        _this.articleFilesBatchRoute = articleFilesBatchRoute;\r\n        _this.appOptions = appOptions;\r\n        _this.findRoute = 'article-files/{?searchQuery,page,rpp,sort,embed,fields}';\r\n        _this.getRoute = 'article-files/{id}/{?embed,fields}';\r\n        _this.linkRoute = 'article-files/link';\r\n        _this.unlinkRoute = 'article-files/unlink/{id}';\r\n        _this.updateRoute = 'article-files/{id}';\r\n        return _this;\r\n    }\r\n    Object.defineProperty(ArticleFilesRoute.prototype, \"streams\", {\r\n        get: function () {\r\n            return this.articleFilesStreamsRoute;\r\n        },\r\n        enumerable: true,\r\n        configurable: true\r\n    });\r\n    Object.defineProperty(ArticleFilesRoute.prototype, \"batch\", {\r\n        get: function () {\r\n            return this.articleFilesBatchRoute;\r\n        },\r\n        enumerable: true,\r\n        configurable: true\r\n    });\r\n    /**\r\n     * Parses find route which can be expanded with additional options. Supported items are:\r\n     * - `searchQuery` - A string referencing file properties using the phrase search.\r\n     * - `page` - A value used to set the page number, i.e. to retrieve certain file subset from the storage.\r\n     * - `rpp` - A value used to limit the size of result set per page.\r\n     * - `sort` - A string used to set the file property to sort the result collection by.\r\n     * - `embed` - Comma separated list of resources to be contained within the current representation.\r\n     * @method\r\n     * @param options Query resource options object.\r\n     * @example articleFilesRoute.find({searchQuery: '<search-phrase>'});\r\n     **/\r\n    ArticleFilesRoute.prototype.find = function (options) {\r\n        return _super.prototype.baseFind.call(this, this.findRoute, options);\r\n    };\r\n    /**\r\n     * Parses get route; this route should be expanded with the Id of the file resource.\r\n     * @method\r\n     * @param id Article file id which uniquely identifies article resource that needs to be retrieved.\r\n     * @param options Options object that contains embed data.\r\n     * @example articleFilesRoute.get({id: '<file-id>'});\r\n     **/\r\n    ArticleFilesRoute.prototype.get = function (id, options) {\r\n        return _super.prototype.baseGet.call(this, this.getRoute, id, options);\r\n    };\r\n    /**\r\n     * Parses link route; this URI template does not expose any additional options.\r\n     * @method\r\n     * @example articleFilesRoute.link();\r\n     **/\r\n    ArticleFilesRoute.prototype.link = function () {\r\n        return _super.prototype.baseCreate.call(this, this.linkRoute, {});\r\n    };\r\n    /**\r\n     * Parses unlink route; this URI template does not expose any additional options.\r\n     * @method\r\n     * @example articleFilesRoute.unlink(data);\r\n     **/\r\n    ArticleFilesRoute.prototype.unlink = function (data, options) {\r\n        return _super.prototype.baseDelete.call(this, this.unlinkRoute, data, options, 'unlink');\r\n    };\r\n    /**\r\n     * Parses update route; this URI template does not expose any additional options.\r\n     * @method\r\n     * @example articleFilesRoute.update(data);\r\n     **/\r\n    ArticleFilesRoute.prototype.update = function (data) {\r\n        if (!this.utility.isObject(data)) {\r\n            data = {\r\n                id: data\r\n            };\r\n        }\r\n        return _super.prototype.baseUpdate.call(this, this.updateRoute, data);\r\n    };\r\n    return ArticleFilesRoute;\r\n}(common_1.BaseRoute));\r\nArticleFilesRoute = tslib_1.__decorate([\r\n    inversify_1.injectable(),\r\n    tslib_1.__param(0, inversify_1.inject(_1.TYPES.ArticleFilesStreamsRoute)),\r\n    tslib_1.__param(1, inversify_1.inject(_1.TYPES.ArticleFilesBatchRoute)),\r\n    tslib_1.__param(2, inversify_1.inject(contracts_1.TYPES.IAppOptions)),\r\n    tslib_1.__metadata(\"design:paramtypes\", [typeof (_a = typeof _1.ArticleFilesStreamsRoute !== \"undefined\" && _1.ArticleFilesStreamsRoute) === \"function\" && _a || Object, typeof (_b = typeof _1.ArticleFilesBatchRoute !== \"undefined\" && _1.ArticleFilesBatchRoute) === \"function\" && _b || Object, typeof (_c = typeof contracts_1.IAppOptions !== \"undefined\" && contracts_1.IAppOptions) === \"function\" && _c || Object])\r\n], ArticleFilesRoute);\r\nexports.ArticleFilesRoute = ArticleFilesRoute;\r\nvar _a, _b, _c;\r\n/**\r\n * @overview\r\n ***Notes:**\r\n - Refer to the [REST API documentation](https://github.com/Baasic/baasic-rest-api/wiki) for detailed information about available Baasic REST API end-points.\r\n - [URI Template](https://github.com/Baasic/uritemplate-js) syntax enables expanding the Baasic route templates to Baasic REST URIs providing it with an object that contains URI parameters.\r\n - All end-point objects are transformed by the associated route service.\r\n*/ \r\n\n\n\n//////////////////\n// WEBPACK FOOTER\n// ./src/modules/article/articleFilesRoute.ts\n// module id = 125\n// module chunks = 0","/* globals module */\r\n/**\r\n * @module articleFilesStreamsClient\r\n * @description  Article Files Streams Client provides Baasic route templates which can be expanded to Baasic REST URIs. Various services can use Baasic Files Streams Route Definition to obtain needed routes while other routes will be obtained through HAL. By convention, all route services use the same function names as their corresponding services.\r\n*/\r\n\"use strict\";\r\nObject.defineProperty(exports, \"__esModule\", { value: true });\r\nvar tslib_1 = require(\"tslib\");\r\nvar inversify_1 = require(\"inversify\");\r\n;\r\nvar httpApi_1 = require(\"../../httpApi\");\r\nvar _1 = require(\"./\");\r\nvar ArticleFilesStreamsClient = (function () {\r\n    function ArticleFilesStreamsClient(articleFilesStreamsRoute, apiClient) {\r\n        this.articleFilesStreamsRoute = articleFilesStreamsRoute;\r\n        this.apiClient = apiClient;\r\n    }\r\n    Object.defineProperty(ArticleFilesStreamsClient.prototype, \"routeDefinition\", {\r\n        get: function () {\r\n            return this.articleFilesStreamsRoute;\r\n        },\r\n        enumerable: true,\r\n        configurable: true\r\n    });\r\n    /**\r\n     * Returns a promise that is resolved once the get action has been performed. Success response returns the file stream if successfully completed. If derived resource's format is passed, such as `width` and `height` for the image type of file resource, the operation will return a stream of the derived resource. Otherwise, stream of the original file resource will be retrieved.\r\n     * @method\r\n     * @param data Article file id of the original article file used to identify stream that needs to be retrieved from the system.\r\n     * @returns A promise that is resolved once the get action has been performed.\r\n     * @example // Request the original file stream\r\n                    articleFilesStreamsClient.get({id: '<file-id>'})\r\n                        .then(function (data) {\r\n                            // perform success action here\r\n                        },\r\n                         function (response, status, headers, config) {\r\n                            // perform error handling here\r\n                        });\r\n\r\n                // Request derived file stream\r\n                        articleFilesStreamsClient.get({id: '<file-id>', width: <width>, height: <height>})\r\n                            .then(function (data) {\r\n                                // perform success action here\r\n                            },\r\n                             function (response, status, headers, config) {\r\n                                 // perform error handling here\r\n                            });\r\n     **/\r\n    ArticleFilesStreamsClient.prototype.get = function (data) {\r\n        return this.apiClient.get(this.routeDefinition.get(data));\r\n    };\r\n    /**\r\n     * Returns a promise that is resolved once the get action has been performed. Success response returns the file stream as a blob. If derived resource's format is passed, such as `width` and `height` for the image type of file resource, the operation will return a blob of the derived file resource. Otherwise, blob of the original file resource will be retrieved. For more information on Blob objects please see [Blob Documentation](https://developer.mozilla.org/en-US/docs/Web/API/Blob).\r\n     * @method\r\n     * @param data Article file id of the original article file used to identify stream that needs to be retrieved from the system.\r\n     * @returns A promise that is resolved once the get action has been performed.\r\n     * @example // Request the original blob\r\n                    articleFilesStreamsClient.getBlob('<file-id>')\r\n                        .then(function (data) {\r\n                            // perform success action here\r\n                        },\r\n                         function (response, status, headers, config) {\r\n                            // perform error handling here\r\n                        });\r\n                        \r\n                // Request derived blob\r\n                        articleFilesStreamsClient.getBlob({\r\n                            id: '<file-id>',\r\n                            width: <width>,\r\n                            height: <height>\r\n                        })\r\n                        .then(function (data) {\r\n                            // perform success action here\r\n                        },\r\n                         function (response, status, headers, config) {\r\n                            // perform error handling here\r\n                        });\r\n     **/\r\n    ArticleFilesStreamsClient.prototype.getBlob = function (data) {\r\n        return this.apiClient.get(this.articleFilesStreamsRoute.get(data), { 'Accept': 'application/octet-stream' });\r\n    };\r\n    /**\r\n     * Returns a promise that is resolved once the update file stream action has been performed; this action will replace the existing stream with a new one. Alternatively, if a derived stream is being updated it will either create a new derived stream or replace the existing one. In order to update a derived stream, format needs to be passed (For example: `width` and `height` for the image type of file stream data type).\r\n     * @method\r\n     * @param data article file used to identify stream that needs to be updated.\r\n     * @param stream\r\n     * @returns A promise that is resolved once the update file stream action has been performed.\r\n     * @example // Update original file stream\r\n                    articleFilesStreamsClient.update('<file-id>', <file-stream>)\r\n                        .then(function (data) {\r\n                            // perform success action here\r\n                        },\r\n                         function (response, status, headers, config) {\r\n                            // perform error handling here\r\n                        });\r\n                // Update derived file stream\r\n                    articleFilesStreamsClient.update({id: '<file-id>', width: <width>, height: <height>}, <file-stream>)\r\n                        .then(function (data) {\r\n                            // perform success action here\r\n                        },\r\n                         function (response, status, headers, config) {\r\n                            // perform error handling here\r\n                        });\r\n     **/\r\n    ArticleFilesStreamsClient.prototype.update = function (data, stream) {\r\n        var formData = new FormData();\r\n        formData.append('file', stream);\r\n        return this.apiClient.put(this.articleFilesStreamsRoute.update(data), formData, { 'Content-Type': undefined });\r\n    };\r\n    /**\r\n     * Returns a promise that is resolved once the create file stream action has been performed; this action will upload the specified blob. For more information on Blob objects please see [Blob Documentation](https://developer.mozilla.org/en-US/docs/Web/API/Blob).\r\n     * @method\r\n     * @param data article file that needs to be saved into the system.\r\n     * @param stream\r\n     * @returns A promise that is resolved once the create file stream action has been performed.\r\n     * @example articleFilesStreamsClient.create('<file-id>', <blob>)\r\n                   .then(function (data) {\r\n                        // perform success action here\r\n                   },\r\n                    function (response, status, headers, config) {\r\n                       // perform error handling here\r\n                   });\r\n    **/\r\n    ArticleFilesStreamsClient.prototype.create = function (data, stream) {\r\n        var formData = new FormData();\r\n        formData.append('file', stream);\r\n        return this.apiClient.post(this.articleFilesStreamsRoute.create(data), formData, { 'Content-Type': undefined });\r\n    };\r\n    return ArticleFilesStreamsClient;\r\n}());\r\nArticleFilesStreamsClient = tslib_1.__decorate([\r\n    inversify_1.injectable(),\r\n    tslib_1.__param(0, inversify_1.inject(_1.TYPES.ArticleFilesStreamsRoute)),\r\n    tslib_1.__param(1, inversify_1.inject(httpApi_1.httpTYPES.ApiClient)),\r\n    tslib_1.__metadata(\"design:paramtypes\", [typeof (_a = typeof _1.ArticleFilesStreamsRoute !== \"undefined\" && _1.ArticleFilesStreamsRoute) === \"function\" && _a || Object, typeof (_b = typeof httpApi_1.ApiClient !== \"undefined\" && httpApi_1.ApiClient) === \"function\" && _b || Object])\r\n], ArticleFilesStreamsClient);\r\nexports.ArticleFilesStreamsClient = ArticleFilesStreamsClient;\r\nvar _a, _b;\r\n/**\r\n * @overview\r\n ***Notes:**\r\n - Refer to the [REST API documentation](https://github.com/Baasic/baasic-rest-api/wiki) for detailed information about available Baasic REST API end-points.\r\n - All end-point objects are transformed by the associated route service.\r\n*/ \r\n\n\n\n//////////////////\n// WEBPACK FOOTER\n// ./src/modules/article/articleFilesStreamsClient.ts\n// module id = 126\n// module chunks = 0","/* globals module */\r\n/**\r\n * @module articleFilesStreamsRoute\r\n * @description Baasic Article Files Streams Route Definition provides Baasic route templates which can be expanded to Baasic REST URIs. Various services can use Baasic Article Files Streams Route Service to obtain needed routes while other routes will be obtained through HAL. By convention, all route services use the same function names as their corresponding services.\r\n*/\r\n\"use strict\";\r\nObject.defineProperty(exports, \"__esModule\", { value: true });\r\nvar tslib_1 = require(\"tslib\");\r\nvar inversify_1 = require(\"inversify\");\r\nvar common_1 = require(\"../../common\");\r\n;\r\nvar contracts_1 = require(\"../../core/contracts\");\r\nvar ArticleFilesStreamsRoute = (function (_super) {\r\n    tslib_1.__extends(ArticleFilesStreamsRoute, _super);\r\n    function ArticleFilesStreamsRoute(appOptions) {\r\n        var _this = _super.call(this, appOptions) || this;\r\n        _this.appOptions = appOptions;\r\n        _this.getRoute = 'article-file-streams/{id}/{?width,height}';\r\n        _this.createRoute = 'article-file-streams/{filename}/{?articleId}';\r\n        _this.updateRoute = 'article-file-streams/{id}/{?width,height}';\r\n        return _this;\r\n    }\r\n    /**\r\n     * Parses get route; this route should be expanded with id of desired file stream. Additional supported items are:\r\n     * - `width` - width of desired derived image.\r\n     * - `height` - height of desired derived image.\r\n     * @method\r\n     * @param data Article file id of the original article file used to identify stream that needs to be retrieved from the system.\r\n     * @example articleFilesRoute.get({id: '<filename>'});\r\n     **/\r\n    ArticleFilesStreamsRoute.prototype.get = function (data) {\r\n        if (!this.utility.isObject(data)) {\r\n            data = {\r\n                id: data\r\n            };\r\n        }\r\n        return _super.prototype.baseCreate.call(this, this.getRoute, data);\r\n    };\r\n    /**\r\n     * Parses create route; this route should be expanded with the filename which indicates where the stream will be saved.\r\n     * @method\r\n     * @param data article file that needs to be saved into the system.\r\n     * @example articleFilesRoute.create({filename: '<filename>'});\r\n     **/\r\n    ArticleFilesStreamsRoute.prototype.create = function (data) {\r\n        return _super.prototype.baseCreate.call(this, this.createRoute, data);\r\n    };\r\n    /**\r\n     * Parses update route; this route should be expanded with the id of the previously saved resource. Additional supported items are:\r\n     * - `width` - width of derived image to update.\r\n     * - `height` - height of derived image to update.\r\n     * @method\r\n     * @param data article file used to identify stream that needs to be updated.\r\n     * @example articleFilesRoute.update({id: '<filename>'});\r\n     **/\r\n    ArticleFilesStreamsRoute.prototype.update = function (data) {\r\n        return _super.prototype.baseUpdate.call(this, this.updateRoute, data);\r\n    };\r\n    return ArticleFilesStreamsRoute;\r\n}(common_1.BaseRoute));\r\nArticleFilesStreamsRoute = tslib_1.__decorate([\r\n    inversify_1.injectable(),\r\n    tslib_1.__param(0, inversify_1.inject(contracts_1.TYPES.IAppOptions)),\r\n    tslib_1.__metadata(\"design:paramtypes\", [typeof (_a = typeof contracts_1.IAppOptions !== \"undefined\" && contracts_1.IAppOptions) === \"function\" && _a || Object])\r\n], ArticleFilesStreamsRoute);\r\nexports.ArticleFilesStreamsRoute = ArticleFilesStreamsRoute;\r\nvar _a;\r\n/**\r\n * @overview\r\n ***Notes:**\r\n - Refer to the [REST API documentation](https://github.com/Baasic/baasic-rest-api/wiki) for detailed information about available Baasic REST API end-points.\r\n - [URI Template](https://github.com/Baasic/uritemplate-js) syntax enables expanding the Baasic route templates to Baasic REST URIs providing it with an object that contains URI parameters.\r\n - All end-point objects are transformed by the associated route service.\r\n*/ \r\n\n\n\n//////////////////\n// WEBPACK FOOTER\n// ./src/modules/article/articleFilesStreamsRoute.ts\n// module id = 127\n// module chunks = 0","/* globals module */\r\n/**\r\n * @module articleInstanceFilesBatchClient\r\n * @description  Article Instance Files Batch Client provides Baasic route templates which can be expanded to Baasic REST URIs. Various services can use Baasic Files Route Service to obtain needed routes while other routes will be obtained through HAL. By convention, all route services use the same function names as their corresponding services.\r\n*/\r\n\"use strict\";\r\nObject.defineProperty(exports, \"__esModule\", { value: true });\r\nvar tslib_1 = require(\"tslib\");\r\nvar inversify_1 = require(\"inversify\");\r\nvar httpApi_1 = require(\"../../../httpApi\");\r\nvar _1 = require(\"../\");\r\nvar ArticleInstanceFilesBatchClient = (function () {\r\n    function ArticleInstanceFilesBatchClient(articleInstanceFilesBatchRoute, apiClient) {\r\n        this.articleInstanceFilesBatchRoute = articleInstanceFilesBatchRoute;\r\n        this.apiClient = apiClient;\r\n    }\r\n    Object.defineProperty(ArticleInstanceFilesBatchClient.prototype, \"routeDefinition\", {\r\n        get: function () {\r\n            return this.articleInstanceFilesBatchRoute;\r\n        },\r\n        enumerable: true,\r\n        configurable: true\r\n    });\r\n    /**\r\n     * Returns a promise that is resolved once the unlink action has been performed. This action will remove file resources from the system if successfully completed. If derived resource's format is passed, such as `width` and `height` for the image type of file resource, the operation will remove just derived resource. Otherwise, specified file and all its accompanying derived resources will be removed from the system.\r\n     * @method\r\n     * @param articleId Article file id of the original article file used to identify article files on which delete action should be performed.\r\n     * @param data Collection of article delete requests which uniquely identifies article files that need to be deleted.\r\n     * @returns A promise that is resolved once the unlink action has been performed.\r\n     * @example // Remove original file resources\r\n                   articleInstanceFilesBatchClient.unlink([{ id: '<file-id>' }])\r\n                       .then(function (data) {\r\n                           // perform success action here\r\n                       },\r\n                        function (response, status, headers, config) {\r\n                           // perform error handling here\r\n                       });\r\n               // Remove derived file resources\r\n                   articleInstanceFilesBatchClient.unlink([{ id: '<file-id>', fileFormat: { width: <width>, height: <height> } }])\r\n                       .then(function (data) {\r\n                           // perform success action here\r\n                       },\r\n                        function (response, status, headers, config) {\r\n                           // perform error handling here\r\n                       });\r\n    **/\r\n    ArticleInstanceFilesBatchClient.prototype.unlink = function (articleId, data) {\r\n        return this.apiClient.delete(this.articleInstanceFilesBatchRoute.unlink(articleId), undefined, data);\r\n    };\r\n    /**\r\n     * Returns a promise that is resolved once the update action has been performed; this action updates specified file resources.\r\n     * @method\r\n     * @param articleId Article slug or id which uniquely identifies article whose article file need to be updated.\r\n     * @param data Article file object that need to be updated in the system.\r\n     * @returns A promise that is resolved once the update action has been performed.\r\n     * @example articleInstanceFilesBatchClient.update(files)\r\n                    .then(function (data) {\r\n                        // perform success action here\r\n                    },\r\n                     function (response, status, headers, config) {\r\n                        // perform error handling here\r\n                    });\r\n     **/\r\n    ArticleInstanceFilesBatchClient.prototype.update = function (articleId, data) {\r\n        return this.apiClient.put(this.routeDefinition.update(articleId), this.routeDefinition.updateParams(data));\r\n    };\r\n    /**\r\n     * Returns a promise that is resolved once the link action has been performed; this action links file resources from other modules into the Files module (For example: file resources from the Media Vault module can be linked directly into the Files module).\r\n     * @method\r\n     * @param articleId Article slug or id which uniquely identifies article whose article files need to be linked.\r\n     * @param data A collection of article file objects that need to be inserted into the system.\r\n     * @returns A promise that is resolved once the link action has been performed.\r\n     * @example articleInstanceFilesBatchClient.link(files)\r\n                    .then(function (data) {\r\n                        // perform success action here\r\n                    },\r\n                     function (response, status, headers, config) {\r\n                        // perform error handling here\r\n                    });\r\n     **/\r\n    ArticleInstanceFilesBatchClient.prototype.link = function (articleId, data) {\r\n        return this.apiClient.post(this.routeDefinition.link(articleId), this.routeDefinition.createParams(data));\r\n    };\r\n    return ArticleInstanceFilesBatchClient;\r\n}());\r\nArticleInstanceFilesBatchClient = tslib_1.__decorate([\r\n    inversify_1.injectable(),\r\n    tslib_1.__param(0, inversify_1.inject(_1.TYPES.ArticleInstanceFilesBatchRoute)),\r\n    tslib_1.__param(1, inversify_1.inject(httpApi_1.httpTYPES.ApiClient)),\r\n    tslib_1.__metadata(\"design:paramtypes\", [typeof (_a = typeof _1.ArticleInstanceFilesBatchRoute !== \"undefined\" && _1.ArticleInstanceFilesBatchRoute) === \"function\" && _a || Object, typeof (_b = typeof httpApi_1.ApiClient !== \"undefined\" && httpApi_1.ApiClient) === \"function\" && _b || Object])\r\n], ArticleInstanceFilesBatchClient);\r\nexports.ArticleInstanceFilesBatchClient = ArticleInstanceFilesBatchClient;\r\nvar _a, _b;\r\n/**\r\n * @overview\r\n ***Notes:**\r\n - Refer to the [REST API documentation](https://github.com/Baasic/baasic-rest-api/wiki) for detailed information about available Baasic REST API end-points.\r\n - All end-point objects are transformed by the associated route service.\r\n*/\r\n\n\n\n//////////////////\n// WEBPACK FOOTER\n// ./src/modules/article/articleFiles/InstanceFilesBatchClient.ts\n// module id = 128\n// module chunks = 0","/* globals module */\r\n/**\r\n * @module articleInstanceFilesBatchRoute\r\n * @description Baasic Article Instance Files Batch Route Definition provides Baasic route templates which can be expanded to Baasic REST URIs. Various services can use Baasic Article Files Batch Route Service to obtain needed routes while other routes will be obtained through HAL. By convention, all route services use the same function names as their corresponding services.\r\n*/\r\n\"use strict\";\r\nObject.defineProperty(exports, \"__esModule\", { value: true });\r\nvar tslib_1 = require(\"tslib\");\r\nvar inversify_1 = require(\"inversify\");\r\nvar common_1 = require(\"../../../common\");\r\nvar contracts_1 = require(\"../../../core/contracts\");\r\nvar ArticleInstanceFilesBatchRoute = (function (_super) {\r\n    tslib_1.__extends(ArticleInstanceFilesBatchRoute, _super);\r\n    function ArticleInstanceFilesBatchRoute(appOptions) {\r\n        var _this = _super.call(this, appOptions) || this;\r\n        _this.appOptions = appOptions;\r\n        _this.unlinkRoute = 'articles/{articleId}/files/batch/unlink';\r\n        _this.updateRoute = 'articles/{articleId}/files/batch';\r\n        _this.linkRoute = 'articles/{articleId}/files/batch/link';\r\n        return _this;\r\n    }\r\n    /**\r\n     * Parses unlink route; this URI template does not expose any additional options.\r\n     * @method\r\n     * @param articleId Article file id of the original article file used to identify article files on which delete action should be performed.\r\n     * @example articleInstanceFilesBatchRoute.unlink(articleId);\r\n     **/\r\n    ArticleInstanceFilesBatchRoute.prototype.unlink = function (articleId) {\r\n        var params = { articleId: articleId };\r\n        return _super.prototype.baseCreate.call(this, this.unlinkRoute, params);\r\n    };\r\n    /**\r\n     * Parses update route; this URI template does not expose any additional options.\r\n     * @method\r\n     * @param articleId Article slug or id which uniquely identifies article whose article file need to be updated.\r\n     * @example articleInstanceFilesStreamsRoute.update(articleId);\r\n     **/\r\n    ArticleInstanceFilesBatchRoute.prototype.update = function (articleId) {\r\n        var params = { articleId: articleId };\r\n        return _super.prototype.baseCreate.call(this, this.updateRoute, params);\r\n    };\r\n    /**\r\n     * Parses update route; this URI template does not expose any additional options.\r\n     * @method\r\n     * @param articleId Article slug or id which uniquely identifies article whose article files need to be linked.\r\n     * @example articleInstanceFilesStreamsRoute.link(articleId);\r\n     **/\r\n    ArticleInstanceFilesBatchRoute.prototype.link = function (articleId) {\r\n        var params = { articleId: articleId };\r\n        return _super.prototype.baseCreate.call(this, this.linkRoute, params);\r\n    };\r\n    return ArticleInstanceFilesBatchRoute;\r\n}(common_1.BaseRoute));\r\nArticleInstanceFilesBatchRoute = tslib_1.__decorate([\r\n    inversify_1.injectable(),\r\n    tslib_1.__param(0, inversify_1.inject(contracts_1.TYPES.IAppOptions)),\r\n    tslib_1.__metadata(\"design:paramtypes\", [typeof (_a = typeof contracts_1.IAppOptions !== \"undefined\" && contracts_1.IAppOptions) === \"function\" && _a || Object])\r\n], ArticleInstanceFilesBatchRoute);\r\nexports.ArticleInstanceFilesBatchRoute = ArticleInstanceFilesBatchRoute;\r\nvar _a;\r\n/**\r\n * @overview\r\n ***Notes:**\r\n - Refer to the [REST API documentation](https://github.com/Baasic/baasic-rest-api/wiki) for detailed information about available Baasic REST API end-points.\r\n - [URI Template](https://github.com/Baasic/uritemplate-js) syntax enables expanding the Baasic route templates to Baasic REST URIs providing it with an object that contains URI parameters.\r\n - All end-point objects are transformed by the associated route service.\r\n*/\r\n\n\n\n//////////////////\n// WEBPACK FOOTER\n// ./src/modules/article/articleFiles/InstanceFilesBatchRoute.ts\n// module id = 129\n// module chunks = 0","/* globals module */\r\n/**\r\n * @module articleInstanceFilesClient\r\n * @description  Article Instance Files Client provides Baasic route templates which can be expanded to Baasic REST URIs. Various services can use Baasic Files Route Service to obtain needed routes while other routes will be obtained through HAL. By convention, all route services use the same function names as their corresponding services.\r\n*/\r\n\"use strict\";\r\nObject.defineProperty(exports, \"__esModule\", { value: true });\r\nvar tslib_1 = require(\"tslib\");\r\nvar inversify_1 = require(\"inversify\");\r\n;\r\nvar httpApi_1 = require(\"../../../httpApi\");\r\nvar _1 = require(\"../\");\r\nvar ArticleInstanceFilesClient = (function () {\r\n    function ArticleInstanceFilesClient(articleInstanceFilesRoute, articleInstanceFilesStreamsClient, ArticleInstanceFilesBatchClient, apiClient) {\r\n        this.articleInstanceFilesRoute = articleInstanceFilesRoute;\r\n        this.articleInstanceFilesStreamsClient = articleInstanceFilesStreamsClient;\r\n        this.ArticleInstanceFilesBatchClient = ArticleInstanceFilesBatchClient;\r\n        this.apiClient = apiClient;\r\n    }\r\n    Object.defineProperty(ArticleInstanceFilesClient.prototype, \"routeDefinition\", {\r\n        get: function () {\r\n            return this.articleInstanceFilesRoute;\r\n        },\r\n        enumerable: true,\r\n        configurable: true\r\n    });\r\n    Object.defineProperty(ArticleInstanceFilesClient.prototype, \"streams\", {\r\n        get: function () {\r\n            return this.articleInstanceFilesStreamsClient;\r\n        },\r\n        enumerable: true,\r\n        configurable: true\r\n    });\r\n    Object.defineProperty(ArticleInstanceFilesClient.prototype, \"batch\", {\r\n        get: function () {\r\n            return this.ArticleInstanceFilesBatchClient;\r\n        },\r\n        enumerable: true,\r\n        configurable: true\r\n    });\r\n    /**\r\n     * Returns a promise that is resolved once the find action has been performed. Success response returns a list of file resources matching the given criteria.\r\n     * @method\r\n     * @param articleId Article slug or id which uniquely identifies article whose article files need to be retrieved.\r\n     * @param options Query resource options object.\r\n     * @returns A promise that is resolved once the find action has been performed.\r\n     * @example articleInstanceFilesClient.find({\r\n                    pageNumber : 1,\r\n                    pageSize : 10,\r\n                    orderBy : '<field>',\r\n                    orderDirection : '<asc|desc>',\r\n                    search : '<search-phrase>'\r\n                })\r\n                .then(function (collection) {\r\n                    // perform success action here\r\n                },\r\n                 function (response, status, headers, config) {\r\n                    // perform error handling here\r\n                });\r\n     **/\r\n    ArticleInstanceFilesClient.prototype.find = function (articleId, options) {\r\n        return this.apiClient.get(this.articleInstanceFilesRoute.find(articleId, options));\r\n    };\r\n    /**\r\n     * Returns a promise that is resolved once the get action has been performed. Success response returns requested file resource.\r\n     * @method\r\n     * @param articleId Article slug or id which uniquely identifies article whose article files need to be retrieved.\r\n     * @param id Article file id which uniquely identifies article file that needs to be retrieved.\r\n     * @param options options object that contains embed data.\r\n     * @returns A promise that is resolved once the get action has been performed.\r\n     * @example articleInstanceFilesClient.get('<file-id>')\r\n                   .then(function (data) {\r\n                       // perform success action here\r\n                   },\r\n                    function (response, status, headers, config) {\r\n                       // perform error handling here\r\n                   });\r\n    **/\r\n    ArticleInstanceFilesClient.prototype.get = function (articleId, id, options) {\r\n        return this.apiClient.get(this.articleInstanceFilesRoute.get(articleId, id, options));\r\n    };\r\n    /**\r\n     * Returns a promise that is resolved once the unlink action has been performed. This action will remove one or many file resources from the system if successfully completed. Specified file and all its accompanying derived resources will be removed from the system. This route uses HAL enabled objects to obtain routes and therefore it doesn't apply baasicArticleFilesRouteService route template. Here is an example of how a route can be obtained from HAL enabled objects:\r\n     * ```\r\n     * let params = modelMapper.removeParams(fileEntry);\r\n     * let uri = params['model'].links('unlink').href;\r\n     * ```\r\n     * @method\r\n     * @param articleId Article slug or id which uniquely identifies article whose article files need to be deleted.\r\n     * @param data\r\n     * @param options\r\n     * @returns A promise that is resolved once the unlink action has been performed.\r\n     * @example // fileEntry is a file resource previously fetched using get action. The following action will remove the original file resource and all accompanying derived file resources.\r\n                    articleInstanceFilesRoute.remove(fileEntry)\r\n                        .then(function (data) {\r\n                            // perform success action here\r\n                        },\r\n                         function (response, status, headers, config) {\r\n                            // perform error handling here\r\n                        });\r\n     **/\r\n    ArticleInstanceFilesClient.prototype.unlink = function (articleId, data, options) {\r\n        return this.apiClient.delete(this.articleInstanceFilesRoute.unlink(articleId, data, options));\r\n    };\r\n    /**\r\n     * Returns a promise that is resolved once the unlink by article action has been performed. This action will remove all file resources from the system related to the requested article if successfully completed. This route uses HAL enabled objects to obtain routes and therefore it doesn't apply baasicArticleService route template. Here is an example of how a route can be obtained from HAL enabled objects:\r\n     * ```\r\n     * let params = modelMapper.removeParams(fileEntry);\r\n     * let uri = params['model'].links('unlink-by-article').href;\r\n     * ```\r\n     * @method\r\n     * @param articleId Article slug or id which uniquely identifies article whose article files need to be deleted.\r\n     * @param data\r\n     * @param options\r\n     * @returns A promise that is resolved once the unlink by article action has been performed.\r\n     * @example // fileEntry is a file resource previously fetched using get action.\r\n                    articleInstanceFilesClient.unlinkByArticle(fileEntry)\r\n                        .then(function (data) {\r\n                            // perform success action here\r\n                        },\r\n                         function (response, status, headers, config) {\r\n                             // perform error handling here\r\n                        });\r\n     **/\r\n    ArticleInstanceFilesClient.prototype.unlinkByArticle = function (articleId, data, options) {\r\n        return this.apiClient.delete(this.articleInstanceFilesRoute.unlink(articleId, data, options));\r\n    };\r\n    /**\r\n     * Returns a promise that is resolved once the update file action has been performed; this action will update a file resource if successfully completed. This route uses HAL enabled objects to obtain routes and therefore it doesn't apply `baasicArticleFilesRouteService` route template. Here is an example of how a route can be obtained from HAL enabled objects:\r\n     ```\r\n     let params = modelMapper.updateParams(fileEntry);\r\n     let uri = params['model'].links('put').href;\r\n     ```\r\n     * @method\r\n     * @param articleId An article object used to update specified article resource.\r\n     * @param data Article File object used to update specific article file data in the system.\r\n     * @returns A promise that is resolved once the update file action has been performed.\r\n     * @example // fileEntry is a file resource previously fetched using get action.\r\n                   fileEntry.description = '<description>';\r\n                   articleInstanceFilesClient.update(fileEntry)\r\n                       .then(function (data) {\r\n                           // perform success action here\r\n                       },\r\n                        function (response, status, headers, config) {\r\n                           // perform error handling here\r\n                       });\r\n    **/\r\n    ArticleInstanceFilesClient.prototype.update = function (articleId, data) {\r\n        return this.apiClient.put(this.routeDefinition.update(articleId, data), this.routeDefinition.updateParams(data));\r\n    };\r\n    /**\r\n     * Returns a promise that is resolved once the link action has been performed; this action links file resource from other modules into the Article Files module (For example: file resources from the Media Vault module can be linked directly into the Article Files module).\r\n     * @method\r\n     * @param articleId Article slug or id which uniquely identifies article whose article files need to be linked.\r\n     * @param data A article file object that need to be inserted into the system.\r\n     * @returns A promise that is resolved once the link action has been performed.\r\n     * @example articleInstanceFilesClient.link(fileObject)\r\n                    .then(function (response, status, headers, config) {\r\n                        // perform success handling here\r\n                    },\r\n                        function (response, status, headers, config) {\r\n                        // perform error handling here\r\n                    });\r\n     **/\r\n    ArticleInstanceFilesClient.prototype.link = function (articleId, data) {\r\n        return this.apiClient.post(this.routeDefinition.link(articleId, data), this.routeDefinition.createParams(data));\r\n    };\r\n    return ArticleInstanceFilesClient;\r\n}());\r\nArticleInstanceFilesClient = tslib_1.__decorate([\r\n    inversify_1.injectable(),\r\n    tslib_1.__param(0, inversify_1.inject(_1.TYPES.ArticleInstanceFilesRoute)),\r\n    tslib_1.__param(1, inversify_1.inject(_1.TYPES.ArticleInstanceFilesStreamsClient)),\r\n    tslib_1.__param(2, inversify_1.inject(_1.TYPES.ArticleInstanceFilesBatchClient)),\r\n    tslib_1.__param(3, inversify_1.inject(httpApi_1.httpTYPES.ApiClient)),\r\n    tslib_1.__metadata(\"design:paramtypes\", [typeof (_a = typeof _1.ArticleInstanceFilesRoute !== \"undefined\" && _1.ArticleInstanceFilesRoute) === \"function\" && _a || Object, typeof (_b = typeof _1.ArticleInstanceFilesStreamsClient !== \"undefined\" && _1.ArticleInstanceFilesStreamsClient) === \"function\" && _b || Object, typeof (_c = typeof _1.ArticleInstanceFilesBatchClient !== \"undefined\" && _1.ArticleInstanceFilesBatchClient) === \"function\" && _c || Object, typeof (_d = typeof httpApi_1.ApiClient !== \"undefined\" && httpApi_1.ApiClient) === \"function\" && _d || Object])\r\n], ArticleInstanceFilesClient);\r\nexports.ArticleInstanceFilesClient = ArticleInstanceFilesClient;\r\nvar _a, _b, _c, _d;\r\n/**\r\n * @overview\r\n ***Notes:**\r\n - Refer to the [REST API documentation](https://github.com/Baasic/baasic-rest-api/wiki) for detailed information about available Baasic REST API end-points.\r\n - All end-point objects are transformed by the associated route service.\r\n*/ \r\n\n\n\n//////////////////\n// WEBPACK FOOTER\n// ./src/modules/article/articleFiles/InstanceFilesClient.ts\n// module id = 130\n// module chunks = 0","/* globals module */\r\n/**\r\n * @module articleInstanceFilesRoute\r\n * @description Baasic Article Instance Files Route Definition provides Baasic route templates which can be expanded to Baasic REST URIs. Various services can use Baasic Article Files Route Service to obtain needed routes while other routes will be obtained through HAL. By convention, all route services use the same function names as their corresponding services.\r\n*/\r\n\"use strict\";\r\nObject.defineProperty(exports, \"__esModule\", { value: true });\r\nvar tslib_1 = require(\"tslib\");\r\nvar inversify_1 = require(\"inversify\");\r\nvar common_1 = require(\"../../../common\");\r\n;\r\nvar contracts_1 = require(\"../../../core/contracts\");\r\nvar _1 = require(\"../\");\r\nvar ArticleInstanceFilesRoute = (function (_super) {\r\n    tslib_1.__extends(ArticleInstanceFilesRoute, _super);\r\n    function ArticleInstanceFilesRoute(articleInstanceFilesStreamsRoute, articleInstanceFilesBatchRoute, appOptions) {\r\n        var _this = _super.call(this, appOptions) || this;\r\n        _this.articleInstanceFilesStreamsRoute = articleInstanceFilesStreamsRoute;\r\n        _this.articleInstanceFilesBatchRoute = articleInstanceFilesBatchRoute;\r\n        _this.appOptions = appOptions;\r\n        _this.findRoute = 'articles/{articleId}/files/{?searchQuery,page,rpp,sort,embed,fields}';\r\n        _this.getRoute = 'articles/{articleId}/files/{id}/{?embed,fields}';\r\n        _this.linkRoute = 'articles/{articleId}/files/link';\r\n        _this.unlinkRoute = 'articles/{articleId}/files/unlink/{id}';\r\n        _this.unlinkByArticleRoute = 'articles/{articleId}/files/unlink/{id}';\r\n        _this.updateRoute = 'articles/{articleId}/comments/{id}';\r\n        return _this;\r\n    }\r\n    Object.defineProperty(ArticleInstanceFilesRoute.prototype, \"streams\", {\r\n        get: function () {\r\n            return this.articleInstanceFilesStreamsRoute;\r\n        },\r\n        enumerable: true,\r\n        configurable: true\r\n    });\r\n    Object.defineProperty(ArticleInstanceFilesRoute.prototype, \"batch\", {\r\n        get: function () {\r\n            return this.articleInstanceFilesBatchRoute;\r\n        },\r\n        enumerable: true,\r\n        configurable: true\r\n    });\r\n    /**\r\n     * Parses find route which can be expanded with additional options. Supported items are:\r\n     * - `searchQuery` - A string referencing file properties using the phrase search.\r\n     * - `page` - A value used to set the page number, i.e. to retrieve certain file subset from the storage.\r\n     * - `rpp` - A value used to limit the size of result set per page.\r\n     * - `sort` - A string used to set the file property to sort the result collection by.\r\n     * - `embed` - Comma separated list of resources to be contained within the current representation.\r\n     * @method\r\n     * @param articleId Article slug or id which uniquely identifies article whose article files need to be retrieved.\r\n     * @param options Query resource options object.\r\n     * @example articleInstanceFilesRoute.find({searchQuery: '<search-phrase>'});\r\n     **/\r\n    ArticleInstanceFilesRoute.prototype.find = function (articleId, options) {\r\n        var params = this.modelMapper.findParams(options);\r\n        params.articleId = articleId;\r\n        return _super.prototype.baseCreate.call(this, this.findRoute, params);\r\n    };\r\n    /**\r\n     * Parses get route; this route should be expanded with the Id of the file resource.\r\n     * @method\r\n     * @param articleId Article slug or id which uniquely identifies article whose article files need to be retrieved.\r\n     * @param id Article file id which uniquely identifies article file that needs to be retrieved.\r\n     * @param options options object that contains embed data.\r\n     * @example articleInstanceFilesRoute.get({id: '<file-id>'});\r\n     **/\r\n    ArticleInstanceFilesRoute.prototype.get = function (articleId, id, options) {\r\n        var params = this.utility.extend({}, options);\r\n        params.articleId = articleId;\r\n        params.id = id;\r\n        return _super.prototype.baseGet.call(this, this.getRoute, params);\r\n    };\r\n    /**\r\n     * Parses link route; this URI template does not expose any additional options.\r\n     * @method\r\n     * @param articleId Article slug or id which uniquely identifies article whose article files need to be deleted.\r\n     * @param data\r\n     * @param options\r\n     * @example articleInstanceFilesRoute.link();\r\n     **/\r\n    ArticleInstanceFilesRoute.prototype.link = function (articleId, data) {\r\n        var params = this.utility.extend({}, data);\r\n        params.articleId = articleId;\r\n        return _super.prototype.baseCreate.call(this, this.linkRoute, {});\r\n    };\r\n    /**\r\n     * Parses unlink route; this URI template does not expose any additional options.\r\n     * @method\r\n     * @param articleId Article slug or id which uniquely identifies article whose article files need to be deleted.\r\n     * @param data\r\n     * @param options\r\n     * @example articleFilesRoute.unlink(data);\r\n     **/\r\n    ArticleInstanceFilesRoute.prototype.unlink = function (articleId, data, options) {\r\n        if (!options) {\r\n            options = {};\r\n        }\r\n        var params = this.modelMapper.removeParams(data);\r\n        params.articleId = articleId;\r\n        return _super.prototype.baseDelete.call(this, this.unlinkRoute, params, options, 'unlink');\r\n    };\r\n    /**\r\n     * Parses unlink by article route; this URI template does not expose any additional options.\r\n     * @method\r\n     * @param articleId Article slug or id which uniquely identifies article whose article files need to be deleted.\r\n     * @param data\r\n     * @param options\r\n     * @example articleFilesRoute.unlinkByArticle(data);\r\n     **/\r\n    ArticleInstanceFilesRoute.prototype.unlinkByArticle = function (articleId, data, options) {\r\n        if (!options) {\r\n            options = {};\r\n        }\r\n        var params = this.modelMapper.removeParams(data);\r\n        params.articleId = articleId;\r\n        return _super.prototype.baseDelete.call(this, this.unlinkByArticleRoute, params, options, 'unlink-by-article');\r\n    };\r\n    /**\r\n     * Parses update route; this URI template does not expose any additional options.\r\n     * @method\r\n     * @example articleInstanceFilesRoute.update(data);\r\n     **/\r\n    ArticleInstanceFilesRoute.prototype.update = function (articleId, data) {\r\n        var params = this.modelMapper.updateParams(data);\r\n        params.articleId = articleId;\r\n        return _super.prototype.baseUpdate.call(this, this.updateRoute, params);\r\n    };\r\n    return ArticleInstanceFilesRoute;\r\n}(common_1.BaseRoute));\r\nArticleInstanceFilesRoute = tslib_1.__decorate([\r\n    inversify_1.injectable(),\r\n    tslib_1.__param(0, inversify_1.inject(_1.TYPES.ArticleInstanceFilesStreamsRoute)),\r\n    tslib_1.__param(1, inversify_1.inject(_1.TYPES.ArticleInstanceFilesBatchRoute)),\r\n    tslib_1.__param(2, inversify_1.inject(contracts_1.TYPES.IAppOptions)),\r\n    tslib_1.__metadata(\"design:paramtypes\", [typeof (_a = typeof _1.ArticleInstanceFilesStreamsRoute !== \"undefined\" && _1.ArticleInstanceFilesStreamsRoute) === \"function\" && _a || Object, typeof (_b = typeof _1.ArticleInstanceFilesBatchRoute !== \"undefined\" && _1.ArticleInstanceFilesBatchRoute) === \"function\" && _b || Object, typeof (_c = typeof contracts_1.IAppOptions !== \"undefined\" && contracts_1.IAppOptions) === \"function\" && _c || Object])\r\n], ArticleInstanceFilesRoute);\r\nexports.ArticleInstanceFilesRoute = ArticleInstanceFilesRoute;\r\nvar _a, _b, _c;\r\n/**\r\n * @overview\r\n ***Notes:**\r\n - Refer to the [REST API documentation](https://github.com/Baasic/baasic-rest-api/wiki) for detailed information about available Baasic REST API end-points.\r\n - [URI Template](https://github.com/Baasic/uritemplate-js) syntax enables expanding the Baasic route templates to Baasic REST URIs providing it with an object that contains URI parameters.\r\n - All end-point objects are transformed by the associated route service.\r\n*/ \r\n\n\n\n//////////////////\n// WEBPACK FOOTER\n// ./src/modules/article/articleFiles/InstanceFilesRoute.ts\n// module id = 131\n// module chunks = 0","/* globals module */\r\n/**\r\n * @module articleInstanceFilesStreamsClient\r\n * @description  Article Instance Files Streams Client provides Baasic route templates which can be expanded to Baasic REST URIs. Various services can use Baasic Files Streams Route Definition to obtain needed routes while other routes will be obtained through HAL. By convention, all route services use the same function names as their corresponding services.\r\n*/\r\n\"use strict\";\r\nObject.defineProperty(exports, \"__esModule\", { value: true });\r\nvar tslib_1 = require(\"tslib\");\r\nvar inversify_1 = require(\"inversify\");\r\n;\r\nvar httpApi_1 = require(\"../../../httpApi\");\r\nvar _1 = require(\"../\");\r\nvar ArticleInstanceFilesStreamsClient = (function () {\r\n    function ArticleInstanceFilesStreamsClient(articleInstanceFilesStreamsRoute, apiClient) {\r\n        this.articleInstanceFilesStreamsRoute = articleInstanceFilesStreamsRoute;\r\n        this.apiClient = apiClient;\r\n    }\r\n    Object.defineProperty(ArticleInstanceFilesStreamsClient.prototype, \"routeDefinition\", {\r\n        get: function () {\r\n            return this.articleInstanceFilesStreamsRoute;\r\n        },\r\n        enumerable: true,\r\n        configurable: true\r\n    });\r\n    /**\r\n     * Returns a promise that is resolved once the get action has been performed. Success response returns the file stream if successfully completed. If derived resource's format is passed, such as `width` and `height` for the image type of file resource, the operation will return a stream of the derived resource. Otherwise, stream of the original file resource will be retrieved.\r\n     * @method\r\n     * @param articleId Article slug or id which uniquely identifies article whose article file need to be retrieved.\r\n     * @param data Article File object used to identify stream that needs to be retrieved from the system.\r\n     * @returns A promise that is resolved once the get action has been performed.\r\n     * @example // Request the original file stream\r\n                    articleInstanceFilesStreamsClient.get({id: '<file-id>'})\r\n                        .then(function (data) {\r\n                            // perform success action here\r\n                        },\r\n                         function (response, status, headers, config) {\r\n                            // perform error handling here\r\n                        });\r\n\r\n                // Request derived file stream\r\n                        articleInstanceFilesStreamsClient.get({id: '<file-id>', width: <width>, height: <height>})\r\n                            .then(function (data) {\r\n                                // perform success action here\r\n                            },\r\n                             function (response, status, headers, config) {\r\n                                 // perform error handling here\r\n                            });\r\n     **/\r\n    ArticleInstanceFilesStreamsClient.prototype.get = function (articleId, data) {\r\n        return this.apiClient.get(this.articleInstanceFilesStreamsRoute.get(articleId, data));\r\n    };\r\n    /**\r\n     * Returns a promise that is resolved once the get action has been performed. Success response returns the file stream as a blob. If derived resource's format is passed, such as `width` and `height` for the image type of file resource, the operation will return a blob of the derived file resource. Otherwise, blob of the original file resource will be retrieved. For more information on Blob objects please see [Blob Documentation](https://developer.mozilla.org/en-US/docs/Web/API/Blob).\r\n     * @method\r\n     * @param articleId Article slug or id which uniquely identifies article whose article file need to be retrieved.\r\n     * @param data Article File object used to identify stream that needs to be retrieved from the system.\r\n     * @returns A promise that is resolved once the get action has been performed.\r\n     * @example // Request the original blob\r\n                    articleInstanceFilesStreamsClient.getBlob('<file-id>')\r\n                        .then(function (data) {\r\n                            // perform success action here\r\n                        },\r\n                         function (response, status, headers, config) {\r\n                            // perform error handling here\r\n                        });\r\n                        \r\n                // Request derived blob\r\n                        articleInstanceFilesStreamsClient.getBlob({\r\n                            id: '<file-id>',\r\n                            width: <width>,\r\n                            height: <height>\r\n                        })\r\n                        .then(function (data) {\r\n                            // perform success action here\r\n                        },\r\n                         function (response, status, headers, config) {\r\n                            // perform error handling here\r\n                        });\r\n     **/\r\n    ArticleInstanceFilesStreamsClient.prototype.getBlob = function (articleId, data) {\r\n        return this.apiClient.get(this.articleInstanceFilesStreamsRoute.get(articleId, data), { 'Accept': 'application/octet-stream' });\r\n    };\r\n    /**\r\n     * Returns a promise that is resolved once the update file stream action has been performed; this action will replace the existing stream with a new one. Alternatively, if a derived stream is being updated it will either create a new derived stream or replace the existing one. In order to update a derived stream, format needs to be passed (For example: `width` and `height` for the image type of file stream data type).\r\n     * @method\r\n     * @param articleId Article slug or id which uniquely identifies article whose article file need to be updated.\r\n     * @param data Article File object used to identify stream that needs to be updated.\r\n     * @param stream\r\n     * @returns A promise that is resolved once the update file stream action has been performed.\r\n     * @example // Update original file stream\r\n                    articleInstanceFilesStreamsClient.update('<file-id>', <file-stream>)\r\n                        .then(function (data) {\r\n                            // perform success action here\r\n                        },\r\n                         function (response, status, headers, config) {\r\n                            // perform error handling here\r\n                        });\r\n                // Update derived file stream\r\n                    articleInstanceFilesStreamsClient.update({id: '<file-id>', width: <width>, height: <height>}, <file-stream>)\r\n                        .then(function (data) {\r\n                            // perform success action here\r\n                        },\r\n                         function (response, status, headers, config) {\r\n                            // perform error handling here\r\n                        });\r\n     **/\r\n    ArticleInstanceFilesStreamsClient.prototype.update = function (articleId, data, stream) {\r\n        var formData = new FormData();\r\n        formData.append('file', stream);\r\n        return this.apiClient.put(this.articleInstanceFilesStreamsRoute.update(articleId, data), formData, { 'Content-Type': undefined });\r\n    };\r\n    /**\r\n     * Returns a promise that is resolved once the create file stream action has been performed; this action will upload the specified blob. For more information on Blob objects please see [Blob Documentation](https://developer.mozilla.org/en-US/docs/Web/API/Blob).\r\n     * @method\r\n     * @param articleId Article slug or id which uniquely identifies article whose article file need to be inserted.\r\n     * @param data Article File object that need to be inserted into the system.\r\n     * @param stream\r\n     * @returns A promise that is resolved once the create file stream action has been performed.\r\n     * @example articleInstanceFilesStreamsClient.create('<file-id>', <blob>)\r\n                   .then(function (data) {\r\n                        // perform success action here\r\n                   },\r\n                    function (response, status, headers, config) {\r\n                       // perform error handling here\r\n                   });\r\n    **/\r\n    ArticleInstanceFilesStreamsClient.prototype.create = function (articleId, data, stream) {\r\n        var formData = new FormData();\r\n        formData.append('file', stream);\r\n        return this.apiClient.post(this.articleInstanceFilesStreamsRoute.create(articleId, data), formData, { 'Content-Type': undefined });\r\n    };\r\n    return ArticleInstanceFilesStreamsClient;\r\n}());\r\nArticleInstanceFilesStreamsClient = tslib_1.__decorate([\r\n    inversify_1.injectable(),\r\n    tslib_1.__param(0, inversify_1.inject(_1.TYPES.ArticleInstanceFilesStreamsRoute)),\r\n    tslib_1.__param(1, inversify_1.inject(httpApi_1.httpTYPES.ApiClient)),\r\n    tslib_1.__metadata(\"design:paramtypes\", [typeof (_a = typeof _1.ArticleInstanceFilesStreamsRoute !== \"undefined\" && _1.ArticleInstanceFilesStreamsRoute) === \"function\" && _a || Object, typeof (_b = typeof httpApi_1.ApiClient !== \"undefined\" && httpApi_1.ApiClient) === \"function\" && _b || Object])\r\n], ArticleInstanceFilesStreamsClient);\r\nexports.ArticleInstanceFilesStreamsClient = ArticleInstanceFilesStreamsClient;\r\nvar _a, _b;\r\n/**\r\n * @overview\r\n ***Notes:**\r\n - Refer to the [REST API documentation](https://github.com/Baasic/baasic-rest-api/wiki) for detailed information about available Baasic REST API end-points.\r\n - All end-point objects are transformed by the associated route service.\r\n*/ \r\n\n\n\n//////////////////\n// WEBPACK FOOTER\n// ./src/modules/article/articleFiles/InstanceFilesStreamsClient.ts\n// module id = 132\n// module chunks = 0","/* globals module */\r\n/**\r\n * @module articleInstanceFilesStreamsRoute\r\n * @description Baasic Article Instance Files Streams Route Definition provides Baasic route templates which can be expanded to Baasic REST URIs. Various services can use Baasic Article Files Streams Route Service to obtain needed routes while other routes will be obtained through HAL. By convention, all route services use the same function names as their corresponding services.\r\n*/\r\n\"use strict\";\r\nObject.defineProperty(exports, \"__esModule\", { value: true });\r\nvar tslib_1 = require(\"tslib\");\r\nvar inversify_1 = require(\"inversify\");\r\nvar common_1 = require(\"../../../common\");\r\n;\r\nvar contracts_1 = require(\"../../../core/contracts\");\r\nvar ArticleInstanceFilesStreamsRoute = (function (_super) {\r\n    tslib_1.__extends(ArticleInstanceFilesStreamsRoute, _super);\r\n    function ArticleInstanceFilesStreamsRoute(appOptions) {\r\n        var _this = _super.call(this, appOptions) || this;\r\n        _this.appOptions = appOptions;\r\n        _this.getRoute = 'articles/{articleId}/file-streams/{id}/{?width,height}';\r\n        _this.createRoute = 'articles/{articleId}/file-streams/{filename}';\r\n        _this.updateRoute = 'articles/{articleId}/file-streams/{id}';\r\n        return _this;\r\n    }\r\n    /**\r\n     * Parses get route; this route should be expanded with id of desired file stream. Additional supported items are:\r\n     * - `width` - width of desired derived image.\r\n     * - `height` - height of desired derived image.\r\n     * @method\r\n     * @param articleId Article slug or id which uniquely identifies article whose article file need to be retrieved.\r\n     * @param data Article File object used to identify stream that needs to be retrieved from the system.\r\n     * @example articleInstanceFilesRoute.get({id: '<filename>'});\r\n     **/\r\n    ArticleInstanceFilesStreamsRoute.prototype.get = function (articleId, data) {\r\n        if (!this.utility.isObject(data)) {\r\n            data = {\r\n                id: data\r\n            };\r\n        }\r\n        var params = this.utility.extend({}, data);\r\n        params.articleId = articleId;\r\n        return _super.prototype.baseCreate.call(this, this.getRoute, params);\r\n    };\r\n    /**\r\n     * Parses create route; this route should be expanded with the filename which indicates where the stream will be saved.\r\n     * @method\r\n     * @param articleId Article slug or id which uniquely identifies article whose article file need to be inserted.\r\n     * @param data Article File object that need to be inserted into the system.\r\n     * @example articleInstanceFilesRoute.create({filename: '<filename>'});\r\n     **/\r\n    ArticleInstanceFilesStreamsRoute.prototype.create = function (articleId, data) {\r\n        var params = this.utility.extend({}, data);\r\n        params.articleId = articleId;\r\n        return _super.prototype.baseCreate.call(this, this.createRoute, params);\r\n    };\r\n    /**\r\n     * Parses update route; this route should be expanded with the id of the previously saved resource. Additional supported items are:\r\n     * - `width` - width of derived image to update.\r\n     * - `height` - height of derived image to update.\r\n     * @method\r\n     * @param articleId Article slug or id which uniquely identifies article whose article file need to be updated.\r\n     * @param data Article File object used to identify stream that needs to be updated.\r\n     * @example articleFilesRoute.update({id: '<filename>'});\r\n     **/\r\n    ArticleInstanceFilesStreamsRoute.prototype.update = function (articleId, data) {\r\n        var params = this.utility.extend({}, data);\r\n        params.articleId = articleId;\r\n        return _super.prototype.baseUpdate.call(this, this.updateRoute, data);\r\n    };\r\n    return ArticleInstanceFilesStreamsRoute;\r\n}(common_1.BaseRoute));\r\nArticleInstanceFilesStreamsRoute = tslib_1.__decorate([\r\n    inversify_1.injectable(),\r\n    tslib_1.__param(0, inversify_1.inject(contracts_1.TYPES.IAppOptions)),\r\n    tslib_1.__metadata(\"design:paramtypes\", [typeof (_a = typeof contracts_1.IAppOptions !== \"undefined\" && contracts_1.IAppOptions) === \"function\" && _a || Object])\r\n], ArticleInstanceFilesStreamsRoute);\r\nexports.ArticleInstanceFilesStreamsRoute = ArticleInstanceFilesStreamsRoute;\r\nvar _a;\r\n/**\r\n * @overview\r\n ***Notes:**\r\n - Refer to the [REST API documentation](https://github.com/Baasic/baasic-rest-api/wiki) for detailed information about available Baasic REST API end-points.\r\n - [URI Template](https://github.com/Baasic/uritemplate-js) syntax enables expanding the Baasic route templates to Baasic REST URIs providing it with an object that contains URI parameters.\r\n - All end-point objects are transformed by the associated route service.\r\n*/ \r\n\n\n\n//////////////////\n// WEBPACK FOOTER\n// ./src/modules/article/articleFiles/InstanceFilesStreamsRoute.ts\n// module id = 133\n// module chunks = 0","\"use strict\";\r\nfunction __export(m) {\r\n    for (var p in m) if (!exports.hasOwnProperty(p)) exports[p] = m[p];\r\n}\r\nObject.defineProperty(exports, \"__esModule\", { value: true });\r\n__export(require(\"./InstanceFilesStreamsRoute\"));\r\n__export(require(\"./InstanceFilesStreamsClient\"));\r\n__export(require(\"./InstanceFilesBatchRoute\"));\r\n__export(require(\"./InstanceFilesBatchClient\"));\r\n__export(require(\"./InstanceFilesRoute\"));\r\n__export(require(\"./InstanceFilesClient\"));\r\n\n\n\n//////////////////\n// WEBPACK FOOTER\n// ./src/modules/article/articleFiles/index.ts\n// module id = 134\n// module chunks = 0","/* globals module */\r\n/**\r\n * @module articleRatingsClient\r\n * @description  Article Ratings Client provides an easy way to consume  Article Ratings REST API end-points. `articleRatingsClient` functions enable performing standard CRUD operations directly on article rating resources, whereas the `articleService` functions allow management between article and article rating. In order to obtain needed routes `articleRatingsClient` uses `articleRatingsRoute`.\r\n*/\r\n\"use strict\";\r\nObject.defineProperty(exports, \"__esModule\", { value: true });\r\nvar tslib_1 = require(\"tslib\");\r\nvar inversify_1 = require(\"inversify\");\r\n;\r\nvar httpApi_1 = require(\"../../httpApi\");\r\nvar _1 = require(\"./\");\r\nvar ArticleRatingsClient = (function () {\r\n    function ArticleRatingsClient(articleRatingsRoute, apiClient) {\r\n        this.articleRatingsRoute = articleRatingsRoute;\r\n        this.apiClient = apiClient;\r\n    }\r\n    Object.defineProperty(ArticleRatingsClient.prototype, \"routeDefinition\", {\r\n        /**\r\n         * Provides direct access to `articleRatingsRoute`.\r\n         * @method\r\n         * @example articleRatingsClient.routeDefinition.get(id);\r\n         **/\r\n        get: function () {\r\n            return this.articleRatingsRoute;\r\n        },\r\n        enumerable: true,\r\n        configurable: true\r\n    });\r\n    /**\r\n     * Returns a promise that is resolved once the create article rating action has been performed; this action creates a new rating for an article.\r\n     * @method\r\n     * @param data An article rating object that needs to be inserted into the system.\r\n     * @returns A promise that is resolved once the create article rating action has been performed.\r\n     * @example articleRatingsClient.create({\r\n                    articleId : '<article-id>',\r\n                    rating : 5,\r\n                    userId : '<user-id>'\r\n                })\r\n                .then(function (data) {\r\n                    // perform success action here\r\n                },\r\n                 function (response, status, headers, config) {\r\n                    // perform error handling here\r\n                });\r\n     **/\r\n    ArticleRatingsClient.prototype.create = function (data) {\r\n        return this.apiClient.post(this.routeDefinition.create(data), this.routeDefinition.createParams(data));\r\n    };\r\n    /**\r\n     * Returns a promise that is resolved once the find action has been performed. Success response returns a list of article rating resources matching the given criteria.\r\n     * @method\r\n     * @param options Query resource options object.\r\n     * @returns A promise that is resolved once the find action has been performed.\r\n     * @example articleRatingsClient.find({\r\n                    pageNumber : 1,\r\n                    pageSize : 10,\r\n                    orderBy : '<field>',\r\n                    orderDirection : '<asc|desc>',\r\n                    search : '<search-phrase>'\r\n                })\r\n                .then(function (collection) {\r\n                    // perform success action here\r\n                },\r\n                 function (response, status, headers, config) {\r\n                    // perform error handling here\r\n                });\r\n     **/\r\n    ArticleRatingsClient.prototype.find = function (options) {\r\n        return this.apiClient.get(this.routeDefinition.find(options));\r\n    };\r\n    /**\r\n     * Returns a promise that is resolved once the findByUser action has been performed. Success response returns a list of article rating resources filtered by username.\r\n     * @method\r\n     * @param username Username which uniquely identifies a user which has created an article rating.\r\n     * @param options Query resource options object.\r\n     * @returns A promise that is resolved once the findByUser action has been performed.\r\n     * @example articleRatingsClient.find('<username>', {\r\n                    pageNumber : 1,\r\n                    pageSize : 10,\r\n                    orderBy : '<field>',\r\n                    orderDirection : '<asc|desc>'\r\n                })\r\n                .then(function (collection) {\r\n                    // perform success action here\r\n                },\r\n                 function (response, status, headers, config) {\r\n                    // perform error handling here\r\n                });\r\n     **/\r\n    ArticleRatingsClient.prototype.findByUser = function (username, options) {\r\n        return this.apiClient.get(this.articleRatingsRoute.findByUser(username, options));\r\n    };\r\n    /**\r\n     * Returns a promise that is resolved once the get action has been performed. Success response returns the specified article rating resource.\r\n     * @method\r\n     * @param id Id which uniquely identifies article rating resource that needs to be retrieved.\r\n     * @param options Options object that contains embed data.\r\n     * @returns A promise that is resolved once the get action has been performed.\r\n     * @example articleRatingsClient.get('<articleRating-id>')\r\n                    .then(function (data) {\r\n                        // perform success action here\r\n                    },\r\n                     function (response, status, headers, config) {\r\n                        // perform error handling here\r\n                    });\r\n     **/\r\n    ArticleRatingsClient.prototype.get = function (id, options) {\r\n        return this.apiClient.get(this.articleRatingsRoute.get(id, options));\r\n    };\r\n    /**\r\n     * Returns a promise that is resolved once the update article rating action has been performed; this action updates an article rating. This route uses HAL enabled objects to obtain routes and therefore it doesn't apply `articleRatingsRoute` route template. Here is an example of how a route can be obtained from HAL enabled objects:\r\n     * ```\r\n     * let params = modelMapper.removeParams(articleRating);\r\n     * let uri = params['model'].links('put').href;\r\n     * ```\r\n     * @method\r\n     * @param data An article object used to update specified article rating resource.\r\n     * @returns A promise that is resolved once the update article rating action has been performed.\r\n     * @example // articleRating is a resource previously fetched using get action.\r\n                    articleRating.rating = 4;\r\n                    articleRatingsClient.update(articleRating)\r\n                        .then(function (data) {\r\n                            // perform success action here\r\n                        },\r\n                         function (response, status, headers, config) {\r\n                            // perform error handling here\r\n                        });\r\n     **/\r\n    ArticleRatingsClient.prototype.update = function (data) {\r\n        return this.apiClient.put(this.routeDefinition.update(data), this.routeDefinition.updateParams(data));\r\n    };\r\n    /**\r\n     * Returns a promise that is resolved once the remove article rating action has been performed. If the action is successfully completed, the article rating resource will be permanently removed from the system. This route uses HAL enabled objects to obtain routes and therefore it doesn't apply `articleRatingsRoute` route template. Here is an example of how a route can be obtained from HAL enabled objects:\r\n     * ```\r\n     * let params = modelMapper.removeParams(articleRating);\r\n     * let uri = params['model'].links('delete').href;\r\n     * ```\r\n     * @method\r\n     * @param data An article object used to delete specified article rating resource.\r\n     * @returns A promise that is resolved once the remove article rating action has been performed.\r\n     * @example // articleRating is a resource previously fetched using get action.\r\n                    articleRatingsClient.remove(articleRating)\r\n                        .then(function (data) {\r\n                            // perform success action here\r\n                        },\r\n                         function (response, status, headers, config) {\r\n                            // perform error handling here\r\n                        });\r\n     **/\r\n    ArticleRatingsClient.prototype.remove = function (data) {\r\n        return this.apiClient.delete(this.routeDefinition.delete(data));\r\n    };\r\n    return ArticleRatingsClient;\r\n}());\r\nArticleRatingsClient = tslib_1.__decorate([\r\n    inversify_1.injectable(),\r\n    tslib_1.__param(0, inversify_1.inject(_1.TYPES.ArticleRatingsRoute)),\r\n    tslib_1.__param(1, inversify_1.inject(httpApi_1.httpTYPES.ApiClient)),\r\n    tslib_1.__metadata(\"design:paramtypes\", [typeof (_a = typeof _1.ArticleRatingsRoute !== \"undefined\" && _1.ArticleRatingsRoute) === \"function\" && _a || Object, typeof (_b = typeof httpApi_1.ApiClient !== \"undefined\" && httpApi_1.ApiClient) === \"function\" && _b || Object])\r\n], ArticleRatingsClient);\r\nexports.ArticleRatingsClient = ArticleRatingsClient;\r\nvar _a, _b;\r\n/**\r\n * @copyright (c) 2017 Mono Ltd\r\n * @license MIT\r\n * @author Mono Ltd\r\n * @overview\r\n ***Notes:**\r\n - Refer to the [Baasic REST API](http://dev.baasic.com/api/reference/home) for detailed information about available Baasic REST API end-points.\r\n - All end-point objects are transformed by the associated route service.\r\n*/ \r\n\n\n\n//////////////////\n// WEBPACK FOOTER\n// ./src/modules/article/articleRatingsClient.ts\n// module id = 135\n// module chunks = 0","/* globals module */\r\n/**\r\n * @module articleRatingsRoute\r\n * @description Baasic Article Ratings Route Definition provides Baasic route templates which can be expanded to Baasic REST URIs. Various services can use Baasic Article Ratings Route Service to obtain needed routes while other routes will be obtained through HAL. By convention, all route services use the same function names as their corresponding services.\r\n*/\r\n\"use strict\";\r\nObject.defineProperty(exports, \"__esModule\", { value: true });\r\nvar tslib_1 = require(\"tslib\");\r\nvar inversify_1 = require(\"inversify\");\r\nvar common_1 = require(\"../../common\");\r\n;\r\nvar contracts_1 = require(\"../../core/contracts\");\r\nvar ArticleRatingsRoute = (function (_super) {\r\n    tslib_1.__extends(ArticleRatingsRoute, _super);\r\n    function ArticleRatingsRoute(appOptions) {\r\n        var _this = _super.call(this, appOptions) || this;\r\n        _this.appOptions = appOptions;\r\n        _this.createRoute = 'article-ratings';\r\n        _this.findRoute = 'article-ratings/{?searchQuery,page,rpp,sort,embed,fields}';\r\n        _this.findByUserRoute = 'article-ratings/{?username,page,rpp,sort,embed,fields}';\r\n        _this.getRoute = 'article-ratings/{id}/{?embed,fields}';\r\n        _this.updateRoute = 'article-ratings/{id}';\r\n        _this.deleteRoute = 'article-ratings/{id}';\r\n        return _this;\r\n    }\r\n    /**\r\n     * Parses create article rating route; this URI does not support any additional embed items.\r\n     * @method\r\n     * @param data An article rating object that needs to be inserted into the system.\r\n     * @example articleRatingsRoute.create(data);\r\n     **/\r\n    ArticleRatingsRoute.prototype.create = function (data) {\r\n        return _super.prototype.baseCreate.call(this, this.createRoute, data);\r\n    };\r\n    /**\r\n     * Parses find article rating route which can be expanded with additional options. Supported items are:\r\n     * - `searchQuery` - A string referencing article rating properties using the phrase or BQL (Baasic Query Language) search.\r\n     * - `page` - A value used to set the page number, i.e. to retrieve certain article rating subset from the storage.\r\n     * - `rpp` - A value used to limit the size of result set per page.\r\n     * - `sort` - A string used to set the article rating property to sort the result collection by.\r\n     * - `embed` - Comma separated list of resources to be contained within the current representation.\r\n     * @method\r\n     * @param options Query resource options object.\r\n     * @example articleRatingsRoute.find({searchQuery: '<search-phrase>'});\r\n     **/\r\n    ArticleRatingsRoute.prototype.find = function (options) {\r\n        return _super.prototype.baseFind.call(this, this.findRoute, options);\r\n    };\r\n    /**\r\n     * Parses findByUser article rating route which can be expanded with additional options. Supported items are:\r\n     * - `username` - A value that uniquely identifies a user which has created an article rating.\r\n     * - `page` - A value used to set the page number, i.e. to retrieve certain article rating subset from the storage.\r\n     * - `rpp` - A value used to limit the size of result set per page.\r\n     * - `sort` - A string used to set the article rating property to sort the result collection by.\r\n     * - `embed` - Comma separated list of resources to be contained within the current representation.\r\n     * @method\r\n     * @param username Username which uniquely identifies a user which has created an article rating.\r\n     * @param options Query resource options object.\r\n     * @example articleRatingsRoute.find({username: '<username>'});\r\n     **/\r\n    ArticleRatingsRoute.prototype.findByUser = function (username, options) {\r\n        var params = this.utility.extend({}, options);\r\n        params.username = username;\r\n        return _super.prototype.baseFind.call(this, this.findByUserRoute, params);\r\n    };\r\n    /**\r\n     * Parses get article rating route which must be expanded with the Id of the previously created article rating resource in the system. Additional expand supported items are:\r\n     * - `embed` - Comma separated list of resources to be contained within the current representation.\r\n     * @method\r\n     * @param id Id which uniquely identifies article rating resource that needs to be retrieved.\r\n     * @param options Options object that contains embed data.\r\n     * @example articleRatingsRoute.get({id: '<articleRating-id>'});\r\n     **/\r\n    ArticleRatingsRoute.prototype.get = function (id, options) {\r\n        return _super.prototype.baseGet.call(this, this.getRoute, id, options);\r\n    };\r\n    /**\r\n     * Parses update article rating route; this URI does not support any additional embed items.\r\n     * @method\r\n     * @param data An article object used to update specified article rating resource.\r\n     * @example articleRatingsRoute.update(data);\r\n     **/\r\n    ArticleRatingsRoute.prototype.update = function (data) {\r\n        return _super.prototype.baseUpdate.call(this, this.updateRoute, data);\r\n    };\r\n    /**\r\n    * Parses delete article rating route; this URI does not support any additional embed items.\r\n    * @method\r\n    * @param data An article object used to delete specified article rating resource.\r\n    * @example articleRatingsRoute.delete(data);\r\n    **/\r\n    ArticleRatingsRoute.prototype.delete = function (data) {\r\n        return _super.prototype.baseDelete.call(this, this.deleteRoute, data);\r\n    };\r\n    return ArticleRatingsRoute;\r\n}(common_1.BaseRoute));\r\nArticleRatingsRoute = tslib_1.__decorate([\r\n    inversify_1.injectable(),\r\n    tslib_1.__param(0, inversify_1.inject(contracts_1.TYPES.IAppOptions)),\r\n    tslib_1.__metadata(\"design:paramtypes\", [typeof (_a = typeof contracts_1.IAppOptions !== \"undefined\" && contracts_1.IAppOptions) === \"function\" && _a || Object])\r\n], ArticleRatingsRoute);\r\nexports.ArticleRatingsRoute = ArticleRatingsRoute;\r\nvar _a;\r\n/**\r\n * @copyright (c) 2017 Mono Ltd\r\n * @license MIT\r\n * @author Mono Ltd\r\n * @overview\r\n ***Notes:**\r\n - Refer to the [Baasic REST API](http://dev.baasic.com/api/reference/home) for detailed information about available Baasic REST API end-points.\r\n - [URI Template](https://github.com/Baasic/uritemplate-js) syntax enables expanding the Baasic route templates to Baasic REST URIs providing it with an object that contains URI parameters.\r\n - All end-point objects are transformed by the associated route service.\r\n*/ \r\n\n\n\n//////////////////\n// WEBPACK FOOTER\n// ./src/modules/article/articleRatingsRoute.ts\n// module id = 136\n// module chunks = 0","/* globals module */\r\n/**\r\n * @module articleSubRatingsClient\r\n * @description  Article Sub Ratings Client provides an easy way to consume  Article Ratings REST API end-points. `articleRatingsClient` functions enable performing standard CRUD operations directly on article rating resources, whereas the `articleService` functions allow management between article and article rating. In order to obtain needed routes `articleRatingsClient` uses `articleRatingsRoute`.\r\n*/\r\n\"use strict\";\r\nObject.defineProperty(exports, \"__esModule\", { value: true });\r\nvar tslib_1 = require(\"tslib\");\r\nvar inversify_1 = require(\"inversify\");\r\n;\r\nvar httpApi_1 = require(\"../../../httpApi\");\r\nvar _1 = require(\"../\");\r\nvar ArticleInstanceRatingsClient = (function () {\r\n    function ArticleInstanceRatingsClient(articleInstanceRatingsRoute, apiClient) {\r\n        this.articleInstanceRatingsRoute = articleInstanceRatingsRoute;\r\n        this.apiClient = apiClient;\r\n    }\r\n    Object.defineProperty(ArticleInstanceRatingsClient.prototype, \"routeDefinition\", {\r\n        /**\r\n         * Provides direct access to `articleRatingsRoute`.\r\n         * @method\r\n         * @example articleInstanceRatingsClient.routeDefinition.get(id);\r\n         **/\r\n        get: function () {\r\n            return this.articleInstanceRatingsRoute;\r\n        },\r\n        enumerable: true,\r\n        configurable: true\r\n    });\r\n    /**\r\n     * Returns a promise that is resolved once the create article rating action has been performed; this action creates a new rating for an article.\r\n     * @method\r\n     * @param data An article rating object that needs to be inserted into the system.\r\n     * @returns A promise that is resolved once the create article rating action has been performed.\r\n     * @example articleInstanceRatingsClient.create({ articleId : '<article-id>', rating : 5, userId : '<user-id>' })\r\n                    .then(function (data) {\r\n                        // perform success action here\r\n                    },\r\n                     function (response, status, headers, config) {\r\n                        // perform error handling here\r\n                    });\r\n     **/\r\n    ArticleInstanceRatingsClient.prototype.create = function (data) {\r\n        return this.apiClient.post(this.routeDefinition.create(data), this.routeDefinition.createParams(data));\r\n    };\r\n    /**\r\n     * Returns a promise that is resolved once the find action has been performed. Success response returns a list of article rating resources matching the given criteria.\r\n     * @method\r\n     * @param articleId Article slug or id which uniquely identifies article whose rating resources need to be retrieved.\r\n     * @param options Query resource options object.\r\n     * @returns A promise that is resolved once the find action has been performed.\r\n     * @example articleInstanceRatingsClient.find({\r\n                    pageNumber : 1,\r\n                    pageSize : 10,\r\n                    orderBy : '<field>',\r\n                    orderDirection : '<asc|desc>',\r\n                    search : '<search-phrase>'\r\n                })\r\n                .then(function (collection) {\r\n                    // perform success action here\r\n                },\r\n                 function (response, status, headers, config) {\r\n                    // perform error handling here\r\n                });\r\n     **/\r\n    ArticleInstanceRatingsClient.prototype.find = function (articleId, options) {\r\n        return this.apiClient.get(this.articleInstanceRatingsRoute.find(articleId, options));\r\n    };\r\n    /**\r\n     * Returns a promise that is resolved once the findByUser action has been performed. Success response returns a list of article rating resources filtered by username.\r\n     * @method\r\n     * @param articleId Article slug or id which uniquely identifies article whose rating resources need to be retrieved.\r\n     * @param username Username which uniquely identifies a user which has created an article rating.\r\n     * @param options Query resource options object.\r\n     * @returns A promise that is resolved once the findByUser action has been performed.\r\n     * @example articleInstanceRatingsClient.find('<username>', {\r\n                    pageNumber : 1,\r\n                    pageSize : 10,\r\n                    orderBy : '<field>',\r\n                    orderDirection : '<asc|desc>'\r\n                })\r\n                .then(function (collection) {\r\n                    // perform success action here\r\n                },\r\n                 function (response, status, headers, config) {\r\n                    // perform error handling here\r\n                });\r\n     **/\r\n    ArticleInstanceRatingsClient.prototype.findByUser = function (articleId, username, options) {\r\n        return this.apiClient.get(this.articleInstanceRatingsRoute.findByUser(articleId, username, options));\r\n    };\r\n    /**\r\n     * Returns a promise that is resolved once the get action has been performed. Success response returns the specified article rating resource.\r\n     * @method\r\n     * @param articleId Article slug or id which uniquely identifies article whose rating resources need to be retrieved.\r\n     * @param id Article slug or id which uniquely identifies article resource that needs to be retrieved.\r\n     * @param options Options object that contains embed data.\r\n     * @returns A promise that is resolved once the get action has been performed.\r\n     * @example articleInstanceRatingsClient.get('<articleRating-id>')\r\n                    .then(function (data) {\r\n                        // perform success action here\r\n                    },\r\n                     function (response, status, headers, config) {\r\n                        // perform error handling here\r\n                    });\r\n     **/\r\n    ArticleInstanceRatingsClient.prototype.get = function (articleId, id, options) {\r\n        return this.apiClient.get(this.articleInstanceRatingsRoute.get(articleId, id, options));\r\n    };\r\n    /**\r\n     * Returns a promise that is resolved once the update article rating action has been performed; this action updates an article rating. This route uses HAL enabled objects to obtain routes and therefore it doesn't apply `articleRatingsRoute` route template. Here is an example of how a route can be obtained from HAL enabled objects:\r\n     * ```\r\n     * let params = modelMapper.removeParams(articleRating);\r\n     * let uri = params['model'].links('put').href;\r\n     * ```\r\n     * @method\r\n     * @param data An article object used to update specified article resource.\r\n     * @returns A promise that is resolved once the update article rating action has been performed.\r\n     * @example // articleRating is a resource previously fetched using get action.\r\n                    articleRating.rating = 4;\r\n                    articleInstanceRatingsClient.update(articleRating)\r\n                        .then(function (data) {\r\n                            // perform success action here\r\n                        },\r\n                         function (response, status, headers, config) {\r\n                            // perform error handling here\r\n                        });\r\n     **/\r\n    ArticleInstanceRatingsClient.prototype.update = function (data) {\r\n        return this.apiClient.put(this.routeDefinition.update(data), this.routeDefinition.updateParams(data));\r\n    };\r\n    /**\r\n     * Returns a promise that is resolved once the remove article rating action has been performed. If the action is successfully completed, the article rating resource will be permanently removed from the system. This route uses HAL enabled objects to obtain routes and therefore it doesn't apply `articleRatingsRoute` route template. Here is an example of how a route can be obtained from HAL enabled objects:\r\n     * ```\r\n     * let params = modelMapper.removeParams(articleRating);\r\n     * let uri = params['model'].links('delete').href;\r\n     * ```\r\n     * @method\r\n     * @param data Rating resource resource that needs to be deleted.\r\n     * @returns a promise that is resolved once the remove article rating action has been performed.\r\n     * @example // articleRating is a resource previously fetched using get action.\r\n                    articleInstanceRatingsClient.remove(articleRating)\r\n                        .then(function (data) {\r\n                            // perform success action here\r\n                        },\r\n                         function (response, status, headers, config) {\r\n                            // perform error handling here\r\n                        });\r\n     **/\r\n    ArticleInstanceRatingsClient.prototype.remove = function (data) {\r\n        return this.apiClient.delete(this.routeDefinition.delete(data));\r\n    };\r\n    /**\r\n     * Returns a promise that is resolved once the removeAll article rating action has been performed. If the action is successfully completed, the article rating resources will be permanently removed from the system for a specified article resource. This route uses HAL enabled objects to obtain routes and therefore it doesn't apply `articleInstanceRouteClient` route template. Here is an example of how a route can be obtained from HAL enabled objects:\r\n     *  ```\r\n     * let params = modelMapper.removeParams(article);\r\n     * let uri = params['model'].links('delete-ratings-by-article').href;\r\n     * ```\r\n     * @method\r\n     * @param data Article object whose ratings needs to be deleted.\r\n     * @returns A promise that is resolved once the removeAll article rating action has been performed.\r\n     * @example // article is a resource previously fetched using get action.\r\n                    articleInstanceRatingsClient.removeAll(article)\r\n                        .then(function (data) {\r\n                            // perform success action here\r\n                        },\r\n                         function (response, status, headers, config) {\r\n                             // perform error handling here\r\n                        });\r\n     **/\r\n    ArticleInstanceRatingsClient.prototype.removeAll = function (data) {\r\n        return this.apiClient.delete(this.routeDefinition.deleteAll(data));\r\n    };\r\n    return ArticleInstanceRatingsClient;\r\n}());\r\nArticleInstanceRatingsClient = tslib_1.__decorate([\r\n    inversify_1.injectable(),\r\n    tslib_1.__param(0, inversify_1.inject(_1.TYPES.ArticleInstanceRatingsRoute)),\r\n    tslib_1.__param(1, inversify_1.inject(httpApi_1.httpTYPES.ApiClient)),\r\n    tslib_1.__metadata(\"design:paramtypes\", [typeof (_a = typeof _1.ArticleInstanceRatingsRoute !== \"undefined\" && _1.ArticleInstanceRatingsRoute) === \"function\" && _a || Object, typeof (_b = typeof httpApi_1.ApiClient !== \"undefined\" && httpApi_1.ApiClient) === \"function\" && _b || Object])\r\n], ArticleInstanceRatingsClient);\r\nexports.ArticleInstanceRatingsClient = ArticleInstanceRatingsClient;\r\nvar _a, _b;\r\n/**\r\n * @copyright (c) 2017 Mono Ltd\r\n * @license MIT\r\n * @author Mono Ltd\r\n * @overview\r\n ***Notes:**\r\n - Refer to the [Baasic REST API](http://dev.baasic.com/api/reference/home) for detailed information about available Baasic REST API end-points.\r\n - All end-point objects are transformed by the associated route service.\r\n*/ \r\n\n\n\n//////////////////\n// WEBPACK FOOTER\n// ./src/modules/article/articleRatings/InstanceRatingsClient.ts\n// module id = 137\n// module chunks = 0","/* globals module */\r\n/**\r\n * @module articleInstanceRatingsRoute\r\n * @description Baasic Article Instance Ratings Route Definition provides Baasic route templates which can be expanded to Baasic REST URIs. Various services can use Baasic Article Sub Ratings Route Service to obtain needed routes while other routes will be obtained through HAL. By convention, all route services use the same function names as their corresponding services.\r\n*/\r\n\"use strict\";\r\nObject.defineProperty(exports, \"__esModule\", { value: true });\r\nvar tslib_1 = require(\"tslib\");\r\nvar inversify_1 = require(\"inversify\");\r\nvar common_1 = require(\"../../../common\");\r\n;\r\nvar contracts_1 = require(\"../../../core/contracts\");\r\nvar ArticleInstanceRatingsRoute = (function (_super) {\r\n    tslib_1.__extends(ArticleInstanceRatingsRoute, _super);\r\n    function ArticleInstanceRatingsRoute(appOptions) {\r\n        var _this = _super.call(this, appOptions) || this;\r\n        _this.appOptions = appOptions;\r\n        _this.createRoute = 'articles/{articleId}/ratings/';\r\n        _this.findRoute = 'articles/{articleId}/ratings{?page,rpp,sort,embed,fields}';\r\n        _this.findByUserRoute = 'articles/{articleId}/users/{username}/ratings/{?embed,fields}';\r\n        _this.getRoute = 'articles/{articleId}/ratings/{id}/{?embed,fields}';\r\n        _this.updateRoute = 'articles/{articleId}/ratings/{id}';\r\n        _this.deleteRoute = 'articles/{articleId}/ratings/{id}';\r\n        _this.deleteAllRoute = 'articles/{articleId}/ratings';\r\n        return _this;\r\n    }\r\n    /**\r\n     * Parses create article rating route; this URI does not support any additional embed items.\r\n     * @method\r\n     * @param data An article rating object that needs to be inserted into the system.\r\n     * @example articleInstanceRatingsRoute.create(data);\r\n     **/\r\n    ArticleInstanceRatingsRoute.prototype.create = function (data) {\r\n        return _super.prototype.baseCreate.call(this, this.createRoute, data);\r\n    };\r\n    /**\r\n     * Parses find article rating route which can be expanded with additional options. Supported items are:\r\n     * - `searchQuery` - A string referencing article rating properties using the phrase or BQL (Baasic Query Language) search.\r\n     * - `page` - A value used to set the page number, i.e. to retrieve certain article rating subset from the storage.\r\n     * - `rpp` - A value used to limit the size of result set per page.\r\n     * - `sort` - A string used to set the article rating property to sort the result collection by.\r\n     * - `embed` - Comma separated list of resources to be contained within the current representation.\r\n     * @method\r\n     * @param articleId Article slug or id which uniquely identifies article whose rating resources need to be retrieved.\r\n     * @param options Query resource options object.\r\n     * @example articleInstanceRatingsRoute.find({searchQuery: '<search-phrase>'});\r\n     **/\r\n    ArticleInstanceRatingsRoute.prototype.find = function (articleId, options) {\r\n        var params = this.utility.extend({}, options);\r\n        params.articleId = articleId;\r\n        return _super.prototype.baseFind.call(this, this.findRoute, params);\r\n    };\r\n    /**\r\n     * Parses findByUser article rating route which can be expanded with additional options. Supported items are:\r\n     * - `username` - A value that uniquely identifies a user which has created an article rating.\r\n     * - `page` - A value used to set the page number, i.e. to retrieve certain article rating subset from the storage.\r\n     * - `rpp` - A value used to limit the size of result set per page.\r\n     * - `sort` - A string used to set the article rating property to sort the result collection by.\r\n     * - `embed` - Comma separated list of resources to be contained within the current representation.\r\n     * @method\r\n     * @param articleId Article slug or id which uniquely identifies article whose rating resources need to be retrieved.\r\n     * @param username Username which uniquely identifies a user which has created an article rating.\r\n     * @param options Query resource options object.\r\n     * @example articleInstanceRatingsRoute.find({username: '<username>'});\r\n     **/\r\n    ArticleInstanceRatingsRoute.prototype.findByUser = function (articleId, username, options) {\r\n        var params = this.utility.extend({}, options);\r\n        params.username = username;\r\n        params.articleId = articleId;\r\n        return _super.prototype.baseFind.call(this, this.findByUserRoute, params);\r\n    };\r\n    /**\r\n     * Parses get article rating route which must be expanded with the Id of the previously created article rating resource in the system. Additional expand supported items are:\r\n     * - `embed` - Comma separated list of resources to be contained within the current representation.\r\n     * @method\r\n     * @param articleId Article slug or id which uniquely identifies article whose rating resources need to be retrieved.\r\n     * @param id Article slug or id which uniquely identifies article resource that needs to be retrieved.\r\n     * @param options Options object that contains embed data.\r\n     * @example articleInstanceRatingsRoute.get({id: '<articleRating-id>'});\r\n     **/\r\n    ArticleInstanceRatingsRoute.prototype.get = function (articleId, id, options) {\r\n        var params = this.utility.extend({}, options);\r\n        params.articleId = articleId;\r\n        return _super.prototype.baseGet.call(this, this.getRoute, id, params);\r\n    };\r\n    /**\r\n     * Parses update article rating route; this URI does not support any additional embed items.\r\n     * @method\r\n     * @param data An article object used to update specified article resource.\r\n     * @example articleInstanceRatingsRoute.update(data);\r\n     **/\r\n    ArticleInstanceRatingsRoute.prototype.update = function (data) {\r\n        return _super.prototype.baseUpdate.call(this, this.updateRoute, data);\r\n    };\r\n    /**\r\n    * Parses delete article rating route; this URI does not support any additional embed items.\r\n    * @method\r\n    * @param data Rating resource resource that needs to be deleted.\r\n    * @example articleInstanceRatingsRoute.delete(data);\r\n    **/\r\n    ArticleInstanceRatingsRoute.prototype.delete = function (data) {\r\n        return _super.prototype.baseDelete.call(this, this.deleteRoute, data);\r\n    };\r\n    /**\r\n    * Parses delete article rating route; this URI does not support any additional embed items.\r\n    * @method\r\n    * @param data Article object whose ratings needs to be deleted.\r\n    * @example articleInstanceRatingsRoute.deleteAll(data);\r\n    **/\r\n    ArticleInstanceRatingsRoute.prototype.deleteAll = function (data) {\r\n        return _super.prototype.baseDelete.call(this, this.deleteAllRoute, data, undefined, 'delete-ratings-by-article');\r\n    };\r\n    return ArticleInstanceRatingsRoute;\r\n}(common_1.BaseRoute));\r\nArticleInstanceRatingsRoute = tslib_1.__decorate([\r\n    inversify_1.injectable(),\r\n    tslib_1.__param(0, inversify_1.inject(contracts_1.TYPES.IAppOptions)),\r\n    tslib_1.__metadata(\"design:paramtypes\", [typeof (_a = typeof contracts_1.IAppOptions !== \"undefined\" && contracts_1.IAppOptions) === \"function\" && _a || Object])\r\n], ArticleInstanceRatingsRoute);\r\nexports.ArticleInstanceRatingsRoute = ArticleInstanceRatingsRoute;\r\nvar _a;\r\n/**\r\n * @copyright (c) 2017 Mono Ltd\r\n * @license MIT\r\n * @author Mono Ltd\r\n * @overview\r\n ***Notes:**\r\n - Refer to the [Baasic REST API](http://dev.baasic.com/api/reference/home) for detailed information about available Baasic REST API end-points.\r\n - [URI Template](https://github.com/Baasic/uritemplate-js) syntax enables expanding the Baasic route templates to Baasic REST URIs providing it with an object that contains URI parameters.\r\n - All end-point objects are transformed by the associated route service.\r\n*/ \r\n\n\n\n//////////////////\n// WEBPACK FOOTER\n// ./src/modules/article/articleRatings/InstanceRatingsRoute.ts\n// module id = 138\n// module chunks = 0","\"use strict\";\r\nfunction __export(m) {\r\n    for (var p in m) if (!exports.hasOwnProperty(p)) exports[p] = m[p];\r\n}\r\nObject.defineProperty(exports, \"__esModule\", { value: true });\r\n__export(require(\"./InstanceRatingsRoute\"));\r\n__export(require(\"./InstanceRatingsClient\"));\r\n\n\n\n//////////////////\n// WEBPACK FOOTER\n// ./src/modules/article/articleRatings/index.ts\n// module id = 139\n// module chunks = 0","/* globals module */\r\n/**\r\n * @module articleRoute\r\n * @description Baasic Article Route Definition provides Baasic route templates which can be expanded to Baasic REST URIs. Various services can use Baasic Article Route Service to obtain needed routes while other routes will be obtained through HAL. By convention, all route services use the same function names as their corresponding services.\r\n*/\r\n\"use strict\";\r\nObject.defineProperty(exports, \"__esModule\", { value: true });\r\nvar tslib_1 = require(\"tslib\");\r\nvar inversify_1 = require(\"inversify\");\r\nvar common_1 = require(\"../../common\");\r\n;\r\nvar contracts_1 = require(\"../../core/contracts\");\r\nvar _1 = require(\"./\");\r\nvar ArticleRoute = (function (_super) {\r\n    tslib_1.__extends(ArticleRoute, _super);\r\n    function ArticleRoute(articleSubscriptionsRoute, articleInstanceCommentsRoute, articleInstanceFilesRoute, articleInstanceRatingsRoute, articleInstanceTagsRoute, articleACLRoute, appOptions) {\r\n        var _this = _super.call(this, appOptions) || this;\r\n        _this.articleSubscriptionsRoute = articleSubscriptionsRoute;\r\n        _this.articleInstanceCommentsRoute = articleInstanceCommentsRoute;\r\n        _this.articleInstanceFilesRoute = articleInstanceFilesRoute;\r\n        _this.articleInstanceRatingsRoute = articleInstanceRatingsRoute;\r\n        _this.articleInstanceTagsRoute = articleInstanceTagsRoute;\r\n        _this.articleACLRoute = articleACLRoute;\r\n        _this.appOptions = appOptions;\r\n        _this.findRoute = 'articles/{?searchQuery,page,rpp,sort,embed,fields,statuses,tags,startDate,endDate}';\r\n        _this.getRoute = 'articles/{id}/{?embed,fields}';\r\n        _this.publishRoute = 'articles/{id}/publish/';\r\n        _this.purgeRoute = 'articles/purge/';\r\n        _this.createRoute = 'articles';\r\n        _this.updateRoute = 'articles/{id}';\r\n        _this.deleteRoute = 'articles/{id}';\r\n        _this.archiveRoute = 'articles/{id}/archive';\r\n        _this.restoreRoute = 'articles/{id}/restore';\r\n        _this.unpublishRoute = 'articles/{id}/unpublish';\r\n        return _this;\r\n    }\r\n    Object.defineProperty(ArticleRoute.prototype, \"subscriptions\", {\r\n        get: function () {\r\n            return this.articleSubscriptionsRoute;\r\n        },\r\n        enumerable: true,\r\n        configurable: true\r\n    });\r\n    Object.defineProperty(ArticleRoute.prototype, \"comments\", {\r\n        get: function () {\r\n            return this.articleInstanceCommentsRoute;\r\n        },\r\n        enumerable: true,\r\n        configurable: true\r\n    });\r\n    Object.defineProperty(ArticleRoute.prototype, \"files\", {\r\n        get: function () {\r\n            return this.articleInstanceFilesRoute;\r\n        },\r\n        enumerable: true,\r\n        configurable: true\r\n    });\r\n    Object.defineProperty(ArticleRoute.prototype, \"ratings\", {\r\n        get: function () {\r\n            return this.articleInstanceRatingsRoute;\r\n        },\r\n        enumerable: true,\r\n        configurable: true\r\n    });\r\n    Object.defineProperty(ArticleRoute.prototype, \"tags\", {\r\n        get: function () {\r\n            return this.articleInstanceTagsRoute;\r\n        },\r\n        enumerable: true,\r\n        configurable: true\r\n    });\r\n    Object.defineProperty(ArticleRoute.prototype, \"acl\", {\r\n        get: function () {\r\n            return this.articleACLRoute;\r\n        },\r\n        enumerable: true,\r\n        configurable: true\r\n    });\r\n    /**\r\n     * Parses find article route which can be expanded with additional options. Supported items are:\r\n     * - `searchQuery` - A string referencing article properties using the phrase or BQL (Baasic Query Language) search.\r\n     * - `page` - A value used to set the page number, i.e. to retrieve certain article subset from the storage.\r\n     * - `rpp` - A value used to limit the size of result set per page.\r\n     * - `sort` - A string used to set the article property to sort the result collection by.\r\n     * - `embed` - Comma separated list of resources to be contained within the current representation.\r\n     * - `startDate` - A value used to specify the article creation, publish or archive date date starting from which article resource collection should be returned.\r\n     * - `endDate` - A value used to specify the article creation, publish or archive date until (and including) which article resource collection should be returned.\r\n     * - `statuses` - Comma separated list of article statuses that specify where search should be done (Allowed statuses: Published, Draft and Archived).\r\n     * - `tags` - A value used to restrict the search to article resources with these tags. Multiple tags should be comma separated.\r\n     * @method\r\n     * @param options A promise that is resolved once the find action has been performed.\r\n     * @example articleRoute.find.expand({searchQuery: '<search-phrase>'});\r\n     **/\r\n    ArticleRoute.prototype.find = function (options) {\r\n        var opt = options || {};\r\n        opt.startDate = this.getStartDate(opt);\r\n        opt.endDate = this.getEndDate(opt);\r\n        return _super.prototype.baseFind.call(this, this.findRoute, opt);\r\n    };\r\n    /**\r\n     * Parses get article route which must be expanded with the Id of the previously created article resource in the system. Additional expand supported items are:\r\n     * - `embed` - Comma separated list of resources to be contained within the current representation.\r\n     * @method\r\n     * @param id Article slug or id which uniquely identifies article resource that needs to be retrieved.\r\n     * @param options Options object that contains embed items.\r\n     * @example articleRoute.get({id: '<article-id>'});\r\n     **/\r\n    ArticleRoute.prototype.get = function (id, options) {\r\n        return _super.prototype.baseGet.call(this, this.getRoute, id, options);\r\n    };\r\n    /**\r\n     * Parses publish article route which must be expanded with the Id of the previously created article resource in the system.\r\n     * @method\r\n     * @param data An article object.\r\n     * @example articleRoute.publish.expand({id: '<article-id>'});\r\n     **/\r\n    ArticleRoute.prototype.publish = function (data) {\r\n        return _super.prototype.baseGet.call(this, this.publishRoute, data);\r\n    };\r\n    /**\r\n     * Parses purge article route, this URI template doesn't expose any additional properties.\r\n     * @method\r\n     * @example articleRoute.purge();\r\n     **/\r\n    ArticleRoute.prototype.purge = function (options) {\r\n        return _super.prototype.baseCreate.call(this, this.purgeRoute, options);\r\n    };\r\n    /**\r\n     * Parses create article route; this URI template doesn't expose any additional properties.\r\n     * @method\r\n     * @example articleRoute.create();\r\n     **/\r\n    ArticleRoute.prototype.create = function () {\r\n        return _super.prototype.baseCreate.call(this, this.createRoute, {});\r\n    };\r\n    /**\r\n     * Parses update article route; this URI template doesn't expose any additional properties.\r\n     * @method\r\n     * @param data An article object that needs to be updated into the system.\r\n     * @example articleRoute.update(data);\r\n     **/\r\n    ArticleRoute.prototype.update = function (data) {\r\n        return _super.prototype.baseUpdate.call(this, this.updateRoute, data);\r\n    };\r\n    /**\r\n     * Parses delete article route; this URI template doesn't expose any additional properties.\r\n     * @method\r\n     * @param data An article object that needs to be removed from the system.\r\n     * @example articleRoute.delete(data);\r\n     **/\r\n    ArticleRoute.prototype.delete = function (data) {\r\n        return _super.prototype.baseDelete.call(this, this.deleteRoute, data);\r\n    };\r\n    /**\r\n     * Parses archive article route; this URI template doesn't expose any additional properties.\r\n     * @method\r\n     * @param data An article object.\r\n     * @example articleRoute.archive(data);\r\n     **/\r\n    ArticleRoute.prototype.archive = function (data) {\r\n        return _super.prototype.baseUpdate.call(this, this.archiveRoute, data, undefined, 'archive');\r\n    };\r\n    /**\r\n     * Parses restore article route; this URI template doesn't expose any additional properties.\r\n     * @method\r\n     * @example articleRoute.restore(data);\r\n     **/\r\n    ArticleRoute.prototype.restore = function (data) {\r\n        return _super.prototype.baseUpdate.call(this, this.restoreRoute, data, undefined, 'restore');\r\n    };\r\n    /**\r\n     * Returns a promise that is resolved once the unpublish article action has been performed. This action sets the status of an article from \"published\" to \"draft\". This route uses HAL enabled objects to obtain routes and therefore it doesn't apply `articleRoute` route template. Here is an example of how a route can be obtained from HAL enabled objects:\r\n     * ```\r\n     * let params = modelMapper.updateParams(article);\r\n     * let uri = params['model'].links('unpublish').href;\r\n     * ```\r\n     * @method\r\n     * @example // article is a resource previously fetched using get action.\r\n                    articleClient.unpublish(article)\r\n                        .then(function (data) {\r\n                            // perform success action here\r\n                        },\r\n                         function (response, status, headers, config) {\r\n                             // perform error handling here\r\n                        });\r\n     **/\r\n    ArticleRoute.prototype.unpublish = function (data) {\r\n        return _super.prototype.baseUpdate.call(this, this.unpublishRoute, data, undefined, 'unpublish');\r\n    };\r\n    ArticleRoute.prototype.getStartDate = function (options) {\r\n        if (!this.utility.isUndefined(options.startDate) && options.startDate !== null) {\r\n            return options.startDate.toISOString();\r\n        }\r\n        return undefined;\r\n    };\r\n    ArticleRoute.prototype.getEndDate = function (options) {\r\n        if (!this.utility.isUndefined(options.endDate) && options.endDate !== null) {\r\n            return options.endDate.toISOString();\r\n        }\r\n        return undefined;\r\n    };\r\n    return ArticleRoute;\r\n}(common_1.BaseRoute));\r\nArticleRoute = tslib_1.__decorate([\r\n    inversify_1.injectable(),\r\n    tslib_1.__param(0, inversify_1.inject(_1.TYPES.ArticleSubscriptionsRoute)),\r\n    tslib_1.__param(1, inversify_1.inject(_1.TYPES.ArticleInstanceCommentsRoute)),\r\n    tslib_1.__param(2, inversify_1.inject(_1.TYPES.ArticleInstanceFilesRoute)),\r\n    tslib_1.__param(3, inversify_1.inject(_1.TYPES.ArticleInstanceRatingsRoute)),\r\n    tslib_1.__param(4, inversify_1.inject(_1.TYPES.ArticleInstanceTagsRoute)),\r\n    tslib_1.__param(5, inversify_1.inject(_1.TYPES.ArticleACLRoute)),\r\n    tslib_1.__param(6, inversify_1.inject(contracts_1.TYPES.IAppOptions)),\r\n    tslib_1.__metadata(\"design:paramtypes\", [typeof (_a = typeof _1.ArticleSubscriptionsRoute !== \"undefined\" && _1.ArticleSubscriptionsRoute) === \"function\" && _a || Object, typeof (_b = typeof _1.ArticleInstanceCommentsRoute !== \"undefined\" && _1.ArticleInstanceCommentsRoute) === \"function\" && _b || Object, typeof (_c = typeof _1.ArticleInstanceFilesRoute !== \"undefined\" && _1.ArticleInstanceFilesRoute) === \"function\" && _c || Object, typeof (_d = typeof _1.ArticleInstanceRatingsRoute !== \"undefined\" && _1.ArticleInstanceRatingsRoute) === \"function\" && _d || Object, typeof (_e = typeof _1.ArticleInstanceTagsRoute !== \"undefined\" && _1.ArticleInstanceTagsRoute) === \"function\" && _e || Object, typeof (_f = typeof _1.ArticleACLRoute !== \"undefined\" && _1.ArticleACLRoute) === \"function\" && _f || Object, typeof (_g = typeof contracts_1.IAppOptions !== \"undefined\" && contracts_1.IAppOptions) === \"function\" && _g || Object])\r\n], ArticleRoute);\r\nexports.ArticleRoute = ArticleRoute;\r\nvar _a, _b, _c, _d, _e, _f, _g;\r\n/**\r\n * @copyright (c) 2017 Mono Ltd\r\n * @license MIT\r\n * @author Mono Ltd\r\n * @overview\r\n ***Notes:**\r\n - Refer to the [Baasic REST API](http://dev.baasic.com/api/reference/home) for detailed information about available Baasic REST API end-points.\r\n - [URI Template](https://github.com/Baasic/uritemplate-js) syntax enables expanding the Baasic route templates to Baasic REST URIs providing it with an object that contains URI parameters.\r\n - All end-point objects are transformed by the associated route service.\r\n*/\r\n\n\n\n//////////////////\n// WEBPACK FOOTER\n// ./src/modules/article/articleRoute.ts\n// module id = 140\n// module chunks = 0","/* globals module */\r\n/**\r\n * @module articleSettingsClient\r\n * @description  Article Settings Client provides an easy way to consume  Article Settings REST API end-points. In order to obtain needed routes `articleSettingsClient` uses `articleSettingsRoute`.\r\n */\r\n\"use strict\";\r\nObject.defineProperty(exports, \"__esModule\", { value: true });\r\nvar tslib_1 = require(\"tslib\");\r\nvar inversify_1 = require(\"inversify\");\r\n;\r\nvar httpApi_1 = require(\"../../httpApi\");\r\nvar _1 = require(\"./\");\r\nvar ArticleSettingsClient = (function () {\r\n    function ArticleSettingsClient(articleSettingsRoute, apiClient) {\r\n        this.articleSettingsRoute = articleSettingsRoute;\r\n        this.apiClient = apiClient;\r\n    }\r\n    Object.defineProperty(ArticleSettingsClient.prototype, \"routeDefinition\", {\r\n        /**\r\n         * Provides direct access to `baasicArticleSettingsRouteService`.\r\n         * @method\r\n         * @example articleSettingsClient.routeDefinition.get().expand(expandObject);\r\n         **/\r\n        get: function () {\r\n            return this.articleSettingsRoute;\r\n        },\r\n        enumerable: true,\r\n        configurable: true\r\n    });\r\n    /**\r\n     * Returns a promise that is resolved once the get action has been performed. Success response returns the article settings.\r\n     * @method\r\n     * @param options Options object that contains embed data.\r\n     * @returns A promise that is resolved once the get action has been performed.\r\n     * @example articleSettingsClient.get()\r\n                    .then(function (data) {\r\n                        // perform success action here\r\n                    },\r\n                     function (response, status, headers, config) {\r\n                        // perform error handling here\r\n                    });\r\n     **/\r\n    ArticleSettingsClient.prototype.get = function (options) {\r\n        return this.apiClient.get(this.routeDefinition.get(options));\r\n    };\r\n    /**\r\n     * Returns a promise that is resolved once the update article settings action has been performed; this action updates article settings. This route uses HAL enabled objects to obtain routes and therefore it doesn't apply `articleSettingsRoute` route template. Here is an example of how a route can be obtained from HAL enabled objects:\r\n     * ```\r\n     * let params = modelMapper.removeParams(articleSettings);\r\n     * let uri = params['model'].links('put').href;\r\n     * ```\r\n     * @method\r\n     * @param options Options object that contains embed data.\r\n     * @returns A promise that is resolved once the update article settings action has been performed.\r\n     * @example // articleSettings is a resource previously fetched using get action.\r\n                    articleSettings.allowArchive = true;\r\n                    articleSettingsClient.update(articleSettings)\r\n                        .then(function (data) {\r\n                            // perform success action here\r\n                        },\r\n                         function (response, status, headers, config) {\r\n                            // perform error handling here\r\n                        });\r\n     **/\r\n    ArticleSettingsClient.prototype.update = function (data) {\r\n        return this.apiClient.put(this.routeDefinition.update(data), this.routeDefinition.updateParams(data));\r\n    };\r\n    return ArticleSettingsClient;\r\n}());\r\nArticleSettingsClient = tslib_1.__decorate([\r\n    inversify_1.injectable(),\r\n    tslib_1.__param(0, inversify_1.inject(_1.TYPES.ArticleSettingsRoute)),\r\n    tslib_1.__param(1, inversify_1.inject(httpApi_1.httpTYPES.ApiClient)),\r\n    tslib_1.__metadata(\"design:paramtypes\", [typeof (_a = typeof _1.ArticleSettingsRoute !== \"undefined\" && _1.ArticleSettingsRoute) === \"function\" && _a || Object, typeof (_b = typeof httpApi_1.ApiClient !== \"undefined\" && httpApi_1.ApiClient) === \"function\" && _b || Object])\r\n], ArticleSettingsClient);\r\nexports.ArticleSettingsClient = ArticleSettingsClient;\r\nvar _a, _b;\r\n/**\r\n * @copyright (c) 2017 Mono Ltd\r\n * @license MIT\r\n * @author Mono Ltd\r\n * @overview\r\n ***Notes:**\r\n - Refer to the [Baasic REST API](http://dev.baasic.com/api/reference/home) for detailed information about available Baasic REST API end-points.\r\n - All end-point objects are transformed by the associated route service.\r\n*/ \r\n\n\n\n//////////////////\n// WEBPACK FOOTER\n// ./src/modules/article/articleSettingsClient.ts\n// module id = 141\n// module chunks = 0","/* globals module */\r\n/**\r\n* @module articleSettingsRoute\r\n* @description Baasic Article Settings Route Definition provides Baasic route templates which can be expanded to Baasic REST URIs. Various services can use Baasic Article Settings Route Service to obtain needed routes while other routes will be obtained through HAL. By convention, all route services  use the same function names as their corresponding services.\r\n*/\r\n\"use strict\";\r\nObject.defineProperty(exports, \"__esModule\", { value: true });\r\nvar tslib_1 = require(\"tslib\");\r\nvar inversify_1 = require(\"inversify\");\r\nvar common_1 = require(\"../../common\");\r\n;\r\nvar contracts_1 = require(\"../../core/contracts\");\r\nvar ArticleSettingsRoute = (function (_super) {\r\n    tslib_1.__extends(ArticleSettingsRoute, _super);\r\n    function ArticleSettingsRoute(appOptions) {\r\n        var _this = _super.call(this, appOptions) || this;\r\n        _this.appOptions = appOptions;\r\n        _this.getRoute = 'article-settings/{?embed,fields}';\r\n        _this.updateRoute = 'article-settings/{id}';\r\n        return _this;\r\n    }\r\n    /**\r\n     * Parses get article settings route; this URI template doesn't expose any additional properties.\r\n     * @method\r\n     * @param options Options object that contains embed data.\r\n     * @example articleSettingsRoute.get(options);\r\n     **/\r\n    ArticleSettingsRoute.prototype.get = function (options) {\r\n        return _super.prototype.baseGet.call(this, this.getRoute, undefined, options);\r\n    };\r\n    /**\r\n     * Parses update article settings route; this URI template doesn't expose any additional properties.\r\n     * @method\r\n     * @param options Options object that contains embed data.\r\n     * @example articleSettingsRoute.update(data);\r\n     **/\r\n    ArticleSettingsRoute.prototype.update = function (data) {\r\n        return _super.prototype.baseUpdate.call(this, this.updateRoute, data);\r\n    };\r\n    return ArticleSettingsRoute;\r\n}(common_1.BaseRoute));\r\nArticleSettingsRoute = tslib_1.__decorate([\r\n    inversify_1.injectable(),\r\n    tslib_1.__param(0, inversify_1.inject(contracts_1.TYPES.IAppOptions)),\r\n    tslib_1.__metadata(\"design:paramtypes\", [typeof (_a = typeof contracts_1.IAppOptions !== \"undefined\" && contracts_1.IAppOptions) === \"function\" && _a || Object])\r\n], ArticleSettingsRoute);\r\nexports.ArticleSettingsRoute = ArticleSettingsRoute;\r\nvar _a;\r\n/**\r\n * @copyright (c) 2017 Mono Ltd\r\n * @license MIT\r\n * @author Mono Ltd\r\n * @overview\r\n ***Notes:**\r\n - Refer to the [Baasic REST API](http://dev.baasic.com/api/reference/home) for detailed information about available Baasic REST API end-points.\r\n - [URI Template](https://github.com/Baasic/uritemplate-js) syntax enables expanding the Baasic route templates to Baasic REST URIs providing it with an object that contains URI parameters.\r\n - All end-point objects are transformed by the associated route service.\r\n*/ \r\n\n\n\n//////////////////\n// WEBPACK FOOTER\n// ./src/modules/article/articleSettingsRoute.ts\n// module id = 142\n// module chunks = 0","/* globals module */\r\n/**\r\n * @module articleSubscriptionsArticleModuleClient\r\n * @description  Article Subscriptions Article Module Client provides an easy way to consume  Articles REST API end-points. In order to obtain needed routes `articleSubscriptionsClient` uses `articleSubscriptionsRoute`.\r\n */\r\n\"use strict\";\r\nObject.defineProperty(exports, \"__esModule\", { value: true });\r\nvar tslib_1 = require(\"tslib\");\r\nvar inversify_1 = require(\"inversify\");\r\n;\r\nvar httpApi_1 = require(\"../../httpApi\");\r\nvar _1 = require(\"./\");\r\nvar ArticleSubscriptionsClient = (function () {\r\n    function ArticleSubscriptionsClient(articleSubscriptionsRoute, apiClient) {\r\n        this.articleSubscriptionsRoute = articleSubscriptionsRoute;\r\n        this.apiClient = apiClient;\r\n    }\r\n    Object.defineProperty(ArticleSubscriptionsClient.prototype, \"routeDefinition\", {\r\n        get: function () {\r\n            return this.articleSubscriptionsRoute;\r\n        },\r\n        enumerable: true,\r\n        configurable: true\r\n    });\r\n    /**\r\n     * Subscribes user or existing user to article module updates. Returns a promise that is resolved once the subscribe action has been performed. This action subscribes an user to the article module.\r\n     * @method\r\n     * @param data The subscribe information.\r\n     * @returns A promise that is resolved once the subscribe action has been performed.\r\n     * @example articleSubscriptionsArticleModuleClient.subscribe(data)\r\n                   .then(function (data) {\r\n                       // perform success action here\r\n                   },\r\n                    function (response, status, headers, config) {\r\n                        // perform error handling here\r\n                   });\r\n    **/\r\n    ArticleSubscriptionsClient.prototype.subscribe = function (data) {\r\n        return this.apiClient.post(this.articleSubscriptionsRoute.subscribe(data), data);\r\n    };\r\n    /**\r\n     * Determines whether existing or anonymous user are subscribed to article module updates. Returns a promise that is resolved once the isSubscribed action has been performed. This action checks if a user is subscribed to the article module.\r\n     * @method\r\n     * @param data The subscribe information.\r\n     * @returns A promise that is resolved once the isSubscribed action has been performed.\r\n     * @example articleSubscriptionsArticleModuleClient.isSubscribe(data)\r\n                   .then(function (data) {\r\n                       // perform success action here\r\n                   },\r\n                    function (response, status, headers, config) {\r\n                        // perform error handling here\r\n                   });\r\n     **/\r\n    ArticleSubscriptionsClient.prototype.isSubscribed = function (data) {\r\n        return this.apiClient.get(this.routeDefinition.isSubscribed(data));\r\n    };\r\n    /**\r\n     * Unsubscribe existing or anonymous user from article module updates. Returns a promise that is resolved once the unSubscribe action has been performed. This action unsubscribes a user from the article module.\r\n     * @method\r\n     * @param data The subscribe information.\r\n     * @returns A promise that is resolved once the unSubscribe action has been performed.\r\n     * @example articleSubscriptionsArticleModuleClient.unSubscribe(data)\r\n                   .then(function (data) {\r\n                       // perform success action here\r\n                   },\r\n                    function (response, status, headers, config) {\r\n                        // perform error handling here\r\n                   });                          **/\r\n    ArticleSubscriptionsClient.prototype.unSubscribe = function (data) {\r\n        return this.apiClient.delete(this.routeDefinition.unSubscribe(data));\r\n    };\r\n    return ArticleSubscriptionsClient;\r\n}());\r\nArticleSubscriptionsClient = tslib_1.__decorate([\r\n    inversify_1.injectable(),\r\n    tslib_1.__param(0, inversify_1.inject(_1.TYPES.ArticleSubscriptionsRoute)),\r\n    tslib_1.__param(1, inversify_1.inject(httpApi_1.httpTYPES.ApiClient)),\r\n    tslib_1.__metadata(\"design:paramtypes\", [typeof (_a = typeof _1.ArticleSubscriptionsRoute !== \"undefined\" && _1.ArticleSubscriptionsRoute) === \"function\" && _a || Object, typeof (_b = typeof httpApi_1.ApiClient !== \"undefined\" && httpApi_1.ApiClient) === \"function\" && _b || Object])\r\n], ArticleSubscriptionsClient);\r\nexports.ArticleSubscriptionsClient = ArticleSubscriptionsClient;\r\nvar _a, _b;\r\n\n\n\n//////////////////\n// WEBPACK FOOTER\n// ./src/modules/article/articleSubscriptionsClient.ts\n// module id = 143\n// module chunks = 0","/* globals module */\r\n/**\r\n * @module ArticleSubscriptionsRoute\r\n * @description Baasic Article Subscriptions Article Module Route Definition provides Baasic route templates which can be expanded to Baasic REST URIs. Various services can use Baasic Article Subscriptions Article Module Route Service to obtain needed routes while other routes will be obtained through HAL. By convention, all route services use the same function names as their corresponding services.\r\n*/\r\n\"use strict\";\r\nObject.defineProperty(exports, \"__esModule\", { value: true });\r\nvar tslib_1 = require(\"tslib\");\r\nvar inversify_1 = require(\"inversify\");\r\nvar common_1 = require(\"../../common\");\r\n;\r\nvar contracts_1 = require(\"../../core/contracts\");\r\nvar ArticleSubscriptionsRoute = (function (_super) {\r\n    tslib_1.__extends(ArticleSubscriptionsRoute, _super);\r\n    function ArticleSubscriptionsRoute(appOptions) {\r\n        var _this = _super.call(this, appOptions) || this;\r\n        _this.appOptions = appOptions;\r\n        _this.subscribeRoute = 'articles/subscriptions';\r\n        _this.isSubscribedRoute = 'articles/subscriptions/{subscriberId}';\r\n        _this.unSubscribeRoute = 'articles/subscriptions';\r\n        return _this;\r\n    }\r\n    /**\r\n     * Parses article module subscribe route which doesn't support any additional options.\r\n     * @method\r\n     * @param data The subscribe information.\r\n     * @example articleSubscriptionsRoute.subscribe(data);\r\n     **/\r\n    ArticleSubscriptionsRoute.prototype.subscribe = function (data) {\r\n        return _super.prototype.baseCreate.call(this, this.subscribeRoute, data);\r\n    };\r\n    /**\r\n     * Parses article module isSubscribed route which must be expanded with subscriber Id\r\n     * @method\r\n     * @param data The subscribe information.\r\n     * @example articleSubscriptionsRoute.isSubscribed({subscriberId: '<subscriber-id>'});\r\n     **/\r\n    ArticleSubscriptionsRoute.prototype.isSubscribed = function (data) {\r\n        return _super.prototype.baseCreate.call(this, this.isSubscribedRoute, data);\r\n    };\r\n    /**\r\n     * Parses article module unSubscribe route which doesn't support any additional options.\r\n     * @method\r\n     * @param data The subscribe information.\r\n     * @example articleSubscriptionsRoute.unSubscribe(data);\r\n     **/\r\n    ArticleSubscriptionsRoute.prototype.unSubscribe = function (data) {\r\n        return _super.prototype.baseCreate.call(this, this.unSubscribeRoute, data);\r\n    };\r\n    return ArticleSubscriptionsRoute;\r\n}(common_1.BaseRoute));\r\nArticleSubscriptionsRoute = tslib_1.__decorate([\r\n    inversify_1.injectable(),\r\n    tslib_1.__param(0, inversify_1.inject(contracts_1.TYPES.IAppOptions)),\r\n    tslib_1.__metadata(\"design:paramtypes\", [typeof (_a = typeof contracts_1.IAppOptions !== \"undefined\" && contracts_1.IAppOptions) === \"function\" && _a || Object])\r\n], ArticleSubscriptionsRoute);\r\nexports.ArticleSubscriptionsRoute = ArticleSubscriptionsRoute;\r\nvar _a;\r\n\n\n\n//////////////////\n// WEBPACK FOOTER\n// ./src/modules/article/articleSubscriptionsRoute.ts\n// module id = 144\n// module chunks = 0","/* globals module */\r\n/**\r\n * @module articleSubscriptionsClient\r\n * @description  Articles Subscriptions Client provides an easy way to consume  Articles REST API end-points. In order to obtain needed routes `articleSubscriptionsClient` uses `articleSubscriptionsRoute`.\r\n */\r\n\"use strict\";\r\nObject.defineProperty(exports, \"__esModule\", { value: true });\r\nvar tslib_1 = require(\"tslib\");\r\nvar inversify_1 = require(\"inversify\");\r\n;\r\nvar _1 = require(\"../\");\r\nvar ArticleInstanceSubscriptionsClient = (function () {\r\n    function ArticleInstanceSubscriptionsClient(articleSubscriptionsCommentReportedClient, articleSubscriptionsArticleClient, articleSubscriptionsCommentRequiresModerationClient, articleInstanceSubscriptionsRoute) {\r\n        this.articleSubscriptionsCommentReportedClient = articleSubscriptionsCommentReportedClient;\r\n        this.articleSubscriptionsArticleClient = articleSubscriptionsArticleClient;\r\n        this.articleSubscriptionsCommentRequiresModerationClient = articleSubscriptionsCommentRequiresModerationClient;\r\n        this.articleInstanceSubscriptionsRoute = articleInstanceSubscriptionsRoute;\r\n    }\r\n    Object.defineProperty(ArticleInstanceSubscriptionsClient.prototype, \"commentReported\", {\r\n        get: function () {\r\n            return this.articleSubscriptionsCommentReportedClient;\r\n        },\r\n        enumerable: true,\r\n        configurable: true\r\n    });\r\n    Object.defineProperty(ArticleInstanceSubscriptionsClient.prototype, \"article\", {\r\n        get: function () {\r\n            return this.articleSubscriptionsArticleClient;\r\n        },\r\n        enumerable: true,\r\n        configurable: true\r\n    });\r\n    Object.defineProperty(ArticleInstanceSubscriptionsClient.prototype, \"commentRequiresModeration\", {\r\n        get: function () {\r\n            return this.articleSubscriptionsCommentRequiresModerationClient;\r\n        },\r\n        enumerable: true,\r\n        configurable: true\r\n    });\r\n    Object.defineProperty(ArticleInstanceSubscriptionsClient.prototype, \"routeDefinition\", {\r\n        get: function () {\r\n            return this.articleInstanceSubscriptionsRoute;\r\n        },\r\n        enumerable: true,\r\n        configurable: true\r\n    });\r\n    return ArticleInstanceSubscriptionsClient;\r\n}());\r\nArticleInstanceSubscriptionsClient = tslib_1.__decorate([\r\n    inversify_1.injectable(),\r\n    tslib_1.__param(0, inversify_1.inject(_1.TYPES.ArticleSubscriptionsCommentReportedClient)),\r\n    tslib_1.__param(1, inversify_1.inject(_1.TYPES.ArticleSubscriptionsArticleClient)),\r\n    tslib_1.__param(2, inversify_1.inject(_1.TYPES.ArticleSubscriptionsCommentRequiresModerationClient)),\r\n    tslib_1.__param(3, inversify_1.inject(_1.TYPES.ArticleInstanceSubscriptionsRoute)),\r\n    tslib_1.__metadata(\"design:paramtypes\", [typeof (_a = typeof _1.ArticleSubscriptionsCommentReportedClient !== \"undefined\" && _1.ArticleSubscriptionsCommentReportedClient) === \"function\" && _a || Object, typeof (_b = typeof _1.ArticleSubscriptionsArticleClient !== \"undefined\" && _1.ArticleSubscriptionsArticleClient) === \"function\" && _b || Object, typeof (_c = typeof _1.ArticleSubscriptionsCommentRequiresModerationClient !== \"undefined\" && _1.ArticleSubscriptionsCommentRequiresModerationClient) === \"function\" && _c || Object, typeof (_d = typeof _1.ArticleInstanceSubscriptionsRoute !== \"undefined\" && _1.ArticleInstanceSubscriptionsRoute) === \"function\" && _d || Object])\r\n], ArticleInstanceSubscriptionsClient);\r\nexports.ArticleInstanceSubscriptionsClient = ArticleInstanceSubscriptionsClient;\r\nvar _a, _b, _c, _d;\r\n\n\n\n//////////////////\n// WEBPACK FOOTER\n// ./src/modules/article/articleSubscriptions/InstanceSubscriptionsClient.ts\n// module id = 145\n// module chunks = 0","/* globals module */\r\n/**\r\n * @module articleSubscriptionsRoute\r\n * @description Baasic Article Subscriptions Route Definition provides Baasic route templates which can be expanded to Baasic REST URIs. Various services can use Baasic Article Subscriptions Route Definition to obtain needed routes while other routes will be obtained through HAL. By convention, all route services use the same function names as their corresponding services.\r\n*/\r\n\"use strict\";\r\nObject.defineProperty(exports, \"__esModule\", { value: true });\r\nvar tslib_1 = require(\"tslib\");\r\nvar inversify_1 = require(\"inversify\");\r\nvar common_1 = require(\"../../../common\");\r\n;\r\nvar contracts_1 = require(\"../../../core/contracts\");\r\nvar _1 = require(\"../\");\r\nvar ArticleInstanceSubscriptionsRoute = (function (_super) {\r\n    tslib_1.__extends(ArticleInstanceSubscriptionsRoute, _super);\r\n    function ArticleInstanceSubscriptionsRoute(articleSubscriptionsCommentReportedRoute, articleSubscriptionsArticleRoute, articleSubscriptionsCommentRequiresModerationRoute, appOptions) {\r\n        var _this = _super.call(this, appOptions) || this;\r\n        _this.articleSubscriptionsCommentReportedRoute = articleSubscriptionsCommentReportedRoute;\r\n        _this.articleSubscriptionsArticleRoute = articleSubscriptionsArticleRoute;\r\n        _this.articleSubscriptionsCommentRequiresModerationRoute = articleSubscriptionsCommentRequiresModerationRoute;\r\n        _this.appOptions = appOptions;\r\n        return _this;\r\n    }\r\n    Object.defineProperty(ArticleInstanceSubscriptionsRoute.prototype, \"commentReported\", {\r\n        get: function () {\r\n            return this.articleSubscriptionsCommentReportedRoute;\r\n        },\r\n        enumerable: true,\r\n        configurable: true\r\n    });\r\n    Object.defineProperty(ArticleInstanceSubscriptionsRoute.prototype, \"article\", {\r\n        get: function () {\r\n            return this.articleSubscriptionsArticleRoute;\r\n        },\r\n        enumerable: true,\r\n        configurable: true\r\n    });\r\n    Object.defineProperty(ArticleInstanceSubscriptionsRoute.prototype, \"commentRequiresModeration\", {\r\n        get: function () {\r\n            return this.articleSubscriptionsCommentRequiresModerationRoute;\r\n        },\r\n        enumerable: true,\r\n        configurable: true\r\n    });\r\n    return ArticleInstanceSubscriptionsRoute;\r\n}(common_1.BaseRoute));\r\nArticleInstanceSubscriptionsRoute = tslib_1.__decorate([\r\n    inversify_1.injectable(),\r\n    tslib_1.__param(0, inversify_1.inject(_1.TYPES.ArticleSubscriptionsCommentReportedRoute)),\r\n    tslib_1.__param(1, inversify_1.inject(_1.TYPES.ArticleSubscriptionsArticleRoute)),\r\n    tslib_1.__param(2, inversify_1.inject(_1.TYPES.ArticleSubscriptionsCommentRequiresModerationRoute)),\r\n    tslib_1.__param(3, inversify_1.inject(contracts_1.TYPES.IAppOptions)),\r\n    tslib_1.__metadata(\"design:paramtypes\", [typeof (_a = typeof _1.ArticleSubscriptionsCommentReportedRoute !== \"undefined\" && _1.ArticleSubscriptionsCommentReportedRoute) === \"function\" && _a || Object, typeof (_b = typeof _1.ArticleSubscriptionsArticleRoute !== \"undefined\" && _1.ArticleSubscriptionsArticleRoute) === \"function\" && _b || Object, typeof (_c = typeof _1.ArticleSubscriptionsCommentRequiresModerationRoute !== \"undefined\" && _1.ArticleSubscriptionsCommentRequiresModerationRoute) === \"function\" && _c || Object, typeof (_d = typeof contracts_1.IAppOptions !== \"undefined\" && contracts_1.IAppOptions) === \"function\" && _d || Object])\r\n], ArticleInstanceSubscriptionsRoute);\r\nexports.ArticleInstanceSubscriptionsRoute = ArticleInstanceSubscriptionsRoute;\r\nvar _a, _b, _c, _d;\r\n\n\n\n//////////////////\n// WEBPACK FOOTER\n// ./src/modules/article/articleSubscriptions/InstanceSubscriptionsRoute.ts\n// module id = 146\n// module chunks = 0","/* globals module */\r\n/**\r\n * @module articleSubscriptionsArticleClient\r\n * @description  Article Subscriptions Article Client provides an easy way to consume  Articles REST API end-points. In order to obtain needed routes `articleSubscriptionsArticleClient` uses `articleSubscriptionsArticleRoute`.\r\n */\r\n\"use strict\";\r\nObject.defineProperty(exports, \"__esModule\", { value: true });\r\nvar tslib_1 = require(\"tslib\");\r\nvar inversify_1 = require(\"inversify\");\r\n;\r\nvar httpApi_1 = require(\"../../../httpApi\");\r\nvar _1 = require(\"../\");\r\nvar ArticleSubscriptionsArticleClient = (function () {\r\n    function ArticleSubscriptionsArticleClient(articleSubscriptionsArticleRoute, apiClient) {\r\n        this.articleSubscriptionsArticleRoute = articleSubscriptionsArticleRoute;\r\n        this.apiClient = apiClient;\r\n    }\r\n    Object.defineProperty(ArticleSubscriptionsArticleClient.prototype, \"routeDefinition\", {\r\n        get: function () {\r\n            return this.articleSubscriptionsArticleRoute;\r\n        },\r\n        enumerable: true,\r\n        configurable: true\r\n    });\r\n    /**\r\n     * Returns a promise that is resolved once the subscribe action has been performed. This action subscribes an user to the specified article.\r\n     * @method\r\n     * @param article The article identifier.\r\n     * @param data The subscribe information.\r\n     * @returns A promise that is resolved once the subscribe action has been performed.\r\n     * @example articleSubscriptionsArticleClient.subscribe(article, user)\r\n                    .then(function (data) {\r\n                        // perform success action here\r\n                    },\r\n                     function (response, status, headers, config) {\r\n                         // perform error handling here\r\n                    });\r\n     **/\r\n    ArticleSubscriptionsArticleClient.prototype.subscribe = function (article, data) {\r\n        return this.apiClient.post(this.routeDefinition.subscribe(article, data), this.routeDefinition.subscribeParams(article, data));\r\n    };\r\n    /**\r\n     * Returns a promise that is resolved once the isSubscribed action has been performed. This action checks if a user is subscribed to the specified article.\r\n     * @method\r\n     * @param article The article identifier.\r\n     * @param data The subscriber identifier.\r\n     * @returns A promise that is resolved once the isSubscribed action has been performed.\r\n     * @example articleSubscriptionsArticleClient.subscribe(article, user)\r\n                    .then(function (data) {\r\n                        // perform success action here\r\n                    },\r\n                     function (response, status, headers, config) {\r\n                         // perform error handling here\r\n                    });\r\n     **/\r\n    ArticleSubscriptionsArticleClient.prototype.isSubscribed = function (article, data) {\r\n        return this.apiClient.get(this.articleSubscriptionsArticleRoute.isSubscribed(article, data));\r\n    };\r\n    /**\r\n     * Returns a promise that is resolved once the unSubscribe action has been performed. This action unsubscribes a user from the specified article.\r\n     * @method\r\n     * @param article The article identifier.\r\n     * @param data The unsubscribe information.\r\n     * @returns A promise that is resolved once the unSubscribe action has been performed.\r\n     * @example articleSubscriptionsArticleClient.subscribe(article, user)\r\n                    .then(function (data) {\r\n                        // perform success action here\r\n                    },\r\n                     function (response, status, headers, config) {\r\n                         // perform error handling here\r\n                    });\r\n     **/\r\n    ArticleSubscriptionsArticleClient.prototype.unSubscribe = function (article, data) {\r\n        return this.apiClient.delete(this.articleSubscriptionsArticleRoute.unSubscribe(article, data));\r\n    };\r\n    return ArticleSubscriptionsArticleClient;\r\n}());\r\nArticleSubscriptionsArticleClient = tslib_1.__decorate([\r\n    inversify_1.injectable(),\r\n    tslib_1.__param(0, inversify_1.inject(_1.TYPES.ArticleSubscriptionsArticleRoute)),\r\n    tslib_1.__param(1, inversify_1.inject(httpApi_1.httpTYPES.ApiClient)),\r\n    tslib_1.__metadata(\"design:paramtypes\", [typeof (_a = typeof _1.ArticleSubscriptionsArticleRoute !== \"undefined\" && _1.ArticleSubscriptionsArticleRoute) === \"function\" && _a || Object, typeof (_b = typeof httpApi_1.ApiClient !== \"undefined\" && httpApi_1.ApiClient) === \"function\" && _b || Object])\r\n], ArticleSubscriptionsArticleClient);\r\nexports.ArticleSubscriptionsArticleClient = ArticleSubscriptionsArticleClient;\r\nvar _a, _b;\r\n\n\n\n//////////////////\n// WEBPACK FOOTER\n// ./src/modules/article/articleSubscriptions/SubscriptionsArticleClient.ts\n// module id = 147\n// module chunks = 0","/* globals module */\r\n/**\r\n * @module articleSubscriptionsArticleRoute\r\n * @description Baasic Article Subscriptions Article Route Definition provides Baasic route templates which can be expanded to Baasic REST URIs. Various services can use Baasic Article Subscriptions Article Route Service to obtain needed routes while other routes will be obtained through HAL. By convention, all route services use the same function names as their corresponding services.\r\n*/\r\n\"use strict\";\r\nObject.defineProperty(exports, \"__esModule\", { value: true });\r\nvar tslib_1 = require(\"tslib\");\r\nvar inversify_1 = require(\"inversify\");\r\nvar common_1 = require(\"../../../common\");\r\n;\r\nvar contracts_1 = require(\"../../../core/contracts\");\r\nvar ArticleSubscriptionsArticleRoute = (function (_super) {\r\n    tslib_1.__extends(ArticleSubscriptionsArticleRoute, _super);\r\n    function ArticleSubscriptionsArticleRoute(appOptions) {\r\n        var _this = _super.call(this, appOptions) || this;\r\n        _this.appOptions = appOptions;\r\n        _this.subscribeRoute = 'articles/{articleId}/subscriptions';\r\n        _this.isSubscribedRoute = 'articles/{articleId}/subscriptions/{subscriberId}';\r\n        _this.unSubscribeRoute = 'articles/{articleId}/subscriptions';\r\n        return _this;\r\n    }\r\n    /**\r\n     * Parses article subscribe route which must be expanded with id of the article.\r\n     * @method\r\n     * @param article The article identifier.\r\n     * @param data The subscribe information.\r\n     * @example articleSubscriptionsArticleRoute.subscribe({id: '<article-id>'});\r\n     **/\r\n    ArticleSubscriptionsArticleRoute.prototype.subscribe = function (article, data) {\r\n        var params = this.utility.extend(article, data);\r\n        return _super.prototype.baseCreate.call(this, this.subscribeRoute, params);\r\n    };\r\n    /**\r\n     * Parses article isSubscribed route which must be expanded with subscriber Id and the id of the article.\r\n     * @method\r\n     * @param article The article identifier.\r\n     * @param data The subscriber identifier.\r\n     * @example articleRoute.subscriptions.article.isSubscribed.expand({id: '<article-id>', subscriberId: '<subscriber-id>' });\r\n     **/\r\n    ArticleSubscriptionsArticleRoute.prototype.isSubscribed = function (article, data) {\r\n        var params = this.utility.extend(article, data);\r\n        return _super.prototype.baseCreate.call(this, this.isSubscribedRoute, params);\r\n    };\r\n    /**\r\n     * Parses article unSubscribe route which must be expanded with the id of the article.\r\n     * @method\r\n     * @param article The article identifier.\r\n     * @param data The unsubscribe information.\r\n     * @example articleSubscriptionsArticleRoute.unSubscribe({id: '<article-id>'});\r\n     **/\r\n    ArticleSubscriptionsArticleRoute.prototype.unSubscribe = function (article, data) {\r\n        var params = this.utility.extend(article, data);\r\n        return _super.prototype.baseCreate.call(this, this.unSubscribeRoute, params);\r\n    };\r\n    ArticleSubscriptionsArticleRoute.prototype.subscribeParams = function (article, data) {\r\n        return this.utility.extend(article, data);\r\n    };\r\n    return ArticleSubscriptionsArticleRoute;\r\n}(common_1.BaseRoute));\r\nArticleSubscriptionsArticleRoute = tslib_1.__decorate([\r\n    inversify_1.injectable(),\r\n    tslib_1.__param(0, inversify_1.inject(contracts_1.TYPES.IAppOptions)),\r\n    tslib_1.__metadata(\"design:paramtypes\", [typeof (_a = typeof contracts_1.IAppOptions !== \"undefined\" && contracts_1.IAppOptions) === \"function\" && _a || Object])\r\n], ArticleSubscriptionsArticleRoute);\r\nexports.ArticleSubscriptionsArticleRoute = ArticleSubscriptionsArticleRoute;\r\nvar _a;\r\n\n\n\n//////////////////\n// WEBPACK FOOTER\n// ./src/modules/article/articleSubscriptions/SubscriptionsArticleRoute.ts\n// module id = 148\n// module chunks = 0","/* globals module */\r\n/**\r\n * @module articleSubscriptionsCommentReportedClient\r\n * @description  Article Subscriptions Comment Reported Client provides an easy way to consume  Articles REST API end-points. In order to obtain needed routes `articleSubscriptionsCommentReportedClient` uses `articleSubscriptionsCommentReportedRoute`.\r\n */\r\n\"use strict\";\r\nObject.defineProperty(exports, \"__esModule\", { value: true });\r\nvar tslib_1 = require(\"tslib\");\r\nvar inversify_1 = require(\"inversify\");\r\n;\r\nvar httpApi_1 = require(\"../../../httpApi\");\r\nvar _1 = require(\"../\");\r\nvar ArticleSubscriptionsCommentReportedClient = (function () {\r\n    function ArticleSubscriptionsCommentReportedClient(articleSubscriptionsCommentReportedRoute, apiClient) {\r\n        this.articleSubscriptionsCommentReportedRoute = articleSubscriptionsCommentReportedRoute;\r\n        this.apiClient = apiClient;\r\n    }\r\n    Object.defineProperty(ArticleSubscriptionsCommentReportedClient.prototype, \"routeDefinition\", {\r\n        get: function () {\r\n            return this.articleSubscriptionsCommentReportedRoute;\r\n        },\r\n        enumerable: true,\r\n        configurable: true\r\n    });\r\n    /**\r\n     * Subscribes user to article comment reported updates. Returns a promise that is resolved once the subscribe action has been performed.\r\n     * @method\r\n     * @param data The subscribe information.\r\n     * @returns A promise that is resolved once the subscribe action has been performed.\r\n     * @example articleSubscriptionsCommentReportedClient.subscribe(data)\r\n                    .then(function (data) {\r\n                        // perform success action here\r\n                    },\r\n                     function (response, status, headers, config) {\r\n                         // perform error handling here\r\n                    });\r\n     **/\r\n    ArticleSubscriptionsCommentReportedClient.prototype.subscribe = function (data) {\r\n        return this.apiClient.post(this.articleSubscriptionsCommentReportedRoute.subscribe(data), data);\r\n    };\r\n    /**\r\n     * Determines whether user is subscribed to article comment reported updates. Returns a promise that is resolved once the isSubscribed action has been performed.\r\n     * @method\r\n     * @param data The subscribe information.\r\n     * @returns A promise that is resolved once the isSubscribed action has been performed.\r\n     * @example articleSubscriptionsCommentReportedClient.isSubscribed(data)\r\n                    .then(function (data) {\r\n                        // perform success action here\r\n                    },\r\n                     function (response, status, headers, config) {\r\n                         // perform error handling here\r\n                    });\r\n     **/\r\n    ArticleSubscriptionsCommentReportedClient.prototype.isSubscribed = function (data) {\r\n        return this.apiClient.get(this.routeDefinition.isSubscribed(data));\r\n    };\r\n    /**\r\n     * Unsubscribe user from article comment reported updates. Returns a promise that is commentReported once the unSubscribe action has been performed.\r\n     * @method\r\n     * @param data The unsubscribe information.\r\n     * @returns A promise that is commentReported once the unSubscribe action has been performed.\r\n     * @example articleSubscriptionsCommentReportedClient.isSubscribed(data)\r\n                    .then(function (data) {\r\n                        // perform success action here\r\n                    },\r\n                     function (response, status, headers, config) {\r\n                         // perform error handling here\r\n                    });\r\n     **/\r\n    ArticleSubscriptionsCommentReportedClient.prototype.unSubscribe = function (data) {\r\n        return this.apiClient.delete(this.articleSubscriptionsCommentReportedRoute.unSubscribe(data), undefined, data);\r\n    };\r\n    return ArticleSubscriptionsCommentReportedClient;\r\n}());\r\nArticleSubscriptionsCommentReportedClient = tslib_1.__decorate([\r\n    inversify_1.injectable(),\r\n    tslib_1.__param(0, inversify_1.inject(_1.TYPES.ArticleSubscriptionsCommentReportedRoute)),\r\n    tslib_1.__param(1, inversify_1.inject(httpApi_1.httpTYPES.ApiClient)),\r\n    tslib_1.__metadata(\"design:paramtypes\", [typeof (_a = typeof _1.ArticleSubscriptionsCommentReportedRoute !== \"undefined\" && _1.ArticleSubscriptionsCommentReportedRoute) === \"function\" && _a || Object, typeof (_b = typeof httpApi_1.ApiClient !== \"undefined\" && httpApi_1.ApiClient) === \"function\" && _b || Object])\r\n], ArticleSubscriptionsCommentReportedClient);\r\nexports.ArticleSubscriptionsCommentReportedClient = ArticleSubscriptionsCommentReportedClient;\r\nvar _a, _b;\r\n\n\n\n//////////////////\n// WEBPACK FOOTER\n// ./src/modules/article/articleSubscriptions/SubscriptionsCommentReportedClient.ts\n// module id = 149\n// module chunks = 0","/* globals module */\r\n/**\r\n * @module articleSubscriptionsCommentReportedRoute\r\n * @description Baasic Article Subscriptions Comment Reported Route Definition provides Baasic route templates which can be expanded to Baasic REST URIs. Various services can use Baasic Article Subscriptions Comment Reported Route Definition to obtain needed routes while other routes will be obtained through HAL. By convention, all route services use the same function names as their corresponding services.\r\n*/\r\n\"use strict\";\r\nObject.defineProperty(exports, \"__esModule\", { value: true });\r\nvar tslib_1 = require(\"tslib\");\r\nvar inversify_1 = require(\"inversify\");\r\nvar common_1 = require(\"../../../common\");\r\n;\r\nvar contracts_1 = require(\"../../../core/contracts\");\r\nvar ArticleSubscriptionsCommentReportedRoute = (function (_super) {\r\n    tslib_1.__extends(ArticleSubscriptionsCommentReportedRoute, _super);\r\n    function ArticleSubscriptionsCommentReportedRoute(appOptions) {\r\n        var _this = _super.call(this, appOptions) || this;\r\n        _this.appOptions = appOptions;\r\n        _this.subscribeRoute = 'articles/subscriptions/comment-reported';\r\n        _this.isSubscribedRoute = 'articles/subscriptions/comment-reported/{subscriberId}';\r\n        _this.unSubscribeRoute = 'articles/subscriptions/comment-reported';\r\n        return _this;\r\n    }\r\n    /**\r\n     * Parses commentReported subscribe route which doesn't support any additional options.\r\n     * @method\r\n     * @param data The subscribe information.\r\n     * @example articleSubscriptionsCommentReportedRoute.subscribe(data);\r\n     **/\r\n    ArticleSubscriptionsCommentReportedRoute.prototype.subscribe = function (data) {\r\n        return _super.prototype.baseCreate.call(this, this.subscribeRoute, data);\r\n    };\r\n    /**\r\n     * Parses commentReported isSubscribed route which must be expanded with subscriber Id.\r\n     * @method\r\n     * @param data The subscribe information.\r\n     * @example articleSubscriptionsCommentReportedRoute.isSubscribed({subscriberId: '<subscriber-id>'});\r\n     **/\r\n    ArticleSubscriptionsCommentReportedRoute.prototype.isSubscribed = function (data) {\r\n        return _super.prototype.baseCreate.call(this, this.isSubscribedRoute, data);\r\n    };\r\n    /**\r\n     * Parses commentReported unSubscribe route which doesn't support any additional options.\r\n     * @method\r\n     * @param data The unsubscribe information.\r\n     * @example articleSubscriptionsCommentReportedRoute.unSubscribe(data);\r\n     **/\r\n    ArticleSubscriptionsCommentReportedRoute.prototype.unSubscribe = function (data) {\r\n        return _super.prototype.baseCreate.call(this, this.unSubscribeRoute, data);\r\n    };\r\n    return ArticleSubscriptionsCommentReportedRoute;\r\n}(common_1.BaseRoute));\r\nArticleSubscriptionsCommentReportedRoute = tslib_1.__decorate([\r\n    inversify_1.injectable(),\r\n    tslib_1.__param(0, inversify_1.inject(contracts_1.TYPES.IAppOptions)),\r\n    tslib_1.__metadata(\"design:paramtypes\", [typeof (_a = typeof contracts_1.IAppOptions !== \"undefined\" && contracts_1.IAppOptions) === \"function\" && _a || Object])\r\n], ArticleSubscriptionsCommentReportedRoute);\r\nexports.ArticleSubscriptionsCommentReportedRoute = ArticleSubscriptionsCommentReportedRoute;\r\nvar _a;\r\n\n\n\n//////////////////\n// WEBPACK FOOTER\n// ./src/modules/article/articleSubscriptions/SubscriptionsCommentReportedRoute.ts\n// module id = 150\n// module chunks = 0","/* globals module */\r\n/**\r\n * @module articleSubscriptionsCommentRequiresModerationClient\r\n * @description  Article Subscriptions Comment Requires Moderation Client provides an easy way to consume  Articles REST API end-points. In order to obtain needed routes `articleSubscriptionsCommentRequiresModerationClient` uses `articleSubscriptionsCommentRequiresModerationRoute`.\r\n */\r\n\"use strict\";\r\nObject.defineProperty(exports, \"__esModule\", { value: true });\r\nvar tslib_1 = require(\"tslib\");\r\nvar inversify_1 = require(\"inversify\");\r\n;\r\nvar httpApi_1 = require(\"../../../httpApi\");\r\nvar _1 = require(\"../\");\r\nvar ArticleSubscriptionsCommentRequiresModerationClient = (function () {\r\n    function ArticleSubscriptionsCommentRequiresModerationClient(articleSubscriptionsCommentRequiresModerationRoute, apiClient) {\r\n        this.articleSubscriptionsCommentRequiresModerationRoute = articleSubscriptionsCommentRequiresModerationRoute;\r\n        this.apiClient = apiClient;\r\n    }\r\n    Object.defineProperty(ArticleSubscriptionsCommentRequiresModerationClient.prototype, \"routeDefinition\", {\r\n        get: function () {\r\n            return this.articleSubscriptionsCommentRequiresModerationRoute;\r\n        },\r\n        enumerable: true,\r\n        configurable: true\r\n    });\r\n    /**\r\n     * Subscribes user to article comment requires moderation updates. Returns a promise that is resolved once the subscribe action has been performed.\r\n     * @method\r\n     * @param data The subscribe information.\r\n     * @returns A promise that is resolved once the subscribe action has been performed.\r\n     * @example articleCommentRequiresModerationClient.subscribe(data)\r\n                    .then(function (data) {\r\n                        // perform success action here\r\n                    },\r\n                     function (response, status, headers, config) {\r\n                         // perform error handling here\r\n                    });\r\n     **/\r\n    ArticleSubscriptionsCommentRequiresModerationClient.prototype.subscribe = function (data) {\r\n        return this.apiClient.post(this.articleSubscriptionsCommentRequiresModerationRoute.subscribe(data), data);\r\n    };\r\n    /**\r\n     * Determines whether user is subscribed to article comment requires moderation updates. Returns a promise that is resolved once the isSubscribed action has been performed.\r\n     * @method\r\n     * @param data The subscribe information.\r\n     * @returns A promise that is resolved once the isSubscribed action has been performed.\r\n     * @example articleCommentRequiresModerationClient.isSubscribed(data)\r\n                    .then(function (data) {\r\n                        // perform success action here\r\n                    },\r\n                     function (response, status, headers, config) {\r\n                         // perform error handling here\r\n                    });\r\n     **/\r\n    ArticleSubscriptionsCommentRequiresModerationClient.prototype.isSubscribed = function (data) {\r\n        return this.apiClient.get(this.routeDefinition.isSubscribed(data));\r\n    };\r\n    /**\r\n     * Unsubscribe user from article comment requires moderation updates. Returns a promise that is commentReported once the unSubscribe action has been performed.\r\n     * @method\r\n     * @param data The unsubscribe information.\r\n     * @returns A promise that is commentReported once the unSubscribe action has been performed.\r\n     * @example articleCommentRequiresModerationClient.unSubscribed(data)\r\n                    .then(function (data) {\r\n                        // perform success action here\r\n                    },\r\n                     function (response, status, headers, config) {\r\n                         // perform error handling here\r\n                    });\r\n     **/\r\n    ArticleSubscriptionsCommentRequiresModerationClient.prototype.unSubscribed = function (data) {\r\n        return this.apiClient.delete(this.routeDefinition.unSubscribe(data));\r\n    };\r\n    return ArticleSubscriptionsCommentRequiresModerationClient;\r\n}());\r\nArticleSubscriptionsCommentRequiresModerationClient = tslib_1.__decorate([\r\n    inversify_1.injectable(),\r\n    tslib_1.__param(0, inversify_1.inject(_1.TYPES.ArticleSubscriptionsCommentRequiresModerationRoute)),\r\n    tslib_1.__param(1, inversify_1.inject(httpApi_1.httpTYPES.ApiClient)),\r\n    tslib_1.__metadata(\"design:paramtypes\", [typeof (_a = typeof _1.ArticleSubscriptionsCommentRequiresModerationRoute !== \"undefined\" && _1.ArticleSubscriptionsCommentRequiresModerationRoute) === \"function\" && _a || Object, typeof (_b = typeof httpApi_1.ApiClient !== \"undefined\" && httpApi_1.ApiClient) === \"function\" && _b || Object])\r\n], ArticleSubscriptionsCommentRequiresModerationClient);\r\nexports.ArticleSubscriptionsCommentRequiresModerationClient = ArticleSubscriptionsCommentRequiresModerationClient;\r\nvar _a, _b;\r\n\n\n\n//////////////////\n// WEBPACK FOOTER\n// ./src/modules/article/articleSubscriptions/SubscriptionsCommentRequiresModerationClient.ts\n// module id = 151\n// module chunks = 0","/* globals module */\r\n/**\r\n * @module articleSubscriptionsCommentRequiresModerationRoute\r\n * @description Baasic Article Subscriptions Comment Requires Moderation Route Definition provides Baasic route templates which can be expanded to Baasic REST URIs. Various services can use Baasic Article Subscriptions Comment Requires Moderation Route Definition to obtain needed routes while other routes will be obtained through HAL. By convention, all route services use the same function names as their corresponding services.\r\n*/\r\n\"use strict\";\r\nObject.defineProperty(exports, \"__esModule\", { value: true });\r\nvar tslib_1 = require(\"tslib\");\r\nvar inversify_1 = require(\"inversify\");\r\nvar common_1 = require(\"../../../common\");\r\n;\r\nvar contracts_1 = require(\"../../../core/contracts\");\r\nvar ArticleSubscriptionsCommentRequiresModerationRoute = (function (_super) {\r\n    tslib_1.__extends(ArticleSubscriptionsCommentRequiresModerationRoute, _super);\r\n    function ArticleSubscriptionsCommentRequiresModerationRoute(appOptions) {\r\n        var _this = _super.call(this, appOptions) || this;\r\n        _this.appOptions = appOptions;\r\n        _this.subscribeRoute = 'articles/subscriptions/comment-requires-moderation';\r\n        _this.isSubscribedRoute = 'articles/subscriptions/comment-requires-moderation/{subscriberId}';\r\n        _this.unSubscribeRoute = 'articles/subscriptions/comment-requires-moderation';\r\n        return _this;\r\n    }\r\n    /**\r\n     * Parses commentRequiresModeration subscribe route which doesn't support any additional options.\r\n     * @method\r\n     * @param data The subscribe information.\r\n     * @example articleSubscriptionsCommentRequiresModerationRoute.subscribe(data);\r\n     **/\r\n    ArticleSubscriptionsCommentRequiresModerationRoute.prototype.subscribe = function (data) {\r\n        return _super.prototype.baseCreate.call(this, this.subscribeRoute, data);\r\n    };\r\n    /**\r\n     * Parses commentRequiresModeration isSubscribed route which must be expanded with subscriber Id.\r\n     * @method\r\n     * @param data The subscribe information.\r\n     * @example articleSubscriptionsCommentRequiresModerationRoute.isSubscribed({subscriberId: '<subscriber-id>'});\r\n     **/\r\n    ArticleSubscriptionsCommentRequiresModerationRoute.prototype.isSubscribed = function (data) {\r\n        return _super.prototype.baseCreate.call(this, this.isSubscribedRoute, data);\r\n    };\r\n    /**\r\n     * Parses commentRequiresModeration unSubscribe route which doesn't support any additional options.\r\n     * @method\r\n     * @param data The unsubscribe information.\r\n     * @example articleSubscriptionsCommentRequiresModerationRoute.unSubscribe(data)\r\n     **/\r\n    ArticleSubscriptionsCommentRequiresModerationRoute.prototype.unSubscribe = function (data) {\r\n        return _super.prototype.baseCreate.call(this, this.unSubscribeRoute, data);\r\n    };\r\n    return ArticleSubscriptionsCommentRequiresModerationRoute;\r\n}(common_1.BaseRoute));\r\nArticleSubscriptionsCommentRequiresModerationRoute = tslib_1.__decorate([\r\n    inversify_1.injectable(),\r\n    tslib_1.__param(0, inversify_1.inject(contracts_1.TYPES.IAppOptions)),\r\n    tslib_1.__metadata(\"design:paramtypes\", [typeof (_a = typeof contracts_1.IAppOptions !== \"undefined\" && contracts_1.IAppOptions) === \"function\" && _a || Object])\r\n], ArticleSubscriptionsCommentRequiresModerationRoute);\r\nexports.ArticleSubscriptionsCommentRequiresModerationRoute = ArticleSubscriptionsCommentRequiresModerationRoute;\r\nvar _a;\r\n\n\n\n//////////////////\n// WEBPACK FOOTER\n// ./src/modules/article/articleSubscriptions/SubscriptionsCommentRequiresModerationRoute.ts\n// module id = 152\n// module chunks = 0","\"use strict\";\r\nfunction __export(m) {\r\n    for (var p in m) if (!exports.hasOwnProperty(p)) exports[p] = m[p];\r\n}\r\nObject.defineProperty(exports, \"__esModule\", { value: true });\r\n__export(require(\"./SubscriptionsArticleRoute\"));\r\n__export(require(\"./SubscriptionsCommentReportedRoute\"));\r\n__export(require(\"./SubscriptionsCommentRequiresModerationRoute\"));\r\n__export(require(\"./InstanceSubscriptionsRoute\"));\r\n__export(require(\"./SubscriptionsArticleClient\"));\r\n__export(require(\"./SubscriptionsCommentReportedClient\"));\r\n__export(require(\"./SubscriptionsCommentRequiresModerationClient\"));\r\n__export(require(\"./InstanceSubscriptionsClient\"));\r\n\n\n\n//////////////////\n// WEBPACK FOOTER\n// ./src/modules/article/articleSubscriptions/index.ts\n// module id = 153\n// module chunks = 0","/* globals module */\r\n/**\r\n * @module baasicArticleTagsDefinition\r\n * @description  Article Tags Definition provides an easy way to consume  Article Tags REST API end-points. `articleTagsDefinition` functions enable performing standard CRUD operations directly on article tag resources, whereas the `articleClient` functions allow management between article and article tag. In order to obtain needed routes `articleTagsDefinition` uses `articleTagsRoute`.\r\n*/\r\n\"use strict\";\r\nObject.defineProperty(exports, \"__esModule\", { value: true });\r\nvar tslib_1 = require(\"tslib\");\r\nvar inversify_1 = require(\"inversify\");\r\n;\r\nvar httpApi_1 = require(\"../../httpApi\");\r\nvar _1 = require(\"./\");\r\nvar ArticleTagsClient = (function () {\r\n    function ArticleTagsClient(articleTagsRoute, articleTagsSubscriptionsClient, apiClient) {\r\n        this.articleTagsRoute = articleTagsRoute;\r\n        this.articleTagsSubscriptionsClient = articleTagsSubscriptionsClient;\r\n        this.apiClient = apiClient;\r\n    }\r\n    Object.defineProperty(ArticleTagsClient.prototype, \"routeDefinition\", {\r\n        get: function () {\r\n            return this.articleTagsRoute;\r\n        },\r\n        enumerable: true,\r\n        configurable: true\r\n    });\r\n    Object.defineProperty(ArticleTagsClient.prototype, \"subscriptions\", {\r\n        get: function () {\r\n            return this.articleTagsSubscriptionsClient;\r\n        },\r\n        enumerable: true,\r\n        configurable: true\r\n    });\r\n    /**\r\n     * Returns a promise that is resolved once the find action has been performed. Success response returns a list of article tag resources matching the given criteria.\r\n     * @method\r\n     * @param options Query resource options object.\r\n     * @returns A promise that is resolved once the find action has been performed.\r\n     * @example articleTagsClient.find({\r\n                    pageNumber : 1,\r\n                    pageSize : 10,\r\n                    orderBy : '<field>',\r\n                    orderDirection : '<asc|desc>',\r\n                    search : '<search-phrase>'\r\n                })\r\n                .then(function (collection) {\r\n                    // perform success action here\r\n                },\r\n                 function (response, status, headers, config) {\r\n                    // perform error handling here\r\n                });\r\n     **/\r\n    ArticleTagsClient.prototype.find = function (options) {\r\n        return this.apiClient.get(this.routeDefinition.find(options));\r\n    };\r\n    /**\r\n     * Returns a promise that is resolved once the get action has been performed. Success response returns the specified article tag resource.\r\n     * @method\r\n     * @param id Article tag id or slug that uniquely identifies article tag resource that needs to be retrieved.\r\n     * @param options Options object that contains embed data.\r\n     * @returns A promise that is resolved once the get action has been performed.\r\n     * @example articleTagsClient.get('<articleTag-id>')\r\n                   .then(function (data) {\r\n                       // perform success action here\r\n                   },\r\n                    function (response, status, headers, config) {\r\n                       // perform error handling here\r\n                   });\r\n    **/\r\n    ArticleTagsClient.prototype.get = function (id, options) {\r\n        return this.apiClient.get(this.articleTagsRoute.get(id, options));\r\n    };\r\n    /**\r\n     * Returns a promise that is resolved once the update article tag action has been performed; this action updates a tag. This route uses HAL enabled objects to obtain routes and therefore it doesn't apply `articleTagsRoute` route template. Here is an example of how a route can be obtained from HAL enabled objects:\r\n     * ```\r\n     * let params = modelMapper.removeParams(articleTag);\r\n     * let uri = params['model'].links('put').href;\r\n     * ```\r\n     * @method\r\n     * @param data An article tag object used to update specified article tag resource.\r\n     * @returns A promise that is resolved once the update article tag action has been performed.\r\n     * @example // articleTag is a resource previously fetched using get action.\r\n                    articleTag.tag = '<new-tag>';\r\n                    articleTagsClient.update(articleTag)\r\n                        .then(function (data) {\r\n                            // perform success action here\r\n                        },\r\n                         function (response, status, headers, config) {\r\n                            // perform error handling here\r\n                        });\r\n     **/\r\n    ArticleTagsClient.prototype.update = function (data) {\r\n        return this.apiClient.put(this.routeDefinition.update(data), this.routeDefinition.updateParams(data));\r\n    };\r\n    /**\r\n     * Returns a promise that is resolved once the remove article tag action has been performed. If the action is successfully completed, the article tag resource will be permanently removed from the system. This route uses HAL enabled objects to obtain routes and therefore it doesn't apply `articleTagsRoute` route template. Here is an example of how a route can be obtained from HAL enabled objects:\r\n     * ```\r\n     * let params = modelMapper.removeParams(articleTag);\r\n     * let uri = params['model'].links('delete').href;\r\n     * ```\r\n     * @method\r\n     * @param data An article tag object used to delete specified article tag resource.\r\n     * @returns A promise that is resolved once the remove article tag action has been performed.\r\n     * @example // articleTag is a resource previously fetched using get action.\r\n                    articleTagsClient.remove(articleTag)\r\n                        .then(function (data) {\r\n                            // perform success action here\r\n                        },\r\n                         function (response, status, headers, config) {\r\n                            // perform error handling here\r\n                        });\r\n     **/\r\n    ArticleTagsClient.prototype.remove = function (data) {\r\n        return this.apiClient.delete(this.routeDefinition.delete(data));\r\n    };\r\n    return ArticleTagsClient;\r\n}());\r\nArticleTagsClient = tslib_1.__decorate([\r\n    inversify_1.injectable(),\r\n    tslib_1.__param(0, inversify_1.inject(_1.TYPES.ArticleTagsRoute)),\r\n    tslib_1.__param(1, inversify_1.inject(_1.TYPES.ArticleTagsSubscriptionsClient)),\r\n    tslib_1.__param(2, inversify_1.inject(httpApi_1.httpTYPES.ApiClient)),\r\n    tslib_1.__metadata(\"design:paramtypes\", [typeof (_a = typeof _1.ArticleTagsRoute !== \"undefined\" && _1.ArticleTagsRoute) === \"function\" && _a || Object, typeof (_b = typeof _1.ArticleTagsSubscriptionsClient !== \"undefined\" && _1.ArticleTagsSubscriptionsClient) === \"function\" && _b || Object, typeof (_c = typeof httpApi_1.ApiClient !== \"undefined\" && httpApi_1.ApiClient) === \"function\" && _c || Object])\r\n], ArticleTagsClient);\r\nexports.ArticleTagsClient = ArticleTagsClient;\r\nvar _a, _b, _c;\r\n/**\r\n * @copyright (c) 2017 Mono Ltd\r\n * @license MIT\r\n * @author Mono Ltd\r\n * @overview\r\n ***Notes:**\r\n - Refer to the [Baasic REST API](http://dev.baasic.com/api/reference/home) for detailed information about available Baasic REST API end-points.\r\n - All end-point objects are transformed by the associated route service.\r\n*/ \r\n\n\n\n//////////////////\n// WEBPACK FOOTER\n// ./src/modules/article/articleTagsClient.ts\n// module id = 154\n// module chunks = 0","/* globals module */\r\n/**\r\n * @module articleTagsRoute\r\n * @description Baasic Article Tags Route Definition provides Baasic route templates which can be expanded to Baasic REST URIs. Various services can use Baasic Article Tags Route Service to obtain needed routes while other routes will be obtained through HAL. By convention, all route services  use the same function names as their corresponding services.\r\n*/\r\n\"use strict\";\r\nObject.defineProperty(exports, \"__esModule\", { value: true });\r\nvar tslib_1 = require(\"tslib\");\r\nvar inversify_1 = require(\"inversify\");\r\nvar common_1 = require(\"../../common\");\r\n;\r\nvar contracts_1 = require(\"../../core/contracts\");\r\nvar _1 = require(\"./\");\r\nvar ArticleTagsRoute = (function (_super) {\r\n    tslib_1.__extends(ArticleTagsRoute, _super);\r\n    function ArticleTagsRoute(articleTagsSubscriptionsRoute, appOptions) {\r\n        var _this = _super.call(this, appOptions) || this;\r\n        _this.articleTagsSubscriptionsRoute = articleTagsSubscriptionsRoute;\r\n        _this.appOptions = appOptions;\r\n        _this.findRoute = 'article-tags/{?searchQuery,page,rpp,sort,embed,fields}';\r\n        _this.getRoute = 'article-tags/{id}/{?embed,fields}';\r\n        _this.updateRoute = 'article-tags/{id}';\r\n        _this.deleteRoute = 'article-tags/{id}';\r\n        return _this;\r\n    }\r\n    Object.defineProperty(ArticleTagsRoute.prototype, \"subscriptions\", {\r\n        get: function () {\r\n            return this.articleTagsSubscriptionsRoute;\r\n        },\r\n        enumerable: true,\r\n        configurable: true\r\n    });\r\n    /**\r\n     * Parses find article tags route which can be expanded with additional options. Supported items are:\r\n     * - `searchQuery` - A string value used to identify article tags using the phrase search; multiple tag keywords must be comma separated.\r\n     * - `page` - A value used to set the page number, i.e. to retrieve certain article tag subset from the storage.\r\n     * - `rpp` - A value used to limit the size of result set per page.\r\n     * - `sort` - A string used to set the article tag property to sort the result collection by.\r\n     * - `embed` - Comma separated list of resources to be contained within the current representation.\r\n     * @method\r\n     * @param options Query resource options object.\r\n     * @example articleTagsRoute.find().expand({searchQuery: '<search-phrase>'});\r\n     **/\r\n    ArticleTagsRoute.prototype.find = function (options) {\r\n        return _super.prototype.baseFind.call(this, this.findRoute, options);\r\n    };\r\n    /**\r\n     * Parses get article tag route which must be expanded with the Id of the previously created article tag resource in the system. Additional expand supported items are:\r\n     * - `embed` - Comma separated list of resources to be contained within the current representation.\r\n     * @method\r\n     * @param id Article tag id or slug that uniquely identifies article tag resource that needs to be retrieved.\r\n     * @param options Options object that contains embed data.\r\n     * @example articleTagsRoute.get({id: '<articleTag-id>'});\r\n     **/\r\n    ArticleTagsRoute.prototype.get = function (id, options) {\r\n        return _super.prototype.baseGet.call(this, this.getRoute, id, options);\r\n    };\r\n    /**\r\n     * Parses get article tag route which must be expanded with the Id of the previously created article tag resource in the system. Additional expand supported items are:\r\n     * - `embed` - Comma separated list of resources to be contained within the current representation.\r\n     * @method\r\n     * @param data An article tag object used to update specified article tag resource.\r\n     * @example articleTagsRoute.update({id: '<articleTag-id>'});\r\n     **/\r\n    ArticleTagsRoute.prototype.update = function (data) {\r\n        return _super.prototype.baseUpdate.call(this, this.updateRoute, data);\r\n    };\r\n    /**\r\n     * Parses get article tag route which must be expanded with the Id of the previously created article tag resource in the system. Additional expand supported items are:\r\n     * - `embed` - Comma separated list of resources to be contained within the current representation.\r\n     * @method\r\n     * @param data An article tag object used to delete specified article tag resource.\r\n     * @example articleTagsRoute.delete({id: '<articleTag-id>'});\r\n     **/\r\n    ArticleTagsRoute.prototype.delete = function (data) {\r\n        return _super.prototype.baseDelete.call(this, this.deleteRoute, data);\r\n    };\r\n    return ArticleTagsRoute;\r\n}(common_1.BaseRoute));\r\nArticleTagsRoute = tslib_1.__decorate([\r\n    inversify_1.injectable(),\r\n    tslib_1.__param(0, inversify_1.inject(_1.TYPES.ArticleTagsSubscriptionsRoute)),\r\n    tslib_1.__param(1, inversify_1.inject(contracts_1.TYPES.IAppOptions)),\r\n    tslib_1.__metadata(\"design:paramtypes\", [typeof (_a = typeof _1.ArticleTagsSubscriptionsRoute !== \"undefined\" && _1.ArticleTagsSubscriptionsRoute) === \"function\" && _a || Object, typeof (_b = typeof contracts_1.IAppOptions !== \"undefined\" && contracts_1.IAppOptions) === \"function\" && _b || Object])\r\n], ArticleTagsRoute);\r\nexports.ArticleTagsRoute = ArticleTagsRoute;\r\nvar _a, _b;\r\n/**\r\n * @copyright (c) 2017 Mono Ltd\r\n * @license MIT\r\n * @author Mono Ltd\r\n * @overview\r\n ***Notes:**\r\n - Refer to the [Baasic REST API](http://dev.baasic.com/api/reference/home) for detailed information about available Baasic REST API end-points.  - [URI Template](https://github.com/Baasic/uritemplate-js) syntax enables expanding the Baasic route templates to Baasic REST URIs providing it with an object that contains URI parameters.\r\n- All end-point objects are transformed by the associated route service.\r\n*/ \r\n\n\n\n//////////////////\n// WEBPACK FOOTER\n// ./src/modules/article/articleTagsRoute.ts\n// module id = 155\n// module chunks = 0","/* globals module */\r\n/**\r\n * @module baasicArticleTagsSubscriptionsDefinition\r\n * @description  Article Tags Subscriptions Definition provides an easy way to consume  Article Tags REST API end-points. `articleTagsDefinition` functions enable performing standard CRUD operations directly on article tag resources, whereas the `articleClient` functions allow management between article and article tag. In order to obtain needed routes `articleTagsDefinition` uses `articleTagsRoute`.\r\n*/\r\n\"use strict\";\r\nObject.defineProperty(exports, \"__esModule\", { value: true });\r\nvar tslib_1 = require(\"tslib\");\r\nvar inversify_1 = require(\"inversify\");\r\nvar httpApi_1 = require(\"../../httpApi\");\r\nvar _1 = require(\"./\");\r\nvar ArticleTagsSubscriptionsClient = (function () {\r\n    function ArticleTagsSubscriptionsClient(articleTagsSubscriptionsRoute, apiClient) {\r\n        this.articleTagsSubscriptionsRoute = articleTagsSubscriptionsRoute;\r\n        this.apiClient = apiClient;\r\n    }\r\n    Object.defineProperty(ArticleTagsSubscriptionsClient.prototype, \"routeDefinition\", {\r\n        get: function () {\r\n            return this.articleTagsSubscriptionsRoute;\r\n        },\r\n        enumerable: true,\r\n        configurable: true\r\n    });\r\n    /**\r\n     * Returns a promise that is resolved once the subscribe action has been performed. This action subscribes an user to the specified tag.\r\n     * @method\r\n     * @param tag article tag object.\r\n     * @param data The subscribe information.\r\n     * @returns A promise that is resolved once the subscribe action has been performed.\r\n     * @example articleTagsSubscriptionsClient.subscribe(tag, user)\r\n                    .then(function (data) {\r\n                        // perform success action here\r\n                    },\r\n                     function (response, status, headers, config) {\r\n                        // perform error handling here\r\n                    });\r\n     **/\r\n    ArticleTagsSubscriptionsClient.prototype.subscribe = function (tag, data) {\r\n        return this.apiClient.post(this.routeDefinition.subscribe(tag, data), this.routeDefinition.subscribeParams(tag, data));\r\n    };\r\n    /**\r\n     * Returns a promise that is resolved once the isSubscribed action has been performed. This action checks if a user is subscribed to the specified tag.\r\n     * @method\r\n     * @param tag Article tag object.\r\n     * @param data The subscriber identifier.\r\n     * @returns A promise that is resolved once the isSubscribed action has been performed.\r\n     * @example articleTagsSubscriptionsClient.isSubscribed(tag, user)\r\n                    .then(function (data) {\r\n                        // perform success action here\r\n                    },\r\n                     function (response, status, headers, config) {\r\n                        // perform error handling here\r\n                    });\r\n     **/\r\n    ArticleTagsSubscriptionsClient.prototype.isSubscribed = function (tag, data) {\r\n        return this.apiClient.get(this.articleTagsSubscriptionsRoute.isSubscribed(tag, data));\r\n    };\r\n    /**\r\n     * Returns a promise that is resolved once the unSubscribe action has been performed. This action unsubscribes a user from the specified tag.\r\n     * @method\r\n     * @param tag Article tag object.\r\n     * @param data The unsubscribe information.\r\n     * @returns A promise that is resolved once the unSubscribe action has been performed.\r\n     * @example articleTagsSubscriptionsClient.unSubscribe(tag, user)\r\n                   .then(function (data) {\r\n                       // perform success action here\r\n                   },\r\n                    function (response, status, headers, config) {\r\n                       // perform error handling here\r\n                   });\r\n    **/\r\n    ArticleTagsSubscriptionsClient.prototype.unSubscribe = function (tag, data) {\r\n        return this.apiClient.delete(this.routeDefinition.unSubscribe(tag, data), this.routeDefinition.subscribeParams(tag, data));\r\n    };\r\n    return ArticleTagsSubscriptionsClient;\r\n}());\r\nArticleTagsSubscriptionsClient = tslib_1.__decorate([\r\n    inversify_1.injectable(),\r\n    tslib_1.__param(0, inversify_1.inject(_1.TYPES.ArticleTagsSubscriptionsRoute)),\r\n    tslib_1.__param(1, inversify_1.inject(httpApi_1.httpTYPES.ApiClient)),\r\n    tslib_1.__metadata(\"design:paramtypes\", [typeof (_a = typeof _1.ArticleTagsSubscriptionsRoute !== \"undefined\" && _1.ArticleTagsSubscriptionsRoute) === \"function\" && _a || Object, typeof (_b = typeof httpApi_1.ApiClient !== \"undefined\" && httpApi_1.ApiClient) === \"function\" && _b || Object])\r\n], ArticleTagsSubscriptionsClient);\r\nexports.ArticleTagsSubscriptionsClient = ArticleTagsSubscriptionsClient;\r\nvar _a, _b;\r\n/**\r\n * @copyright (c) 2017 Mono Ltd\r\n * @license MIT\r\n * @author Mono Ltd\r\n * @overview\r\n ***Notes:**\r\n - Refer to the [Baasic REST API](http://dev.baasic.com/api/reference/home) for detailed information about available Baasic REST API end-points.\r\n - All end-point objects are transformed by the associated route service.\r\n*/\r\n\n\n\n//////////////////\n// WEBPACK FOOTER\n// ./src/modules/article/articleTagsSubscriptionsClient.ts\n// module id = 156\n// module chunks = 0","/* globals module */\r\n/**\r\n * @module articleTagsSubscriptionsRoute\r\n * @description Baasic Article Tags Subscriptions Route Definition provides Baasic route templates which can be expanded to Baasic REST URIs. Various services can use Baasic Article Tags Route Service to obtain needed routes while other routes will be obtained through HAL. By convention, all route services  use the same function names as their corresponding services.\r\n*/\r\n\"use strict\";\r\nObject.defineProperty(exports, \"__esModule\", { value: true });\r\nvar tslib_1 = require(\"tslib\");\r\nvar inversify_1 = require(\"inversify\");\r\nvar common_1 = require(\"../../common\");\r\n;\r\nvar contracts_1 = require(\"../../core/contracts\");\r\nvar ArticleTagsSubscriptionsRoute = (function (_super) {\r\n    tslib_1.__extends(ArticleTagsSubscriptionsRoute, _super);\r\n    function ArticleTagsSubscriptionsRoute(appOptions) {\r\n        var _this = _super.call(this, appOptions) || this;\r\n        _this.appOptions = appOptions;\r\n        _this.subscribeRoute = 'article-tags/{id}/subscriptions';\r\n        _this.isSubscribedRoute = 'article-tags/{id}/subscriptions/{subscriberId}';\r\n        _this.unSubscribeRoute = 'article-tags/{id}/subscriptions';\r\n        return _this;\r\n    }\r\n    /**\r\n     * Parses subscribe route which must be expanded with id of the tag.\r\n     * @method\r\n     * @param tag article tag object.\r\n     * @param data The subscribe information.\r\n     * @example articleTagsSubscriptionsRoute.subscribe( {id: '<tag-id>'} );\r\n     **/\r\n    ArticleTagsSubscriptionsRoute.prototype.subscribe = function (tag, data) {\r\n        var params = this.utility.extend(tag, data);\r\n        return _super.prototype.baseCreate.call(this, this.subscribeRoute, params);\r\n    };\r\n    /**\r\n     * Parses isSubscribed route which must be expanded with subscriber id and the id of the tag.\r\n     * @method\r\n     * @param tag Article tag object.\r\n     * @param data The subscriber identifier.\r\n     * @example articleSubscriptionsRoute.isSubscribed({ id: '<tag-id>', subscriberId: '<subscriber-id>' });\r\n     **/\r\n    ArticleTagsSubscriptionsRoute.prototype.isSubscribed = function (tag, data) {\r\n        var params = this.utility.extend(tag, data);\r\n        return _super.prototype.baseCreate.call(this, this.isSubscribedRoute, params);\r\n    };\r\n    /**\r\n     * Parses unSubscribe route which must be expanded with the id of the article.\r\n     * @method\r\n     * @param tag Article tag object.\r\n     * @param data The unsubscribe information.\r\n     * @example articleUnSubscribeRoute.unSubscribe({id: '<tag-id>'});\r\n     **/\r\n    ArticleTagsSubscriptionsRoute.prototype.unSubscribe = function (tag, data) {\r\n        var params = this.utility.extend(tag, data);\r\n        return _super.prototype.baseCreate.call(this, this.unSubscribeRoute, params);\r\n    };\r\n    ArticleTagsSubscriptionsRoute.prototype.subscribeParams = function (tag, data) {\r\n        return this.utility.extend(tag, data);\r\n    };\r\n    return ArticleTagsSubscriptionsRoute;\r\n}(common_1.BaseRoute));\r\nArticleTagsSubscriptionsRoute = tslib_1.__decorate([\r\n    inversify_1.injectable(),\r\n    tslib_1.__param(0, inversify_1.inject(contracts_1.TYPES.IAppOptions)),\r\n    tslib_1.__metadata(\"design:paramtypes\", [typeof (_a = typeof contracts_1.IAppOptions !== \"undefined\" && contracts_1.IAppOptions) === \"function\" && _a || Object])\r\n], ArticleTagsSubscriptionsRoute);\r\nexports.ArticleTagsSubscriptionsRoute = ArticleTagsSubscriptionsRoute;\r\nvar _a;\r\n/**\r\n * @copyright (c) 2017 Mono Ltd\r\n * @license MIT\r\n * @author Mono Ltd\r\n * @overview\r\n ***Notes:**\r\n - Refer to the [Baasic REST API](http://dev.baasic.com/api/reference/home) for detailed information about available Baasic REST API end-points.  - [URI Template](https://github.com/Baasic/uritemplate-js) syntax enables expanding the Baasic route templates to Baasic REST URIs providing it with an object that contains URI parameters.\r\n- All end-point objects are transformed by the associated route service.\r\n*/ \r\n\n\n\n//////////////////\n// WEBPACK FOOTER\n// ./src/modules/article/articleTagsSubscriptionsRoute.ts\n// module id = 157\n// module chunks = 0","/* globals module */\r\n/**\r\n * @module baasicArticleInstanceTagsDefinition\r\n * @description  Article Instance Tags Definition provides an easy way to consume  Article Tags REST API end-points. `articleInstanceTagsRouteClient` functions enable performing standard CRUD operations directly on article tag resources, whereas the `articleClient` functions allow management between article and article tag. In order to obtain needed routes `articleInstanceTagsClient` uses `articleInstanceTagsRoute`.\r\n*/\r\n\"use strict\";\r\nObject.defineProperty(exports, \"__esModule\", { value: true });\r\nvar tslib_1 = require(\"tslib\");\r\nvar inversify_1 = require(\"inversify\");\r\n;\r\nvar httpApi_1 = require(\"../../../httpApi\");\r\nvar _1 = require(\"../\");\r\nvar ArticleInstanceTagsClient = (function () {\r\n    function ArticleInstanceTagsClient(articleInstanceTagsRoute, apiClient) {\r\n        this.articleInstanceTagsRoute = articleInstanceTagsRoute;\r\n        this.apiClient = apiClient;\r\n    }\r\n    Object.defineProperty(ArticleInstanceTagsClient.prototype, \"routeDefinition\", {\r\n        get: function () {\r\n            return this.articleInstanceTagsRoute;\r\n        },\r\n        enumerable: true,\r\n        configurable: true\r\n    });\r\n    /**\r\n     * Returns a promise that is resolved once the find action has been performed. Success response returns a list of article tag resources matching the given criteria.\r\n     * @method\r\n     * @param articleId Article slug or id which uniquely identifies article whose tag resources need to be retrieved.\r\n     * @param options Query resource options object.\r\n     * @returns A promise that is resolved once the find action has been performed.\r\n     * @example articleInstanceTagsClient.find({\r\n                    pageNumber : 1,\r\n                    pageSize : 10,\r\n                    orderBy : '<field>',\r\n                    orderDirection : '<asc|desc>',\r\n                    search : '<search-phrase>'\r\n                })\r\n                .then(function (collection) {\r\n                    // perform success action here\r\n                },\r\n                 function (response, status, headers, config) {\r\n                    // perform error handling here\r\n                });\r\n     **/\r\n    ArticleInstanceTagsClient.prototype.find = function (articleId, options) {\r\n        return this.apiClient.get(this.articleInstanceTagsRoute.find(articleId, options));\r\n    };\r\n    /**\r\n     * Returns a promise that is resolved once the get action has been performed. Success response returns the specified article tag resource.\r\n     * @method\r\n     * @param articleId Article slug or id which uniquely identifies article whose tag resource needs to be retrieved.\r\n     * @param id A slug or id which uniquely identifies article tag resource that needs to be retrieved.\r\n     * @param options Options object that contains embed data.\r\n     * @returns A promise that is resolved once the get action has been performed.\r\n     * @example articleInstanceTagsClient.get('<articleTag-id>')\r\n                   .then(function (data) {\r\n                       // perform success action here\r\n                   },\r\n                    function (response, status, headers, config) {\r\n                       // perform error handling here\r\n                   });\r\n    **/\r\n    ArticleInstanceTagsClient.prototype.get = function (articleId, id, options) {\r\n        return this.apiClient.get(this.articleInstanceTagsRoute.get(articleId, id, options));\r\n    };\r\n    /**\r\n     * Returns a promise that is resolved once the create article tag action has been performed; this action creates a new tag for an article.\r\n     * @method\r\n     * @param data An article tag value that needs to be inserted as new article tag resource into the system.\r\n     * @returns A promise that is resolved once the create article tag action has been performed.\r\n     * @example articleInstanceTagsClient.create({\r\n                    articleId : '<article-id>',\r\n                    tag : {\r\n                        slug : '<slug>',\r\n                        sortOrder : 1,\r\n                        tag : '<tag>'\r\n                    }\r\n                })\r\n                .then(function (data) {\r\n                    // perform success action here\r\n                },\r\n                 function (response, status, headers, config) {\r\n                     // perform error handling here\r\n                });\r\n     **/\r\n    ArticleInstanceTagsClient.prototype.create = function (data) {\r\n        return this.apiClient.post(this.routeDefinition.create(data), this.routeDefinition.createParams(data));\r\n    };\r\n    /**\r\n     * Returns a promise that is resolved once the remove article tag action has been performed. If the action is successfully completed, the article tag resource will be permanently removed from the system. This route uses HAL enabled objects to obtain routes and therefore it doesn't apply `articleTagsRoute` route template. Here is an example of how a route can be obtained from HAL enabled objects:\r\n     * ```\r\n     * let params = modelMapper.removeParams(articleTag);\r\n     * let uri = params['model'].links('delete').href;\r\n     * ```\r\n     * @method\r\n     * @param data Article Tag object that needs to be removed from the system.\r\n     * @returns A promise that is resolved once the remove article tag action has been performed.\r\n     * @example // articleTag is a resource previously fetched using get action.\r\n                    articleInstanceTagsClient.remove(articleTag)\r\n                        .then(function (data) {\r\n                            // perform success action here\r\n                        },\r\n                         function (response, status, headers, config) {\r\n                            // perform error handling here\r\n                        });\r\n     **/\r\n    ArticleInstanceTagsClient.prototype.remove = function (data) {\r\n        return this.apiClient.delete(this.routeDefinition.delete(data));\r\n    };\r\n    /**\r\n     * Returns a promise that is resolved once the removeAll article tag action has been performed. This action will remove all tags from an article if successfully completed. This route uses HAL enabled objects to obtain routes and therefore it doesn't apply `baasicArticleRouteService` route template. Here is an example of how a route can be obtained from HAL enabled objects:\r\n     * ```\r\n     * let params = modelMapper.removeParams(article);\r\n     * let uri = params['model'].links('delete-tags-by-article').href;\r\n     * ```\r\n     * @method\r\n     * @param data Article object whoose tags needs to be removed from the system.\r\n     * @returns A promise that is resolved once the removeAll article tag action has been performed.\r\n     * @example // article is a resource previously fetched using get action.\r\n                    articleInstanceTagsClient.removeAll(article)\r\n                        .then(function (data) {\r\n                            // perform success action here\r\n                        },\r\n                         function (response, status, headers, config) {\r\n                             // perform error handling here\r\n                        });\r\n     **/\r\n    ArticleInstanceTagsClient.prototype.removeAll = function (data) {\r\n        return this.apiClient.delete(this.routeDefinition.deleteAll(data));\r\n    };\r\n    return ArticleInstanceTagsClient;\r\n}());\r\nArticleInstanceTagsClient = tslib_1.__decorate([\r\n    inversify_1.injectable(),\r\n    tslib_1.__param(0, inversify_1.inject(_1.TYPES.ArticleInstanceTagsRoute)),\r\n    tslib_1.__param(1, inversify_1.inject(httpApi_1.httpTYPES.ApiClient)),\r\n    tslib_1.__metadata(\"design:paramtypes\", [typeof (_a = typeof _1.ArticleInstanceTagsRoute !== \"undefined\" && _1.ArticleInstanceTagsRoute) === \"function\" && _a || Object, typeof (_b = typeof httpApi_1.ApiClient !== \"undefined\" && httpApi_1.ApiClient) === \"function\" && _b || Object])\r\n], ArticleInstanceTagsClient);\r\nexports.ArticleInstanceTagsClient = ArticleInstanceTagsClient;\r\nvar _a, _b;\r\n/**\r\n * @copyright (c) 2017 Mono Ltd\r\n * @license MIT\r\n * @author Mono Ltd\r\n * @overview\r\n ***Notes:**\r\n - Refer to the [Baasic REST API](http://dev.baasic.com/api/reference/home) for detailed information about available Baasic REST API end-points.\r\n - All end-point objects are transformed by the associated route service.\r\n*/ \r\n\n\n\n//////////////////\n// WEBPACK FOOTER\n// ./src/modules/article/articleTags/InstanceTagsClient.ts\n// module id = 158\n// module chunks = 0","/* globals module */\r\n/**\r\n * @module articleInstanceTagsRoute\r\n * @description Baasic Article Instance Tags Route Definition provides Baasic route templates which can be expanded to Baasic REST URIs. Various services can use Baasic Article Instance Tags Route Service to obtain needed routes while other routes will be obtained through HAL. By convention, all route services  use the same function names as their corresponding services.\r\n*/\r\n\"use strict\";\r\nObject.defineProperty(exports, \"__esModule\", { value: true });\r\nvar tslib_1 = require(\"tslib\");\r\nvar inversify_1 = require(\"inversify\");\r\nvar common_1 = require(\"../../../common\");\r\n;\r\nvar contracts_1 = require(\"../../../core/contracts\");\r\nvar ArticleInstanceTagsRoute = (function (_super) {\r\n    tslib_1.__extends(ArticleInstanceTagsRoute, _super);\r\n    function ArticleInstanceTagsRoute(appOptions) {\r\n        var _this = _super.call(this, appOptions) || this;\r\n        _this.appOptions = appOptions;\r\n        _this.findRoute = 'articles/{articleId}/tags/{?searchQuery,page,rpp,sort,embed,fields}';\r\n        _this.getRoute = 'articles/{articleId}/tags/{tag}/{?embed,fields}';\r\n        _this.createRoute = 'articles/{articleId}/tags/{tag}/';\r\n        _this.deleteRoute = 'articles/{articleId}/tags/{id}';\r\n        _this.deleteAllRoute = 'articles/{articleId}/tags';\r\n        return _this;\r\n    }\r\n    /**\r\n     * Parses find article tags route which can be expanded with additional options. Supported items are:\r\n     * - `searchQuery` - A string value used to identify article tags using the phrase search; multiple tag keywords must be comma separated.\r\n     * - `page` - A value used to set the page number, i.e. to retrieve certain article tag subset from the storage.\r\n     * - `rpp` - A value used to limit the size of result set per page.\r\n     * - `sort` - A string used to set the article tag property to sort the result collection by.\r\n     * - `embed` - Comma separated list of resources to be contained within the current representation.\r\n     * @method\r\n     * @param articleId Article slug or id which uniquely identifies article whose tag resources need to be retrieved.\r\n     * @param options Query resource options object.\r\n     * @example articleInstanceTagsRoute.find().expand({searchQuery: '<search-phrase>'});\r\n     **/\r\n    ArticleInstanceTagsRoute.prototype.find = function (articleId, options) {\r\n        var params = this.utility.extend({}, options);\r\n        params.articleId = articleId;\r\n        return _super.prototype.baseFind.call(this, this.findRoute, params);\r\n    };\r\n    /**\r\n     * Parses get article tag route which must be expanded with the Id of the previously created article tag resource in the system. Additional expand supported items are:\r\n     * - `embed` - Comma separated list of resources to be contained within the current representation.\r\n     * @method\r\n     * @param articleId Article slug or id which uniquely identifies article whose tag resource needs to be retrieved.\r\n     * @param id A slug or id which uniquely identifies article tag resource that needs to be retrieved.\r\n     * @param options Options object that contains embed data.\r\n     * @example articleInstanceTagsRoute.get({id: '<articleTag-id>'});\r\n     **/\r\n    ArticleInstanceTagsRoute.prototype.get = function (articleId, id, options) {\r\n        var params = this.utility.extend({}, options);\r\n        params.articleId = articleId;\r\n        return _super.prototype.baseGet.call(this, this.getRoute, id, params);\r\n    };\r\n    /**\r\n     * Parses create article tag route which must be expanded with the Id of the previously created article tag resource in the system. Additional expand supported items are:\r\n     * - `embed` - Comma separated list of resources to be contained within the current representation.\r\n     * @method\r\n     * @param data An article tag value that needs to be inserted as new article tag resource into the system.\r\n     * @example articleInstanceTagsRoute.create({id: '<articleTag-id>'});\r\n     **/\r\n    ArticleInstanceTagsRoute.prototype.create = function (data) {\r\n        return _super.prototype.baseCreate.call(this, this.createRoute, data);\r\n    };\r\n    /**\r\n     * Parses get article tag route which must be expanded with the Id of the previously created article tag resource in the system. Additional expand supported items are:\r\n     * - `embed` - Comma separated list of resources to be contained within the current representation.\r\n     * @method\r\n     * @param data Article Tag object that needs to be removed from the system.\r\n     * @example articleInstanceTagsRoute.delete({id: '<articleTag-id>'});\r\n     **/\r\n    ArticleInstanceTagsRoute.prototype.delete = function (data) {\r\n        return _super.prototype.baseDelete.call(this, this.deleteRoute, data);\r\n    };\r\n    /**\r\n     * Parses get article tag route which must be expanded with the Id of the previously created article tag resource in the system. Additional expand supported items are:\r\n     * - `embed` - Comma separated list of resources to be contained within the current representation.\r\n     * @method\r\n     * @param data Article object whoose tags needs to be removed from the system.\r\n     * @example articleInstanceTagsRoute.deleteAll({id: '<articleTag-id>'});\r\n     **/\r\n    ArticleInstanceTagsRoute.prototype.deleteAll = function (data) {\r\n        return _super.prototype.baseDelete.call(this, this.deleteAllRoute, data, undefined, 'delete-tags-by-article');\r\n    };\r\n    return ArticleInstanceTagsRoute;\r\n}(common_1.BaseRoute));\r\nArticleInstanceTagsRoute = tslib_1.__decorate([\r\n    inversify_1.injectable(),\r\n    tslib_1.__param(0, inversify_1.inject(contracts_1.TYPES.IAppOptions)),\r\n    tslib_1.__metadata(\"design:paramtypes\", [typeof (_a = typeof contracts_1.IAppOptions !== \"undefined\" && contracts_1.IAppOptions) === \"function\" && _a || Object])\r\n], ArticleInstanceTagsRoute);\r\nexports.ArticleInstanceTagsRoute = ArticleInstanceTagsRoute;\r\nvar _a;\r\n/**\r\n * @copyright (c) 2017 Mono Ltd\r\n * @license MIT\r\n * @author Mono Ltd\r\n * @overview\r\n ***Notes:**\r\n - Refer to the [Baasic REST API](http://dev.baasic.com/api/reference/home) for detailed information about available Baasic REST API end-points.  - [URI Template](https://github.com/Baasic/uritemplate-js) syntax enables expanding the Baasic route templates to Baasic REST URIs providing it with an object that contains URI parameters.\r\n- All end-point objects are transformed by the associated route service.\r\n*/ \r\n\n\n\n//////////////////\n// WEBPACK FOOTER\n// ./src/modules/article/articleTags/InstanceTagsRoute.ts\n// module id = 159\n// module chunks = 0","\"use strict\";\r\nfunction __export(m) {\r\n    for (var p in m) if (!exports.hasOwnProperty(p)) exports[p] = m[p];\r\n}\r\nObject.defineProperty(exports, \"__esModule\", { value: true });\r\n__export(require(\"./InstanceTagsRoute\"));\r\n__export(require(\"./InstanceTagsClient\"));\r\n\n\n\n//////////////////\n// WEBPACK FOOTER\n// ./src/modules/article/articleTags/index.ts\n// module id = 160\n// module chunks = 0","\"use strict\";\r\nObject.defineProperty(exports, \"__esModule\", { value: true });\r\nvar common_1 = require(\"../../common\");\r\nvar _1 = require(\"./\");\r\nvar BaasicArticleUtility = (function () {\r\n    function BaasicArticleUtility() {\r\n        this.utility = new common_1.Utility();\r\n    }\r\n    BaasicArticleUtility.prototype.replaceDiacritics = function (str) {\r\n        for (var letter in _1.ALPHABET) {\r\n            str = str.replace(_1.ALPHABET[letter], letter);\r\n        }\r\n        return str;\r\n    };\r\n    BaasicArticleUtility.prototype.toSlug = function (str) {\r\n        if (this.utility.isUndefined(str) || str === null || str === '') {\r\n            return str;\r\n        }\r\n        str = this.replaceDiacritics(str);\r\n        str = str.toLowerCase();\r\n        str = str.replace(/[^a-z0-9]+/g, '-');\r\n        str = str.replace(/^-|-$/g, '');\r\n        return str;\r\n    };\r\n    BaasicArticleUtility.prototype.updateSlug = function (resource) {\r\n        var newSlug = this.toSlug(resource.slug);\r\n        if (this.utility.isUndefined(newSlug) || newSlug === null || newSlug === '') {\r\n            newSlug = this.toSlug(resource.title);\r\n        }\r\n        if (!this.utility.isUndefined(newSlug) || newSlug !== null || newSlug !== '') {\r\n            if (resource.slug !== newSlug) {\r\n                resource.slug = newSlug;\r\n            }\r\n        }\r\n    };\r\n    return BaasicArticleUtility;\r\n}());\r\nexports.BaasicArticleUtility = BaasicArticleUtility;\r\n\n\n\n//////////////////\n// WEBPACK FOOTER\n// ./src/modules/article/articleUtility.ts\n// module id = 161\n// module chunks = 0","\"use strict\";\r\nObject.defineProperty(exports, \"__esModule\", { value: true });\r\nvar ArticleStatus = {\r\n    none: 0,\r\n    published: 2,\r\n    draft: 1,\r\n    archive: 4\r\n};\r\nexports.ArticleStatus = ArticleStatus;\r\nvar CommentStatus = {\r\n    approved: 1,\r\n    spam: 2,\r\n    reported: 4,\r\n    flagged: 8,\r\n    unapproved: 16\r\n};\r\nexports.CommentStatus = CommentStatus;\r\n\n\n\n//////////////////\n// WEBPACK FOOTER\n// ./src/modules/article/constants.ts\n// module id = 162\n// module chunks = 0","\"use strict\";\r\nObject.defineProperty(exports, \"__esModule\", { value: true });\r\nvar inversify_1 = require(\"inversify\");\r\nvar _1 = require(\"./\");\r\nvar TYPES = {\r\n    ArticleCommentRepliesClient: Symbol(\"ArticleCommentRepliesClient\"),\r\n    ArticleCommentRepliesRoute: Symbol(\"ArticleCommentRepliesRoute\"),\r\n    ArticleCommentsClient: Symbol(\"ArticleCommentsClient\"),\r\n    ArticleCommentsRoute: Symbol(\"ArticleCommentsRoute\"),\r\n    ArticleFilesClient: Symbol(\"ArticleFilesClient\"),\r\n    ArticleFilesRoute: Symbol(\"ArticleFilesRoute\"),\r\n    ArticleFilesBatchClient: Symbol(\"ArticleFilesBatchClient\"),\r\n    ArticleFilesBatchRoute: Symbol(\"ArticleFilesBatchRoute\"),\r\n    ArticleFilesStreamsClient: Symbol(\"ArticleFilesStreamsClient\"),\r\n    ArticleFilesStreamsRoute: Symbol(\"ArticleFilesStreamsRoute\"),\r\n    ArticleRatingsClient: Symbol(\"ArticleRatingsClient\"),\r\n    ArticleRatingsRoute: Symbol(\"ArticleRatingsRoute\"),\r\n    ArticleClient: Symbol(\"ArticleClient\"),\r\n    ArticleRoute: Symbol(\"ArticleRoute\"),\r\n    ArticleSettingsClient: Symbol(\"ArticleSettingsClient\"),\r\n    ArticleSettingsRoute: Symbol(\"ArticleSettingsRoute\"),\r\n    ArticleTagsClient: Symbol(\"ArticleTagsClient\"),\r\n    ArticleTagsRoute: Symbol(\"ArticleTagsRoute\"),\r\n    ArticleTagsSubscriptionsClient: Symbol(\"ArticleTagsSubscriptionsClient\"),\r\n    ArticleTagsSubscriptionsRoute: Symbol(\"ArticleTagsSubscriptionsRoute\"),\r\n    ArticleSubscriptionsArticleRoute: Symbol(\"ArticleSubscriptionsArticleRoute\"),\r\n    ArticleSubscriptionsCommentReportedRoute: Symbol(\"ArticleSubscriptionsCommentReportedRoute\"),\r\n    ArticleSubscriptionsCommentRequiresModerationRoute: Symbol(\"ArticleSubscriptionsCommentRequiresModerationRoute\"),\r\n    ArticleSubscriptionsRoute: Symbol(\"ArticleSubscriptionsRoute\"),\r\n    ArticleSubscriptionsClient: Symbol(\"ArticleSubscriptionsClient\"),\r\n    ArticleSubscriptionsArticleClient: Symbol(\"ArticleSubscriptionsArticleClient\"),\r\n    ArticleSubscriptionsCommentReportedClient: Symbol(\"ArticleSubscriptionsCommentReportedClient\"),\r\n    ArticleSubscriptionsCommentRequiresModerationClient: Symbol(\"ArticleSubscriptionsCommentRequiresModerationClient\"),\r\n    ArticleInstanceSubscriptionsClient: Symbol(\"ArticleInstanceSubscriptionsClient\"),\r\n    ArticleInstanceSubscriptionsRoute: Symbol(\"ArticleInstanceSubscriptionsRoute\"),\r\n    ArticleInstanceRatingsRoute: Symbol(\"ArticleInstanceRatingsRoute\"),\r\n    ArticleInstanceRatingsClient: Symbol(\"ArticleInstanceRatingsClient\"),\r\n    ArticleInstanceTagsRoute: Symbol(\"ArticleInstanceTagsRoute\"),\r\n    ArticleInstanceTagsClient: Symbol(\"ArticleInstanceTagsClient\"),\r\n    ArticleInstanceCommentsRoute: Symbol(\"ArticleInstanceCommentsRoute\"),\r\n    ArticleInstanceCommentsClient: Symbol(\"ArticleInstanceCommentsClient\"),\r\n    ArticleInstanceCommentRepliesRoute: Symbol(\"ArticleInstanceCommentRepliesRoute\"),\r\n    ArticleInstanceCommentRepliesClient: Symbol(\"ArticleInstanceCommentRepliesClient\"),\r\n    ArticleInstanceFilesRoute: Symbol(\"ArticleInstanceFilesRoute\"),\r\n    ArticleInstanceFilesClient: Symbol(\"ArticleInstanceFilesClient\"),\r\n    ArticleInstanceFilesStreamsRoute: Symbol(\"ArticleInstanceFilesStreamsRoute\"),\r\n    ArticleInstanceFilesStreamsClient: Symbol(\"ArticleInstanceFilesStreamsClient\"),\r\n    ArticleInstanceFilesBatchRoute: Symbol(\"ArticleInstanceFilesBatchRoute\"),\r\n    ArticleInstanceFilesBatchClient: Symbol(\"ArticleInstanceFilesBatchClient\"),\r\n    ArticleACLRoute: Symbol(\" ArticleACLRoute\"),\r\n    ArticleACLClient: Symbol(\"ArticleACLClient\"),\r\n    Root: Symbol(\"Root\")\r\n};\r\nexports.TYPES = TYPES;\r\nvar diModule = new inversify_1.ContainerModule(function (bind) {\r\n    bind(TYPES.ArticleCommentRepliesRoute).to(_1.ArticleCommentRepliesRoute);\r\n    bind(TYPES.ArticleCommentRepliesClient).to(_1.ArticleCommentRepliesClient);\r\n    bind(TYPES.ArticleCommentsRoute).to(_1.ArticleCommentsRoute);\r\n    bind(TYPES.ArticleCommentsClient).to(_1.ArticleCommentsClient);\r\n    bind(TYPES.ArticleFilesBatchRoute).to(_1.ArticleFilesBatchRoute);\r\n    bind(TYPES.ArticleFilesBatchClient).to(_1.ArticleFilesBatchClient);\r\n    bind(TYPES.ArticleFilesStreamsRoute).to(_1.ArticleFilesStreamsRoute);\r\n    bind(TYPES.ArticleFilesStreamsClient).to(_1.ArticleFilesStreamsClient);\r\n    bind(TYPES.ArticleFilesRoute).to(_1.ArticleFilesRoute);\r\n    bind(TYPES.ArticleFilesClient).to(_1.ArticleFilesClient);\r\n    bind(TYPES.ArticleRatingsRoute).to(_1.ArticleRatingsRoute);\r\n    bind(TYPES.ArticleRatingsClient).to(_1.ArticleRatingsClient);\r\n    bind(TYPES.ArticleSettingsRoute).to(_1.ArticleSettingsRoute);\r\n    bind(TYPES.ArticleSettingsClient).to(_1.ArticleSettingsClient);\r\n    bind(TYPES.ArticleTagsSubscriptionsRoute).to(_1.ArticleTagsSubscriptionsRoute);\r\n    bind(TYPES.ArticleTagsSubscriptionsClient).to(_1.ArticleTagsSubscriptionsClient);\r\n    bind(TYPES.ArticleTagsRoute).to(_1.ArticleTagsRoute);\r\n    bind(TYPES.ArticleTagsClient).to(_1.ArticleTagsClient);\r\n    bind(TYPES.ArticleSubscriptionsArticleRoute).to(_1.ArticleSubscriptionsArticleRoute);\r\n    bind(TYPES.ArticleSubscriptionsCommentReportedRoute).to(_1.ArticleSubscriptionsCommentReportedRoute);\r\n    bind(TYPES.ArticleSubscriptionsCommentRequiresModerationRoute).to(_1.ArticleSubscriptionsCommentRequiresModerationRoute);\r\n    bind(TYPES.ArticleSubscriptionsRoute).to(_1.ArticleSubscriptionsRoute);\r\n    bind(TYPES.ArticleSubscriptionsArticleClient).to(_1.ArticleSubscriptionsArticleClient);\r\n    bind(TYPES.ArticleSubscriptionsCommentReportedClient).to(_1.ArticleSubscriptionsCommentReportedClient);\r\n    bind(TYPES.ArticleSubscriptionsCommentRequiresModerationClient).to(_1.ArticleSubscriptionsCommentRequiresModerationClient);\r\n    bind(TYPES.ArticleSubscriptionsClient).to(_1.ArticleSubscriptionsClient);\r\n    bind(TYPES.ArticleInstanceRatingsRoute).to(_1.ArticleInstanceRatingsRoute);\r\n    bind(TYPES.ArticleInstanceRatingsClient).to(_1.ArticleInstanceRatingsClient);\r\n    bind(TYPES.ArticleInstanceTagsRoute).to(_1.ArticleInstanceTagsRoute);\r\n    bind(TYPES.ArticleInstanceTagsClient).to(_1.ArticleInstanceTagsClient);\r\n    bind(TYPES.ArticleInstanceCommentsRoute).to(_1.ArticleInstanceCommentsRoute);\r\n    bind(TYPES.ArticleInstanceCommentsClient).to(_1.ArticleInstanceCommentsClient);\r\n    bind(TYPES.ArticleInstanceCommentRepliesRoute).to(_1.ArticleInstanceCommentRepliesRoute);\r\n    bind(TYPES.ArticleInstanceCommentRepliesClient).to(_1.ArticleInstanceCommentRepliesClient);\r\n    bind(TYPES.ArticleInstanceFilesRoute).to(_1.ArticleInstanceFilesRoute);\r\n    bind(TYPES.ArticleInstanceFilesClient).to(_1.ArticleInstanceFilesClient);\r\n    bind(TYPES.ArticleInstanceFilesStreamsRoute).to(_1.ArticleInstanceFilesStreamsRoute);\r\n    bind(TYPES.ArticleInstanceFilesStreamsClient).to(_1.ArticleInstanceFilesStreamsClient);\r\n    bind(TYPES.ArticleInstanceFilesBatchRoute).to(_1.ArticleInstanceFilesBatchRoute);\r\n    bind(TYPES.ArticleInstanceFilesBatchClient).to(_1.ArticleInstanceFilesBatchClient);\r\n    bind(TYPES.ArticleInstanceSubscriptionsClient).to(_1.ArticleInstanceSubscriptionsClient);\r\n    bind(TYPES.ArticleInstanceSubscriptionsRoute).to(_1.ArticleInstanceSubscriptionsRoute);\r\n    bind(TYPES.ArticleACLRoute).to(_1.ArticleACLRoute);\r\n    bind(TYPES.ArticleACLClient).to(_1.ArticleACLClient);\r\n    bind(TYPES.ArticleRoute).to(_1.ArticleRoute);\r\n    bind(TYPES.ArticleClient).to(_1.ArticleClient);\r\n    bind(TYPES.Root).to(_1.Root);\r\n});\r\nexports.diModule = diModule;\r\n\n\n\n//////////////////\n// WEBPACK FOOTER\n// ./src/modules/article/diModule.ts\n// module id = 163\n// module chunks = 0","\"use strict\";\r\nObject.defineProperty(exports, \"__esModule\", { value: true });\r\nvar tslib_1 = require(\"tslib\");\r\nvar _1 = require(\"./\");\r\nvar inversify_1 = require(\"inversify\");\r\nvar Root = (function () {\r\n    function Root(articles, comments, files, ratings, subscriptions, tags, settings) {\r\n        this.articles = articles;\r\n        this.comments = comments;\r\n        this.files = files;\r\n        this.ratings = ratings;\r\n        this.subscriptions = subscriptions;\r\n        this.tags = tags;\r\n        this.settings = settings;\r\n    }\r\n    return Root;\r\n}());\r\nRoot = tslib_1.__decorate([\r\n    inversify_1.injectable(),\r\n    tslib_1.__param(0, inversify_1.inject(_1.TYPES.ArticleClient)),\r\n    tslib_1.__param(1, inversify_1.inject(_1.TYPES.ArticleCommentsClient)),\r\n    tslib_1.__param(2, inversify_1.inject(_1.TYPES.ArticleFilesClient)),\r\n    tslib_1.__param(3, inversify_1.inject(_1.TYPES.ArticleRatingsClient)),\r\n    tslib_1.__param(4, inversify_1.inject(_1.TYPES.ArticleSubscriptionsClient)),\r\n    tslib_1.__param(5, inversify_1.inject(_1.TYPES.ArticleTagsClient)),\r\n    tslib_1.__param(6, inversify_1.inject(_1.TYPES.ArticleSettingsClient)),\r\n    tslib_1.__metadata(\"design:paramtypes\", [typeof (_a = typeof _1.ArticleClient !== \"undefined\" && _1.ArticleClient) === \"function\" && _a || Object, typeof (_b = typeof _1.ArticleCommentsClient !== \"undefined\" && _1.ArticleCommentsClient) === \"function\" && _b || Object, typeof (_c = typeof _1.ArticleFilesClient !== \"undefined\" && _1.ArticleFilesClient) === \"function\" && _c || Object, typeof (_d = typeof _1.ArticleRatingsClient !== \"undefined\" && _1.ArticleRatingsClient) === \"function\" && _d || Object, typeof (_e = typeof _1.ArticleSubscriptionsClient !== \"undefined\" && _1.ArticleSubscriptionsClient) === \"function\" && _e || Object, typeof (_f = typeof _1.ArticleTagsClient !== \"undefined\" && _1.ArticleTagsClient) === \"function\" && _f || Object, typeof (_g = typeof _1.ArticleSettingsClient !== \"undefined\" && _1.ArticleSettingsClient) === \"function\" && _g || Object])\r\n], Root);\r\nexports.Root = Root;\r\nvar _a, _b, _c, _d, _e, _f, _g;\r\n\n\n\n//////////////////\n// WEBPACK FOOTER\n// ./src/modules/article/root.ts\n// module id = 164\n// module chunks = 0","/* globals module */\r\n/**\r\n * @module commerceClient\r\n * @description  Commerce Client provides an easy way to consume  Commerce REST API end-points. In order to obtain a needed routes `commerceClient` uses `commerceRoute`.\r\n */\r\n\"use strict\";\r\nObject.defineProperty(exports, \"__esModule\", { value: true });\r\nvar tslib_1 = require(\"tslib\");\r\nvar inversify_1 = require(\"inversify\");\r\n;\r\nvar httpApi_1 = require(\"../../httpApi\");\r\nvar _1 = require(\"./\");\r\nvar CommerceClient = (function () {\r\n    function CommerceClient(commerceCustomerClient, commerceInvoiceClient, commerceProductClient, commercePaymentTransactionClient, lookup, commerceRoute, apiClient) {\r\n        this.commerceCustomerClient = commerceCustomerClient;\r\n        this.commerceInvoiceClient = commerceInvoiceClient;\r\n        this.commerceProductClient = commerceProductClient;\r\n        this.commercePaymentTransactionClient = commercePaymentTransactionClient;\r\n        this.lookup = lookup;\r\n        this.commerceRoute = commerceRoute;\r\n        this.apiClient = apiClient;\r\n    }\r\n    Object.defineProperty(CommerceClient.prototype, \"customers\", {\r\n        get: function () {\r\n            return this.commerceCustomerClient;\r\n        },\r\n        enumerable: true,\r\n        configurable: true\r\n    });\r\n    Object.defineProperty(CommerceClient.prototype, \"invoices\", {\r\n        get: function () {\r\n            return this.commerceInvoiceClient;\r\n        },\r\n        enumerable: true,\r\n        configurable: true\r\n    });\r\n    Object.defineProperty(CommerceClient.prototype, \"products\", {\r\n        get: function () {\r\n            return this.commerceProductClient;\r\n        },\r\n        enumerable: true,\r\n        configurable: true\r\n    });\r\n    Object.defineProperty(CommerceClient.prototype, \"paymentTransactions\", {\r\n        get: function () {\r\n            return this.commercePaymentTransactionClient;\r\n        },\r\n        enumerable: true,\r\n        configurable: true\r\n    });\r\n    Object.defineProperty(CommerceClient.prototype, \"lookups\", {\r\n        get: function () {\r\n            return this.lookup;\r\n        },\r\n        enumerable: true,\r\n        configurable: true\r\n    });\r\n    Object.defineProperty(CommerceClient.prototype, \"routeDefinition\", {\r\n        get: function () {\r\n            return this.commerceRoute;\r\n        },\r\n        enumerable: true,\r\n        configurable: true\r\n    });\r\n    /**\r\n     * Returns a promise that is resolved once the find action has been performed. Success response returns a list of commerce resources matching the given criteria.\r\n     * @method\r\n     * @example commerceClient.find({\r\n                    pageNumber : 1,\r\n                    pageSize : 10,\r\n                    orderBy : '<field>',\r\n                    orderDirection : '<asc|desc>',\r\n                    customerId: '<customer-id>'\r\n                })\r\n                .then(function (collection) {\r\n                    // perform success action here\r\n                },\r\n                 function (response, status, headers, config) {\r\n                     // perform error handling here\r\n                });\r\n     **/\r\n    CommerceClient.prototype.find = function (options) {\r\n        return this.apiClient.get(this.routeDefinition.find(options));\r\n    };\r\n    /**\r\n     * Returns a promise that is resolved once the get action has been performed. Success response returns the commerce resource.\r\n     * @method\r\n     * @example commerceClient.get('<id>', {})\r\n                    .then(function (data) {\r\n                        // perform success action here\r\n                    },\r\n                     function (response, status, headers, config) {\r\n                         // perform error handling here\r\n                    });\r\n     **/\r\n    CommerceClient.prototype.get = function (id, options) {\r\n        return this.apiClient.get(this.commerceRoute.get(id, options));\r\n    };\r\n    /**\r\n     * Returns a promise that is resolved once the get action has been performed. Success response returns the commerce resource.\r\n     * @method\r\n     * @example commerceClient.validateVAT({ countryCode: 'DE', vatId: 'DE999999999' })\r\n                    .then(function (data) {\r\n                        // perform success action here\r\n                    },\r\n                     function (response, status, headers, config) {\r\n                         // perform error handling here\r\n                    });\r\n     **/\r\n    CommerceClient.prototype.validateVAT = function (countryCode, vatId) {\r\n        return this.apiClient.get(this.commerceRoute.validateVAT(countryCode, vatId));\r\n    };\r\n    /**\r\n     * Returns a promise that is resolved once the subscribe pre-process commerce action has been performed; this action performes pre-subscribe operations such as getting client tokens etc.\r\n     * @method\r\n     * @example commerceClient.preprocess({\r\n                    systemName : '<system-name>',\r\n                    productId : '<product-id>',\r\n                    customerId: '<id>'\r\n                })\r\n                .then(function (data) {\r\n                    // perform success action here\r\n                },\r\n                 function (response, status, headers, config) {\r\n                     // perform error handling here\r\n                });\r\n     **/\r\n    CommerceClient.prototype.preprocess = function (data) {\r\n        return this.apiClient.post(this.routeDefinition.preprocess(), this.routeDefinition.createParams(data));\r\n    };\r\n    /**\r\n     * Returns a promise that is resolved once the subscribe commerce action has been performed; this action creates a new commerce subscription resource.\r\n     * @method\r\n     * @example commerceClient.subscribe({\r\n                    systemName : '<system-name>',\r\n                    productId : '<product-id>',\r\n                    customer: {\r\n                        id: '<id>',\r\n                        firstName: '<first-name>',\r\n                        lastName: '<last-name>'\r\n                    }\r\n                })\r\n                .then(function (data) {\r\n                    // perform success action here\r\n                },\r\n                 function (response, status, headers, config) {\r\n                     // perform error handling here\r\n                });\r\n     **/\r\n    CommerceClient.prototype.subscribe = function (data) {\r\n        return this.apiClient.post(this.routeDefinition.subscribe(), this.routeDefinition.createParams(data));\r\n    };\r\n    /**\r\n     * Returns a promise that is resolved once the cancel subscription action has been performed. This action will remove a commerce subscription resource from the system if successfully completed. This route obtain routes from `commerceRoute` route template. Here is an example of how execute this action:\r\n     * @method\r\n     * @example\tcommerceClient.cancel({\r\n                    systemName: '<system-name>',\r\n                    id: '<subscription-id>',\r\n                    requestRefund: <true/false>,\r\n                    refundAmount: <refund-amount>\r\n                })\r\n                .then(function (data) {\r\n                    // perform success action here\r\n                },\r\n                 function (response, status, headers, config) {\r\n                     // perform error handling here\r\n                });\r\n     **/\r\n    CommerceClient.prototype.cancel = function (data) {\r\n        return this.apiClient.delete(this.routeDefinition.cancel(data));\r\n    };\r\n    return CommerceClient;\r\n}());\r\nCommerceClient = tslib_1.__decorate([\r\n    inversify_1.injectable(),\r\n    tslib_1.__param(0, inversify_1.inject(_1.TYPES.CommerceCustomerClient)),\r\n    tslib_1.__param(1, inversify_1.inject(_1.TYPES.CommerceInvoiceClient)),\r\n    tslib_1.__param(2, inversify_1.inject(_1.TYPES.CommerceProductClient)),\r\n    tslib_1.__param(3, inversify_1.inject(_1.TYPES.CommercePaymentTransactionClient)),\r\n    tslib_1.__param(4, inversify_1.inject(_1.TYPES.Lookups)),\r\n    tslib_1.__param(5, inversify_1.inject(_1.TYPES.CommerceRoute)),\r\n    tslib_1.__param(6, inversify_1.inject(httpApi_1.httpTYPES.ApiClient)),\r\n    tslib_1.__metadata(\"design:paramtypes\", [typeof (_a = typeof _1.CommerceCustomerClient !== \"undefined\" && _1.CommerceCustomerClient) === \"function\" && _a || Object, typeof (_b = typeof _1.CommerceInvoiceClient !== \"undefined\" && _1.CommerceInvoiceClient) === \"function\" && _b || Object, typeof (_c = typeof _1.CommerceProductClient !== \"undefined\" && _1.CommerceProductClient) === \"function\" && _c || Object, typeof (_d = typeof _1.CommercePaymentTransactionClient !== \"undefined\" && _1.CommercePaymentTransactionClient) === \"function\" && _d || Object, typeof (_e = typeof _1.Lookups !== \"undefined\" && _1.Lookups) === \"function\" && _e || Object, typeof (_f = typeof _1.CommerceRoute !== \"undefined\" && _1.CommerceRoute) === \"function\" && _f || Object, typeof (_g = typeof httpApi_1.ApiClient !== \"undefined\" && httpApi_1.ApiClient) === \"function\" && _g || Object])\r\n], CommerceClient);\r\nexports.CommerceClient = CommerceClient;\r\nvar _a, _b, _c, _d, _e, _f, _g;\r\n/**\r\n * @copyright (c) 2017 Mono Ltd\r\n * @license MIT\r\n * @author Mono Ltd\r\n * @overview\r\n ***Notes:**\r\n - Refer to the [Baasic REST API](http://dev.baasic.com/api/reference/home) for detailed information about available Baasic REST API end-points.\r\n - All end-point objects are transformed by the associated route service.\r\n */ \r\n\n\n\n//////////////////\n// WEBPACK FOOTER\n// ./src/modules/commerce/commerceClient.ts\n// module id = 165\n// module chunks = 0","/* globals module */\r\n/**\r\n * @module commerceRoute\r\n * @description Baasic Commerce Route Definition provides Baasic route templates which can be expanded to Baasic REST URIs. Various services can use Baasic Commerce Product Route Definition to obtain a needed routes while other routes will be obtained through HAL. By convention, all route services  use the same function names as their corresponding services.\r\n */\r\n\"use strict\";\r\nObject.defineProperty(exports, \"__esModule\", { value: true });\r\nvar tslib_1 = require(\"tslib\");\r\nvar inversify_1 = require(\"inversify\");\r\nvar common_1 = require(\"../../common\");\r\n;\r\nvar contracts_1 = require(\"../../core/contracts\");\r\nvar CommerceRoute = (function (_super) {\r\n    tslib_1.__extends(CommerceRoute, _super);\r\n    function CommerceRoute(appOptions) {\r\n        var _this = _super.call(this, appOptions) || this;\r\n        _this.appOptions = appOptions;\r\n        _this.findRoute = 'commerce/subscriptions/{?customerId,systemName,searchQuery,plan,statuses,productId,firstName,lastName,page,rpp,sort,embed,fields}';\r\n        _this.getRoute = 'commerce/subscriptions/{id}/{?embed,fields}';\r\n        _this.validateVATRoute = 'commerce/vat-validations/{?countryCode,vatId}';\r\n        _this.preprocessRoute = 'commerce/subscriptions/preprocess';\r\n        _this.subscribeRoute = 'commerce/subscriptions';\r\n        _this.cancelRoute = 'commerce/subscriptions/{systemName}/{id}/{?requestRefund,refundAmount}';\r\n        return _this;\r\n    }\r\n    /**\r\n     * Parses find commerce route which can be expanded with additional options. Supported items are:\r\n     * - `customerId` - The customer identifier.\r\n     * - `systemName` - The commerce payment gateway system name.\r\n     * - `searchQuery` - A string value used to identify commerce resources using the phrase search.\r\n     * - `plan` - Product name.\r\n     * - `statuses` - Subscription status unique identifier or abbreviation in CSV format.\r\n     * - `productId` - Product unique identifier.\r\n     * - `firstName` - Customer first name.\r\n     * - `lastName` - Customer last name.\r\n     * - `page` - A value used to set the page number, i.e. to retrieve certain commerce subset from the storage.\r\n     * - `rpp` - A value used to limit the size of result set per page.\r\n     * - `sort` - A string used to set the commerce property to sort the result collection by.\r\n     * - `embed` - Comma separated list of resources to be contained within the current representation.\r\n     * @method\r\n     * @example commerceRoute.find({searchQuery: '<search-phrase>'});\r\n     **/\r\n    CommerceRoute.prototype.find = function (options) {\r\n        return _super.prototype.baseFind.call(this, this.findRoute, options);\r\n    };\r\n    /**\r\n     * Parses get route; this route doesn't expose any properties.\r\n     * @method\r\n     * @example commerceRoute.get(id, options);\r\n     **/\r\n    CommerceRoute.prototype.get = function (id, options) {\r\n        return _super.prototype.baseGet.call(this, this.getRoute, id, options);\r\n    };\r\n    /**\r\n     * Parses validate VAT route; this route doesn't expose any properties.\r\n     * @method\r\n     * @example commerceRoute.validateVAT({ countryCode: 'DE', vatId: 'DE999999999' });\r\n     **/\r\n    CommerceRoute.prototype.validateVAT = function (countryCode, vatId) {\r\n        return _super.prototype.baseCreate.call(this, this.validateVATRoute, { countryCode: countryCode, vatId: vatId });\r\n    };\r\n    /**\r\n     * Parses subscription pre-process commerce route; this URI template does not expose any additional options.\r\n     * @method\r\n     * @example commerceRoute.preprocess();\r\n     **/\r\n    CommerceRoute.prototype.preprocess = function () {\r\n        return _super.prototype.baseCreate.call(this, this.preprocessRoute, {});\r\n    };\r\n    /**\r\n     * Parses subscription commerce route; this URI template does not expose any additional options.\r\n     * @method\r\n     * @example commerceRoute.subscribe();\r\n     **/\r\n    CommerceRoute.prototype.subscribe = function () {\r\n        return _super.prototype.baseCreate.call(this, this.subscribeRoute, {});\r\n    };\r\n    /**\r\n     * Parses cancel subscription commerce route; this URI template does not expose any additional options.\r\n     * @method\r\n     * @example commerceRoute.cancel({ systemName: '<system-name>' });\r\n     **/\r\n    CommerceRoute.prototype.cancel = function (data) {\r\n        return _super.prototype.baseCreate.call(this, this.cancelRoute, data);\r\n    };\r\n    return CommerceRoute;\r\n}(common_1.BaseRoute));\r\nCommerceRoute = tslib_1.__decorate([\r\n    inversify_1.injectable(),\r\n    tslib_1.__param(0, inversify_1.inject(contracts_1.TYPES.IAppOptions)),\r\n    tslib_1.__metadata(\"design:paramtypes\", [typeof (_a = typeof contracts_1.IAppOptions !== \"undefined\" && contracts_1.IAppOptions) === \"function\" && _a || Object])\r\n], CommerceRoute);\r\nexports.CommerceRoute = CommerceRoute;\r\nvar _a;\r\n/**\r\n * @copyright (c) 2017 Mono Ltd\r\n * @license MIT\r\n * @author Mono Ltd\r\n * @overview\r\n ***Notes:**\r\n - Refer to the [Baasic REST API](http://dev.baasic.com/api/reference/home) for detailed information about available Baasic REST API end-points.\r\n - [URI Template](https://github.com/Baasic/uritemplate-js) syntax enables expanding the Baasic route templates to Baasic REST URIs providing it with an object that contains URI parameters.\r\n - All end-point objects are transformed by the associated route service.\r\n */ \r\n\n\n\n//////////////////\n// WEBPACK FOOTER\n// ./src/modules/commerce/commerceRoute.ts\n// module id = 166\n// module chunks = 0","/* globals module */\r\n/**\r\n * @module commerceCustomerClient\r\n * @description  Commerce Customer Client provides an easy way to consume  Commerce REST API end-points. In order to obtain a needed routes `commerceCustomerClient` uses `commerceCustomerRoute`.\r\n */\r\n\"use strict\";\r\nObject.defineProperty(exports, \"__esModule\", { value: true });\r\nvar tslib_1 = require(\"tslib\");\r\nvar inversify_1 = require(\"inversify\");\r\n;\r\nvar httpApi_1 = require(\"../../../httpApi\");\r\nvar _1 = require(\"../\");\r\nvar CommerceCustomerClient = (function () {\r\n    function CommerceCustomerClient(commerceCustomerPaymentMethodClient, commerceCustomerRoute, apiClient) {\r\n        this.commerceCustomerPaymentMethodClient = commerceCustomerPaymentMethodClient;\r\n        this.commerceCustomerRoute = commerceCustomerRoute;\r\n        this.apiClient = apiClient;\r\n    }\r\n    Object.defineProperty(CommerceCustomerClient.prototype, \"paymentMethods\", {\r\n        get: function () {\r\n            return this.commerceCustomerPaymentMethodClient;\r\n        },\r\n        enumerable: true,\r\n        configurable: true\r\n    });\r\n    Object.defineProperty(CommerceCustomerClient.prototype, \"routeDefinition\", {\r\n        get: function () {\r\n            return this.commerceCustomerRoute;\r\n        },\r\n        enumerable: true,\r\n        configurable: true\r\n    });\r\n    /**\r\n     * Returns a promise that is resolved once the find action has been performed. Success response returns a list of commerce resources matching the given criteria.\r\n     * @method\r\n     * @example commerceCustomerClient.find({\r\n                    pageNumber : 1,\r\n                    pageSize : 10,\r\n                    orderBy : '<field>',\r\n                    orderDirection : '<asc|desc>',\r\n                    search : '<search-phrase>'\r\n                })\r\n                .then(function (collection) {\r\n                    // perform success action here\r\n                },\r\n                 function (response, status, headers, config) {\r\n                     // perform error handling here\r\n                });\r\n     **/\r\n    CommerceCustomerClient.prototype.find = function (options) {\r\n        return this.apiClient.get(this.routeDefinition.find(options));\r\n    };\r\n    /**\r\n     * Returns a promise that is resolved once the get action has been performed. Success response returns the commerce resource.\r\n     * @method\r\n     * @example commerceCustomerClient.get(id)\r\n                    .then(function (data) {\r\n                        // perform success action here\r\n                    },\r\n                     function (response, status, headers, config) {\r\n                         // perform error handling here\r\n                    });\r\n     **/\r\n    CommerceCustomerClient.prototype.get = function (id, options) {\r\n        return this.apiClient.get(this.commerceCustomerRoute.get(id, options));\r\n    };\r\n    /**\r\n     * Returns a promise that is resolved once the update commerce action has been performed; this action updates a commerce resource. This route uses HAL enabled objects to obtain routes and therefore it doesn't apply `commerceCustomerRoute` route template. Here is an example of how a route can be obtained from HAL enabled objects:\r\n     * ```\r\n     * let params = apiClient.removeParams(commerceCustomer);\r\n     * let uri = params['model'].links('put').href;\r\n     * ```\r\n     * @method\r\n     * @example // commerceCustomer is a resource previously fetched using get action.\r\n                    commerceCustomer.isDefault : true;\r\n                    commerceCustomerClient.update(commerceCustomer)\r\n                        .then(function (data) {\r\n                            // perform success action here\r\n                        },\r\n                         function (response, status, headers, config) {\r\n                             // perform error handling here\r\n                        });\r\n     **/\r\n    CommerceCustomerClient.prototype.update = function (data) {\r\n        return this.apiClient.put(this.routeDefinition.update(data), this.routeDefinition.updateParams(data));\r\n    };\r\n    /**\r\n     * Returns a promise that is resolved once the remove action has been performed. This action will remove a commerce resource from the system if successfully completed. This route uses HAL enabled objects to obtain routes and therefore it doesn't apply `commerceCustomerRoute` route template. Here is an example of how a route can be obtained from HAL enabled objects:\r\n     * ```\r\n     * let params = apiClient.removeParams(commerceCustomer);\r\n     * let uri = params['model'].links('delete').href;\r\n     * ```\r\n     * @method\r\n     * @example // commerceCustomer is a resource previously fetched using get action.\r\n                    commerceCustomerClient.remove(commerceCustomer)\r\n                        .then(function (data) {\r\n                            // perform success action here\r\n                        },\r\n                         function (response, status, headers, config) {\r\n                             // perform error handling here\r\n                        });\r\n     **/\r\n    CommerceCustomerClient.prototype.remove = function (data) {\r\n        return this.apiClient.delete(this.routeDefinition.delete(data));\r\n    };\r\n    return CommerceCustomerClient;\r\n}());\r\nCommerceCustomerClient = tslib_1.__decorate([\r\n    inversify_1.injectable(),\r\n    tslib_1.__param(0, inversify_1.inject(_1.TYPES.CommerceCustomerPaymentMethodClient)),\r\n    tslib_1.__param(1, inversify_1.inject(_1.TYPES.CommerceCustomerRoute)),\r\n    tslib_1.__param(2, inversify_1.inject(httpApi_1.httpTYPES.ApiClient)),\r\n    tslib_1.__metadata(\"design:paramtypes\", [typeof (_a = typeof _1.CommerceCustomerPaymentMethodClient !== \"undefined\" && _1.CommerceCustomerPaymentMethodClient) === \"function\" && _a || Object, typeof (_b = typeof _1.CommerceCustomerRoute !== \"undefined\" && _1.CommerceCustomerRoute) === \"function\" && _b || Object, typeof (_c = typeof httpApi_1.ApiClient !== \"undefined\" && httpApi_1.ApiClient) === \"function\" && _c || Object])\r\n], CommerceCustomerClient);\r\nexports.CommerceCustomerClient = CommerceCustomerClient;\r\nvar _a, _b, _c;\r\n/**\r\n * @copyright (c) 2017 Mono Ltd\r\n * @license MIT\r\n * @author Mono Ltd\r\n * @overview\r\n ***Notes:**\r\n - Refer to the [Baasic REST API](http://dev.baasic.com/api/reference/home) for detailed information about available Baasic REST API end-points.\r\n - All end-point objects are transformed by the associated route service.\r\n */ \r\n\n\n\n//////////////////\n// WEBPACK FOOTER\n// ./src/modules/commerce/customer/commerceCustomerClient.ts\n// module id = 167\n// module chunks = 0","/* globals module */\r\n/**\r\n * @module commerceCustomerPaymentMethodClient\r\n * @description  Commerce CustomerPaymentMethod Client provides an easy way to consume  Commerce REST API end-points. In order to obtain a needed routes `commerceCustomerPaymentMethodClient` uses `commerceCustomerPaymentMethodRoute`.\r\n */\r\n\"use strict\";\r\nObject.defineProperty(exports, \"__esModule\", { value: true });\r\nvar tslib_1 = require(\"tslib\");\r\nvar inversify_1 = require(\"inversify\");\r\n;\r\nvar httpApi_1 = require(\"../../../httpApi\");\r\nvar _1 = require(\"../\");\r\nvar CommerceCustomerPaymentMethodClient = (function () {\r\n    function CommerceCustomerPaymentMethodClient(commerceCustomerPaymentMethodRoute, apiClient) {\r\n        this.commerceCustomerPaymentMethodRoute = commerceCustomerPaymentMethodRoute;\r\n        this.apiClient = apiClient;\r\n    }\r\n    Object.defineProperty(CommerceCustomerPaymentMethodClient.prototype, \"routeDefinition\", {\r\n        get: function () {\r\n            return this.commerceCustomerPaymentMethodRoute;\r\n        },\r\n        enumerable: true,\r\n        configurable: true\r\n    });\r\n    /**\r\n     * Returns a promise that is resolved once the find action has been performed. Success response returns a list of commerce resources matching the given criteria.\r\n     * @method\r\n     * @param options Query resource options object.\r\n     * @returns A promise that is resolved once the find action has been performed.\r\n     * @example commerceCustomerPaymentMethodClient.find({\r\n                    pageNumber : 1,\r\n                    pageSize : 10,\r\n                    orderBy : '<field>',\r\n                    orderDirection : '<asc|desc>',\r\n                    search : '<search-phrase>'\r\n                })\r\n                .then(function (collection) {\r\n                    // perform success action here\r\n                },\r\n                 function (response, status, headers, config) {\r\n                     // perform error handling here\r\n                });\r\n     **/\r\n    CommerceCustomerPaymentMethodClient.prototype.find = function (options) {\r\n        return this.apiClient.get(this.routeDefinition.find(options));\r\n    };\r\n    /**\r\n     * Returns a promise that is resolved once the get action has been performed. Success response returns the commerce resource.\r\n     * @method\r\n     * @example commerceCustomerPaymentMethodClient.get()\r\n                    .then(function (data) {\r\n                        // perform success action here\r\n                    },\r\n                     function (response, status, headers, config) {\r\n                         // perform error handling here\r\n                    });\r\n     **/\r\n    CommerceCustomerPaymentMethodClient.prototype.get = function (id, options) {\r\n        return this.apiClient.get(this.commerceCustomerPaymentMethodRoute.get(id, options));\r\n    };\r\n    /**\r\n     * Returns a promise that is resolved once the update commerce action has been performed; this action updates a commerce resource. This route uses HAL enabled objects to obtain routes and therefore it doesn't apply `commerceCustomerPaymentMethodRoute` route template. Here is an example of how a route can be obtained from HAL enabled objects:\r\n     * ```\r\n     * let params = modelMapper.removeParams(commerceCustomerPaymentMethod);\r\n     * var uri = params['model'].links('put').href;\r\n     * ```\r\n     * @method\r\n     * @example // commerceCustomerPaymentMethod is a resource previously fetched using get action.\r\n                        commerceCustomerPaymentMethod.isDefault : true;\r\n                        commerceCustomerPaymentMethodClient.update(commerceCustomerPaymentMethod)\r\n                            .then(function (data) {\r\n                                // perform success action here\r\n                            },\r\n                             function (response, status, headers, config) {\r\n                                 // perform error handling here\r\n                            });\r\n     **/\r\n    CommerceCustomerPaymentMethodClient.prototype.update = function (data) {\r\n        return this.apiClient.put(this.routeDefinition.update(data), this.routeDefinition.updateParams(data));\r\n    };\r\n    /**\r\n     * Returns a promise that is resolved once the create commerce action has been performed; this action creates a new commerce resource.\r\n     * @method\r\n     * @example commerceCustomerPaymentMethodClient.create({\r\n                    paymentMethodNonce : '<payment-method-nonce>',\r\n                    customerId : '<customer-id>',\r\n                    typeName : '<type-name>'\r\n                })\r\n                .then(function (data) {\r\n                    // perform success action here\r\n                },\r\n                 function (response, status, headers, config) {\r\n                     // perform error handling here\r\n                });\r\n     **/\r\n    CommerceCustomerPaymentMethodClient.prototype.create = function (data) {\r\n        return this.apiClient.post(this.routeDefinition.create(), this.routeDefinition.createParams(data));\r\n    };\r\n    /**\r\n     * Returns a promise that is resolved once the remove action has been performed. This action will remove a commerce resource from the system if successfully completed. This route uses HAL enabled objects to obtain routes and therefore it doesn't apply `baasicCommerceCustomerPaymentMethodRouteService` route template. Here is an example of how a route can be obtained from HAL enabled objects:\r\n     * ```\r\n     * let params = modelMapper.removeParams(commerceCustomerPaymentMethod);\r\n     * let uri = params['model'].links('delete').href;\r\n     * ```\r\n     * @method\r\n     * @example // commerceCustomerPaymentMethod is a resource previously fetched using get action.\r\n                    commerceCustomerPaymentMethodClient.remove(commerceCustomerPaymentMethod)\r\n                        .then(function (data) {\r\n                            // perform success action here\r\n                        },\r\n                         function (response, status, headers, config) {\r\n                             // perform error handling here\r\n                        });\r\n     **/\r\n    CommerceCustomerPaymentMethodClient.prototype.remove = function (data) {\r\n        return this.apiClient.delete(this.routeDefinition.delete(data));\r\n    };\r\n    return CommerceCustomerPaymentMethodClient;\r\n}());\r\nCommerceCustomerPaymentMethodClient = tslib_1.__decorate([\r\n    inversify_1.injectable(),\r\n    tslib_1.__param(0, inversify_1.inject(_1.TYPES.CommerceCustomerPaymentMethodRoute)),\r\n    tslib_1.__param(1, inversify_1.inject(httpApi_1.httpTYPES.ApiClient)),\r\n    tslib_1.__metadata(\"design:paramtypes\", [typeof (_a = typeof _1.CommerceCustomerPaymentMethodRoute !== \"undefined\" && _1.CommerceCustomerPaymentMethodRoute) === \"function\" && _a || Object, typeof (_b = typeof httpApi_1.ApiClient !== \"undefined\" && httpApi_1.ApiClient) === \"function\" && _b || Object])\r\n], CommerceCustomerPaymentMethodClient);\r\nexports.CommerceCustomerPaymentMethodClient = CommerceCustomerPaymentMethodClient;\r\nvar _a, _b;\r\n/**\r\n * @copyright(c) 2017 Mono Ltd\r\n * @license MIT\r\n * @author Mono Ltd\r\n * @overview\r\n ***Notes:**\r\n - Refer to the [Baasic REST API](http://dev.baasic.com/api/reference/home) for detailed information about available Baasic REST API end-points.\r\n - All end-point objects are transformed by the associated route service.\r\n */ \r\n\n\n\n//////////////////\n// WEBPACK FOOTER\n// ./src/modules/commerce/customer/commerceCustomerPaymentMethodClient.ts\n// module id = 168\n// module chunks = 0","/* globals module */\r\n/**\r\n * @module commerceCustomerPaymentMethodRoute\r\n * @description Baasic Commerce CustomerPaymentMethod Route Definition provides Baasic route templates which can be expanded to Baasic REST URIs. Various services can use Baasic Commerce CustomerPaymentMethod Route Definition to obtain a needed routes while other routes will be obtained through HAL. By convention, all route services  use the same function names as their corresponding services.\r\n */\r\n\"use strict\";\r\nObject.defineProperty(exports, \"__esModule\", { value: true });\r\nvar tslib_1 = require(\"tslib\");\r\nvar inversify_1 = require(\"inversify\");\r\nvar common_1 = require(\"../../../common\");\r\n;\r\nvar contracts_1 = require(\"../../../core/contracts\");\r\nvar CommerceCustomerPaymentMethodRoute = (function (_super) {\r\n    tslib_1.__extends(CommerceCustomerPaymentMethodRoute, _super);\r\n    function CommerceCustomerPaymentMethodRoute(appOptions) {\r\n        var _this = _super.call(this, appOptions) || this;\r\n        _this.appOptions = appOptions;\r\n        _this.findRoute = 'commerce/customer-payment-methods/{systemName}/{?customerId,searchQuery,page,rpp,sort,embed,fields}';\r\n        _this.getRoute = 'commerce/customer-payment-methods/{systemName}/{id}/{?embed,fields}';\r\n        _this.createRoute = 'commerce/customer-payment-methods/{systemName}/';\r\n        _this.updateRoute = 'commerce/customer-payment-methods/{systemName}/{id}';\r\n        _this.deleteRoute = 'commerce/customer-payment-methods/{systemName}/{id}';\r\n        return _this;\r\n    }\r\n    /**\r\n     * Parses find commerce customer-payment-methods route which can be expanded with additional options. Supported items are:\r\n     * - `searchQuery` - A string value used to identify commerce resources using the phrase search.\r\n     * - `page` - A value used to set the page number, i.e. to retrieve certain commerce subset from the storage.\r\n     * - `rpp` - A value used to limit the size of result set per page.\r\n     * - `sort` - A string used to set the commerce property to sort the result collection by.\r\n     * - `embed` - Comma separated list of resources to be contained within the current representation.\r\n     * @method\r\n     * @param options Query resource options.\r\n     * @example commerceCustomerPaymentMethodRoute.find({searchQuery: '<search-phrase>'});                               **/\r\n    CommerceCustomerPaymentMethodRoute.prototype.find = function (options) {\r\n        return _super.prototype.baseFind.call(this, this.findRoute, options);\r\n    };\r\n    /**\r\n     * Parses get route; this route doesn't expose any properties.\r\n     * @method\r\n     * @example commerceCustomerPaymentMethodRoute.get(id, options);\r\n     **/\r\n    CommerceCustomerPaymentMethodRoute.prototype.get = function (id, options) {\r\n        return _super.prototype.baseGet.call(this, this.getRoute, options);\r\n    };\r\n    /**\r\n     * Parses create commerce customer-payment-method route; this URI template does not expose any additional options.\r\n     * @method\r\n     * @example commerceCustomerPaymentMethodRoute.create();\r\n     **/\r\n    CommerceCustomerPaymentMethodRoute.prototype.create = function () {\r\n        return _super.prototype.baseCreate.call(this, this.createRoute, {});\r\n    };\r\n    /**\r\n     * Parses update commerce customer-payment-method route; this URI template does not expose any additional options.\r\n     * @method\r\n     * @example commerceCustomerPaymentMethodRoute.update(data);\r\n     **/\r\n    CommerceCustomerPaymentMethodRoute.prototype.update = function (data) {\r\n        return _super.prototype.baseUpdate.call(this, this.updateRoute, data);\r\n    };\r\n    /**\r\n    * Parses delete commerce customer-payment-method route; this URI template does not expose any additional options.\r\n    * @method\r\n    * @example commerceCustomerPaymentMethodRoute.delete(data);\r\n    **/\r\n    CommerceCustomerPaymentMethodRoute.prototype.delete = function (data) {\r\n        return _super.prototype.baseDelete.call(this, this.deleteRoute, data);\r\n    };\r\n    return CommerceCustomerPaymentMethodRoute;\r\n}(common_1.BaseRoute));\r\nCommerceCustomerPaymentMethodRoute = tslib_1.__decorate([\r\n    inversify_1.injectable(),\r\n    tslib_1.__param(0, inversify_1.inject(contracts_1.TYPES.IAppOptions)),\r\n    tslib_1.__metadata(\"design:paramtypes\", [typeof (_a = typeof contracts_1.IAppOptions !== \"undefined\" && contracts_1.IAppOptions) === \"function\" && _a || Object])\r\n], CommerceCustomerPaymentMethodRoute);\r\nexports.CommerceCustomerPaymentMethodRoute = CommerceCustomerPaymentMethodRoute;\r\nvar _a;\r\n/**\r\n * @copyright (c) 2017 Mono Ltd\r\n * @license MIT\r\n * @author Mono Ltd\r\n * @overview\r\n ***Notes:**\r\n - Refer to the [Baasic REST API](http://dev.baasic.com/api/reference/home) for detailed information about available Baasic REST API end-points.\r\n - [URI Template](https://github.com/Baasic/uritemplate-js) syntax enables expanding the Baasic route templates to Baasic REST URIs providing it with an object that contains URI parameters.\r\n - All end-point objects are transformed by the associated route service.\r\n */ \r\n\n\n\n//////////////////\n// WEBPACK FOOTER\n// ./src/modules/commerce/customer/commerceCustomerPaymentMethodRoute.ts\n// module id = 169\n// module chunks = 0","/* globals module */\r\n/**\r\n * @module commerceCustomerRoute\r\n * @description Baasic Commerce Customer Route Definition provides Baasic route templates which can be expanded to Baasic REST URIs. Various services can use Baasic Commerce Customer Route Definition to obtain a needed routes while other routes will be obtained through HAL. By convention, all route services  use the same function names as their corresponding services.\r\n */\r\n\"use strict\";\r\nObject.defineProperty(exports, \"__esModule\", { value: true });\r\nvar tslib_1 = require(\"tslib\");\r\nvar inversify_1 = require(\"inversify\");\r\nvar common_1 = require(\"../../../common\");\r\n;\r\nvar contracts_1 = require(\"../../../core/contracts\");\r\nvar CommerceCustomerRoute = (function (_super) {\r\n    tslib_1.__extends(CommerceCustomerRoute, _super);\r\n    function CommerceCustomerRoute(appOptions) {\r\n        var _this = _super.call(this, appOptions) || this;\r\n        _this.appOptions = appOptions;\r\n        _this.findRoute = 'commerce/customers/{systemName}/{?customerId,searchQuery,page,rpp,sort,embed,fields}';\r\n        _this.getRoute = 'commerce/customers/{systemName}/{id}/{?embed,fields}';\r\n        _this.updateRoute = 'commerce/customers/{systemName}/{id}';\r\n        _this.deleteRoute = 'commerce/customers/{systemName}/{id}';\r\n        return _this;\r\n    }\r\n    /**\r\n     * Parses find commerce customers route which can be expanded with additional options. Supported items are:\r\n     * - `searchQuery` - A string value used to identify commerce resources using the phrase search.\r\n     * - `page` - A value used to set the page number, i.e. to retrieve certain commerce subset from the storage.\r\n     * - `rpp` - A value used to limit the size of result set per page.\r\n     * - `sort` - A string used to set the commerce property to sort the result collection by.\r\n     * - `embed` - Comma separated list of resources to be contained within the current representation.\r\n     * @method\r\n     * @example commerceCustomerRoute.find({searchQuery: '<search-phrase>'});\r\n     **/\r\n    CommerceCustomerRoute.prototype.find = function (options) {\r\n        return this.baseFind(this.findRoute, options);\r\n    };\r\n    /**\r\n     * Parses get route; this route doesn't expose any properties.\r\n     * @method\r\n     * @example commerceCustomerRoute.get(id, options);\r\n     **/\r\n    CommerceCustomerRoute.prototype.get = function (id, options) {\r\n        return this.baseGet(this.getRoute, id, options);\r\n    };\r\n    /**\r\n     * Parses update route; this route doesn't expose any properties.\r\n     * @method\r\n     * @example commerceCustomerRoute.update(data);\r\n     **/\r\n    CommerceCustomerRoute.prototype.update = function (data) {\r\n        return this.baseUpdate(this.updateRoute, data);\r\n    };\r\n    /**\r\n     * Parses delete route; this route doesn't expose any properties.\r\n     * @method\r\n     * @example commerceCustomerRoute.delete(data);\r\n     **/\r\n    CommerceCustomerRoute.prototype.delete = function (data) {\r\n        return this.baseDelete(this.deleteRoute, data);\r\n    };\r\n    return CommerceCustomerRoute;\r\n}(common_1.BaseRoute));\r\nCommerceCustomerRoute = tslib_1.__decorate([\r\n    inversify_1.injectable(),\r\n    tslib_1.__param(0, inversify_1.inject(contracts_1.TYPES.IAppOptions)),\r\n    tslib_1.__metadata(\"design:paramtypes\", [typeof (_a = typeof contracts_1.IAppOptions !== \"undefined\" && contracts_1.IAppOptions) === \"function\" && _a || Object])\r\n], CommerceCustomerRoute);\r\nexports.CommerceCustomerRoute = CommerceCustomerRoute;\r\nvar _a;\r\n/**\r\n * @copyright (c) 2017 Mono Ltd\r\n * @license MIT\r\n * @author Mono Ltd\r\n * @overview\r\n ***Notes:**\r\n - Refer to the [Baasic REST API](http://dev.baasic.com/api/reference/home) for detailed information about available Baasic REST API end-points.\r\n - [URI Template](https://github.com/Baasic/uritemplate-js) syntax enables expanding the Baasic route templates to Baasic REST URIs providing it with an object that contains URI parameters.\r\n - All end-point objects are transformed by the associated route service.\r\n */ \r\n\n\n\n//////////////////\n// WEBPACK FOOTER\n// ./src/modules/commerce/customer/commerceCustomerRoute.ts\n// module id = 170\n// module chunks = 0","\"use strict\";\r\nfunction __export(m) {\r\n    for (var p in m) if (!exports.hasOwnProperty(p)) exports[p] = m[p];\r\n}\r\nObject.defineProperty(exports, \"__esModule\", { value: true });\r\n__export(require(\"./commerceCustomerRoute\"));\r\n__export(require(\"./commerceCustomerClient\"));\r\n__export(require(\"./commerceCustomerPaymentMethodRoute\"));\r\n__export(require(\"./commerceCustomerPaymentMethodClient\"));\r\n\n\n\n//////////////////\n// WEBPACK FOOTER\n// ./src/modules/commerce/customer/index.ts\n// module id = 171\n// module chunks = 0","\"use strict\";\r\nObject.defineProperty(exports, \"__esModule\", { value: true });\r\nvar inversify_1 = require(\"inversify\");\r\nvar _1 = require(\"./\");\r\nvar TYPES = {\r\n    CommerceCustomerPaymentMethodClient: Symbol(\"CommerceCustomerPaymentMethodClient\"),\r\n    CommerceCustomerPaymentMethodRoute: Symbol(\"CommerceCustomerPaymentMethodRoute\"),\r\n    CommerceCustomerClient: Symbol(\"CommerceCustomerClient\"),\r\n    CommerceCustomerRoute: Symbol(\"CommerceCustomerRoute\"),\r\n    CommerceInvoiceClient: Symbol(\"CommerceInvoiceClient\"),\r\n    CommerceInvoiceRoute: Symbol(\"CommerceInvoiceRoute\"),\r\n    CommerceInvoiceStreamsClient: Symbol(\"CommerceInvoiceStreamsClient\"),\r\n    CommerceInvoiceStreamsRoute: Symbol(\"CommerceInvoiceStreamsRoute\"),\r\n    CommercePaymentTransactionClient: Symbol(\"CommercePaymentTransactionClient\"),\r\n    CommercePaymentTransactionRoute: Symbol(\"CommercePaymentTransactionRoute\"),\r\n    CommerceProductClient: Symbol(\"CommerceProductClient\"),\r\n    CommerceProductRoute: Symbol(\"CommerceProductRoute\"),\r\n    CommerceClient: Symbol(\"CommerceClient\"),\r\n    CommerceRoute: Symbol(\"CommerceRoute\"),\r\n    CommerceLookupsAddressTypesBatchClient: Symbol(\"CommerceLookupsAddressTypesBatchClient\"),\r\n    CommerceLookupsAddressTypeBatchRoute: Symbol(\"CommerceLookupsAddressTypeBatchRoute\"),\r\n    CommerceLookupsAddressTypesClient: Symbol(\"CommerceLookupsAddressTypesClient\"),\r\n    CommerceLookupsAddressTypeRoute: Symbol(\"CommerceLookupsAddressTypeRoute\"),\r\n    CommerceLookupsCountryBatchClient: Symbol(\"CommerceLookupsCountryBatchClient\"),\r\n    CommerceLookupsCountryBatchRoute: Symbol(\"CommerceLookupsCountryBatchRoute\"),\r\n    CommerceLookupsCountryClient: Symbol(\"CommerceLookupsCountryClient\"),\r\n    CommerceLookupsCountryRoute: Symbol(\"CommerceLookupsCountryRoute\"),\r\n    CommerceLookupsCountryStateBatchClient: Symbol(\"CommerceLookupsCountryStateBatchClient\"),\r\n    CommerceLookupsCountryStateBatchRoute: Symbol(\"CommerceLookupsCountryStateBatchRoute\"),\r\n    CommerceLookupsCountryStateClient: Symbol(\"CommerceLookupsCountryStateClient\"),\r\n    CommerceLookupsCountryStateRoute: Symbol(\"CommerceLookupsCountryStateRoute\"),\r\n    CommerceLookupsPaymentMethodBatchClient: Symbol(\"CommerceLookupsPaymentMethodBatchClient\"),\r\n    CommerceLookupsPaymentMethodBatchRoute: Symbol(\"CommerceLookupsPaymentMethodBatchRoute\"),\r\n    CommerceLookupsPaymentMethodClient: Symbol(\"CommerceLookupsPaymentMethodClient\"),\r\n    CommerceLookupsPaymentMethodRoute: Symbol(\"CommerceLookupsPaymentMethodRoute\"),\r\n    CommerceLookupsPaymentTransactionStatusBatchClient: Symbol(\"CommerceLookupsPaymentTransactionStatusBatchClient\"),\r\n    CommerceLookupsPaymentTransactionStatusBatchRoute: Symbol(\"CommerceLookupsPaymentTransactionStatusBatchRoute\"),\r\n    CommerceLookupsPaymentTransactionStatusClient: Symbol(\"CommerceLookupsPaymentTransactionStatusClient\"),\r\n    CommerceLookupsPaymentTransactionStatusRoute: Symbol(\"CommerceLookupsPaymentTransactionStatusRoute\"),\r\n    CommerceLookupsRecurringCyclePeriodTypeBatchClient: Symbol(\"CommerceLookupsRecurringCyclePeriodTypeBatchClient\"),\r\n    CommerceLookupsRecurringCyclePeriodTypeBatchRoute: Symbol(\"CommerceLookupsRecurringCyclePeriodTypeBatchRoute\"),\r\n    CommerceLookupsRecurringCyclePeriodTypeClient: Symbol(\"CommerceLookupsRecurringCyclePeriodTypeClient\"),\r\n    CommerceLookupsRecurringCyclePeriodTypeRoute: Symbol(\"CommerceLookupsRecurringCyclePeriodTypeRoute\"),\r\n    CommerceLookupsSubscriptionStatusBatchClient: Symbol(\"CommerceLookupsSubscriptionStatusBatchClient\"),\r\n    CommerceLookupsSubscriptionStatusBatchRoute: Symbol(\"CommerceLookupsSubscriptionStatusBatchRoute\"),\r\n    CommerceLookupsSubscriptionStatusClient: Symbol(\"CommerceLookupsSubscriptionStatusClient\"),\r\n    CommerceLookupsSubscriptionStatusRoute: Symbol(\"CommerceLookupsSubscriptionStatusRoute\"),\r\n    CommerceLookupsInvoiceStatusBatchRoute: Symbol(\"CommerceLookupsInvoiceStatusBatchRoute\"),\r\n    CommerceLookupsInvoiceStatusRoute: Symbol(\"CommerceLookupsInvoiceStatusRoute\"),\r\n    CommerceLookupsInvoiceStatusBatchClient: Symbol(\"CommerceLookupsInvoiceStatusBatchClient\"),\r\n    CommerceLookupsInvoiceStatusClient: Symbol(\"CommerceLookupsInvoiceStatusClient\"),\r\n    Lookups: Symbol(\"Lookups\")\r\n};\r\nexports.TYPES = TYPES;\r\nvar diModule = new inversify_1.ContainerModule(function (bind) {\r\n    bind(TYPES.CommerceCustomerPaymentMethodRoute).to(_1.CommerceCustomerPaymentMethodRoute);\r\n    bind(TYPES.CommerceCustomerPaymentMethodClient).to(_1.CommerceCustomerPaymentMethodClient);\r\n    bind(TYPES.CommerceCustomerRoute).to(_1.CommerceCustomerRoute);\r\n    bind(TYPES.CommerceCustomerClient).to(_1.CommerceCustomerClient);\r\n    bind(TYPES.CommerceInvoiceStreamsRoute).to(_1.CommerceInvoiceStreamsRoute);\r\n    bind(TYPES.CommerceInvoiceStreamsClient).to(_1.CommerceInvoiceStreamsClient);\r\n    bind(TYPES.CommerceInvoiceClient).to(_1.CommerceInvoiceClient);\r\n    bind(TYPES.CommerceInvoiceRoute).to(_1.CommerceInvoiceRoute);\r\n    bind(TYPES.CommercePaymentTransactionRoute).to(_1.CommercePaymentTransactionRoute);\r\n    bind(TYPES.CommercePaymentTransactionClient).to(_1.CommercePaymentTransactionClient);\r\n    bind(TYPES.CommerceProductRoute).to(_1.CommerceProductRoute);\r\n    bind(TYPES.CommerceProductClient).to(_1.CommerceProductClient);\r\n    bind(TYPES.CommerceRoute).to(_1.CommerceRoute);\r\n    bind(TYPES.CommerceClient).to(_1.CommerceClient);\r\n    bind(TYPES.CommerceLookupsAddressTypeBatchRoute).to(_1.CommerceLookupsAddressTypeBatchRoute);\r\n    bind(TYPES.CommerceLookupsAddressTypesBatchClient).to(_1.CommerceLookupsAddressTypesBatchClient);\r\n    bind(TYPES.CommerceLookupsAddressTypeRoute).to(_1.CommerceLookupsAddressTypeRoute);\r\n    bind(TYPES.CommerceLookupsAddressTypesClient).to(_1.CommerceLookupsAddressTypesClient);\r\n    bind(TYPES.CommerceLookupsCountryBatchRoute).to(_1.CommerceLookupsCountryBatchRoute);\r\n    bind(TYPES.CommerceLookupsCountryBatchClient).to(_1.CommerceLookupsCountryBatchClient);\r\n    bind(TYPES.CommerceLookupsCountryRoute).to(_1.CommerceLookupsCountryRoute);\r\n    bind(TYPES.CommerceLookupsCountryClient).to(_1.CommerceLookupsCountryClient);\r\n    bind(TYPES.CommerceLookupsCountryStateBatchRoute).to(_1.CommerceLookupsCountryStateBatchRoute);\r\n    bind(TYPES.CommerceLookupsCountryStateBatchClient).to(_1.CommerceLookupsCountryStateBatchClient);\r\n    bind(TYPES.CommerceLookupsCountryStateRoute).to(_1.CommerceLookupsCountryStateRoute);\r\n    bind(TYPES.CommerceLookupsCountryStateClient).to(_1.CommerceLookupsCountryStateClient);\r\n    bind(TYPES.CommerceLookupsPaymentMethodBatchRoute).to(_1.CommerceLookupsPaymentMethodBatchRoute);\r\n    bind(TYPES.CommerceLookupsPaymentMethodBatchClient).to(_1.CommerceLookupsPaymentMethodBatchClient);\r\n    bind(TYPES.CommerceLookupsPaymentMethodRoute).to(_1.CommerceLookupsPaymentMethodRoute);\r\n    bind(TYPES.CommerceLookupsPaymentMethodClient).to(_1.CommerceLookupsPaymentMethodClient);\r\n    bind(TYPES.CommerceLookupsPaymentTransactionStatusBatchRoute).to(_1.CommerceLookupsPaymentTransactionStatusBatchRoute);\r\n    bind(TYPES.CommerceLookupsPaymentTransactionStatusBatchClient).to(_1.CommerceLookupsPaymentTransactionStatusBatchClient);\r\n    bind(TYPES.CommerceLookupsPaymentTransactionStatusRoute).to(_1.CommerceLookupsPaymentTransactionStatusRoute);\r\n    bind(TYPES.CommerceLookupsPaymentTransactionStatusClient).to(_1.CommerceLookupsPaymentTransactionStatusClient);\r\n    bind(TYPES.CommerceLookupsRecurringCyclePeriodTypeBatchRoute).to(_1.CommerceLookupsRecurringCyclePeriodTypeBatchRoute);\r\n    bind(TYPES.CommerceLookupsRecurringCyclePeriodTypeBatchClient).to(_1.CommerceLookupsRecurringCyclePeriodTypeBatchClient);\r\n    bind(TYPES.CommerceLookupsRecurringCyclePeriodTypeRoute).to(_1.CommerceLookupsRecurringCyclePeriodTypeRoute);\r\n    bind(TYPES.CommerceLookupsRecurringCyclePeriodTypeClient).to(_1.CommerceLookupsRecurringCyclePeriodTypeClient);\r\n    bind(TYPES.CommerceLookupsSubscriptionStatusBatchRoute).to(_1.CommerceLookupsSubscriptionStatusBatchRoute);\r\n    bind(TYPES.CommerceLookupsSubscriptionStatusBatchClient).to(_1.CommerceLookupsSubscriptionStatusBatchClient);\r\n    bind(TYPES.CommerceLookupsSubscriptionStatusRoute).to(_1.CommerceLookupsSubscriptionStatusRoute);\r\n    bind(TYPES.CommerceLookupsSubscriptionStatusClient).to(_1.CommerceLookupsSubscriptionStatusClient);\r\n    bind(TYPES.CommerceLookupsInvoiceStatusBatchRoute).to(_1.CommerceLookupsInvoiceStatusBatchRoute);\r\n    bind(TYPES.CommerceLookupsInvoiceStatusRoute).to(_1.CommerceLookupsInvoiceStatusRoute);\r\n    bind(TYPES.CommerceLookupsInvoiceStatusBatchClient).to(_1.CommerceLookupsInvoiceStatusBatchClient);\r\n    bind(TYPES.CommerceLookupsInvoiceStatusClient).to(_1.CommerceLookupsInvoiceStatusClient);\r\n    bind(TYPES.Lookups).to(_1.Lookups);\r\n});\r\nexports.diModule = diModule;\r\n\n\n\n//////////////////\n// WEBPACK FOOTER\n// ./src/modules/commerce/diModule.ts\n// module id = 172\n// module chunks = 0","/* globals module */\r\n/**\r\n * @module commerceInvoiceClient\r\n * @description  Commerce Invoice Client provides an easy way to consume  Commerce REST API end-points. In order to obtain a needed routes `commerceInvoiceClient` uses `commerceInvoiceRoute`.\r\n */\r\n\"use strict\";\r\nObject.defineProperty(exports, \"__esModule\", { value: true });\r\nvar tslib_1 = require(\"tslib\");\r\nvar inversify_1 = require(\"inversify\");\r\n;\r\nvar httpApi_1 = require(\"../../../httpApi\");\r\nvar _1 = require(\"../\");\r\nvar CommerceInvoiceClient = (function () {\r\n    function CommerceInvoiceClient(commerceInvoiceRoute, commerceInvoiceStreamsClient, apiClient) {\r\n        this.commerceInvoiceRoute = commerceInvoiceRoute;\r\n        this.commerceInvoiceStreamsClient = commerceInvoiceStreamsClient;\r\n        this.apiClient = apiClient;\r\n    }\r\n    Object.defineProperty(CommerceInvoiceClient.prototype, \"routeDefinition\", {\r\n        get: function () {\r\n            return this.commerceInvoiceRoute;\r\n        },\r\n        enumerable: true,\r\n        configurable: true\r\n    });\r\n    Object.defineProperty(CommerceInvoiceClient.prototype, \"streams\", {\r\n        get: function () {\r\n            return this.commerceInvoiceStreamsClient;\r\n        },\r\n        enumerable: true,\r\n        configurable: true\r\n    });\r\n    /**\r\n     * Returns a promise that is resolved once the find action has been performed. Success response returns a list of commerce resources matching the given criteria.\r\n     * @method\r\n     * @example commerceInvoiceClient.find({\r\n                    pageNumber : 1,\r\n                    pageSize : 10,\r\n                    orderBy : '<field>',\r\n                    orderDirection : '<asc|desc>',\r\n                    search : '<search-phrase>'\r\n                })\r\n                .then(function (collection) {\r\n                    // perform success action here\r\n                },\r\n                 function (response, status, headers, config) {\r\n                     // perform error handling here\r\n                });\r\n     **/\r\n    CommerceInvoiceClient.prototype.find = function (options) {\r\n        return this.apiClient.get(this.routeDefinition.find(options));\r\n    };\r\n    /**\r\n     * Returns a promise that is resolved once the get action has been performed. Success response returns the commerce resource.\r\n     * @method\r\n     * @example commerceInvoiceClient.get()\r\n                    .then(function (data) {\r\n                        // perform success action here\r\n                    },\r\n                     function (response, status, headers, config) {\r\n                         // perform error handling here\r\n                    });\r\n     **/\r\n    CommerceInvoiceClient.prototype.get = function (id, options) {\r\n        return this.apiClient.get(this.commerceInvoiceRoute.get(id, options));\r\n    };\r\n    /**\r\n     * Returns a promise that is resolved once the update commerce action has been performed; this action updates a commerce resource. This route uses HAL enabled objects to obtain routes and therefore it doesn't apply `commerceInvoiceRoute` route template. Here is an example of how a route can be obtained from HAL enabled objects:\r\n     * ```\r\n     * let params = modelMapper.removeParams(commerceInvoice);\r\n     * let uri = params['model'].links('put').href;\r\n     * ```\r\n     * @method\r\n     * @example // commerceInvoice is a resource previously fetched using get action.\r\n                    commerceInvoice.invoiceStatusId : '<new-invoice-status-id>';\r\n                    commerceInvoiceClient.update(commerceInvoice)\r\n                        .then(function (data) {\r\n                            // perform success action here\r\n                        },\r\n                         function (response, status, headers, config) {\r\n                             // perform error handling here\r\n                        });\r\n     **/\r\n    CommerceInvoiceClient.prototype.update = function (data) {\r\n        return this.apiClient.put(this.routeDefinition.update(data), this.routeDefinition.updateParams(data));\r\n    };\r\n    /**\r\n     * Returns a promise that is resolved once the remove action has been performed. This action will remove a commerce resource from the system if successfully completed. This route uses HAL enabled objects to obtain routes and therefore it doesn't apply `commerceInvoiceRoute` route template. Here is an example of how a route can be obtained from HAL enabled objects:\r\n     * ```\r\n     * let params = modelMapper.removeParams(commerceInvoice);\r\n     * let uri = params['model'].links('delete').href;\r\n     * ```\r\n     * @method\r\n     * @example // commerceInvoice is a resource previously fetched using get action.\r\n                        commerceInvoiceClient.remove(commerceInvoice)\r\n                            .then(function (data) {\r\n                                // perform success action here\r\n                            },\r\n                             function (response, status, headers, config) {\r\n                                 // perform error handling here\r\n                            });\r\n     **/\r\n    CommerceInvoiceClient.prototype.remove = function (data) {\r\n        return this.apiClient.delete(this.routeDefinition.delete(data));\r\n    };\r\n    return CommerceInvoiceClient;\r\n}());\r\nCommerceInvoiceClient = tslib_1.__decorate([\r\n    inversify_1.injectable(),\r\n    tslib_1.__param(0, inversify_1.inject(_1.TYPES.CommerceInvoiceRoute)),\r\n    tslib_1.__param(1, inversify_1.inject(_1.TYPES.CommerceInvoiceStreamsClient)),\r\n    tslib_1.__param(2, inversify_1.inject(httpApi_1.httpTYPES.ApiClient)),\r\n    tslib_1.__metadata(\"design:paramtypes\", [typeof (_a = typeof _1.CommerceInvoiceRoute !== \"undefined\" && _1.CommerceInvoiceRoute) === \"function\" && _a || Object, typeof (_b = typeof _1.CommerceInvoiceStreamsClient !== \"undefined\" && _1.CommerceInvoiceStreamsClient) === \"function\" && _b || Object, typeof (_c = typeof httpApi_1.ApiClient !== \"undefined\" && httpApi_1.ApiClient) === \"function\" && _c || Object])\r\n], CommerceInvoiceClient);\r\nexports.CommerceInvoiceClient = CommerceInvoiceClient;\r\nvar _a, _b, _c;\r\n\n\n\n//////////////////\n// WEBPACK FOOTER\n// ./src/modules/commerce/invoice/commerceInvoiceClient.ts\n// module id = 173\n// module chunks = 0","/* globals module */\r\n/**\r\n * @module commerceInvoiceRoute\r\n * @description Baasic Commerce Invoice Route Definition provides Baasic route templates which can be expanded to Baasic REST URIs. Various services can use Baasic Commerce Invoice Route Definition to obtain a needed routes while other routes will be obtained through HAL. By convention, all route services  use the same function names as their corresponding services.\r\n */\r\n\"use strict\";\r\nObject.defineProperty(exports, \"__esModule\", { value: true });\r\nvar tslib_1 = require(\"tslib\");\r\nvar inversify_1 = require(\"inversify\");\r\nvar common_1 = require(\"../../../common\");\r\n;\r\nvar contracts_1 = require(\"../../../core/contracts\");\r\nvar _1 = require(\"../\");\r\nvar CommerceInvoiceRoute = (function (_super) {\r\n    tslib_1.__extends(CommerceInvoiceRoute, _super);\r\n    function CommerceInvoiceRoute(commerceInvoiceStreamsRoute, appOptions) {\r\n        var _this = _super.call(this, appOptions) || this;\r\n        _this.commerceInvoiceStreamsRoute = commerceInvoiceStreamsRoute;\r\n        _this.appOptions = appOptions;\r\n        _this.findRoute = 'commerce/invoices/{?customerId,invoiceStatusId,subscriptionId,dateCreatedMin,dateCreatedMax,searchQuery,page,rpp,sort,embed,fields}';\r\n        _this.getRoute = 'commerce/invoices/{id}/{?embed,fields}';\r\n        _this.updateRoute = 'commerce/invoices/{id}';\r\n        _this.deleteRoute = 'commerce/invoices/{id}';\r\n        return _this;\r\n    }\r\n    Object.defineProperty(CommerceInvoiceRoute.prototype, \"streams\", {\r\n        get: function () {\r\n            return this.commerceInvoiceStreamsRoute;\r\n        },\r\n        enumerable: true,\r\n        configurable: true\r\n    });\r\n    /**\r\n     * Parses find commerce invoice route which can be expanded with additional options. Supported items are:\r\n     * - `customerId` - The customer identifier.\r\n     * - `invoiceStatusId` - A invoice status unique identifier.\r\n     * - `subscriptionId` - A subscription unique identifier.\r\n     * - `dateCreatedMin` - A date created minimum date filter.\r\n     * - `dateCreatedMax` - A date created maximum date filter.\r\n     * - `searchQuery` - A string value used to identify commerce resources using the phrase search.\r\n     * - `page` - A value used to set the page number, i.e. to retrieve certain commerce subset from the storage.\r\n     * - `rpp` - A value used to limit the size of result set per page.\r\n     * - `sort` - A string used to set the commerce property to sort the result collection by.\r\n     * - `embed` - Comma separated list of resources to be contained within the current representation.\r\n     * @method\r\n     * @example commerceInvoiceRoute.find({searchQuery: '<search-phrase>'});\r\n     **/\r\n    CommerceInvoiceRoute.prototype.find = function (options) {\r\n        return _super.prototype.baseFind.call(this, this.findRoute, options);\r\n    };\r\n    /**\r\n     * Parses get route; this route doesn't expose any properties.\r\n     * @method\r\n     * @example commerceInvoiceRoute.get(id, options);\r\n     **/\r\n    CommerceInvoiceRoute.prototype.get = function (id, options) {\r\n        return _super.prototype.baseGet.call(this, this.getRoute, id, options);\r\n    };\r\n    /**\r\n     * Parses update route; this route doesn't expose any properties.\r\n     * @method\r\n     * @example commerceInvoiceRoute.update(data);\r\n     **/\r\n    CommerceInvoiceRoute.prototype.update = function (data) {\r\n        return _super.prototype.baseUpdate.call(this, this.updateRoute, data);\r\n    };\r\n    /**\r\n     * Parses delete route; this route doesn't expose any properties.\r\n     * @method\r\n     * @example commerceInvoiceRoute.delete(data);\r\n     **/\r\n    CommerceInvoiceRoute.prototype.delete = function (data) {\r\n        return _super.prototype.baseDelete.call(this, this.deleteRoute, data);\r\n    };\r\n    return CommerceInvoiceRoute;\r\n}(common_1.BaseRoute));\r\nCommerceInvoiceRoute = tslib_1.__decorate([\r\n    inversify_1.injectable(),\r\n    tslib_1.__param(0, inversify_1.inject(_1.TYPES.CommerceInvoiceStreamsRoute)),\r\n    tslib_1.__param(1, inversify_1.inject(contracts_1.TYPES.IAppOptions)),\r\n    tslib_1.__metadata(\"design:paramtypes\", [typeof (_a = typeof _1.CommerceInvoiceStreamsRoute !== \"undefined\" && _1.CommerceInvoiceStreamsRoute) === \"function\" && _a || Object, typeof (_b = typeof contracts_1.IAppOptions !== \"undefined\" && contracts_1.IAppOptions) === \"function\" && _b || Object])\r\n], CommerceInvoiceRoute);\r\nexports.CommerceInvoiceRoute = CommerceInvoiceRoute;\r\nvar _a, _b;\r\n/**\r\n * @copyright (c) 2017 Mono Ltd\r\n * @license MIT\r\n * @author Mono Ltd\r\n * @overview\r\n ***Notes:**\r\n - Refer to the [Baasic REST API](http://dev.baasic.com/api/reference/home) for detailed information about available Baasic REST API end-points.\r\n - [URI Template](https://github.com/Baasic/uritemplate-js) syntax enables expanding the Baasic route templates to Baasic REST URIs providing it with an object that contains URI parameters.\r\n - All end-point objects are transformed by the associated route service.\r\n */ \r\n\n\n\n//////////////////\n// WEBPACK FOOTER\n// ./src/modules/commerce/invoice/commerceInvoiceRoute.ts\n// module id = 174\n// module chunks = 0","/* globals module */\r\n/**\r\n * @module commerceInvoiceStreamsClient\r\n * @description  Commerce Invoice Streams Client provides an easy way to consume  Commerce REST API end-points. In order to obtain a needed routes `commerceInvoiceStreamsClient` uses `commerceInvoiceStreamsRoute`.\r\n */\r\n\"use strict\";\r\nObject.defineProperty(exports, \"__esModule\", { value: true });\r\nvar tslib_1 = require(\"tslib\");\r\nvar inversify_1 = require(\"inversify\");\r\n;\r\nvar httpApi_1 = require(\"../../../httpApi\");\r\nvar _1 = require(\"../\");\r\nvar CommerceInvoiceStreamsClient = (function () {\r\n    function CommerceInvoiceStreamsClient(commerceInvoiceStreamsRoute, apiClient) {\r\n        this.commerceInvoiceStreamsRoute = commerceInvoiceStreamsRoute;\r\n        this.apiClient = apiClient;\r\n    }\r\n    Object.defineProperty(CommerceInvoiceStreamsClient.prototype, \"routeDefinition\", {\r\n        get: function () {\r\n            return this.commerceInvoiceStreamsRoute;\r\n        },\r\n        enumerable: true,\r\n        configurable: true\r\n    });\r\n    /**\r\n     * Returns a promise that is resolved once the get action has been performed. Success response returns the invoice stream if successfully completed.\r\n     * @method\r\n     * @example // commerceInvoice is a resource previously fetched using get action.\r\n                    commerceInvoiceStreamsClient.get({id: commerceInvoice.id})\r\n                        .then(function (data) {\r\n                            // perform success action here\r\n                        },\r\n                         function (response, status, headers, config) {\r\n                             // perform error handling here\r\n                        });\r\n     **/\r\n    CommerceInvoiceStreamsClient.prototype.get = function (data) {\r\n        return this.apiClient.get(this.routeDefinition.get(data));\r\n    };\r\n    /**\r\n     * Returns a promise that is resolved once the get action has been performed. Success response returns the invoice stream as a blob. For more information on Blob objects please see [Blob Documentation](https://developer.mozilla.org/en-US/docs/Web/API/Blob).\r\n     * @method\r\n     * @example // Request the original blob\r\n                        commerceInvoiceClient.getBlobl({id: commerceInvoice.id})\r\n                            .then(function (data) {\r\n                                // perform success action here\r\n                            },\r\n                             function (response, status, headers, config) {\r\n                                 // perform error handling here\r\n                            });\r\n     **/\r\n    CommerceInvoiceStreamsClient.prototype.getBlob = function (data) {\r\n        return this.apiClient.get(this.commerceInvoiceStreamsRoute.get(data), { 'Accept': 'application/octet-stream' });\r\n    };\r\n    return CommerceInvoiceStreamsClient;\r\n}());\r\nCommerceInvoiceStreamsClient = tslib_1.__decorate([\r\n    inversify_1.injectable(),\r\n    tslib_1.__param(0, inversify_1.inject(_1.TYPES.CommerceInvoiceStreamsRoute)),\r\n    tslib_1.__param(1, inversify_1.inject(httpApi_1.httpTYPES.ApiClient)),\r\n    tslib_1.__metadata(\"design:paramtypes\", [typeof (_a = typeof _1.CommerceInvoiceStreamsRoute !== \"undefined\" && _1.CommerceInvoiceStreamsRoute) === \"function\" && _a || Object, typeof (_b = typeof httpApi_1.ApiClient !== \"undefined\" && httpApi_1.ApiClient) === \"function\" && _b || Object])\r\n], CommerceInvoiceStreamsClient);\r\nexports.CommerceInvoiceStreamsClient = CommerceInvoiceStreamsClient;\r\nvar _a, _b;\r\n/**\r\n * @copyright (c) 2017 Mono Ltd\r\n * @license MIT\r\n * @author Mono Ltd\r\n * @overview\r\n ***Notes:**\r\n - Refer to the [Baasic REST API](http://dev.baasic.com/api/reference/home) for detailed information about available Baasic REST API end-points.\r\n - All end-point objects are transformed by the associated route service.\r\n */ \r\n\n\n\n//////////////////\n// WEBPACK FOOTER\n// ./src/modules/commerce/invoice/commerceInvoiceStreamsClient.ts\n// module id = 175\n// module chunks = 0","/* globals module */\r\n/**\r\n * @module commerceInvoiceStreamsRoute\r\n * @description Baasic Commerce Invoice Streams Route Definition provides Baasic route templates which can be expanded to Baasic REST URIs. Various services can use Baasic Commerce Invoice Streams Route Definition to obtain a needed routes while other routes will be obtained through HAL. By convention, all route services  use the same function names as their corresponding services.\r\n */\r\n\"use strict\";\r\nObject.defineProperty(exports, \"__esModule\", { value: true });\r\nvar tslib_1 = require(\"tslib\");\r\nvar inversify_1 = require(\"inversify\");\r\nvar common_1 = require(\"../../../common\");\r\n;\r\nvar contracts_1 = require(\"../../../core/contracts\");\r\nvar CommerceInvoiceStreamsRoute = (function (_super) {\r\n    tslib_1.__extends(CommerceInvoiceStreamsRoute, _super);\r\n    function CommerceInvoiceStreamsRoute(appOptions) {\r\n        var _this = _super.call(this, appOptions) || this;\r\n        _this.appOptions = appOptions;\r\n        _this.getRoute = 'commerce/invoice-streams/{id}';\r\n        return _this;\r\n    }\r\n    /**\r\n     * Parses get route; this route doesn't expose any properties.\r\n     * @method\r\n     * @example commerceInvoiceStremsRoute.get(data);\r\n     **/\r\n    CommerceInvoiceStreamsRoute.prototype.get = function (data) {\r\n        if (!this.utility.isObject(data)) {\r\n            data = {\r\n                id: data\r\n            };\r\n        }\r\n        return _super.prototype.baseCreate.call(this, this.getRoute, data);\r\n    };\r\n    return CommerceInvoiceStreamsRoute;\r\n}(common_1.BaseRoute));\r\nCommerceInvoiceStreamsRoute = tslib_1.__decorate([\r\n    inversify_1.injectable(),\r\n    tslib_1.__param(0, inversify_1.inject(contracts_1.TYPES.IAppOptions)),\r\n    tslib_1.__metadata(\"design:paramtypes\", [typeof (_a = typeof contracts_1.IAppOptions !== \"undefined\" && contracts_1.IAppOptions) === \"function\" && _a || Object])\r\n], CommerceInvoiceStreamsRoute);\r\nexports.CommerceInvoiceStreamsRoute = CommerceInvoiceStreamsRoute;\r\nvar _a;\r\n/**\r\n * @copyright (c) 2017 Mono Ltd\r\n * @license MIT\r\n * @author Mono Ltd\r\n * @overview\r\n ***Notes:**\r\n - Refer to the [Baasic REST API](http://dev.baasic.com/api/reference/home) for detailed information about available Baasic REST API end-points.\r\n - [URI Template](https://github.com/Baasic/uritemplate-js) syntax enables expanding the Baasic route templates to Baasic REST URIs providing it with an object that contains URI parameters.\r\n - All end-point objects are transformed by the associated route service.\r\n */ \r\n\n\n\n//////////////////\n// WEBPACK FOOTER\n// ./src/modules/commerce/invoice/commerceInvoiceStreamsRoute.ts\n// module id = 176\n// module chunks = 0","\"use strict\";\r\nfunction __export(m) {\r\n    for (var p in m) if (!exports.hasOwnProperty(p)) exports[p] = m[p];\r\n}\r\nObject.defineProperty(exports, \"__esModule\", { value: true });\r\n__export(require(\"./commerceInvoiceStreamsRoute\"));\r\n__export(require(\"./commerceInvoiceStreamsClient\"));\r\n__export(require(\"./commerceInvoiceRoute\"));\r\n__export(require(\"./commerceInvoiceClient\"));\r\n\n\n\n//////////////////\n// WEBPACK FOOTER\n// ./src/modules/commerce/invoice/index.ts\n// module id = 177\n// module chunks = 0","/* globals module */\r\n/**\r\n * @module commerceLookupsAddressTypeBatchClient\r\n * @description  Commerce Lookups Address Type Batch Client provides an easy way to consume  Commerce REST API end-points. In order to obtain a needed routes `commerceLookupsAddressTypesBatchClient` uses `commerceLookupsAddressTypeBatchRoute`.\r\n */\r\n\"use strict\";\r\nObject.defineProperty(exports, \"__esModule\", { value: true });\r\nvar tslib_1 = require(\"tslib\");\r\nvar inversify_1 = require(\"inversify\");\r\n;\r\nvar httpApi_1 = require(\"../../../../httpApi\");\r\nvar _1 = require(\"../../\");\r\nvar CommerceLookupsAddressTypesBatchClient = (function () {\r\n    function CommerceLookupsAddressTypesBatchClient(commerceLookupsAddressTypeBatchRoute, apiClient) {\r\n        this.commerceLookupsAddressTypeBatchRoute = commerceLookupsAddressTypeBatchRoute;\r\n        this.apiClient = apiClient;\r\n    }\r\n    Object.defineProperty(CommerceLookupsAddressTypesBatchClient.prototype, \"routeDefinition\", {\r\n        get: function () {\r\n            return this.commerceLookupsAddressTypeBatchRoute;\r\n        },\r\n        enumerable: true,\r\n        configurable: true\r\n    });\r\n    /**\r\n     * Returns a promise that is resolved once the create commerce action has been performed; this action creates a new commerce resources.\r\n     * @method\r\n     * @example commerceLookupsAddressTypeBatchClient.create([{\r\n                     name : '<name>',\r\n                     abrv: '<abbreviation>',\r\n                     description: '<description>'\r\n                    }])\r\n                    .then(function (data) {\r\n                        // perform success action here\r\n                    },\r\n                     function (response, status, headers, config) {\r\n                         // perform error handling here\r\n                    });\r\n     **/\r\n    CommerceLookupsAddressTypesBatchClient.prototype.create = function (data) {\r\n        return this.apiClient.post(this.routeDefinition.create(), this.routeDefinition.createParams(data));\r\n    };\r\n    /**\r\n     * Returns a promise that is resolved once the update commerce action has been performed; this action updates specified commerce resources.\r\n     * @method\r\n     * @example   commerceLookupsAddressTypeBatchClient.update(commerceAddressTypes)\r\n                       .then(function (data) {\r\n                           // perform success action here\r\n                       },\r\n                        function (response, status, headers, config) {\r\n                            // perform error handling here\r\n                       });\r\n    **/\r\n    CommerceLookupsAddressTypesBatchClient.prototype.update = function (data) {\r\n        return this.apiClient.put(this.routeDefinition.update(), this.routeDefinition.updateParams(data));\r\n    };\r\n    /**\r\n     * Returns a promise that is resolved once the remove commerce action has been performed. This action will remove commerce resources from the system if successfully completed.\r\n     * @method\r\n     * @example commerceLookupsAddressTypeClient.remove(commerceAddressTypeIds)\r\n                    .then(function (data) {\r\n                        // perform success action here\r\n                    },\r\n                     function (response, status, headers, config) {\r\n                         // perform error handling here\r\n                    });\r\n     **/\r\n    CommerceLookupsAddressTypesBatchClient.prototype.remove = function (ids) {\r\n        return this.apiClient.delete(this.commerceLookupsAddressTypeBatchRoute.delete(), undefined, ids);\r\n    };\r\n    return CommerceLookupsAddressTypesBatchClient;\r\n}());\r\nCommerceLookupsAddressTypesBatchClient = tslib_1.__decorate([\r\n    inversify_1.injectable(),\r\n    tslib_1.__param(0, inversify_1.inject(_1.TYPES.CommerceLookupsAddressTypeBatchRoute)),\r\n    tslib_1.__param(1, inversify_1.inject(httpApi_1.httpTYPES.ApiClient)),\r\n    tslib_1.__metadata(\"design:paramtypes\", [typeof (_a = typeof _1.CommerceLookupsAddressTypeBatchRoute !== \"undefined\" && _1.CommerceLookupsAddressTypeBatchRoute) === \"function\" && _a || Object, typeof (_b = typeof httpApi_1.ApiClient !== \"undefined\" && httpApi_1.ApiClient) === \"function\" && _b || Object])\r\n], CommerceLookupsAddressTypesBatchClient);\r\nexports.CommerceLookupsAddressTypesBatchClient = CommerceLookupsAddressTypesBatchClient;\r\nvar _a, _b;\r\n/**\r\n * @copyright (c) 2017 Mono Ltd\r\n * @license MIT\r\n * @author Mono Ltd\r\n * @overview\r\n ***Notes:**\r\n - Refer to the [Baasic REST API](http://dev.baasic.com/api/reference/home) for detailed information about available Baasic REST API end-points.\r\n - All end-point objects are transformed by the associated route service.\r\n */ \r\n\n\n\n//////////////////\n// WEBPACK FOOTER\n// ./src/modules/commerce/lookups/addressType/commerceLookupsAddressTypeBatchClient.ts\n// module id = 178\n// module chunks = 0","/* globals module */\r\n/**\r\n * @module commerceLookupsAddressTypeBatchRoute\r\n * @description Baasic Commerce Lookups AddressType Batch Route Definition provides Baasic route templates which can be expanded to Baasic REST URIs. Various services can use Baasic Commerce Lookups AddressType Batch Route Definition to obtain a needed routes while other routes will be obtained through HAL. By convention, all route services  use the same function names as their corresponding services.\r\n */\r\n\"use strict\";\r\nObject.defineProperty(exports, \"__esModule\", { value: true });\r\nvar tslib_1 = require(\"tslib\");\r\nvar inversify_1 = require(\"inversify\");\r\nvar common_1 = require(\"../../../../common\");\r\n;\r\nvar contracts_1 = require(\"../../../../core/contracts\");\r\nvar CommerceLookupsAddressTypeBatchRoute = (function (_super) {\r\n    tslib_1.__extends(CommerceLookupsAddressTypeBatchRoute, _super);\r\n    function CommerceLookupsAddressTypeBatchRoute(appOptions) {\r\n        var _this = _super.call(this, appOptions) || this;\r\n        _this.appOptions = appOptions;\r\n        _this.createRoute = 'commerce/lookups/address-types/batch';\r\n        _this.updateRoute = 'commerce/lookups/address-types/batch';\r\n        _this.deleteRoute = 'commerce/lookups/address-types/batch';\r\n        return _this;\r\n    }\r\n    /**\r\n     * Parses create commerce address type batch route; this route does not expose any additional options\r\n     * @method\r\n     * @example commerceLookupsAddressTypeRoute.create();\r\n     */\r\n    CommerceLookupsAddressTypeBatchRoute.prototype.create = function () {\r\n        return _super.prototype.baseCreate.call(this, this.createRoute, {});\r\n    };\r\n    /**\r\n     * Parses remove commerce address type batch route; this route does not expose any additional options\r\n     * @method\r\n     * @example commerceLookupsAddressTypeRoute.update();\r\n     */\r\n    CommerceLookupsAddressTypeBatchRoute.prototype.update = function () {\r\n        return _super.prototype.baseUpdate.call(this, this.updateRoute, {});\r\n    };\r\n    /**\r\n     * Parses remove commerce address type batch route; this route does not expose any additional options\r\n     * @method\r\n     * @example commerceLookupsAddressTypeRoute.remove();\r\n     */\r\n    CommerceLookupsAddressTypeBatchRoute.prototype.delete = function () {\r\n        return _super.prototype.baseDelete.call(this, this.deleteRoute, {});\r\n    };\r\n    return CommerceLookupsAddressTypeBatchRoute;\r\n}(common_1.BaseRoute));\r\nCommerceLookupsAddressTypeBatchRoute = tslib_1.__decorate([\r\n    inversify_1.injectable(),\r\n    tslib_1.__param(0, inversify_1.inject(contracts_1.TYPES.IAppOptions)),\r\n    tslib_1.__metadata(\"design:paramtypes\", [typeof (_a = typeof contracts_1.IAppOptions !== \"undefined\" && contracts_1.IAppOptions) === \"function\" && _a || Object])\r\n], CommerceLookupsAddressTypeBatchRoute);\r\nexports.CommerceLookupsAddressTypeBatchRoute = CommerceLookupsAddressTypeBatchRoute;\r\nvar _a;\r\n/**\r\n * @copyright (c) 2017 Mono Ltd\r\n * @license MIT\r\n * @author Mono Ltd\r\n * @overview\r\n ***Notes:**\r\n - Refer to the [Baasic REST API](http://dev.baasic.com/api/reference/home) for detailed information about available Baasic REST API end-points.\r\n - [URI Template](https://github.com/Baasic/uritemplate-js) syntax enables expanding the Baasic route templates to Baasic REST URIs providing it with an object that contains URI parameters.\r\n - All end-point objects are transformed by the associated route service.\r\n */ \r\n\n\n\n//////////////////\n// WEBPACK FOOTER\n// ./src/modules/commerce/lookups/addressType/commerceLookupsAddressTypeBatchRoute.ts\n// module id = 179\n// module chunks = 0","/* globals module */\r\n/**\r\n * @module commerceLookupsAddressTypeClient\r\n * @description  Commerce Lookups Address Type Client provides an easy way to consume  Commerce REST API end-points. In order to obtain a needed routes `commerceLookupsAddressTypesClient` uses `commerceLookupsAddressTypeRoute`.\r\n */\r\n\"use strict\";\r\nObject.defineProperty(exports, \"__esModule\", { value: true });\r\nvar tslib_1 = require(\"tslib\");\r\nvar inversify_1 = require(\"inversify\");\r\n;\r\nvar httpApi_1 = require(\"../../../../httpApi\");\r\nvar _1 = require(\"../../\");\r\nvar CommerceLookupsAddressTypesClient = (function () {\r\n    function CommerceLookupsAddressTypesClient(commerceLookupsAddressTypeRoute, commerceLookupsAddressTypesBatchClient, apiClient) {\r\n        this.commerceLookupsAddressTypeRoute = commerceLookupsAddressTypeRoute;\r\n        this.commerceLookupsAddressTypesBatchClient = commerceLookupsAddressTypesBatchClient;\r\n        this.apiClient = apiClient;\r\n    }\r\n    Object.defineProperty(CommerceLookupsAddressTypesClient.prototype, \"routeDefinition\", {\r\n        get: function () {\r\n            return this.commerceLookupsAddressTypeRoute;\r\n        },\r\n        enumerable: true,\r\n        configurable: true\r\n    });\r\n    Object.defineProperty(CommerceLookupsAddressTypesClient.prototype, \"batch\", {\r\n        get: function () {\r\n            return this.commerceLookupsAddressTypesBatchClient;\r\n        },\r\n        enumerable: true,\r\n        configurable: true\r\n    });\r\n    /**\r\n     * Returns a promise that is resolved once the find action has been performed. Success response returns a list of commerce resources matching the given criteria.\r\n     * @method\r\n     * @example commerceLookupsAddressTypeClient.find({\r\n                    pageNumber : 1,\r\n                    pageSize : 10,\r\n                    orderBy : '<field>',\r\n                    orderDirection : '<asc|desc>',\r\n                    search : '<search-phrase>'\r\n                })\r\n                .then(function (collection) {\r\n                    // perform success action here\r\n                },\r\n                 function (response, status, headers, config) {\r\n                     // perform error handling here\r\n                });\r\n     **/\r\n    CommerceLookupsAddressTypesClient.prototype.find = function (options) {\r\n        return this.apiClient.get(this.routeDefinition.find(options));\r\n    };\r\n    /**\r\n     * Returns a promise that is resolved once the get action has been performed. Success response returns the commerce resource.\r\n     * @method\r\n     * @example commerceLookupsAddressTypeClient.get()\r\n                   .then(function (data) {\r\n                       // perform success action here\r\n                   },\r\n                    function (response, status, headers, config) {\r\n                        // perform error handling here\r\n                   });\r\n    **/\r\n    CommerceLookupsAddressTypesClient.prototype.get = function (id, options) {\r\n        return this.apiClient.get(this.commerceLookupsAddressTypeRoute.get(id, options));\r\n    };\r\n    /**\r\n     * Returns a promise that is resolved once the create commerce action has been performed; this action creates a new commerce resource.\r\n     * @method\r\n     * @example commerceLookupsAddressTypeClient.create({\r\n                       name : '<name>',\r\n                       abrv: '<abbreviation>',\r\n                       description: '<description>'\r\n                   })\r\n                   .then(function (data) {\r\n                       // perform success action here\r\n                   },\r\n                    function (response, status, headers, config) {\r\n                        // perform error handling here\r\n                   });\r\n    **/\r\n    CommerceLookupsAddressTypesClient.prototype.create = function (data) {\r\n        return this.apiClient.post(this.routeDefinition.create(), this.routeDefinition.createParams(data));\r\n    };\r\n    /**\r\n     * Returns a promise that is resolved once the update commerce action has been performed; this action updates a commerce resource. This route uses HAL enabled objects to obtain routes and therefore it doesn't apply `commerceLookupsAddressTypeRoute` route template. Here is an example of how a route can be obtained from HAL enabled objects:\r\n     * ```\r\n     * let params = modelMapper.removeParams(commerceAddressType);\r\n     * let uri = params['model'].links('put').href;\r\n     * ```\r\n     * @method\r\n     * @example // commerceAddressType is a resource previously fetched using get action.\r\n                    commerceAddressType.description = '<description>';\r\n                    commerceLookupsAddressTypeClient.update(commerceAddressType)\r\n                        .then(function (data) {\r\n                            // perform success action here\r\n                        },\r\n                         function (response, status, headers, config) {\r\n                             // perform error handling here\r\n                        });\r\n     **/\r\n    CommerceLookupsAddressTypesClient.prototype.update = function (data) {\r\n        return this.apiClient.put(this.routeDefinition.update(data), this.routeDefinition.updateParams(data));\r\n    };\r\n    /**\r\n     * Returns a promise that is resolved once the remove action has been performed. This action will remove a commerce resource from the system if successfully completed. This route uses HAL enabled objects to obtain routes and therefore it doesn't apply `commerceLookupsAddressTypeRoute` route template. Here is an example of how a route can be obtained from HAL enabled objects:\r\n     * ```\r\n     * let params = modelMapper.removeParams(commerceAddressType);\r\n     * let uri = params['model'].links('delete').href;\r\n     * ```\r\n     * @method\r\n     * @example // commerceAddressType is a resource previously fetched using get action.\r\n                    commerceLookupsAddressTypeClient.remove(commerceAddressType)\r\n                        .then(function (data) {\r\n                            // perform success action here\r\n                        },\r\n                         function (response, status, headers, config) {\r\n                             // perform error handling here\r\n                        });\r\n     **/\r\n    CommerceLookupsAddressTypesClient.prototype.remove = function (data) {\r\n        return this.apiClient.delete(this.routeDefinition.delete(data));\r\n    };\r\n    return CommerceLookupsAddressTypesClient;\r\n}());\r\nCommerceLookupsAddressTypesClient = tslib_1.__decorate([\r\n    inversify_1.injectable(),\r\n    tslib_1.__param(0, inversify_1.inject(_1.TYPES.CommerceLookupsAddressTypeRoute)),\r\n    tslib_1.__param(1, inversify_1.inject(_1.TYPES.CommerceLookupsAddressTypesBatchClient)),\r\n    tslib_1.__param(2, inversify_1.inject(httpApi_1.httpTYPES.ApiClient)),\r\n    tslib_1.__metadata(\"design:paramtypes\", [typeof (_a = typeof _1.CommerceLookupsAddressTypeRoute !== \"undefined\" && _1.CommerceLookupsAddressTypeRoute) === \"function\" && _a || Object, typeof (_b = typeof _1.CommerceLookupsAddressTypesBatchClient !== \"undefined\" && _1.CommerceLookupsAddressTypesBatchClient) === \"function\" && _b || Object, typeof (_c = typeof httpApi_1.ApiClient !== \"undefined\" && httpApi_1.ApiClient) === \"function\" && _c || Object])\r\n], CommerceLookupsAddressTypesClient);\r\nexports.CommerceLookupsAddressTypesClient = CommerceLookupsAddressTypesClient;\r\nvar _a, _b, _c;\r\n/**\r\n * @copyright (c) 2017 Mono Ltd\r\n * @license MIT\r\n * @author Mono Ltd\r\n * @overview\r\n ***Notes:**\r\n - Refer to the [Baasic REST API](http://dev.baasic.com/api/reference/home) for detailed information about available Baasic REST API end-points.\r\n - All end-point objects are transformed by the associated route service.\r\n */ \r\n\n\n\n//////////////////\n// WEBPACK FOOTER\n// ./src/modules/commerce/lookups/addressType/commerceLookupsAddressTypeClient.ts\n// module id = 180\n// module chunks = 0","/* globals module */\r\n/**\r\n * @module commerceLookupsAddressTypeRoute\r\n * @description Baasic Commerce Lookups AddressType Route Definition provides Baasic route templates which can be expanded to Baasic REST URIs. Various services can use Baasic Commerce Lookups AddressType Route Definition to obtain a needed routes while other routes will be obtained through HAL. By convention, all route services  use the same function names as their corresponding services.\r\n */\r\n\"use strict\";\r\nObject.defineProperty(exports, \"__esModule\", { value: true });\r\nvar tslib_1 = require(\"tslib\");\r\nvar inversify_1 = require(\"inversify\");\r\nvar common_1 = require(\"../../../../common\");\r\n;\r\nvar contracts_1 = require(\"../../../../core/contracts\");\r\nvar _1 = require(\"../../\");\r\nvar CommerceLookupsAddressTypeRoute = (function (_super) {\r\n    tslib_1.__extends(CommerceLookupsAddressTypeRoute, _super);\r\n    function CommerceLookupsAddressTypeRoute(commerceLookupsAddressTypeBatchRoute, appOptions) {\r\n        var _this = _super.call(this, appOptions) || this;\r\n        _this.commerceLookupsAddressTypeBatchRoute = commerceLookupsAddressTypeBatchRoute;\r\n        _this.appOptions = appOptions;\r\n        _this.findRoute = 'commerce/lookups/address-types/{?searchQuery,page,rpp,sort,embed,fields}';\r\n        _this.getRoute = 'commerce/lookups/address-types/{id}/{?embed,fields}';\r\n        _this.createRoute = 'commerce/lookups/address-types';\r\n        _this.updateRoute = 'commerce/lookups/address-types/{id}';\r\n        _this.deleteRoute = 'commerce/lookups/address-types/{id}';\r\n        return _this;\r\n    }\r\n    Object.defineProperty(CommerceLookupsAddressTypeRoute.prototype, \"batch\", {\r\n        get: function () {\r\n            return this.commerceLookupsAddressTypeBatchRoute;\r\n        },\r\n        enumerable: true,\r\n        configurable: true\r\n    });\r\n    /**\r\n     * Parses find commerce address type route which can be expanded with additional options. Supported items are:\r\n     * - `searchQuery` - A string value used to identify commerce resources using the phrase search.\r\n     * - `page` - A value used to set the page number, i.e. to retrieve certain commerce subset from the storage.\r\n     * - `rpp` - A value used to limit the size of result set per page.\r\n     * - `sort` - A string used to set the commerce property to sort the result collection by.\r\n     * - `embed` - Comma separated list of resources to be contained within the current representation.\r\n     * @method\r\n     * @example commerceLookupsAddressTypeRoute.find({searchQuery: '<search-phrase>'});\r\n     **/\r\n    CommerceLookupsAddressTypeRoute.prototype.find = function (options) {\r\n        return _super.prototype.baseFind.call(this, this.findRoute, options);\r\n    };\r\n    /**\r\n     * Parses get route; this route doesn't expose any properties.\r\n     * @method\r\n     * @example commerceLookupsAddressTypeRoute.get(id, options);\r\n     **/\r\n    CommerceLookupsAddressTypeRoute.prototype.get = function (id, options) {\r\n        return _super.prototype.baseGet.call(this, this.getRoute, id, options);\r\n    };\r\n    /**\r\n     * Parses create commerce address type route; this URI template does not expose any additional options.\r\n     * @method\r\n     * @example commerceLookupsAddressTypeRoute.create();\r\n     **/\r\n    CommerceLookupsAddressTypeRoute.prototype.create = function () {\r\n        return _super.prototype.baseCreate.call(this, this.createRoute, {});\r\n    };\r\n    /**\r\n     * Parses update commerce address type route; this URI template does not expose any additional options.\r\n     * @method\r\n     * @example commerceLookupsAddressTypeRoute.update(data);\r\n     **/\r\n    CommerceLookupsAddressTypeRoute.prototype.update = function (data) {\r\n        return _super.prototype.baseUpdate.call(this, this.updateRoute, data);\r\n    };\r\n    /**\r\n     * Parses delete commerce address type route; this URI template does not expose any additional options.\r\n     * @method\r\n     * @example commerceLookupsAddressTypeRoute.delete(data);\r\n     **/\r\n    CommerceLookupsAddressTypeRoute.prototype.delete = function (data) {\r\n        return _super.prototype.baseDelete.call(this, this.deleteRoute, data);\r\n    };\r\n    return CommerceLookupsAddressTypeRoute;\r\n}(common_1.BaseRoute));\r\nCommerceLookupsAddressTypeRoute = tslib_1.__decorate([\r\n    inversify_1.injectable(),\r\n    tslib_1.__param(0, inversify_1.inject(_1.TYPES.CommerceLookupsAddressTypeBatchRoute)),\r\n    tslib_1.__param(1, inversify_1.inject(contracts_1.TYPES.IAppOptions)),\r\n    tslib_1.__metadata(\"design:paramtypes\", [typeof (_a = typeof _1.CommerceLookupsAddressTypeBatchRoute !== \"undefined\" && _1.CommerceLookupsAddressTypeBatchRoute) === \"function\" && _a || Object, typeof (_b = typeof contracts_1.IAppOptions !== \"undefined\" && contracts_1.IAppOptions) === \"function\" && _b || Object])\r\n], CommerceLookupsAddressTypeRoute);\r\nexports.CommerceLookupsAddressTypeRoute = CommerceLookupsAddressTypeRoute;\r\nvar _a, _b;\r\n/**\r\n * @copyright (c) 2017 Mono Ltd\r\n * @license MIT\r\n * @author Mono Ltd\r\n * @overview\r\n ***Notes:**\r\n - Refer to the [Baasic REST API](http://dev.baasic.com/api/reference/home) for detailed information about available Baasic REST API end-points.\r\n - [URI Template](https://github.com/Baasic/uritemplate-js) syntax enables expanding the Baasic route templates to Baasic REST URIs providing it with an object that contains URI parameters.\r\n - All end-point objects are transformed by the associated route service.\r\n */ \r\n\n\n\n//////////////////\n// WEBPACK FOOTER\n// ./src/modules/commerce/lookups/addressType/commerceLookupsAddressTypeRoute.ts\n// module id = 181\n// module chunks = 0","\"use strict\";\r\nfunction __export(m) {\r\n    for (var p in m) if (!exports.hasOwnProperty(p)) exports[p] = m[p];\r\n}\r\nObject.defineProperty(exports, \"__esModule\", { value: true });\r\n__export(require(\"./commerceLookupsAddressTypeBatchRoute\"));\r\n__export(require(\"./commerceLookupsAddressTypeBatchClient\"));\r\n__export(require(\"./commerceLookupsAddressTypeRoute\"));\r\n__export(require(\"./commerceLookupsAddressTypeClient\"));\r\n\n\n\n//////////////////\n// WEBPACK FOOTER\n// ./src/modules/commerce/lookups/addressType/index.ts\n// module id = 182\n// module chunks = 0","/* globals module */\r\n/**\r\n * @module commerceCountryStateBatchClient\r\n * @description  Commerce Country State Batch Client provides an easy way to consume  Commerce REST API end-points. In order to obtain a needed routes `commerceCountryStateBatchClient` uses `commerceCountryStateBatchRoute`.\r\n */\r\n\"use strict\";\r\nObject.defineProperty(exports, \"__esModule\", { value: true });\r\nvar tslib_1 = require(\"tslib\");\r\nvar inversify_1 = require(\"inversify\");\r\n;\r\nvar httpApi_1 = require(\"../../../../httpApi\");\r\nvar _1 = require(\"../../\");\r\nvar CommerceLookupsCountryStateBatchClient = (function () {\r\n    function CommerceLookupsCountryStateBatchClient(commerceLookupsCountryStateBatchRoute, apiClient) {\r\n        this.commerceLookupsCountryStateBatchRoute = commerceLookupsCountryStateBatchRoute;\r\n        this.apiClient = apiClient;\r\n    }\r\n    Object.defineProperty(CommerceLookupsCountryStateBatchClient.prototype, \"routeDefinition\", {\r\n        get: function () {\r\n            return this.commerceLookupsCountryStateBatchRoute;\r\n        },\r\n        enumerable: true,\r\n        configurable: true\r\n    });\r\n    /**\r\n     * Returns a promise that is resolved once the create commerce action has been performed; this action creates a new commerce resources.\r\n     * @method\r\n     * @example commerceLookupsCountryStateBatchClient.create([{\r\n                    countryId: '<country-id>',\r\n                    name : '<name>',\r\n                    abrv: '<abbreviation>',\r\n                    description: '<description>'\r\n                }])\r\n                .then(function (data) {\r\n                    // perform success action here\r\n                },\r\n                 function (response, status, headers, config) {\r\n                     // perform error handling here\r\n                });\r\n     **/\r\n    CommerceLookupsCountryStateBatchClient.prototype.create = function (data) {\r\n        return this.apiClient.post(this.routeDefinition.create(), this.routeDefinition.createParams(data));\r\n    };\r\n    /**\r\n     * Returns a promise that is resolved once the update commerce action has been performed; this action updates specified commerce resources.\r\n     * @method\r\n     * @example commerceLookupsCountryStateBatchClient.update(commerceCountryStates)\r\n                    .then(function (data) {\r\n                        // perform success action here\r\n                    },\r\n                     function (response, status, headers, config) {\r\n                         // perform error handling here\r\n                    });\r\n     **/\r\n    CommerceLookupsCountryStateBatchClient.prototype.update = function (data) {\r\n        return this.apiClient.put(this.routeDefinition.update(), this.routeDefinition.updateParams(data));\r\n    };\r\n    /**\r\n     * Returns a promise that is resolved once the remove commerce action has been performed. This action will remove commerce resources from the system if successfully completed.\r\n     * @method\r\n     * @example commerceLookupsCountryStateBatchClient.remove(commerceCountryStateIds)\r\n                   .then(function (data) {\r\n                       // perform success action here\r\n                   },\r\n                    function (response, status, headers, config) {\r\n                        // perform error handling here\r\n                   });\r\n    **/\r\n    CommerceLookupsCountryStateBatchClient.prototype.remove = function (ids) {\r\n        return this.apiClient.delete(this.commerceLookupsCountryStateBatchRoute.delete(), undefined, ids);\r\n    };\r\n    return CommerceLookupsCountryStateBatchClient;\r\n}());\r\nCommerceLookupsCountryStateBatchClient = tslib_1.__decorate([\r\n    inversify_1.injectable(),\r\n    tslib_1.__param(0, inversify_1.inject(_1.TYPES.CommerceLookupsCountryStateBatchRoute)),\r\n    tslib_1.__param(1, inversify_1.inject(httpApi_1.httpTYPES.ApiClient)),\r\n    tslib_1.__metadata(\"design:paramtypes\", [typeof (_a = typeof _1.CommerceLookupsCountryStateBatchRoute !== \"undefined\" && _1.CommerceLookupsCountryStateBatchRoute) === \"function\" && _a || Object, typeof (_b = typeof httpApi_1.ApiClient !== \"undefined\" && httpApi_1.ApiClient) === \"function\" && _b || Object])\r\n], CommerceLookupsCountryStateBatchClient);\r\nexports.CommerceLookupsCountryStateBatchClient = CommerceLookupsCountryStateBatchClient;\r\nvar _a, _b;\r\n/**\r\n * @copyright (c) 2017 Mono Ltd\r\n * @license MIT\r\n * @author Mono Ltd\r\n * @overview\r\n ***Notes:**\r\n - Refer to the [Baasic REST API](http://dev.baasic.com/api/reference/home) for detailed information about available Baasic REST API end-points.\r\n - All end-point objects are transformed by the associated route service.\r\n */ \r\n\n\n\n//////////////////\n// WEBPACK FOOTER\n// ./src/modules/commerce/lookups/countryState/commerceLookupsCountryStateBatchClient.ts\n// module id = 183\n// module chunks = 0","/* globals module */\r\n/**\r\n * @module commerceLookupsCountryStateBatchRoute\r\n * @description Baasic Commerce Lookups Country State Batch Route Definition provides Baasic route templates which can be expanded to Baasic REST URIs. Various services can use Baasic Commerce Lookups Country State Batch Route Definition to obtain a needed routes while other routes will be obtained through HAL. By convention, all route services  use the same function names as their corresponding services.\r\n */\r\n\"use strict\";\r\nObject.defineProperty(exports, \"__esModule\", { value: true });\r\nvar tslib_1 = require(\"tslib\");\r\nvar inversify_1 = require(\"inversify\");\r\nvar common_1 = require(\"../../../../common\");\r\n;\r\nvar contracts_1 = require(\"../../../../core/contracts\");\r\nvar CommerceLookupsCountryStateBatchRoute = (function (_super) {\r\n    tslib_1.__extends(CommerceLookupsCountryStateBatchRoute, _super);\r\n    function CommerceLookupsCountryStateBatchRoute(appOptions) {\r\n        var _this = _super.call(this, appOptions) || this;\r\n        _this.appOptions = appOptions;\r\n        _this.createRoute = 'commerce/lookups/states/batch';\r\n        _this.updateRoute = 'commerce/lookups/states/batch';\r\n        _this.deleteRoute = 'commerce/lookups/states/batch';\r\n        return _this;\r\n    }\r\n    /**\r\n     * Parses create commerce country state batch route; this route does not expose any additional options\r\n     * @method\r\n     * @example commerceLookupsCountryStateBatchRoute.create();\r\n     */\r\n    CommerceLookupsCountryStateBatchRoute.prototype.create = function () {\r\n        return _super.prototype.baseCreate.call(this, this.createRoute, {});\r\n    };\r\n    /**\r\n     * Parses remove commerce country state batch route; this route does not expose any additional options\r\n     * @method\r\n     * @example commerceLookupsCountryStateBatchRoute.update();\r\n     */\r\n    CommerceLookupsCountryStateBatchRoute.prototype.update = function () {\r\n        return _super.prototype.baseUpdate.call(this, this.updateRoute, {});\r\n    };\r\n    /**\r\n     * Parses remove commerce country state batch route; this route does not expose any additional options\r\n     * @method\r\n     * @example commerceLookupsCountryStateBatchRoute.remove();\r\n     */\r\n    CommerceLookupsCountryStateBatchRoute.prototype.delete = function () {\r\n        return _super.prototype.baseDelete.call(this, this.deleteRoute, {});\r\n    };\r\n    return CommerceLookupsCountryStateBatchRoute;\r\n}(common_1.BaseRoute));\r\nCommerceLookupsCountryStateBatchRoute = tslib_1.__decorate([\r\n    inversify_1.injectable(),\r\n    tslib_1.__param(0, inversify_1.inject(contracts_1.TYPES.IAppOptions)),\r\n    tslib_1.__metadata(\"design:paramtypes\", [typeof (_a = typeof contracts_1.IAppOptions !== \"undefined\" && contracts_1.IAppOptions) === \"function\" && _a || Object])\r\n], CommerceLookupsCountryStateBatchRoute);\r\nexports.CommerceLookupsCountryStateBatchRoute = CommerceLookupsCountryStateBatchRoute;\r\nvar _a;\r\n/**\r\n * @copyright (c) 2017 Mono Ltd\r\n * @license MIT\r\n * @author Mono Ltd\r\n * @overview\r\n ***Notes:**\r\n - Refer to the [Baasic REST API](http://dev.baasic.com/api/reference/home) for detailed information about available Baasic REST API end-points.\r\n - [URI Template](https://github.com/Baasic/uritemplate-js) syntax enables expanding the Baasic route templates to Baasic REST URIs providing it with an object that contains URI parameters.\r\n - All end-point objects are transformed by the associated route service.\r\n */ \r\n\n\n\n//////////////////\n// WEBPACK FOOTER\n// ./src/modules/commerce/lookups/countryState/commerceLookupsCountryStateBatchRoute.ts\n// module id = 184\n// module chunks = 0","/* globals module */\r\n/**\r\n * @module commerceCountryStateClient\r\n * @description  Commerce Country State Client provides an easy way to consume  Commerce REST API end-points. In order to obtain a needed routes `commerceCountryStateClient` uses `commerceCountryStateRoute`.\r\n */\r\n\"use strict\";\r\nObject.defineProperty(exports, \"__esModule\", { value: true });\r\nvar tslib_1 = require(\"tslib\");\r\nvar inversify_1 = require(\"inversify\");\r\n;\r\nvar httpApi_1 = require(\"../../../../httpApi\");\r\nvar _1 = require(\"../../\");\r\nvar CommerceLookupsCountryStateClient = (function () {\r\n    function CommerceLookupsCountryStateClient(commerceLookupsCountryStateRoute, commerceLookupsCountryStateBatchClient, apiClient) {\r\n        this.commerceLookupsCountryStateRoute = commerceLookupsCountryStateRoute;\r\n        this.commerceLookupsCountryStateBatchClient = commerceLookupsCountryStateBatchClient;\r\n        this.apiClient = apiClient;\r\n    }\r\n    Object.defineProperty(CommerceLookupsCountryStateClient.prototype, \"routeDefinition\", {\r\n        get: function () {\r\n            return this.commerceLookupsCountryStateRoute;\r\n        },\r\n        enumerable: true,\r\n        configurable: true\r\n    });\r\n    Object.defineProperty(CommerceLookupsCountryStateClient.prototype, \"batch\", {\r\n        get: function () {\r\n            return this.commerceLookupsCountryStateBatchClient;\r\n        },\r\n        enumerable: true,\r\n        configurable: true\r\n    });\r\n    /**\r\n     * Returns a promise that is resolved once the find action has been performed. Success response returns a list of commerce resources matching the given criteria.\r\n     * @method\r\n     * @example commerceLookupsCountryStateClient.find({\r\n                    countryId: '<country-id>'\r\n                    pageNumber : 1,\r\n                    pageSize : 10,\r\n                    orderBy : '<field>',\r\n                    orderDirection : '<asc|desc>',\r\n                    search : '<search-phrase>'\r\n                })\r\n                .then(function (collection) {\r\n                    // perform success action here\r\n                },\r\n                 function (response, status, headers, config) {\r\n                     // perform error handling here\r\n                });\r\n     **/\r\n    CommerceLookupsCountryStateClient.prototype.find = function (options) {\r\n        return this.apiClient.get(this.routeDefinition.find(options));\r\n    };\r\n    /**\r\n     * Returns a promise that is resolved once the get action has been performed. Success response returns the commerce resource.\r\n     * @method\r\n     * @example commerceLookupsCountryStateClient.get('<state-id>')\r\n                    .then(function (data) {\r\n                        // perform success action here\r\n                    },\r\n                     function (response, status, headers, config) {\r\n                         // perform error handling here\r\n                    });\r\n     **/\r\n    CommerceLookupsCountryStateClient.prototype.get = function (id, options) {\r\n        return this.apiClient.get(this.commerceLookupsCountryStateRoute.get(id, options));\r\n    };\r\n    /**\r\n     * Returns a promise that is resolved once the create commerce action has been performed; this action creates a new commerce resource.\r\n     * @method\r\n     * @example commerceLookupsCountryStateClient.create({\r\n                      countryId : '<country-id>',\r\n                      name: '<name>',\r\n                      abrv: '<abrv>',\r\n                      description: '<description>'\r\n                  })\r\n                  .then(function (data) {\r\n                      // perform success action here\r\n                  },\r\n                   function (response, status, headers, config) {\r\n                       // perform error handling here\r\n                  });\r\n   **/\r\n    CommerceLookupsCountryStateClient.prototype.create = function (data) {\r\n        return this.apiClient.post(this.routeDefinition.create(), this.routeDefinition.createParams(data));\r\n    };\r\n    /**\r\n     * Returns a promise that is resolved once the update commerce action has been performed; this action updates a commerce resource. This route uses HAL enabled objects to obtain routes and therefore it doesn't apply `commerceLookupsCountryStateRoute` route template. Here is an example of how a route can be obtained from HAL enabled objects:\r\n     * ```\r\n     * let params = modelMapper.removeParams(commerceCountryState);\r\n     * let uri = params['model'].links('put').href;\r\n     * ```\r\n     * @method\r\n     * @example // commerceCountryState is a resource previously fetched using get action.\r\n                    commerceCountryState.description = '<description>';\r\n                    commerceLookupsCountryStateClient.update(commerceCountryState)\r\n                        .then(function (data) {\r\n                            // perform success action here\r\n                        },\r\n                         function (response, status, headers, config) {\r\n                             // perform error handling here\r\n                        });\r\n     **/\r\n    CommerceLookupsCountryStateClient.prototype.update = function (data) {\r\n        return this.apiClient.put(this.routeDefinition.update(data), this.routeDefinition.updateParams(data));\r\n    };\r\n    /**\r\n     * Returns a promise that is resolved once the remove action has been performed. This action will remove a commerce resource from the system if successfully completed. This route uses HAL enabled objects to obtain routes and therefore it doesn't apply `commerceLookupsCountryStateRoute` route template. Here is an example of how a route can be obtained from HAL enabled objects:\r\n     * ```\r\n     * let params = modelMapper.removeParams(commerceCountryState);\r\n     * let uri = params['model'].links('delete').href;\r\n     * ```\r\n     * @method\r\n     * @example // commerceCountryState is a resource previously fetched using get action.\r\n                   commerceLookupsCountryStateClient.remove(commerceCountryState)\r\n                       .then(function (data) {\r\n                           // perform success action here\r\n                       },\r\n                        function (response, status, headers, config) {\r\n                            // perform error handling here\r\n                       });\r\n    **/\r\n    CommerceLookupsCountryStateClient.prototype.remove = function (data) {\r\n        return this.apiClient.delete(this.routeDefinition.delete(data));\r\n    };\r\n    return CommerceLookupsCountryStateClient;\r\n}());\r\nCommerceLookupsCountryStateClient = tslib_1.__decorate([\r\n    inversify_1.injectable(),\r\n    tslib_1.__param(0, inversify_1.inject(_1.TYPES.CommerceLookupsCountryStateRoute)),\r\n    tslib_1.__param(1, inversify_1.inject(_1.TYPES.CommerceLookupsCountryStateBatchClient)),\r\n    tslib_1.__param(2, inversify_1.inject(httpApi_1.httpTYPES.ApiClient)),\r\n    tslib_1.__metadata(\"design:paramtypes\", [typeof (_a = typeof _1.CommerceLookupsCountryStateRoute !== \"undefined\" && _1.CommerceLookupsCountryStateRoute) === \"function\" && _a || Object, typeof (_b = typeof _1.CommerceLookupsCountryStateBatchClient !== \"undefined\" && _1.CommerceLookupsCountryStateBatchClient) === \"function\" && _b || Object, typeof (_c = typeof httpApi_1.ApiClient !== \"undefined\" && httpApi_1.ApiClient) === \"function\" && _c || Object])\r\n], CommerceLookupsCountryStateClient);\r\nexports.CommerceLookupsCountryStateClient = CommerceLookupsCountryStateClient;\r\nvar _a, _b, _c;\r\n/**\r\n * @copyright (c) 2017 Mono Ltd\r\n * @license MIT\r\n * @author Mono Ltd\r\n * @overview\r\n ***Notes:**\r\n - Refer to the [Baasic REST API](http://dev.baasic.com/api/reference/home) for detailed information about available Baasic REST API end-points.\r\n - All end-point objects are transformed by the associated route service.\r\n */ \r\n\n\n\n//////////////////\n// WEBPACK FOOTER\n// ./src/modules/commerce/lookups/countryState/commerceLookupsCountryStateClient.ts\n// module id = 185\n// module chunks = 0","/* globals module */\r\n/**\r\n * @module commerceLookupsCountryRoute\r\n * @description Baasic Commerce Lookups Country Route Definition provides Baasic route templates which can be expanded to Baasic REST URIs. Various services can use Baasic Commerce Lookups Country Route Definition to obtain a needed routes while other routes will be obtained through HAL. By convention, all route services  use the same function names as their corresponding services.\r\n */\r\n\"use strict\";\r\nObject.defineProperty(exports, \"__esModule\", { value: true });\r\nvar tslib_1 = require(\"tslib\");\r\nvar inversify_1 = require(\"inversify\");\r\nvar common_1 = require(\"../../../../common\");\r\n;\r\nvar contracts_1 = require(\"../../../../core/contracts\");\r\nvar _1 = require(\"../../\");\r\nvar CommerceLookupsCountryStateRoute = (function (_super) {\r\n    tslib_1.__extends(CommerceLookupsCountryStateRoute, _super);\r\n    function CommerceLookupsCountryStateRoute(commerceCountryStateBatchRoute, appOptions) {\r\n        var _this = _super.call(this, appOptions) || this;\r\n        _this.commerceCountryStateBatchRoute = commerceCountryStateBatchRoute;\r\n        _this.appOptions = appOptions;\r\n        _this.findRoute = 'commerce/lookups/states/{?countryId,searchQuery,page,rpp,sort,embed}';\r\n        _this.getRoute = 'commerce/lookups/states/{id}/{?embed}';\r\n        _this.createRoute = 'commerce/lookups/states';\r\n        _this.updateRoute = 'commerce/lookups/states/{id}';\r\n        _this.deleteRoute = 'commerce/lookups/states/{id}';\r\n        return _this;\r\n    }\r\n    Object.defineProperty(CommerceLookupsCountryStateRoute.prototype, \"batch\", {\r\n        get: function () {\r\n            return this.commerceCountryStateBatchRoute;\r\n        },\r\n        enumerable: true,\r\n        configurable: true\r\n    });\r\n    /**\r\n     * Parses find commerce country state route which can be expanded with additional options. Supported items are:\r\n     * - `countryId` - An identifier used to identify commerce country resource.\r\n     * - `searchQuery` - A string value used to identify commerce resources using the phrase search.\r\n     * - `page` - A value used to set the page number, i.e. to retrieve certain commerce subset from the storage.\r\n     * - `rpp` - A value used to limit the size of result set per page.\r\n     * - `sort` - A string used to set the commerce property to sort the result collection by.\r\n     * - `embed` - Comma separated list of resources to be contained within the current representation.\r\n     * @method\r\n     * @example commerceLookupsCountryStateRoute.find({searchQuery: '<search-phrase>'});\r\n     **/\r\n    CommerceLookupsCountryStateRoute.prototype.find = function (options) {\r\n        return _super.prototype.baseFind.call(this, this.findRoute, options);\r\n    };\r\n    /**\r\n     * Parses get commerce country state route which can be expanded with additional options. Supported items are:\r\n     * - `embed` - Comma separated list of resources to be contained within the current representation.\r\n     * @method\r\n     * @example commerceLookupsCountryStateRoute.get(id, options);\r\n     **/\r\n    CommerceLookupsCountryStateRoute.prototype.get = function (id, options) {\r\n        return _super.prototype.baseGet.call(this, this.getRoute, id, options);\r\n    };\r\n    /**\r\n     * Parses create commerce country state route; this URI template does not expose any additional options.\r\n     * @method\r\n     * @example commerceLookupsCountryStateRoute.create();\r\n     **/\r\n    CommerceLookupsCountryStateRoute.prototype.create = function () {\r\n        return _super.prototype.baseCreate.call(this, this.createRoute, {});\r\n    };\r\n    /**\r\n     * Parses update commerce country state route; this URI template does not expose any additional options.\r\n     * @method\r\n     * @example commerceLookupsCountryStateRoute.update(data);\r\n     **/\r\n    CommerceLookupsCountryStateRoute.prototype.update = function (data) {\r\n        return _super.prototype.baseUpdate.call(this, this.updateRoute, data);\r\n    };\r\n    /**\r\n     * Parses delete commerce country state route; this URI template does not expose any additional options.\r\n     * @method\r\n     * @example commerceLookupsCountryStateRoute.delete(data);\r\n     **/\r\n    CommerceLookupsCountryStateRoute.prototype.delete = function (data) {\r\n        return _super.prototype.baseDelete.call(this, this.deleteRoute, data);\r\n    };\r\n    return CommerceLookupsCountryStateRoute;\r\n}(common_1.BaseRoute));\r\nCommerceLookupsCountryStateRoute = tslib_1.__decorate([\r\n    inversify_1.injectable(),\r\n    tslib_1.__param(0, inversify_1.inject(_1.TYPES.CommerceLookupsCountryStateBatchRoute)),\r\n    tslib_1.__param(1, inversify_1.inject(contracts_1.TYPES.IAppOptions)),\r\n    tslib_1.__metadata(\"design:paramtypes\", [typeof (_a = typeof _1.CommerceLookupsCountryStateBatchRoute !== \"undefined\" && _1.CommerceLookupsCountryStateBatchRoute) === \"function\" && _a || Object, typeof (_b = typeof contracts_1.IAppOptions !== \"undefined\" && contracts_1.IAppOptions) === \"function\" && _b || Object])\r\n], CommerceLookupsCountryStateRoute);\r\nexports.CommerceLookupsCountryStateRoute = CommerceLookupsCountryStateRoute;\r\nvar _a, _b;\r\n/**\r\n * @copyright (c) 2017 Mono Ltd\r\n * @license MIT\r\n * @author Mono Ltd\r\n * @overview\r\n ***Notes:**\r\n - Refer to the [Baasic REST API](http://dev.baasic.com/api/reference/home) for detailed information about available Baasic REST API end-points.\r\n - [URI Template](https://github.com/Baasic/uritemplate-js) syntax enables expanding the Baasic route templates to Baasic REST URIs providing it with an object that contains URI parameters.\r\n - All end-point objects are transformed by the associated route service.\r\n */ \r\n\n\n\n//////////////////\n// WEBPACK FOOTER\n// ./src/modules/commerce/lookups/countryState/commerceLookupsCountryStateRoute.ts\n// module id = 186\n// module chunks = 0","\"use strict\";\r\nfunction __export(m) {\r\n    for (var p in m) if (!exports.hasOwnProperty(p)) exports[p] = m[p];\r\n}\r\nObject.defineProperty(exports, \"__esModule\", { value: true });\r\n__export(require(\"./commerceLookupsCountryStateBatchRoute\"));\r\n__export(require(\"./commerceLookupsCountryStateBatchClient\"));\r\n__export(require(\"./commerceLookupsCountryStateRoute\"));\r\n__export(require(\"./commerceLookupsCountryStateClient\"));\r\n\n\n\n//////////////////\n// WEBPACK FOOTER\n// ./src/modules/commerce/lookups/countryState/index.ts\n// module id = 187\n// module chunks = 0","/* globals module */\r\n/**\r\n * @module commerceCountryBatchClient\r\n * @description  Commerce Country Batch Client provides an easy way to consume  Commerce REST API end-points. In order to obtain a needed routes `commerceCountryBatchClient` uses `commerceCountryBatchRoute`.\r\n */\r\n\"use strict\";\r\nObject.defineProperty(exports, \"__esModule\", { value: true });\r\nvar tslib_1 = require(\"tslib\");\r\nvar inversify_1 = require(\"inversify\");\r\n;\r\nvar httpApi_1 = require(\"../../../../httpApi\");\r\nvar _1 = require(\"../../\");\r\nvar CommerceLookupsCountryBatchClient = (function () {\r\n    function CommerceLookupsCountryBatchClient(commerceLookupsCountryBatchRoute, apiClient) {\r\n        this.commerceLookupsCountryBatchRoute = commerceLookupsCountryBatchRoute;\r\n        this.apiClient = apiClient;\r\n    }\r\n    Object.defineProperty(CommerceLookupsCountryBatchClient.prototype, \"routeDefinition\", {\r\n        get: function () {\r\n            return this.commerceLookupsCountryBatchRoute;\r\n        },\r\n        enumerable: true,\r\n        configurable: true\r\n    });\r\n    /**\r\n     * Returns a promise that is resolved once the create commerce action has been performed; this action creates a new commerce resources.\r\n     * @method\r\n     * @example commerceLookupsCountryClient.create([{\r\n                    name : '<name>',\r\n                    abrv: '<abbreviation>',\r\n                    description: '<description>'\r\n                }])\r\n                .then(function (data) {\r\n                    // perform success action here\r\n                },\r\n                 function (response, status, headers, config) {\r\n                     // perform error handling here\r\n                });\r\n     **/\r\n    CommerceLookupsCountryBatchClient.prototype.create = function (data) {\r\n        return this.apiClient.post(this.routeDefinition.create(), this.routeDefinition.createParams(data));\r\n    };\r\n    /**\r\n     * Returns a promise that is resolved once the update commerce action has been performed; this action updates specified commerce resources.\r\n     * @method\r\n     * @example   commerceLookupsCountryClient.update(commerceCountries)\r\n                      .then(function (data) {\r\n                          // perform success action here\r\n                      },\r\n                       function (response, status, headers, config) {\r\n                           // perform error handling here\r\n                      });\r\n   **/\r\n    CommerceLookupsCountryBatchClient.prototype.update = function (data) {\r\n        return this.apiClient.put(this.routeDefinition.update(), this.routeDefinition.updateParams(data));\r\n    };\r\n    /**\r\n     * Returns a promise that is resolved once the remove commerce action has been performed. This action will remove commerce resources from the system if successfully completed.\r\n     * @method\r\n     * @example commerceLookupsCountryClient.remove(commerceCountryIds)\r\n                   .then(function (data) {\r\n                       // perform success action here\r\n                   },\r\n                    function (response, status, headers, config) {\r\n                        // perform error handling here\r\n                   });\r\n    **/\r\n    CommerceLookupsCountryBatchClient.prototype.remove = function (ids) {\r\n        return this.apiClient.delete(this.commerceLookupsCountryBatchRoute.delete(), undefined, ids);\r\n    };\r\n    return CommerceLookupsCountryBatchClient;\r\n}());\r\nCommerceLookupsCountryBatchClient = tslib_1.__decorate([\r\n    inversify_1.injectable(),\r\n    tslib_1.__param(0, inversify_1.inject(_1.TYPES.CommerceLookupsCountryBatchRoute)),\r\n    tslib_1.__param(1, inversify_1.inject(httpApi_1.httpTYPES.ApiClient)),\r\n    tslib_1.__metadata(\"design:paramtypes\", [typeof (_a = typeof _1.CommerceLookupsCountryBatchRoute !== \"undefined\" && _1.CommerceLookupsCountryBatchRoute) === \"function\" && _a || Object, typeof (_b = typeof httpApi_1.ApiClient !== \"undefined\" && httpApi_1.ApiClient) === \"function\" && _b || Object])\r\n], CommerceLookupsCountryBatchClient);\r\nexports.CommerceLookupsCountryBatchClient = CommerceLookupsCountryBatchClient;\r\nvar _a, _b;\r\n/**\r\n * @copyright (c) 2017 Mono Ltd\r\n * @license MIT\r\n * @author Mono Ltd\r\n * @overview\r\n ***Notes:**\r\n - Refer to the [Baasic REST API](http://dev.baasic.com/api/reference/home) for detailed information about available Baasic REST API end-points.\r\n - All end-point objects are transformed by the associated route service.\r\n */ \r\n\n\n\n//////////////////\n// WEBPACK FOOTER\n// ./src/modules/commerce/lookups/country/commerceLookupsCountryBatchClient.ts\n// module id = 188\n// module chunks = 0","/* globals module */\r\n/**\r\n * @module commerceLookupsCountryBatchRoute\r\n * @description Baasic Commerce Lookups Country Batch Route Definition provides Baasic route templates which can be expanded to Baasic REST URIs. Various services can use Baasic Commerce Lookups Country Batch Route Definition to obtain a needed routes while other routes will be obtained through HAL. By convention, all route services  use the same function names as their corresponding services.\r\n */\r\n\"use strict\";\r\nObject.defineProperty(exports, \"__esModule\", { value: true });\r\nvar tslib_1 = require(\"tslib\");\r\nvar inversify_1 = require(\"inversify\");\r\nvar common_1 = require(\"../../../../common\");\r\n;\r\nvar contracts_1 = require(\"../../../../core/contracts\");\r\nvar CommerceLookupsCountryBatchRoute = (function (_super) {\r\n    tslib_1.__extends(CommerceLookupsCountryBatchRoute, _super);\r\n    function CommerceLookupsCountryBatchRoute(appOptions) {\r\n        var _this = _super.call(this, appOptions) || this;\r\n        _this.appOptions = appOptions;\r\n        _this.createRoute = 'commerce/lookups/countries/batch';\r\n        _this.updateRoute = 'commerce/lookups/countries/batch';\r\n        _this.deleteRoute = 'commerce/lookups/countries/batch';\r\n        return _this;\r\n    }\r\n    /**\r\n     * Parses create commerce country batch route; this route does not expose any additional options\r\n     * @method\r\n     * @example commerceLookupsCountryRoute.create();\r\n     */\r\n    CommerceLookupsCountryBatchRoute.prototype.create = function () {\r\n        return _super.prototype.baseCreate.call(this, this.createRoute, {});\r\n    };\r\n    /**\r\n     * Parses remove commerce country batch route; this route does not expose any additional options\r\n     * @method\r\n     * @example commerceLookupsCountryRoute.update();\r\n     */\r\n    CommerceLookupsCountryBatchRoute.prototype.update = function () {\r\n        return _super.prototype.baseUpdate.call(this, this.updateRoute, {});\r\n    };\r\n    /**\r\n     * Parses remove commerce country batch route; this route does not expose any additional options\r\n     * @method\r\n     * @example commerceLookupsCountryRoute.remove();\r\n     */\r\n    CommerceLookupsCountryBatchRoute.prototype.delete = function () {\r\n        return _super.prototype.baseDelete.call(this, this.deleteRoute, {});\r\n    };\r\n    return CommerceLookupsCountryBatchRoute;\r\n}(common_1.BaseRoute));\r\nCommerceLookupsCountryBatchRoute = tslib_1.__decorate([\r\n    inversify_1.injectable(),\r\n    tslib_1.__param(0, inversify_1.inject(contracts_1.TYPES.IAppOptions)),\r\n    tslib_1.__metadata(\"design:paramtypes\", [typeof (_a = typeof contracts_1.IAppOptions !== \"undefined\" && contracts_1.IAppOptions) === \"function\" && _a || Object])\r\n], CommerceLookupsCountryBatchRoute);\r\nexports.CommerceLookupsCountryBatchRoute = CommerceLookupsCountryBatchRoute;\r\nvar _a;\r\n/**\r\n * @copyright (c) 2017 Mono Ltd\r\n * @license MIT\r\n * @author Mono Ltd\r\n * @overview\r\n ***Notes:**\r\n - Refer to the [Baasic REST API](http://dev.baasic.com/api/reference/home) for detailed information about available Baasic REST API end-points.\r\n - [URI Template](https://github.com/Baasic/uritemplate-js) syntax enables expanding the Baasic route templates to Baasic REST URIs providing it with an object that contains URI parameters.\r\n - All end-point objects are transformed by the associated route service.\r\n */ \r\n\n\n\n//////////////////\n// WEBPACK FOOTER\n// ./src/modules/commerce/lookups/country/commerceLookupsCountryBatchRoute.ts\n// module id = 189\n// module chunks = 0","/* globals module */\r\n/**\r\n * @module commerceCountryClient\r\n * @description  Commerce Country Client provides an easy way to consume  Commerce REST API end-points. In order to obtain a needed routes `commerceCountryClient` uses `commerceCountryRoute`.\r\n */\r\n\"use strict\";\r\nObject.defineProperty(exports, \"__esModule\", { value: true });\r\nvar tslib_1 = require(\"tslib\");\r\nvar inversify_1 = require(\"inversify\");\r\n;\r\nvar httpApi_1 = require(\"../../../../httpApi\");\r\nvar _1 = require(\"../../\");\r\nvar CommerceLookupsCountryClient = (function () {\r\n    function CommerceLookupsCountryClient(commerceLookupsCountryRoute, commerceLookupsCountryBatchClient, apiClient) {\r\n        this.commerceLookupsCountryRoute = commerceLookupsCountryRoute;\r\n        this.commerceLookupsCountryBatchClient = commerceLookupsCountryBatchClient;\r\n        this.apiClient = apiClient;\r\n    }\r\n    Object.defineProperty(CommerceLookupsCountryClient.prototype, \"routeDefinition\", {\r\n        get: function () {\r\n            return this.commerceLookupsCountryRoute;\r\n        },\r\n        enumerable: true,\r\n        configurable: true\r\n    });\r\n    Object.defineProperty(CommerceLookupsCountryClient.prototype, \"batch\", {\r\n        get: function () {\r\n            return this.commerceLookupsCountryBatchClient;\r\n        },\r\n        enumerable: true,\r\n        configurable: true\r\n    });\r\n    /**\r\n     * Returns a promise that is resolved once the find action has been performed. Success response returns a list of commerce resources matching the given criteria.\r\n     * @method\r\n     * @example commerceLookupsCountryClient.find({\r\n                   pageNumber : 1,\r\n                   pageSize : 10,\r\n                   orderBy : '<field>',\r\n                   orderDirection : '<asc|desc>',\r\n                   search : '<search-phrase>'\r\n               })\r\n               .then(function (collection) {\r\n                   // perform success action here\r\n               },\r\n                function (response, status, headers, config) {\r\n                    // perform error handling here\r\n               });\r\n    **/\r\n    CommerceLookupsCountryClient.prototype.find = function (options) {\r\n        return this.apiClient.get(this.routeDefinition.find(options));\r\n    };\r\n    /**\r\n     * Returns a promise that is resolved once the get action has been performed. Success response returns the commerce resource.\r\n     * @method\r\n     * @example commerceLookupsCountryClient.get('<country-id>')\r\n                   .then(function (data) {\r\n                       // perform success action here\r\n                   },\r\n                    function (response, status, headers, config) {\r\n                        // perform error handling here\r\n                   });\r\n    **/\r\n    CommerceLookupsCountryClient.prototype.get = function (id, options) {\r\n        return this.apiClient.get(this.commerceLookupsCountryRoute.get(id, options));\r\n    };\r\n    /**\r\n     * Returns a promise that is resolved once the create commerce action has been performed; this action creates a new commerce resource.\r\n     * @method\r\n     * @example commerceLookupsCountryClient.create({\r\n                    name : '<name>',\r\n                    abrv: '<abbreviation>',\r\n                    description: '<description>'\r\n                })\r\n                .then(function (data) {\r\n                    // perform success action here\r\n                },\r\n                 function (response, status, headers, config) {\r\n                     // perform error handling here\r\n                });\r\n     **/\r\n    CommerceLookupsCountryClient.prototype.create = function (data) {\r\n        return this.apiClient.post(this.routeDefinition.create(), this.routeDefinition.createParams(data));\r\n    };\r\n    /**\r\n     * Returns a promise that is resolved once the update commerce action has been performed; this action updates a commerce resource. This route uses HAL enabled objects to obtain routes and therefore it doesn't apply `baasicCommerceCountryRouteService` route template. Here is an example of how a route can be obtained from HAL enabled objects:\r\n     * ```\r\n     * let params = modelMapper.removeParams(commerceCountry);\r\n     * let uri = params['model'].links('put').href;\r\n     * ```\r\n     * @method\r\n     * @example // commerceCountry is a resource previously fetched using get action.\r\n                        commerceCountry.phoneCode = '<phone-code>';\r\n                        commerceLookupsCountryClient.update(commerceCountry)\r\n                            .then(function (data) {\r\n                                // perform success action here\r\n                            },\r\n                             function (response, status, headers, config) {\r\n                                 // perform error handling here\r\n                            });\r\n     **/\r\n    CommerceLookupsCountryClient.prototype.update = function (data) {\r\n        return this.apiClient.put(this.routeDefinition.update(data), this.routeDefinition.updateParams(data));\r\n    };\r\n    /**\r\n     * Returns a promise that is resolved once the remove action has been performed. This action will remove a commerce resource from the system if successfully completed. This route uses HAL enabled objects to obtain routes and therefore it doesn't apply `commerceLookupsCountryRoute` route template. Here is an example of how a route can be obtained from HAL enabled objects:\r\n     * ```\r\n     * let params = modelMapper.removeParams(commerceCountry);\r\n     * let uri = params['model'].links('delete').href;\r\n     * ```\r\n     * @method\r\n     * @example // commerceCountry is a resource previously fetched using get action.\r\n                    commerceLookupsCountryClient.remove(commerceCountry)\r\n                        .then(function (data) {\r\n                            // perform success action here\r\n                        },\r\n                         function (response, status, headers, config) {\r\n                             // perform error handling here\r\n                        });\r\n     **/\r\n    CommerceLookupsCountryClient.prototype.remove = function (data) {\r\n        return this.apiClient.delete(this.routeDefinition.delete(data));\r\n    };\r\n    return CommerceLookupsCountryClient;\r\n}());\r\nCommerceLookupsCountryClient = tslib_1.__decorate([\r\n    inversify_1.injectable(),\r\n    tslib_1.__param(0, inversify_1.inject(_1.TYPES.CommerceLookupsCountryRoute)),\r\n    tslib_1.__param(1, inversify_1.inject(_1.TYPES.CommerceLookupsCountryBatchClient)),\r\n    tslib_1.__param(2, inversify_1.inject(httpApi_1.httpTYPES.ApiClient)),\r\n    tslib_1.__metadata(\"design:paramtypes\", [typeof (_a = typeof _1.CommerceLookupsCountryRoute !== \"undefined\" && _1.CommerceLookupsCountryRoute) === \"function\" && _a || Object, typeof (_b = typeof _1.CommerceLookupsCountryBatchClient !== \"undefined\" && _1.CommerceLookupsCountryBatchClient) === \"function\" && _b || Object, typeof (_c = typeof httpApi_1.ApiClient !== \"undefined\" && httpApi_1.ApiClient) === \"function\" && _c || Object])\r\n], CommerceLookupsCountryClient);\r\nexports.CommerceLookupsCountryClient = CommerceLookupsCountryClient;\r\nvar _a, _b, _c;\r\n/**\r\n * @copyright (c) 2017 Mono Ltd\r\n * @license MIT\r\n * @author Mono Ltd\r\n * @overview\r\n ***Notes:**\r\n - Refer to the [Baasic REST API](http://dev.baasic.com/api/reference/home) for detailed information about available Baasic REST API end-points.\r\n - All end-point objects are transformed by the associated route service.\r\n */ \r\n\n\n\n//////////////////\n// WEBPACK FOOTER\n// ./src/modules/commerce/lookups/country/commerceLookupsCountryClient.ts\n// module id = 190\n// module chunks = 0","/* globals module */\r\n/**\r\n * @module commerceLookupsCountryRoute\r\n * @description Baasic Commerce Lookups Country Route Definition provides Baasic route templates which can be expanded to Baasic REST URIs. Various services can use Baasic Commerce Lookups Country Route Definition to obtain a needed routes while other routes will be obtained through HAL. By convention, all route services  use the same function names as their corresponding services.\r\n */\r\n\"use strict\";\r\nObject.defineProperty(exports, \"__esModule\", { value: true });\r\nvar tslib_1 = require(\"tslib\");\r\nvar inversify_1 = require(\"inversify\");\r\nvar common_1 = require(\"../../../../common\");\r\n;\r\nvar contracts_1 = require(\"../../../../core/contracts\");\r\nvar _1 = require(\"../../\");\r\nvar CommerceLookupsCountryRoute = (function (_super) {\r\n    tslib_1.__extends(CommerceLookupsCountryRoute, _super);\r\n    function CommerceLookupsCountryRoute(commerceCountryBatchRoute, appOptions) {\r\n        var _this = _super.call(this, appOptions) || this;\r\n        _this.commerceCountryBatchRoute = commerceCountryBatchRoute;\r\n        _this.appOptions = appOptions;\r\n        _this.findRoute = 'commerce/lookups/countries/{?searchQuery,page,rpp,sort,embed,fields}';\r\n        _this.getRoute = 'commerce/lookups/countries/{id}/{?embed,fields}';\r\n        _this.createRoute = 'commerce/lookups/countries';\r\n        _this.updateRoute = 'commerce/lookups/countries/{id}';\r\n        _this.deleteRoute = 'commerce/lookups/countries/{id}';\r\n        return _this;\r\n    }\r\n    Object.defineProperty(CommerceLookupsCountryRoute.prototype, \"batch\", {\r\n        get: function () {\r\n            return this.commerceCountryBatchRoute;\r\n        },\r\n        enumerable: true,\r\n        configurable: true\r\n    });\r\n    /**\r\n     * Parses find commerce country route which can be expanded with additional options. Supported items are:\r\n     * - `searchQuery` - A string value used to identify commerce resources using the phrase search.\r\n     * - `page` - A value used to set the page number, i.e. to retrieve certain commerce subset from the storage.\r\n     * - `rpp` - A value used to limit the size of result set per page.\r\n     * - `sort` - A string used to set the commerce property to sort the result collection by.\r\n     * - `embed` - Comma separated list of resources to be contained within the current representation.\r\n     * @method\r\n     * @example commerceLookupsCountryRoute.find({searchQuery: '<search-phrase>'});\r\n     **/\r\n    CommerceLookupsCountryRoute.prototype.find = function (options) {\r\n        return _super.prototype.baseFind.call(this, this.findRoute, options);\r\n    };\r\n    /**\r\n     * Parses get route; this route doesn't expose any properties.\r\n     * @method\r\n     * @example commerceLookupsCountryRoute.get();\r\n     **/\r\n    CommerceLookupsCountryRoute.prototype.get = function (id, options) {\r\n        return _super.prototype.baseGet.call(this, this.getRoute, id, options);\r\n    };\r\n    /**\r\n     * Parses create commerce country route; this URI template does not expose any additional options.\r\n     * @method\r\n     * @example commerceLookupsCountryRoute.create();\r\n     **/\r\n    CommerceLookupsCountryRoute.prototype.create = function () {\r\n        return _super.prototype.baseCreate.call(this, this.createRoute, {});\r\n    };\r\n    /**\r\n    * Parses update commerce country route; this URI template does not expose any additional options.\r\n    * @method\r\n    * @example commerceLookupsCountryRoute.update(data);\r\n    **/\r\n    CommerceLookupsCountryRoute.prototype.update = function (data) {\r\n        return _super.prototype.baseUpdate.call(this, this.updateRoute, data);\r\n    };\r\n    /**\r\n    * Parses delete commerce country route; this URI template does not expose any additional options.\r\n    * @method\r\n    * @example commerceLookupsCountryRoute.delete(data);\r\n    **/\r\n    CommerceLookupsCountryRoute.prototype.delete = function (data) {\r\n        return _super.prototype.baseDelete.call(this, this.deleteRoute, data);\r\n    };\r\n    return CommerceLookupsCountryRoute;\r\n}(common_1.BaseRoute));\r\nCommerceLookupsCountryRoute = tslib_1.__decorate([\r\n    inversify_1.injectable(),\r\n    tslib_1.__param(0, inversify_1.inject(_1.TYPES.CommerceLookupsCountryBatchRoute)),\r\n    tslib_1.__param(1, inversify_1.inject(contracts_1.TYPES.IAppOptions)),\r\n    tslib_1.__metadata(\"design:paramtypes\", [typeof (_a = typeof _1.CommerceLookupsCountryBatchRoute !== \"undefined\" && _1.CommerceLookupsCountryBatchRoute) === \"function\" && _a || Object, typeof (_b = typeof contracts_1.IAppOptions !== \"undefined\" && contracts_1.IAppOptions) === \"function\" && _b || Object])\r\n], CommerceLookupsCountryRoute);\r\nexports.CommerceLookupsCountryRoute = CommerceLookupsCountryRoute;\r\nvar _a, _b;\r\n/**\r\n * @copyright (c) 2017 Mono Ltd\r\n * @license MIT\r\n * @author Mono Ltd\r\n * @overview\r\n ***Notes:**\r\n - Refer to the [Baasic REST API](http://dev.baasic.com/api/reference/home) for detailed information about available Baasic REST API end-points.\r\n - [URI Template](https://github.com/Baasic/uritemplate-js) syntax enables expanding the Baasic route templates to Baasic REST URIs providing it with an object that contains URI parameters.\r\n - All end-point objects are transformed by the associated route service.\r\n */ \r\n\n\n\n//////////////////\n// WEBPACK FOOTER\n// ./src/modules/commerce/lookups/country/commerceLookupsCountryRoute.ts\n// module id = 191\n// module chunks = 0","\"use strict\";\r\nfunction __export(m) {\r\n    for (var p in m) if (!exports.hasOwnProperty(p)) exports[p] = m[p];\r\n}\r\nObject.defineProperty(exports, \"__esModule\", { value: true });\r\n__export(require(\"./commerceLookupsCountryBatchRoute\"));\r\n__export(require(\"./commerceLookupsCountryBatchClient\"));\r\n__export(require(\"./commerceLookupsCountryRoute\"));\r\n__export(require(\"./commerceLookupsCountryClient\"));\r\n\n\n\n//////////////////\n// WEBPACK FOOTER\n// ./src/modules/commerce/lookups/country/index.ts\n// module id = 192\n// module chunks = 0","/* globals module */\r\n/**\r\n * @module commerceInvoiceStatusBatchClient\r\n * @description  Commerce Invoice Stauts Batch Client provides an easy way to consume  Commerce REST API end-points. In order to obtain a needed routes `commerceInvoiceStatusBatchClient` uses `commerceInvoiceStatusBatchRoute`.\r\n */\r\n\"use strict\";\r\nObject.defineProperty(exports, \"__esModule\", { value: true });\r\nvar tslib_1 = require(\"tslib\");\r\nvar inversify_1 = require(\"inversify\");\r\n;\r\nvar httpApi_1 = require(\"../../../../httpApi\");\r\nvar _1 = require(\"../../\");\r\nvar CommerceLookupsInvoiceStatusBatchClient = (function () {\r\n    function CommerceLookupsInvoiceStatusBatchClient(commerceLookupsInvoiceStatusBatchRoute, apiClient) {\r\n        this.commerceLookupsInvoiceStatusBatchRoute = commerceLookupsInvoiceStatusBatchRoute;\r\n        this.apiClient = apiClient;\r\n    }\r\n    Object.defineProperty(CommerceLookupsInvoiceStatusBatchClient.prototype, \"routeDefinition\", {\r\n        get: function () {\r\n            return this.commerceLookupsInvoiceStatusBatchRoute;\r\n        },\r\n        enumerable: true,\r\n        configurable: true\r\n    });\r\n    /**\r\n     * Returns a promise that is resolved once the create commerce action has been performed; this action creates a new commerce resources.\r\n     * @method\r\n     * @example commerceLookupsInvoiceStatusBatchClient.create([{\r\n                    name : '<name>',\r\n                    abrv: '<abbreviation>',\r\n                    description: '<description>'\r\n                }])\r\n                .then(function (data) {\r\n                    // perform success action here\r\n                },\r\n                 function (response, status, headers, config) {\r\n                    // perform error handling here\r\n                });\r\n     **/\r\n    CommerceLookupsInvoiceStatusBatchClient.prototype.create = function (data) {\r\n        return this.apiClient.post(this.routeDefinition.create(), this.routeDefinition.createParams(data));\r\n    };\r\n    /**\r\n     * Returns a promise that is resolved once the update commerce action has been performed; this action updates specified commerce resources.\r\n     * @method\r\n     * @example commerceLookupsInvoiceStatusBatchClient.update(InvoiceStatuses)\r\n                    .then(function (data) {\r\n                        // perform success action here\r\n                    },\r\n                     function (response, status, headers, config) {\r\n                         // perform error handling here\r\n                    });\r\n     **/\r\n    CommerceLookupsInvoiceStatusBatchClient.prototype.update = function (data) {\r\n        return this.apiClient.put(this.routeDefinition.update(), this.routeDefinition.updateParams(data));\r\n    };\r\n    /**\r\n     * Returns a promise that is resolved once the remove commerce action has been performed. This action will remove commerce resources from the system if successfully completed.\r\n     * @method\r\n     * @example commerceLookupsInvoiceStatusBatchClient.remove(InvoiceStatusIds)\r\n                    .then(function (data) {\r\n                        // perform success action here\r\n                    },\r\n                     function (response, status, headers, config) {\r\n                         // perform error handling here\r\n                    });\r\n     **/\r\n    CommerceLookupsInvoiceStatusBatchClient.prototype.remove = function (ids) {\r\n        return this.apiClient.delete(this.commerceLookupsInvoiceStatusBatchRoute.delete(), undefined, ids);\r\n    };\r\n    return CommerceLookupsInvoiceStatusBatchClient;\r\n}());\r\nCommerceLookupsInvoiceStatusBatchClient = tslib_1.__decorate([\r\n    inversify_1.injectable(),\r\n    tslib_1.__param(0, inversify_1.inject(_1.TYPES.CommerceLookupsInvoiceStatusBatchRoute)),\r\n    tslib_1.__param(1, inversify_1.inject(httpApi_1.httpTYPES.ApiClient)),\r\n    tslib_1.__metadata(\"design:paramtypes\", [typeof (_a = typeof _1.CommerceLookupsInvoiceStatusBatchRoute !== \"undefined\" && _1.CommerceLookupsInvoiceStatusBatchRoute) === \"function\" && _a || Object, typeof (_b = typeof httpApi_1.ApiClient !== \"undefined\" && httpApi_1.ApiClient) === \"function\" && _b || Object])\r\n], CommerceLookupsInvoiceStatusBatchClient);\r\nexports.CommerceLookupsInvoiceStatusBatchClient = CommerceLookupsInvoiceStatusBatchClient;\r\nvar _a, _b;\r\n/**\r\n * @copyright (c) 2017 Mono Ltd\r\n * @license MIT\r\n * @author Mono Ltd\r\n * @overview\r\n ***Notes:**\r\n - Refer to the [Baasic REST API](http://dev.baasic.com/api/reference/home) for detailed information about available Baasic REST API end-points.\r\n - All end-point objects are transformed by the associated route service.\r\n */ \r\n\n\n\n//////////////////\n// WEBPACK FOOTER\n// ./src/modules/commerce/lookups/invoiceStatus/commerceLookupsInvoiceStatusBatchClient.ts\n// module id = 193\n// module chunks = 0","/* globals module */\r\n/**\r\n * @module commerceLookupsInvoiceStatusBatchRoute\r\n * @description Baasic Commerce Lookups Invoice Status Batch Route Definition provides Baasic route templates which can be expanded to Baasic REST URIs. Various services can use Baasic Commerce Lookups Country State Batch Route Definition to obtain a needed routes while other routes will be obtained through HAL. By convention, all route services  use the same function names as their corresponding services.\r\n */\r\n\"use strict\";\r\nObject.defineProperty(exports, \"__esModule\", { value: true });\r\nvar tslib_1 = require(\"tslib\");\r\nvar inversify_1 = require(\"inversify\");\r\nvar common_1 = require(\"../../../../common\");\r\n;\r\nvar contracts_1 = require(\"../../../../core/contracts\");\r\nvar CommerceLookupsInvoiceStatusBatchRoute = (function (_super) {\r\n    tslib_1.__extends(CommerceLookupsInvoiceStatusBatchRoute, _super);\r\n    function CommerceLookupsInvoiceStatusBatchRoute(appOptions) {\r\n        var _this = _super.call(this, appOptions) || this;\r\n        _this.appOptions = appOptions;\r\n        _this.createRoute = 'commerce/lookups/invoice-statuses/batch';\r\n        _this.updateRoute = 'commerce/lookups/invoice-statuses/batch';\r\n        _this.deleteRoute = 'commerce/lookups/invoice-statuses/batch';\r\n        return _this;\r\n    }\r\n    /**\r\n     * Parses create commerce country state batch route; this route does not expose any additional options\r\n     * @method\r\n     * @example commerceLookupsInvoiceStatusBatchRoute.create();\r\n     */\r\n    CommerceLookupsInvoiceStatusBatchRoute.prototype.create = function () {\r\n        return _super.prototype.baseCreate.call(this, this.createRoute, {});\r\n    };\r\n    /**\r\n     * Parses remove commerce country state batch route; this route does not expose any additional options\r\n     * @method\r\n     * @example commerceLookupsInvoiceStatusBatchRoute.update();\r\n     */\r\n    CommerceLookupsInvoiceStatusBatchRoute.prototype.update = function () {\r\n        return _super.prototype.baseUpdate.call(this, this.updateRoute, {});\r\n    };\r\n    /**\r\n     * Parses remove commerce country state batch route; this route does not expose any additional options\r\n     * @method\r\n     * @example commerceLookupsInvoiceStatusBatchRoute.remove();\r\n     */\r\n    CommerceLookupsInvoiceStatusBatchRoute.prototype.delete = function () {\r\n        return _super.prototype.baseDelete.call(this, this.deleteRoute, {});\r\n    };\r\n    return CommerceLookupsInvoiceStatusBatchRoute;\r\n}(common_1.BaseRoute));\r\nCommerceLookupsInvoiceStatusBatchRoute = tslib_1.__decorate([\r\n    inversify_1.injectable(),\r\n    tslib_1.__param(0, inversify_1.inject(contracts_1.TYPES.IAppOptions)),\r\n    tslib_1.__metadata(\"design:paramtypes\", [typeof (_a = typeof contracts_1.IAppOptions !== \"undefined\" && contracts_1.IAppOptions) === \"function\" && _a || Object])\r\n], CommerceLookupsInvoiceStatusBatchRoute);\r\nexports.CommerceLookupsInvoiceStatusBatchRoute = CommerceLookupsInvoiceStatusBatchRoute;\r\nvar _a;\r\n/**\r\n * @copyright (c) 2017 Mono Ltd\r\n * @license MIT\r\n * @author Mono Ltd\r\n * @overview\r\n ***Notes:**\r\n - Refer to the [Baasic REST API](http://dev.baasic.com/api/reference/home) for detailed information about available Baasic REST API end-points.\r\n - [URI Template](https://github.com/Baasic/uritemplate-js) syntax enables expanding the Baasic route templates to Baasic REST URIs providing it with an object that contains URI parameters.\r\n - All end-point objects are transformed by the associated route service.\r\n */ \r\n\n\n\n//////////////////\n// WEBPACK FOOTER\n// ./src/modules/commerce/lookups/invoiceStatus/commerceLookupsInvoiceStatusBatchRoute.ts\n// module id = 194\n// module chunks = 0","/* globals module */\r\n/**\r\n * @module commerceLookupsInvoiceStatusClient\r\n * @description  Commerce Lookups InvoiceStatus Client provides an easy way to consume  Commerce REST API end-points. In order to obtain a needed routes `commerceLookupsInvoiceStatusClient` uses `commerceLookupsInvoiceStatusRoute`.\r\n */\r\n\"use strict\";\r\nObject.defineProperty(exports, \"__esModule\", { value: true });\r\nvar tslib_1 = require(\"tslib\");\r\nvar inversify_1 = require(\"inversify\");\r\n;\r\nvar httpApi_1 = require(\"../../../../httpApi\");\r\nvar _1 = require(\"../../\");\r\nvar CommerceLookupsInvoiceStatusClient = (function () {\r\n    function CommerceLookupsInvoiceStatusClient(commerceLookupsInvoiceStatusBatchClient, commerceLookupsInvoiceStatusRoute, apiClient) {\r\n        this.commerceLookupsInvoiceStatusBatchClient = commerceLookupsInvoiceStatusBatchClient;\r\n        this.commerceLookupsInvoiceStatusRoute = commerceLookupsInvoiceStatusRoute;\r\n        this.apiClient = apiClient;\r\n    }\r\n    Object.defineProperty(CommerceLookupsInvoiceStatusClient.prototype, \"routeDefinition\", {\r\n        get: function () {\r\n            return this.commerceLookupsInvoiceStatusRoute;\r\n        },\r\n        enumerable: true,\r\n        configurable: true\r\n    });\r\n    Object.defineProperty(CommerceLookupsInvoiceStatusClient.prototype, \"batch\", {\r\n        get: function () {\r\n            return this.commerceLookupsInvoiceStatusBatchClient;\r\n        },\r\n        enumerable: true,\r\n        configurable: true\r\n    });\r\n    /**\r\n     * Returns a promise that is resolved once the find action has been performed. Success response returns a list of commerce resources matching the given criteria.\r\n     * @method\r\n     * @example commerceLookupsInvoiceStatusClient.find({\r\n                        pageNumber : 1,\r\n                        pageSize : 10,\r\n                        orderBy : '<field>',\r\n                        orderDirection : '<asc|desc>',\r\n                        search : '<search-phrase>'\r\n                    })\r\n                    .then(function (collection) {\r\n                        // perform success action here\r\n                    },\r\n                     function (response, status, headers, config) {\r\n                         // perform error handling here\r\n                    });\r\n     **/\r\n    CommerceLookupsInvoiceStatusClient.prototype.find = function (options) {\r\n        return this.apiClient.get(this.routeDefinition.find(options));\r\n    };\r\n    /**\r\n     * Returns a promise that is resolved once the get action has been performed. Success response returns the commerce resource.\r\n     * @method\r\n     * @example commerceLookupsInvoiceStatusClient.get()\r\n                    .then(function (data) {\r\n                        // perform success action here\r\n                    },\r\n                     function (response, status, headers, config) {\r\n                         // perform error handling here\r\n                    });\r\n     **/\r\n    CommerceLookupsInvoiceStatusClient.prototype.get = function (id, options) {\r\n        return this.apiClient.get(this.commerceLookupsInvoiceStatusRoute.get(id, options));\r\n    };\r\n    /**\r\n     * Returns a promise that is resolved once the update commerce action has been performed; this action updates a commerce resource. This route uses HAL enabled objects to obtain routes and therefore it doesn't apply `commerceLookupsInvoiceStatusRoute` route template. Here is an example of how a route can be obtained from HAL enabled objects:\r\n     * ```\r\n     * let params = modelMapper.removeParams(commerceInvoiceStatus);\r\n     * let uri = params['model'].links('put').href;\r\n     * ```\r\n     * @method\r\n     * @example // commerceInvoiceStatus is a resource previously fetched using get action.\r\n                    commerceInvoiceStatus.description = '<description>';\r\n                    commerceLookupsInvoiceStatusClient.update(commerceInvoiceStatus)\r\n                        .then(function (data) {\r\n                            // perform success action here\r\n                        },\r\n                         function (response, status, headers, config) {\r\n                             // perform error handling here\r\n                        });\r\n     **/\r\n    CommerceLookupsInvoiceStatusClient.prototype.update = function (data) {\r\n        return this.apiClient.put(this.routeDefinition.update(data), this.routeDefinition.updateParams(data));\r\n    };\r\n    /**\r\n     * Returns a promise that is resolved once the create commerce action has been performed; this action creates a new commerce resource.\r\n     * @method\r\n     * @example commerceLookupsInvoiceStatusClient.create({\r\n                    name : '<name>',\r\n                    abrv: '<abbreviation>',\r\n                    description: '<description>'\r\n                })\r\n                .then(function (data) {\r\n                    // perform success action here\r\n                },\r\n                 function (response, status, headers, config) {\r\n                     // perform error handling here\r\n                });\r\n     **/\r\n    CommerceLookupsInvoiceStatusClient.prototype.create = function (data) {\r\n        return this.apiClient.post(this.routeDefinition.create(), this.routeDefinition.createParams(data));\r\n    };\r\n    /**\r\n     * Returns a promise that is resolved once the remove action has been performed. This action will remove a commerce resource from the system if successfully completed. This route uses HAL enabled objects to obtain routes and therefore it doesn't apply `commerceLookupsInvoiceStatusRoute` route template. Here is an example of how a route can be obtained from HAL enabled objects:\r\n     * ```\r\n     * let params = modelMapper.removeParams(commerceInvoiceStatus);\r\n     * let uri = params['model'].links('delete').href;\r\n     * ```\r\n     * @method\r\n     * @example // commerceInvoiceStatus is a resource previously fetched using get action.\r\n                    commerceLookupsInvoiceStatusClient.remove(commerceInvoiceStatus)\r\n                        .then(function (data) {\r\n                            // perform success action here\r\n                        },\r\n                         function (response, status, headers, config) {\r\n                             // perform error handling here\r\n                        });\r\n     **/\r\n    CommerceLookupsInvoiceStatusClient.prototype.remove = function (data) {\r\n        return this.apiClient.delete(this.routeDefinition.delete(data));\r\n    };\r\n    return CommerceLookupsInvoiceStatusClient;\r\n}());\r\nCommerceLookupsInvoiceStatusClient = tslib_1.__decorate([\r\n    inversify_1.injectable(),\r\n    tslib_1.__param(0, inversify_1.inject(_1.TYPES.CommerceLookupsInvoiceStatusBatchClient)),\r\n    tslib_1.__param(1, inversify_1.inject(_1.TYPES.CommerceLookupsInvoiceStatusRoute)),\r\n    tslib_1.__param(2, inversify_1.inject(httpApi_1.httpTYPES.ApiClient)),\r\n    tslib_1.__metadata(\"design:paramtypes\", [typeof (_a = typeof _1.CommerceLookupsInvoiceStatusBatchClient !== \"undefined\" && _1.CommerceLookupsInvoiceStatusBatchClient) === \"function\" && _a || Object, typeof (_b = typeof _1.CommerceLookupsInvoiceStatusRoute !== \"undefined\" && _1.CommerceLookupsInvoiceStatusRoute) === \"function\" && _b || Object, typeof (_c = typeof httpApi_1.ApiClient !== \"undefined\" && httpApi_1.ApiClient) === \"function\" && _c || Object])\r\n], CommerceLookupsInvoiceStatusClient);\r\nexports.CommerceLookupsInvoiceStatusClient = CommerceLookupsInvoiceStatusClient;\r\nvar _a, _b, _c;\r\n/**\r\n * @copyright(c) 2017 Mono Ltd\r\n * @license MIT\r\n * @author Mono Ltd\r\n * @overview\r\n ***Notes:**\r\n - Refer to the [Baasic REST API](http://dev.baasic.com/api/reference/home) for detailed information about available Baasic REST API end-points.\r\n - All end-point objects are transformed by the associated route service.\r\n */ \r\n\n\n\n//////////////////\n// WEBPACK FOOTER\n// ./src/modules/commerce/lookups/invoiceStatus/commerceLookupsInvoiceStatusClient.ts\n// module id = 195\n// module chunks = 0","/* globals module */\r\n/**\r\n * @module commerceLookupsInvoiceStatusRoute\r\n * @description Baasic Commerce Lookups InvoiceStatus Route Definition provides Baasic route templates which can be expanded to Baasic REST URIs. Various services can use Baasic Commerce Lookups InvoiceStatus Route Definition to obtain a needed routes while other routes will be obtained through HAL. By convention, all route services  use the same function names as their corresponding services.\r\n */\r\n\"use strict\";\r\nObject.defineProperty(exports, \"__esModule\", { value: true });\r\nvar tslib_1 = require(\"tslib\");\r\nvar inversify_1 = require(\"inversify\");\r\nvar common_1 = require(\"../../../../common\");\r\n;\r\nvar contracts_1 = require(\"../../../../core/contracts\");\r\nvar _1 = require(\"../../\");\r\nvar CommerceLookupsInvoiceStatusRoute = (function (_super) {\r\n    tslib_1.__extends(CommerceLookupsInvoiceStatusRoute, _super);\r\n    function CommerceLookupsInvoiceStatusRoute(basicCommerceLookupsInvoiceStatusBatchRoute, appOptions) {\r\n        var _this = _super.call(this, appOptions) || this;\r\n        _this.basicCommerceLookupsInvoiceStatusBatchRoute = basicCommerceLookupsInvoiceStatusBatchRoute;\r\n        _this.appOptions = appOptions;\r\n        _this.findRoute = 'commerce/lookups/invoice-statuses/{?searchQuery,page,rpp,sort,embed,fields}';\r\n        _this.getRoute = 'commerce/lookups/invoice-statuses/{id}/{?embed,fields}';\r\n        _this.createRoute = 'commerce/lookups/invoice-statuses';\r\n        _this.updateRoute = 'commerce/lookups/invoice-statuses/{id}';\r\n        _this.deleteRoute = 'commerce/lookups/invoice-statuses/{id}';\r\n        return _this;\r\n    }\r\n    Object.defineProperty(CommerceLookupsInvoiceStatusRoute.prototype, \"batch\", {\r\n        get: function () {\r\n            return this.basicCommerceLookupsInvoiceStatusBatchRoute;\r\n        },\r\n        enumerable: true,\r\n        configurable: true\r\n    });\r\n    /**\r\n     * Parses find commerce customer-payment-methods route which can be expanded with additional options. Supported items are:\r\n     * - `searchQuery` - A string value used to identify commerce resources using the phrase search.\r\n     * - `page` - A value used to set the page number, i.e. to retrieve certain commerce subset from the storage.\r\n     * - `rpp` - A value used to limit the size of result set per page.\r\n     * - `sort` - A string used to set the commerce property to sort the result collection by.\r\n     * - `embed` - Comma separated list of resources to be contained within the current representation.\r\n     * @method\r\n     * @param options Query resource options.\r\n     * @example commerceLookupsInvoiceStatusRoute.find({searchQuery: '<search-phrase>'});\r\n     **/\r\n    CommerceLookupsInvoiceStatusRoute.prototype.find = function (options) {\r\n        return _super.prototype.baseFind.call(this, this.findRoute, options);\r\n    };\r\n    /**\r\n     * Parses get route; this route doesn't expose any properties.\r\n     * @method\r\n     * @example commerceLookupsInvoiceStatusRoute.get();\r\n     **/\r\n    CommerceLookupsInvoiceStatusRoute.prototype.get = function (id, options) {\r\n        return _super.prototype.baseGet.call(this, this.getRoute, options);\r\n    };\r\n    /**\r\n     * Parses create commerce payment method route; this URI template does not expose any additional options.\r\n     * @method\r\n     * @example commerceLookupsInvoiceStatusRoute.create();\r\n     **/\r\n    CommerceLookupsInvoiceStatusRoute.prototype.create = function () {\r\n        return _super.prototype.baseCreate.call(this, this.createRoute, {});\r\n    };\r\n    /**\r\n     * Parses update commerce payment method route; this URI template does not expose any additional options.\r\n     * @method\r\n     * @example commerceLookupsInvoiceStatusRoute.update(data);\r\n     **/\r\n    CommerceLookupsInvoiceStatusRoute.prototype.update = function (data) {\r\n        return _super.prototype.baseUpdate.call(this, this.updateRoute, data);\r\n    };\r\n    /**\r\n     * Parses delete commerce payment method route; this URI template does not expose any additional options.\r\n     * @method\r\n     * @example commerceLookupsInvoiceStatusRoute.delete(data);\r\n     **/\r\n    CommerceLookupsInvoiceStatusRoute.prototype.delete = function (data) {\r\n        return _super.prototype.baseDelete.call(this, this.deleteRoute, data);\r\n    };\r\n    return CommerceLookupsInvoiceStatusRoute;\r\n}(common_1.BaseRoute));\r\nCommerceLookupsInvoiceStatusRoute = tslib_1.__decorate([\r\n    inversify_1.injectable(),\r\n    tslib_1.__param(0, inversify_1.inject(_1.TYPES.CommerceLookupsInvoiceStatusBatchRoute)),\r\n    tslib_1.__param(1, inversify_1.inject(contracts_1.TYPES.IAppOptions)),\r\n    tslib_1.__metadata(\"design:paramtypes\", [typeof (_a = typeof _1.CommerceLookupsInvoiceStatusBatchRoute !== \"undefined\" && _1.CommerceLookupsInvoiceStatusBatchRoute) === \"function\" && _a || Object, typeof (_b = typeof contracts_1.IAppOptions !== \"undefined\" && contracts_1.IAppOptions) === \"function\" && _b || Object])\r\n], CommerceLookupsInvoiceStatusRoute);\r\nexports.CommerceLookupsInvoiceStatusRoute = CommerceLookupsInvoiceStatusRoute;\r\nvar _a, _b;\r\n/**\r\n * @copyright (c) 2017 Mono Ltd\r\n * @license MIT\r\n * @author Mono Ltd\r\n * @overview\r\n ***Notes:**\r\n - Refer to the [Baasic REST API](http://dev.baasic.com/api/reference/home) for detailed information about available Baasic REST API end-points.\r\n - [URI Template](https://github.com/Baasic/uritemplate-js) syntax enables expanding the Baasic route templates to Baasic REST URIs providing it with an object that contains URI parameters.\r\n - All end-point objects are transformed by the associated route service.\r\n */ \r\n\n\n\n//////////////////\n// WEBPACK FOOTER\n// ./src/modules/commerce/lookups/invoiceStatus/commerceLookupsInvoiceStatusRoute.ts\n// module id = 196\n// module chunks = 0","\"use strict\";\r\nfunction __export(m) {\r\n    for (var p in m) if (!exports.hasOwnProperty(p)) exports[p] = m[p];\r\n}\r\nObject.defineProperty(exports, \"__esModule\", { value: true });\r\n__export(require(\"./commerceLookupsInvoiceStatusBatchRoute\"));\r\n__export(require(\"./commerceLookupsInvoiceStatusBatchClient\"));\r\n__export(require(\"./commerceLookupsInvoiceStatusRoute\"));\r\n__export(require(\"./commerceLookupsInvoiceStatusClient\"));\r\n\n\n\n//////////////////\n// WEBPACK FOOTER\n// ./src/modules/commerce/lookups/invoiceStatus/index.ts\n// module id = 197\n// module chunks = 0","\"use strict\";\r\nObject.defineProperty(exports, \"__esModule\", { value: true });\r\nvar tslib_1 = require(\"tslib\");\r\nvar _1 = require(\"../\");\r\nvar _2 = require(\"./\");\r\nvar inversify_1 = require(\"inversify\");\r\nvar Lookups = (function () {\r\n    function Lookups(addressTypes, countries, countryStates, paymentMethods, paymentTransactionStatuses, recurringCyclePeriodTypes, subscriptionStatuses, invoiceStatuses) {\r\n        this.addressTypes = addressTypes;\r\n        this.countries = countries;\r\n        this.countryStates = countryStates;\r\n        this.paymentMethods = paymentMethods;\r\n        this.paymentTransactionStatuses = paymentTransactionStatuses;\r\n        this.recurringCyclePeriodTypes = recurringCyclePeriodTypes;\r\n        this.subscriptionStatuses = subscriptionStatuses;\r\n        this.invoiceStatuses = invoiceStatuses;\r\n    }\r\n    return Lookups;\r\n}());\r\nLookups = tslib_1.__decorate([\r\n    inversify_1.injectable(),\r\n    tslib_1.__param(0, inversify_1.inject(_1.TYPES.CommerceLookupsAddressTypesClient)),\r\n    tslib_1.__param(1, inversify_1.inject(_1.TYPES.CommerceLookupsCountryClient)),\r\n    tslib_1.__param(2, inversify_1.inject(_1.TYPES.CommerceLookupsCountryStateClient)),\r\n    tslib_1.__param(3, inversify_1.inject(_1.TYPES.CommerceLookupsPaymentMethodClient)),\r\n    tslib_1.__param(4, inversify_1.inject(_1.TYPES.CommerceLookupsPaymentTransactionStatusClient)),\r\n    tslib_1.__param(5, inversify_1.inject(_1.TYPES.CommerceLookupsRecurringCyclePeriodTypeClient)),\r\n    tslib_1.__param(6, inversify_1.inject(_1.TYPES.CommerceLookupsSubscriptionStatusClient)),\r\n    tslib_1.__param(7, inversify_1.inject(_1.TYPES.CommerceLookupsInvoiceStatusClient)),\r\n    tslib_1.__metadata(\"design:paramtypes\", [typeof (_a = typeof _2.CommerceLookupsAddressTypesClient !== \"undefined\" && _2.CommerceLookupsAddressTypesClient) === \"function\" && _a || Object, typeof (_b = typeof _2.CommerceLookupsCountryClient !== \"undefined\" && _2.CommerceLookupsCountryClient) === \"function\" && _b || Object, typeof (_c = typeof _2.CommerceLookupsCountryStateClient !== \"undefined\" && _2.CommerceLookupsCountryStateClient) === \"function\" && _c || Object, typeof (_d = typeof _2.CommerceLookupsPaymentMethodClient !== \"undefined\" && _2.CommerceLookupsPaymentMethodClient) === \"function\" && _d || Object, typeof (_e = typeof _2.CommerceLookupsPaymentTransactionStatusClient !== \"undefined\" && _2.CommerceLookupsPaymentTransactionStatusClient) === \"function\" && _e || Object, typeof (_f = typeof _2.CommerceLookupsRecurringCyclePeriodTypeClient !== \"undefined\" && _2.CommerceLookupsRecurringCyclePeriodTypeClient) === \"function\" && _f || Object, typeof (_g = typeof _2.CommerceLookupsSubscriptionStatusClient !== \"undefined\" && _2.CommerceLookupsSubscriptionStatusClient) === \"function\" && _g || Object, typeof (_h = typeof _2.CommerceLookupsInvoiceStatusClient !== \"undefined\" && _2.CommerceLookupsInvoiceStatusClient) === \"function\" && _h || Object])\r\n], Lookups);\r\nexports.Lookups = Lookups;\r\nvar _a, _b, _c, _d, _e, _f, _g, _h;\r\n\n\n\n//////////////////\n// WEBPACK FOOTER\n// ./src/modules/commerce/lookups/lookups.ts\n// module id = 198\n// module chunks = 0","/* globals module */\r\n/**\r\n * @module commercePaymentMethodBatchClient\r\n * @description  Commerce Payment Method Batch Client provides an easy way to consume  Commerce REST API end-points. In order to obtain a needed routes `commercePaymentMethodBatchClient` uses `commercePaymentMethodBatchRoute`.\r\n */\r\n\"use strict\";\r\nObject.defineProperty(exports, \"__esModule\", { value: true });\r\nvar tslib_1 = require(\"tslib\");\r\nvar inversify_1 = require(\"inversify\");\r\n;\r\nvar httpApi_1 = require(\"../../../../httpApi\");\r\nvar _1 = require(\"../../\");\r\nvar CommerceLookupsPaymentMethodBatchClient = (function () {\r\n    function CommerceLookupsPaymentMethodBatchClient(commerceLookupsPaymentMethodBatchRoute, apiClient) {\r\n        this.commerceLookupsPaymentMethodBatchRoute = commerceLookupsPaymentMethodBatchRoute;\r\n        this.apiClient = apiClient;\r\n    }\r\n    Object.defineProperty(CommerceLookupsPaymentMethodBatchClient.prototype, \"routeDefinition\", {\r\n        get: function () {\r\n            return this.commerceLookupsPaymentMethodBatchRoute;\r\n        },\r\n        enumerable: true,\r\n        configurable: true\r\n    });\r\n    /**\r\n     * Returns a promise that is resolved once the create commerce action has been performed; this action creates a new commerce resources.\r\n     * @method\r\n     * @example commerceLookupsPaymentMethodBatchClient.create([{\r\n                        name : '<name>',\r\n                        abrv: '<abbreviation>',\r\n                        description: '<description>',\r\n                        published: '<published>'\r\n                    }])\r\n                    .then(function (data) {\r\n                        // perform success action here\r\n                    },\r\n                     function (response, status, headers, config) {\r\n                         // perform error handling here\r\n                    });\r\n     **/\r\n    CommerceLookupsPaymentMethodBatchClient.prototype.create = function (data) {\r\n        return this.apiClient.post(this.routeDefinition.create(), this.routeDefinition.createParams(data));\r\n    };\r\n    /**\r\n     * Returns a promise that is resolved once the update commerce action has been performed; this action updates specified commerce resources.\r\n     * @method\r\n     * @example   commerceLookupsPaymentMethodBatchClient.update(commercePaymentMethods)\r\n                        .then(function (data) {\r\n                            // perform success action here\r\n                        },\r\n                         function (response, status, headers, config) {\r\n                             // perform error handling here\r\n                        });\r\n     **/\r\n    CommerceLookupsPaymentMethodBatchClient.prototype.update = function (data) {\r\n        return this.apiClient.put(this.routeDefinition.update(), this.routeDefinition.updateParams(data));\r\n    };\r\n    /**\r\n     * Returns a promise that is resolved once the remove commerce action has been performed. This action will remove commerce resources from the system if successfully completed.\r\n     * @method\r\n     * @example commerceLookupsPaymentMethodBatchClient.remove(commercePaymentMethodIds)\r\n                    .then(function (data) {\r\n                        // perform success action here\r\n                    },\r\n                     function (response, status, headers, config) {\r\n                         // perform error handling here\r\n                    });\r\n     **/\r\n    CommerceLookupsPaymentMethodBatchClient.prototype.remove = function (ids) {\r\n        return this.apiClient.delete(this.commerceLookupsPaymentMethodBatchRoute.delete(), undefined, ids);\r\n    };\r\n    return CommerceLookupsPaymentMethodBatchClient;\r\n}());\r\nCommerceLookupsPaymentMethodBatchClient = tslib_1.__decorate([\r\n    inversify_1.injectable(),\r\n    tslib_1.__param(0, inversify_1.inject(_1.TYPES.CommerceLookupsPaymentMethodBatchRoute)),\r\n    tslib_1.__param(1, inversify_1.inject(httpApi_1.httpTYPES.ApiClient)),\r\n    tslib_1.__metadata(\"design:paramtypes\", [typeof (_a = typeof _1.CommerceLookupsPaymentMethodBatchRoute !== \"undefined\" && _1.CommerceLookupsPaymentMethodBatchRoute) === \"function\" && _a || Object, typeof (_b = typeof httpApi_1.ApiClient !== \"undefined\" && httpApi_1.ApiClient) === \"function\" && _b || Object])\r\n], CommerceLookupsPaymentMethodBatchClient);\r\nexports.CommerceLookupsPaymentMethodBatchClient = CommerceLookupsPaymentMethodBatchClient;\r\nvar _a, _b;\r\n/**\r\n * @copyright (c) 2017 Mono Ltd\r\n * @license MIT\r\n * @author Mono Ltd\r\n * @overview\r\n ***Notes:**\r\n - Refer to the [Baasic REST API](http://dev.baasic.com/api/reference/home) for detailed information about available Baasic REST API end-points.\r\n - All end-point objects are transformed by the associated route service.\r\n */ \r\n\n\n\n//////////////////\n// WEBPACK FOOTER\n// ./src/modules/commerce/lookups/paymentMethod/commerceLookupsPaymentMethodBatchClient.ts\n// module id = 199\n// module chunks = 0","/* globals module */\r\n/**\r\n * @module commerceLookupsPaymentMethodBatchRoute\r\n * @description Baasic Commerce Lookups Payment Method Batch Route Definition provides Baasic route templates which can be expanded to Baasic REST URIs. Various services can use Baasic Commerce Lookups Country State Batch Route Definition to obtain a needed routes while other routes will be obtained through HAL. By convention, all route services  use the same function names as their corresponding services.\r\n */\r\n\"use strict\";\r\nObject.defineProperty(exports, \"__esModule\", { value: true });\r\nvar tslib_1 = require(\"tslib\");\r\nvar inversify_1 = require(\"inversify\");\r\nvar common_1 = require(\"../../../../common\");\r\n;\r\nvar contracts_1 = require(\"../../../../core/contracts\");\r\nvar CommerceLookupsPaymentMethodBatchRoute = (function (_super) {\r\n    tslib_1.__extends(CommerceLookupsPaymentMethodBatchRoute, _super);\r\n    function CommerceLookupsPaymentMethodBatchRoute(appOptions) {\r\n        var _this = _super.call(this, appOptions) || this;\r\n        _this.appOptions = appOptions;\r\n        _this.createRoute = 'commerce/lookups/payment-methods/batch';\r\n        _this.updateRoute = 'commerce/lookups/payment-methods/batch';\r\n        _this.deleteRoute = 'commerce/lookups/payment-methods/batch';\r\n        return _this;\r\n    }\r\n    /**\r\n     * Parses create commerce country state batch route; this route does not expose any additional options\r\n     * @method\r\n     * @example commerceLookupsPaymentMethodBatchRoute.create();\r\n     */\r\n    CommerceLookupsPaymentMethodBatchRoute.prototype.create = function () {\r\n        return _super.prototype.baseCreate.call(this, this.createRoute, {});\r\n    };\r\n    /**\r\n     * Parses remove commerce country state batch route; this route does not expose any additional options\r\n     * @method\r\n     * @example commerceLookupsPaymentMethodBatchRoute.update();\r\n     */\r\n    CommerceLookupsPaymentMethodBatchRoute.prototype.update = function () {\r\n        return _super.prototype.baseUpdate.call(this, this.updateRoute, {});\r\n    };\r\n    /**\r\n     * Parses remove commerce country state batch route; this route does not expose any additional options\r\n     * @method\r\n     * @example commerceLookupsPaymentMethodBatchRoute.remove();\r\n     */\r\n    CommerceLookupsPaymentMethodBatchRoute.prototype.delete = function () {\r\n        return _super.prototype.baseDelete.call(this, this.deleteRoute, {});\r\n    };\r\n    return CommerceLookupsPaymentMethodBatchRoute;\r\n}(common_1.BaseRoute));\r\nCommerceLookupsPaymentMethodBatchRoute = tslib_1.__decorate([\r\n    inversify_1.injectable(),\r\n    tslib_1.__param(0, inversify_1.inject(contracts_1.TYPES.IAppOptions)),\r\n    tslib_1.__metadata(\"design:paramtypes\", [typeof (_a = typeof contracts_1.IAppOptions !== \"undefined\" && contracts_1.IAppOptions) === \"function\" && _a || Object])\r\n], CommerceLookupsPaymentMethodBatchRoute);\r\nexports.CommerceLookupsPaymentMethodBatchRoute = CommerceLookupsPaymentMethodBatchRoute;\r\nvar _a;\r\n/**\r\n * @copyright (c) 2017 Mono Ltd\r\n * @license MIT\r\n * @author Mono Ltd\r\n * @overview\r\n ***Notes:**\r\n - Refer to the [Baasic REST API](http://dev.baasic.com/api/reference/home) for detailed information about available Baasic REST API end-points.\r\n - [URI Template](https://github.com/Baasic/uritemplate-js) syntax enables expanding the Baasic route templates to Baasic REST URIs providing it with an object that contains URI parameters.\r\n - All end-point objects are transformed by the associated route service.\r\n */ \r\n\n\n\n//////////////////\n// WEBPACK FOOTER\n// ./src/modules/commerce/lookups/paymentMethod/commerceLookupsPaymentMethodBatchRoute.ts\n// module id = 200\n// module chunks = 0","/* globals module */\r\n/**\r\n * @module commerceLookupsPaymentMethodClient\r\n * @description  Commerce Lookups PaymentMethod Client provides an easy way to consume  Commerce REST API end-points. In order to obtain a needed routes `commerceLookupsPaymentMethodClient` uses `commerceLookupsPaymentMethodRoute`.\r\n */\r\n\"use strict\";\r\nObject.defineProperty(exports, \"__esModule\", { value: true });\r\nvar tslib_1 = require(\"tslib\");\r\nvar inversify_1 = require(\"inversify\");\r\n;\r\nvar httpApi_1 = require(\"../../../../httpApi\");\r\nvar _1 = require(\"../../\");\r\nvar CommerceLookupsPaymentMethodClient = (function () {\r\n    function CommerceLookupsPaymentMethodClient(commerceLookupsPaymentMethodBatchClient, commerceLookupsPaymentMethodRoute, apiClient) {\r\n        this.commerceLookupsPaymentMethodBatchClient = commerceLookupsPaymentMethodBatchClient;\r\n        this.commerceLookupsPaymentMethodRoute = commerceLookupsPaymentMethodRoute;\r\n        this.apiClient = apiClient;\r\n    }\r\n    Object.defineProperty(CommerceLookupsPaymentMethodClient.prototype, \"routeDefinition\", {\r\n        get: function () {\r\n            return this.commerceLookupsPaymentMethodRoute;\r\n        },\r\n        enumerable: true,\r\n        configurable: true\r\n    });\r\n    Object.defineProperty(CommerceLookupsPaymentMethodClient.prototype, \"batch\", {\r\n        get: function () {\r\n            return this.commerceLookupsPaymentMethodBatchClient;\r\n        },\r\n        enumerable: true,\r\n        configurable: true\r\n    });\r\n    /**\r\n     * Returns a promise that is resolved once the find action has been performed. Success response returns a list of commerce resources matching the given criteria.\r\n     * @method\r\n     * @example commerceLookupsPaymentTransactionStatusClient.find({\r\n                        pageNumber : 1,\r\n                        pageSize : 10,\r\n                        orderBy : '<field>',\r\n                        orderDirection : '<asc|desc>',\r\n                        search : '<search-phrase>'\r\n                    })\r\n                    .then(function (collection) {\r\n                        // perform success action here\r\n                    },\r\n                     function (response, status, headers, config) {\r\n                         // perform error handling here\r\n                    });\r\n     **/\r\n    CommerceLookupsPaymentMethodClient.prototype.find = function (options) {\r\n        return this.apiClient.get(this.routeDefinition.find(options));\r\n    };\r\n    /**\r\n     * Returns a promise that is resolved once the get action has been performed. Success response returns the commerce resource.\r\n     * @method\r\n     * @example commerceLookupsPaymentTransactionStatusClient.get()\r\n                   .then(function (data) {\r\n                       // perform success action here\r\n                   },\r\n                    function (response, status, headers, config) {\r\n                        // perform error handling here\r\n                   });\r\n    **/\r\n    CommerceLookupsPaymentMethodClient.prototype.get = function (id, options) {\r\n        return this.apiClient.get(this.commerceLookupsPaymentMethodRoute.get(id, options));\r\n    };\r\n    /**\r\n     * Returns a promise that is resolved once the update commerce action has been performed; this action updates a commerce resource. This route uses HAL enabled objects to obtain routes and therefore it doesn't apply `commerceLookupsPaymentTransactionStatusRoute` route template. Here is an example of how a route can be obtained from HAL enabled objects:\r\n     * ```\r\n     * let params = modelMapper.removeParams(commercePaymentTransactionStatus);\r\n     * let uri = params['model'].links('put').href;\r\n     * ```\r\n     * @method\r\n     * @example // commercePaymentTransactionStatus is a resource previously fetched using get action.\r\n                        commercePaymentTransactionStatus.description = '<description>';\r\n                        commerceLookupsPaymentTransactionStatusClient.update(commercePaymentTransactionStatus)\r\n                            .then(function (data) {\r\n                                // perform success action here\r\n                            },\r\n                             function (response, status, headers, config) {\r\n                                 // perform error handling here\r\n                            });\r\n     **/\r\n    CommerceLookupsPaymentMethodClient.prototype.update = function (data) {\r\n        return this.apiClient.put(this.routeDefinition.update(data), this.routeDefinition.updateParams(data));\r\n    };\r\n    /**\r\n     * Returns a promise that is resolved once the create commerce action has been performed; this action creates a new commerce resource.\r\n     * @method\r\n     * @example commerceLookupsPaymentTransactionStatusClient.create({\r\n                        name : '<name>',\r\n                        abrv: '<abbreviation>',\r\n                        description: '<description>'\r\n                    })\r\n                    .then(function (data) {\r\n                        // perform success action here\r\n                    },\r\n                     function (response, status, headers, config) {\r\n                         // perform error handling here\r\n                    });\r\n     **/\r\n    CommerceLookupsPaymentMethodClient.prototype.create = function (data) {\r\n        return this.apiClient.post(this.routeDefinition.create(), this.routeDefinition.createParams(data));\r\n    };\r\n    /**\r\n     * Returns a promise that is resolved once the remove action has been performed. This action will remove a commerce resource from the system if successfully completed. This route uses HAL enabled objects to obtain routes and therefore it doesn't apply `commerceLookupsPaymentTransactionStatusRoute` route template. Here is an example of how a route can be obtained from HAL enabled objects:\r\n     * ```\r\n     * let params = modelMapper.removeParams(commercePaymentTransactionStatus);\r\n     * let uri = params['model'].links('delete').href;\r\n     * ```\r\n     * @method\r\n     * @example // commercePaymentTransactionStatus is a resource previously fetched using get action.\r\n                        commerceLookupsPaymentTransactionStatusClient.remove(commercePaymentTransactionStatus)\r\n                            .then(function (data) {\r\n                                // perform success action here\r\n                            },\r\n                             function (response, status, headers, config) {\r\n                                 // perform error handling here\r\n                            });\r\n     **/\r\n    CommerceLookupsPaymentMethodClient.prototype.remove = function (data) {\r\n        return this.apiClient.delete(this.routeDefinition.delete(data));\r\n    };\r\n    return CommerceLookupsPaymentMethodClient;\r\n}());\r\nCommerceLookupsPaymentMethodClient = tslib_1.__decorate([\r\n    inversify_1.injectable(),\r\n    tslib_1.__param(0, inversify_1.inject(_1.TYPES.CommerceLookupsPaymentMethodBatchClient)),\r\n    tslib_1.__param(1, inversify_1.inject(_1.TYPES.CommerceLookupsPaymentMethodRoute)),\r\n    tslib_1.__param(2, inversify_1.inject(httpApi_1.httpTYPES.ApiClient)),\r\n    tslib_1.__metadata(\"design:paramtypes\", [typeof (_a = typeof _1.CommerceLookupsPaymentMethodBatchClient !== \"undefined\" && _1.CommerceLookupsPaymentMethodBatchClient) === \"function\" && _a || Object, typeof (_b = typeof _1.CommerceLookupsPaymentMethodRoute !== \"undefined\" && _1.CommerceLookupsPaymentMethodRoute) === \"function\" && _b || Object, typeof (_c = typeof httpApi_1.ApiClient !== \"undefined\" && httpApi_1.ApiClient) === \"function\" && _c || Object])\r\n], CommerceLookupsPaymentMethodClient);\r\nexports.CommerceLookupsPaymentMethodClient = CommerceLookupsPaymentMethodClient;\r\nvar _a, _b, _c;\r\n/**\r\n * @copyright(c) 2017 Mono Ltd\r\n * @license MIT\r\n * @author Mono Ltd\r\n * @overview\r\n ***Notes:**\r\n - Refer to the [Baasic REST API](http://dev.baasic.com/api/reference/home) for detailed information about available Baasic REST API end-points.\r\n - All end-point objects are transformed by the associated route service.\r\n */ \r\n\n\n\n//////////////////\n// WEBPACK FOOTER\n// ./src/modules/commerce/lookups/paymentMethod/commerceLookupsPaymentMethodClient.ts\n// module id = 201\n// module chunks = 0","/* globals module */\r\n/**\r\n * @module commerceLookupsPaymentMethodRoute\r\n * @description Baasic Commerce Lookups PaymentMethod Route Definition provides Baasic route templates which can be expanded to Baasic REST URIs. Various services can use Baasic Commerce Lookups PaymentMethod Route Definition to obtain a needed routes while other routes will be obtained through HAL. By convention, all route services  use the same function names as their corresponding services.\r\n */\r\n\"use strict\";\r\nObject.defineProperty(exports, \"__esModule\", { value: true });\r\nvar tslib_1 = require(\"tslib\");\r\nvar inversify_1 = require(\"inversify\");\r\nvar common_1 = require(\"../../../../common\");\r\n;\r\nvar contracts_1 = require(\"../../../../core/contracts\");\r\nvar _1 = require(\"../../\");\r\nvar CommerceLookupsPaymentMethodRoute = (function (_super) {\r\n    tslib_1.__extends(CommerceLookupsPaymentMethodRoute, _super);\r\n    function CommerceLookupsPaymentMethodRoute(basicCommerceLookupsPaymentMethodBatchRoute, appOptions) {\r\n        var _this = _super.call(this, appOptions) || this;\r\n        _this.basicCommerceLookupsPaymentMethodBatchRoute = basicCommerceLookupsPaymentMethodBatchRoute;\r\n        _this.appOptions = appOptions;\r\n        _this.findRoute = 'commerce/lookups/payment-methods/{?searchQuery,page,rpp,sort,embed,fields}';\r\n        _this.getRoute = 'commerce/lookups/payment-methods/{id}/{?embed,fields}';\r\n        _this.createRoute = 'commerce/lookups/payment-methods';\r\n        _this.updateRoute = 'commerce/lookups/payment-methods/{id}';\r\n        _this.deleteRoute = 'commerce/lookups/payment-methods/{id}';\r\n        return _this;\r\n    }\r\n    Object.defineProperty(CommerceLookupsPaymentMethodRoute.prototype, \"batch\", {\r\n        get: function () {\r\n            return this.basicCommerceLookupsPaymentMethodBatchRoute;\r\n        },\r\n        enumerable: true,\r\n        configurable: true\r\n    });\r\n    /**\r\n     * Parses find commerce customer-payment-methods route which can be expanded with additional options. Supported items are:\r\n     * - `searchQuery` - A string value used to identify commerce resources using the phrase search.\r\n     * - `page` - A value used to set the page number, i.e. to retrieve certain commerce subset from the storage.\r\n     * - `rpp` - A value used to limit the size of result set per page.\r\n     * - `sort` - A string used to set the commerce property to sort the result collection by.\r\n     * - `embed` - Comma separated list of resources to be contained within the current representation.\r\n     * @method\r\n     * @param options Query resource options.\r\n     * @example commerceLookupsPaymentMethodRoute.find({searchQuery: '<search-phrase>'});\r\n     **/\r\n    CommerceLookupsPaymentMethodRoute.prototype.find = function (options) {\r\n        return _super.prototype.baseFind.call(this, this.findRoute, options);\r\n    };\r\n    /**\r\n     * Parses get route; this route doesn't expose any properties.\r\n     * @method\r\n     * @example commerceLookupsPaymentMethodRoute.get();\r\n     **/\r\n    CommerceLookupsPaymentMethodRoute.prototype.get = function (id, options) {\r\n        return _super.prototype.baseGet.call(this, this.getRoute, options);\r\n    };\r\n    /**\r\n     * Parses create commerce payment method route; this URI template does not expose any additional options.\r\n     * @method\r\n     * @example commerceLookupsPaymentMethodRoute.create();\r\n     **/\r\n    CommerceLookupsPaymentMethodRoute.prototype.create = function () {\r\n        return _super.prototype.baseCreate.call(this, this.createRoute, {});\r\n    };\r\n    /**\r\n     * Parses update commerce payment method route; this URI template does not expose any additional options.\r\n     * @method\r\n     * @example commerceLookupsPaymentMethodRoute.update(data);\r\n     **/\r\n    CommerceLookupsPaymentMethodRoute.prototype.update = function (data) {\r\n        return _super.prototype.baseUpdate.call(this, this.updateRoute, data);\r\n    };\r\n    /**\r\n     * Parses delete commerce payment method route; this URI template does not expose any additional options.\r\n     * @method\r\n     * @example commerceLookupsPaymentMethodRoute.delete(data);\r\n     **/\r\n    CommerceLookupsPaymentMethodRoute.prototype.delete = function (data) {\r\n        return _super.prototype.baseDelete.call(this, this.deleteRoute, data);\r\n    };\r\n    return CommerceLookupsPaymentMethodRoute;\r\n}(common_1.BaseRoute));\r\nCommerceLookupsPaymentMethodRoute = tslib_1.__decorate([\r\n    inversify_1.injectable(),\r\n    tslib_1.__param(0, inversify_1.inject(_1.TYPES.CommerceLookupsPaymentMethodBatchRoute)),\r\n    tslib_1.__param(1, inversify_1.inject(contracts_1.TYPES.IAppOptions)),\r\n    tslib_1.__metadata(\"design:paramtypes\", [typeof (_a = typeof _1.CommerceLookupsPaymentMethodBatchRoute !== \"undefined\" && _1.CommerceLookupsPaymentMethodBatchRoute) === \"function\" && _a || Object, typeof (_b = typeof contracts_1.IAppOptions !== \"undefined\" && contracts_1.IAppOptions) === \"function\" && _b || Object])\r\n], CommerceLookupsPaymentMethodRoute);\r\nexports.CommerceLookupsPaymentMethodRoute = CommerceLookupsPaymentMethodRoute;\r\nvar _a, _b;\r\n/**\r\n * @copyright (c) 2017 Mono Ltd\r\n * @license MIT\r\n * @author Mono Ltd\r\n * @overview\r\n ***Notes:**\r\n - Refer to the [Baasic REST API](http://dev.baasic.com/api/reference/home) for detailed information about available Baasic REST API end-points.\r\n - [URI Template](https://github.com/Baasic/uritemplate-js) syntax enables expanding the Baasic route templates to Baasic REST URIs providing it with an object that contains URI parameters.\r\n - All end-point objects are transformed by the associated route service.\r\n */ \r\n\n\n\n//////////////////\n// WEBPACK FOOTER\n// ./src/modules/commerce/lookups/paymentMethod/commerceLookupsPaymentMethodRoute.ts\n// module id = 202\n// module chunks = 0","\"use strict\";\r\nfunction __export(m) {\r\n    for (var p in m) if (!exports.hasOwnProperty(p)) exports[p] = m[p];\r\n}\r\nObject.defineProperty(exports, \"__esModule\", { value: true });\r\n__export(require(\"./commerceLookupsPaymentMethodBatchRoute\"));\r\n__export(require(\"./commerceLookupsPaymentMethodBatchClient\"));\r\n__export(require(\"./commerceLookupsPaymentMethodRoute\"));\r\n__export(require(\"./commerceLookupsPaymentMethodClient\"));\r\n\n\n\n//////////////////\n// WEBPACK FOOTER\n// ./src/modules/commerce/lookups/paymentMethod/index.ts\n// module id = 203\n// module chunks = 0","/* globals module */\r\n/**\r\n * @module commercePaymentTransactionStatusBatchClient\r\n * @description  Commerce Payment Method Batch Client provides an easy way to consume  Commerce REST API end-points. In order to obtain a needed routes `commercePaymentTransactionStatusBatchClient` uses `commercePaymentTransactionStatusBatchRoute`.\r\n */\r\n\"use strict\";\r\nObject.defineProperty(exports, \"__esModule\", { value: true });\r\nvar tslib_1 = require(\"tslib\");\r\nvar inversify_1 = require(\"inversify\");\r\n;\r\nvar httpApi_1 = require(\"../../../../httpApi\");\r\nvar _1 = require(\"../../\");\r\nvar CommerceLookupsPaymentTransactionStatusBatchClient = (function () {\r\n    function CommerceLookupsPaymentTransactionStatusBatchClient(commerceLookupsPaymentTransactionStatusBatchRoute, apiClient) {\r\n        this.commerceLookupsPaymentTransactionStatusBatchRoute = commerceLookupsPaymentTransactionStatusBatchRoute;\r\n        this.apiClient = apiClient;\r\n    }\r\n    Object.defineProperty(CommerceLookupsPaymentTransactionStatusBatchClient.prototype, \"routeDefinition\", {\r\n        get: function () {\r\n            return this.commerceLookupsPaymentTransactionStatusBatchRoute;\r\n        },\r\n        enumerable: true,\r\n        configurable: true\r\n    });\r\n    /**\r\n     * Returns a promise that is resolved once the create commerce action has been performed; this action creates a new commerce resources.\r\n     * @method\r\n     * @example commerceLookupsPaymentTransactionStatusBatchClient.create([{\r\n                   name : '<name>',\r\n                   abrv: '<abbreviation>',\r\n                   description: '<description>'\r\n               }])\r\n               .then(function (data) {\r\n                   // perform success action here\r\n               },\r\n                function (response, status, headers, config) {\r\n                    // perform error handling here\r\n               });\r\n    **/\r\n    CommerceLookupsPaymentTransactionStatusBatchClient.prototype.create = function (data) {\r\n        return this.apiClient.post(this.routeDefinition.create(), this.routeDefinition.createParams(data));\r\n    };\r\n    /**\r\n     * Returns a promise that is resolved once the update commerce action has been performed; this action updates specified commerce resources.\r\n     * @method\r\n     * @example commerceLookupsPaymentTransactionStatusBatchClient.update(commercePaymentTransactionStatuses)\r\n                    .then(function (data) {\r\n                        // perform success action here\r\n                    },\r\n                     function (response, status, headers, config) {\r\n                         // perform error handling here\r\n                    });\r\n     **/\r\n    CommerceLookupsPaymentTransactionStatusBatchClient.prototype.update = function (data) {\r\n        return this.apiClient.put(this.routeDefinition.update(), this.routeDefinition.updateParams(data));\r\n    };\r\n    /**\r\n     * Returns a promise that is resolved once the remove commerce action has been performed. This action will remove commerce resources from the system if successfully completed.\r\n     * @method\r\n     * @example commerceLookupsPaymentTransactionStatusBatchClient.remove(commercePaymentTransactionStatusIds)\r\n                    .then(function (data) {\r\n                        // perform success action here\r\n                    },\r\n                     function (response, status, headers, config) {\r\n                         // perform error handling here\r\n                    });\r\n     **/\r\n    CommerceLookupsPaymentTransactionStatusBatchClient.prototype.remove = function (ids) {\r\n        return this.apiClient.delete(this.commerceLookupsPaymentTransactionStatusBatchRoute.delete(), undefined, ids);\r\n    };\r\n    return CommerceLookupsPaymentTransactionStatusBatchClient;\r\n}());\r\nCommerceLookupsPaymentTransactionStatusBatchClient = tslib_1.__decorate([\r\n    inversify_1.injectable(),\r\n    tslib_1.__param(0, inversify_1.inject(_1.TYPES.CommerceLookupsPaymentTransactionStatusBatchRoute)),\r\n    tslib_1.__param(1, inversify_1.inject(httpApi_1.httpTYPES.ApiClient)),\r\n    tslib_1.__metadata(\"design:paramtypes\", [typeof (_a = typeof _1.CommerceLookupsPaymentTransactionStatusBatchRoute !== \"undefined\" && _1.CommerceLookupsPaymentTransactionStatusBatchRoute) === \"function\" && _a || Object, typeof (_b = typeof httpApi_1.ApiClient !== \"undefined\" && httpApi_1.ApiClient) === \"function\" && _b || Object])\r\n], CommerceLookupsPaymentTransactionStatusBatchClient);\r\nexports.CommerceLookupsPaymentTransactionStatusBatchClient = CommerceLookupsPaymentTransactionStatusBatchClient;\r\nvar _a, _b;\r\n/**\r\n * @copyright (c) 2017 Mono Ltd\r\n * @license MIT\r\n * @author Mono Ltd\r\n * @overview\r\n ***Notes:**\r\n - Refer to the [Baasic REST API](http://dev.baasic.com/api/reference/home) for detailed information about available Baasic REST API end-points.\r\n - All end-point objects are transformed by the associated route service.\r\n */ \r\n\n\n\n//////////////////\n// WEBPACK FOOTER\n// ./src/modules/commerce/lookups/paymentTransactionStatus/commerceLookupsPaymentTransactionStatusBatchClient.ts\n// module id = 204\n// module chunks = 0","/* globals module */\r\n/**\r\n * @module commerceLookupsPaymentTransactionStatusBatchRoute\r\n * @description Baasic Commerce Lookups Payment Method Batch Route Definition provides Baasic route templates which can be expanded to Baasic REST URIs. Various services can use Baasic Commerce Lookups Country State Batch Route Definition to obtain a needed routes while other routes will be obtained through HAL. By convention, all route services  use the same function names as their corresponding services.\r\n */\r\n\"use strict\";\r\nObject.defineProperty(exports, \"__esModule\", { value: true });\r\nvar tslib_1 = require(\"tslib\");\r\nvar inversify_1 = require(\"inversify\");\r\nvar common_1 = require(\"../../../../common\");\r\n;\r\nvar contracts_1 = require(\"../../../../core/contracts\");\r\nvar CommerceLookupsPaymentTransactionStatusBatchRoute = (function (_super) {\r\n    tslib_1.__extends(CommerceLookupsPaymentTransactionStatusBatchRoute, _super);\r\n    function CommerceLookupsPaymentTransactionStatusBatchRoute(appOptions) {\r\n        var _this = _super.call(this, appOptions) || this;\r\n        _this.appOptions = appOptions;\r\n        _this.createRoute = 'commerce/lookups/payment-transaction-statuses/batch';\r\n        _this.updateRoute = 'commerce/lookups/payment-transaction-statuses/batch';\r\n        _this.deleteRoute = 'commerce/lookups/payment-transaction-statuses/batch';\r\n        return _this;\r\n    }\r\n    /**\r\n     * Parses create commerce country state batch route; this route does not expose any additional options\r\n     * @method\r\n     * @example commerceLookupsPaymentTransactionStatusBatchRoute.create();\r\n     */\r\n    CommerceLookupsPaymentTransactionStatusBatchRoute.prototype.create = function () {\r\n        return _super.prototype.baseCreate.call(this, this.createRoute, {});\r\n    };\r\n    /**\r\n     * Parses remove commerce country state batch route; this route does not expose any additional options\r\n     * @method\r\n     * @example commerceLookupsPaymentTransactionStatusBatchRoute.update();\r\n     */\r\n    CommerceLookupsPaymentTransactionStatusBatchRoute.prototype.update = function () {\r\n        return _super.prototype.baseUpdate.call(this, this.updateRoute, {});\r\n    };\r\n    /**\r\n     * Parses remove commerce country state batch route; this route does not expose any additional options\r\n     * @method\r\n     * @example commerceLookupsPaymentTransactionStatusBatchRoute.remove();\r\n     */\r\n    CommerceLookupsPaymentTransactionStatusBatchRoute.prototype.delete = function () {\r\n        return _super.prototype.baseDelete.call(this, this.deleteRoute, {});\r\n    };\r\n    return CommerceLookupsPaymentTransactionStatusBatchRoute;\r\n}(common_1.BaseRoute));\r\nCommerceLookupsPaymentTransactionStatusBatchRoute = tslib_1.__decorate([\r\n    inversify_1.injectable(),\r\n    tslib_1.__param(0, inversify_1.inject(contracts_1.TYPES.IAppOptions)),\r\n    tslib_1.__metadata(\"design:paramtypes\", [typeof (_a = typeof contracts_1.IAppOptions !== \"undefined\" && contracts_1.IAppOptions) === \"function\" && _a || Object])\r\n], CommerceLookupsPaymentTransactionStatusBatchRoute);\r\nexports.CommerceLookupsPaymentTransactionStatusBatchRoute = CommerceLookupsPaymentTransactionStatusBatchRoute;\r\nvar _a;\r\n/**\r\n * @copyright (c) 2017 Mono Ltd\r\n * @license MIT\r\n * @author Mono Ltd\r\n * @overview\r\n ***Notes:**\r\n - Refer to the [Baasic REST API](http://dev.baasic.com/api/reference/home) for detailed information about available Baasic REST API end-points.\r\n - [URI Template](https://github.com/Baasic/uritemplate-js) syntax enables expanding the Baasic route templates to Baasic REST URIs providing it with an object that contains URI parameters.\r\n - All end-point objects are transformed by the associated route service.\r\n */ \r\n\n\n\n//////////////////\n// WEBPACK FOOTER\n// ./src/modules/commerce/lookups/paymentTransactionStatus/commerceLookupsPaymentTransactionStatusBatchRoute.ts\n// module id = 205\n// module chunks = 0","/* globals module */\r\n/**\r\n * @module commerceLookupsPaymentTransactionStatusClient\r\n * @description  Commerce Lookups PaymentTransactionStatus Client provides an easy way to consume  Commerce REST API end-points. In order to obtain a needed routes `commerceLookupsPaymentTransactionStatusClient` uses `commerceLookupsPaymentTransactionStatusRoute`.\r\n */\r\n\"use strict\";\r\nObject.defineProperty(exports, \"__esModule\", { value: true });\r\nvar tslib_1 = require(\"tslib\");\r\nvar inversify_1 = require(\"inversify\");\r\n;\r\nvar httpApi_1 = require(\"../../../../httpApi\");\r\nvar _1 = require(\"../../\");\r\nvar CommerceLookupsPaymentTransactionStatusClient = (function () {\r\n    function CommerceLookupsPaymentTransactionStatusClient(commerceLookupsPaymentTransactionStatusBatchClient, commerceLookupsPaymentTransactionStatusRoute, apiClient) {\r\n        this.commerceLookupsPaymentTransactionStatusBatchClient = commerceLookupsPaymentTransactionStatusBatchClient;\r\n        this.commerceLookupsPaymentTransactionStatusRoute = commerceLookupsPaymentTransactionStatusRoute;\r\n        this.apiClient = apiClient;\r\n    }\r\n    Object.defineProperty(CommerceLookupsPaymentTransactionStatusClient.prototype, \"routeDefinition\", {\r\n        get: function () {\r\n            return this.commerceLookupsPaymentTransactionStatusRoute;\r\n        },\r\n        enumerable: true,\r\n        configurable: true\r\n    });\r\n    Object.defineProperty(CommerceLookupsPaymentTransactionStatusClient.prototype, \"batch\", {\r\n        get: function () {\r\n            return this.commerceLookupsPaymentTransactionStatusBatchClient;\r\n        },\r\n        enumerable: true,\r\n        configurable: true\r\n    });\r\n    /**\r\n     * Returns a promise that is resolved once the find action has been performed. Success response returns a list of commerce resources matching the given criteria.\r\n     * @method\r\n     * @example commerceLookupsPaymentTransactionStatusClient.find({\r\n                        pageNumber : 1,\r\n                        pageSize : 10,\r\n                        orderBy : '<field>',\r\n                        orderDirection : '<asc|desc>',\r\n                        search : '<search-phrase>'\r\n                    })\r\n                    .then(function (collection) {\r\n                        // perform success action here\r\n                    },\r\n                     function (response, status, headers, config) {\r\n                         // perform error handling here\r\n                    });\r\n     **/\r\n    CommerceLookupsPaymentTransactionStatusClient.prototype.find = function (options) {\r\n        return this.apiClient.get(this.routeDefinition.find(options));\r\n    };\r\n    /**\r\n     * Returns a promise that is resolved once the get action has been performed. Success response returns the commerce resource.\r\n     * @method\r\n     * @example commerceLookupsPaymentTransactionStatusClient.get()\r\n                    .then(function (data) {\r\n                        // perform success action here\r\n                    },\r\n                     function (response, status, headers, config) {\r\n                         // perform error handling here\r\n                    });\r\n     **/\r\n    CommerceLookupsPaymentTransactionStatusClient.prototype.get = function (id, options) {\r\n        return this.apiClient.get(this.commerceLookupsPaymentTransactionStatusRoute.get(id, options));\r\n    };\r\n    /**\r\n     * Returns a promise that is resolved once the update commerce action has been performed; this action updates a commerce resource. This route uses HAL enabled objects to obtain routes and therefore it doesn't apply `commerceLookupsPaymentTransactionStatusRoute` route template. Here is an example of how a route can be obtained from HAL enabled objects:\r\n     * ```\r\n     * let params = modelMapper.removeParams(commercePaymentTransactionStatus);\r\n     * let uri = params['model'].links('put').href;\r\n     * ```\r\n     * @method\r\n     * @example // commercePaymentTransactionStatus is a resource previously fetched using get action.\r\n                    commercePaymentTransactionStatus.description = '<description>';\r\n                    commerceLookupsPaymentTransactionStatusClient.update(commercePaymentTransactionStatus)\r\n                        .then(function (data) {\r\n                            // perform success action here\r\n                        },\r\n                         function (response, status, headers, config) {\r\n                             // perform error handling here\r\n                        });\r\n     **/\r\n    CommerceLookupsPaymentTransactionStatusClient.prototype.update = function (data) {\r\n        return this.apiClient.put(this.routeDefinition.update(data), this.routeDefinition.updateParams(data));\r\n    };\r\n    /**\r\n     * Returns a promise that is resolved once the create commerce action has been performed; this action creates a new commerce resource.\r\n     * @method\r\n     * @example commerceLookupsPaymentTransactionStatusClient.create({\r\n                    name : '<name>',\r\n                    abrv: '<abbreviation>',\r\n                    description: '<description>'\r\n                })\r\n                .then(function (data) {\r\n                    // perform success action here\r\n                },\r\n                 function (response, status, headers, config) {\r\n                     // perform error handling here\r\n                });\r\n     **/\r\n    CommerceLookupsPaymentTransactionStatusClient.prototype.create = function (data) {\r\n        return this.apiClient.post(this.routeDefinition.create(), this.routeDefinition.createParams(data));\r\n    };\r\n    /**\r\n     * Returns a promise that is resolved once the remove action has been performed. This action will remove a commerce resource from the system if successfully completed. This route uses HAL enabled objects to obtain routes and therefore it doesn't apply `commerceLookupsPaymentTransactionStatusRoute` route template. Here is an example of how a route can be obtained from HAL enabled objects:\r\n     * ```\r\n     * let params = modelMapper.removeParams(commercePaymentTransactionStatus);\r\n     * let uri = params['model'].links('delete').href;\r\n     * ```\r\n     * @method\r\n     * @example // commercePaymentTransactionStatus is a resource previously fetched using get action.\r\n                        commerceLookupsPaymentTransactionStatusClient.remove(commercePaymentTransactionStatus)\r\n                            .then(function (data) {\r\n                                // perform success action here\r\n                            },\r\n                             function (response, status, headers, config) {\r\n                                 // perform error handling here\r\n                            });\r\n     **/\r\n    CommerceLookupsPaymentTransactionStatusClient.prototype.remove = function (data) {\r\n        return this.apiClient.delete(this.routeDefinition.delete(data));\r\n    };\r\n    return CommerceLookupsPaymentTransactionStatusClient;\r\n}());\r\nCommerceLookupsPaymentTransactionStatusClient = tslib_1.__decorate([\r\n    inversify_1.injectable(),\r\n    tslib_1.__param(0, inversify_1.inject(_1.TYPES.CommerceLookupsPaymentTransactionStatusBatchClient)),\r\n    tslib_1.__param(1, inversify_1.inject(_1.TYPES.CommerceLookupsPaymentTransactionStatusRoute)),\r\n    tslib_1.__param(2, inversify_1.inject(httpApi_1.httpTYPES.ApiClient)),\r\n    tslib_1.__metadata(\"design:paramtypes\", [typeof (_a = typeof _1.CommerceLookupsPaymentTransactionStatusBatchClient !== \"undefined\" && _1.CommerceLookupsPaymentTransactionStatusBatchClient) === \"function\" && _a || Object, typeof (_b = typeof _1.CommerceLookupsPaymentTransactionStatusRoute !== \"undefined\" && _1.CommerceLookupsPaymentTransactionStatusRoute) === \"function\" && _b || Object, typeof (_c = typeof httpApi_1.ApiClient !== \"undefined\" && httpApi_1.ApiClient) === \"function\" && _c || Object])\r\n], CommerceLookupsPaymentTransactionStatusClient);\r\nexports.CommerceLookupsPaymentTransactionStatusClient = CommerceLookupsPaymentTransactionStatusClient;\r\nvar _a, _b, _c;\r\n/**\r\n * @copyright(c) 2017 Mono Ltd\r\n * @license MIT\r\n * @author Mono Ltd\r\n * @overview\r\n ***Notes:**\r\n - Refer to the [Baasic REST API](http://dev.baasic.com/api/reference/home) for detailed information about available Baasic REST API end-points.\r\n - All end-point objects are transformed by the associated route service.\r\n */ \r\n\n\n\n//////////////////\n// WEBPACK FOOTER\n// ./src/modules/commerce/lookups/paymentTransactionStatus/commerceLookupsPaymentTransactionStatusClient.ts\n// module id = 206\n// module chunks = 0","/* globals module */\r\n/**\r\n * @module commerceLookupsPaymentTransactionStatusRoute\r\n * @description Baasic Commerce Lookups PaymentTransactionStatus Route Definition provides Baasic route templates which can be expanded to Baasic REST URIs. Various services can use Baasic Commerce Lookups PaymentTransactionStatus Route Definition to obtain a needed routes while other routes will be obtained through HAL. By convention, all route services  use the same function names as their corresponding services.\r\n */\r\n\"use strict\";\r\nObject.defineProperty(exports, \"__esModule\", { value: true });\r\nvar tslib_1 = require(\"tslib\");\r\nvar inversify_1 = require(\"inversify\");\r\nvar common_1 = require(\"../../../../common\");\r\n;\r\nvar contracts_1 = require(\"../../../../core/contracts\");\r\nvar _1 = require(\"../../\");\r\nvar CommerceLookupsPaymentTransactionStatusRoute = (function (_super) {\r\n    tslib_1.__extends(CommerceLookupsPaymentTransactionStatusRoute, _super);\r\n    function CommerceLookupsPaymentTransactionStatusRoute(basicCommerceLookupsPaymentTransactionStatusBatchRoute, appOptions) {\r\n        var _this = _super.call(this, appOptions) || this;\r\n        _this.basicCommerceLookupsPaymentTransactionStatusBatchRoute = basicCommerceLookupsPaymentTransactionStatusBatchRoute;\r\n        _this.appOptions = appOptions;\r\n        _this.findRoute = 'commerce/lookups/payment-transaction-statuses/{?searchQuery,page,rpp,sort,embed,fields}';\r\n        _this.getRoute = 'commerce/lookups/payment-transaction-statuses/{id}/{?embed,fields}';\r\n        _this.createRoute = 'commerce/lookups/payment-transaction-statuses';\r\n        _this.updateRoute = 'commerce/lookups/payment-transaction-statuses/{id}';\r\n        _this.deleteRoute = 'commerce/lookups/payment-transaction-statuses/{id}';\r\n        return _this;\r\n    }\r\n    Object.defineProperty(CommerceLookupsPaymentTransactionStatusRoute.prototype, \"batch\", {\r\n        get: function () {\r\n            return this.basicCommerceLookupsPaymentTransactionStatusBatchRoute;\r\n        },\r\n        enumerable: true,\r\n        configurable: true\r\n    });\r\n    /**\r\n     * Parses find commerce customer-payment-methods route which can be expanded with additional options. Supported items are:\r\n     * - `searchQuery` - A string value used to identify commerce resources using the phrase search.\r\n     * - `page` - A value used to set the page number, i.e. to retrieve certain commerce subset from the storage.\r\n     * - `rpp` - A value used to limit the size of result set per page.\r\n     * - `sort` - A string used to set the commerce property to sort the result collection by.\r\n     * - `embed` - Comma separated list of resources to be contained within the current representation.\r\n     * @method\r\n     * @param options Query resource options.\r\n     * @example commerceLookupsPaymentTransactionStatusRoute.find({searchQuery: '<search-phrase>'});\r\n     **/\r\n    CommerceLookupsPaymentTransactionStatusRoute.prototype.find = function (options) {\r\n        return _super.prototype.baseFind.call(this, this.findRoute, options);\r\n    };\r\n    /**\r\n     * Parses get route; this route doesn't expose any properties.\r\n     * @method\r\n     * @example commerceLookupsPaymentTransactionStatusRoute.get();\r\n     **/\r\n    CommerceLookupsPaymentTransactionStatusRoute.prototype.get = function (id, options) {\r\n        return _super.prototype.baseGet.call(this, this.getRoute, options);\r\n    };\r\n    /**\r\n     * Parses create commerce payment method route; this URI template does not expose any additional options.\r\n     * @method\r\n     * @example commerceLookupsPaymentTransactionStatusRoute.create();\r\n     **/\r\n    CommerceLookupsPaymentTransactionStatusRoute.prototype.create = function () {\r\n        return _super.prototype.baseCreate.call(this, this.createRoute, {});\r\n    };\r\n    /**\r\n     * Parses update commerce payment method route; this URI template does not expose any additional options.\r\n     * @method\r\n     * @example commerceLookupsPaymentTransactionStatusRoute.update(data);\r\n     **/\r\n    CommerceLookupsPaymentTransactionStatusRoute.prototype.update = function (data) {\r\n        return _super.prototype.baseUpdate.call(this, this.updateRoute, data);\r\n    };\r\n    /**\r\n     * Parses delete commerce payment method route; this URI template does not expose any additional options.\r\n     * @method\r\n     * @example commerceLookupsPaymentTransactionStatusRoute.delete(data);\r\n     **/\r\n    CommerceLookupsPaymentTransactionStatusRoute.prototype.delete = function (data) {\r\n        return _super.prototype.baseDelete.call(this, this.deleteRoute, data);\r\n    };\r\n    return CommerceLookupsPaymentTransactionStatusRoute;\r\n}(common_1.BaseRoute));\r\nCommerceLookupsPaymentTransactionStatusRoute = tslib_1.__decorate([\r\n    inversify_1.injectable(),\r\n    tslib_1.__param(0, inversify_1.inject(_1.TYPES.CommerceLookupsPaymentTransactionStatusBatchRoute)),\r\n    tslib_1.__param(1, inversify_1.inject(contracts_1.TYPES.IAppOptions)),\r\n    tslib_1.__metadata(\"design:paramtypes\", [typeof (_a = typeof _1.CommerceLookupsPaymentTransactionStatusBatchRoute !== \"undefined\" && _1.CommerceLookupsPaymentTransactionStatusBatchRoute) === \"function\" && _a || Object, typeof (_b = typeof contracts_1.IAppOptions !== \"undefined\" && contracts_1.IAppOptions) === \"function\" && _b || Object])\r\n], CommerceLookupsPaymentTransactionStatusRoute);\r\nexports.CommerceLookupsPaymentTransactionStatusRoute = CommerceLookupsPaymentTransactionStatusRoute;\r\nvar _a, _b;\r\n/**\r\n * @copyright (c) 2017 Mono Ltd\r\n * @license MIT\r\n * @author Mono Ltd\r\n * @overview\r\n ***Notes:**\r\n - Refer to the [Baasic REST API](http://dev.baasic.com/api/reference/home) for detailed information about available Baasic REST API end-points.\r\n - [URI Template](https://github.com/Baasic/uritemplate-js) syntax enables expanding the Baasic route templates to Baasic REST URIs providing it with an object that contains URI parameters.\r\n - All end-point objects are transformed by the associated route service.\r\n */ \r\n\n\n\n//////////////////\n// WEBPACK FOOTER\n// ./src/modules/commerce/lookups/paymentTransactionStatus/commerceLookupsPaymentTransactionStatusRoute.ts\n// module id = 207\n// module chunks = 0","\"use strict\";\r\nfunction __export(m) {\r\n    for (var p in m) if (!exports.hasOwnProperty(p)) exports[p] = m[p];\r\n}\r\nObject.defineProperty(exports, \"__esModule\", { value: true });\r\n__export(require(\"./commerceLookupsPaymentTransactionStatusBatchRoute\"));\r\n__export(require(\"./commerceLookupsPaymentTransactionStatusBatchClient\"));\r\n__export(require(\"./commerceLookupsPaymentTransactionStatusRoute\"));\r\n__export(require(\"./commerceLookupsPaymentTransactionStatusClient\"));\r\n\n\n\n//////////////////\n// WEBPACK FOOTER\n// ./src/modules/commerce/lookups/paymentTransactionStatus/index.ts\n// module id = 208\n// module chunks = 0","/* globals module */\r\n/**\r\n * @module commerceRecurringCyclePeriodTypeBatchClient\r\n * @description  Commerce Payment Method Batch Client provides an easy way to consume  Commerce REST API end-points. In order to obtain a needed routes `commerceRecurringCyclePeriodTypeBatchClient` uses `commerceRecurringCyclePeriodTypeBatchRoute`.\r\n */\r\n\"use strict\";\r\nObject.defineProperty(exports, \"__esModule\", { value: true });\r\nvar tslib_1 = require(\"tslib\");\r\nvar inversify_1 = require(\"inversify\");\r\n;\r\nvar httpApi_1 = require(\"../../../../httpApi\");\r\nvar _1 = require(\"../../\");\r\nvar CommerceLookupsRecurringCyclePeriodTypeBatchClient = (function () {\r\n    function CommerceLookupsRecurringCyclePeriodTypeBatchClient(commerceLookupsRecurringCyclePeriodTypeBatchRoute, apiClient) {\r\n        this.commerceLookupsRecurringCyclePeriodTypeBatchRoute = commerceLookupsRecurringCyclePeriodTypeBatchRoute;\r\n        this.apiClient = apiClient;\r\n    }\r\n    Object.defineProperty(CommerceLookupsRecurringCyclePeriodTypeBatchClient.prototype, \"routeDefinition\", {\r\n        get: function () {\r\n            return this.commerceLookupsRecurringCyclePeriodTypeBatchRoute;\r\n        },\r\n        enumerable: true,\r\n        configurable: true\r\n    });\r\n    /**\r\n     * Returns a promise that is resolved once the create commerce action has been performed; this action creates a new commerce resources.\r\n     * @method\r\n     * @example commerceLookupsRecurringCyclePeriodTypeBatchClient.create([{\r\n                    name : '<name>',\r\n                    abrv: '<abbreviation>',\r\n                    description: '<description>',\r\n                    monthFactor: '<month-factor'>\r\n                }])\r\n                .then(function (data) {\r\n                    // perform success action here\r\n                },\r\n                 function (response, status, headers, config) {\r\n                     // perform error handling here\r\n                });\r\n     **/\r\n    CommerceLookupsRecurringCyclePeriodTypeBatchClient.prototype.create = function (data) {\r\n        return this.apiClient.post(this.routeDefinition.create(), this.routeDefinition.createParams(data));\r\n    };\r\n    /**\r\n     * Returns a promise that is resolved once the update commerce action has been performed; this action updates specified commerce resources.\r\n     * @method\r\n     * @example   commerceLookupsRecurringCyclePeriodTypeBatchClient.update(commerceRecurringPeriodTypes)\r\n                    .then(function (data) {\r\n                        // perform success action here\r\n                    },\r\n                     function (response, status, headers, config) {\r\n                         // perform error handling here\r\n                    });\r\n     **/\r\n    CommerceLookupsRecurringCyclePeriodTypeBatchClient.prototype.update = function (data) {\r\n        return this.apiClient.put(this.routeDefinition.update(), this.routeDefinition.updateParams(data));\r\n    };\r\n    /**\r\n     * Returns a promise that is resolved once the remove commerce action has been performed. This action will remove commerce resources from the system if successfully completed.\r\n     * @method\r\n     * @example commerceLookupsRecurringCyclePeriodTypeBatchClient.remove(commerceRecurringPeriodTypeIds)\r\n                    .then(function (data) {\r\n                        // perform success action here\r\n                    },\r\n                     function (response, status, headers, config) {\r\n                         // perform error handling here\r\n                    });\r\n     **/\r\n    CommerceLookupsRecurringCyclePeriodTypeBatchClient.prototype.remove = function (ids) {\r\n        return this.apiClient.delete(this.commerceLookupsRecurringCyclePeriodTypeBatchRoute.delete(), undefined, ids);\r\n    };\r\n    return CommerceLookupsRecurringCyclePeriodTypeBatchClient;\r\n}());\r\nCommerceLookupsRecurringCyclePeriodTypeBatchClient = tslib_1.__decorate([\r\n    inversify_1.injectable(),\r\n    tslib_1.__param(0, inversify_1.inject(_1.TYPES.CommerceLookupsRecurringCyclePeriodTypeBatchRoute)),\r\n    tslib_1.__param(1, inversify_1.inject(httpApi_1.httpTYPES.ApiClient)),\r\n    tslib_1.__metadata(\"design:paramtypes\", [typeof (_a = typeof _1.CommerceLookupsRecurringCyclePeriodTypeBatchRoute !== \"undefined\" && _1.CommerceLookupsRecurringCyclePeriodTypeBatchRoute) === \"function\" && _a || Object, typeof (_b = typeof httpApi_1.ApiClient !== \"undefined\" && httpApi_1.ApiClient) === \"function\" && _b || Object])\r\n], CommerceLookupsRecurringCyclePeriodTypeBatchClient);\r\nexports.CommerceLookupsRecurringCyclePeriodTypeBatchClient = CommerceLookupsRecurringCyclePeriodTypeBatchClient;\r\nvar _a, _b;\r\n/**\r\n * @copyright (c) 2017 Mono Ltd\r\n * @license MIT\r\n * @author Mono Ltd\r\n * @overview\r\n ***Notes:**\r\n - Refer to the [Baasic REST API](http://dev.baasic.com/api/reference/home) for detailed information about available Baasic REST API end-points.\r\n - All end-point objects are transformed by the associated route service.\r\n */ \r\n\n\n\n//////////////////\n// WEBPACK FOOTER\n// ./src/modules/commerce/lookups/recurringCyclePeriodType/commerceLookupsRecurringCyclePeriodTypeBatchClient.ts\n// module id = 209\n// module chunks = 0","/* globals module */\r\n/**\r\n * @module commerceLookupsRecurringCyclePeriodTypeBatchRoute\r\n * @description Baasic Commerce Lookups Recurring Cycle Period Type Batch Route Definition provides Baasic route templates which can be expanded to Baasic REST URIs. Various services can use Baasic Commerce Lookups Country State Batch Route Definition to obtain a needed routes while other routes will be obtained through HAL. By convention, all route services  use the same function names as their corresponding services.\r\n */\r\n\"use strict\";\r\nObject.defineProperty(exports, \"__esModule\", { value: true });\r\nvar tslib_1 = require(\"tslib\");\r\nvar inversify_1 = require(\"inversify\");\r\nvar common_1 = require(\"../../../../common\");\r\n;\r\nvar contracts_1 = require(\"../../../../core/contracts\");\r\nvar CommerceLookupsRecurringCyclePeriodTypeBatchRoute = (function (_super) {\r\n    tslib_1.__extends(CommerceLookupsRecurringCyclePeriodTypeBatchRoute, _super);\r\n    function CommerceLookupsRecurringCyclePeriodTypeBatchRoute(appOptions) {\r\n        var _this = _super.call(this, appOptions) || this;\r\n        _this.appOptions = appOptions;\r\n        _this.createRoute = 'commerce/lookups/recurring-cycle-period-types/batch';\r\n        _this.updateRoute = 'commerce/lookups/recurring-cycle-period-types/batch';\r\n        _this.deleteRoute = 'commerce/lookups/recurring-cycle-period-types/batch';\r\n        return _this;\r\n    }\r\n    /**\r\n     * Parses create commerce country state batch route; this route does not expose any additional options\r\n     * @method\r\n     * @example commerceLookupsRecurringCyclePeriodTypeBatchRoute.create();\r\n     */\r\n    CommerceLookupsRecurringCyclePeriodTypeBatchRoute.prototype.create = function () {\r\n        return _super.prototype.baseCreate.call(this, this.createRoute, {});\r\n    };\r\n    /**\r\n     * Parses remove commerce country state batch route; this route does not expose any additional options\r\n     * @method\r\n     * @example commerceLookupsRecurringCyclePeriodTypeBatchRoute.update();\r\n     */\r\n    CommerceLookupsRecurringCyclePeriodTypeBatchRoute.prototype.update = function () {\r\n        return _super.prototype.baseUpdate.call(this, this.updateRoute, {});\r\n    };\r\n    /**\r\n     * Parses remove commerce country state batch route; this route does not expose any additional options\r\n     * @method\r\n     * @example commerceLookupsRecurringCyclePeriodTypeBatchRoute.remove();\r\n     */\r\n    CommerceLookupsRecurringCyclePeriodTypeBatchRoute.prototype.delete = function () {\r\n        return _super.prototype.baseDelete.call(this, this.deleteRoute, {});\r\n    };\r\n    return CommerceLookupsRecurringCyclePeriodTypeBatchRoute;\r\n}(common_1.BaseRoute));\r\nCommerceLookupsRecurringCyclePeriodTypeBatchRoute = tslib_1.__decorate([\r\n    inversify_1.injectable(),\r\n    tslib_1.__param(0, inversify_1.inject(contracts_1.TYPES.IAppOptions)),\r\n    tslib_1.__metadata(\"design:paramtypes\", [typeof (_a = typeof contracts_1.IAppOptions !== \"undefined\" && contracts_1.IAppOptions) === \"function\" && _a || Object])\r\n], CommerceLookupsRecurringCyclePeriodTypeBatchRoute);\r\nexports.CommerceLookupsRecurringCyclePeriodTypeBatchRoute = CommerceLookupsRecurringCyclePeriodTypeBatchRoute;\r\nvar _a;\r\n/**\r\n * @copyright (c) 2017 Mono Ltd\r\n * @license MIT\r\n * @author Mono Ltd\r\n * @overview\r\n ***Notes:**\r\n - Refer to the [Baasic REST API](http://dev.baasic.com/api/reference/home) for detailed information about available Baasic REST API end-points.\r\n - [URI Template](https://github.com/Baasic/uritemplate-js) syntax enables expanding the Baasic route templates to Baasic REST URIs providing it with an object that contains URI parameters.\r\n - All end-point objects are transformed by the associated route service.\r\n */ \r\n\n\n\n//////////////////\n// WEBPACK FOOTER\n// ./src/modules/commerce/lookups/recurringCyclePeriodType/commerceLookupsRecurringCyclePeriodTypeBatchRoute.ts\n// module id = 210\n// module chunks = 0","/* globals module */\r\n/**\r\n * @module commerceLookupsRecurringCyclePeriodTypeClient\r\n * @description  Commerce Lookups RecurringCyclePeriodType Client provides an easy way to consume  Commerce REST API end-points. In order to obtain a needed routes `commerceLookupsRecurringCyclePeriodTypeClient` uses `commerceLookupsRecurringCyclePeriodTypeRoute`.\r\n */\r\n\"use strict\";\r\nObject.defineProperty(exports, \"__esModule\", { value: true });\r\nvar tslib_1 = require(\"tslib\");\r\nvar inversify_1 = require(\"inversify\");\r\n;\r\nvar httpApi_1 = require(\"../../../../httpApi\");\r\nvar _1 = require(\"../../\");\r\nvar CommerceLookupsRecurringCyclePeriodTypeClient = (function () {\r\n    function CommerceLookupsRecurringCyclePeriodTypeClient(commerceLookupsRecurringCyclePeriodTypeBatchClient, commerceLookupsRecurringCyclePeriodTypeRoute, apiClient) {\r\n        this.commerceLookupsRecurringCyclePeriodTypeBatchClient = commerceLookupsRecurringCyclePeriodTypeBatchClient;\r\n        this.commerceLookupsRecurringCyclePeriodTypeRoute = commerceLookupsRecurringCyclePeriodTypeRoute;\r\n        this.apiClient = apiClient;\r\n    }\r\n    Object.defineProperty(CommerceLookupsRecurringCyclePeriodTypeClient.prototype, \"routeDefinition\", {\r\n        get: function () {\r\n            return this.commerceLookupsRecurringCyclePeriodTypeRoute;\r\n        },\r\n        enumerable: true,\r\n        configurable: true\r\n    });\r\n    Object.defineProperty(CommerceLookupsRecurringCyclePeriodTypeClient.prototype, \"batch\", {\r\n        get: function () {\r\n            return this.commerceLookupsRecurringCyclePeriodTypeBatchClient;\r\n        },\r\n        enumerable: true,\r\n        configurable: true\r\n    });\r\n    /**\r\n     * Returns a promise that is resolved once the find action has been performed. Success response returns a list of commerce resources matching the given criteria.\r\n     * @method\r\n     * @example commerceLookupsRecurringCyclePeriodTypeClient.find({\r\n                    pageNumber : 1,\r\n                    pageSize : 10,\r\n                    orderBy : '<field>',\r\n                    orderDirection : '<asc|desc>',\r\n                    search : '<search-phrase>'\r\n                })\r\n                .then(function (collection) {\r\n                    // perform success action here\r\n                },\r\n                 function (response, status, headers, config) {\r\n                     // perform error handling here\r\n                });\r\n     **/\r\n    CommerceLookupsRecurringCyclePeriodTypeClient.prototype.find = function (options) {\r\n        return this.apiClient.get(this.routeDefinition.find(options));\r\n    };\r\n    /**\r\n     * Returns a promise that is resolved once the get action has been performed. Success response returns the commerce resource.\r\n     * @method\r\n     * @example commerceLookupsRecurringCyclePeriodTypeClient.get('<recurring-cycle-period-type-id>')\r\n                    .then(function (data) {\r\n                        // perform success action here\r\n                    },\r\n                     function (response, status, headers, config) {\r\n                         // perform error handling here\r\n                    });\r\n     **/\r\n    CommerceLookupsRecurringCyclePeriodTypeClient.prototype.get = function (id, options) {\r\n        return this.apiClient.get(this.commerceLookupsRecurringCyclePeriodTypeRoute.get(id, options));\r\n    };\r\n    /**\r\n     * Returns a promise that is resolved once the update commerce action has been performed; this action updates a commerce resource. This route uses HAL enabled objects to obtain routes and therefore it doesn't apply `commerceLookupsRecurringCyclePeriodTypeRoute` route template. Here is an example of how a route can be obtained from HAL enabled objects:\r\n     * ```\r\n     * let params = modelMapper.removeParams(commerceRecurringPeriodType);\r\n     * let uri = params['model'].links('put').href;\r\n     * ```\r\n     * @method\r\n     * @example // commerceRecurringPeriodType is a resource previously fetched using get action.\r\n                        commerceRecurringPeriodType.description = '<description>';\r\n                        commerceLookupsRecurringCyclePeriodTypeClient.update(commerceRecurringPeriodType)\r\n                            .then(function (data) {\r\n                                // perform success action here\r\n                            },\r\n                             function (response, status, headers, config) {\r\n                                 // perform error handling here\r\n                            });\r\n     **/\r\n    CommerceLookupsRecurringCyclePeriodTypeClient.prototype.update = function (data) {\r\n        return this.apiClient.put(this.routeDefinition.update(data), this.routeDefinition.updateParams(data));\r\n    };\r\n    /**\r\n     * Returns a promise that is resolved once the create commerce action has been performed; this action creates a new commerce resource.\r\n     * @method\r\n     * @example commerceLookupsRecurringCyclePeriodTypeClient.create({\r\n                    name : '<name>',\r\n                    abrv: '<abbreviation>',\r\n                    description: '<description>',\r\n                    monthFactor: '<month-factor'>\r\n                })\r\n                .then(function (data) {\r\n                    // perform success action here\r\n                },\r\n                 function (response, status, headers, config) {\r\n                     // perform error handling here\r\n                });\r\n     **/\r\n    CommerceLookupsRecurringCyclePeriodTypeClient.prototype.create = function (data) {\r\n        return this.apiClient.post(this.routeDefinition.create(), this.routeDefinition.createParams(data));\r\n    };\r\n    /**\r\n     * Returns a promise that is resolved once the remove action has been performed. This action will remove a commerce resource from the system if successfully completed. This route uses HAL enabled objects to obtain routes and therefore it doesn't apply `commerceLookupsRecurringCyclePeriodTypeRoute` route template. Here is an example of how a route can be obtained from HAL enabled objects:\r\n     * ```\r\n     * let params = modelMapper.removeParams(commerceRecurringPeriodType);\r\n     * let uri = params['model'].links('delete').href;\r\n     * ```\r\n     * @method\r\n     * @example // commerceRecurringPeriodType is a resource previously fetched using get action.\r\n                        commerceLookupsRecurringCyclePeriodTypeClient.remove(commerceRecurringPeriodType)\r\n                            .then(function (data) {\r\n                                // perform success action here\r\n                            },\r\n                             function (response, status, headers, config) {\r\n                                 // perform error handling here\r\n                            });\r\n     **/\r\n    CommerceLookupsRecurringCyclePeriodTypeClient.prototype.remove = function (data) {\r\n        return this.apiClient.delete(this.routeDefinition.delete(data));\r\n    };\r\n    return CommerceLookupsRecurringCyclePeriodTypeClient;\r\n}());\r\nCommerceLookupsRecurringCyclePeriodTypeClient = tslib_1.__decorate([\r\n    inversify_1.injectable(),\r\n    tslib_1.__param(0, inversify_1.inject(_1.TYPES.CommerceLookupsRecurringCyclePeriodTypeBatchClient)),\r\n    tslib_1.__param(1, inversify_1.inject(_1.TYPES.CommerceLookupsRecurringCyclePeriodTypeRoute)),\r\n    tslib_1.__param(2, inversify_1.inject(httpApi_1.httpTYPES.ApiClient)),\r\n    tslib_1.__metadata(\"design:paramtypes\", [typeof (_a = typeof _1.CommerceLookupsRecurringCyclePeriodTypeBatchClient !== \"undefined\" && _1.CommerceLookupsRecurringCyclePeriodTypeBatchClient) === \"function\" && _a || Object, typeof (_b = typeof _1.CommerceLookupsRecurringCyclePeriodTypeRoute !== \"undefined\" && _1.CommerceLookupsRecurringCyclePeriodTypeRoute) === \"function\" && _b || Object, typeof (_c = typeof httpApi_1.ApiClient !== \"undefined\" && httpApi_1.ApiClient) === \"function\" && _c || Object])\r\n], CommerceLookupsRecurringCyclePeriodTypeClient);\r\nexports.CommerceLookupsRecurringCyclePeriodTypeClient = CommerceLookupsRecurringCyclePeriodTypeClient;\r\nvar _a, _b, _c;\r\n/**\r\n * @copyright(c) 2017 Mono Ltd\r\n * @license MIT\r\n * @author Mono Ltd\r\n * @overview\r\n ***Notes:**\r\n - Refer to the [Baasic REST API](http://dev.baasic.com/api/reference/home) for detailed information about available Baasic REST API end-points.\r\n - All end-point objects are transformed by the associated route service.\r\n */ \r\n\n\n\n//////////////////\n// WEBPACK FOOTER\n// ./src/modules/commerce/lookups/recurringCyclePeriodType/commerceLookupsRecurringCyclePeriodTypeClient.ts\n// module id = 211\n// module chunks = 0","/* globals module */\r\n/**\r\n * @module commerceLookupsRecurringCyclePeriodTypeRoute\r\n * @description Baasic Commerce Lookups RecurringCyclePeriodType Route Definition provides Baasic route templates which can be expanded to Baasic REST URIs. Various services can use Baasic Commerce Lookups RecurringCyclePeriodType Route Definition to obtain a needed routes while other routes will be obtained through HAL. By convention, all route services  use the same function names as their corresponding services.\r\n */\r\n\"use strict\";\r\nObject.defineProperty(exports, \"__esModule\", { value: true });\r\nvar tslib_1 = require(\"tslib\");\r\nvar inversify_1 = require(\"inversify\");\r\nvar common_1 = require(\"../../../../common\");\r\n;\r\nvar contracts_1 = require(\"../../../../core/contracts\");\r\nvar _1 = require(\"../../\");\r\nvar CommerceLookupsRecurringCyclePeriodTypeRoute = (function (_super) {\r\n    tslib_1.__extends(CommerceLookupsRecurringCyclePeriodTypeRoute, _super);\r\n    function CommerceLookupsRecurringCyclePeriodTypeRoute(basicCommerceLookupsRecurringCyclePeriodTypeBatchRoute, appOptions) {\r\n        var _this = _super.call(this, appOptions) || this;\r\n        _this.basicCommerceLookupsRecurringCyclePeriodTypeBatchRoute = basicCommerceLookupsRecurringCyclePeriodTypeBatchRoute;\r\n        _this.appOptions = appOptions;\r\n        _this.findRoute = 'commerce/lookups/recurring-cycle-period-types/{?searchQuery,page,rpp,sort,embed}';\r\n        _this.getRoute = 'commerce/lookups/recurring-cycle-period-types/{id}/{?embed}';\r\n        _this.createRoute = 'commerce/lookups/recurring-cycle-period-types';\r\n        _this.updateRoute = 'commerce/lookups/recurring-cycle-period-types/{id}';\r\n        _this.deleteRoute = 'commerce/lookups/recurring-cycle-period-types/{id}';\r\n        return _this;\r\n    }\r\n    Object.defineProperty(CommerceLookupsRecurringCyclePeriodTypeRoute.prototype, \"batch\", {\r\n        get: function () {\r\n            return this.basicCommerceLookupsRecurringCyclePeriodTypeBatchRoute;\r\n        },\r\n        enumerable: true,\r\n        configurable: true\r\n    });\r\n    /**\r\n     * Parses find commerce customer-payment-methods route which can be expanded with additional options. Supported items are:\r\n     * - `searchQuery` - A string value used to identify commerce resources using the phrase search.\r\n     * - `page` - A value used to set the page number, i.e. to retrieve certain commerce subset from the storage.\r\n     * - `rpp` - A value used to limit the size of result set per page.\r\n     * - `sort` - A string used to set the commerce property to sort the result collection by.\r\n     * - `embed` - Comma separated list of resources to be contained within the current representation.\r\n     * @method\r\n     * @param options Query resource options.\r\n     * @example commerceLookupsRecurringCyclePeriodTypeRoute.find({searchQuery: '<search-phrase>'});\r\n     **/\r\n    CommerceLookupsRecurringCyclePeriodTypeRoute.prototype.find = function (options) {\r\n        return _super.prototype.baseFind.call(this, this.findRoute, options);\r\n    };\r\n    /**\r\n     * Parses get route; this route doesn't expose any properties.\r\n     * @method\r\n     * @example commerceLookupsRecurringCyclePeriodTypeRoute.get();\r\n     **/\r\n    CommerceLookupsRecurringCyclePeriodTypeRoute.prototype.get = function (id, options) {\r\n        return _super.prototype.baseGet.call(this, this.getRoute, options);\r\n    };\r\n    /**\r\n     * Parses create commerce payment method route; this URI template does not expose any additional options.\r\n     * @method\r\n     * @example commerceLookupsRecurringCyclePeriodTypeRoute.create();\r\n     **/\r\n    CommerceLookupsRecurringCyclePeriodTypeRoute.prototype.create = function () {\r\n        return _super.prototype.baseCreate.call(this, this.createRoute, {});\r\n    };\r\n    /**\r\n     * Parses update commerce payment method route; this URI template does not expose any additional options.\r\n     * @method\r\n     * @example commerceLookupsRecurringCyclePeriodTypeRoute.update(data);\r\n     **/\r\n    CommerceLookupsRecurringCyclePeriodTypeRoute.prototype.update = function (data) {\r\n        return _super.prototype.baseUpdate.call(this, this.updateRoute, data);\r\n    };\r\n    /**\r\n     * Parses delete commerce payment method route; this URI template does not expose any additional options.\r\n     * @method\r\n     * @example commerceLookupsRecurringCyclePeriodTypeRoute.delete(data);\r\n     **/\r\n    CommerceLookupsRecurringCyclePeriodTypeRoute.prototype.delete = function (data) {\r\n        return _super.prototype.baseDelete.call(this, this.deleteRoute, data);\r\n    };\r\n    return CommerceLookupsRecurringCyclePeriodTypeRoute;\r\n}(common_1.BaseRoute));\r\nCommerceLookupsRecurringCyclePeriodTypeRoute = tslib_1.__decorate([\r\n    inversify_1.injectable(),\r\n    tslib_1.__param(0, inversify_1.inject(_1.TYPES.CommerceLookupsRecurringCyclePeriodTypeBatchRoute)),\r\n    tslib_1.__param(1, inversify_1.inject(contracts_1.TYPES.IAppOptions)),\r\n    tslib_1.__metadata(\"design:paramtypes\", [typeof (_a = typeof _1.CommerceLookupsRecurringCyclePeriodTypeBatchRoute !== \"undefined\" && _1.CommerceLookupsRecurringCyclePeriodTypeBatchRoute) === \"function\" && _a || Object, typeof (_b = typeof contracts_1.IAppOptions !== \"undefined\" && contracts_1.IAppOptions) === \"function\" && _b || Object])\r\n], CommerceLookupsRecurringCyclePeriodTypeRoute);\r\nexports.CommerceLookupsRecurringCyclePeriodTypeRoute = CommerceLookupsRecurringCyclePeriodTypeRoute;\r\nvar _a, _b;\r\n/**\r\n * @copyright (c) 2017 Mono Ltd\r\n * @license MIT\r\n * @author Mono Ltd\r\n * @overview\r\n ***Notes:**\r\n - Refer to the [Baasic REST API](http://dev.baasic.com/api/reference/home) for detailed information about available Baasic REST API end-points.\r\n - [URI Template](https://github.com/Baasic/uritemplate-js) syntax enables expanding the Baasic route templates to Baasic REST URIs providing it with an object that contains URI parameters.\r\n - All end-point objects are transformed by the associated route service.\r\n */ \r\n\n\n\n//////////////////\n// WEBPACK FOOTER\n// ./src/modules/commerce/lookups/recurringCyclePeriodType/commerceLookupsRecurringCyclePeriodTypeRoute.ts\n// module id = 212\n// module chunks = 0","\"use strict\";\r\nfunction __export(m) {\r\n    for (var p in m) if (!exports.hasOwnProperty(p)) exports[p] = m[p];\r\n}\r\nObject.defineProperty(exports, \"__esModule\", { value: true });\r\n__export(require(\"./commerceLookupsRecurringCyclePeriodTypeBatchRoute\"));\r\n__export(require(\"./commerceLookupsRecurringCyclePeriodTypeBatchClient\"));\r\n__export(require(\"./commerceLookupsRecurringCyclePeriodTypeRoute\"));\r\n__export(require(\"./commerceLookupsRecurringCyclePeriodTypeClient\"));\r\n\n\n\n//////////////////\n// WEBPACK FOOTER\n// ./src/modules/commerce/lookups/recurringCyclePeriodType/index.ts\n// module id = 213\n// module chunks = 0","/* globals module */\r\n/**\r\n * @module commerceSubscriptionStatusBatchClient\r\n * @description  Commerce Subscription Stauts Batch Client provides an easy way to consume  Commerce REST API end-points. In order to obtain a needed routes `commerceSubscriptionStatusBatchClient` uses `commerceSubscriptionStatusBatchRoute`.\r\n */\r\n\"use strict\";\r\nObject.defineProperty(exports, \"__esModule\", { value: true });\r\nvar tslib_1 = require(\"tslib\");\r\nvar inversify_1 = require(\"inversify\");\r\n;\r\nvar httpApi_1 = require(\"../../../../httpApi\");\r\nvar _1 = require(\"../../\");\r\nvar CommerceLookupsSubscriptionStatusBatchClient = (function () {\r\n    function CommerceLookupsSubscriptionStatusBatchClient(commerceLookupsSubscriptionStatusBatchRoute, apiClient) {\r\n        this.commerceLookupsSubscriptionStatusBatchRoute = commerceLookupsSubscriptionStatusBatchRoute;\r\n        this.apiClient = apiClient;\r\n    }\r\n    Object.defineProperty(CommerceLookupsSubscriptionStatusBatchClient.prototype, \"routeDefinition\", {\r\n        get: function () {\r\n            return this.commerceLookupsSubscriptionStatusBatchRoute;\r\n        },\r\n        enumerable: true,\r\n        configurable: true\r\n    });\r\n    /**\r\n     * Returns a promise that is resolved once the create commerce action has been performed; this action creates a new commerce resources.\r\n     * @method\r\n     * @example commerceLookupsSubscriptionStatusBatchClient.create([{\r\n                    name : '<name>',\r\n                    abrv: '<abbreviation>',\r\n                    description: '<description>'\r\n                }])\r\n                .then(function (data) {\r\n                    // perform success action here\r\n                },\r\n                 function (response, status, headers, config) {\r\n                    // perform error handling here\r\n                });\r\n     **/\r\n    CommerceLookupsSubscriptionStatusBatchClient.prototype.create = function (data) {\r\n        return this.apiClient.post(this.routeDefinition.create(), this.routeDefinition.createParams(data));\r\n    };\r\n    /**\r\n     * Returns a promise that is resolved once the update commerce action has been performed; this action updates specified commerce resources.\r\n     * @method\r\n     * @example commerceLookupsSubscriptionStatusBatchClient.update(subscriptionStatuses)\r\n                    .then(function (data) {\r\n                        // perform success action here\r\n                    },\r\n                     function (response, status, headers, config) {\r\n                         // perform error handling here\r\n                    });\r\n     **/\r\n    CommerceLookupsSubscriptionStatusBatchClient.prototype.update = function (data) {\r\n        return this.apiClient.put(this.routeDefinition.update(), this.routeDefinition.updateParams(data));\r\n    };\r\n    /**\r\n     * Returns a promise that is resolved once the remove commerce action has been performed. This action will remove commerce resources from the system if successfully completed.\r\n     * @method\r\n     * @example commerceLookupsSubscriptionStatusBatchClient.remove(subscriptionStatusIds)\r\n                    .then(function (data) {\r\n                        // perform success action here\r\n                    },\r\n                     function (response, status, headers, config) {\r\n                         // perform error handling here\r\n                    });\r\n     **/\r\n    CommerceLookupsSubscriptionStatusBatchClient.prototype.remove = function (ids) {\r\n        return this.apiClient.delete(this.commerceLookupsSubscriptionStatusBatchRoute.delete(), undefined, ids);\r\n    };\r\n    return CommerceLookupsSubscriptionStatusBatchClient;\r\n}());\r\nCommerceLookupsSubscriptionStatusBatchClient = tslib_1.__decorate([\r\n    inversify_1.injectable(),\r\n    tslib_1.__param(0, inversify_1.inject(_1.TYPES.CommerceLookupsSubscriptionStatusBatchRoute)),\r\n    tslib_1.__param(1, inversify_1.inject(httpApi_1.httpTYPES.ApiClient)),\r\n    tslib_1.__metadata(\"design:paramtypes\", [typeof (_a = typeof _1.CommerceLookupsSubscriptionStatusBatchRoute !== \"undefined\" && _1.CommerceLookupsSubscriptionStatusBatchRoute) === \"function\" && _a || Object, typeof (_b = typeof httpApi_1.ApiClient !== \"undefined\" && httpApi_1.ApiClient) === \"function\" && _b || Object])\r\n], CommerceLookupsSubscriptionStatusBatchClient);\r\nexports.CommerceLookupsSubscriptionStatusBatchClient = CommerceLookupsSubscriptionStatusBatchClient;\r\nvar _a, _b;\r\n/**\r\n * @copyright (c) 2017 Mono Ltd\r\n * @license MIT\r\n * @author Mono Ltd\r\n * @overview\r\n ***Notes:**\r\n - Refer to the [Baasic REST API](http://dev.baasic.com/api/reference/home) for detailed information about available Baasic REST API end-points.\r\n - All end-point objects are transformed by the associated route service.\r\n */ \r\n\n\n\n//////////////////\n// WEBPACK FOOTER\n// ./src/modules/commerce/lookups/subscriptionStatus/commerceLookupsSubscriptionStatusBatchClient.ts\n// module id = 214\n// module chunks = 0","/* globals module */\r\n/**\r\n * @module commerceLookupsSubscriptionStatusBatchRoute\r\n * @description Baasic Commerce Lookups Subscription Status Batch Route Definition provides Baasic route templates which can be expanded to Baasic REST URIs. Various services can use Baasic Commerce Lookups Country State Batch Route Definition to obtain a needed routes while other routes will be obtained through HAL. By convention, all route services  use the same function names as their corresponding services.\r\n */\r\n\"use strict\";\r\nObject.defineProperty(exports, \"__esModule\", { value: true });\r\nvar tslib_1 = require(\"tslib\");\r\nvar inversify_1 = require(\"inversify\");\r\nvar common_1 = require(\"../../../../common\");\r\n;\r\nvar contracts_1 = require(\"../../../../core/contracts\");\r\nvar CommerceLookupsSubscriptionStatusBatchRoute = (function (_super) {\r\n    tslib_1.__extends(CommerceLookupsSubscriptionStatusBatchRoute, _super);\r\n    function CommerceLookupsSubscriptionStatusBatchRoute(appOptions) {\r\n        var _this = _super.call(this, appOptions) || this;\r\n        _this.appOptions = appOptions;\r\n        _this.createRoute = 'commerce/lookups/subscription-statuses/batch';\r\n        _this.updateRoute = 'commerce/lookups/subscription-statuses/batch';\r\n        _this.deleteRoute = 'commerce/lookups/subscription-statuses/batch';\r\n        return _this;\r\n    }\r\n    /**\r\n     * Parses create commerce country state batch route; this route does not expose any additional options\r\n     * @method\r\n     * @example commerceLookupsSubscriptionStatusBatchRoute.create();\r\n     */\r\n    CommerceLookupsSubscriptionStatusBatchRoute.prototype.create = function () {\r\n        return _super.prototype.baseCreate.call(this, this.createRoute, {});\r\n    };\r\n    /**\r\n     * Parses remove commerce country state batch route; this route does not expose any additional options\r\n     * @method\r\n     * @example commerceLookupsSubscriptionStatusBatchRoute.update();\r\n     */\r\n    CommerceLookupsSubscriptionStatusBatchRoute.prototype.update = function () {\r\n        return _super.prototype.baseUpdate.call(this, this.updateRoute, {});\r\n    };\r\n    /**\r\n     * Parses remove commerce country state batch route; this route does not expose any additional options\r\n     * @method\r\n     * @example commerceLookupsSubscriptionStatusBatchRoute.remove();\r\n     */\r\n    CommerceLookupsSubscriptionStatusBatchRoute.prototype.delete = function () {\r\n        return _super.prototype.baseDelete.call(this, this.deleteRoute, {});\r\n    };\r\n    return CommerceLookupsSubscriptionStatusBatchRoute;\r\n}(common_1.BaseRoute));\r\nCommerceLookupsSubscriptionStatusBatchRoute = tslib_1.__decorate([\r\n    inversify_1.injectable(),\r\n    tslib_1.__param(0, inversify_1.inject(contracts_1.TYPES.IAppOptions)),\r\n    tslib_1.__metadata(\"design:paramtypes\", [typeof (_a = typeof contracts_1.IAppOptions !== \"undefined\" && contracts_1.IAppOptions) === \"function\" && _a || Object])\r\n], CommerceLookupsSubscriptionStatusBatchRoute);\r\nexports.CommerceLookupsSubscriptionStatusBatchRoute = CommerceLookupsSubscriptionStatusBatchRoute;\r\nvar _a;\r\n/**\r\n * @copyright (c) 2017 Mono Ltd\r\n * @license MIT\r\n * @author Mono Ltd\r\n * @overview\r\n ***Notes:**\r\n - Refer to the [Baasic REST API](http://dev.baasic.com/api/reference/home) for detailed information about available Baasic REST API end-points.\r\n - [URI Template](https://github.com/Baasic/uritemplate-js) syntax enables expanding the Baasic route templates to Baasic REST URIs providing it with an object that contains URI parameters.\r\n - All end-point objects are transformed by the associated route service.\r\n */ \r\n\n\n\n//////////////////\n// WEBPACK FOOTER\n// ./src/modules/commerce/lookups/subscriptionStatus/commerceLookupsSubscriptionStatusBatchRoute.ts\n// module id = 215\n// module chunks = 0","/* globals module */\r\n/**\r\n * @module commerceLookupsSubscriptionStatusClient\r\n * @description  Commerce Lookups SubscriptionStatus Client provides an easy way to consume  Commerce REST API end-points. In order to obtain a needed routes `commerceLookupsSubscriptionStatusClient` uses `commerceLookupsSubscriptionStatusRoute`.\r\n */\r\n\"use strict\";\r\nObject.defineProperty(exports, \"__esModule\", { value: true });\r\nvar tslib_1 = require(\"tslib\");\r\nvar inversify_1 = require(\"inversify\");\r\n;\r\nvar httpApi_1 = require(\"../../../../httpApi\");\r\nvar _1 = require(\"../../\");\r\nvar CommerceLookupsSubscriptionStatusClient = (function () {\r\n    function CommerceLookupsSubscriptionStatusClient(commerceLookupsSubscriptionStatusBatchClient, commerceLookupsSubscriptionStatusRoute, apiClient) {\r\n        this.commerceLookupsSubscriptionStatusBatchClient = commerceLookupsSubscriptionStatusBatchClient;\r\n        this.commerceLookupsSubscriptionStatusRoute = commerceLookupsSubscriptionStatusRoute;\r\n        this.apiClient = apiClient;\r\n    }\r\n    Object.defineProperty(CommerceLookupsSubscriptionStatusClient.prototype, \"routeDefinition\", {\r\n        get: function () {\r\n            return this.commerceLookupsSubscriptionStatusRoute;\r\n        },\r\n        enumerable: true,\r\n        configurable: true\r\n    });\r\n    Object.defineProperty(CommerceLookupsSubscriptionStatusClient.prototype, \"batch\", {\r\n        get: function () {\r\n            return this.commerceLookupsSubscriptionStatusBatchClient;\r\n        },\r\n        enumerable: true,\r\n        configurable: true\r\n    });\r\n    /**\r\n     * Returns a promise that is resolved once the find action has been performed. Success response returns a list of commerce resources matching the given criteria.\r\n     * @method\r\n     * @example commerceLookupsSubscriptionStatusClient.find({\r\n                        pageNumber : 1,\r\n                        pageSize : 10,\r\n                        orderBy : '<field>',\r\n                        orderDirection : '<asc|desc>',\r\n                        search : '<search-phrase>'\r\n                    })\r\n                    .then(function (collection) {\r\n                        // perform success action here\r\n                    },\r\n                     function (response, status, headers, config) {\r\n                         // perform error handling here\r\n                    });\r\n     **/\r\n    CommerceLookupsSubscriptionStatusClient.prototype.find = function (options) {\r\n        return this.apiClient.get(this.routeDefinition.find(options));\r\n    };\r\n    /**\r\n     * Returns a promise that is resolved once the get action has been performed. Success response returns the commerce resource.\r\n     * @method\r\n     * @example commerceLookupsSubscriptionStatusClient.get()\r\n                    .then(function (data) {\r\n                        // perform success action here\r\n                    },\r\n                     function (response, status, headers, config) {\r\n                         // perform error handling here\r\n                    });\r\n     **/\r\n    CommerceLookupsSubscriptionStatusClient.prototype.get = function (id, options) {\r\n        return this.apiClient.get(this.commerceLookupsSubscriptionStatusRoute.get(id, options));\r\n    };\r\n    /**\r\n     * Returns a promise that is resolved once the update commerce action has been performed; this action updates a commerce resource. This route uses HAL enabled objects to obtain routes and therefore it doesn't apply `commerceLookupsSubscriptionStatusRoute` route template. Here is an example of how a route can be obtained from HAL enabled objects:\r\n     * ```\r\n     * let params = modelMapper.removeParams(commerceSubscriptionStatus);\r\n     * let uri = params['model'].links('put').href;\r\n     * ```\r\n     * @method\r\n     * @example // commerceSubscriptionStatus is a resource previously fetched using get action.\r\n                    commerceSubscriptionStatus.description = '<description>';\r\n                    commerceLookupsSubscriptionStatusClient.update(commerceSubscriptionStatus)\r\n                        .then(function (data) {\r\n                            // perform success action here\r\n                        },\r\n                         function (response, status, headers, config) {\r\n                             // perform error handling here\r\n                        });\r\n     **/\r\n    CommerceLookupsSubscriptionStatusClient.prototype.update = function (data) {\r\n        return this.apiClient.put(this.routeDefinition.update(data), this.routeDefinition.updateParams(data));\r\n    };\r\n    /**\r\n     * Returns a promise that is resolved once the create commerce action has been performed; this action creates a new commerce resource.\r\n     * @method\r\n     * @example commerceLookupsSubscriptionStatusClient.create({\r\n                    name : '<name>',\r\n                    abrv: '<abbreviation>',\r\n                    description: '<description>'\r\n                })\r\n                .then(function (data) {\r\n                    // perform success action here\r\n                },\r\n                 function (response, status, headers, config) {\r\n                     // perform error handling here\r\n                });\r\n     **/\r\n    CommerceLookupsSubscriptionStatusClient.prototype.create = function (data) {\r\n        return this.apiClient.post(this.routeDefinition.create(), this.routeDefinition.createParams(data));\r\n    };\r\n    /**\r\n     * Returns a promise that is resolved once the remove action has been performed. This action will remove a commerce resource from the system if successfully completed. This route uses HAL enabled objects to obtain routes and therefore it doesn't apply `commerceLookupsSubscriptionStatusRoute` route template. Here is an example of how a route can be obtained from HAL enabled objects:\r\n     * ```\r\n     * let params = modelMapper.removeParams(commerceSubscriptionStatus);\r\n     * let uri = params['model'].links('delete').href;\r\n     * ```\r\n     * @method\r\n     * @example // commerceSubscriptionStatus is a resource previously fetched using get action.\r\n                    commerceLookupsSubscriptionStatusClient.remove(commerceSubscriptionStatus)\r\n                        .then(function (data) {\r\n                            // perform success action here\r\n                        },\r\n                         function (response, status, headers, config) {\r\n                             // perform error handling here\r\n                        });\r\n     **/\r\n    CommerceLookupsSubscriptionStatusClient.prototype.remove = function (data) {\r\n        return this.apiClient.delete(this.routeDefinition.delete(data));\r\n    };\r\n    return CommerceLookupsSubscriptionStatusClient;\r\n}());\r\nCommerceLookupsSubscriptionStatusClient = tslib_1.__decorate([\r\n    inversify_1.injectable(),\r\n    tslib_1.__param(0, inversify_1.inject(_1.TYPES.CommerceLookupsSubscriptionStatusBatchClient)),\r\n    tslib_1.__param(1, inversify_1.inject(_1.TYPES.CommerceLookupsSubscriptionStatusRoute)),\r\n    tslib_1.__param(2, inversify_1.inject(httpApi_1.httpTYPES.ApiClient)),\r\n    tslib_1.__metadata(\"design:paramtypes\", [typeof (_a = typeof _1.CommerceLookupsSubscriptionStatusBatchClient !== \"undefined\" && _1.CommerceLookupsSubscriptionStatusBatchClient) === \"function\" && _a || Object, typeof (_b = typeof _1.CommerceLookupsSubscriptionStatusRoute !== \"undefined\" && _1.CommerceLookupsSubscriptionStatusRoute) === \"function\" && _b || Object, typeof (_c = typeof httpApi_1.ApiClient !== \"undefined\" && httpApi_1.ApiClient) === \"function\" && _c || Object])\r\n], CommerceLookupsSubscriptionStatusClient);\r\nexports.CommerceLookupsSubscriptionStatusClient = CommerceLookupsSubscriptionStatusClient;\r\nvar _a, _b, _c;\r\n/**\r\n * @copyright(c) 2017 Mono Ltd\r\n * @license MIT\r\n * @author Mono Ltd\r\n * @overview\r\n ***Notes:**\r\n - Refer to the [Baasic REST API](http://dev.baasic.com/api/reference/home) for detailed information about available Baasic REST API end-points.\r\n - All end-point objects are transformed by the associated route service.\r\n */ \r\n\n\n\n//////////////////\n// WEBPACK FOOTER\n// ./src/modules/commerce/lookups/subscriptionStatus/commerceLookupsSubscriptionStatusClient.ts\n// module id = 216\n// module chunks = 0","/* globals module */\r\n/**\r\n * @module commerceLookupsSubscriptionStatusRoute\r\n * @description Baasic Commerce Lookups SubscriptionStatus Route Definition provides Baasic route templates which can be expanded to Baasic REST URIs. Various services can use Baasic Commerce Lookups SubscriptionStatus Route Definition to obtain a needed routes while other routes will be obtained through HAL. By convention, all route services  use the same function names as their corresponding services.\r\n */\r\n\"use strict\";\r\nObject.defineProperty(exports, \"__esModule\", { value: true });\r\nvar tslib_1 = require(\"tslib\");\r\nvar inversify_1 = require(\"inversify\");\r\nvar common_1 = require(\"../../../../common\");\r\n;\r\nvar contracts_1 = require(\"../../../../core/contracts\");\r\nvar _1 = require(\"../../\");\r\nvar CommerceLookupsSubscriptionStatusRoute = (function (_super) {\r\n    tslib_1.__extends(CommerceLookupsSubscriptionStatusRoute, _super);\r\n    function CommerceLookupsSubscriptionStatusRoute(basicCommerceLookupsSubscriptionStatusBatchRoute, appOptions) {\r\n        var _this = _super.call(this, appOptions) || this;\r\n        _this.basicCommerceLookupsSubscriptionStatusBatchRoute = basicCommerceLookupsSubscriptionStatusBatchRoute;\r\n        _this.appOptions = appOptions;\r\n        _this.findRoute = 'commerce/lookups/subscription-statuses/{?searchQuery,page,rpp,sort,embed,fields}';\r\n        _this.getRoute = 'commerce/lookups/subscription-statuses/{id}/{?embed,fields}';\r\n        _this.createRoute = 'commerce/lookups/subscription-statuses';\r\n        _this.updateRoute = 'commerce/lookups/subscription-statuses/{id}';\r\n        _this.deleteRoute = 'commerce/lookups/subscription-statuses/{id}';\r\n        return _this;\r\n    }\r\n    Object.defineProperty(CommerceLookupsSubscriptionStatusRoute.prototype, \"batch\", {\r\n        get: function () {\r\n            return this.basicCommerceLookupsSubscriptionStatusBatchRoute;\r\n        },\r\n        enumerable: true,\r\n        configurable: true\r\n    });\r\n    /**\r\n     * Parses find commerce customer-payment-methods route which can be expanded with additional options. Supported items are:\r\n     * - `searchQuery` - A string value used to identify commerce resources using the phrase search.\r\n     * - `page` - A value used to set the page number, i.e. to retrieve certain commerce subset from the storage.\r\n     * - `rpp` - A value used to limit the size of result set per page.\r\n     * - `sort` - A string used to set the commerce property to sort the result collection by.\r\n     * - `embed` - Comma separated list of resources to be contained within the current representation.\r\n     * @method\r\n     * @param options Query resource options.\r\n     * @example commerceLookupsSubscriptionStatusRoute.find({searchQuery: '<search-phrase>'});\r\n     **/\r\n    CommerceLookupsSubscriptionStatusRoute.prototype.find = function (options) {\r\n        return _super.prototype.baseFind.call(this, this.findRoute, options);\r\n    };\r\n    /**\r\n     * Parses get route; this route doesn't expose any properties.\r\n     * @method\r\n     * @example commerceLookupsSubscriptionStatusRoute.get();\r\n     **/\r\n    CommerceLookupsSubscriptionStatusRoute.prototype.get = function (id, options) {\r\n        return _super.prototype.baseGet.call(this, this.getRoute, options);\r\n    };\r\n    /**\r\n     * Parses create commerce payment method route; this URI template does not expose any additional options.\r\n     * @method\r\n     * @example commerceLookupsSubscriptionStatusRoute.create();\r\n     **/\r\n    CommerceLookupsSubscriptionStatusRoute.prototype.create = function () {\r\n        return _super.prototype.baseCreate.call(this, this.createRoute, {});\r\n    };\r\n    /**\r\n     * Parses update commerce payment method route; this URI template does not expose any additional options.\r\n     * @method\r\n     * @example commerceLookupsSubscriptionStatusRoute.update(data);\r\n     **/\r\n    CommerceLookupsSubscriptionStatusRoute.prototype.update = function (data) {\r\n        return _super.prototype.baseUpdate.call(this, this.updateRoute, data);\r\n    };\r\n    /**\r\n     * Parses delete commerce payment method route; this URI template does not expose any additional options.\r\n     * @method\r\n     * @example commerceLookupsSubscriptionStatusRoute.delete(data);\r\n     **/\r\n    CommerceLookupsSubscriptionStatusRoute.prototype.delete = function (data) {\r\n        return _super.prototype.baseDelete.call(this, this.deleteRoute, data);\r\n    };\r\n    return CommerceLookupsSubscriptionStatusRoute;\r\n}(common_1.BaseRoute));\r\nCommerceLookupsSubscriptionStatusRoute = tslib_1.__decorate([\r\n    inversify_1.injectable(),\r\n    tslib_1.__param(0, inversify_1.inject(_1.TYPES.CommerceLookupsSubscriptionStatusBatchRoute)),\r\n    tslib_1.__param(1, inversify_1.inject(contracts_1.TYPES.IAppOptions)),\r\n    tslib_1.__metadata(\"design:paramtypes\", [typeof (_a = typeof _1.CommerceLookupsSubscriptionStatusBatchRoute !== \"undefined\" && _1.CommerceLookupsSubscriptionStatusBatchRoute) === \"function\" && _a || Object, typeof (_b = typeof contracts_1.IAppOptions !== \"undefined\" && contracts_1.IAppOptions) === \"function\" && _b || Object])\r\n], CommerceLookupsSubscriptionStatusRoute);\r\nexports.CommerceLookupsSubscriptionStatusRoute = CommerceLookupsSubscriptionStatusRoute;\r\nvar _a, _b;\r\n/**\r\n * @copyright (c) 2017 Mono Ltd\r\n * @license MIT\r\n * @author Mono Ltd\r\n * @overview\r\n ***Notes:**\r\n - Refer to the [Baasic REST API](http://dev.baasic.com/api/reference/home) for detailed information about available Baasic REST API end-points.\r\n - [URI Template](https://github.com/Baasic/uritemplate-js) syntax enables expanding the Baasic route templates to Baasic REST URIs providing it with an object that contains URI parameters.\r\n - All end-point objects are transformed by the associated route service.\r\n */ \r\n\n\n\n//////////////////\n// WEBPACK FOOTER\n// ./src/modules/commerce/lookups/subscriptionStatus/commerceLookupsSubscriptionStatusRoute.ts\n// module id = 217\n// module chunks = 0","\"use strict\";\r\nfunction __export(m) {\r\n    for (var p in m) if (!exports.hasOwnProperty(p)) exports[p] = m[p];\r\n}\r\nObject.defineProperty(exports, \"__esModule\", { value: true });\r\n__export(require(\"./commerceLookupsSubscriptionStatusBatchRoute\"));\r\n__export(require(\"./commerceLookupsSubscriptionStatusBatchClient\"));\r\n__export(require(\"./commerceLookupsSubscriptionStatusRoute\"));\r\n__export(require(\"./commerceLookupsSubscriptionStatusClient\"));\r\n\n\n\n//////////////////\n// WEBPACK FOOTER\n// ./src/modules/commerce/lookups/subscriptionStatus/index.ts\n// module id = 218\n// module chunks = 0","/* globals module */\r\n/**\r\n * @module commercePaymentTransactionClient\r\n * @description  Commerce PaymentTransaction Client provides an easy way to consume  Commerce REST API end-points. In order to obtain a needed routes `commercePaymentTransactionClient` uses `commercePaymentTransactionRoute`.\r\n */\r\n\"use strict\";\r\nObject.defineProperty(exports, \"__esModule\", { value: true });\r\nvar tslib_1 = require(\"tslib\");\r\nvar inversify_1 = require(\"inversify\");\r\n;\r\nvar httpApi_1 = require(\"../../../httpApi\");\r\nvar _1 = require(\"../\");\r\nvar CommercePaymentTransactionClient = (function () {\r\n    function CommercePaymentTransactionClient(commercePaymentTransactionRoute, apiClient) {\r\n        this.commercePaymentTransactionRoute = commercePaymentTransactionRoute;\r\n        this.apiClient = apiClient;\r\n    }\r\n    Object.defineProperty(CommercePaymentTransactionClient.prototype, \"routeDefinition\", {\r\n        get: function () {\r\n            return this.commercePaymentTransactionRoute;\r\n        },\r\n        enumerable: true,\r\n        configurable: true\r\n    });\r\n    /**\r\n     * Returns a promise that is resolved once the find action has been performed. Success response returns a list of commerce resources matching the given criteria.\r\n     * @method\r\n     * @example commercePaymentTransactionClient.find({\r\n                    pageNumber : 1,\r\n                    pageSize : 10,\r\n                    orderBy : '<field>',\r\n                    orderDirection : '<asc|desc>',\r\n                    search : '<search-phrase>'\r\n                })\r\n                .then(function (collection) {\r\n                    // perform success action here\r\n                },\r\n                 function (response, status, headers, config) {\r\n                     // perform error handling here\r\n                });\r\n     **/\r\n    CommercePaymentTransactionClient.prototype.find = function (options) {\r\n        return this.apiClient.get(this.routeDefinition.find(options));\r\n    };\r\n    /**\r\n     * Returns a promise that is resolved once the get action has been performed. Success response returns the commerce resource.\r\n     * @method\r\n     * @example commercePaymentTransactionClient.get()\r\n                    .then(function (data) {\r\n                        // perform success action here\r\n                    },\r\n                     function (response, status, headers, config) {\r\n                         // perform error handling here\r\n                    });\r\n     **/\r\n    CommercePaymentTransactionClient.prototype.get = function (id, options) {\r\n        return this.apiClient.get(this.commercePaymentTransactionRoute.get(id, options));\r\n    };\r\n    /**\r\n     * Returns a promise that is resolved once the create action has been performed. Success response returns the commerce resource.\r\n     * @method\r\n     * @example commercePaymentTransactionClient.create(data)\r\n                    .then(function (data) {\r\n                        // perform success action here\r\n                    },\r\n                     function (response, status, headers, config) {\r\n                         // perform error handling here\r\n                    });\r\n     **/\r\n    CommercePaymentTransactionClient.prototype.create = function (data) {\r\n        return this.apiClient.post(this.routeDefinition.create(), this.routeDefinition.createParams(data));\r\n    };\r\n    /**\r\n     * Returns a promise that is resolved once the update commerce action has been performed; this action updates a commerce resource. This route uses HAL enabled objects to obtain routes and therefore it doesn't apply `commercePaymentTransactionRoute` route template. Here is an example of how a route can be obtained from HAL enabled objects:\r\n     * ```\r\n     * let params = modelMapper.removeParams(commercePaymentTransaction);\r\n     * let uri = params['model'].links('put').href;\r\n     * ```\r\n     * @method\r\n     * @example // commercePaymentTransaction is a resource previously fetched using get action.\r\n                        commercePaymentTransaction.amount : 100;\r\n                        commercePaymentTransactionClient.update(commercePaymentTransaction)\r\n                            .then(function (data) {\r\n                                // perform success action here\r\n                            },\r\n                             function (response, status, headers, config) {\r\n                                 // perform error handling here\r\n                            });\r\n     **/\r\n    CommercePaymentTransactionClient.prototype.update = function (data) {\r\n        return this.apiClient.put(this.routeDefinition.update(data), this.routeDefinition.updateParams(data));\r\n    };\r\n    /**\r\n     * Returns a promise that is resolved once the remove action has been performed. This action will remove a commerce resource from the system if successfully completed. This route uses HAL enabled objects to obtain routes and therefore it doesn't apply `commercePaymentTransactionRoute` route template. Here is an example of how a route can be obtained from HAL enabled objects:\r\n     * ```\r\n     * let params = modelMapper.removeParams(commercePaymentTransaction);\r\n     * let uri = params['model'].links('delete').href;\r\n     * ```\r\n     * @method\r\n     * @example // commercePaymentTransaction is a resource previously fetched using get action.\r\n                        commercePaymentTransactionClient.remove(commercePaymentTransaction)\r\n                            .then(function (data) {\r\n                                // perform success action here\r\n                            },\r\n                             function (response, status, headers, config) {\r\n                                 // perform error handling here\r\n                            });\r\n     **/\r\n    CommercePaymentTransactionClient.prototype.remove = function (data) {\r\n        return this.apiClient.delete(this.routeDefinition.delete(data));\r\n    };\r\n    return CommercePaymentTransactionClient;\r\n}());\r\nCommercePaymentTransactionClient = tslib_1.__decorate([\r\n    inversify_1.injectable(),\r\n    tslib_1.__param(0, inversify_1.inject(_1.TYPES.CommercePaymentTransactionRoute)),\r\n    tslib_1.__param(1, inversify_1.inject(httpApi_1.httpTYPES.ApiClient)),\r\n    tslib_1.__metadata(\"design:paramtypes\", [typeof (_a = typeof _1.CommercePaymentTransactionRoute !== \"undefined\" && _1.CommercePaymentTransactionRoute) === \"function\" && _a || Object, typeof (_b = typeof httpApi_1.ApiClient !== \"undefined\" && httpApi_1.ApiClient) === \"function\" && _b || Object])\r\n], CommercePaymentTransactionClient);\r\nexports.CommercePaymentTransactionClient = CommercePaymentTransactionClient;\r\nvar _a, _b;\r\n/**\r\n * @copyright (c) 2017 Mono Ltd\r\n * @license MIT\r\n * @author Mono Ltd\r\n * @overview\r\n ***Notes:**\r\n - Refer to the [Baasic REST API](http://dev.baasic.com/api/reference/home) for detailed information about available Baasic REST API end-points.\r\n - All end-point objects are transformed by the associated route service.\r\n */ \r\n\n\n\n//////////////////\n// WEBPACK FOOTER\n// ./src/modules/commerce/paymentTransaction/commercePaymentTransactionClient.ts\n// module id = 219\n// module chunks = 0","/* globals module */\r\n/**\r\n * @module commercePaymentTransactionRoute\r\n * @description Baasic Commerce PaymentTransaction Route Definition provides Baasic route templates which can be expanded to Baasic REST URIs. Various services can use Baasic Commerce PaymentTransaction Route Definition to obtain a needed routes while other routes will be obtained through HAL. By convention, all route services  use the same function names as their corresponding services.\r\n */\r\n\"use strict\";\r\nObject.defineProperty(exports, \"__esModule\", { value: true });\r\nvar tslib_1 = require(\"tslib\");\r\nvar inversify_1 = require(\"inversify\");\r\nvar common_1 = require(\"../../../common\");\r\n;\r\nvar contracts_1 = require(\"../../../core/contracts\");\r\nvar CommercePaymentTransactionRoute = (function (_super) {\r\n    tslib_1.__extends(CommercePaymentTransactionRoute, _super);\r\n    function CommercePaymentTransactionRoute(appOptions) {\r\n        var _this = _super.call(this, appOptions) || this;\r\n        _this.appOptions = appOptions;\r\n        _this.findRoute = 'commerce/payment-transactions/{?customerId,searchQuery,invoiceStatusId,subscriptionId,paymentMethodId,firstName,lastName,transactionStatuses,page,rpp,sort,embed,fields}';\r\n        _this.getRoute = 'commerce/payment-transactions/{id}/{?embed,fields}';\r\n        _this.createRoute = 'commerce/payment-transactions';\r\n        _this.updateRoute = 'commerce/payment-transactions/{id}';\r\n        _this.deleteRoute = 'commerce/payment-transactions/{id}';\r\n        return _this;\r\n    }\r\n    /**\r\n     * Parses find commerce payment transaction route which can be expanded with additional options. Supported items are:\r\n     * - `customerId` - A customer unique identifier.\r\n     * - `searchQuery` - A string value used to identify commerce resources using the phrase search.\r\n     * - `invoiceStatusId` - A invoice status unique identifier.\r\n     * - `subscriptionId` - A subscription unique identifier.\r\n     * - `paymentMethodId` - A payment method unique identifier.\r\n     * - `firstName` - A customer first name.\r\n     * - `lastName` - A customer last name.\r\n     * - `transactionStatuses` - A transaction statuses in CSV format.\r\n     * - `page` - A value used to set the page number, i.e. to retrieve certain commerce subset from the storage.\r\n     * - `rpp` - A value used to limit the size of result set per page.\r\n     * - `sort` - A string used to set the commerce property to sort the result collection by.\r\n     * - `embed` - Comma separated list of resources to be contained within the current representation.\r\n     * @method\r\n     * @example commercePaymentTransactionRoute.find({searchQuery: '<search-phrase>'});\r\n     **/\r\n    CommercePaymentTransactionRoute.prototype.find = function (options) {\r\n        return _super.prototype.baseFind.call(this, this.findRoute, options);\r\n    };\r\n    /**\r\n     * Parses get route; this route doesn't expose any properties.\r\n     * @method\r\n     * @example commercePaymentTransactionRoute.get(id, options);\r\n     **/\r\n    CommercePaymentTransactionRoute.prototype.get = function (id, options) {\r\n        return _super.prototype.baseGet.call(this, this.getRoute, id, options);\r\n    };\r\n    /**\r\n     * Parses create route; this route doesn't expose any properties.\r\n     * @method\r\n     * @example commercePaymentTransactionRoute.create();\r\n     **/\r\n    CommercePaymentTransactionRoute.prototype.create = function () {\r\n        return _super.prototype.baseCreate.call(this, this.createRoute, {});\r\n    };\r\n    /**\r\n     * Parses update route; this route doesn't expose any properties.\r\n     * @method\r\n     * @example commercePaymentTransactionRoute.update(data);\r\n     **/\r\n    CommercePaymentTransactionRoute.prototype.update = function (data) {\r\n        return _super.prototype.baseUpdate.call(this, this.updateRoute, data);\r\n    };\r\n    /**\r\n     * Parses delete route; this route doesn't expose any properties.\r\n     * @method\r\n     * @example commercePaymentTransactionRoute.delete(data);\r\n     **/\r\n    CommercePaymentTransactionRoute.prototype.delete = function (data) {\r\n        return _super.prototype.baseDelete.call(this, this.deleteRoute, data);\r\n    };\r\n    return CommercePaymentTransactionRoute;\r\n}(common_1.BaseRoute));\r\nCommercePaymentTransactionRoute = tslib_1.__decorate([\r\n    inversify_1.injectable(),\r\n    tslib_1.__param(0, inversify_1.inject(contracts_1.TYPES.IAppOptions)),\r\n    tslib_1.__metadata(\"design:paramtypes\", [typeof (_a = typeof contracts_1.IAppOptions !== \"undefined\" && contracts_1.IAppOptions) === \"function\" && _a || Object])\r\n], CommercePaymentTransactionRoute);\r\nexports.CommercePaymentTransactionRoute = CommercePaymentTransactionRoute;\r\nvar _a;\r\n/**\r\n * @copyright (c) 2017 Mono Ltd\r\n * @license MIT\r\n * @author Mono Ltd\r\n * @overview\r\n ***Notes:**\r\n - Refer to the [Baasic REST API](http://dev.baasic.com/api/reference/home) for detailed information about available Baasic REST API end-points.\r\n - [URI Template](https://github.com/Baasic/uritemplate-js) syntax enables expanding the Baasic route templates to Baasic REST URIs providing it with an object that contains URI parameters.\r\n - All end-point objects are transformed by the associated route service.\r\n */ \r\n\n\n\n//////////////////\n// WEBPACK FOOTER\n// ./src/modules/commerce/paymentTransaction/commercePaymentTransactionRoute.ts\n// module id = 220\n// module chunks = 0","\"use strict\";\r\nfunction __export(m) {\r\n    for (var p in m) if (!exports.hasOwnProperty(p)) exports[p] = m[p];\r\n}\r\nObject.defineProperty(exports, \"__esModule\", { value: true });\r\n__export(require(\"./commercePaymentTransactionRoute\"));\r\n__export(require(\"./commercePaymentTransactionClient\"));\r\n\n\n\n//////////////////\n// WEBPACK FOOTER\n// ./src/modules/commerce/paymentTransaction/index.ts\n// module id = 221\n// module chunks = 0","/* globals module */\r\n/**\r\n * @module commerceProductClient\r\n * @description  Commerce Product Client provides an easy way to consume  Commerce REST API end-points. In order to obtain a needed routes `commerceProductClient` uses `commerceProductRoute`.\r\n */\r\n\"use strict\";\r\nObject.defineProperty(exports, \"__esModule\", { value: true });\r\nvar tslib_1 = require(\"tslib\");\r\nvar inversify_1 = require(\"inversify\");\r\n;\r\nvar httpApi_1 = require(\"../../../httpApi\");\r\nvar _1 = require(\"../\");\r\nvar CommerceProductClient = (function () {\r\n    function CommerceProductClient(commerceProductRoute, apiClient) {\r\n        this.commerceProductRoute = commerceProductRoute;\r\n        this.apiClient = apiClient;\r\n    }\r\n    Object.defineProperty(CommerceProductClient.prototype, \"routeDefinition\", {\r\n        get: function () {\r\n            return this.commerceProductRoute;\r\n        },\r\n        enumerable: true,\r\n        configurable: true\r\n    });\r\n    /**\r\n     * Returns a promise that is resolved once the find action has been performed. Success response returns a list of commerce resources matching the given criteria.\r\n     * @method\r\n     * @example commerceProductClient.find({\r\n                   pageNumber : 1,\r\n                   pageSize : 10,\r\n                   orderBy : '<field>',\r\n                   orderDirection : '<asc|desc>',\r\n                   search : '<search-phrase>'\r\n               })\r\n               .then(function (collection) {\r\n                   // perform success action here\r\n               },\r\n                function (response, status, headers, config) {\r\n                    // perform error handling here\r\n               });\r\n    **/\r\n    CommerceProductClient.prototype.find = function (options) {\r\n        return this.apiClient.get(this.routeDefinition.find(options));\r\n    };\r\n    /**\r\n     * Returns a promise that is resolved once the get action has been performed. Success response returns the commerce resource.\r\n     * @method\r\n     * @example commerceProductClient.get()\r\n                      .then(function (data) {\r\n                          // perform success action here\r\n                      },\r\n                       function (response, status, headers, config) {\r\n                           // perform error handling here\r\n                      });\r\n   **/\r\n    CommerceProductClient.prototype.get = function (id, options) {\r\n        return this.apiClient.get(this.commerceProductRoute.get(id, options));\r\n    };\r\n    /**\r\n     * Returns a promise that is resolved once the create commerce action has been performed; this action creates a new commerce resource.\r\n     * @method\r\n     * @example commerceProductClient.create({\r\n                    name : '<product-name>',\r\n                    slug : '<slug>',\r\n                    shortDescription : '<short-description>',\r\n                    recurringCyclePeriodTypeId: '<recurring-cycle-period-type-id>'\r\n                    planId : '<plan-id>',\r\n                    price: 100,\r\n                    published: true\r\n                })\r\n                .then(function (data) {\r\n                    // perform success action here\r\n                },\r\n                 function (response, status, headers, config) {\r\n                     // perform error handling here\r\n                });\r\n     **/\r\n    CommerceProductClient.prototype.create = function (data) {\r\n        return this.apiClient.post(this.routeDefinition.create(), this.routeDefinition.createParams(data));\r\n    };\r\n    /**\r\n     * Returns a promise that is resolved once the update commerce action has been performed; this action updates a commerce resource. This route uses HAL enabled objects to obtain routes and therefore it doesn't apply `commerceProductRoute` route template. Here is an example of how a route can be obtained from HAL enabled objects:\r\n     * ```\r\n     * let params = modelMapper.removeParams(commerceProduct);\r\n     * let uri = params['model'].links('put').href;\r\n     * ```\r\n     * @method\r\n     * @example // commerceProduct is a resource previously fetched using get action.\r\n                        commerceProduct.shortDescription : '<short-description>';\r\n                        commerceProductClient.update(commerceProduct)\r\n                            .then(function (data) {\r\n                                // perform success action here\r\n                            },\r\n                             function (response, status, headers, config) {\r\n                                 // perform error handling here\r\n                            });\r\n     **/\r\n    CommerceProductClient.prototype.update = function (data) {\r\n        return this.apiClient.put(this.routeDefinition.update(data), this.routeDefinition.updateParams(data));\r\n    };\r\n    /**\r\n     * Returns a promise that is resolved once the remove action has been performed. This action will remove a commerce resource from the system if successfully completed. This route uses HAL enabled objects to obtain routes and therefore it doesn't apply `commerceProductRoute` route template. Here is an example of how a route can be obtained from HAL enabled objects:\r\n     * ```\r\n     * let params = modelMapper.removeParams(commerceProduct);\r\n     * let uri = params['model'].links('delete').href;\r\n     * ```\r\n     * @method\r\n     * @example // commerceProduct is a resource previously fetched using get action.\r\n                    commerceProductClient.remove(commerceProduct)\r\n                        .then(function (data) {\r\n                            // perform success action here\r\n                        },\r\n                         function (response, status, headers, config) {\r\n                             // perform error handling here\r\n                        });\r\n     **/\r\n    CommerceProductClient.prototype.remove = function (data) {\r\n        return this.apiClient.delete(this.routeDefinition.delete(data));\r\n    };\r\n    return CommerceProductClient;\r\n}());\r\nCommerceProductClient = tslib_1.__decorate([\r\n    inversify_1.injectable(),\r\n    tslib_1.__param(0, inversify_1.inject(_1.TYPES.CommerceProductRoute)),\r\n    tslib_1.__param(1, inversify_1.inject(httpApi_1.httpTYPES.ApiClient)),\r\n    tslib_1.__metadata(\"design:paramtypes\", [typeof (_a = typeof _1.CommerceProductRoute !== \"undefined\" && _1.CommerceProductRoute) === \"function\" && _a || Object, typeof (_b = typeof httpApi_1.ApiClient !== \"undefined\" && httpApi_1.ApiClient) === \"function\" && _b || Object])\r\n], CommerceProductClient);\r\nexports.CommerceProductClient = CommerceProductClient;\r\nvar _a, _b;\r\n/**\r\n * @copyright (c) 2017 Mono Ltd\r\n * @license MIT\r\n * @author Mono Ltd\r\n * @overview\r\n ***Notes:**\r\n - Refer to the [Baasic REST API](http://dev.baasic.com/api/reference/home) for detailed information about available Baasic REST API end-points.\r\n - All end-point objects are transformed by the associated route service.\r\n */ \r\n\n\n\n//////////////////\n// WEBPACK FOOTER\n// ./src/modules/commerce/product/commerceProductClient.ts\n// module id = 222\n// module chunks = 0","/* globals module */\r\n/**\r\n * @module commerceProductRoute\r\n * @description Baasic Commerce Product Route Definition provides Baasic route templates which can be expanded to Baasic REST URIs. Various services can use Baasic Commerce Product Route Definition to obtain a needed routes while other routes will be obtained through HAL. By convention, all route services  use the same function names as their corresponding services.\r\n */\r\n\"use strict\";\r\nObject.defineProperty(exports, \"__esModule\", { value: true });\r\nvar tslib_1 = require(\"tslib\");\r\nvar inversify_1 = require(\"inversify\");\r\nvar common_1 = require(\"../../../common\");\r\n;\r\nvar contracts_1 = require(\"../../../core/contracts\");\r\nvar CommerceProductRoute = (function (_super) {\r\n    tslib_1.__extends(CommerceProductRoute, _super);\r\n    function CommerceProductRoute(appOptions) {\r\n        var _this = _super.call(this, appOptions) || this;\r\n        _this.appOptions = appOptions;\r\n        _this.findRoute = 'commerce/products/{?searchQuery,page,rpp,sort,embed,fields}';\r\n        _this.getRoute = 'commerce/products/{id}/{?embed,fields}';\r\n        _this.createRoute = 'commerce/products';\r\n        _this.updateRoute = 'commerce/products/{id}';\r\n        _this.deleteRoute = 'commerce/products/{id}';\r\n        return _this;\r\n    }\r\n    /**\r\n     * Parses find commerce product route which can be expanded with additional options. Supported items are:\r\n     * - `searchQuery` - A string value used to identify commerce resources using the phrase search.\r\n     * - `page` - A value used to set the page number, i.e. to retrieve certain commerce subset from the storage.\r\n     * - `rpp` - A value used to limit the size of result set per page.\r\n     * - `sort` - A string used to set the commerce property to sort the result collection by.\r\n     * - `embed` - Comma separated list of resources to be contained within the current representation.\r\n     * @method\r\n     * @example commerceProductRoute.find({searchQuery: '<search-phrase>'});\r\n     **/\r\n    CommerceProductRoute.prototype.find = function (options) {\r\n        return _super.prototype.baseFind.call(this, this.findRoute, options);\r\n    };\r\n    /**\r\n     * Parses get route; this route doesn't expose any properties.\r\n     * @method\r\n     * @example commerceProductRoute.get(id, options);\r\n     **/\r\n    CommerceProductRoute.prototype.get = function (id, options) {\r\n        return _super.prototype.baseGet.call(this, this.getRoute, id, options);\r\n    };\r\n    /**\r\n     * Parses create commerce product route; this URI template does not expose any additional options.\r\n     * @method\r\n     * @example commerceProductRoute.create();\r\n     **/\r\n    CommerceProductRoute.prototype.create = function () {\r\n        return _super.prototype.baseCreate.call(this, this.createRoute, {});\r\n    };\r\n    /**\r\n     * Parses update commerce product route; this URI template does not expose any additional options.\r\n     * @method\r\n     * @example commerceProductRoute.update(data);\r\n     **/\r\n    CommerceProductRoute.prototype.update = function (data) {\r\n        return _super.prototype.baseUpdate.call(this, this.updateRoute, data);\r\n    };\r\n    /**\r\n    * Parses delete commerce product route; this URI template does not expose any additional options.\r\n    * @method\r\n    * @example commerceProductRoute.delete(data);\r\n    **/\r\n    CommerceProductRoute.prototype.delete = function (data) {\r\n        return _super.prototype.baseDelete.call(this, this.deleteRoute, data);\r\n    };\r\n    return CommerceProductRoute;\r\n}(common_1.BaseRoute));\r\nCommerceProductRoute = tslib_1.__decorate([\r\n    inversify_1.injectable(),\r\n    tslib_1.__param(0, inversify_1.inject(contracts_1.TYPES.IAppOptions)),\r\n    tslib_1.__metadata(\"design:paramtypes\", [typeof (_a = typeof contracts_1.IAppOptions !== \"undefined\" && contracts_1.IAppOptions) === \"function\" && _a || Object])\r\n], CommerceProductRoute);\r\nexports.CommerceProductRoute = CommerceProductRoute;\r\nvar _a;\r\n/**\r\n * @copyright (c) 2017 Mono Ltd\r\n * @license MIT\r\n * @author Mono Ltd\r\n * @overview\r\n ***Notes:**\r\n - Refer to the [Baasic REST API](http://dev.baasic.com/api/reference/home) for detailed information about available Baasic REST API end-points.\r\n - [URI Template](https://github.com/Baasic/uritemplate-js) syntax enables expanding the Baasic route templates to Baasic REST URIs providing it with an object that contains URI parameters.\r\n - All end-point objects are transformed by the associated route service.\r\n */ \r\n\n\n\n//////////////////\n// WEBPACK FOOTER\n// ./src/modules/commerce/product/commerceProductRoute.ts\n// module id = 223\n// module chunks = 0","\"use strict\";\r\nfunction __export(m) {\r\n    for (var p in m) if (!exports.hasOwnProperty(p)) exports[p] = m[p];\r\n}\r\nObject.defineProperty(exports, \"__esModule\", { value: true });\r\n__export(require(\"./commerceProductRoute\"));\r\n__export(require(\"./commerceProductClient\"));\r\n\n\n\n//////////////////\n// WEBPACK FOOTER\n// ./src/modules/commerce/product/index.ts\n// module id = 224\n// module chunks = 0","\"use strict\";\r\nObject.defineProperty(exports, \"__esModule\", { value: true });\r\nvar inversify_1 = require(\"inversify\");\r\nvar _1 = require(\"./\");\r\nvar TYPES = {\r\n    DynamicResourceACLClient: Symbol(\"DynamicResourceACLClient\"),\r\n    DynamicResourceACLRoute: Symbol(\"DynamicResourceACLRoute\"),\r\n    DynamicResourceClient: Symbol(\"DynamicResourceClient\"),\r\n    DynamicResourceRoute: Symbol(\"DynamicResourceRoute\"),\r\n    DynamicSchemaClient: Symbol(\"DynamicSchemaClient\"),\r\n    DynamicSchemaRoute: Symbol(\"DynamicSchemaRoute\")\r\n};\r\nexports.TYPES = TYPES;\r\nvar diModule = new inversify_1.ContainerModule(function (bind) {\r\n    bind(TYPES.DynamicResourceACLRoute).to(_1.DynamicResourceACLRoute);\r\n    bind(TYPES.DynamicResourceACLClient).to(_1.DynamicResourceACLClient);\r\n    bind(TYPES.DynamicResourceRoute).to(_1.DynamicResourceRoute);\r\n    bind(TYPES.DynamicResourceClient).to(_1.DynamicResourceClient);\r\n    bind(TYPES.DynamicSchemaRoute).to(_1.DynamicSchemaRoute);\r\n    bind(TYPES.DynamicSchemaClient).to(_1.DynamicSchemaClient);\r\n});\r\nexports.diModule = diModule;\r\n\n\n\n//////////////////\n// WEBPACK FOOTER\n// ./src/modules/dynamicResource/diModule.ts\n// module id = 225\n// module chunks = 0","/**\r\n * @module dynamicResourceACLClient\r\n * @description  Dynamic Resource ACL Client provides an easy way to consume  Dynamic Resource REST API end-points. In order to obtain needed routes `dynamicResourceACLClient` uses `dynamicResourceACLRoute`.\r\n */\r\n\"use strict\";\r\nObject.defineProperty(exports, \"__esModule\", { value: true });\r\nvar tslib_1 = require(\"tslib\");\r\nvar inversify_1 = require(\"inversify\");\r\n;\r\nvar httpApi_1 = require(\"../../httpApi\");\r\nvar _1 = require(\"./\");\r\nvar DynamicResourceACLClient = (function () {\r\n    function DynamicResourceACLClient(dynamicResourceACLRoute, apiClient) {\r\n        this.dynamicResourceACLRoute = dynamicResourceACLRoute;\r\n        this.apiClient = apiClient;\r\n    }\r\n    Object.defineProperty(DynamicResourceACLClient.prototype, \"routeDefinition\", {\r\n        get: function () {\r\n            return this.dynamicResourceACLRoute;\r\n        },\r\n        enumerable: true,\r\n        configurable: true\r\n    });\r\n    /**\r\n     * Returns a promise that is resolved once the get action has been performed. Success response returns a list of ACL policies established for the specified dynamic resource.\r\n     * @method\r\n     * @param options Options object.\r\n     * @example dynamicResourceACLClient.get({id: '<dynamic-resource-id>', schemaName: '<schema-name>'})\r\n                    .then(function (data) {\r\n                        // perform success action here\r\n                    },\r\n                     function (response, status, headers, config) {\r\n                        // perform error handling here\r\n                    });\r\n     **/\r\n    DynamicResourceACLClient.prototype.get = function (options) {\r\n        return this.apiClient.get(this.routeDefinition.get(options));\r\n    };\r\n    /**\r\n     * Returns a promise that is resolved once the update acl action has been performed; this action creates new ACL policy for the specified dynamic resource.\r\n     * @method\r\n     * @param options Options object.\r\n     * @example dynamicResourceACLClient.update({id: '<dynamic-resource-id>', schemaName: '<schema-name>'})\r\n                    .then(function (data) {\r\n                        // perform success action here\r\n                    },\r\n                     function (response, status, headers, config) {\r\n                        // perform error handling here\r\n                    });\r\n     **/\r\n    DynamicResourceACLClient.prototype.update = function (options) {\r\n        return this.apiClient.put(this.routeDefinition.update(options), this.routeDefinition.updateParams(options));\r\n    };\r\n    /**\r\n     * Returns a promise that is resolved once the removeByUser action has been performed. This action deletes ACL policy assigned to the specified user and dynamic resource.\r\n     * @method\r\n     * @param action Action abbreviation which identifies ACL policy assigned to the specified user and dynamic resource.\r\n     *               Supported Values:\r\n     *               \"Create\"\r\n     *               \"Delete\"\r\n     *               \"Read\"\r\n     *               \"Update\"\r\n     * @param user Username which uniquely identifies user for which ACL policy needs to be removed.\r\n     * @param data ACL Policy whose security privileges need to be retrieved and updated.\r\n     * @example // dynamicResource is a resource previously fetched using get action.\r\n                    dynamicResourceACLClient.removeByUser('<access-action>', '<username>', dynamicResource)\r\n                        .then(function (data) {\r\n                            // perform success action here\r\n                        },\r\n                         function (response, status, headers, config) {\r\n                            // perform error handling here\r\n                        });\r\n     **/\r\n    DynamicResourceACLClient.prototype.removeByUser = function (action, user, data) {\r\n        return this.apiClient.delete(this.dynamicResourceACLRoute.deleteByUser(action, user, data));\r\n    };\r\n    /**\r\n     * Returns a promise that is resolved once the removeByRole action has been performed. This action deletes ACL policy assigned to the specified role and dynamic resource.\r\n     * @method\r\n     * @param action Action abbreviation which identifies ACL policy assigned to the specified role and dynamic resource.\r\n     *               Supported Values:\r\n     *               \"Create\"\r\n     *               \"Delete\"\r\n     *               \"Read\"\r\n     *               \"Update\"\r\n     * @param role Role's name which uniquely identifies role for which ACL policy needs to be removed.\r\n     * @param data ACL Policy whose security privileges need to be retrieved and updated.\r\n     * @example // dynamicResource is a resource previously fetched using get action.\r\n                    dynamicResourceACLClient.removeByRole('<access-action>', '<role-name>', dynamicResource)\r\n                        .then(function (data) {\r\n                            // perform success action here\r\n                        },\r\n                         function (response, status, headers, config) {\r\n                            // perform error handling here\r\n                        });\r\n     **/\r\n    DynamicResourceACLClient.prototype.removeByRole = function (action, role, data) {\r\n        return this.apiClient.delete(this.dynamicResourceACLRoute.deleteByRole(action, role, data));\r\n    };\r\n    return DynamicResourceACLClient;\r\n}());\r\nDynamicResourceACLClient = tslib_1.__decorate([\r\n    inversify_1.injectable(),\r\n    tslib_1.__param(0, inversify_1.inject(_1.TYPES.DynamicResourceACLRoute)),\r\n    tslib_1.__param(1, inversify_1.inject(httpApi_1.httpTYPES.ApiClient)),\r\n    tslib_1.__metadata(\"design:paramtypes\", [typeof (_a = typeof _1.DynamicResourceACLRoute !== \"undefined\" && _1.DynamicResourceACLRoute) === \"function\" && _a || Object, typeof (_b = typeof httpApi_1.ApiClient !== \"undefined\" && httpApi_1.ApiClient) === \"function\" && _b || Object])\r\n], DynamicResourceACLClient);\r\nexports.DynamicResourceACLClient = DynamicResourceACLClient;\r\nvar _a, _b;\r\n/**\r\n * @overview\r\n ***Notes:**\r\n - Refer to the [Baasic REST API](http://dev.baasic.com/api/reference/home) for detailed information about available Baasic REST API end-points.\r\n - All end-point objects are transformed by the associated route service.\r\n */ \r\n\n\n\n//////////////////\n// WEBPACK FOOTER\n// ./src/modules/dynamicResource/dynamicResourceACLClient.ts\n// module id = 226\n// module chunks = 0","/**\r\n * @module dynamicResourceACLRoute\r\n * @description Baasic Dynamic Resource ACL Route Definition provides Baasic route templates which can be expanded to Baasic REST URIs. Various services can use Baasic Dynamic Resource ACL Route Definition to obtain needed routes while other routes will be obtained through HAL. By convention, all route services  use the same function names as their corresponding services.\r\n */\r\n\"use strict\";\r\nObject.defineProperty(exports, \"__esModule\", { value: true });\r\nvar tslib_1 = require(\"tslib\");\r\nvar inversify_1 = require(\"inversify\");\r\nvar common_1 = require(\"../../common\");\r\n;\r\nvar contracts_1 = require(\"../../core/contracts\");\r\nvar DynamicResourceACLRoute = (function (_super) {\r\n    tslib_1.__extends(DynamicResourceACLRoute, _super);\r\n    function DynamicResourceACLRoute(appOptions) {\r\n        var _this = _super.call(this, appOptions) || this;\r\n        _this.appOptions = appOptions;\r\n        _this.getRoute = 'resources/{schemaName}/{id}/acl/{?fields}';\r\n        _this.updateRoute = 'resources/{schemaName}/{id}/acl/{?fields}';\r\n        _this.deleteByUserRoute = 'resources/{schemaName}/{id}/acl/actions/{accessAction}/users/{user}/';\r\n        _this.deleteByRoleRoute = 'resources/{schemaName}/{id}/acl/actions/{accessAction}/roles/{role}/';\r\n        return _this;\r\n    }\r\n    /**\r\n     * Parses get acl route; this URI template should be expanded with the Id of the dynamic resource and name of the dynamic resource schema.\r\n     * @method\r\n     * @param options Query resource options object.\r\n     * @example dynamicResourceACLRoute.get(options)\r\n     **/\r\n    DynamicResourceACLRoute.prototype.get = function (options) {\r\n        var params = this.utility.extend({}, options);\r\n        return _super.prototype.baseCreate.call(this, this.getRoute, params);\r\n    };\r\n    /**\r\n     * Parses update acl route; this URI template should be expanded with the Id of the dynamic resource and name of the dynamic resource schema.\r\n     * @method\r\n     * @param options Options object.\r\n     * @example dynamicResourceACLRoute.update(options)\r\n     **/\r\n    DynamicResourceACLRoute.prototype.update = function (options) {\r\n        var params = this.utility.extend({}, options);\r\n        return _super.prototype.baseCreate.call(this, this.updateRoute, options);\r\n    };\r\n    /**\r\n     * Parses deleteByUser acl route which can be expanded with additional options. Supported items are:\r\n     * - `schemaName` - Name of the dynamic resource schema.\r\n     * - `id` - Id of the dynamic resource.\r\n     * - `accessAction` - Action abbreviation which identifies ACL policy assigned to the specified user and dynamic resource item.\r\n     * - `user` - A value which uniquely identifies user for which ACL policy needs to be removed.\r\n     * @method\r\n     * @param action Action abbreviation which identifies ACL policy assigned to the specified user and dynamic resource item.\r\n     * @param username A value which uniquely identifies user for which ACL policy needs to be removed.\r\n     * @param data ACL Policy object used to perform delete action.\r\n     * @example dynamicResourceACLRoute.deleteByUser(action, username, data);\r\n     **/\r\n    DynamicResourceACLRoute.prototype.deleteByUser = function (action, username, data) {\r\n        var params = this.modelMapper.removeParams(data);\r\n        params.user = username;\r\n        params.accessAction = action;\r\n        return _super.prototype.baseCreate.call(this, this.deleteByUserRoute, params);\r\n    };\r\n    /**\r\n     * Parses deleteByRole acl route which can be expanded with additional options. Supported items are:\r\n     * - `schemaName` - Name of the dynamic resource schema.\r\n     * - `id` - Id of the dynamic resource.\r\n     * - `accessAction` - Action abbreviation which identifies ACL policy assigned to the specified role and dynamic resource item.\r\n     * - `role` - A value which uniquely identifies role for which ACL policy needs to be removed.\r\n     * @method\r\n     * @param action Action abbreviation which identifies ACL policy assigned to the specified role and dynamic resource item.\r\n     * @param role A value which uniquely identifies role for which ACL policy needs to be removed.\r\n     * @param data ACLPolicy object used to perform delete action.\r\n     * @example dynamicResourceACLRoute.deleteByRole(action, role, data)\r\n     **/\r\n    DynamicResourceACLRoute.prototype.deleteByRole = function (action, role, data) {\r\n        var params = this.modelMapper.removeParams(data);\r\n        params.role = role;\r\n        params.accessAction = action;\r\n        return _super.prototype.baseCreate.call(this, this.deleteByRoleRoute, params);\r\n    };\r\n    DynamicResourceACLRoute.prototype.updateParams = function (options) {\r\n        var params = this.utility.extend({}, options);\r\n        return params[this.modelMapper.modelPropertyName];\r\n    };\r\n    return DynamicResourceACLRoute;\r\n}(common_1.BaseRoute));\r\nDynamicResourceACLRoute = tslib_1.__decorate([\r\n    inversify_1.injectable(),\r\n    tslib_1.__param(0, inversify_1.inject(contracts_1.TYPES.IAppOptions)),\r\n    tslib_1.__metadata(\"design:paramtypes\", [typeof (_a = typeof contracts_1.IAppOptions !== \"undefined\" && contracts_1.IAppOptions) === \"function\" && _a || Object])\r\n], DynamicResourceACLRoute);\r\nexports.DynamicResourceACLRoute = DynamicResourceACLRoute;\r\nvar _a;\r\n/**\r\n * @overview\r\n ***Notes:**\r\n - Refer to the [Baasic REST API](http://dev.baasic.com/api/reference/home) for detailed information about available Baasic REST API end-points.\r\n - [URI Template](https://github.com/Baasic/uritemplate-js) syntax enables expanding the Baasic route templates to Baasic REST URIs providing it with an object that contains URI parameters.\r\n - All end-point objects are transformed by the associated route service.\r\n */ \r\n\n\n\n//////////////////\n// WEBPACK FOOTER\n// ./src/modules/dynamicResource/dynamicResourceACLRoute.ts\n// module id = 227\n// module chunks = 0","/**\r\n * @module dynamicResourceClient\r\n * @description  Dynamic Resource Client provides an easy way to consume  Dynamic Resource REST API end-points. In order to obtain needed routes `dynamicResourceClient` uses `dynamicResourceRoute`.\r\n */\r\n\"use strict\";\r\nObject.defineProperty(exports, \"__esModule\", { value: true });\r\nvar tslib_1 = require(\"tslib\");\r\nvar inversify_1 = require(\"inversify\");\r\n;\r\nvar httpApi_1 = require(\"../../httpApi\");\r\nvar _1 = require(\"./\");\r\nvar DynamicResourceClient = (function () {\r\n    function DynamicResourceClient(dynamicResourceRoute, dynamicResourceACLClient, dynamicSchemaClient, apiClient) {\r\n        this.dynamicResourceRoute = dynamicResourceRoute;\r\n        this.dynamicResourceACLClient = dynamicResourceACLClient;\r\n        this.dynamicSchemaClient = dynamicSchemaClient;\r\n        this.apiClient = apiClient;\r\n    }\r\n    Object.defineProperty(DynamicResourceClient.prototype, \"routeDefinition\", {\r\n        /**\r\n         * Provides direct access to `dynamicResourceRoute`.\r\n         * @method\r\n         * @example dynamicResourceClient.routeDefinition.get(schemaName, id, options)\r\n         **/\r\n        get: function () {\r\n            return this.dynamicResourceRoute;\r\n        },\r\n        enumerable: true,\r\n        configurable: true\r\n    });\r\n    Object.defineProperty(DynamicResourceClient.prototype, \"acl\", {\r\n        get: function () {\r\n            return this.dynamicResourceACLClient;\r\n        },\r\n        enumerable: true,\r\n        configurable: true\r\n    });\r\n    Object.defineProperty(DynamicResourceClient.prototype, \"schema\", {\r\n        get: function () {\r\n            return this.dynamicSchemaClient;\r\n        },\r\n        enumerable: true,\r\n        configurable: true\r\n    });\r\n    /**\r\n     * Returns a promise that is resolved once the find action has been performed. Success response returns a list of dynamic resources matching the given criteria.\r\n     * @method\r\n     * @param schemaName Name of dynamic resource schema whose dynamic resources need to be retrieved.\r\n     * @param options Query resource options object.\r\n     * @returns Promise that is resolved once the find action has been performed.\r\n     * @example dynamicResourceClient.find('<schema-name>', {\r\n                    pageNumber : 1,\r\n                    pageSize : 10,\r\n                    orderBy : '<field>',\r\n                    orderDirection : '<asc|desc>',\r\n                    search : '<search-phrase>'\r\n                })\r\n                .then(function (collection) {\r\n                    // perform success action here\r\n                },\r\n                 function (response, status, headers, config) {\r\n                    // perform error handling here\r\n                });\r\n     **/\r\n    DynamicResourceClient.prototype.find = function (schemaName, options) {\r\n        return this.apiClient.get(this.dynamicResourceRoute.find(schemaName, options));\r\n    };\r\n    /**\r\n     * Returns a promise that is resolved once the get action has been performed. Success response returns the specified dynamic resource.\r\n     * @method\r\n     * @example dynamicResourceClient.get('<schema-name>', '<dynamic-resource-id>')\r\n                    .then(function (data) {\r\n                        // perform success action here\r\n                    },\r\n                     function (response, status, headers, config) {\r\n                        // perform error handling here\r\n                    });\r\n     **/\r\n    DynamicResourceClient.prototype.get = function (schemaName, id, options) {\r\n        return this.apiClient.get(this.dynamicResourceRoute.get(id, schemaName, options));\r\n    };\r\n    /**\r\n     * Returns a promise that is resolved once the create dynamic resource action has been performed; this action creates a new dynamic resource item.\r\n     * @method\r\n     * @param schemaName Name of dynamic resource schema that needs to be updated with new dynamic resource.\r\n     * @param data A JSON object that needs to be inserted into the system as dynamic resource. JSON object is an unordered collection of zero or more key/value pairs structured using the standard JSON syntax rules.\r\n     * @example dynamicResourceClient.create('<schema-name>', {\r\n                    id : '',\r\n                    description : '<description>'\r\n                })\r\n                .then(function (data) {\r\n                    // perform success action here\r\n                },\r\n                 function (response, status, headers, config) {\r\n                     // perform error handling here\r\n                });\r\n     **/\r\n    DynamicResourceClient.prototype.create = function (schemaName, data) {\r\n        return this.apiClient.post(this.routeDefinition.create(schemaName), this.routeDefinition.createParams(data));\r\n    };\r\n    /**\r\n     * Returns a promise that is resolved once the update action has been performed; this action updates a dynamic resource item. This route uses HAL enabled objects to obtain routes and therefore it doesn't apply `dynamicResourceRoute` route template. Here is an example of how a route can be obtained from HAL enabled objects:\r\n     * ```\r\n     * let params = modelMapper.removeParams(dynamicResource);\r\n     * let uri = params['model'].links('put').href;\r\n     * ```\r\n     * @method\r\n     * @param data A JSON object used to update specified dynamic resource. JSON object is an unordered collection of zero or more key/value pairs structured using the standard JSON syntax rules.\r\n     * @param options Options object.\r\n     * @example // dynamicResource is a resource previously fetched using get action.\r\n                    dynamicResource.description = '<description>';\r\n                    dynamicResourceClient.update(dynamicResource, {\r\n                        query: \"where field = 'value' \"\r\n                    })\r\n                    .then(function (data) {\r\n                        // perform success action here\r\n                    },\r\n                     function (response, status, headers, config) {\r\n                         // perform error handling here\r\n                    });\r\n     **/\r\n    DynamicResourceClient.prototype.update = function (data, options) {\r\n        return this.apiClient.put(this.routeDefinition.update(data, options), this.routeDefinition.updateParams(data));\r\n    };\r\n    /**\r\n     * Returns a promise that is resolved once the patch action has been performed; this action patches an existing dynamic resource. This route uses HAL enabled objects to obtain routes and therefore it doesn't apply `dynamicResourceRoute` route template. Here is an example of how a route can be obtained from HAL enabled objects:\r\n     * ```\r\n     * let params = modelMapper.updateParams(dynamicResource);\r\n     * let uri = params['model'].links('patch').href;\r\n     * ```\r\n     * @method\r\n     * @param data JSON object used for partial update of specified dynamic resource. JSON object is an unordered collection of zero or more key/value pairs structured using the standard JSON syntax rules.\r\n     * @param options Options object.\r\n     * @example // dynamicResource is a resource previously fetched using get action.\r\n                    dynamicResource.description = '<new-description>';\r\n                    dynamicResource.newField = '<newfield-value>';\r\n                    dynamicResourceClient.patch(dynamicResource, {\r\n                        query: \"where field = 'value' \"\r\n                    })\r\n                    .then(function (data) {\r\n                        // perform success action here\r\n                    },\r\n                     function (response, status, headers, config) {\r\n                         // perform error handling here\r\n                        \r\n                    });\r\n     **/\r\n    DynamicResourceClient.prototype.patch = function (data, options) {\r\n        return this.apiClient.patch(this.routeDefinition.patch(data, options), this.routeDefinition.updateParams(data));\r\n    };\r\n    /**\r\n     * Returns a promise that is resolved once the remove action has been performed. This action will remove a dynamic resource from the system if successfully completed. This route uses HAL enabled objects to obtain routes and therefore it doesn't apply `dynamicResourceRoute` route template. Here is an example of how a route can be obtained from HAL enabled objects:\r\n     * ```\r\n     * let params = modelMapper.removeParams(dynamicResource);\r\n     * let uri = params['model'].links('delete').href;\r\n     * ```\r\n     * @method\r\n     * @param data JSON object used to delete specified dynamic resource. JSON object is an unordered collection of zero or more key/value pairs structured using the standard JSON syntax rules.\r\n     * @example // dynamicResource is a resource previously fetched using get action.\r\n                    dynamicResourceClient.remove(dynamicResource, {\r\n                        query: \"where field = 'value' \"\r\n                    })\r\n                    .then(function (data) {\r\n                        // perform success action here\r\n                    },\r\n                     function (response, status, headers, config) {\r\n                         // perform error handling here\r\n                    });\r\n     **/\r\n    DynamicResourceClient.prototype.remove = function (data, options) {\r\n        return this.apiClient.delete(this.dynamicResourceRoute.delete(data, options));\r\n    };\r\n    return DynamicResourceClient;\r\n}());\r\nDynamicResourceClient = tslib_1.__decorate([\r\n    inversify_1.injectable(),\r\n    tslib_1.__param(0, inversify_1.inject(_1.TYPES.DynamicResourceRoute)),\r\n    tslib_1.__param(1, inversify_1.inject(_1.TYPES.DynamicResourceACLClient)),\r\n    tslib_1.__param(2, inversify_1.inject(_1.TYPES.DynamicSchemaClient)),\r\n    tslib_1.__param(3, inversify_1.inject(httpApi_1.httpTYPES.ApiClient)),\r\n    tslib_1.__metadata(\"design:paramtypes\", [typeof (_a = typeof _1.DynamicResourceRoute !== \"undefined\" && _1.DynamicResourceRoute) === \"function\" && _a || Object, typeof (_b = typeof _1.DynamicResourceACLClient !== \"undefined\" && _1.DynamicResourceACLClient) === \"function\" && _b || Object, typeof (_c = typeof _1.DynamicSchemaClient !== \"undefined\" && _1.DynamicSchemaClient) === \"function\" && _c || Object, typeof (_d = typeof httpApi_1.ApiClient !== \"undefined\" && httpApi_1.ApiClient) === \"function\" && _d || Object])\r\n], DynamicResourceClient);\r\nexports.DynamicResourceClient = DynamicResourceClient;\r\nvar _a, _b, _c, _d;\r\n\n\n\n//////////////////\n// WEBPACK FOOTER\n// ./src/modules/dynamicResource/dynamicResourceClient.ts\n// module id = 228\n// module chunks = 0","/**\r\n * @module dynamicResourceRoute\r\n * @description Baasic Dynamic Resource Route Definition provides Baasic route templates which can be expanded to Baasic REST URIs. Various services can use Baasic Dynamic Resource Route Definition to obtain needed routes while other routes will be obtained through HAL. By convention, all route services  use the same function names as their corresponding services.\r\n */\r\n\"use strict\";\r\nObject.defineProperty(exports, \"__esModule\", { value: true });\r\nvar tslib_1 = require(\"tslib\");\r\nvar inversify_1 = require(\"inversify\");\r\nvar common_1 = require(\"../../common\");\r\n;\r\nvar _1 = require(\"./\");\r\nvar contracts_1 = require(\"../../core/contracts\");\r\nvar DynamicResourceRoute = (function (_super) {\r\n    tslib_1.__extends(DynamicResourceRoute, _super);\r\n    function DynamicResourceRoute(appOptions, dynamicResourceACLRoute, dynamicSchemaRoute) {\r\n        var _this = _super.call(this, appOptions) || this;\r\n        _this.appOptions = appOptions;\r\n        _this.dynamicResourceACLRoute = dynamicResourceACLRoute;\r\n        _this.dynamicSchemaRoute = dynamicSchemaRoute;\r\n        _this.findRoute = 'resources/{schemaName}/{?searchQuery,page,rpp,sort,embed,fields}';\r\n        _this.getRoute = 'resources/{schemaName}/{id}/{?embed,fields}';\r\n        _this.createRoute = 'resources/{schemaName}';\r\n        _this.updateRoute = 'resources/{schemaName}/{id}/{?embed,fields,query}';\r\n        _this.patchRoute = 'resources/{schemaName}/{id}/{?embed,fields,query}';\r\n        _this.deleteRoute = 'resources/{schemaName}/{id}/{?query}';\r\n        return _this;\r\n    }\r\n    Object.defineProperty(DynamicResourceRoute.prototype, \"acl\", {\r\n        get: function () {\r\n            return this.dynamicResourceACLRoute;\r\n        },\r\n        enumerable: true,\r\n        configurable: true\r\n    });\r\n    Object.defineProperty(DynamicResourceRoute.prototype, \"dynamicSchema\", {\r\n        get: function () {\r\n            return this.dynamicSchemaRoute;\r\n        },\r\n        enumerable: true,\r\n        configurable: true\r\n    });\r\n    /**\r\n     * Parses find route which can be expanded with additional options. Supported items are:\r\n     * - `schemaName` - Name of the dynamic resource schema.\r\n     * - `searchQuery` - A string referencing dynamic resource properties using the phrase or BQL (Baasic Query Language) search.\r\n     * - `page` - A value used to set the page number, i.e. to retrieve certain dynamic resource subset from the storage.\r\n     * - `rpp` - A value used to limit the size of result set per page.\r\n     * - `sort` - A string used to set the dynamic resource property to sort the result collection by.\r\n     * - `embed` - Comma separated list of resources to be contained within the current representation.\r\n     * @method\r\n     * @param options query resource options object\r\n     * @example dynamicResourceRoute.find(options);\r\n     **/\r\n    DynamicResourceRoute.prototype.find = function (schemaName, options) {\r\n        return _super.prototype.baseFind.call(this, this.findRoute, this.utility.extend({ schemaName: schemaName }, options));\r\n    };\r\n    /**\r\n     * Parses get route which must be expanded with the name of the previously created dynamic resource schema in the system and the Id of the previously created dynamic resource. Additional expand supported items are:\r\n     * - `embed` - Comma separated list of resources to be contained within the current representation.\r\n     * @method\r\n     * @param id Unique identifier of dynamic resources\r\n     * @param schemaName schema name\r\n     * @param options query resource options object\r\n     * @example dynamicResourceRoute.get(id, schemaName, options);\r\n     **/\r\n    DynamicResourceRoute.prototype.get = function (id, schemaName, options) {\r\n        return _super.prototype.baseGet.call(this, this.getRoute, id, this.utility.extend({ schemaName: schemaName }, options));\r\n    };\r\n    DynamicResourceRoute.prototype.create = function (schemaName) {\r\n        var params = this.modelMapper.getParams(schemaName, undefined, 'schemaName');\r\n        return _super.prototype.baseCreate.call(this, this.createRoute, params);\r\n    };\r\n    DynamicResourceRoute.prototype.update = function (data, options) {\r\n        return _super.prototype.baseUpdate.call(this, this.updateRoute, data, options);\r\n    };\r\n    DynamicResourceRoute.prototype.patch = function (schemaName, data, options) {\r\n        var opt = options || {};\r\n        return _super.prototype.baseUpdate.call(this, this.patchRoute, data, this.utility.extend({ schemaName: schemaName }, opt), 'patch');\r\n    };\r\n    DynamicResourceRoute.prototype.delete = function (schemaName, data, options) {\r\n        var opt = options || {};\r\n        return _super.prototype.baseDelete.call(this, this.deleteRoute, data, this.utility.extend({ schemaName: schemaName }, opt));\r\n    };\r\n    return DynamicResourceRoute;\r\n}(common_1.BaseRoute));\r\nDynamicResourceRoute = tslib_1.__decorate([\r\n    inversify_1.injectable(),\r\n    tslib_1.__param(0, inversify_1.inject(contracts_1.TYPES.IAppOptions)),\r\n    tslib_1.__param(1, inversify_1.inject(_1.TYPES.DynamicResourceACLRoute)),\r\n    tslib_1.__param(2, inversify_1.inject(_1.TYPES.DynamicSchemaRoute)),\r\n    tslib_1.__metadata(\"design:paramtypes\", [typeof (_a = typeof contracts_1.IAppOptions !== \"undefined\" && contracts_1.IAppOptions) === \"function\" && _a || Object, typeof (_b = typeof _1.DynamicResourceACLRoute !== \"undefined\" && _1.DynamicResourceACLRoute) === \"function\" && _b || Object, typeof (_c = typeof _1.DynamicSchemaRoute !== \"undefined\" && _1.DynamicSchemaRoute) === \"function\" && _c || Object])\r\n], DynamicResourceRoute);\r\nexports.DynamicResourceRoute = DynamicResourceRoute;\r\nvar _a, _b, _c;\r\n/**\r\n * @overview\r\n ***Notes:**\r\n - Refer to the [Baasic REST API](http://dev.baasic.com/api/reference/home) for detailed information about available Baasic REST API end-points.\r\n - [URI Template](https://github.com/Baasic/uritemplate-js) syntax enables expanding the Baasic route templates to Baasic REST URIs providing it with an object that contains URI parameters.\r\n - All end-point objects are transformed by the associated route definition.\r\n */ \r\n\n\n\n//////////////////\n// WEBPACK FOOTER\n// ./src/modules/dynamicResource/dynamicResourceRoute.ts\n// module id = 229\n// module chunks = 0","/**\r\n * @module dynamicSchemaClient\r\n * @description  Dynamic Schema Client provides an easy way to consume  Dynamic Schema REST API end-points. In order to obtain needed routes `dynamicSchemaClient` uses `dynamicSchemaRoute`.\r\n */\r\n\"use strict\";\r\nObject.defineProperty(exports, \"__esModule\", { value: true });\r\nvar tslib_1 = require(\"tslib\");\r\nvar inversify_1 = require(\"inversify\");\r\n;\r\nvar httpApi_1 = require(\"../../httpApi\");\r\nvar _1 = require(\"./\");\r\nvar DynamicSchemaClient = (function () {\r\n    function DynamicSchemaClient(dynamicSchemaRoute, apiClient) {\r\n        this.dynamicSchemaRoute = dynamicSchemaRoute;\r\n        this.apiClient = apiClient;\r\n    }\r\n    Object.defineProperty(DynamicSchemaClient.prototype, \"routeDefinition\", {\r\n        /**\r\n         * Provides direct access to `dynamicSchemaRoute`.\r\n         * @method\r\n         * @example dynamicSchemaClient.routeDefinition.get();\r\n         **/\r\n        get: function () {\r\n            return this.dynamicSchemaRoute;\r\n        },\r\n        enumerable: true,\r\n        configurable: true\r\n    });\r\n    /**\r\n     * Returns a promise that is resolved once the find action has been performed. Success response returns a list of dynamic resource schemas matching the given criteria.\r\n     * @method\r\n     * @param options Options object.\r\n     * @example dynamicSchemaClient.find({\r\n                    pageNumber : 1,\r\n                    pageSize : 10,\r\n                    orderBy : '<field>',\r\n                    orderDirection : '<asc|desc>',\r\n                    search : '<search-phrase>'\r\n                })\r\n                .then(function (collection) {\r\n                    // perform success action here\r\n                },\r\n                 function (response, status, headers, config) {\r\n                    // perform error handling here\r\n                });\r\n     **/\r\n    DynamicSchemaClient.prototype.find = function (options) {\r\n        return this.apiClient.get(this.routeDefinition.find(options));\r\n    };\r\n    /**\r\n     * Returns a promise that is resolved once the get action has been performed. Success response returns the specified dynamic resource schema.\r\n     * @method\r\n     * @param name Name of dynamic resource schema which need to be retrieved.\r\n     * @param options Options object.\r\n     * @example dynamicSchemaClient.get('<schema-name>')\r\n                    .then(function (data) {\r\n                        // perform success action here\r\n                    },\r\n                     function (response, status, headers, config) {\r\n                        // perform error handling here\r\n                    });\r\n     **/\r\n    DynamicSchemaClient.prototype.get = function (name, options) {\r\n        return this.apiClient.get(this.dynamicSchemaRoute.get(name, options));\r\n    };\r\n    /**\r\n     * Returns a promise that is resolved once the create action has been performed; this action creates a new dynamic resource schema item.\r\n     * @method\r\n     * @param data A dynamic resource schema object that needs to be inserted into the system.\r\n     * @example dynamicSchemaClient.create({\r\n                    schema : {\r\n                        type : 'object',\r\n                        properties : {\r\n                            id : {\r\n                                title : '<unique-identifier-field>',\r\n                                readonly : true,\r\n                                hidden : true,\r\n                                type : 'string'\r\n                            },\r\n                            description : {\r\n                                type: string\r\n                            }\r\n                        }\r\n                    },\r\n                    name : '<schema-name>',\r\n                    description : '<description>',\r\n                    enforceSchemaValidation : true\r\n                })\r\n                .then(function (data) {\r\n                    // perform success action here\r\n                },\r\n                 function (response, status, headers, config) {\r\n                    // perform error handling here\r\n                });\r\n     **/\r\n    DynamicSchemaClient.prototype.create = function (data) {\r\n        return this.apiClient.post(this.routeDefinition.create(), this.routeDefinition.createParams(data));\r\n    };\r\n    /**\r\n     * Returns a promise that is resolved once the update dynamic resource schema action has been performed; this action updates a dynamic resource schema item. This route uses HAL enabled objects to obtain routes and therefore it doesn't apply `dynamicSchemaRoute` route template. Here is an example of how a route can be obtained from HAL enabled objects:\r\n     * ```\r\n     * let params = modelMapper.removeParams(dynamicResourceSchema);\r\n     * let uri = params['model'].links('put').href;\r\n     * ```\r\n     * @method\r\n     * @param data A dynamic schema object used to update specified dynamic resource schema.\r\n     * @example // dynamicResourceSchema is a resource previously fetched using get action.\r\n                    dynamicResourceSchema.description = '<description>';\r\n                    dynamicSchemaClient.update(dynamicResourceSchema)\r\n                        .then(function (data) {\r\n                            // perform success action here\r\n                        },\r\n                         function (response, status, headers, config) {\r\n                            // perform error handling here\r\n                        });\r\n     **/\r\n    DynamicSchemaClient.prototype.update = function (data) {\r\n        return this.apiClient.put(this.routeDefinition.update(data), this.routeDefinition.updateParams(data));\r\n    };\r\n    /**\r\n     * Returns a promise that is resolved once the remove action has been performed. This action will remove a dynamic resource schema item from the system if successfully completed. This route uses HAL enabled objects to obtain routes and therefore it doesn't apply `dynamicSchemaRoute` route template. Here is an example of how a route can be obtained from HAL enabled objects:\r\n     * ```\r\n     * let params = modelMapper.removeParams(dynamicResourceSchema);\r\n     * let uri = params['model'].links('delete').href;\r\n     * ```\r\n     * @method\r\n     * @param data A dynamic schema object used to delete specified dynamic resource schema.\r\n     * @example // dynamicResourceSchema is a resource previously fetched using get action.\r\n                    dynamicSchemaClient.remove(dynamicResourceSchema)\r\n                        .then(function (data) {\r\n                            // perform success action here\r\n                        },\r\n                         function (response, status, headers, config) {\r\n                            // perform error handling here\r\n                        });\r\n     **/\r\n    DynamicSchemaClient.prototype.remove = function (data) {\r\n        return this.apiClient.delete(this.routeDefinition.delete(data));\r\n    };\r\n    /**\r\n     * Returns a promise that is resolved once the generate schema action has been performed. Success response returns a schema generated based on the json input.\r\n     * @method\r\n     * @param data Unordered collection of key value pairs used to specify dynamic schema definition.\r\n     * @example baasicDynamicSchemaService.generate({\r\n                    id : '<schema-Id>',\r\n                    description : '<description>'\r\n                })\r\n                .then(function (data) {\r\n                    // perform success action here\r\n                },\r\n                 function (response, status, headers, config) {\r\n                    // perform error handling here\r\n                });\r\n     **/\r\n    DynamicSchemaClient.prototype.generate = function (data) {\r\n        return this.apiClient.post(this.routeDefinition.generate(), this.routeDefinition.createParams(data));\r\n    };\r\n    return DynamicSchemaClient;\r\n}());\r\nDynamicSchemaClient = tslib_1.__decorate([\r\n    inversify_1.injectable(),\r\n    tslib_1.__param(0, inversify_1.inject(_1.TYPES.DynamicSchemaRoute)),\r\n    tslib_1.__param(1, inversify_1.inject(httpApi_1.httpTYPES.ApiClient)),\r\n    tslib_1.__metadata(\"design:paramtypes\", [typeof (_a = typeof _1.DynamicSchemaRoute !== \"undefined\" && _1.DynamicSchemaRoute) === \"function\" && _a || Object, typeof (_b = typeof httpApi_1.ApiClient !== \"undefined\" && httpApi_1.ApiClient) === \"function\" && _b || Object])\r\n], DynamicSchemaClient);\r\nexports.DynamicSchemaClient = DynamicSchemaClient;\r\nvar _a, _b;\r\n/**\r\n * @overview\r\n ***Notes:**\r\n - Refer to the [Baasic REST API](http://dev.baasic.com/api/reference/home) for detailed information about available Baasic REST API end-points.\r\n - All end-point objects are transformed by the associated route definition.\r\n */ \r\n\n\n\n//////////////////\n// WEBPACK FOOTER\n// ./src/modules/dynamicResource/dynamicSchemaClient.ts\n// module id = 230\n// module chunks = 0","/**\r\n * @module dynamicSchemaRoute\r\n * @description Baasic Dynamic Schema Route Definition provides Baasic route templates which can be expanded to Baasic REST URIs. Various services can use Baasic Dynamic Schema Route Definition to obtain needed routes while other routes will be obtained through HAL. By convention, all route services  use the same function names as their corresponding services.\r\n */\r\n\"use strict\";\r\nObject.defineProperty(exports, \"__esModule\", { value: true });\r\nvar tslib_1 = require(\"tslib\");\r\nvar inversify_1 = require(\"inversify\");\r\nvar common_1 = require(\"../../common\");\r\n;\r\nvar contracts_1 = require(\"../../core/contracts\");\r\nvar DynamicSchemaRoute = (function (_super) {\r\n    tslib_1.__extends(DynamicSchemaRoute, _super);\r\n    function DynamicSchemaRoute(appOptions) {\r\n        var _this = _super.call(this, appOptions) || this;\r\n        _this.appOptions = appOptions;\r\n        _this.findRoute = 'schemas/{?searchQuery,page,rpp,sort,embed,fields}';\r\n        _this.getRoute = 'schemas/{name}/{?embed,fields}';\r\n        _this.generateRoute = 'schemas/generate';\r\n        _this.createRoute = 'schemas';\r\n        _this.updateRoute = 'schemas/{id}';\r\n        _this.deleteRoute = 'schemas/{id}';\r\n        return _this;\r\n    }\r\n    /**\r\n     * Parses find route which can be expanded with additional options. Supported items are:\r\n     * - `searchQuery` - A string referencing dynamic resource schema properties using the phrase or BQL (Baasic Query Language) search.\r\n     * - `page` - A value used to set the page number, i.e. to retrieve certain dynamic resource schema subset from the storage.\r\n     * - `rpp` - A value used to limit the size of result set per page.\r\n     * - `sort` - A string used to set the dynamic resource schema property to sort the result collection by.\r\n     * - `embed` - Comma separated list of resources to be contained within the current representation.\r\n     * @method\r\n     * @example dynamicSchemaRoute.find({searchQuery: '<search-phrase>'});\r\n     **/\r\n    DynamicSchemaRoute.prototype.find = function (options) {\r\n        return _super.prototype.baseFind.call(this, this.findRoute, options);\r\n    };\r\n    /**\r\n     * Parses get route which must be expanded with name of the previously created dynamic resource schema. Additional expand supported items are:\r\n     * - `embed` - Comma separated list of resources to be contained within the current representation.\r\n     * @method\r\n     * @example dynamicSchemaRoute.find({name: '<schema-name>'});\r\n     **/\r\n    DynamicSchemaRoute.prototype.get = function (name, options) {\r\n        return _super.prototype.baseGet.call(this, this.getRoute, this.modelMapper.getParams(name, options, 'name'));\r\n    };\r\n    /**\r\n     * Parses create route; this URI template doesn't expose any additional properties.\r\n     * @method\r\n     * @example dynamicSchemaRoute.generate();\r\n     **/\r\n    DynamicSchemaRoute.prototype.generate = function () {\r\n        return _super.prototype.baseCreate.call(this, this.generateRoute, {});\r\n    };\r\n    /**\r\n     * Parses create route; this URI template doesn't expose any additional properties.\r\n     * @method\r\n     * @example dynamicSchemaRoute.create(data);\r\n     **/\r\n    DynamicSchemaRoute.prototype.create = function () {\r\n        return _super.prototype.baseCreate.call(this, this.createRoute, {});\r\n    };\r\n    /**\r\n     * Parses update route.\r\n     * @method\r\n     * @param data A dynamic schema object used to update specified dynamic resource schema.\r\n     * @example dynamicSchemaRoute.update(data);\r\n     */\r\n    DynamicSchemaRoute.prototype.update = function (data) {\r\n        return _super.prototype.baseUpdate.call(this, this.updateRoute, data);\r\n    };\r\n    /**\r\n     * Parses delete route.\r\n     * @method\r\n     * @param data A dynamic schema object used to delete specified dynamic resource schema.\r\n     */\r\n    DynamicSchemaRoute.prototype.delete = function (data) {\r\n        return _super.prototype.baseDelete.call(this, this.deleteRoute, data);\r\n    };\r\n    return DynamicSchemaRoute;\r\n}(common_1.BaseRoute));\r\nDynamicSchemaRoute = tslib_1.__decorate([\r\n    inversify_1.injectable(),\r\n    tslib_1.__param(0, inversify_1.inject(contracts_1.TYPES.IAppOptions)),\r\n    tslib_1.__metadata(\"design:paramtypes\", [typeof (_a = typeof contracts_1.IAppOptions !== \"undefined\" && contracts_1.IAppOptions) === \"function\" && _a || Object])\r\n], DynamicSchemaRoute);\r\nexports.DynamicSchemaRoute = DynamicSchemaRoute;\r\nvar _a;\r\n/**\r\n * @overview\r\n ***Notes:**\r\n - Refer to the [Baasic REST API](http://dev.baasic.com/api/reference/home) for detailed information about available Baasic REST API end-points.\r\n - [URI Template](https://github.com/Baasic/uritemplate-js) syntax enables expanding the Baasic route templates to Baasic REST URIs providing it with an object that contains URI parameters.\r\n - All end-point objects are transformed by the associated route definition.\r\n */ \r\n\n\n\n//////////////////\n// WEBPACK FOOTER\n// ./src/modules/dynamicResource/dynamicSchemaRoute.ts\n// module id = 231\n// module chunks = 0","\"use strict\";\r\nObject.defineProperty(exports, \"__esModule\", { value: true });\r\nvar inversify_1 = require(\"inversify\");\r\nvar _1 = require(\"./\");\r\nvar TYPES = {\r\n    FilesACLClient: Symbol(\"FilesACLClient\"),\r\n    FilesACLRoute: Symbol(\"FilesACLRoute\"),\r\n    FilesBatchRoute: Symbol(\"FilesBatchRoute\"),\r\n    FilesBatchClient: Symbol(\"FilesBatchClient\"),\r\n    FilesRoute: Symbol(\"FilesRoute\"),\r\n    FilesClient: Symbol(\"FilesClient\"),\r\n    FilesStreamsRoute: Symbol(\"FilesStreamsRoute\"),\r\n    FilesStreamsClient: Symbol(\"FilesStreamsClient\")\r\n};\r\nexports.TYPES = TYPES;\r\nvar diModule = new inversify_1.ContainerModule(function (bind) {\r\n    bind(TYPES.FilesBatchRoute).to(_1.FilesBatchRoute);\r\n    bind(TYPES.FilesBatchClient).to(_1.FilesBatchClient);\r\n    bind(TYPES.FilesStreamsRoute).to(_1.FilesStreamsRoute);\r\n    bind(TYPES.FilesStreamsClient).to(_1.FilesStreamsClient);\r\n    bind(TYPES.FilesACLRoute).to(_1.FilesACLRoute);\r\n    bind(TYPES.FilesACLClient).to(_1.FilesACLClient);\r\n    bind(TYPES.FilesRoute).to(_1.FilesRoute);\r\n    bind(TYPES.FilesClient).to(_1.FilesClient);\r\n});\r\nexports.diModule = diModule;\r\n\n\n\n//////////////////\n// WEBPACK FOOTER\n// ./src/modules/file/diModule.ts\n// module id = 232\n// module chunks = 0","/* globals module */\r\n/**\r\n * @module filesACLClient\r\n * @description  Files ACL Client provides Baasic route templates which can be expanded to Baasic REST URIs. Various services can use Baasic Files Route Definition to obtain needed routes while other routes will be obtained through HAL. By convention, all route services use the same function names as their corresponding services.\r\n */\r\n\"use strict\";\r\nObject.defineProperty(exports, \"__esModule\", { value: true });\r\nvar tslib_1 = require(\"tslib\");\r\nvar inversify_1 = require(\"inversify\");\r\n;\r\nvar httpApi_1 = require(\"../../httpApi\");\r\nvar _1 = require(\"./\");\r\nvar FilesACLClient = (function () {\r\n    function FilesACLClient(filesACLRoute, apiClient) {\r\n        this.filesACLRoute = filesACLRoute;\r\n        this.apiClient = apiClient;\r\n    }\r\n    Object.defineProperty(FilesACLClient.prototype, \"routeDefinition\", {\r\n        get: function () {\r\n            return this.filesACLRoute;\r\n        },\r\n        enumerable: true,\r\n        configurable: true\r\n    });\r\n    /**\r\n     * Returns a promise that is resolved once the get action has been performed. Success response returns a list of ACL policies established for the specified file resource.\r\n     * @method\r\n     * @param options ACL options object.\r\n     * @returns A promise that is resolved once the get action has been performed.\r\n     * @example filesACLClient.get({id: '<file-id>'})\r\n                    .then(function (data) {\r\n                        // perform success action here\r\n                    },\r\n                     function (response, status, headers, config) {\r\n                         // perform error handling here\r\n                    });\r\n     **/\r\n    FilesACLClient.prototype.get = function (options) {\r\n        return this.apiClient.get(this.routeDefinition.get(options));\r\n    };\r\n    /**\r\n     * Returns a promise that is resolved once the update acl action has been performed, this action creates new ACL policy for the specified file resource.\r\n     * @method\r\n     * @param options An ACL policy object that needs to be inserted into the system. This object specifies parameters necessary for establishing user and/or role set of rights.\r\n     * @example let options = {id : '<file-id>'};\r\n                let aclObj =  {  actionId: '<action-id>',  roleId: '<role-id>',  userId: '<user-id>' };\r\n                options[baasicConstants.modelPropertyName] = aclObj;\r\n                filesACLClient.update(options)\r\n                    .then(function (data) {\r\n                        // perform success action here\r\n                    },\r\n                     function (response, status, headers, config) {\r\n                         // perform error handling here\r\n                    });\r\n     **/\r\n    FilesACLClient.prototype.update = function (options) {\r\n        return this.apiClient.put(this.routeDefinition.update(options), this.routeDefinition.updateParams(options));\r\n    };\r\n    /**\r\n     * Returns a promise that is resolved once the removeByUser action has been performed. This action deletes ACL policy assigned to the specified user and file resource.\r\n     * @method\r\n     * @param id File id which uniquely identifies file resource whose security privileges need to be retrieved and updated.\r\n     * @param action Action abbreviation which identifies ACL policy assigned to the specified user and file resource.\r\n     *               Supported Values:\r\n     *               \"Create\"\r\n     *               \"Delete\"\r\n     *               \"Read\"\r\n     *               \"Update\"\r\n     * @param user A value that uniquely identifies user for which ACL policy needs to be removed.\r\n     * @returns A promise that is resolved once the removeByUser action has been performed.\r\n     * @example filesACLClient.removeByUser('<file-id>', '<access-action>', '<username>')\r\n                    .then(function (data) {\r\n                        // perform success action here\r\n                    },\r\n                     function (response, status, headers, config) {\r\n                         // perform error handling here\r\n                    });\r\n     **/\r\n    FilesACLClient.prototype.removeByUser = function (id, action, user, data) {\r\n        return this.apiClient.delete(this.filesACLRoute.deleteByUser(id, action, user, data));\r\n    };\r\n    /**\r\n     * Returns a promise that is resolved once the removeByRole action has been performed. This action deletes ACL policy assigned to the specified role and file resource.\r\n     * @method\r\n     * @example filesACLClient.removeByRole('<file-id>', '<access-action>', '<role-name>')\r\n                    .then(function (data) {\r\n                        // perform success action here\r\n                    },\r\n                     function (response, status, headers, config) {\r\n                         // perform error handling here\r\n                    });\r\n     **/\r\n    FilesACLClient.prototype.removeByRole = function (id, action, role, data) {\r\n        return this.apiClient.delete(this.filesACLRoute.deleteByRole(id, action, role, data));\r\n    };\r\n    return FilesACLClient;\r\n}());\r\nFilesACLClient = tslib_1.__decorate([\r\n    inversify_1.injectable(),\r\n    tslib_1.__param(0, inversify_1.inject(_1.TYPES.FilesACLRoute)),\r\n    tslib_1.__param(1, inversify_1.inject(httpApi_1.httpTYPES.ApiClient)),\r\n    tslib_1.__metadata(\"design:paramtypes\", [typeof (_a = typeof _1.FilesACLRoute !== \"undefined\" && _1.FilesACLRoute) === \"function\" && _a || Object, typeof (_b = typeof httpApi_1.ApiClient !== \"undefined\" && httpApi_1.ApiClient) === \"function\" && _b || Object])\r\n], FilesACLClient);\r\nexports.FilesACLClient = FilesACLClient;\r\nvar _a, _b;\r\n/**\r\n * @overview\r\n***Notes:**\r\n- Refer to the [REST API documentation](http://dev.baasic.com/api/reference/home) for detailed information about available Baasic REST API end-points.\r\n- All end-point objects are transformed by the associated route service.\r\n*/ \r\n\n\n\n//////////////////\n// WEBPACK FOOTER\n// ./src/modules/file/filesACLClient.ts\n// module id = 233\n// module chunks = 0","/* globals module */\r\n/**\r\n * @module filesACLRoute\r\n * @description Baasic Files ACL Route Definition provides Baasic route templates which can be expanded to Baasic REST URIs. Various services can use Baasic Files Route Definition to obtain needed routes while other routes will be obtained through HAL. By convention, all route services use the same function names as their corresponding services.\r\n */\r\n\"use strict\";\r\nObject.defineProperty(exports, \"__esModule\", { value: true });\r\nvar tslib_1 = require(\"tslib\");\r\nvar inversify_1 = require(\"inversify\");\r\nvar common_1 = require(\"../../common\");\r\n;\r\nvar contracts_1 = require(\"../../core/contracts\");\r\nvar FilesACLRoute = (function (_super) {\r\n    tslib_1.__extends(FilesACLRoute, _super);\r\n    function FilesACLRoute(appOptions) {\r\n        var _this = _super.call(this, appOptions) || this;\r\n        _this.appOptions = appOptions;\r\n        _this.getRoute = 'files/{id}/acl/{?fields}';\r\n        _this.updateRoute = 'files/{id}/acl/{?fields}';\r\n        _this.deleteByUserRoute = 'files/{id}/acl/actions/{accessAction}/users/{user}/';\r\n        _this.deleteByRoleRoute = 'files/{id}/acl/actions/{accessAction}/roles/{role}/';\r\n        return _this;\r\n    }\r\n    /**\r\n     * Parses get acl route; this URI template should be expanded with the Id of the file resource.\r\n     * @method\r\n     * @example filesACLRoute.get({id: '<file-id>'});\r\n     **/\r\n    FilesACLRoute.prototype.get = function (options) {\r\n        var params = this.utility.extend({}, options);\r\n        return _super.prototype.baseCreate.call(this, this.getRoute, params);\r\n    };\r\n    /**\r\n     * Parses update acl route; this URI template should be expanded with the Id of the file resource.\r\n     * @method\r\n     * @example filesACLRoute.update({id: '<file-id>'});\r\n     **/\r\n    FilesACLRoute.prototype.update = function (options) {\r\n        var params = this.utility.extend({}, options);\r\n        return _super.prototype.baseCreate.call(this, this.updateRoute, params);\r\n    };\r\n    /**\r\n     * Parses deleteByUser acl route which can be expanded with additional options. Supported items are:\r\n     * - `id` - File id which uniquely identifies file resource whose security privileges need to be retrieved and updated.\r\n     * - `accessAction` - Action abbreviation which identifies ACL policy assigned to the specified user and file resource.\r\n     * - `user` - A value which uniquely identifies user for which ACL policy needs to be removed.\r\n     * @method\r\n     * @param id File id which uniquely identifies file resource whose security privileges need to be retrieved and updated.\r\n     * @param action Action abbreviation which identifies ACL policy assigned to the specified user and file resource.\r\n     *               Supported Values:\r\n     *               \"Create\"\r\n     *               \"Delete\"\r\n     *               \"Read\"\r\n     *               \"Update\"\r\n     * @param user A value that uniquely identifies user for which ACL policy needs to be removed.\r\n     * @example filesACLRoute.deleteByUser({ id: '<file-id>', accessAction: '<access-action>', user: '<username>' });\r\n     **/\r\n    FilesACLRoute.prototype.deleteByUser = function (id, action, user, data) {\r\n        var params = this.modelMapper.removeParams(data);\r\n        params.id = id;\r\n        params.user = user;\r\n        params.accessAction = action;\r\n        return _super.prototype.baseCreate.call(this, this.deleteByUserRoute, params);\r\n    };\r\n    /**\r\n     * Parses deleteByUser acl route which can be expanded with additional options. Supported items are:\r\n     * - `id` - File id which uniquely identifies file resource whose security privileges need to be retrieved and updated.\r\n     * - `accessAction` - Action abbreviation which identifies ACL policy assigned to the specified role and file resource.\r\n     * - `role` - A value which uniquely identifies role for which ACL policy needs to be removed.\r\n     * @method\r\n     * @param id File id which uniquely identifies file resource whose security privileges need to be retrieved and updated.\r\n     * @param action Action abbreviation which identifies ACL policy assigned to the specified user and file resource.\r\n     *               Supported Values:\r\n     *               \"Create\"\r\n     *               \"Delete\"\r\n     *               \"Read\"\r\n     *               \"Update\"\r\n     * @param role A value that uniquely identifies role for which ACL policy needs to be removed.\r\n     * @example filesACLRoute.deleteByRole({ id: '<file-id>', accessAction: '<access-action>', role: '<role-name>' });\r\n     **/\r\n    FilesACLRoute.prototype.deleteByRole = function (id, action, role, data) {\r\n        var params = this.modelMapper.removeParams(data);\r\n        params.id = id;\r\n        params.role = role;\r\n        params.accessAction = action;\r\n        return _super.prototype.baseCreate.call(this, this.deleteByRoleRoute, params);\r\n    };\r\n    FilesACLRoute.prototype.updateParams = function (data) {\r\n        var params = this.utility.extend({}, data);\r\n        return params[this.modelMapper.modelPropertyName];\r\n    };\r\n    return FilesACLRoute;\r\n}(common_1.BaseRoute));\r\nFilesACLRoute = tslib_1.__decorate([\r\n    inversify_1.injectable(),\r\n    tslib_1.__param(0, inversify_1.inject(contracts_1.TYPES.IAppOptions)),\r\n    tslib_1.__metadata(\"design:paramtypes\", [typeof (_a = typeof contracts_1.IAppOptions !== \"undefined\" && contracts_1.IAppOptions) === \"function\" && _a || Object])\r\n], FilesACLRoute);\r\nexports.FilesACLRoute = FilesACLRoute;\r\nvar _a;\r\n/**\r\n * @overview\r\n ***Notes:**\r\n - Refer to the [REST API documentation](http://dev.baasic.com/api/reference/home) for detailed information about available Baasic REST API end-points.\r\n - [URI Template](https://github.com/Baasic/uritemplate-js) syntax enables expanding the Baasic route templates to Baasic REST URIs providing it with an object that contains URI parameters.\r\n - All end-point objects are transformed by the associated route service.\r\n */ \r\n\n\n\n//////////////////\n// WEBPACK FOOTER\n// ./src/modules/file/filesACLRoute.ts\n// module id = 234\n// module chunks = 0","/* globals module */\r\n/**\r\n * @module filesBatchClient\r\n * @description  Files Batch Client provides Baasic route templates which can be expanded to Baasic REST URIs. Various services can use Baasic Files Route Definition to obtain needed routes while other routes will be obtained through HAL. By convention, all route services use the same function names as their corresponding services.\r\n */\r\n\"use strict\";\r\nObject.defineProperty(exports, \"__esModule\", { value: true });\r\nvar tslib_1 = require(\"tslib\");\r\nvar inversify_1 = require(\"inversify\");\r\n;\r\nvar httpApi_1 = require(\"../../httpApi\");\r\nvar _1 = require(\"./\");\r\nvar FilesBatchClient = (function () {\r\n    function FilesBatchClient(filesBatchRoute, apiClient) {\r\n        this.filesBatchRoute = filesBatchRoute;\r\n        this.apiClient = apiClient;\r\n    }\r\n    Object.defineProperty(FilesBatchClient.prototype, \"routeDefinition\", {\r\n        get: function () {\r\n            return this.filesBatchRoute;\r\n        },\r\n        enumerable: true,\r\n        configurable: true\r\n    });\r\n    /**\r\n     * Returns a promise that is resolved once the update action has been performed; this action updates specified file resources.\r\n     * @method\r\n     * @param data A collection of file objects used to update specified file resources.\r\n     * @returns A promise that is resolved once the update action has been performed.\r\n     * @example filesClient.update(files)\r\n                    .then(function (data) {\r\n                        // perform success action here\r\n                    },\r\n                     function (response, status, headers, config) {\r\n                         // perform error handling here\r\n                    });\r\n     **/\r\n    FilesBatchClient.prototype.update = function (data) {\r\n        return this.apiClient.put(this.routeDefinition.update(), this.routeDefinition.updateParams(data));\r\n    };\r\n    /**\r\n     * Returns a promise that is resolved once the link action has been performed; this action links file resources from other modules into the Files module (For example: file resources from the Media Vault module can be linked directly into the Files module).\r\n     * @method\r\n     * @param data A collection of file objects that need to be inserted into the system.\r\n     * @returns A promise that is resolved once the link action has been performed.\r\n     * @example filesBatchClient.link(files)\r\n                    .then(function (data) {\r\n                        // perform success action here\r\n                    },\r\n                     function (response, status, headers, config) {\r\n                         // perform error handling here\r\n                    });\r\n     **/\r\n    FilesBatchClient.prototype.link = function (data) {\r\n        return this.apiClient.post(this.routeDefinition.link(), this.routeDefinition.createParams(data));\r\n    };\r\n    /**\r\n     * Returns a promise that is resolved once the unlink action has been performed. This action will remove file resources from the system if successfully completed. If derived resource's format is passed, such as `width` and `height` for the image type of file resource, the operation will remove just derived resource. Otherwise, specified file and all its accompanying derived resources will be removed from the system.\r\n     * @method\r\n     * @param data Collection of file delete requests which uniquely identifies file resources that need to be deleted.\r\n     * @returns A promise that is resolved once the unlink action has been performed.\r\n     * @example // Remove original file resources\r\n                    filesBatchClient.unlink([{ id: '<file-id>' }])\r\n                        .then(function (data) {\r\n                            // perform success action here\r\n                        },\r\n                         function (response, status, headers, config) {\r\n                            // perform error handling here\r\n                        });\r\n                // Remove derived file resources\r\n                    filesBatchClient.unlink([{ id: '<file-id>', fileFormat: { width: <width>, height: <height> } }])\r\n                        .then(function (data) {\r\n                            // perform success action here\r\n                        },\r\n                         function (response, status, headers, config) {\r\n                             // perform error handling here\r\n                        });\r\n     **/\r\n    FilesBatchClient.prototype.unlink = function (data) {\r\n        return this.apiClient.delete(this.filesBatchRoute.unlink(), undefined, data);\r\n    };\r\n    return FilesBatchClient;\r\n}());\r\nFilesBatchClient = tslib_1.__decorate([\r\n    inversify_1.injectable(),\r\n    tslib_1.__param(0, inversify_1.inject(_1.TYPES.FilesBatchRoute)),\r\n    tslib_1.__param(1, inversify_1.inject(httpApi_1.httpTYPES.ApiClient)),\r\n    tslib_1.__metadata(\"design:paramtypes\", [typeof (_a = typeof _1.FilesBatchRoute !== \"undefined\" && _1.FilesBatchRoute) === \"function\" && _a || Object, typeof (_b = typeof httpApi_1.ApiClient !== \"undefined\" && httpApi_1.ApiClient) === \"function\" && _b || Object])\r\n], FilesBatchClient);\r\nexports.FilesBatchClient = FilesBatchClient;\r\nvar _a, _b;\r\n/**\r\n * @overview\r\n ***Notes:**\r\n - Refer to the [REST API documentation](http://dev.baasic.com/api/reference/home) for detailed information about available Baasic REST API end-points.\r\n - All end-point objects are transformed by the associated route service.\r\n */ \r\n\n\n\n//////////////////\n// WEBPACK FOOTER\n// ./src/modules/file/filesBatchClient.ts\n// module id = 235\n// module chunks = 0","/* globals module */\r\n/**\r\n * @module filesBatchRoute\r\n * @description Baasic Files Batch Route Definition provides Baasic route templates which can be expanded to Baasic REST URIs. Various services can use Baasic Files Route Definition to obtain needed routes while other routes will be obtained through HAL. By convention, all route services use the same function names as their corresponding services.\r\n */\r\n\"use strict\";\r\nObject.defineProperty(exports, \"__esModule\", { value: true });\r\nvar tslib_1 = require(\"tslib\");\r\nvar inversify_1 = require(\"inversify\");\r\nvar common_1 = require(\"../../common\");\r\nvar contracts_1 = require(\"../../core/contracts\");\r\nvar FilesBatchRoute = (function (_super) {\r\n    tslib_1.__extends(FilesBatchRoute, _super);\r\n    function FilesBatchRoute(appOptions) {\r\n        var _this = _super.call(this, appOptions) || this;\r\n        _this.appOptions = appOptions;\r\n        _this.updateRoute = 'files/batch';\r\n        _this.linkRoute = 'files/batch/link';\r\n        _this.unlinkRoute = 'files/batch/unlink';\r\n        return _this;\r\n    }\r\n    /**\r\n     * Parses update route; this URI template does not expose any additional options.\r\n     * @method\r\n     * @example filesBatchRoute.update();\r\n     **/\r\n    FilesBatchRoute.prototype.update = function () {\r\n        return _super.prototype.baseCreate.call(this, this.updateRoute, {});\r\n    };\r\n    /**\r\n     * Parses update route; this URI template does not expose any additional options.\r\n     * @method\r\n     * @example filesBatchRoute.link();\r\n     **/\r\n    FilesBatchRoute.prototype.link = function () {\r\n        return _super.prototype.baseCreate.call(this, this.linkRoute, {});\r\n    };\r\n    /**\r\n     * Parses unlink route; this URI template does not expose any additional options.\r\n     * @method\r\n     * @example filesBatchRoute.unlink();\r\n     **/\r\n    FilesBatchRoute.prototype.unlink = function () {\r\n        return _super.prototype.baseCreate.call(this, this.unlinkRoute, {});\r\n    };\r\n    return FilesBatchRoute;\r\n}(common_1.BaseRoute));\r\nFilesBatchRoute = tslib_1.__decorate([\r\n    inversify_1.injectable(),\r\n    tslib_1.__param(0, inversify_1.inject(contracts_1.TYPES.IAppOptions)),\r\n    tslib_1.__metadata(\"design:paramtypes\", [typeof (_a = typeof contracts_1.IAppOptions !== \"undefined\" && contracts_1.IAppOptions) === \"function\" && _a || Object])\r\n], FilesBatchRoute);\r\nexports.FilesBatchRoute = FilesBatchRoute;\r\nvar _a;\r\n/**\r\n * @overview\r\n ***Notes:**\r\n - Refer to the [REST API documentation](http://dev.baasic.com/api/reference/home) for detailed information about available Baasic REST API end-points.\r\n - [URI Template](https://github.com/Baasic/uritemplate-js) syntax enables expanding the Baasic route templates to Baasic REST URIs providing it with an object that contains URI parameters.\r\n - All end-point objects are transformed by the associated route service.\r\n */ \r\n\n\n\n//////////////////\n// WEBPACK FOOTER\n// ./src/modules/file/filesBatchRoute.ts\n// module id = 236\n// module chunks = 0","/* globals module */\r\n/**\r\n * @module filesClient\r\n * @description  Files Client provides Baasic route templates which can be expanded to Baasic REST URIs. Various services can use Baasic Files Route Definition to obtain needed routes while other routes will be obtained through HAL. By convention, all route services use the same function names as their corresponding services.\r\n */\r\n\"use strict\";\r\nObject.defineProperty(exports, \"__esModule\", { value: true });\r\nvar tslib_1 = require(\"tslib\");\r\nvar inversify_1 = require(\"inversify\");\r\n;\r\nvar httpApi_1 = require(\"../../httpApi\");\r\nvar _1 = require(\"./\");\r\nvar FilesClient = (function () {\r\n    function FilesClient(filesRoute, apiClient, filesStreamsClient, filesBatchClient, filesACLClient) {\r\n        this.filesRoute = filesRoute;\r\n        this.apiClient = apiClient;\r\n        this.filesStreamsClient = filesStreamsClient;\r\n        this.filesBatchClient = filesBatchClient;\r\n        this.filesACLClient = filesACLClient;\r\n    }\r\n    Object.defineProperty(FilesClient.prototype, \"routeDefinition\", {\r\n        get: function () {\r\n            return this.filesRoute;\r\n        },\r\n        enumerable: true,\r\n        configurable: true\r\n    });\r\n    Object.defineProperty(FilesClient.prototype, \"streams\", {\r\n        get: function () {\r\n            return this.filesStreamsClient;\r\n        },\r\n        enumerable: true,\r\n        configurable: true\r\n    });\r\n    Object.defineProperty(FilesClient.prototype, \"batch\", {\r\n        get: function () {\r\n            return this.filesBatchClient;\r\n        },\r\n        enumerable: true,\r\n        configurable: true\r\n    });\r\n    Object.defineProperty(FilesClient.prototype, \"acl\", {\r\n        get: function () {\r\n            return this.filesACLClient;\r\n        },\r\n        enumerable: true,\r\n        configurable: true\r\n    });\r\n    /**\r\n     * Returns a promise that is resolved once the find action has been performed. Success response returns a list of file resources matching the given criteria.\r\n     * @method\r\n     * @param options Query resource options object.\r\n     * @returns A promise that is resolved once the find action has been performed.\r\n     * @example filesClient.find({\r\n                    pageNumber : 1,\r\n                    pageSize : 10,\r\n                    orderBy : '<field>',\r\n                    orderDirection : '<asc|desc>',\r\n                    search : '<search-phrase>'\r\n                })\r\n                .then(function (collection) {\r\n                    // perform success action here\r\n                },\r\n                 function (response, status, headers, config) {\r\n                     // perform error handling here\r\n                });\r\n     **/\r\n    FilesClient.prototype.find = function (options) {\r\n        return this.apiClient.get(this.routeDefinition.find(options));\r\n    };\r\n    /**\r\n     * Returns a promise that is resolved once the get action has been performed. Success response returns requested file resource.\r\n     * @method\r\n     * @param id File id which uniquely identifies file resource that needs to be retrieved.\r\n     * @param options Query resource options object.\r\n     * @returns A promise that is resolved once the get action has been performed.\r\n     * @example filesClient.get('<file-id>')\r\n                    .then(function (data) {\r\n                        // perform success action here\r\n                    },\r\n                     function (response, status, headers, config) {\r\n                         // perform error handling here\r\n                    });\r\n     **/\r\n    FilesClient.prototype.get = function (id, options) {\r\n        return this.apiClient.get(this.filesRoute.get(id, options));\r\n    };\r\n    /**\r\n     * Returns a promise that is resolved once the update file action has been performed; this action will update a file resource if successfully completed. This route uses HAL enabled objects to obtain routes and therefore it doesn't apply `filesRoute` route template. Here is an example of how a route can be obtained from HAL enabled objects:\r\n     * ```\r\n     * let params = modelMapper.updateParams(fileEntry);\r\n     * let uri = params['model'].links('put').href;\r\n     * ```\r\n     * @method\r\n     * @param data A file entry object used to update specific file entry resource in the system.\r\n     * @example // fileEntry is a file resource previously fetched using get action.\r\n                    fileEntry.description = '<description>';\r\n                    filesClient.update(fileEntry)\r\n                        .then(function (data) {\r\n                            // perform success action here\r\n                        },\r\n                         function (response, status, headers, config) {\r\n                             // perform error handling here\r\n                        });\r\n     **/\r\n    FilesClient.prototype.update = function (data) {\r\n        return this.apiClient.put(this.routeDefinition.update(data), this.routeDefinition.updateParams(data));\r\n    };\r\n    /**\r\n     * Returns a promise that is resolved once the unlink action has been performed. This action will remove one or many file resources from the system if successfully completed. If derived resource's format is passed, such as `width` and `height` for the image type of file resource, the operation will remove just derived resource. Otherwise, specified file and all its accompanying derived resources will be removed from the system. This route uses HAL enabled objects to obtain routes and therefore it doesn't apply baasicFilesRouteService route template. Here is an example of how a route can be obtained from HAL enabled objects:\r\n     * ```\r\n     * let params = modelMapper.removeParams(fileEntry);\r\n     * let uri = params['model'].links('unlink').href;\r\n     * ```\r\n     * @method\r\n     * @param data\r\n     * @param options\r\n     * @returns A promise that is resolved once the unlink action has been performed.\r\n     * @example // fileEntry is a file resource previously fetched using get action. The following action will remove the original file resource and all accompanying derived file resources.\r\n                    filesClient.unlink(fileEntry)\r\n                        .then(function (data) {\r\n                            // perform success action here\r\n                        },\r\n                         function (response, status, headers, config) {\r\n                             // perform error handling here\r\n                        });\r\n                // fileEntry is a file resource previously fetched using get action. The following action will remove derived file resource only.\r\n                    filesClient.unlink(fileEntry, {width: <width>, height: <height>})\r\n                        .then(function (data) {\r\n                            // perform success action here\r\n                    },\r\n                     function (response, status, headers, config) {\r\n                         // perform error handling here\r\n                    });\r\n     **/\r\n    FilesClient.prototype.unlink = function (data, options) {\r\n        return this.apiClient.delete(this.filesRoute.unlink(data, options));\r\n    };\r\n    /**\r\n     * Returns a promise that is resolved once the link action has been performed; this action links file resource from other modules into the Files module (For example: file resources from the Media Vault module can be linked directly into the Files module).\r\n     * @method\r\n     * @param data A file object that need to be inserted into the system.\r\n     * @returns A promise that is resolved once the link action has been performed.\r\n     * @example filesClient.link(fileObject)\r\n                   .then(function (data) {\r\n                       // perform success action here\r\n                   },\r\n                    function (response, status, headers, config) {\r\n                        // perform error handling here\r\n                   });\r\n    **/\r\n    FilesClient.prototype.link = function (data) {\r\n        return this.apiClient.post(this.routeDefinition.link(), this.routeDefinition.createParams(data));\r\n    };\r\n    return FilesClient;\r\n}());\r\nFilesClient = tslib_1.__decorate([\r\n    inversify_1.injectable(),\r\n    tslib_1.__param(0, inversify_1.inject(_1.TYPES.FilesRoute)),\r\n    tslib_1.__param(1, inversify_1.inject(httpApi_1.httpTYPES.ApiClient)),\r\n    tslib_1.__param(2, inversify_1.inject(_1.TYPES.FilesStreamsClient)),\r\n    tslib_1.__param(3, inversify_1.inject(_1.TYPES.FilesBatchClient)),\r\n    tslib_1.__param(4, inversify_1.inject(_1.TYPES.FilesACLClient)),\r\n    tslib_1.__metadata(\"design:paramtypes\", [typeof (_a = typeof _1.FilesRoute !== \"undefined\" && _1.FilesRoute) === \"function\" && _a || Object, typeof (_b = typeof httpApi_1.ApiClient !== \"undefined\" && httpApi_1.ApiClient) === \"function\" && _b || Object, typeof (_c = typeof _1.FilesStreamsClient !== \"undefined\" && _1.FilesStreamsClient) === \"function\" && _c || Object, typeof (_d = typeof _1.FilesBatchClient !== \"undefined\" && _1.FilesBatchClient) === \"function\" && _d || Object, typeof (_e = typeof _1.FilesACLClient !== \"undefined\" && _1.FilesACLClient) === \"function\" && _e || Object])\r\n], FilesClient);\r\nexports.FilesClient = FilesClient;\r\nvar _a, _b, _c, _d, _e;\r\n/**\r\n * @overview\r\n ***Notes:**\r\n - Refer to the [REST API documentation](http://dev.baasic.com/api/reference/home) for detailed information about available Baasic REST API end-points.\r\n - All end-point objects are transformed by the associated route service.\r\n    */ \r\n\n\n\n//////////////////\n// WEBPACK FOOTER\n// ./src/modules/file/filesClient.ts\n// module id = 237\n// module chunks = 0","/* globals module */\r\n/**\r\n * @module filesRoute\r\n * @description Baasic Files Route Definition provides Baasic route templates which can be expanded to Baasic REST URIs. Various services can use Baasic Files Route Definition to obtain needed routes while other routes will be obtained through HAL. By convention, all route services use the same function names as their corresponding services.\r\n */\r\n\"use strict\";\r\nObject.defineProperty(exports, \"__esModule\", { value: true });\r\nvar tslib_1 = require(\"tslib\");\r\nvar inversify_1 = require(\"inversify\");\r\nvar common_1 = require(\"../../common\");\r\n;\r\nvar _1 = require(\"./\");\r\nvar contracts_1 = require(\"../../core/contracts\");\r\nvar FilesRoute = (function (_super) {\r\n    tslib_1.__extends(FilesRoute, _super);\r\n    function FilesRoute(appOptions, filesStreamsRoute) {\r\n        var _this = _super.call(this, appOptions) || this;\r\n        _this.appOptions = appOptions;\r\n        _this.filesStreamsRoute = filesStreamsRoute;\r\n        _this.findRoute = 'files/{?searchQuery,page,rpp,sort,embed,fields}';\r\n        _this.getRoute = 'files/{id}/{?embed,fields}';\r\n        _this.updateRoute = 'files/{id}';\r\n        _this.unlinkRoute = 'files/unlink/{id}/{?height,width}';\r\n        _this.linkRoute = 'files/link';\r\n        return _this;\r\n    }\r\n    Object.defineProperty(FilesRoute.prototype, \"streams\", {\r\n        get: function () {\r\n            return this.filesStreamsRoute;\r\n        },\r\n        enumerable: true,\r\n        configurable: true\r\n    });\r\n    /**\r\n     * Parses find route which can be expanded with additional options. Supported items are:\r\n     * - `searchQuery` - A string referencing file properties using the phrase search.\r\n     * - `page` - A value used to set the page number, i.e. to retrieve certain file subset from the storage.\r\n     * - `rpp` - A value used to limit the size of result set per page.\r\n     * - `sort` - A string used to set the file property to sort the result collection by.\r\n     * - `embed` - Comma separated list of resources to be contained within the current representation.\r\n     * @method\r\n     * @param options Query resource options object.\r\n     * @example filesRoute.find({searchQuery: '<search-phrase>'});\r\n     **/\r\n    FilesRoute.prototype.find = function (options) {\r\n        return _super.prototype.baseFind.call(this, this.findRoute, options);\r\n    };\r\n    /**\r\n     * Parses get route; this route should be expanded with the Id of the file resource.\r\n     * @method\r\n     * @param id File id which uniquely identifies file resource that needs to be retrieved.\r\n     * @param options Query resource options object.\r\n     * @example filesRoute.get({id: '<file-id>'});\r\n     **/\r\n    FilesRoute.prototype.get = function (id, options) {\r\n        return _super.prototype.baseGet.call(this, this.getRoute, id, options);\r\n    };\r\n    /**\r\n     * Parses update route; this route should be expanded with the Id of the file resource.\r\n     * @method\r\n     * @param data A file entry object used to update specific file entry resource in the system.\r\n     * @example filesRoute.get({id: '<file-id>'});\r\n     **/\r\n    FilesRoute.prototype.update = function (data) {\r\n        return _super.prototype.baseUpdate.call(this, this.updateRoute, data);\r\n    };\r\n    /**\r\n     * Parses unlink route; this route should be expanded with the Id of the file resource.\r\n     * @method\r\n     * @param data A file entry object used to update specific file entry resource in the system.\r\n     * @example filesRoute.unlink({id: '<file-id>'});\r\n     **/\r\n    FilesRoute.prototype.unlink = function (data, options) {\r\n        return _super.prototype.baseDelete.call(this, this.unlinkRoute, data, options, 'unlink');\r\n    };\r\n    /**\r\n     * Parses link route; this URI template does not expose any additional options.\r\n     * @method\r\n     * @example filesRoute.link();\r\n     **/\r\n    FilesRoute.prototype.link = function () {\r\n        return _super.prototype.baseCreate.call(this, this.linkRoute, {});\r\n    };\r\n    return FilesRoute;\r\n}(common_1.BaseRoute));\r\nFilesRoute = tslib_1.__decorate([\r\n    inversify_1.injectable(),\r\n    tslib_1.__param(0, inversify_1.inject(contracts_1.TYPES.IAppOptions)),\r\n    tslib_1.__param(1, inversify_1.inject(_1.TYPES.FilesStreamsRoute)),\r\n    tslib_1.__metadata(\"design:paramtypes\", [typeof (_a = typeof contracts_1.IAppOptions !== \"undefined\" && contracts_1.IAppOptions) === \"function\" && _a || Object, typeof (_b = typeof _1.FilesStreamsRoute !== \"undefined\" && _1.FilesStreamsRoute) === \"function\" && _b || Object])\r\n], FilesRoute);\r\nexports.FilesRoute = FilesRoute;\r\nvar _a, _b;\r\n/**\r\n * @overview\r\n***Notes:**\r\n- Refer to the [REST API documentation](http://dev.baasic.com/api/reference/home) for detailed information about available Baasic REST API end-points.\r\n- [URI Template](https://github.com/Baasic/uritemplate-js) syntax enables expanding the Baasic route templates to Baasic REST URIs providing it with an object that contains URI parameters.\r\n- All end-point objects are transformed by the associated route service.\r\n*/ \r\n\n\n\n//////////////////\n// WEBPACK FOOTER\n// ./src/modules/file/filesRoute.ts\n// module id = 238\n// module chunks = 0","/* globals module */\r\n/**\r\n * @module filesStreamsClient\r\n * @description  Files Streams Client provides Baasic route templates which can be expanded to Baasic REST URIs. Various services can use Baasic Files Streams Route Definition to obtain needed routes while other routes will be obtained through HAL. By convention, all route services use the same function names as their corresponding services.\r\n */\r\n\"use strict\";\r\nObject.defineProperty(exports, \"__esModule\", { value: true });\r\nvar tslib_1 = require(\"tslib\");\r\nvar inversify_1 = require(\"inversify\");\r\n;\r\nvar httpApi_1 = require(\"../../httpApi\");\r\nvar _1 = require(\"./\");\r\nvar FilesStreamsClient = (function () {\r\n    function FilesStreamsClient(filesStreamsRoute, apiClient) {\r\n        this.filesStreamsRoute = filesStreamsRoute;\r\n        this.apiClient = apiClient;\r\n    }\r\n    Object.defineProperty(FilesStreamsClient.prototype, \"routeDefinition\", {\r\n        get: function () {\r\n            return this.filesStreamsRoute;\r\n        },\r\n        enumerable: true,\r\n        configurable: true\r\n    });\r\n    /**\r\n     * Returns a promise that is resolved once the get action has been performed. Success response returns the file stream if successfully completed. If derived resource's format is passed, such as `width` and `height` for the image type of file resource, the operation will return a stream of the derived resource. Otherwise, stream of the original file resource will be retrieved.\r\n     * @method\r\n     * @param id File id of the original file resource used to identify stream that needs to be retrieved from the system.\r\n     * @returns A promise that is resolved once the get action has been performed.\r\n     * @example // Request the original file stream\r\n                        filesStreamsClient.get({id: '<path>'})\r\n                            .then(function (data) {\r\n                                // perform success action here\r\n                            },\r\n                             function (response, status, headers, config) {\r\n                                 // perform error handling here\r\n                            });\r\n                // Request derived file stream\r\n                    filesStreamsClient.get({id: '<path>', width: <width>, height: <height>})\r\n                        .then(function (data) {\r\n                            // perform success action here\r\n                        },\r\n                         function (response, status, headers, config) {\r\n                            // perform error handling here\r\n                        });\r\n     **/\r\n    FilesStreamsClient.prototype.get = function (data) {\r\n        return this.apiClient.get(this.routeDefinition.get(data));\r\n    };\r\n    /**\r\n     * Returns a promise that is resolved once the get action has been performed. Success response returns the file stream as a blob. If derived resource's format is passed, such as `width` and `height` for the image type of file resource, the operation will return a blob of the derived file resource. Otherwise, blob of the original file resource will be retrieved. For more information on Blob objects please see [Blob Documentation](https://developer.mozilla.org/en-US/docs/Web/API/Blob).\r\n     * @method\r\n     * @example // Request the original blob\r\n                    filesStreamsClient.getBlob('<path>')\r\n                        .then(function (data) {\r\n                            // perform success action here\r\n                        },\r\n                         function (response, status, headers, config) {\r\n                            // perform error handling here\r\n                        });\r\n                // Request derived blob\r\n                    filesStreamsClient.getBlob({id: '<path>', width: <width>, height: <height>})\r\n                        .then(function (data) {\r\n                            // perform success action here\r\n                        },\r\n                         function (response, status, headers, config) {\r\n                             // perform error handling here\r\n                        });\r\n     **/\r\n    FilesStreamsClient.prototype.getBlob = function (data) {\r\n        return this.apiClient.get(this.filesStreamsRoute.get(data), { 'Accept': 'application/octet-stream' });\r\n    };\r\n    /**\r\n     * Returns a promise that is resolved once the update file stream action has been performed; this action will replace the existing stream with a new one. Alternatively, if a derived stream is being updated it will either create a new derived stream or replace the existing one. In order to update a derived stream, format needs to be passed (For example: `width` and `height` for the image type of file stream data type).\r\n     * @method\r\n     * @example // Update original file stream\r\n                    filesStreamsClient.update('<path>', <file-stream>)\r\n                        .then(function (data) {\r\n                            // perform success action here\r\n                        },\r\n                         function (response, status, headers, config) {\r\n                             // perform error handling here\r\n                        });\r\n                // Update derived file stream\r\n                    filesStreamsClient.update({id: '<path>', width: <width>, height: <height>}, <file-stream>)\r\n                        .then(function (data) {\r\n                            // perform success action here\r\n                        },\r\n                         function (response, status, headers, config) {\r\n                             // perform error handling here\r\n                        });\r\n     **/\r\n    FilesStreamsClient.prototype.update = function (data, stream) {\r\n        var formData = new FormData();\r\n        formData.append('file', stream);\r\n        return this.apiClient.put(this.filesStreamsRoute.update(data), data, { 'Content-Type': undefined });\r\n    };\r\n    /**\r\n     * Returns a promise that is resolved once the create file stream action has been performed; this action will upload the specified blob. For more information on Blob objects please see [Blob Documentation](https://developer.mozilla.org/en-US/docs/Web/API/Blob).\r\n     * @method\r\n     * @example filesStreamsClient.create('<path>', <blob>)\r\n                   .then(function (data) {\r\n                       // perform success action here\r\n                   },\r\n                    function (response, status, headers, config) {\r\n                        // perform error handling here\r\n                   });\r\n    **/\r\n    FilesStreamsClient.prototype.create = function (data, stream) {\r\n        var formData = new FormData();\r\n        formData.append('file', stream);\r\n        return this.apiClient.post(this.filesStreamsRoute.create(data), formData, { 'Content-Type': undefined });\r\n    };\r\n    return FilesStreamsClient;\r\n}());\r\nFilesStreamsClient = tslib_1.__decorate([\r\n    inversify_1.injectable(),\r\n    tslib_1.__param(0, inversify_1.inject(_1.TYPES.FilesStreamsRoute)),\r\n    tslib_1.__param(1, inversify_1.inject(httpApi_1.httpTYPES.ApiClient)),\r\n    tslib_1.__metadata(\"design:paramtypes\", [typeof (_a = typeof _1.FilesStreamsRoute !== \"undefined\" && _1.FilesStreamsRoute) === \"function\" && _a || Object, typeof (_b = typeof httpApi_1.ApiClient !== \"undefined\" && httpApi_1.ApiClient) === \"function\" && _b || Object])\r\n], FilesStreamsClient);\r\nexports.FilesStreamsClient = FilesStreamsClient;\r\nvar _a, _b;\r\n/**\r\n * @overview\r\n ***Notes:**\r\n - Refer to the [REST API documentation](http://dev.baasic.com/api/reference/home) for detailed information about available Baasic REST API end-points.\r\n - All end-point objects are transformed by the associated route service.\r\n */ \r\n\n\n\n//////////////////\n// WEBPACK FOOTER\n// ./src/modules/file/filesStreamsClient.ts\n// module id = 239\n// module chunks = 0","/* globals module */\r\n/**\r\n * @module filesStreamsRoute\r\n * @description Baasic Files Streams Route Definition provides Baasic route templates which can be expanded to Baasic REST URIs. Various services can use Baasic Files Route Definition to obtain needed routes while other routes will be obtained through HAL. By convention, all route services use the same function names as their corresponding services.\r\n */\r\n\"use strict\";\r\nObject.defineProperty(exports, \"__esModule\", { value: true });\r\nvar tslib_1 = require(\"tslib\");\r\nvar inversify_1 = require(\"inversify\");\r\nvar common_1 = require(\"../../common\");\r\nvar contracts_1 = require(\"../../core/contracts\");\r\nvar FilesStreamsRoute = (function (_super) {\r\n    tslib_1.__extends(FilesStreamsRoute, _super);\r\n    function FilesStreamsRoute(appOptions) {\r\n        var _this = _super.call(this, appOptions) || this;\r\n        _this.appOptions = appOptions;\r\n        _this.getRoute = 'file-streams/{id}/{?width,height}';\r\n        _this.updateRoute = 'file-streams/{id}/{?width,height}';\r\n        _this.createRoute = 'file-streams/{path}';\r\n        return _this;\r\n    }\r\n    /**\r\n     * Parses get route; this route should be expanded with id or path of desired file stream. Additional supported items are:\r\n     * - `width` - width of desired derived image.\r\n     * - `height` - height of desired derived image.\r\n     * @method\r\n     * @example filesStreamsRoute.get({id: '<path>'});\r\n     **/\r\n    FilesStreamsRoute.prototype.get = function (data) {\r\n        if (!this.utility.isObject(data)) {\r\n            data = {\r\n                id: data\r\n            };\r\n        }\r\n        return _super.prototype.baseCreate.call(this, this.getRoute, data);\r\n    };\r\n    /**\r\n     * Parses update route; this route should be expanded with the id or path of the previously saved resource. Additional supported items are:\r\n     * - `width` - width of derived image to update.\r\n     * - `height` - height of derived image to update.\r\n     * @method\r\n     * @example filesStreamsRoute.update({id: '<path>'});\r\n     **/\r\n    FilesStreamsRoute.prototype.update = function (data) {\r\n        if (!this.utility.isObject(data)) {\r\n            data = {\r\n                id: data\r\n            };\r\n        }\r\n        return _super.prototype.baseCreate.call(this, this.updateRoute, data);\r\n    };\r\n    /**\r\n     * Parses create route; this route should be expanded with the path which indicates where the stream will be saved.\r\n     * @method\r\n     * @example filesStreamsRoute.create({path: '<path>'});\r\n     **/\r\n    FilesStreamsRoute.prototype.create = function (data) {\r\n        if (!this.utility.isObject(data)) {\r\n            data = {\r\n                path: data\r\n            };\r\n        }\r\n        return _super.prototype.baseCreate.call(this, this.createRoute, data);\r\n    };\r\n    return FilesStreamsRoute;\r\n}(common_1.BaseRoute));\r\nFilesStreamsRoute = tslib_1.__decorate([\r\n    inversify_1.injectable(),\r\n    tslib_1.__param(0, inversify_1.inject(contracts_1.TYPES.IAppOptions)),\r\n    tslib_1.__metadata(\"design:paramtypes\", [typeof (_a = typeof contracts_1.IAppOptions !== \"undefined\" && contracts_1.IAppOptions) === \"function\" && _a || Object])\r\n], FilesStreamsRoute);\r\nexports.FilesStreamsRoute = FilesStreamsRoute;\r\nvar _a;\r\n/**\r\n * @overview\r\n ***Notes:**\r\n - Refer to the [REST API documentation](http://dev.baasic.com/api/reference/home) for detailed information about available Baasic REST API end-points.\r\n - [URI Template](https://github.com/Baasic/uritemplate-js) syntax enables expanding the Baasic route templates to Baasic REST URIs providing it with an object that contains URI parameters.\r\n - All end-point objects are transformed by the associated route service.\r\n */ \r\n\n\n\n//////////////////\n// WEBPACK FOOTER\n// ./src/modules/file/filesStreamsRoute.ts\n// module id = 240\n// module chunks = 0","\"use strict\";\r\nObject.defineProperty(exports, \"__esModule\", { value: true });\r\nvar ApplicationSettings = require(\"./applicationSettings\");\r\nexports.ApplicationSettings = ApplicationSettings;\r\nvar Membership = require(\"./membership\");\r\nexports.Membership = Membership;\r\nvar UserProfile = require(\"./userProfile\");\r\nexports.UserProfile = UserProfile;\r\nvar KeyValue = require(\"./keyValue\");\r\nexports.KeyValue = KeyValue;\r\nvar ValueSet = require(\"./valueSet\");\r\nexports.ValueSet = ValueSet;\r\nvar Article = require(\"./article\");\r\nexports.Article = Article;\r\nvar DynamicResource = require(\"./dynamicResource\");\r\nexports.DynamicResource = DynamicResource;\r\nvar MediaVault = require(\"./mediaVault\");\r\nexports.MediaVault = MediaVault;\r\nvar Files = require(\"./file\");\r\nexports.Files = Files;\r\nvar Templating = require(\"./templating\");\r\nexports.Templating = Templating;\r\nvar Metering = require(\"./metering\");\r\nexports.Metering = Metering;\r\nvar Notifications = require(\"./notifications\");\r\nexports.Notifications = Notifications;\r\nvar Commerce = require(\"./commerce\");\r\nexports.Commerce = Commerce;\r\n\n\n\n//////////////////\n// WEBPACK FOOTER\n// ./src/modules/index.ts\n// module id = 241\n// module chunks = 0","\"use strict\";\r\nObject.defineProperty(exports, \"__esModule\", { value: true });\r\nvar inversify_1 = require(\"inversify\");\r\nvar _1 = require(\"./\");\r\nvar TYPES = {\r\n    KeyValueClient: Symbol(\"KeyValueClient\"),\r\n    KeyValueRoute: Symbol(\"KeyValueRoute\")\r\n};\r\nexports.TYPES = TYPES;\r\nvar diModule = new inversify_1.ContainerModule(function (bind) {\r\n    bind(TYPES.KeyValueRoute).to(_1.KeyValueRoute);\r\n    bind(TYPES.KeyValueClient).to(_1.KeyValueClient);\r\n});\r\nexports.diModule = diModule;\r\n\n\n\n//////////////////\n// WEBPACK FOOTER\n// ./src/modules/keyValue/diModule.ts\n// module id = 242\n// module chunks = 0","/**\r\n * @module keyValueClient\r\n * @description  Key Value Client provides an easy way to consume  Key Value REST API end-points. In order to obtain needed routes `keyValueClient` uses `baasicKeyValueRouteClient`.\r\n */\r\n\"use strict\";\r\nObject.defineProperty(exports, \"__esModule\", { value: true });\r\nvar tslib_1 = require(\"tslib\");\r\nvar inversify_1 = require(\"inversify\");\r\n;\r\nvar httpApi_1 = require(\"../../httpApi\");\r\nvar _1 = require(\"./\");\r\nvar KeyValueClient = (function () {\r\n    function KeyValueClient(keyValueRoute, apiClient) {\r\n        this.keyValueRoute = keyValueRoute;\r\n        this.apiClient = apiClient;\r\n    }\r\n    Object.defineProperty(KeyValueClient.prototype, \"routeDefinition\", {\r\n        /**\r\n         * Provides direct access to `keyValueRoute`.\r\n         * @method\r\n         * @example keyValueClient.routeDefinition.get();\r\n         **/\r\n        get: function () {\r\n            return this.keyValueRoute;\r\n        },\r\n        enumerable: true,\r\n        configurable: true\r\n    });\r\n    /**\r\n     * Returns a promise that is resolved once the find action has been performed. Success response returns a list of key value resources matching the given criteria.\r\n     * @param options query resource options object\r\n     * @returns A promise that is resolved once the find action has beend performed.\r\n     * @method\r\n     * @example keyValueClient.find({\r\n                 pageNumber: 1,\r\n                 pageSize: 10,\r\n                 orderBy: '<field>',\r\n                 orderDirection: '<asc|desc>',\r\n                 search: '<search-phrase>'\r\n                })\r\n                .then(function (collection) {\r\n                    // perform success action here\r\n                },\r\n                 function (response, status, headers, config) {\r\n                    // perform error handling here\r\n                });\r\n     **/\r\n    KeyValueClient.prototype.find = function (options) {\r\n        return this.apiClient.get(this.routeDefinition.find(options));\r\n    };\r\n    /**\r\n     * Returns a promise that is resolved once the get action has been performed. Success response returns the specified key value resource.\r\n     * @param id unique identifer of key value resources\r\n     * @param options query resource options object\r\n     * @returns A promise that is resolved once the get action has beend performed.\r\n     * @method\r\n     * @example keyValueClient.get('<key-value-id>')\r\n                    .then(function (data) {\r\n                        // perform success action here\r\n                    },\r\n                     function (response, status, headers, config) {\r\n                        // perform error handling here\r\n                    });\r\n     **/\r\n    KeyValueClient.prototype.get = function (id, options) {\r\n        return this.apiClient.get(this.keyValueRoute.get(id, options));\r\n    };\r\n    /**\r\n     * Returns a promise that is resolved once the create key value action has been performed; this action creates a new key value resource.\r\n     * @param data A key value object that needs to be inserted into the system.\r\n     * @returns A promise that is resolved once the create key value action has beend performed.\r\n     * @method\r\n     * @example keyValueClient.create({key: '<key>', value: '<value>', })\r\n                    .then(function (data) {\r\n                        // perform success action here\r\n                    },\r\n                     function (response, status, headers, config) {\r\n                        // perform error handling here\r\n                    });\r\n     */\r\n    KeyValueClient.prototype.create = function (data) {\r\n        return this.apiClient.post(this.routeDefinition.create(), this.routeDefinition.createParams(data));\r\n    };\r\n    /**\r\n     * Returns a promise that is resolved once the update key value action has been performed; this action updates a key value resource. This route uses HAL enabled objects to obtain routes and therefore it doesn't apply `baasicKeyValueRouteService` route template. Here is an example of how a route can be obtained from HAL enabled objects:\r\n     * ```\r\n     * let params = modelMapper.removeParams(keyValue);\r\n     * let uri = params['model'].links('put').href;\r\n     * ```\r\n     * @param data A key value object used to update specified key value resource.\r\n     * @return A promise that is resolved once the update key value action has been performed.\r\n     * @method\r\n     * @example // keyValue is a resource previously fetched using get action.\r\n                   keyValue.value = '<new-value>';\r\n                   keyValueClient.update(keyValue)\r\n                   .then(function (data) {\r\n                       // perform success action here\r\n                    },\r\n                     function (response, status, headers, config) {\r\n                        // perform error handling here\r\n                    });\r\n     **/\r\n    KeyValueClient.prototype.update = function (data) {\r\n        return this.apiClient.put(this.routeDefinition.update(data), this.routeDefinition.updateParams(data));\r\n    };\r\n    /**\r\n     * Returns a promise that is resolved once the remove action has been performed. This action will remove a key value resource from the system if successfully completed. This route uses HAL enabled objects to obtain routes and therefore it doesn't apply `baasicKeyValueRouteService` route template. Here is an example of how a route can be obtained from HAL enabled objects:\r\n     * ```\r\n     * let params = modelMapper.removeParams(keyValue);\r\n     * let uri = params['model'].links('delete').href;\r\n     * ```\r\n     * @param data A key value object used to delete specified key value resource.\r\n     * @returns A promise that is resolved once the remove action has been performed.\r\n     * @method\r\n     * @example // keyValue is a resource previously fetched using get action.\r\n                    keyValueClient.remove(keyValue)\r\n                    .then(function (data) {\r\n                        // perform success action here\r\n                    },\r\n                     function (response, status, headers, config) {\r\n                        // perform error handling here\r\n                    });\r\n     **/\r\n    KeyValueClient.prototype.remove = function (data) {\r\n        return this.apiClient.delete(this.routeDefinition.delete(data), this.routeDefinition.deleteParams(data));\r\n    };\r\n    return KeyValueClient;\r\n}());\r\nKeyValueClient = tslib_1.__decorate([\r\n    inversify_1.injectable(),\r\n    tslib_1.__param(0, inversify_1.inject(_1.TYPES.KeyValueRoute)),\r\n    tslib_1.__param(1, inversify_1.inject(httpApi_1.httpTYPES.ApiClient)),\r\n    tslib_1.__metadata(\"design:paramtypes\", [typeof (_a = typeof _1.KeyValueRoute !== \"undefined\" && _1.KeyValueRoute) === \"function\" && _a || Object, typeof (_b = typeof httpApi_1.ApiClient !== \"undefined\" && httpApi_1.ApiClient) === \"function\" && _b || Object])\r\n], KeyValueClient);\r\nexports.KeyValueClient = KeyValueClient;\r\nvar _a, _b;\r\n/**\r\n * @copyright (c) 2017 Mono Ltd\r\n * @license MIT\r\n * @author Mono Ltd\r\n * @overview\r\n ***Notes:**\r\n - Refer to the [Baasic REST API](http://dev.baasic.com/api/reference/home) for detailed information about available Baasic REST API end-points.\r\n - All end-point objects are transformed by the associated route service.\r\n */ \r\n\n\n\n//////////////////\n// WEBPACK FOOTER\n// ./src/modules/keyValue/keyValueClient.ts\n// module id = 243\n// module chunks = 0","/* globals module */\r\n/**\r\n * @module keyValueRoute\r\n * @description Baasic Key Value Route Definition provides Baasic route templates which can be expanded to Baasic REST URIs. Various services can use Baasic Key Value Route Service to obtain needed routes while other routes will be obtained through HAL. By convention, all route services  use the same function names as their corresponding services.\r\n */\r\n\"use strict\";\r\nObject.defineProperty(exports, \"__esModule\", { value: true });\r\nvar tslib_1 = require(\"tslib\");\r\nvar inversify_1 = require(\"inversify\");\r\nvar common_1 = require(\"../../common\");\r\n;\r\nvar contracts_1 = require(\"../../core/contracts\");\r\nvar KeyValueRoute = (function (_super) {\r\n    tslib_1.__extends(KeyValueRoute, _super);\r\n    function KeyValueRoute(appOptions) {\r\n        var _this = _super.call(this, appOptions) || this;\r\n        _this.appOptions = appOptions;\r\n        _this.findRoute = 'key-values/{?searchQuery,page,rpp,sort,embed,fields}';\r\n        _this.getRoute = 'key-values/{id}/{?embed,fields}';\r\n        _this.createRoute = 'key-values';\r\n        _this.updateRoute = 'key-values/{id}';\r\n        _this.deleteRoute = 'key-values/{id}';\r\n        return _this;\r\n    }\r\n    /**\r\n     * Parses find key value route which can be expanded with additional options. Supported items are:\r\n     * - `searchQuery` - A string value used to identify key value resources using the phrase search.\r\n     * - `page` - A value used to set the page number, i.e. to retrieve certain key value subset from the storage.\r\n     * - `rpp` - A value used to limit the size of result set per page.\r\n     * - `sort` - A string used to set the key value property to sort the result collection by.\r\n     * - `embed` - Comma separated list of resources to be contained within the current representation.\r\n     * @method\r\n     * @param options Query resource options object.\r\n     * @example keyValueRoute.find(options);\r\n     **/\r\n    KeyValueRoute.prototype.find = function (options) {\r\n        return _super.prototype.baseFind.call(this, this.findRoute, options);\r\n    };\r\n    /**\r\n     * Parses get key value route which must be expanded with the Id of the previously created key value resource in the system.\r\n     * @method\r\n     * @param id Key value resource unique identifier.\r\n     * @param options Query resource options object.\r\n     * @example keyValueRoute.get();\r\n     **/\r\n    KeyValueRoute.prototype.get = function (id, options) {\r\n        return _super.prototype.baseGet.call(this, this.getRoute, id, options);\r\n    };\r\n    /**\r\n     * Parses create key value route; this URI template does not expose any additional options.\r\n     * @method\r\n     * @example keyValueRoute.create();\r\n     **/\r\n    KeyValueRoute.prototype.create = function () {\r\n        return _super.prototype.baseCreate.call(this, this.createRoute, {});\r\n    };\r\n    /**\r\n     * Parses update key value route.\r\n     * @method\r\n     * @param data Key Value object used to create update route.\r\n     * @example keyValueRoute.update(data);\r\n     */\r\n    KeyValueRoute.prototype.update = function (data) {\r\n        return _super.prototype.baseUpdate.call(this, this.updateRoute, data);\r\n    };\r\n    /**\r\n     * Parses delete key value route.\r\n     * @method\r\n     * @param data Key Value object used to create delete route.\r\n     * @example keyValueRoute.delete(data);\r\n     */\r\n    KeyValueRoute.prototype.delete = function (data) {\r\n        return _super.prototype.baseDelete.call(this, this.deleteRoute, data);\r\n    };\r\n    return KeyValueRoute;\r\n}(common_1.BaseRoute));\r\nKeyValueRoute = tslib_1.__decorate([\r\n    inversify_1.injectable(),\r\n    tslib_1.__param(0, inversify_1.inject(contracts_1.TYPES.IAppOptions)),\r\n    tslib_1.__metadata(\"design:paramtypes\", [typeof (_a = typeof contracts_1.IAppOptions !== \"undefined\" && contracts_1.IAppOptions) === \"function\" && _a || Object])\r\n], KeyValueRoute);\r\nexports.KeyValueRoute = KeyValueRoute;\r\nvar _a;\r\n/**\r\n * @copyright (c) 2017 Mono Ltd\r\n * @license MIT\r\n * @author Mono Ltd\r\n * @overview\r\n ***Notes:**\r\n - Refer to the [Baasic REST API](http://dev.baasic.com/api/reference/home) for detailed information about available Baasic REST API end-points.\r\n - [URI Template](https://github.com/Baasic/uritemplate-js) syntax enables expanding the Baasic route templates to Baasic REST URIs providing it with an object that contains URI parameters.\r\n - All end-point objects are transformed by the associated route service.\r\n */ \r\n\n\n\n//////////////////\n// WEBPACK FOOTER\n// ./src/modules/keyValue/keyValueRoute.ts\n// module id = 244\n// module chunks = 0","/* globals module */\r\n/**\r\n * @module mediaVaultBatchClient\r\n * @description  Media Vault Batch Client provides Baasic route templates which can be expanded to Baasic REST URIs. Various services can use Baasic Media Vault Batch Route Definition to obtain needed routes while other routes will be obtained through HAL. By convention, all route services use the same function names as their corresponding services.\r\n */\r\n\"use strict\";\r\nObject.defineProperty(exports, \"__esModule\", { value: true });\r\nvar tslib_1 = require(\"tslib\");\r\nvar inversify_1 = require(\"inversify\");\r\n;\r\nvar httpApi_1 = require(\"../../httpApi\");\r\nvar _1 = require(\"./\");\r\nvar MediaVaultBatchClient = (function () {\r\n    function MediaVaultBatchClient(mediaVaultBatchRoute, apiClient) {\r\n        this.mediaVaultBatchRoute = mediaVaultBatchRoute;\r\n        this.apiClient = apiClient;\r\n    }\r\n    Object.defineProperty(MediaVaultBatchClient.prototype, \"routeDefinition\", {\r\n        get: function () {\r\n            return this.mediaVaultBatchRoute;\r\n        },\r\n        enumerable: true,\r\n        configurable: true\r\n    });\r\n    /**\r\n     * Returns a promise that is resolved once the update action has been performed; this action updates specified media vault resources.\r\n     * @method\r\n     * @param data A collection of media vault objects used to update specified media vault resources.\r\n     * @returns A promise that is resolved once the update action has been performed.\r\n     * @example mediaVaultStreamsClient.update(files)\r\n                   .then(function (data) {\r\n                       // perform success action here\r\n                   },\r\n                    function (response, status, headers, config) {\r\n                        // perform error handling here\r\n                   });\r\n    **/\r\n    MediaVaultBatchClient.prototype.update = function (data) {\r\n        return this.apiClient.put(this.routeDefinition.update(), this.routeDefinition.updateParams(data));\r\n    };\r\n    /**\r\n     * Returns a promise that is resolved once the remove action has been performed. This action will remove media vault resources from the system if successfully completed. If derived resource's format is passed, such as `width` and `height` for the image type of media vault resource, the operation will remove just derived resource. Otherwise, specified media vault and all its accompanying derived resources will be removed from the system.\r\n     * @method\r\n     * @param data Collection of media vault delete requests which uniquely identifies media vault resources that need to be deleted.\r\n     * @example // Remove original media vault resources\r\n                        mediaVaultBatchClient.remove([{ id: '<media-vault-id>' }])\r\n                            .then(function (data) {\r\n                                // perform success action here\r\n                            },\r\n                             function (response, status, headers, config) {\r\n                                 // perform error handling here\r\n                            });\r\n                // Remove derived media vault resources\r\n                        mediaVaultBatchClient.remove([{ id: '<media-vault-id>', fileFormat: { width: <width>, height: <height> } }])\r\n                            .then(function (data) {\r\n                                // perform success action here\r\n                            },\r\n                             function (response, status, headers, config) {\r\n                                 // perform error handling here\r\n                            });\r\n     **/\r\n    MediaVaultBatchClient.prototype.remove = function (data) {\r\n        return this.apiClient.delete(this.mediaVaultBatchRoute.delete(), undefined, data);\r\n    };\r\n    return MediaVaultBatchClient;\r\n}());\r\nMediaVaultBatchClient = tslib_1.__decorate([\r\n    inversify_1.injectable(),\r\n    tslib_1.__param(0, inversify_1.inject(_1.TYPES.MediaVaultBatchRoute)),\r\n    tslib_1.__param(1, inversify_1.inject(httpApi_1.httpTYPES.ApiClient)),\r\n    tslib_1.__metadata(\"design:paramtypes\", [typeof (_a = typeof _1.MediaVaultBatchRoute !== \"undefined\" && _1.MediaVaultBatchRoute) === \"function\" && _a || Object, typeof (_b = typeof httpApi_1.ApiClient !== \"undefined\" && httpApi_1.ApiClient) === \"function\" && _b || Object])\r\n], MediaVaultBatchClient);\r\nexports.MediaVaultBatchClient = MediaVaultBatchClient;\r\nvar _a, _b;\r\n/**\r\n * @overview\r\n ***Notes:**\r\n - Refer to the [REST API documentation](http://dev.baasic.com/api/reference/home) for detailed information about available Baasic REST API end-points.\r\n - All end-point objects are transformed by the associated route service.\r\n */ \r\n\n\n\n//////////////////\n// WEBPACK FOOTER\n// ./src/modules/mediaVault/MediaVaultBatchClient.ts\n// module id = 245\n// module chunks = 0","/* globals module */\r\n/**\r\n * @module mediaVaultBatchRoute\r\n * @description Baasic Media Vault Batch Route Definition provides Baasic route templates which can be expanded to Baasic REST URIs. Various services can use Baasic Media Vault Batch Route Definition to obtain needed routes while other routes will be obtained through HAL. By convention, all route services use the same function names as their corresponding services.\r\n */\r\n\"use strict\";\r\nObject.defineProperty(exports, \"__esModule\", { value: true });\r\nvar tslib_1 = require(\"tslib\");\r\nvar inversify_1 = require(\"inversify\");\r\nvar common_1 = require(\"../../common\");\r\nvar contracts_1 = require(\"../../core/contracts\");\r\nvar MediaVaultBatchRoute = (function (_super) {\r\n    tslib_1.__extends(MediaVaultBatchRoute, _super);\r\n    function MediaVaultBatchRoute(appOptions) {\r\n        var _this = _super.call(this, appOptions) || this;\r\n        _this.appOptions = appOptions;\r\n        _this.updateRoute = 'media-vaults/batch';\r\n        _this.deleteRoute = 'media-vaults/batch';\r\n        return _this;\r\n    }\r\n    /**\r\n     * Parses update route; this URI template does not expose any additional options.\r\n     * @method\r\n     * @example mediaVaultBatchRoute.update();\r\n     **/\r\n    MediaVaultBatchRoute.prototype.update = function () {\r\n        return _super.prototype.baseUpdate.call(this, this.updateRoute, {});\r\n    };\r\n    /**\r\n     * Parses remove route; this URI template does not expose any additional options.\r\n     * @method\r\n     * @example mediaVaultBatchRoute.delete();\r\n     **/\r\n    MediaVaultBatchRoute.prototype.delete = function () {\r\n        return _super.prototype.baseDelete.call(this, this.deleteRoute, {});\r\n    };\r\n    return MediaVaultBatchRoute;\r\n}(common_1.BaseRoute));\r\nMediaVaultBatchRoute = tslib_1.__decorate([\r\n    inversify_1.injectable(),\r\n    tslib_1.__param(0, inversify_1.inject(contracts_1.TYPES.IAppOptions)),\r\n    tslib_1.__metadata(\"design:paramtypes\", [typeof (_a = typeof contracts_1.IAppOptions !== \"undefined\" && contracts_1.IAppOptions) === \"function\" && _a || Object])\r\n], MediaVaultBatchRoute);\r\nexports.MediaVaultBatchRoute = MediaVaultBatchRoute;\r\nvar _a;\r\n/**\r\n * @overview\r\n ***Notes:**\r\n - Refer to the [REST API documentation](http://dev.baasic.com/api/reference/home) for detailed information about available Baasic REST API end-points.\r\n - [URI Template](https://github.com/Baasic/uritemplate-js) syntax enables expanding the Baasic route templates to Baasic REST URIs providing it with an object that contains URI parameters.\r\n - All end-point objects are transformed by the associated route service.\r\n */ \r\n\n\n\n//////////////////\n// WEBPACK FOOTER\n// ./src/modules/mediaVault/MediaVaultBatchRoute.ts\n// module id = 246\n// module chunks = 0","/* globals module */\r\n/**\r\n * @module mediaVaultClient\r\n * @description  Media Vault Client provides Baasic route templates which can be expanded to Baasic REST URIs. Various services can use Baasic Media Vault Route Service to obtain needed routes while other routes will be obtained through HAL. By convention, all route services use the same function names as their corresponding services.\r\n */\r\n\"use strict\";\r\nObject.defineProperty(exports, \"__esModule\", { value: true });\r\nvar tslib_1 = require(\"tslib\");\r\nvar inversify_1 = require(\"inversify\");\r\n;\r\nvar httpApi_1 = require(\"../../httpApi\");\r\nvar _1 = require(\"./\");\r\nvar MediaVaultClient = (function () {\r\n    function MediaVaultClient(mediaVaultRoute, apiClient, mediaVaultStreamsClient, mediaVaultBatchClient, mediaVaultSettingsClient, mediaVaultProcessingProviderSettingsClient) {\r\n        this.mediaVaultRoute = mediaVaultRoute;\r\n        this.apiClient = apiClient;\r\n        this.mediaVaultStreamsClient = mediaVaultStreamsClient;\r\n        this.mediaVaultBatchClient = mediaVaultBatchClient;\r\n        this.mediaVaultSettingsClient = mediaVaultSettingsClient;\r\n        this.mediaVaultProcessingProviderSettingsClient = mediaVaultProcessingProviderSettingsClient;\r\n    }\r\n    Object.defineProperty(MediaVaultClient.prototype, \"routeDefinition\", {\r\n        get: function () {\r\n            return this.mediaVaultRoute;\r\n        },\r\n        enumerable: true,\r\n        configurable: true\r\n    });\r\n    Object.defineProperty(MediaVaultClient.prototype, \"streams\", {\r\n        get: function () {\r\n            return this.mediaVaultStreamsClient;\r\n        },\r\n        enumerable: true,\r\n        configurable: true\r\n    });\r\n    Object.defineProperty(MediaVaultClient.prototype, \"batch\", {\r\n        get: function () {\r\n            return this.mediaVaultBatchClient;\r\n        },\r\n        enumerable: true,\r\n        configurable: true\r\n    });\r\n    Object.defineProperty(MediaVaultClient.prototype, \"settings\", {\r\n        get: function () {\r\n            return this.mediaVaultSettingsClient;\r\n        },\r\n        enumerable: true,\r\n        configurable: true\r\n    });\r\n    Object.defineProperty(MediaVaultClient.prototype, \"processingProviderSettings\", {\r\n        get: function () {\r\n            return this.mediaVaultProcessingProviderSettingsClient;\r\n        },\r\n        enumerable: true,\r\n        configurable: true\r\n    });\r\n    /**\r\n     * Returns a promise that is resolved once the find action has been performed. Success response returns a list of media vault resources matching the given criteria.\r\n     * @method\r\n     * @param options Query resource options object.\r\n     * @returns A promise that is resolved once the find action has been performed.\r\n     * @example mediaVaultClient.find({\r\n                  pageNumber : 1,\r\n                  pageSize : 10,\r\n                  orderBy : '<field>',\r\n                  orderDirection : '<asc|desc>',\r\n                  search : '<search-phrase>'\r\n               })\r\n               .then(function (collection) {\r\n                   // perform success action here\r\n              },\r\n               function (response, status, headers, config) {\r\n                   // perform error handling here\r\n              });\r\n   **/\r\n    MediaVaultClient.prototype.find = function (options) {\r\n        return this.apiClient.get(this.routeDefinition.find(options));\r\n    };\r\n    /**\r\n     * Returns a promise that is resolved once the get action has been performed. Success response returns requested media vault resource.\r\n     * @method\r\n     * @param id Media vault id which uniquely identifies media vault resource that needs to be retrieved.\r\n     * @param options Query resource options object.\r\n     * @returns A promise that is resolved once the get action has been performed.\r\n     * @example mediaVaultClient.get('<media-vault-id>')\r\n                    .then(function (data) {\r\n                        // perform success action here\r\n                    },\r\n                     function (response, status, headers, config) {\r\n                         // perform error handling here\r\n                    });\r\n     **/\r\n    MediaVaultClient.prototype.get = function (id, options) {\r\n        return this.apiClient.get(this.mediaVaultRoute.get(id, options));\r\n    };\r\n    /**\r\n     * Returns a promise that is resolved once the update media vault action has been performed; this action will update a media vault resource if successfully completed. This route uses HAL enabled objects to obtain routes and therefore it doesn't apply `mediaVaultRoute` route template. Here is an example of how a route can be obtained from HAL enabled objects:\r\n     * ```\r\n     * let params = modelMapper.updateParams(mediaVaultEntry);\r\n     * let uri = params['model'].links('put').href;\r\n     * ```\r\n     * @method\r\n     * @param data A media vault object used to update specified media vault resource.\r\n     * @returns A promise that is resolved once the update media vault action has been performed.\r\n     * @example // mediaVaultEntry is a media vault resource previously fetched using get action.\r\n                    mediaVaultEntry.description = '<description>';\r\n                    mediaVaultClient.update(mediaVaultEntry)\r\n                        .then(function (data) {\r\n                            // perform success action here\r\n                        },\r\n                         function (response, status, headers, config) {\r\n                             // perform error handling here\r\n                        });\r\n     **/\r\n    MediaVaultClient.prototype.update = function (data) {\r\n        return this.apiClient.put(this.routeDefinition.updateParams(data), this.routeDefinition.updateParams(data));\r\n    };\r\n    /**\r\n     * Returns a promise that is resolved once the remove action has been performed. This action will remove one or many media vault resources from the system if successfully completed. If derived resource's format is passed, such as `width` and `height` for the image type of media vault resource, the operation will remove just derived resource. Otherwise, specified media vault and all its accompanying derived resources will be removed from the system. This route uses HAL enabled objects to obtain routes and therefore it doesn't apply baasicMediaVaultRouteService route template. Here is an example of how a route can be obtained from HAL enabled objects:\r\n     * ```\r\n     * let params = modelMapper.removeParams(mediaVaultEntry);\r\n     * let uri = params['model'].links('delete').href;\r\n     * ```\r\n     * @method\r\n     * @param data Media vault object used to delete specific Media vault resource from the system.\r\n     * @param options Options object.\r\n     * @example // mediaVaultEntry is a media vault resource previously fetched using get action. The following action will remove the original media vault resource and all accompanying derived media vault resources.\r\n                   mediaVaultClient.remove(mediaVaultEntry)\r\n                       .then(function (data) {\r\n                           // perform success action here\r\n                       },\r\n                        function (response, status, headers, config) {\r\n                            // perform error handling here\r\n                       });\r\n               // mediaVaultEntry is a media vault resource previously fetched using get action. The following action will remove derived media vault resource only.\r\n                   mediaVaultClient.remove(mediaVaultEntry, {width: <width>, height: <height>})\r\n                       .then(function (data) {\r\n                           // perform success action here\r\n                       },\r\n                        function (response, status, headers, config) {\r\n                            // perform error handling here\r\n                       });\r\n    **/\r\n    MediaVaultClient.prototype.remove = function (data, options) {\r\n        return this.apiClient.delete(this.mediaVaultRoute.delete(data, options));\r\n    };\r\n    return MediaVaultClient;\r\n}());\r\nMediaVaultClient = tslib_1.__decorate([\r\n    inversify_1.injectable(),\r\n    tslib_1.__param(0, inversify_1.inject(_1.TYPES.MediaVaultRoute)),\r\n    tslib_1.__param(1, inversify_1.inject(httpApi_1.httpTYPES.ApiClient)),\r\n    tslib_1.__param(2, inversify_1.inject(_1.TYPES.MediaVaultStreamsClient)),\r\n    tslib_1.__param(3, inversify_1.inject(_1.TYPES.MediaVaultBatchClient)),\r\n    tslib_1.__param(4, inversify_1.inject(_1.TYPES.MediaVaultSettingsClient)),\r\n    tslib_1.__param(5, inversify_1.inject(_1.TYPES.MediaVaultProcessingProviderSettingsClient)),\r\n    tslib_1.__metadata(\"design:paramtypes\", [typeof (_a = typeof _1.MediaVaultRoute !== \"undefined\" && _1.MediaVaultRoute) === \"function\" && _a || Object, typeof (_b = typeof httpApi_1.ApiClient !== \"undefined\" && httpApi_1.ApiClient) === \"function\" && _b || Object, typeof (_c = typeof _1.MediaVaultStreamsClient !== \"undefined\" && _1.MediaVaultStreamsClient) === \"function\" && _c || Object, typeof (_d = typeof _1.MediaVaultBatchClient !== \"undefined\" && _1.MediaVaultBatchClient) === \"function\" && _d || Object, typeof (_e = typeof _1.MediaVaultSettingsClient !== \"undefined\" && _1.MediaVaultSettingsClient) === \"function\" && _e || Object, typeof (_f = typeof _1.MediaVaultProcessingProviderSettingsClient !== \"undefined\" && _1.MediaVaultProcessingProviderSettingsClient) === \"function\" && _f || Object])\r\n], MediaVaultClient);\r\nexports.MediaVaultClient = MediaVaultClient;\r\nvar _a, _b, _c, _d, _e, _f;\r\n/**\r\n * @overview\r\n ***Notes:**\r\n - Refer to the [REST API documentation](http://dev.baasic.com/api/reference/home) for detailed information about available Baasic REST API end-points.\r\n - All end-point objects are transformed by the associated route service.\r\n */ \r\n\n\n\n//////////////////\n// WEBPACK FOOTER\n// ./src/modules/mediaVault/MediaVaultClient.ts\n// module id = 247\n// module chunks = 0","/* globals module */\r\n/**\r\n * @module mediaVaultProcessingProviderSettingsClient\r\n * @description  Media Vault Processing Provider Settings Client provides Baasic route templates which can be expanded to Baasic REST URIs. Various services can use Baasic Media Vault Processing Provider Route Definition to obtain needed routes while other routes will be obtained through HAL. By convention, all route services use the same function names as their corresponding services.\r\n */\r\n\"use strict\";\r\nObject.defineProperty(exports, \"__esModule\", { value: true });\r\nvar tslib_1 = require(\"tslib\");\r\nvar inversify_1 = require(\"inversify\");\r\n;\r\nvar httpApi_1 = require(\"../../httpApi\");\r\nvar _1 = require(\"./\");\r\nvar MediaVaultProcessingProviderSettingsClient = (function () {\r\n    function MediaVaultProcessingProviderSettingsClient(mediaVaultProcessingProviderSettingsRoute, apiClient) {\r\n        this.mediaVaultProcessingProviderSettingsRoute = mediaVaultProcessingProviderSettingsRoute;\r\n        this.apiClient = apiClient;\r\n    }\r\n    Object.defineProperty(MediaVaultProcessingProviderSettingsClient.prototype, \"routeDefinition\", {\r\n        get: function () {\r\n            return this.mediaVaultProcessingProviderSettingsRoute;\r\n        },\r\n        enumerable: true,\r\n        configurable: true\r\n    });\r\n    /**\r\n     * Returns a promise that is resolved once the find action has been performed. Success response returns a list of media vault processing providers matching the given criteria.\r\n     * @method\r\n     * @param options Query resource options object.\r\n     * @returns A promise that is resolved once the find action has been performed.\r\n     * @example mediaVaultProcessingProviderSettingsClient.find({\r\n                    pageNumber : 1,\r\n                    pageSize : 10,\r\n                    orderBy : '<field>',\r\n                    orderDirection : '<asc|desc>',\r\n                    search : '<search-phrase>'\r\n                })\r\n                .then(function (collection) {\r\n                    // perform success action here\r\n                },\r\n                 function (response, status, headers, config) {\r\n                     // perform error handling here\r\n                });\r\n     **/\r\n    MediaVaultProcessingProviderSettingsClient.prototype.find = function (options) {\r\n        return this.apiClient.get(this.routeDefinition.find(options));\r\n    };\r\n    /**\r\n     * Returns a promise that is resolved once the get action has been performed. Success response returns the media vault processing provider resource.\r\n     * @method\r\n     * @param id Preprocessing provider id which uniquely identifies preprocessing provider whose settings need to be retrieved.\r\n     * @param options Query resource options object.\r\n     * @returns A promise that is resolved once the get action has been performed.\r\n     * @example mediaVaultProcessingProviderSettingsClient.get('<id>')\r\n                    .then(function (data) {\r\n                        // perform success action here\r\n                    },\r\n                     function (response, status, headers, config) {\r\n                         // perform error handling here\r\n                    });\r\n     **/\r\n    MediaVaultProcessingProviderSettingsClient.prototype.get = function (id, options) {\r\n        return this.apiClient.get(this.mediaVaultProcessingProviderSettingsRoute.get(id, options));\r\n    };\r\n    /**\r\n     * Returns a promise that is resolved once the update action has been performed; this action updates a media vault processing provider setting resource. This route uses HAL enabled objects to obtain routes and therefore it doesn't apply `mediaVaultProcessingProviderSettingsRoute` route template. Here is an example of how a route can be obtained from HAL enabled objects:\r\n     * ```\r\n     * let params = modelMapper.updateParams(processingProviderSetting);\r\n     * let uri = params['model'].links('put').href;\r\n     * ```\r\n     * @method\r\n     * @param data A media vault preprocessing provider settings object used to update specified media vault preprocessing provider settings in the system.\r\n     * @returns A promise that is resolved once the update action has been performed.\r\n     * @example // processingProviderSettings is a resource previously fetched using get action.\r\n                    processingProviderSettings.settings.faceDetection = true;\r\n                    mediaVaultProcessingProviderSettingsClient.update(processingProviderSetting)\r\n                        .then(function (data) {\r\n                            // perform success action here\r\n                        },\r\n                         function (response, status, headers, config) {\r\n                             // perform error handling here\r\n                        });\r\n     **/\r\n    MediaVaultProcessingProviderSettingsClient.prototype.update = function (data) {\r\n        return this.apiClient.put(this.routeDefinition.update(data), this.routeDefinition.updateParams(data));\r\n    };\r\n    return MediaVaultProcessingProviderSettingsClient;\r\n}());\r\nMediaVaultProcessingProviderSettingsClient = tslib_1.__decorate([\r\n    inversify_1.injectable(),\r\n    tslib_1.__param(0, inversify_1.inject(_1.TYPES.MediaVaultProcessingProviderSettingsRoute)),\r\n    tslib_1.__param(1, inversify_1.inject(httpApi_1.httpTYPES.ApiClient)),\r\n    tslib_1.__metadata(\"design:paramtypes\", [typeof (_a = typeof _1.MediaVaultProcessingProviderSettingsRoute !== \"undefined\" && _1.MediaVaultProcessingProviderSettingsRoute) === \"function\" && _a || Object, typeof (_b = typeof httpApi_1.ApiClient !== \"undefined\" && httpApi_1.ApiClient) === \"function\" && _b || Object])\r\n], MediaVaultProcessingProviderSettingsClient);\r\nexports.MediaVaultProcessingProviderSettingsClient = MediaVaultProcessingProviderSettingsClient;\r\nvar _a, _b;\r\n/**\r\n * @overview\r\n ***Notes:**\r\n - Refer to the [REST API documentation](http://dev.baasic.com/api/reference/home) for detailed information about available Baasic REST API end-points.\r\n - All end-point objects are transformed by the associated route service.\r\n */ \r\n\n\n\n//////////////////\n// WEBPACK FOOTER\n// ./src/modules/mediaVault/MediaVaultProcessingProviderSettingsClient.ts\n// module id = 248\n// module chunks = 0","/* globals module */\r\n/**\r\n * @module mediaVaultProcessingProviderSettingsRoute\r\n * @description Baasic Media Vault Processing Provider Settings Route Definition provides Baasic route templates which can be expanded to Baasic REST URIs. Various services can use Baasic Media Vault Processing Provider Settings Route Definition to obtain needed routes while other routes will be obtained through HAL. By convention, all route services use the same function names as their corresponding services.\r\n */\r\n\"use strict\";\r\nObject.defineProperty(exports, \"__esModule\", { value: true });\r\nvar tslib_1 = require(\"tslib\");\r\nvar inversify_1 = require(\"inversify\");\r\nvar common_1 = require(\"../../common\");\r\n;\r\nvar contracts_1 = require(\"../../core/contracts\");\r\nvar MediaVaultProcessingProviderSettingsRoute = (function (_super) {\r\n    tslib_1.__extends(MediaVaultProcessingProviderSettingsRoute, _super);\r\n    function MediaVaultProcessingProviderSettingsRoute(appOptions) {\r\n        var _this = _super.call(this, appOptions) || this;\r\n        _this.appOptions = appOptions;\r\n        _this.findRoute = 'media-vault-preprocessing-settings/{?searchQuery,page,rpp,sort,embed,fields}';\r\n        _this.getRoute = 'media-vault-settings';\r\n        _this.updateRoute = 'media-vault-preprocessing-settings/{id}';\r\n        return _this;\r\n    }\r\n    /**\r\n     * Parses find route which can be expanded with additional options. Supported items are:\r\n     * - `searchQuery` - A string referencing media vault processing provider setting properties using the phrase search.\r\n     * - `page` - A value used to set the page number, i.e. to retrieve certain media vault processing provider setting subset from the storage.\r\n     * - `rpp` - A value used to limit the size of result set per page.\r\n     * - `sort` - A string used to set the media vault processing provider setting property to sort the result collection by.\r\n     * - `embed` - Comma separated list of resources to be contained within the current representation.\r\n     * @method\r\n     * @example mediaVaultProcessingProviderSettingsRoute.find({searchQuery: '<search-phrase>'});\r\n     **/\r\n    MediaVaultProcessingProviderSettingsRoute.prototype.find = function (options) {\r\n        return _super.prototype.baseFind.call(this, this.findRoute, options);\r\n    };\r\n    /**\r\n     * Parses get route; this route should be expanded with Id of the media vault processing provider setting resource.\r\n     * @method\r\n     * @example mediaVaultProcessingProviderSettingsRoute.get({id: '<id>'});\r\n     **/\r\n    MediaVaultProcessingProviderSettingsRoute.prototype.get = function (id, options) {\r\n        return _super.prototype.baseGet.call(this, this.getRoute, id, options);\r\n    };\r\n    /**\r\n     * Parses update route; this route should be expanded with Id of the media vault processing provider setting resource.\r\n     * @method\r\n     * @param data A media vault preprocessing provider settings object used to update specified media vault preprocessing provider settings in the system.\r\n     * @example mediaVaultProcessingProviderSettingsRoute.update(data);\r\n     **/\r\n    MediaVaultProcessingProviderSettingsRoute.prototype.update = function (data) {\r\n        return _super.prototype.baseUpdate.call(this, this.updateRoute, data);\r\n    };\r\n    return MediaVaultProcessingProviderSettingsRoute;\r\n}(common_1.BaseRoute));\r\nMediaVaultProcessingProviderSettingsRoute = tslib_1.__decorate([\r\n    inversify_1.injectable(),\r\n    tslib_1.__param(0, inversify_1.inject(contracts_1.TYPES.IAppOptions)),\r\n    tslib_1.__metadata(\"design:paramtypes\", [typeof (_a = typeof contracts_1.IAppOptions !== \"undefined\" && contracts_1.IAppOptions) === \"function\" && _a || Object])\r\n], MediaVaultProcessingProviderSettingsRoute);\r\nexports.MediaVaultProcessingProviderSettingsRoute = MediaVaultProcessingProviderSettingsRoute;\r\nvar _a;\r\n/**\r\n * @overview\r\n ***Notes:**\r\n - Refer to the [REST API documentation](http://dev.baasic.com/api/reference/home) for detailed information about available Baasic REST API end-points.\r\n - [URI Template](https://github.com/Baasic/uritemplate-js) syntax enables expanding the Baasic route templates to Baasic REST URIs providing it with an object that contains URI parameters.\r\n - All end-point objects are transformed by the associated route service.\r\n */ \r\n\n\n\n//////////////////\n// WEBPACK FOOTER\n// ./src/modules/mediaVault/MediaVaultProcessingProviderSettingsRoute.ts\n// module id = 249\n// module chunks = 0","/* globals module */\r\n/**\r\n * @module mediaVaultRoute\r\n * @description Baasic Media Vault Route Definition provides Baasic route templates which can be expanded to Baasic REST URIs. Various services can use Baasic Media Vault Route Service to obtain needed routes while other routes will be obtained through HAL. By convention, all route services use the same function names as their corresponding services.\r\n */\r\n\"use strict\";\r\nObject.defineProperty(exports, \"__esModule\", { value: true });\r\nvar tslib_1 = require(\"tslib\");\r\nvar inversify_1 = require(\"inversify\");\r\nvar common_1 = require(\"../../common\");\r\n;\r\nvar _1 = require(\"./\");\r\nvar contracts_1 = require(\"../../core/contracts\");\r\nvar MediaVaultRoute = (function (_super) {\r\n    tslib_1.__extends(MediaVaultRoute, _super);\r\n    function MediaVaultRoute(appOptions, mediaVaultStreamsRoute, mediaVaultBatchRoute, mediaVaultSettingsRoute, mediaVaultProcessingProviderSettingsRoute) {\r\n        var _this = _super.call(this, appOptions) || this;\r\n        _this.appOptions = appOptions;\r\n        _this.mediaVaultStreamsRoute = mediaVaultStreamsRoute;\r\n        _this.mediaVaultBatchRoute = mediaVaultBatchRoute;\r\n        _this.mediaVaultSettingsRoute = mediaVaultSettingsRoute;\r\n        _this.mediaVaultProcessingProviderSettingsRoute = mediaVaultProcessingProviderSettingsRoute;\r\n        _this.findRoute = 'media-vaults/{?searchQuery,page,rpp,sort,embed,fields}';\r\n        _this.getRoute = 'media-vaults/{id}/{?embed,fields}';\r\n        _this.updateRoute = 'media-vaults/{id}';\r\n        _this.deleteRoute = 'media-vaults/{id}/{?height,width}';\r\n        return _this;\r\n    }\r\n    Object.defineProperty(MediaVaultRoute.prototype, \"streams\", {\r\n        get: function () {\r\n            return this.mediaVaultStreamsRoute;\r\n        },\r\n        enumerable: true,\r\n        configurable: true\r\n    });\r\n    Object.defineProperty(MediaVaultRoute.prototype, \"batch\", {\r\n        get: function () {\r\n            return this.mediaVaultBatchRoute;\r\n        },\r\n        enumerable: true,\r\n        configurable: true\r\n    });\r\n    Object.defineProperty(MediaVaultRoute.prototype, \"settings\", {\r\n        get: function () {\r\n            return this.mediaVaultSettingsRoute;\r\n        },\r\n        enumerable: true,\r\n        configurable: true\r\n    });\r\n    Object.defineProperty(MediaVaultRoute.prototype, \"processingProviderSettings\", {\r\n        get: function () {\r\n            return this.mediaVaultProcessingProviderSettingsRoute;\r\n        },\r\n        enumerable: true,\r\n        configurable: true\r\n    });\r\n    /**\r\n     * Parses find route which can be expanded with additional options. Supported items are:\r\n     * - `searchQuery` - A string referencing media vault properties using the phrase search.\r\n     * - `page` - A value used to set the page number, i.e. to retrieve certain media vault subset from the storage.\r\n     * - `rpp` - A value used to limit the size of result set per page.\r\n     * - `sort` - A string used to set the media vault property to sort the result collection by.\r\n     * - `embed` - Comma separated list of resources to be contained within the current representation.\r\n     * @method\r\n     * @param options Query resource options object.\r\n     * @example mediaVaultRoute.find({searchQuery: '<search-phrase>'});\r\n     **/\r\n    MediaVaultRoute.prototype.find = function (options) {\r\n        return _super.prototype.baseFind.call(this, this.findRoute, options);\r\n    };\r\n    /**\r\n     * Parses get route; this route should be expanded with the Id of media vault resource.\r\n     * @method\r\n     * @param id Media vault id which uniquely identifies media vault resource that needs to be retrieved.\r\n     * @param options Query resource options object.\r\n     * @example mediaVaultRoute.get({id: '<media-vault-id>'});\r\n     **/\r\n    MediaVaultRoute.prototype.get = function (id, options) {\r\n        return _super.prototype.baseGet.call(this, this.getRoute, id, options);\r\n    };\r\n    /**\r\n     * Parses update route; this route should be expanded with the Id of media vault resource.\r\n     * @method\r\n     * @param data Media vault object used to update specific Media vault resource in the system.\r\n     * @example mediaVaultRoute.get({id: '<media-vault-id>'});\r\n     **/\r\n    MediaVaultRoute.prototype.update = function (data) {\r\n        return _super.prototype.baseUpdate.call(this, this.updateRoute, data);\r\n    };\r\n    /**\r\n     * Parses delete route; this route should be expanded with the Id of media vault resource.\r\n     * @method\r\n     * @param data Media vault object used to update specific Media vault resource in the system.\r\n     * @param options Options object.\r\n     * @example mediaVaultRoute.delete({id: '<media-vault-id>'});\r\n     **/\r\n    MediaVaultRoute.prototype.delete = function (data, options) {\r\n        return _super.prototype.baseDelete.call(this, this.deleteRoute, data, options);\r\n    };\r\n    return MediaVaultRoute;\r\n}(common_1.BaseRoute));\r\nMediaVaultRoute = tslib_1.__decorate([\r\n    inversify_1.injectable(),\r\n    tslib_1.__param(0, inversify_1.inject(contracts_1.TYPES.IAppOptions)),\r\n    tslib_1.__param(1, inversify_1.inject(_1.TYPES.MediaVaultStreamsRoute)),\r\n    tslib_1.__param(2, inversify_1.inject(_1.TYPES.MediaVaultBatchRoute)),\r\n    tslib_1.__param(3, inversify_1.inject(_1.TYPES.MediaVaultSettingsRoute)),\r\n    tslib_1.__param(4, inversify_1.inject(_1.TYPES.MediaVaultProcessingProviderSettingsRoute)),\r\n    tslib_1.__metadata(\"design:paramtypes\", [typeof (_a = typeof contracts_1.IAppOptions !== \"undefined\" && contracts_1.IAppOptions) === \"function\" && _a || Object, typeof (_b = typeof _1.MediaVaultStreamsRoute !== \"undefined\" && _1.MediaVaultStreamsRoute) === \"function\" && _b || Object, typeof (_c = typeof _1.MediaVaultBatchRoute !== \"undefined\" && _1.MediaVaultBatchRoute) === \"function\" && _c || Object, typeof (_d = typeof _1.MediaVaultSettingsRoute !== \"undefined\" && _1.MediaVaultSettingsRoute) === \"function\" && _d || Object, typeof (_e = typeof _1.MediaVaultProcessingProviderSettingsRoute !== \"undefined\" && _1.MediaVaultProcessingProviderSettingsRoute) === \"function\" && _e || Object])\r\n], MediaVaultRoute);\r\nexports.MediaVaultRoute = MediaVaultRoute;\r\nvar _a, _b, _c, _d, _e;\r\n/**\r\n * @overview\r\n ***Notes:**\r\n - Refer to the [REST API documentation](http://dev.baasic.com/api/reference/home) for detailed information about available Baasic REST API end-points.\r\n - [URI Template](https://github.com/Baasic/uritemplate-js) syntax enables expanding the Baasic route templates to Baasic REST URIs providing it with an object that contains URI parameters.\r\n - All end-point objects are transformed by the associated route service.\r\n */ \r\n\n\n\n//////////////////\n// WEBPACK FOOTER\n// ./src/modules/mediaVault/MediaVaultRoute.ts\n// module id = 250\n// module chunks = 0","/* globals module */\r\n/**\r\n * @module mediaVaultSettingsClient\r\n * @description  Media Vault Settings Client provides Baasic route templates which can be expanded to Baasic REST URIs. Various services can use Baasic Media Vault Settings Route Service to obtain needed routes while other routes will be obtained through HAL. By convention, all route services use the same function names as their corresponding services.\r\n */\r\n\"use strict\";\r\nObject.defineProperty(exports, \"__esModule\", { value: true });\r\nvar tslib_1 = require(\"tslib\");\r\nvar inversify_1 = require(\"inversify\");\r\n;\r\nvar httpApi_1 = require(\"../../httpApi\");\r\nvar _1 = require(\"./\");\r\nvar MediaVaultSettingsClient = (function () {\r\n    function MediaVaultSettingsClient(mediaVaultSettingsRoute, apiClient) {\r\n        this.mediaVaultSettingsRoute = mediaVaultSettingsRoute;\r\n        this.apiClient = apiClient;\r\n    }\r\n    Object.defineProperty(MediaVaultSettingsClient.prototype, \"routeDefinition\", {\r\n        get: function () {\r\n            return this.mediaVaultSettingsRoute;\r\n        },\r\n        enumerable: true,\r\n        configurable: true\r\n    });\r\n    /**\r\n     * Returns a promise that is resolved once the get action has been performed. Success response returns media vault settings resource.\r\n     * @method\r\n     * @returns A promise that is resolved once the get action has been performed.\r\n     * @example mediaVaultSettingsClient.get()\r\n                    .then(function (data) {\r\n                        // perform success action here\r\n                    },\r\n                     function (response, status, headers, config) {\r\n                         // perform error handling here\r\n                    });\r\n     **/\r\n    MediaVaultSettingsClient.prototype.get = function () {\r\n        return this.apiClient.get(this.routeDefinition.get());\r\n    };\r\n    /**\r\n     * Returns a promise that is resolved once the update action has been performed; this action updates the media vault settings resource.\r\n     * @method\r\n     * @param data A media vault settings object used to update media vault settings in the system.\r\n     * @returns A promise that is resolved once the update action has been performed.\r\n     * @example mediaVaultSettingsClient.update(mediaVaultSettings)\r\n                    .then(function (data) {\r\n                        // perform success action here\r\n                    },\r\n                     function (response, status, headers, config) {\r\n                         // perform error handling here\r\n                    });\r\n     **/\r\n    MediaVaultSettingsClient.prototype.update = function (data) {\r\n        return this.apiClient.put(this.routeDefinition.update(), this.routeDefinition.updateParams(data));\r\n    };\r\n    return MediaVaultSettingsClient;\r\n}());\r\nMediaVaultSettingsClient = tslib_1.__decorate([\r\n    inversify_1.injectable(),\r\n    tslib_1.__param(0, inversify_1.inject(_1.TYPES.MediaVaultSettingsRoute)),\r\n    tslib_1.__param(1, inversify_1.inject(httpApi_1.httpTYPES.ApiClient)),\r\n    tslib_1.__metadata(\"design:paramtypes\", [typeof (_a = typeof _1.MediaVaultSettingsRoute !== \"undefined\" && _1.MediaVaultSettingsRoute) === \"function\" && _a || Object, typeof (_b = typeof httpApi_1.ApiClient !== \"undefined\" && httpApi_1.ApiClient) === \"function\" && _b || Object])\r\n], MediaVaultSettingsClient);\r\nexports.MediaVaultSettingsClient = MediaVaultSettingsClient;\r\nvar _a, _b;\r\n/**\r\n * @overview\r\n ***Notes:**\r\n - Refer to the [REST API documentation](http://dev.baasic.com/api/reference/home) for detailed information about available Baasic REST API end-points.\r\n - All end-point objects are transformed by the associated route service.\r\n */ \r\n\n\n\n//////////////////\n// WEBPACK FOOTER\n// ./src/modules/mediaVault/MediaVaultSettingsClient.ts\n// module id = 251\n// module chunks = 0","/* globals module */\r\n/**\r\n * @module mediaVaultSettingsRoute\r\n * @description Baasic Media Vault Settings Route Definition provides Baasic route templates which can be expanded to Baasic REST URIs. Various services can use Baasic Media Vault Settings Route Service to obtain needed routes while other routes will be obtained through HAL. By convention, all route services use the same function names as their corresponding services.\r\n */\r\n\"use strict\";\r\nObject.defineProperty(exports, \"__esModule\", { value: true });\r\nvar tslib_1 = require(\"tslib\");\r\nvar inversify_1 = require(\"inversify\");\r\nvar common_1 = require(\"../../common\");\r\nvar contracts_1 = require(\"../../core/contracts\");\r\nvar MediaVaultSettingsRoute = (function (_super) {\r\n    tslib_1.__extends(MediaVaultSettingsRoute, _super);\r\n    function MediaVaultSettingsRoute(appOptions) {\r\n        var _this = _super.call(this, appOptions) || this;\r\n        _this.appOptions = appOptions;\r\n        _this.getRoute = 'media-vault-settings';\r\n        _this.updateRoute = 'media-vault-settings';\r\n        return _this;\r\n    }\r\n    /**\r\n     * Parses get route; this route doesn not expose any additional options.\r\n     * @method\r\n     * @example mediaVaultSettingsRoute.get();\r\n     **/\r\n    MediaVaultSettingsRoute.prototype.get = function () {\r\n        return _super.prototype.baseCreate.call(this, this.getRoute, {});\r\n    };\r\n    /**\r\n     * Parses update route; this URI template does not expose any additional options.\r\n     * @method\r\n     * @example mediaVaultSettingsRoute.update();\r\n     **/\r\n    MediaVaultSettingsRoute.prototype.update = function () {\r\n        return _super.prototype.baseCreate.call(this, this.updateRoute, {});\r\n    };\r\n    return MediaVaultSettingsRoute;\r\n}(common_1.BaseRoute));\r\nMediaVaultSettingsRoute = tslib_1.__decorate([\r\n    inversify_1.injectable(),\r\n    tslib_1.__param(0, inversify_1.inject(contracts_1.TYPES.IAppOptions)),\r\n    tslib_1.__metadata(\"design:paramtypes\", [typeof (_a = typeof contracts_1.IAppOptions !== \"undefined\" && contracts_1.IAppOptions) === \"function\" && _a || Object])\r\n], MediaVaultSettingsRoute);\r\nexports.MediaVaultSettingsRoute = MediaVaultSettingsRoute;\r\nvar _a;\r\n/**\r\n * @overview\r\n ***Notes:**\r\n - Refer to the [REST API documentation](http://dev.baasic.com/api/reference/home) for detailed information about available Baasic REST API end-points.\r\n - [URI Template](https://github.com/Baasic/uritemplate-js) syntax enables expanding the Baasic route templates to Baasic REST URIs providing it with an object that contains URI parameters.\r\n - All end-point objects are transformed by the associated route service.\r\n */ \r\n\n\n\n//////////////////\n// WEBPACK FOOTER\n// ./src/modules/mediaVault/MediaVaultSettingsRoute.ts\n// module id = 252\n// module chunks = 0","/* globals module */\r\n/**\r\n * @module mediaVaultStreamsClient\r\n * @description  Media Vault Streams Client provides Baasic route templates which can be expanded to Baasic REST URIs. Various services can use Baasic Media Vault Streams Route Service to obtain needed routes while other routes will be obtained through HAL. By convention, all route services use the same function names as their corresponding services.\r\n */\r\n\"use strict\";\r\nObject.defineProperty(exports, \"__esModule\", { value: true });\r\nvar tslib_1 = require(\"tslib\");\r\nvar inversify_1 = require(\"inversify\");\r\n;\r\nvar httpApi_1 = require(\"../../httpApi\");\r\nvar _1 = require(\"./\");\r\nvar MediaVaultStreamsClient = (function () {\r\n    function MediaVaultStreamsClient(mediaVaultStreamsRoute, apiClient) {\r\n        this.mediaVaultStreamsRoute = mediaVaultStreamsRoute;\r\n        this.apiClient = apiClient;\r\n    }\r\n    Object.defineProperty(MediaVaultStreamsClient.prototype, \"routeDefinition\", {\r\n        get: function () {\r\n            return this.mediaVaultStreamsRoute;\r\n        },\r\n        enumerable: true,\r\n        configurable: true\r\n    });\r\n    /**\r\n     * Returns a promise that is resolved once the get action has been performed. Success response returns the media vault stream if successfully completed. If derived resource's format is passed, such as `width` and `height` for the image type of media vault resource, the operation will return a stream of the derived resource. Otherwise, stream of the original media vault resource will be retrieved.\r\n     * @method\r\n     * @example // Request the original media vault stream\r\n                        mediaVaultStreamsClient.get('<path>')\r\n                            .then(function (data) {\r\n                                // perform success action here\r\n                            },\r\n                             function (response, status, headers, config) {\r\n                                 // perform error handling here\r\n                            });\r\n                // Request derived media vault stream\r\n                        mediaVaultStreamsClient.get({id: '<path>', width: <width>, height: <height>})\r\n                            .then(function (data) {\r\n                                // perform success action here\r\n                            },\r\n                             function (response, status, headers, config) {\r\n                                 // perform error handling here\r\n                            });\r\n     **/\r\n    MediaVaultStreamsClient.prototype.get = function (data) {\r\n        return this.apiClient.get(this.routeDefinition.get(data));\r\n    };\r\n    /**\r\n     * Returns a promise that is resolved once the get action has been performed. Success response returns the media vault stream as a blob. If derived resource's format is passed, such as `width` and `height` for the image type of media vault resource, the operation will return a blob of the derived media vault resource. Otherwise, blob of the original media vault resource will be retrieved. For more information on Blob objects please see [Blob Documentation](https://developer.mozilla.org/en-US/docs/Web/API/Blob).\r\n     * @method\r\n     * @example // Request the original blob\r\n                        mediaVaultStreamsClient.getBlob('<path>')\r\n                            .then(function (data) {\r\n                                // perform success action here\r\n                            },\r\n                             function (response, status, headers, config) {\r\n                                 // perform error handling here\r\n                            });\r\n                // Request derived blob\r\n                        mediaVaultStreamsClient.getBlob({id: '<path>', width: <width>, height: <height>})\r\n                            .then(function (data) {\r\n                                // perform success action here\r\n                            },\r\n                             function (response, status, headers, config) {\r\n                                 // perform error handling here\r\n                            });\r\n     **/\r\n    MediaVaultStreamsClient.prototype.getBlob = function (data) {\r\n        return this.apiClient.get(this.mediaVaultStreamsRoute.get(data), { 'Accept': 'application/octet-stream' });\r\n    };\r\n    /**\r\n     * Returns a promise that is resolved once the create media vault stream action has been performed; this action will upload the specified blob. For more information on Blob objects please see [Blob Documentation](https://developer.mozilla.org/en-US/docs/Web/API/Blob).\r\n     * @method\r\n     * @example mediaVaultStreamsClient.create('<path>', <blob>)\r\n                    .then(function (data) {\r\n                        // perform success action here\r\n                    },\r\n                     function (response, status, headers, config) {\r\n                         // perform error handling here\r\n                    });\r\n     **/\r\n    MediaVaultStreamsClient.prototype.create = function (data, stream) {\r\n        var formData = new FormData();\r\n        formData.append('file', stream);\r\n        return this.apiClient.post(this.mediaVaultStreamsRoute.create(data), formData, { 'Content-Type': undefined });\r\n    };\r\n    /**\r\n     * Returns a promise that is resolved once the update media vault stream action has been performed; this action will replace the existing stream with a new one. Alternatively, if a derived stream is being updated it will either create a new derived stream or replace the existing one. In order to update a derived stream, format needs to be passed (For example: `width` and `height` for the image type of media vault stream data type).\r\n     * @method\r\n     * @example // Update existing original media vault stream\r\n                        mediaVaultStreamsClient.update('<path>', <media-vault-stream>)\r\n                            .then(function (data) {\r\n                                // perform success action here\r\n                            },\r\n                             function (response, status, headers, config) {\r\n                                 // perform error handling here\r\n                            });\r\n                // Update derived media vault stream\r\n                    mediaVaultStreamsClient.update({id: '<path>', width: <width>, height: <height>}, <media-vault-stream>)\r\n                        .then(function (data) {\r\n                            // perform success action here\r\n                        },\r\n                          function (response, status, headers, config) {\r\n                              // perform error handling here\r\n                        });\r\n     **/\r\n    MediaVaultStreamsClient.prototype.update = function (data, stream) {\r\n        var formData = new FormData();\r\n        formData.append('file', stream);\r\n        return this.apiClient.put(this.mediaVaultStreamsRoute.update(data), formData, { 'Content-Type': undefined });\r\n    };\r\n    return MediaVaultStreamsClient;\r\n}());\r\nMediaVaultStreamsClient = tslib_1.__decorate([\r\n    inversify_1.injectable(),\r\n    tslib_1.__param(0, inversify_1.inject(_1.TYPES.MediaVaultStreamsRoute)),\r\n    tslib_1.__param(1, inversify_1.inject(httpApi_1.httpTYPES.ApiClient)),\r\n    tslib_1.__metadata(\"design:paramtypes\", [typeof (_a = typeof _1.MediaVaultStreamsRoute !== \"undefined\" && _1.MediaVaultStreamsRoute) === \"function\" && _a || Object, typeof (_b = typeof httpApi_1.ApiClient !== \"undefined\" && httpApi_1.ApiClient) === \"function\" && _b || Object])\r\n], MediaVaultStreamsClient);\r\nexports.MediaVaultStreamsClient = MediaVaultStreamsClient;\r\nvar _a, _b;\r\n/**\r\n * @overview\r\n ***Notes:**\r\n - Refer to the [REST API documentation](http://dev.baasic.com/api/reference/home) for detailed information about available Baasic REST API end-points.\r\n - All end-point objects are transformed by the associated route service.\r\n */ \r\n\n\n\n//////////////////\n// WEBPACK FOOTER\n// ./src/modules/mediaVault/MediaVaultStreamsClient.ts\n// module id = 253\n// module chunks = 0","/* globals module */\r\n/**\r\n * @module mediaVaultStreamsRoute\r\n * @description Baasic MediaVault Streams Route Definition provides Baasic route templates which can be expanded to Baasic REST URIs. Various services can use Baasic Media Vault Streams Route Definition to obtain needed routes while other routes will be obtained through HAL. By convention, all route services use the same function names as their corresponding services.\r\n */\r\n\"use strict\";\r\nObject.defineProperty(exports, \"__esModule\", { value: true });\r\nvar tslib_1 = require(\"tslib\");\r\nvar inversify_1 = require(\"inversify\");\r\nvar common_1 = require(\"../../common\");\r\nvar contracts_1 = require(\"../../core/contracts\");\r\nvar MediaVaultStreamsRoute = (function (_super) {\r\n    tslib_1.__extends(MediaVaultStreamsRoute, _super);\r\n    function MediaVaultStreamsRoute(appOptions) {\r\n        var _this = _super.call(this, appOptions) || this;\r\n        _this.appOptions = appOptions;\r\n        _this.getRoute = 'media-vault-streams/{id}/{?width,height}';\r\n        _this.createRoute = 'media-vault-streams/{path}';\r\n        _this.updateRoute = 'media-vault-streams/{id}/{?width,height}';\r\n        return _this;\r\n    }\r\n    /**\r\n     * Parses get route; this route should be expanded with id or path of desired media vault stream. Additional supported items are:\r\n     * - `width` - width of desired derived image.\r\n     * - `height` - height of desired derived image.\r\n     * @method\r\n     * @example mediaVaultRoute.get({id: '<path>'});\r\n     **/\r\n    MediaVaultStreamsRoute.prototype.get = function (data) {\r\n        if (this.utility.isObject(data)) {\r\n            data = {\r\n                id: data\r\n            };\r\n        }\r\n        return _super.prototype.baseCreate.call(this, this.getRoute, data);\r\n    };\r\n    /**\r\n     * Parses create route; this route should be expanded with the path which indicates where the stream will be saved.\r\n     * @method\r\n     * @example mediaVaultStreamsRoute.create({path: '<path>'});\r\n     **/\r\n    MediaVaultStreamsRoute.prototype.create = function (data) {\r\n        if (this.utility.isObject(data)) {\r\n            data = {\r\n                path: data\r\n            };\r\n        }\r\n        return _super.prototype.baseCreate.call(this, this.createRoute, data);\r\n    };\r\n    /**\r\n     * Parses update route; this route should be expanded with the id or path of the previously saved media vault resource. Additional supported items are:\r\n     * - `width` - width of desired derived image.\r\n     * - `height` - height of desired derived image.\r\n     * @method\r\n     * @example mediaVaultStreamsRoute.update({id: '<path>'});\r\n     **/\r\n    MediaVaultStreamsRoute.prototype.update = function (data) {\r\n        if (this.utility.isObject(data)) {\r\n            data = {\r\n                id: data\r\n            };\r\n        }\r\n        return _super.prototype.baseUpdate.call(this, this.updateRoute, data);\r\n    };\r\n    return MediaVaultStreamsRoute;\r\n}(common_1.BaseRoute));\r\nMediaVaultStreamsRoute = tslib_1.__decorate([\r\n    inversify_1.injectable(),\r\n    tslib_1.__param(0, inversify_1.inject(contracts_1.TYPES.IAppOptions)),\r\n    tslib_1.__metadata(\"design:paramtypes\", [typeof (_a = typeof contracts_1.IAppOptions !== \"undefined\" && contracts_1.IAppOptions) === \"function\" && _a || Object])\r\n], MediaVaultStreamsRoute);\r\nexports.MediaVaultStreamsRoute = MediaVaultStreamsRoute;\r\nvar _a;\r\n/**\r\n * @overview\r\n ***Notes:**\r\n - Refer to the [REST API documentation](http://dev.baasic.com/api/reference/home) for detailed information about available Baasic REST API end-points.\r\n - [URI Template](https://github.com/Baasic/uritemplate-js) syntax enables expanding the Baasic route templates to Baasic REST URIs providing it with an object that contains URI parameters.\r\n - All end-point objects are transformed by the associated route service.\r\n */ \r\n\n\n\n//////////////////\n// WEBPACK FOOTER\n// ./src/modules/mediaVault/MediaVaultStreamsRoute.ts\n// module id = 254\n// module chunks = 0","\"use strict\";\r\nObject.defineProperty(exports, \"__esModule\", { value: true });\r\nvar inversify_1 = require(\"inversify\");\r\nvar _1 = require(\"./\");\r\nvar TYPES = {\r\n    MediaVaultBatchRoute: Symbol(\"MediaVaultBatchRoute\"),\r\n    MediaVaultBatchClient: Symbol(\"MediaVaultBatchClient\"),\r\n    MediaVaultRoute: Symbol(\"MediaVaultRoute\"),\r\n    MediaVaultProcessingProviderSettingsClient: Symbol(\"MediaVaultProcessingProviderSettingsClient\"),\r\n    MediaVaultProcessingProviderSettingsRoute: Symbol(\"MediaVaultProcessingProviderSettingsRoute\"),\r\n    MediaVaultClient: Symbol(\"MediaVaultClient\"),\r\n    MediaVaultSettingsRoute: Symbol(\"MediaVaultSettingsRoute\"),\r\n    MediaVaultSettingsClient: Symbol(\"MediaVaultSettingsClient\"),\r\n    MediaVaultStreamsRoute: Symbol(\"MediaVaultStreamsRoute\"),\r\n    MediaVaultStreamsClient: Symbol(\"MediaVaultStreamsClient\")\r\n};\r\nexports.TYPES = TYPES;\r\nvar diModule = new inversify_1.ContainerModule(function (bind) {\r\n    bind(TYPES.MediaVaultStreamsRoute).to(_1.MediaVaultStreamsRoute);\r\n    bind(TYPES.MediaVaultStreamsClient).to(_1.MediaVaultStreamsClient);\r\n    bind(TYPES.MediaVaultBatchRoute).to(_1.MediaVaultBatchRoute);\r\n    bind(TYPES.MediaVaultBatchClient).to(_1.MediaVaultBatchClient);\r\n    bind(TYPES.MediaVaultSettingsRoute).to(_1.MediaVaultSettingsRoute);\r\n    bind(TYPES.MediaVaultSettingsClient).to(_1.MediaVaultSettingsClient);\r\n    bind(TYPES.MediaVaultProcessingProviderSettingsRoute).to(_1.MediaVaultProcessingProviderSettingsRoute);\r\n    bind(TYPES.MediaVaultProcessingProviderSettingsClient).to(_1.MediaVaultProcessingProviderSettingsClient);\r\n    bind(TYPES.MediaVaultRoute).to(_1.MediaVaultRoute);\r\n    bind(TYPES.MediaVaultClient).to(_1.MediaVaultClient);\r\n});\r\nexports.diModule = diModule;\r\n\n\n\n//////////////////\n// WEBPACK FOOTER\n// ./src/modules/mediaVault/diModule.ts\n// module id = 255\n// module chunks = 0","\"use strict\";\r\nObject.defineProperty(exports, \"__esModule\", { value: true });\r\nvar inversify_1 = require(\"inversify\");\r\nvar _1 = require(\"./\");\r\nvar TYPES = {\r\n    LoginRoute: Symbol(\"LoginRoute\"),\r\n    LoginClient: Symbol(\"LoginClient\"),\r\n    LoginSocialRoute: Symbol(\"LoginSocialRoute\"),\r\n    LoginSocialClient: Symbol(\"LoginSocialClient\"),\r\n    PasswordRecoveryClient: Symbol(\"PasswordRecoveryClient\"),\r\n    PasswordRecoveryRoute: Symbol(\"PasswordRecoveryRoute\"),\r\n    RegisterClient: Symbol(\"RegisterClient\"),\r\n    RegisterRoute: Symbol(\"RegisterRoute\"),\r\n    RoleClient: Symbol(\"RoleClient\"),\r\n    RoleRoute: Symbol(\"RoleRoute\"),\r\n    UserSocialLoginClient: Symbol(\"UserSocialLoginClient\"),\r\n    UserSocialLoginRoute: Symbol(\"UserSocialLoginRoute\"),\r\n    UserClient: Symbol(\"UserClient\"),\r\n    UserRoute: Symbol(\"UserRoute\"),\r\n    PermissionRoute: Symbol(\"PermissionRoute\"),\r\n    PermissionClient: Symbol(\"PermissionClient\"),\r\n    LookupRoute: Symbol(\"LookupRoute\"),\r\n    LookupClient: Symbol(\"LookupClient\"),\r\n    Root: Symbol(\"Membership-Root\")\r\n};\r\nexports.TYPES = TYPES;\r\nvar diModule = new inversify_1.ContainerModule(function (bind) {\r\n    bind(TYPES.LoginSocialRoute).to(_1.LoginSocialRoute);\r\n    bind(TYPES.LoginSocialClient).to(_1.LoginSocialClient);\r\n    bind(TYPES.LoginRoute).to(_1.LoginRoute);\r\n    bind(TYPES.LoginClient).to(_1.LoginClient);\r\n    bind(TYPES.PasswordRecoveryRoute).to(_1.PasswordRecoveryRoute);\r\n    bind(TYPES.PasswordRecoveryClient).to(_1.PasswordRecoveryClient);\r\n    bind(TYPES.RegisterRoute).to(_1.RegisterRoute);\r\n    bind(TYPES.RegisterClient).to(_1.RegisterClient);\r\n    bind(TYPES.RoleRoute).to(_1.RoleRoute);\r\n    bind(TYPES.RoleClient).to(_1.RoleClient);\r\n    bind(TYPES.UserSocialLoginRoute).to(_1.UserSocialLoginRoute);\r\n    bind(TYPES.UserSocialLoginClient).to(_1.UserSocialLoginClient);\r\n    bind(TYPES.UserRoute).to(_1.UserRoute);\r\n    bind(TYPES.UserClient).to(_1.UserClient);\r\n    bind(TYPES.PermissionRoute).to(_1.PermissionRoute);\r\n    bind(TYPES.PermissionClient).to(_1.PermissionClient);\r\n    bind(TYPES.LookupRoute).to(_1.LookupRoute);\r\n    bind(TYPES.LookupClient).to(_1.LookupClient);\r\n    bind(TYPES.Root).to(_1.Root);\r\n});\r\nexports.diModule = diModule;\r\n\n\n\n//////////////////\n// WEBPACK FOOTER\n// ./src/modules/membership/diModule.ts\n// module id = 256\n// module chunks = 0","/* globals module */\r\n/**\r\n * @module loginClient\r\n * @description  Login Client provides an easy way to consume  Application Registration REST API end-points. In order to obtain needed routes `loginClient` uses `loginRoute`.\r\n */\r\n\"use strict\";\r\nObject.defineProperty(exports, \"__esModule\", { value: true });\r\nvar tslib_1 = require(\"tslib\");\r\nvar inversify_1 = require(\"inversify\");\r\nvar common_1 = require(\"../../common\");\r\nvar contracts_1 = require(\"../../core/contracts\");\r\nvar httpApi_1 = require(\"../../httpApi\");\r\nvar _1 = require(\"./\");\r\nvar LoginClient = (function () {\r\n    function LoginClient(loginRoute, tokenHandler, apiClient) {\r\n        this.loginRoute = loginRoute;\r\n        this.tokenHandler = tokenHandler;\r\n        this.apiClient = apiClient;\r\n        this.utility = new common_1.Utility();\r\n    }\r\n    Object.defineProperty(LoginClient.prototype, \"routeDefinition\", {\r\n        get: function () {\r\n            return this.loginRoute;\r\n        },\r\n        enumerable: true,\r\n        configurable: true\r\n    });\r\n    /**\r\n     * Returns a promise that is resolved once the login action has been performed. This action logs user into the application and success response returns the token resource.\r\n     * @method\r\n     * @example loginClient.login({\r\n                    username : '<username>',\r\n                    password : '<password>',\r\n                    options : ['session', 'sliding']\r\n                })\r\n                .then(function (data) {\r\n                    // perform success actions here\r\n                },\r\n                 function (data, status) {\r\n                     // perform error handling here\r\n                })\r\n                .finally (function () {});\r\n     **/\r\n    LoginClient.prototype.login = function (data) {\r\n        var settings = this.utility.extend({}, data);\r\n        if (settings.options) {\r\n            var options = settings.options;\r\n            if (options instanceof Array) {\r\n                settings.options = options.join();\r\n            }\r\n        }\r\n        var loginData = this.transformData({\r\n            grant_type: 'password',\r\n            username: settings.username,\r\n            password: settings.password\r\n        });\r\n        var self = this;\r\n        return this.apiClient.createPromise(function (resolve, reject) {\r\n            self.apiClient.post(self.loginRoute.login(settings), loginData, { 'Content-Type': 'application/x-www-form-urlencoded; charset=UTF-8' })\r\n                .then(function (data) {\r\n                var token = {\r\n                    token: data.data.access_token,\r\n                    expires_in: data.data.expires_in,\r\n                    sliding_window: data.data.sliding_window,\r\n                    tokenUrl: data.data.access_url_token,\r\n                    type: data.data.token_type\r\n                };\r\n                self.tokenHandler.store(token);\r\n                resolve(data);\r\n            }, function (data) {\r\n                reject(data);\r\n            });\r\n        });\r\n    };\r\n    /**\r\n     * Returns a promise that is resolved once the loadUserData action has been performed. This action retrieves the account information of the currently logged in user. Retrieved account information will contain permission collection which identifies access policies assigned to the user and application sections.\r\n     * @method\r\n     * @example loginClient.loadUserData()\r\n                    .then(function (data) {\r\n                        // perform success actions here\r\n                    },\r\n                     function (data) {\r\n                         // perform error handling here\r\n                    })\r\n                    .finally (function () {});\r\n     */\r\n    LoginClient.prototype.loadUserData = function (data) {\r\n        data = data || {};\r\n        return this.apiClient.get(this.loginRoute.login(data), { 'Accept': 'application/json; charset=UTF-8' });\r\n    };\r\n    /**\r\n     * Returns a promise that is resolved once the logout action has been performed. This action invalidates user token logging the user out of the system.\r\n     * @method\r\n     * @param token Authentication token which uniquely identifies user that needs to be logged out from the system.\r\n     * @param type Token type.\r\n     * @returns A promise that is resolved once the logout action has been performed.\r\n     * @example let token = baasicAuthorizationService.getAccessToken();\r\n                loginClient.logout(token.access_token, token.token_type)\r\n                .then(function (data) {\r\n                    // perform success handling here\r\n                }, function() {\r\n                    // perform error handling here\r\n                })\r\n                .finally (function () {});\r\n     */\r\n    LoginClient.prototype.logout = function (token, type) {\r\n        var data = {\r\n            token: token,\r\n            type: type\r\n        };\r\n        var self = this;\r\n        return this.apiClient.createPromise(function (resolve, reject) {\r\n            self.apiClient.delete(self.loginRoute.login({}), null, data)\r\n                .then(function (result) {\r\n                self.tokenHandler.store(null);\r\n                resolve();\r\n            }, function (result) {\r\n                reject(result);\r\n            });\r\n        });\r\n    };\r\n    /**\r\n     * Returns url encoded form data.\r\n     */\r\n    LoginClient.prototype.transformData = function (data) {\r\n        var items = [];\r\n        for (var key in data) {\r\n            items.push([encodeURIComponent(key), encodeURIComponent(data[key])].join('='));\r\n        }\r\n        return items.join('&');\r\n    };\r\n    return LoginClient;\r\n}());\r\nLoginClient = tslib_1.__decorate([\r\n    inversify_1.injectable(),\r\n    tslib_1.__param(0, inversify_1.inject(_1.TYPES.LoginRoute)),\r\n    tslib_1.__param(1, inversify_1.inject(contracts_1.TYPES.ITokenHandler)),\r\n    tslib_1.__param(2, inversify_1.inject(httpApi_1.httpTYPES.ApiClient)),\r\n    tslib_1.__metadata(\"design:paramtypes\", [typeof (_a = typeof _1.LoginRoute !== \"undefined\" && _1.LoginRoute) === \"function\" && _a || Object, typeof (_b = typeof contracts_1.ITokenHandler !== \"undefined\" && contracts_1.ITokenHandler) === \"function\" && _b || Object, typeof (_c = typeof httpApi_1.ApiClient !== \"undefined\" && httpApi_1.ApiClient) === \"function\" && _c || Object])\r\n], LoginClient);\r\nexports.LoginClient = LoginClient;\r\nvar _a, _b, _c;\r\n/**\r\n * @overview\r\n  ***Notes:**\r\n  - Refer to the [Baasic REST API](http://dev.baasic.com/api/reference/home) for detailed information about available Baasic REST API end-points.\r\n  - All end-point objects are transformed by the associated route definition.\r\n  */ \r\n\n\n\n//////////////////\n// WEBPACK FOOTER\n// ./src/modules/membership/loginClient.ts\n// module id = 257\n// module chunks = 0","\"use strict\";\r\nObject.defineProperty(exports, \"__esModule\", { value: true });\r\nvar tslib_1 = require(\"tslib\");\r\n/* globals module */\r\n/**\r\n * @module loginRoute\r\n * @description Baasic Login Route Definition provides Baasic route templates which can be expanded to Baasic REST URIs. Various services can use Baasic Login Route Definition to obtain needed routes while other routes will be obtained through HAL. By convention, all route services use the same function names as their corresponding services.\r\n */\r\nvar inversify_1 = require(\"inversify\");\r\nvar common_1 = require(\"../../common\");\r\nvar contracts_1 = require(\"../../core/contracts\");\r\nvar LoginRoute = (function (_super) {\r\n    tslib_1.__extends(LoginRoute, _super);\r\n    function LoginRoute(appOptions) {\r\n        var _this = _super.call(this, appOptions) || this;\r\n        _this.appOptions = appOptions;\r\n        /**\r\n         * Login route with route and query parameters.\r\n         **/\r\n        _this.loginRoute = 'login/{?embed,fields,options}';\r\n        return _this;\r\n    }\r\n    /**\r\n     * Parses login route which can be expanded with additional options. Supported items are:\r\n     * - `options` - Comma separated list of options used to setup authentication token with cookie session. Supported values are: \"session\" and \"sliding\".\r\n     * @method\r\n     * @example loginRoute.login( {options: 'sliding'});\r\n     **/\r\n    LoginRoute.prototype.login = function (options) {\r\n        return _super.prototype.baseCreate.call(this, this.loginRoute, options);\r\n    };\r\n    return LoginRoute;\r\n}(common_1.BaseRoute));\r\nLoginRoute = tslib_1.__decorate([\r\n    inversify_1.injectable(),\r\n    tslib_1.__param(0, inversify_1.inject(contracts_1.TYPES.IAppOptions)),\r\n    tslib_1.__metadata(\"design:paramtypes\", [typeof (_a = typeof contracts_1.IAppOptions !== \"undefined\" && contracts_1.IAppOptions) === \"function\" && _a || Object])\r\n], LoginRoute);\r\nexports.LoginRoute = LoginRoute;\r\nvar _a;\r\n/**\r\n * @overview\r\n ***Notes:**\r\n - Refer to the [Baasic REST API](http://dev.baasic.com/api/reference/home) for detailed information about available Baasic REST API end-points.\r\n - [URI Template](https://github.com/Baasic/uritemplate-js) syntax enables expanding the Baasic route templates to Baasic REST URIs providing it with an object that contains URI parameters.\r\n - All end-point objects are transformed by the associated route definition.\r\n */ \r\n\n\n\n//////////////////\n// WEBPACK FOOTER\n// ./src/modules/membership/loginRoute.ts\n// module id = 258\n// module chunks = 0","/* globals module */\r\n/**\r\n * @module loginSocialClient\r\n * @description  Login Social Client provides an easy way to consume  Application Registration REST API end-points. In order to obtain needed routes `loginSocialClient` uses `loginSocialRoute`.\r\n */\r\n\"use strict\";\r\nObject.defineProperty(exports, \"__esModule\", { value: true });\r\nvar tslib_1 = require(\"tslib\");\r\nvar inversify_1 = require(\"inversify\");\r\nvar httpApi_1 = require(\"../../httpApi\");\r\nvar contracts_1 = require(\"../../core/contracts\");\r\nvar _1 = require(\"./\");\r\nvar LoginSocialClient = (function () {\r\n    function LoginSocialClient(loginSocialRoute, tokenHandler, apiClient) {\r\n        this.loginSocialRoute = loginSocialRoute;\r\n        this.tokenHandler = tokenHandler;\r\n        this.apiClient = apiClient;\r\n    }\r\n    Object.defineProperty(LoginSocialClient.prototype, \"routeDefinition\", {\r\n        get: function () {\r\n            return this.loginSocialRoute;\r\n        },\r\n        enumerable: true,\r\n        configurable: true\r\n    });\r\n    /**\r\n     * Returns a promise that is resolved once the get action has been performed. Success response returns a resolved social login provider Url.\r\n     * @method\r\n     * @param provider Provider name or id for which the login URL should be generated.\r\n     * @param returnUrl Redirect Uri for the provider which will be used when the user is redirected back to the application.\r\n     * @returns A promise that is resolved once the get action has been performed.\r\n     * @example loginSocialClient.get('<provider>', '<returnUrl>')\r\n                    .then(function (collection) {\r\n                        // perform success action here\r\n                    },\r\n                     function (response, status, headers, config) {\r\n                         // perform error handling here\r\n                    });\r\n     **/\r\n    LoginSocialClient.prototype.get = function (provider, returnUrl) {\r\n        return this.apiClient.get(this.loginSocialRoute.get(provider, returnUrl));\r\n    };\r\n    /**\r\n     * Returns a promise that is resolved once the post action has been performed. This action logs user into the application and success response returns the token resource.\r\n     * @method\r\n     * @param provider Provider name or Id which uniquely identifies social login for which access token should be issued.\r\n     * @param data Object used to identify social login information.\r\n     * @param options Comma separated list of additional options defining token behavior. Supported values are: \"session\" and \"sliding\".\r\n     * @example let postData = {\r\n                    email : '<email>',\r\n                    code:'<code>',\r\n                    activationUrl : '<activationUrl>',\r\n                    oAuthToken : '<oAuthToken>',\r\n                    oAuthVerifier : '<oAuthVerifier>',\r\n                    password : '<password>',\r\n                    returnUrl : '<returnUrl>'\r\n                };\r\n                loginSocialClient.post('<provider>', postData)\r\n                    .then(function (collection) {\r\n                        // perform success action here\r\n                    },\r\n                     function (response, status, headers, config) {\r\n                         // perform error handling here\r\n                    });\r\n     **/\r\n    LoginSocialClient.prototype.post = function (provider, data, options) {\r\n        var params = { provider: provider };\r\n        if (options) {\r\n            params.options = options;\r\n        }\r\n        var self = this;\r\n        return this.apiClient.createPromise(function (resolve, reject) {\r\n            self.apiClient.post(self.loginSocialRoute.post(provider, options), self.loginSocialRoute.createParams(data), { 'Content-Type': 'application/json; charset=UTF-8' })\r\n                .then(function (data) {\r\n                if (data) {\r\n                    var token = {\r\n                        token: data.data.access_token,\r\n                        expires_in: data.data.expires_in,\r\n                        sliding_window: data.data.sliding_window,\r\n                        tokenUrl: data.data.access_url_token,\r\n                        type: data.data.token_type\r\n                    };\r\n                    self.tokenHandler.store(token);\r\n                }\r\n                resolve(data);\r\n            }, function (data) {\r\n                reject(data);\r\n            });\r\n        });\r\n    };\r\n    LoginSocialClient.prototype.parseResponse = function (provider, returnUrl) {\r\n        var params = this.parseUrlParams();\r\n        var result = {};\r\n        switch (provider) {\r\n            case 'twitter':\r\n                /** jshint camelcase: false*/\r\n                result.oAuthToken = params.oauth_token;\r\n                result.oAuthVerifier = params.oauth_verifier;\r\n                break;\r\n            default:\r\n                result.code = params.code;\r\n                result.returnUrl = returnUrl;\r\n                break;\r\n        }\r\n        return result;\r\n    };\r\n    // Getting query string values in javascript: http://stackoverflow.com/questions/901115/how-can-i-get-query-string-values-in-javascript\r\n    LoginSocialClient.prototype.parseUrlParams = function () {\r\n        var urlParams;\r\n        var match, pl = /\\+/g, search = /([^&=]+)=?([^&]*)/g, decode = function (s) { return decodeURIComponent(s.replace(pl, ' ')); }, query = window.location.search.substring(1);\r\n        urlParams = {};\r\n        /* jshint -W084*/\r\n        while (match = search.exec(query)) {\r\n            urlParams[decode(match[1])] = decode(match[2]);\r\n        }\r\n        return urlParams;\r\n    };\r\n    return LoginSocialClient;\r\n}());\r\nLoginSocialClient = tslib_1.__decorate([\r\n    inversify_1.injectable(),\r\n    tslib_1.__param(0, inversify_1.inject(_1.TYPES.LoginSocialRoute)),\r\n    tslib_1.__param(1, inversify_1.inject(contracts_1.TYPES.ITokenHandler)),\r\n    tslib_1.__param(2, inversify_1.inject(httpApi_1.httpTYPES.ApiClient)),\r\n    tslib_1.__metadata(\"design:paramtypes\", [typeof (_a = typeof _1.LoginSocialRoute !== \"undefined\" && _1.LoginSocialRoute) === \"function\" && _a || Object, typeof (_b = typeof contracts_1.ITokenHandler !== \"undefined\" && contracts_1.ITokenHandler) === \"function\" && _b || Object, typeof (_c = typeof httpApi_1.ApiClient !== \"undefined\" && httpApi_1.ApiClient) === \"function\" && _c || Object])\r\n], LoginSocialClient);\r\nexports.LoginSocialClient = LoginSocialClient;\r\nvar _a, _b, _c;\r\n/**\r\n * @overview\r\n ***Notes:**\r\n - Refer to the [Baasic REST API](http://dev.baasic.com/api/reference/home) for detailed information about available Baasic REST API end-points.\r\n - All end-point objects are transformed by the associated route definition.\r\n */ \r\n\n\n\n//////////////////\n// WEBPACK FOOTER\n// ./src/modules/membership/loginSocialClient.ts\n// module id = 259\n// module chunks = 0","/* globals module */\r\n/**\r\n * @module loginSocialRoute\r\n * @description Baasic Login Social Route Definition provides Baasic route templates which can be expanded to Baasic REST URIs. Various services can use Baasic Login Social Route Definition to obtain needed routes while other routes will be obtained through HAL. By convention, all route services use the same function names as their corresponding services.\r\n */\r\n\"use strict\";\r\nObject.defineProperty(exports, \"__esModule\", { value: true });\r\nvar tslib_1 = require(\"tslib\");\r\nvar inversify_1 = require(\"inversify\");\r\nvar common_1 = require(\"../../common\");\r\nvar contracts_1 = require(\"../../core/contracts\");\r\nvar LoginSocialRoute = (function (_super) {\r\n    tslib_1.__extends(LoginSocialRoute, _super);\r\n    function LoginSocialRoute(appOptions) {\r\n        var _this = _super.call(this, appOptions) || this;\r\n        _this.appOptions = appOptions;\r\n        /**\r\n        * Social login get route with route and query parameters.\r\n        **/\r\n        _this.getRoute = 'login/social/{provider}/{?returnUrl}';\r\n        /**\r\n        * Social login post route with route and query parameters.\r\n        **/\r\n        _this.postRoute = 'login/social/{provider}/{?embed,fields,options}';\r\n        return _this;\r\n    }\r\n    /**\r\n     * Parses get social login route which can be expanded with additional items. Supported items are:\r\n     * - `provider` - Provider name or Id for which the login URL should be generated.\r\n     * - `returnUrl` - Redirect Uri for the provider which will be used when the user is redirected back to the application.\r\n     * @method\r\n     * @param provider Provider name or id for which the login URL should be generated.\r\n     * @param returnUrl Redirect Uri for the provider which will be used when the user is redirected back to the application.\r\n     * @example loginSocialRoute.get({   provider : '<provider>',   returnUrl: '<returnUrl>' });\r\n     **/\r\n    LoginSocialRoute.prototype.get = function (provider, returnUrl) {\r\n        var params = {\r\n            provider: provider,\r\n            returnUrl: returnUrl\r\n        };\r\n        return _super.prototype.baseFind.call(this, this.getRoute, params);\r\n    };\r\n    /**\r\n     * Parses post social login route which can be expanded with additional items. Supported items are:\r\n     * - `provider` - Provider name or Id being used to login with.\r\n     * @method\r\n     * @example loginSocialClient.post({ provider : '<provider>' });\r\n     **/\r\n    LoginSocialRoute.prototype.post = function (provider, options) {\r\n        return _super.prototype.baseCreate.call(this, this.postRoute, { provider: provider, options: options });\r\n    };\r\n    return LoginSocialRoute;\r\n}(common_1.BaseRoute));\r\nLoginSocialRoute = tslib_1.__decorate([\r\n    inversify_1.injectable(),\r\n    tslib_1.__param(0, inversify_1.inject(contracts_1.TYPES.IAppOptions)),\r\n    tslib_1.__metadata(\"design:paramtypes\", [typeof (_a = typeof contracts_1.IAppOptions !== \"undefined\" && contracts_1.IAppOptions) === \"function\" && _a || Object])\r\n], LoginSocialRoute);\r\nexports.LoginSocialRoute = LoginSocialRoute;\r\nvar _a;\r\n\n\n\n//////////////////\n// WEBPACK FOOTER\n// ./src/modules/membership/loginSocialRoute.ts\n// module id = 260\n// module chunks = 0","/* globals module */\r\n/**\r\n * @module lookupClient\r\n * @description  Lookup Client provides an easy way to consume  Lookup REST API end-points. In order to obtain needed routes `lookupClient` uses `lookupRoute`.\r\n */\r\n\"use strict\";\r\nObject.defineProperty(exports, \"__esModule\", { value: true });\r\nvar tslib_1 = require(\"tslib\");\r\nvar inversify_1 = require(\"inversify\");\r\n;\r\nvar common_1 = require(\"../../common\");\r\nvar _1 = require(\"./\");\r\nvar httpApi_1 = require(\"../../httpApi\");\r\nvar LookupClient = (function () {\r\n    function LookupClient(lookupRoute, apiClient) {\r\n        this.lookupRoute = lookupRoute;\r\n        this.apiClient = apiClient;\r\n        this.utility = new common_1.Utility();\r\n    }\r\n    Object.defineProperty(LookupClient.prototype, \"routeDefinition\", {\r\n        get: function () {\r\n            return this.lookupRoute;\r\n        },\r\n        enumerable: true,\r\n        configurable: true\r\n    });\r\n    LookupClient.prototype.getResponseData = function (embed, data) {\r\n        var responseData = {};\r\n        if (embed) {\r\n            var embeds = embed.split(',');\r\n        }\r\n        for (var index in embeds) {\r\n            var propName = embeds[index];\r\n            if (data.hasOwnProperty(propName)) {\r\n                responseData[propName] = data[propName];\r\n            }\r\n        }\r\n        return responseData;\r\n    };\r\n    /**\r\n     * Returns a promise that is resolved once the get action has been performed. Success response returns the lookup resources.\r\n     * @method\r\n     * @param options Options object that contains comma separated list of related resources to be contained within the current representation.\r\n     * @returns A promise that is resolved once the get action has been performed.\r\n     * @example lookupClient.get()\r\n                    .then(function (data) {\r\n                        // perform success action here\r\n                    },\r\n                     function (response, status, headers, config) {\r\n                         // perform error handling here\r\n                    });\r\n     **/\r\n    LookupClient.prototype.get = function (options) {\r\n        var _this = this;\r\n        var embed = options.embed || 'role,accessAction,accessSection,snProvider';\r\n        var opt = this.utility.extend({}, options, { embed: embed });\r\n        var self = this;\r\n        return this.apiClient.createPromise(function (resolve, reject) {\r\n            self.apiClient.get(_this.lookupRoute.get(opt))\r\n                .then(function (data) {\r\n                data.data = self.getResponseData(embed, data.data);\r\n                resolve(data);\r\n            }, function (data) {\r\n                reject(data);\r\n            });\r\n        });\r\n    };\r\n    return LookupClient;\r\n}());\r\nLookupClient = tslib_1.__decorate([\r\n    inversify_1.injectable(),\r\n    tslib_1.__param(0, inversify_1.inject(_1.TYPES.LookupRoute)),\r\n    tslib_1.__param(1, inversify_1.inject(httpApi_1.httpTYPES.ApiClient)),\r\n    tslib_1.__metadata(\"design:paramtypes\", [typeof (_a = typeof _1.LookupRoute !== \"undefined\" && _1.LookupRoute) === \"function\" && _a || Object, typeof (_b = typeof httpApi_1.ApiClient !== \"undefined\" && httpApi_1.ApiClient) === \"function\" && _b || Object])\r\n], LookupClient);\r\nexports.LookupClient = LookupClient;\r\nvar _a, _b;\r\n/**\r\n * @overview\r\n ***Notes:**\r\n - Refer to the [Baasic REST API](http://dev.baasic.com/api/reference/home) for detailed information about available Baasic REST API end-points.\r\n - All end-point objects are transformed by the associated route service.\r\n */ \r\n\n\n\n//////////////////\n// WEBPACK FOOTER\n// ./src/modules/membership/lookupClient.ts\n// module id = 261\n// module chunks = 0","/* globals module */\r\n/**\r\n *@module lookupRoute\r\n * @description Baasic Lookup Route Definition provides Baasic route templates which can be expanded to Baasic REST URIs. Various services can use Baasic Lookup Route Definition to obtain needed routes while other routes will be obtained through HAL. By convention, all route services  use the same function names as their corresponding services.\r\n */\r\n\"use strict\";\r\nObject.defineProperty(exports, \"__esModule\", { value: true });\r\nvar tslib_1 = require(\"tslib\");\r\nvar inversify_1 = require(\"inversify\");\r\nvar common_1 = require(\"../../common\");\r\nvar contracts_1 = require(\"../../core/contracts\");\r\nvar LookupRoute = (function (_super) {\r\n    tslib_1.__extends(LookupRoute, _super);\r\n    function LookupRoute(appOptions) {\r\n        var _this = _super.call(this, appOptions) || this;\r\n        _this.appOptions = appOptions;\r\n        /**\r\n        * Get route with route and query parameters.\r\n        **/\r\n        _this.getRoute = 'lookups/{?embed,fields}';\r\n        return _this;\r\n    }\r\n    /**\r\n     * Parses get route which can be expanded with additional options. Supported items are:\r\n     * - `embed` - Comma separated list of resources to be contained within the current representation.\r\n     * @method\r\n     * @example baasicLookupRouteService.get(data);\r\n     **/\r\n    LookupRoute.prototype.get = function (data) {\r\n        return _super.prototype.baseCreate.call(this, this.getRoute, data);\r\n    };\r\n    return LookupRoute;\r\n}(common_1.BaseRoute));\r\nLookupRoute = tslib_1.__decorate([\r\n    inversify_1.injectable(),\r\n    tslib_1.__param(0, inversify_1.inject(contracts_1.TYPES.IAppOptions)),\r\n    tslib_1.__metadata(\"design:paramtypes\", [typeof (_a = typeof contracts_1.IAppOptions !== \"undefined\" && contracts_1.IAppOptions) === \"function\" && _a || Object])\r\n], LookupRoute);\r\nexports.LookupRoute = LookupRoute;\r\nvar _a;\r\n/**\r\n * @overview\r\n ***Notes:**\r\n - Refer to the [Baasic REST API](http://dev.baasic.com/api/reference/home) for detailed information about available Baasic REST API end-points.\r\n - [URI Template](https://github.com/Baasic/uritemplate-js) syntax enables expanding the Baasic route templates to Baasic REST URIs providing it with an object that contains URI parameters.\r\n - All end-point objects are transformed by the associated route service.\r\n */ \r\n\n\n\n//////////////////\n// WEBPACK FOOTER\n// ./src/modules/membership/lookupRoute.ts\n// module id = 262\n// module chunks = 0","/* globals module */\r\n/**\r\n * @module passwordRecoveryClient\r\n * @description  Password Recovery Client provides an easy way to consume  Password Recovery REST API end-points. In order to obtain needed routes `passwordRecoveryClient` uses `passwordRecoveryRoute`.\r\n*/\r\n\"use strict\";\r\nObject.defineProperty(exports, \"__esModule\", { value: true });\r\nvar tslib_1 = require(\"tslib\");\r\nvar inversify_1 = require(\"inversify\");\r\nvar httpApi_1 = require(\"../../httpApi\");\r\nvar _1 = require(\"./\");\r\nvar PasswordRecoveryClient = (function () {\r\n    function PasswordRecoveryClient(passwordRecoveryRoute, apiClient) {\r\n        this.passwordRecoveryRoute = passwordRecoveryRoute;\r\n        this.apiClient = apiClient;\r\n    }\r\n    Object.defineProperty(PasswordRecoveryClient.prototype, \"routeDefinition\", {\r\n        /**\r\n         * Provides direct access to `passwordRecoveryRoute`.\r\n         * @method\r\n         * @example passwordRecoveryClient.routeDefinition.requestReset(data);\r\n         **/\r\n        get: function () {\r\n            return this.passwordRecoveryRoute;\r\n        },\r\n        enumerable: true,\r\n        configurable: true\r\n    });\r\n    /**\r\n     * Returns a promise that is resolved once the password recovery requestReset action is completed. This action initiates the password recovery process for the user.\r\n     * @method\r\n     * @param data A password recovery object which contains parameters required for the password retrieval request.\r\n     * @example passwordRecoveryClient.requestReset({\r\n                    challengeIdentifier : '<challenge-identifier>',\r\n                    challengeResponse : '<challenge-response>',\r\n                    recoverUrl : '<recover-url>',\r\n                    username : '<username>'\r\n                })\r\n                .then(function () {\r\n                    // perform success action here\r\n                },\r\n                 function (data) {\r\n                    // perform error handling here\r\n                })\r\n                .finally (function () {});\r\n     */\r\n    PasswordRecoveryClient.prototype.requestReset = function (data) {\r\n        return this.apiClient.post(this.passwordRecoveryRoute.passwordRecovery(), data);\r\n    };\r\n    /**\r\n     * Returns a promise that is resolved once the password reset action is completed. This updates user's password selection.\r\n     * @method\r\n     * @param data Password recovery object used to update user's current password selection.\r\n     * @example passwordRecoveryClient.reset({\r\n                    newPassword : '<new-password>',\r\n                    passwordRecoveryToken : '<password-recovery-token>'\r\n                })\r\n                .then(function () {\r\n                    // perform success action here\r\n                },\r\n                 function (data) {\r\n                    // perform error handling here\r\n                })\r\n                .finally (function () {});\r\n     */\r\n    PasswordRecoveryClient.prototype.reset = function (data) {\r\n        return this.apiClient.put(this.passwordRecoveryRoute.passwordRecovery(), data);\r\n    };\r\n    return PasswordRecoveryClient;\r\n}());\r\nPasswordRecoveryClient = tslib_1.__decorate([\r\n    inversify_1.injectable(),\r\n    tslib_1.__param(0, inversify_1.inject(_1.TYPES.PasswordRecoveryRoute)),\r\n    tslib_1.__param(1, inversify_1.inject(httpApi_1.httpTYPES.ApiClient)),\r\n    tslib_1.__metadata(\"design:paramtypes\", [typeof (_a = typeof _1.PasswordRecoveryRoute !== \"undefined\" && _1.PasswordRecoveryRoute) === \"function\" && _a || Object, typeof (_b = typeof httpApi_1.ApiClient !== \"undefined\" && httpApi_1.ApiClient) === \"function\" && _b || Object])\r\n], PasswordRecoveryClient);\r\nexports.PasswordRecoveryClient = PasswordRecoveryClient;\r\nvar _a, _b;\r\n/**\r\n * @overview\r\n ***Notes:**\r\n - Refer to the [Baasic REST API](http://dev.baasic.com/api/reference/home) for detailed information about available Baasic REST API end-points.\r\n - All end-point objects are transformed by the associated route service.\r\n*/ \r\n\n\n\n//////////////////\n// WEBPACK FOOTER\n// ./src/modules/membership/passwordRecoveryClient.ts\n// module id = 263\n// module chunks = 0","/* globals module */\r\n/**\r\n * @module passwordRecoveryRoute\r\n * @description Baasic Password Recovery Route Definition provides Baasic route templates which can be expanded to Baasic REST URIs. Various services can use Baasic Password Recovery Route Service to obtain needed routes while other routes will be obtained through HAL. By convention, all route services use the same function names as their corresponding services.\r\n*/\r\n\"use strict\";\r\nObject.defineProperty(exports, \"__esModule\", { value: true });\r\nvar tslib_1 = require(\"tslib\");\r\nvar inversify_1 = require(\"inversify\");\r\nvar common_1 = require(\"../../common\");\r\nvar contracts_1 = require(\"../../core/contracts\");\r\nvar PasswordRecoveryRoute = (function (_super) {\r\n    tslib_1.__extends(PasswordRecoveryRoute, _super);\r\n    function PasswordRecoveryRoute(appOptions) {\r\n        var _this = _super.call(this, appOptions) || this;\r\n        _this.appOptions = appOptions;\r\n        /**\r\n        * Password recovery route with route and query parameters.\r\n        **/\r\n        _this.passwordRecoveryRoute = 'recover-password';\r\n        return _this;\r\n    }\r\n    /**\r\n     * Parses recover-password route, recover-password route doesn't expose any additional properties.\r\n     * @method\r\n     * @example passwordRecoveryRoute.passwordRecovery();\r\n     **/\r\n    PasswordRecoveryRoute.prototype.passwordRecovery = function () {\r\n        return _super.prototype.baseCreate.call(this, this.passwordRecoveryRoute, {});\r\n    };\r\n    return PasswordRecoveryRoute;\r\n}(common_1.BaseRoute));\r\nPasswordRecoveryRoute = tslib_1.__decorate([\r\n    inversify_1.injectable(),\r\n    tslib_1.__param(0, inversify_1.inject(contracts_1.TYPES.IAppOptions)),\r\n    tslib_1.__metadata(\"design:paramtypes\", [typeof (_a = typeof contracts_1.IAppOptions !== \"undefined\" && contracts_1.IAppOptions) === \"function\" && _a || Object])\r\n], PasswordRecoveryRoute);\r\nexports.PasswordRecoveryRoute = PasswordRecoveryRoute;\r\nvar _a;\r\n/**\r\n * @overview\r\n ***Notes:**\r\n - Refer to the [Baasic REST API](http://dev.baasic.com/api/reference/home) for detailed information about available Baasic REST API end-points.\r\n - [URI Template](https://github.com/Baasic/uritemplate-js) syntax enables expanding the Baasic route templates to Baasic REST URIs providing it with an object that contains URI parameters.\r\n - All end-point objects are transformed by the associated route definition.\r\n*/ \r\n\n\n\n//////////////////\n// WEBPACK FOOTER\n// ./src/modules/membership/passwordRecoveryRoute.ts\n// module id = 264\n// module chunks = 0","/* globals module */\r\n/**\r\n * @module permissionClient\r\n * @description  Role Client provides an easy way to consume  Role REST API end-points. In order to obtain needed routes `permissionClient` uses `permissionRoute`.\r\n */\r\n\"use strict\";\r\nObject.defineProperty(exports, \"__esModule\", { value: true });\r\nvar tslib_1 = require(\"tslib\");\r\nvar inversify_1 = require(\"inversify\");\r\n;\r\nvar common_1 = require(\"../../common\");\r\nvar httpApi_1 = require(\"../../httpApi\");\r\nvar _1 = require(\"./\");\r\nvar contracts_1 = require(\"../../core/contracts\");\r\nvar PermissionClient = (function () {\r\n    function PermissionClient(permissionRoute, apiClient, application) {\r\n        this.permissionRoute = permissionRoute;\r\n        this.apiClient = apiClient;\r\n        this.application = application;\r\n        this.utility = new common_1.Utility();\r\n        this.permissionHash = {};\r\n    }\r\n    Object.defineProperty(PermissionClient.prototype, \"routeDefinition\", {\r\n        /**\r\n         * Provides direct access to `permissionRoute`.\r\n         * @method\r\n         * @example permissionClient.routeDefinition.get().expand(expandObject);\r\n         **/\r\n        get: function () {\r\n            return this.permissionRoute;\r\n        },\r\n        enumerable: true,\r\n        configurable: true\r\n    });\r\n    /**\r\n     * Returns a promise that is resolved once the find action has been performed. Success response returns a list of role resources matching the given criteria.\r\n     * @method\r\n     * @param options Query resource options object.\r\n     * @returns A promise that is resolved once the find action has beend performed.\r\n     * @example permissionClient.find({\r\n                    section : '<access-section>',\r\n                    search : '<search-phrase>'\r\n                })\r\n                .then(function (collection) {\r\n                    // perform success action here\r\n                },\r\n                 function (response, status, headers, config) {\r\n                    // perform error handling here\r\n                });\r\n     **/\r\n    PermissionClient.prototype.find = function (section, options) {\r\n        return this.apiClient.get(this.permissionRoute.find(section, options));\r\n    };\r\n    /**\r\n    * Returns a promise that is resolved once the getActions action has been performed. Success response returns a list of access policies that match the specified search parameters.\r\n    * @method\r\n    * @example\r\n            permissionClient.getActions({\r\n            search : '<search-phrase>'\r\n            })\r\n            .success(function (collection) {\r\n            // perform success action here\r\n            })\r\n            .error(function (response, status, headers, config) {\r\n            // perform error handling here\r\n            });\r\n    **/\r\n    PermissionClient.prototype.getActions = function (options) {\r\n        return this.apiClient.get(this.routeDefinition.getActions(options));\r\n    };\r\n    /**\r\n    * Returns a promise that is resolved once the getPermissionSubjects action has been performed. Success response returns a list of matching user and role resources.\r\n    * @method\r\n    * @example\r\n            permissionClient.getPermissionSubjects({\r\n            orderBy : '<field>',\r\n            orderDirection : '<asc|desc>',\r\n            search : '<search-phrase>'\r\n            })\r\n            .success(function (collection) {\r\n            // perform success action here\r\n            })\r\n            .error(function (response, status, headers, config) {\r\n            // perform error handling here\r\n            });\r\n    **/\r\n    PermissionClient.prototype.getPermissionSubjects = function (options) {\r\n        var queue = [];\r\n        var resolvedTasks = 0;\r\n        var self = this;\r\n        queue.push(this.getUsers(options)\r\n            .then(function (collection) {\r\n            var membCollection = [];\r\n            collection.data.item.forEach(function (element) {\r\n                var membershipItem = {\r\n                    name: element.userName,\r\n                    role: ''\r\n                };\r\n                membCollection.push(self.utility.extend(membershipItem, element));\r\n            });\r\n            return membCollection;\r\n        }, function (data) {\r\n            if (data.status !== undefined && data.status !== 403) {\r\n                return data;\r\n            }\r\n        }));\r\n        queue.push(self.getRoles(options)\r\n            .then(function (collection) {\r\n            var membCollection = [];\r\n            collection.data.item.forEach(function (element) {\r\n                var membershipItem = {\r\n                    name: element.name,\r\n                    roleName: element.name,\r\n                    userName: ''\r\n                };\r\n                membCollection.push(self.utility.extend(membershipItem, element));\r\n            });\r\n            return membCollection;\r\n        }, function (data) {\r\n            if (data.status !== undefined && data.status !== 403) {\r\n                return data;\r\n            }\r\n        }));\r\n        return Promise.all(queue).then(function (membershipCollection) {\r\n            return self.utility.OrderByArray([].concat.apply([], membershipCollection), 'name');\r\n        });\r\n    };\r\n    /**\r\n     * Returns a promise that is resolved once the create action has been performed; this action creates a new permission resource.\r\n     * @method\r\n     * @example\r\n            // readAction and updateActions are resources previously fetched using getActions.\r\n            permissionClient.create({\r\n            actions : [readAction, updateAction],\r\n            section : '<section-name>',\r\n            userName : '<userName>'\r\n            })\r\n            .success(function (data) {\r\n            // perform success action here\r\n            })\r\n            .error(function (response, status, headers, config) {\r\n            // perform error handling here\r\n            });\r\n    **/\r\n    PermissionClient.prototype.create = function (data) {\r\n        return this.apiClient.post(this.permissionRoute.create(), data);\r\n    };\r\n    /**\r\n    * Returns a promise that is resolved once the remove action has been performed. If the action is successfully complete, an access policy assigned to the specified role and section will be removed.\r\n    * @method\r\n    * @example\r\n            // permission is a resource previously fetched using get action.\r\n            permissionClient.remove(permission)\r\n            .success(function (data) {\r\n            // perform success action here\r\n            })\r\n            .error(function (response, status, headers, config) {\r\n            // perform error handling here\r\n            });\r\n   **/\r\n    PermissionClient.prototype.remove = function (data) {\r\n        return this.apiClient.delete(this.routeDefinition.remove(data));\r\n    };\r\n    /**\r\n    * Creates a new in-memory permission object.\r\n    * @method\r\n    * @example\r\n            // action collection are lookup items fetched using lookupClient.get action.\r\n            var actionCollection;\r\n            return lookupClient.get()\r\n            .success(function (data) {\r\n            actionCollection = data;\r\n            })\r\n            .error(function (data, status, headers, config) {});\r\n            // subjectItem is an item fetched using permissionClient.getPermissionSubjects action.\r\n            permissionClient.createPermission('<section-Name>', actionCollection, subjectItem);\r\n   **/\r\n    PermissionClient.prototype.createPermission = function (section, actions, membershipItem) {\r\n        var _this = this;\r\n        var permission = {\r\n            dirty: true,\r\n            role: membershipItem.roleName,\r\n            userName: membershipItem.userName,\r\n            section: section,\r\n            actions: []\r\n        };\r\n        actions.forEach(function (element) {\r\n            var newAction = {\r\n                checked: false\r\n            };\r\n            _this.utility.extend(newAction, element);\r\n            permission.actions.push(newAction);\r\n        });\r\n        return permission;\r\n    };\r\n    /**\r\n    * Finds a permission in a given permission collection.\r\n    * @method\r\n    * @example permissionClient.findPermission(permissionObj, permissionCollection);\r\n   **/\r\n    PermissionClient.prototype.findPermission = function (permission, permissionCollection) {\r\n        for (var i = 0; i < permissionCollection.length; i++) {\r\n            var item = permissionCollection[i];\r\n            if (item.section === permission.section &&\r\n                ((!this.isEmpty(item.role) && !this.isEmpty(permission.role) && item.role === permission.role) ||\r\n                    (!this.isEmpty(item.userName) && !this.isEmpty(permission.userName) && item.userName === permission.userName))) {\r\n                return item;\r\n            }\r\n        }\r\n        return undefined;\r\n    };\r\n    /**\r\n    * Checks if a permission object exists in a given permission collection.\r\n    * @method\r\n    * @example permissionClient.exists(permissionObj, permissionCollection);\r\n   **/\r\n    PermissionClient.prototype.exists = function (permission, permissionCollection) {\r\n        return this.findPermission(permission, permissionCollection) !== undefined;\r\n    };\r\n    /**\r\n    * Returns a promise that is resolved once the togglePermission action has been completed. The action will internally either call a `remove` or `create` action based on given criteria.\r\n    * @method\r\n    * @example permissionClient.togglePermission(permissionObj, action);\r\n    **/\r\n    PermissionClient.prototype.togglePermission = function (permission, action) {\r\n        var requestPermission = {\r\n            actions: []\r\n        };\r\n        this.utility.extend(requestPermission, permission);\r\n        requestPermission.actions = [action];\r\n        var operation;\r\n        if (!action.checked) {\r\n            operation = this.remove;\r\n        }\r\n        else {\r\n            operation = this.create;\r\n        }\r\n        return operation.call(this, requestPermission);\r\n    };\r\n    /**\r\n    * Fetches and returns and object containing all existing module permissions.\r\n    * @method\r\n    * @example permissionClient.getModulePermissions('<section-name>');\r\n    **/\r\n    PermissionClient.prototype.getModulePermissions = function (section) {\r\n        var permission = {\r\n            update: this.hasPermission(this.firstCharToLowerCase(section) + '.update'),\r\n            create: this.hasPermission(this.firstCharToLowerCase(section) + '.create'),\r\n            remove: this.hasPermission(this.firstCharToLowerCase(section) + '.delete'),\r\n            read: this.hasPermission(this.firstCharToLowerCase(section) + '.read'),\r\n            full: this.hasPermission(this.firstCharToLowerCase(section) + '.full')\r\n        };\r\n        return permission;\r\n    };\r\n    PermissionClient.prototype.resetPermissions = function () {\r\n        this.permissionHash[this.application.getApiKey()] = {};\r\n    };\r\n    /**\r\n    * Checks if current user has permissions to perform a certain action. To optimize performance this information is cached and can be reset using the resetPermissions action. Permissions cache should be reset when updated user information is set.\r\n    * @method\r\n    * @example baasicAuthorizationService.hasPermission(\"<baasic-Section>.<action>\");\r\n    **/\r\n    PermissionClient.prototype.hasPermission = function (authorization) {\r\n        var apiKey = this.application.getApiKey();\r\n        //Initialize application permissions\r\n        if (!this.permissionHash.hasOwnProperty(apiKey)) {\r\n            this.resetPermissions();\r\n        }\r\n        if (this.permissionHash[apiKey].hasOwnProperty(authorization)) {\r\n            return this.permissionHash[apiKey][authorization];\r\n        }\r\n        var userContainer = this.application.getUser();\r\n        if (userContainer === undefined) {\r\n            return;\r\n        }\r\n        var user = userContainer.user;\r\n        var hasPermission = false;\r\n        if (user.permissions) {\r\n            var tokens = authorization.split('.');\r\n            if (tokens.length > 0) {\r\n                var section = tokens[0];\r\n                var sectionPermissions = user.permissions[section];\r\n                if (sectionPermissions) {\r\n                    if (tokens.length > 1) {\r\n                        var action = tokens[1].toLowerCase();\r\n                        for (var i = 0; i < sectionPermissions.length; i++) {\r\n                            if (sectionPermissions[i].toLowerCase() === action) {\r\n                                hasPermission = true;\r\n                                break;\r\n                            }\r\n                        }\r\n                    }\r\n                    else {\r\n                        hasPermission = true;\r\n                    }\r\n                }\r\n            }\r\n        }\r\n        this.permissionHash[apiKey][authorization] = hasPermission;\r\n        return hasPermission;\r\n    };\r\n    PermissionClient.prototype.isEmpty = function (data) {\r\n        return data === undefined || data === null || data === '';\r\n    };\r\n    PermissionClient.prototype.getRoles = function (options) {\r\n        return this.apiClient.get(this.routeDefinition.getRoles(options));\r\n    };\r\n    PermissionClient.prototype.getUsers = function (options) {\r\n        return this.apiClient.get(this.routeDefinition.getUsers(options));\r\n    };\r\n    PermissionClient.prototype.firstCharToLowerCase = function (text) {\r\n        return text.replace(/^./, function (char) {\r\n            return char.toLowerCase();\r\n        });\r\n    };\r\n    return PermissionClient;\r\n}());\r\nPermissionClient = tslib_1.__decorate([\r\n    inversify_1.injectable(),\r\n    tslib_1.__param(0, inversify_1.inject(_1.TYPES.PermissionRoute)),\r\n    tslib_1.__param(1, inversify_1.inject(httpApi_1.httpTYPES.ApiClient)),\r\n    tslib_1.__param(2, inversify_1.inject(contracts_1.TYPES.IBaasicApp)),\r\n    tslib_1.__metadata(\"design:paramtypes\", [typeof (_a = typeof _1.PermissionRoute !== \"undefined\" && _1.PermissionRoute) === \"function\" && _a || Object, typeof (_b = typeof httpApi_1.ApiClient !== \"undefined\" && httpApi_1.ApiClient) === \"function\" && _b || Object, typeof (_c = typeof contracts_1.IBaasicApp !== \"undefined\" && contracts_1.IBaasicApp) === \"function\" && _c || Object])\r\n], PermissionClient);\r\nexports.PermissionClient = PermissionClient;\r\nvar _a, _b, _c;\r\n/**\r\n * @overview\r\n ***Notes:**\r\n - Refer to the [Baasic REST API](http://dev.baasic.com/api/reference/home) for detailed information about available Baasic REST API end-points.\r\n - All end-point objects are transformed by the associated route definition.\r\n*/ \r\n\n\n\n//////////////////\n// WEBPACK FOOTER\n// ./src/modules/membership/permissionClient.ts\n// module id = 265\n// module chunks = 0","\"use strict\";\r\nObject.defineProperty(exports, \"__esModule\", { value: true });\r\nvar tslib_1 = require(\"tslib\");\r\n/* globals module */\r\n/**\r\n * @module loginRoute\r\n * @description Baasic Login Route Definition provides Baasic route templates which can be expanded to Baasic REST URIs. Various services can use Baasic Login Route Definition to obtain needed routes while other routes will be obtained through HAL. By convention, all route services use the same function names as their corresponding services.\r\n */\r\nvar inversify_1 = require(\"inversify\");\r\nvar common_1 = require(\"../../common\");\r\nvar contracts_1 = require(\"../../core/contracts\");\r\nvar PermissionRoute = (function (_super) {\r\n    tslib_1.__extends(PermissionRoute, _super);\r\n    function PermissionRoute(appOptions) {\r\n        var _this = _super.call(this, appOptions) || this;\r\n        _this.appOptions = appOptions;\r\n        /**\r\n        * Find route with route and query parameters.\r\n        **/\r\n        _this.findRoute = 'permissions/sections/{section}/{?searchQuery,sort,embed,fields}';\r\n        /**\r\n        * Get actions route with route and query parameters.\r\n        **/\r\n        _this.getActionsRoute = 'permissions/actions/{?searchQuery,sort,embed,fields}';\r\n        /**\r\n        * Get roles route with route and query parameters.\r\n        **/\r\n        _this.getRolesRoute = 'lookups/roles/{?searchQuery,page,rpp,sort,embed,fields}';\r\n        /**\r\n        * Get users route with route and query parameters.\r\n        **/\r\n        _this.getUsersRoute = 'users/{?searchQuery,page,rpp,sort,embed,fields}';\r\n        /**\r\n        * Create route with route and query parameters.\r\n        **/\r\n        _this.createRoute = 'permissions/';\r\n        /**\r\n        * Remove route with route and query parameters.\r\n        **/\r\n        _this.removeRoute = 'permissions/sections/{section}/actions/{action}/{{operation}}/{{subject}}/';\r\n        return _this;\r\n    }\r\n    /**\r\n    * Parses find route which can be expanded with additional options. Supported items are:\r\n    * - `section` - Section abbreviation which identifies part of the application for which security privileges can be retrieved and managed.\r\n    * - `searchQuery` - A string value used to identify access policy resources using the phrase search.\r\n    * - `sort` - A string used to set the access policy property to sort the result collection by.\r\n    * @method\r\n    * @example\r\npermissionRoute.find(\r\n    'sectionName',\r\n    {searchQuery: '<search-phrase>'}\r\n);\r\n    **/\r\n    PermissionRoute.prototype.find = function (section, options) {\r\n        var opt = options || {};\r\n        return _super.prototype.baseFind.call(this, this.findRoute, this.utility.extend({ section: section }, opt));\r\n    };\r\n    /**\r\n    * Parses getActions route which can be expanded with additional options. Supported items are:\r\n    * - `searchQuery` - A string value used to identify access action resources using the phrase search.\r\n    * - `sort` - A string used to set the access action property to sort the result collection by.\r\n    * @method\r\n    * @example\r\npermissionRoute.getActions(\r\n{searchQuery: '<search-phrase>'}\r\n);\r\n    **/\r\n    PermissionRoute.prototype.getActions = function (options) {\r\n        var opt = options || {};\r\n        return _super.prototype.baseFind.call(this, this.getActionsRoute, opt);\r\n    };\r\n    /**\r\n    * Parses getRoles route which can be expanded with additional options. Supported items are:\r\n    * - `searchQuery` - A string value used to identify access policy resources using the phrase search.\r\n    * - `sort` - A string used to set the access policy property to sort the result collection by.\r\n    * - `page` - A value used to set the page number, i.e. to retrieve certain access policy subset from the storage.\r\n    * - `rpp` - A value used to limit the size of result set per page.\r\n    * @method\r\n    * @example\r\npermissionRoute.getRoles(\r\n{searchQuery: '<search-phrase>'}\r\n);\r\n    **/\r\n    PermissionRoute.prototype.getRoles = function (options) {\r\n        var opt = options || {};\r\n        return _super.prototype.baseFind.call(this, this.getRolesRoute, opt);\r\n    };\r\n    /**\r\n    * Parses getUsers route which can be expanded with additional options. Supported items are:\r\n    * - `searchQuery` - A string value used to identify access policy resources using the phrase search.\r\n    * - `sort` - A string used to set the access policy property to sort the result collection by.\r\n    * - `page` - A value used to set the page number, i.e. to retrieve certain access policy subset from the storage.\r\n    * - `rpp` - A value used to limit the size of result set per page.\r\n    * @method\r\n    * @example\r\npermissionRoute.getRoles(\r\n{searchQuery: '<search-phrase>'}\r\n);\r\n    **/\r\n    PermissionRoute.prototype.getUsers = function (options) {\r\n        var opt = options || {};\r\n        return _super.prototype.baseFind.call(this, this.getUsersRoute, opt);\r\n    };\r\n    /**\r\n    * Parses create permission route; this URI template doesn't expose any additional properties.\r\n    * @method\r\n    * @example permissionRoute.create({});\r\n    **/\r\n    PermissionRoute.prototype.create = function () {\r\n        return _super.prototype.baseCreate.call(this, this.createRoute);\r\n    };\r\n    /**\r\n     * Returns a promise that is resolved once the remove permission action has been performed. This action will remove a permission from the system, if completed successfully.\r\n     * @param data A permission object used to delete specified permission resource.\r\n     * @returns A promise that is resolved once the remove action has been performed.\r\n     * @method\r\n     * @example // Permission is a resource previously fetched using get action.\r\n                    permissionClient.remove(permission)\r\n                        .then(function (data) {\r\n                            // perform success action here\r\n                        },\r\n                         function (response, status, headers, config) {\r\n                            // perform error handling here\r\n                        });\r\n     **/\r\n    PermissionRoute.prototype.remove = function (data) {\r\n        var params = _super.prototype.deleteParams.call(this, data);\r\n        var action = data.actions[0];\r\n        var operation = '';\r\n        var subject = '';\r\n        if (data.role && data.role.length > 0) {\r\n            operation = 'Role';\r\n            subject = data.role;\r\n        }\r\n        else {\r\n            operation = 'User';\r\n            subject = data.userName;\r\n        }\r\n        var route = this.removeRoute.replace('{{operation}}', operation.toLowerCase() + 's').replace('{{subject}}', subject);\r\n        return _super.prototype.baseDelete.call(this, route, data, null, 'delete' + action.abrv + operation);\r\n    };\r\n    return PermissionRoute;\r\n}(common_1.BaseRoute));\r\nPermissionRoute = tslib_1.__decorate([\r\n    inversify_1.injectable(),\r\n    tslib_1.__param(0, inversify_1.inject(contracts_1.TYPES.IAppOptions)),\r\n    tslib_1.__metadata(\"design:paramtypes\", [typeof (_a = typeof contracts_1.IAppOptions !== \"undefined\" && contracts_1.IAppOptions) === \"function\" && _a || Object])\r\n], PermissionRoute);\r\nexports.PermissionRoute = PermissionRoute;\r\nvar _a;\r\n/**\r\n * @overview\r\n ***Notes:**\r\n - Refer to the [Baasic REST API](http://dev.baasic.com/api/reference/home) for detailed information about available Baasic REST API end-points.\r\n - [URI Template](https://github.com/Baasic/uritemplate-js) syntax enables expanding the Baasic route templates to Baasic REST URIs providing it with an object that contains URI parameters.\r\n - All end-point objects are transformed by the associated route definition.\r\n */ \r\n\n\n\n//////////////////\n// WEBPACK FOOTER\n// ./src/modules/membership/permissionRoute.ts\n// module id = 266\n// module chunks = 0","/* globals module */\r\n/**\r\n * @module registerClient\r\n * @description  Register Client provides an easy way to consume  Application Registration REST API end-points. In order to obtain needed routes `registerClient` uses `registerRoute`.\r\n */\r\n\"use strict\";\r\nObject.defineProperty(exports, \"__esModule\", { value: true });\r\nvar tslib_1 = require(\"tslib\");\r\nvar inversify_1 = require(\"inversify\");\r\nvar httpApi_1 = require(\"../../httpApi\");\r\nvar contracts_1 = require(\"../../core/contracts\");\r\nvar _1 = require(\"./\");\r\nvar RegisterClient = (function () {\r\n    function RegisterClient(registerRoute, apiClient, tokenHandler) {\r\n        this.registerRoute = registerRoute;\r\n        this.apiClient = apiClient;\r\n        this.tokenHandler = tokenHandler;\r\n    }\r\n    Object.defineProperty(RegisterClient.prototype, \"routeDefinition\", {\r\n        /**\r\n         * Provides direct access to `registerRoute`.\r\n         * @method\r\n         * @example registerClient.routeDefinition.get();\r\n         **/\r\n        get: function () {\r\n            return this.registerRoute;\r\n        },\r\n        enumerable: true,\r\n        configurable: true\r\n    });\r\n    /**\r\n     * Returns a promise that is resolved once the register create has been performed. This action will create a new user if completed successfully. Created user is not approved immediately, instead an activation e-mail is sent to the user.\r\n     * @param data A user account object that needs to be inserted into the system.\r\n     * @method\r\n     * @example registerClient.create({\r\n                    activationUrl : '<activation-url>',\r\n                    challengeIdentifier : '<challenge-identifier>',\r\n                    challengeResponse : '<challenge-response>',\r\n                    confirmPassword : '<confirm-password>',\r\n                    email : '<email>',\r\n                    password : '<password>',\r\n                    username : '<username>'\r\n                })\r\n                .success(function (data) {\r\n                    // perform success actions here\r\n                }).error(function (data, status) {\r\n                    // perform error handling here\r\n                })\r\n                .finally (function () {});\r\n     **/\r\n    RegisterClient.prototype.create = function (data) {\r\n        return this.apiClient.post(this.routeDefinition.create(), this.routeDefinition.createParams(data));\r\n    };\r\n    /**\r\n     * Returns a promise that is resolved once the account activation action has been performed; this action activates a user account and success response returns the token resource.\r\n     * @param data Security code which uniquely identifies user account that needs to be activated.\r\n     * @returns A promise that is resolved once the account activation action has been performed.\r\n     * @method\r\n     * @example registerClient.activate({\r\n                   activationToken : '<activation-token>'\r\n               })\r\n               .then(function (data) {\r\n                   // perform success actions here\r\n               },\r\n                function (data, status) {\r\n                   // perform error handling here\r\n               })\r\n               .finally (function () {});\r\n    **/\r\n    RegisterClient.prototype.activate = function (data) {\r\n        var self = this;\r\n        var promise = this.apiClient.put(this.registerRoute.activate(data), data);\r\n        promise.then(function (data) {\r\n            var token = {\r\n                token: data.data.access_token,\r\n                expires_in: data.data.expires_in,\r\n                sliding_window: data.data.sliding_window,\r\n                tokenUrl: data.data.access_url_token,\r\n                type: data.data.token_type\r\n            };\r\n            self.tokenHandler.store(token);\r\n            return data;\r\n        });\r\n        return promise;\r\n    };\r\n    return RegisterClient;\r\n}());\r\nRegisterClient = tslib_1.__decorate([\r\n    inversify_1.injectable(),\r\n    tslib_1.__param(0, inversify_1.inject(_1.TYPES.RegisterRoute)),\r\n    tslib_1.__param(1, inversify_1.inject(httpApi_1.httpTYPES.ApiClient)),\r\n    tslib_1.__param(2, inversify_1.inject(contracts_1.TYPES.ITokenHandler)),\r\n    tslib_1.__metadata(\"design:paramtypes\", [typeof (_a = typeof _1.RegisterRoute !== \"undefined\" && _1.RegisterRoute) === \"function\" && _a || Object, typeof (_b = typeof httpApi_1.ApiClient !== \"undefined\" && httpApi_1.ApiClient) === \"function\" && _b || Object, typeof (_c = typeof contracts_1.ITokenHandler !== \"undefined\" && contracts_1.ITokenHandler) === \"function\" && _c || Object])\r\n], RegisterClient);\r\nexports.RegisterClient = RegisterClient;\r\nvar _a, _b, _c;\r\n/**\r\n * @overview\r\n ***Notes:**\r\n - Refer to the [Baasic REST API](http://dev.baasic.com/api/reference/home) for detailed information about available Baasic REST API end-points.\r\n - All end-point objects are transformed by the associated route definition.\r\n*/ \r\n\n\n\n//////////////////\n// WEBPACK FOOTER\n// ./src/modules/membership/registerClient.ts\n// module id = 267\n// module chunks = 0","/* globals module */\r\n/**\r\n * @module registerRoute\r\n * @description Baasic Register Route Definition provides Baasic route templates which can be expanded to Baasic REST URIs. Various services can use Baasic Register Route Service to obtain needed routes while other routes will be obtained through HAL. By convention, all route services use the same function names as their corresponding services.\r\n*/\r\n\"use strict\";\r\nObject.defineProperty(exports, \"__esModule\", { value: true });\r\nvar tslib_1 = require(\"tslib\");\r\nvar inversify_1 = require(\"inversify\");\r\nvar common_1 = require(\"../../common\");\r\nvar contracts_1 = require(\"../../core/contracts\");\r\nvar RegisterRoute = (function (_super) {\r\n    tslib_1.__extends(RegisterRoute, _super);\r\n    function RegisterRoute(appOptions) {\r\n        var _this = _super.call(this, appOptions) || this;\r\n        _this.appOptions = appOptions;\r\n        /**\r\n        * Create route with route and query parameters.\r\n        **/\r\n        _this.createRoute = 'register';\r\n        /**\r\n        * Activate route with route and query parameters.\r\n        **/\r\n        _this.activateRoute = 'register/activate/{activationToken}/';\r\n        return _this;\r\n    }\r\n    /**\r\n     * Parses register route, this route doesn't support any additional properties.\r\n     * @method\r\n     * @example registerRoute.create();\r\n     **/\r\n    RegisterRoute.prototype.create = function () {\r\n        return _super.prototype.baseCreate.call(this, this.createRoute, {});\r\n    };\r\n    /**\r\n     * Parses activation route; route should be expanded with the `activationToken` which uniquely identifies the user account that needs to be activated.\r\n     * @method\r\n     * @param data Security code which uniquely identifies user account that needs to be activated.\r\n     * @example registerRoute.activate({activationToken: '<activation-token>'});\r\n     **/\r\n    RegisterRoute.prototype.activate = function (data) {\r\n        var params = this.modelMapper.getParams(data, undefined, 'activationToken');\r\n        return _super.prototype.baseCreate.call(this, this.activateRoute, params);\r\n    };\r\n    return RegisterRoute;\r\n}(common_1.BaseRoute));\r\nRegisterRoute = tslib_1.__decorate([\r\n    inversify_1.injectable(),\r\n    tslib_1.__param(0, inversify_1.inject(contracts_1.TYPES.IAppOptions)),\r\n    tslib_1.__metadata(\"design:paramtypes\", [typeof (_a = typeof contracts_1.IAppOptions !== \"undefined\" && contracts_1.IAppOptions) === \"function\" && _a || Object])\r\n], RegisterRoute);\r\nexports.RegisterRoute = RegisterRoute;\r\nvar _a;\r\n/**\r\n * @overview\r\n ***Notes:**\r\n - Refer to the [Baasic REST API](http://dev.baasic.com/api/reference/home) for detailed information about available Baasic REST API end-points.  - [URI Template](https://github.com/Baasic/uritemplate-js) syntax enables expanding the Baasic route templates to Baasic REST URIs providing it with an object that contains URI parameters.\r\n - All end-point objects are transformed by the associated route definition.\r\n*/ \r\n\n\n\n//////////////////\n// WEBPACK FOOTER\n// ./src/modules/membership/registerRoute.ts\n// module id = 268\n// module chunks = 0","/* globals module */\r\n/**\r\n * @module roleClient\r\n * @description  Role Client provides an easy way to consume  Role REST API end-points. In order to obtain needed routes `roleClient` uses `roleRoute`.\r\n */\r\n\"use strict\";\r\nObject.defineProperty(exports, \"__esModule\", { value: true });\r\nvar tslib_1 = require(\"tslib\");\r\nvar inversify_1 = require(\"inversify\");\r\n;\r\nvar httpApi_1 = require(\"../../httpApi\");\r\nvar _1 = require(\"./\");\r\nvar RoleClient = (function () {\r\n    function RoleClient(roleRoute, apiClient) {\r\n        this.roleRoute = roleRoute;\r\n        this.apiClient = apiClient;\r\n    }\r\n    Object.defineProperty(RoleClient.prototype, \"routeDefinition\", {\r\n        /**\r\n         * Provides direct access to `roleRoute`.\r\n         * @method\r\n         * @example roleClient.routeDefinition.get().expand(expandObject);\r\n         **/\r\n        get: function () {\r\n            return this.roleRoute;\r\n        },\r\n        enumerable: true,\r\n        configurable: true\r\n    });\r\n    /**\r\n     * Returns a promise that is resolved once the find action has been performed. Success response returns a list of role resources matching the given criteria.\r\n     * @method\r\n     * @param options Query resource options object.\r\n     * @returns A promise that is resolved once the find action has beend performed.\r\n     * @example roleClient.find({\r\n                    pageNumber : 1,\r\n                    pageSize : 10,\r\n                    orderBy : '<field>',\r\n                    orderDirection : '<asc|desc>',\r\n                    search : '<search-phrase>'\r\n                })\r\n                .then(function (collection) {\r\n                    // perform success action here\r\n                },\r\n                 function (response, status, headers, config) {\r\n                    // perform error handling here\r\n                });\r\n     **/\r\n    RoleClient.prototype.find = function (options) {\r\n        return this.apiClient.get(this.routeDefinition.find(options));\r\n    };\r\n    /**\r\n     * Returns a promise that is resolved once the get action has been performed. Success response returns the specified role resource.\r\n     * @param id Role unique indentifer.\r\n     * @param options Query resource options object.\r\n     * @returns A promise that is resolved once the get action has been performed.\r\n     * @method\r\n     * @example roleClient.get('<role-id>')\r\n                    .then(function (data) {\r\n                        // perform success action here\r\n                    },\r\n                     function (response, status, headers, config) {\r\n                        // perform error handling here\r\n                    });\r\n     **/\r\n    RoleClient.prototype.get = function (id, options) {\r\n        return this.apiClient.get(this.roleRoute.get(id, options));\r\n    };\r\n    /**\r\n     * Returns a promise that is resolved once the create action has been performed; this action creates a role.\r\n     * @method\r\n     * @param data A role object that needs to be inserted into the system.\r\n     * @returns A promise that is resolved once the create action has beend performed.\r\n     * @example roleClient.create({\r\n                    description : '<description>',\r\n                    name : '<name>'\r\n                })\r\n                .then(function (data) {\r\n                    // perform success action here\r\n                },\r\n                 function (response, status, headers, config) {\r\n                    // perform error handling here\r\n                });\r\n     **/\r\n    RoleClient.prototype.create = function (data) {\r\n        return this.apiClient.post(this.routeDefinition.create(), this.routeDefinition.createParams(data));\r\n    };\r\n    /**\r\n     * Returns a promise that is resolved once the update role action has been performed; this action updates a role. This route uses HAL enabled objects to obtain routes and therefore it doesn't apply `roleClient` route template. Here is an example of how a route can be obtained from HAL enabled objects:\r\n     * ```\r\n     * let params = modelMapper.removeParams(role);\r\n     * let uri = params['model'].links('put').href;\r\n     * ```\r\n     * @method\r\n     * @param data A role object used to update specified role resource.\r\n     * @returns A promise that is resolved once the update role action has been performed.\r\n     * @example // role is a resource previously fetched using get action.\r\n                    role.name = '<new-name>';\r\n                    roleClient.update(role)\r\n                        .then(function (data) {\r\n                            // perform success action here\r\n                        },\r\n                         function (response, status, headers, config) {\r\n                            // perform error handling here\r\n                        });\r\n     **/\r\n    RoleClient.prototype.update = function (data) {\r\n        return this.apiClient.put(this.routeDefinition.update(data), this.routeDefinition.updateParams(data));\r\n    };\r\n    /**\r\n     * Returns a promise that is resolved once the remove role action has been performed. This action will remove a role from the system, if completed successfully. This route uses HAL enabled objects to obtain routes and therefore it doesn't apply `roleClient` route template. Here is an example of how a route can be obtained from HAL enabled objects:\r\n     * ```\r\n     * let params = modelMapper.removeParams(role);\r\n     * let uri = params['model'].links('delete').href; ```\r\n     * @param data A role object used to delete specified role resource.\r\n     * @returns A promise that is resolved once the remove action has been performed.\r\n     * @method\r\n     * @example // Role is a resource previously fetched using get action.\r\n                    roleClient.remove(role)\r\n                        .then(function (data) {\r\n                            // perform success action here\r\n                        },\r\n                         function (response, status, headers, config) {\r\n                            // perform error handling here\r\n                        });\r\n     **/\r\n    RoleClient.prototype.remove = function (data) {\r\n        return this.apiClient.delete(this.routeDefinition.delete(data));\r\n    };\r\n    return RoleClient;\r\n}());\r\nRoleClient = tslib_1.__decorate([\r\n    inversify_1.injectable(),\r\n    tslib_1.__param(0, inversify_1.inject(_1.TYPES.RoleRoute)),\r\n    tslib_1.__param(1, inversify_1.inject(httpApi_1.httpTYPES.ApiClient)),\r\n    tslib_1.__metadata(\"design:paramtypes\", [typeof (_a = typeof _1.RoleRoute !== \"undefined\" && _1.RoleRoute) === \"function\" && _a || Object, typeof (_b = typeof httpApi_1.ApiClient !== \"undefined\" && httpApi_1.ApiClient) === \"function\" && _b || Object])\r\n], RoleClient);\r\nexports.RoleClient = RoleClient;\r\nvar _a, _b;\r\n/**\r\n * @overview\r\n ***Notes:**\r\n - Refer to the [Baasic REST API](http://dev.baasic.com/api/reference/home) for detailed information about available Baasic REST API end-points.\r\n - All end-point objects are transformed by the associated route definition.\r\n*/ \r\n\n\n\n//////////////////\n// WEBPACK FOOTER\n// ./src/modules/membership/roleClient.ts\n// module id = 269\n// module chunks = 0","/* globals module */\r\n/**\r\n * @module roleRoute\r\n * @description Baasic Role Route Definition provides Baasic route templates which can be expanded to Baasic REST URIs. Various services can use Baasic Role Route Service to obtain needed routes while other routes will be obtained through HAL. By convention, all route services use the same function names as their corresponding services.\r\n */\r\n\"use strict\";\r\nObject.defineProperty(exports, \"__esModule\", { value: true });\r\nvar tslib_1 = require(\"tslib\");\r\nvar inversify_1 = require(\"inversify\");\r\nvar common_1 = require(\"../../common\");\r\n;\r\nvar contracts_1 = require(\"../../core/contracts\");\r\nvar RoleRoute = (function (_super) {\r\n    tslib_1.__extends(RoleRoute, _super);\r\n    function RoleRoute(appOptions) {\r\n        var _this = _super.call(this, appOptions) || this;\r\n        _this.appOptions = appOptions;\r\n        /**\r\n        * Find route with route and query parameters.\r\n        **/\r\n        _this.findRoute = 'lookups/roles/{?searchQuery,page,rpp,sort,embed,fields}';\r\n        /**\r\n        * Get route with route and query parameters.\r\n        **/\r\n        _this.getRoute = 'lookups/roles/{id}/{?embed,fields}';\r\n        /**\r\n        * Create route with route and query parameters.\r\n        **/\r\n        _this.createRoute = 'lookups/roles';\r\n        /**\r\n        * Update route with route and query parameters.\r\n        **/\r\n        _this.updateRoute = 'lookups/roles/{id}';\r\n        /**\r\n        * Remove route with route and query parameters.\r\n        **/\r\n        _this.removeRoute = 'lookups/roles/{id}';\r\n        return _this;\r\n    }\r\n    /**\r\n     * Parses find role route which can be expanded with additional options. Supported items are:\r\n     * - `searchQuery` - A string value used to identify role resources using the phrase search.\r\n     * - `page` - A value used to set the page number, i.e. to retrieve certain role subset from the storage.\r\n     * - `rpp` - A value used to limit the size of result set per page.\r\n     * - `sort` - A string used to set the role property to sort the result collection by.\r\n     * @method\r\n     * @param options Query resource options object.\r\n     * @example roleRoute.find({searchQuery: '<search-phrase>'});\r\n     **/\r\n    RoleRoute.prototype.find = function (options) {\r\n        return _super.prototype.baseFind.call(this, this.findRoute, options);\r\n    };\r\n    /**\r\n     * Parses get role route which should be expanded with the role Id. Note that the role Id is the primary key of the role.\r\n     * @method\r\n     * @param id Role unique indentifer.\r\n     * @param options Query resource options object.\r\n     * @example roleRoute.get().expand({id: '<role-id>'});\r\n     **/\r\n    RoleRoute.prototype.get = function (id, options) {\r\n        return _super.prototype.baseGet.call(this, this.getRoute, id, options);\r\n    };\r\n    /**\r\n     * Parses create role route; this URI template does not expose any additional options.\r\n     * @method\r\n     * @example roleRoute.create();\r\n     **/\r\n    RoleRoute.prototype.create = function () {\r\n        return _super.prototype.baseCreate.call(this, this.createRoute, {});\r\n    };\r\n    /**\r\n     * Parses update role route.\r\n     * @method\r\n     * @param data A role object used to update specified role resource.\r\n     * @example roleRoute.update(data);\r\n     */\r\n    RoleRoute.prototype.update = function (data) {\r\n        return _super.prototype.baseUpdate.call(this, this.updateRoute, data);\r\n    };\r\n    /**\r\n     * Parses delete role route.\r\n     * @method\r\n     * @param data A role object used to delete specified role resource.\r\n     * @example roleRoute.delete(data);\r\n     */\r\n    RoleRoute.prototype.delete = function (data) {\r\n        return _super.prototype.baseDelete.call(this, this.removeRoute, data);\r\n    };\r\n    return RoleRoute;\r\n}(common_1.BaseRoute));\r\nRoleRoute = tslib_1.__decorate([\r\n    inversify_1.injectable(),\r\n    tslib_1.__param(0, inversify_1.inject(contracts_1.TYPES.IAppOptions)),\r\n    tslib_1.__metadata(\"design:paramtypes\", [typeof (_a = typeof contracts_1.IAppOptions !== \"undefined\" && contracts_1.IAppOptions) === \"function\" && _a || Object])\r\n], RoleRoute);\r\nexports.RoleRoute = RoleRoute;\r\nvar _a;\r\n/**\r\n * @overview\r\n ***Notes:**\r\n - Refer to the [Baasic REST API](http://dev.baasic.com/api/reference/home) for detailed information about available Baasic REST API end-points.\r\n - [URI Template](https://github.com/Baasic/uritemplate-js) syntax enables expanding the Baasic route templates to Baasic REST URIs providing it with an object that contains URI parameters.\r\n - All end-point objects are transformed by the associated route definition.\r\n*/ \r\n\n\n\n//////////////////\n// WEBPACK FOOTER\n// ./src/modules/membership/roleRoute.ts\n// module id = 270\n// module chunks = 0","\"use strict\";\r\nObject.defineProperty(exports, \"__esModule\", { value: true });\r\nvar tslib_1 = require(\"tslib\");\r\nvar _1 = require(\"./\");\r\nvar inversify_1 = require(\"inversify\");\r\nvar Root = (function () {\r\n    function Root(login, loginSocial, passwordRecovery, register, role, user, permissions, lookups) {\r\n        this.login = login;\r\n        this.loginSocial = loginSocial;\r\n        this.passwordRecovery = passwordRecovery;\r\n        this.register = register;\r\n        this.role = role;\r\n        this.user = user;\r\n        this.permissions = permissions;\r\n        this.lookups = lookups;\r\n    }\r\n    return Root;\r\n}());\r\nRoot = tslib_1.__decorate([\r\n    inversify_1.injectable(),\r\n    tslib_1.__param(0, inversify_1.inject(_1.TYPES.LoginClient)),\r\n    tslib_1.__param(1, inversify_1.inject(_1.TYPES.LoginSocialClient)),\r\n    tslib_1.__param(2, inversify_1.inject(_1.TYPES.PasswordRecoveryClient)),\r\n    tslib_1.__param(3, inversify_1.inject(_1.TYPES.RegisterClient)),\r\n    tslib_1.__param(4, inversify_1.inject(_1.TYPES.RoleClient)),\r\n    tslib_1.__param(5, inversify_1.inject(_1.TYPES.UserClient)),\r\n    tslib_1.__param(6, inversify_1.inject(_1.TYPES.PermissionClient)),\r\n    tslib_1.__param(7, inversify_1.inject(_1.TYPES.LookupClient)),\r\n    tslib_1.__metadata(\"design:paramtypes\", [typeof (_a = typeof _1.LoginClient !== \"undefined\" && _1.LoginClient) === \"function\" && _a || Object, typeof (_b = typeof _1.LoginSocialClient !== \"undefined\" && _1.LoginSocialClient) === \"function\" && _b || Object, typeof (_c = typeof _1.PasswordRecoveryClient !== \"undefined\" && _1.PasswordRecoveryClient) === \"function\" && _c || Object, typeof (_d = typeof _1.RegisterClient !== \"undefined\" && _1.RegisterClient) === \"function\" && _d || Object, typeof (_e = typeof _1.RoleClient !== \"undefined\" && _1.RoleClient) === \"function\" && _e || Object, typeof (_f = typeof _1.UserClient !== \"undefined\" && _1.UserClient) === \"function\" && _f || Object, typeof (_g = typeof _1.PermissionClient !== \"undefined\" && _1.PermissionClient) === \"function\" && _g || Object, typeof (_h = typeof _1.LookupClient !== \"undefined\" && _1.LookupClient) === \"function\" && _h || Object])\r\n], Root);\r\nexports.Root = Root;\r\nvar _a, _b, _c, _d, _e, _f, _g, _h;\r\n\n\n\n//////////////////\n// WEBPACK FOOTER\n// ./src/modules/membership/root.ts\n// module id = 271\n// module chunks = 0","/* globals module */\r\n/**\r\n * @module userClient\r\n * @description  User Client provides an easy way to consume  User REST API end-points. In order to obtain needed routes `userClient` uses `userRoute`.\r\n */\r\n\"use strict\";\r\nObject.defineProperty(exports, \"__esModule\", { value: true });\r\nvar tslib_1 = require(\"tslib\");\r\nvar inversify_1 = require(\"inversify\");\r\n;\r\nvar httpApi_1 = require(\"../../httpApi\");\r\nvar _1 = require(\"./\");\r\nvar UserClient = (function () {\r\n    function UserClient(userRoute, userSocialLoginClient, apiClient) {\r\n        this.userRoute = userRoute;\r\n        this.userSocialLoginClient = userSocialLoginClient;\r\n        this.apiClient = apiClient;\r\n    }\r\n    Object.defineProperty(UserClient.prototype, \"routeDefinition\", {\r\n        /**\r\n         * Provides direct access to `userRoute`.\r\n         * @method\r\n         * @example userClient.routeDefinition.get();\r\n         **/\r\n        get: function () {\r\n            return this.userRoute;\r\n        },\r\n        enumerable: true,\r\n        configurable: true\r\n    });\r\n    Object.defineProperty(UserClient.prototype, \"socialLogin\", {\r\n        get: function () {\r\n            return this.userSocialLoginClient;\r\n        },\r\n        enumerable: true,\r\n        configurable: true\r\n    });\r\n    /**\r\n     * Returns a promise that is resolved once the exists action has been performed. This action checks if user exists in the application.\r\n     * @method\r\n     * @param username A username which uniquely identifies an application user.\r\n     * @example userClient.exists('<username>')\r\n                    .then(function (data) {\r\n                        // perform success action here\r\n                    },\r\n                     function (response, status, headers, config) {\r\n                        // perform error handling here\r\n                    });\r\n     **/\r\n    UserClient.prototype.exists = function (username, options) {\r\n        return this.apiClient.get(this.userRoute.exists(username, options));\r\n    };\r\n    /**\r\n     * Returns a promise that is resolved once the find action has been performed. Success response returns a list of user resources matching the given criteria.\r\n     * @method\r\n     * @param options Query resource options object.\r\n     * @example userClient.find({\r\n                    pageNumber : 1,\r\n                    pageSize : 10,\r\n                    orderBy : '<field>',\r\n                    orderDirection : '<asc|desc>',\r\n                    search : '<search-phrase>'\r\n                })\r\n                .then(function (collection) {\r\n                    // perform success action here\r\n                },\r\n                 function (response, status, headers, config) {\r\n                    // perform error handling here\r\n                });\r\n     **/\r\n    UserClient.prototype.find = function (options) {\r\n        return this.apiClient.get(this.routeDefinition.find(options));\r\n    };\r\n    /**\r\n     * Returns a promise that is resolved once the get action has been performed. Success response returns the specified user resource.\r\n     * @method\r\n     * @param id A username or id which uniquely identifies an application user whose account information needs to be retrieved.\r\n     * @param options Query resources options.\r\n     * @returns A promise that is resolved once the get action has been performed.\r\n     * @example userClient.get({\r\n                    username : '<username>',\r\n                    embed : '<embedded-resource>'\r\n                })\r\n                .then(function (data) {\r\n                    // perform success action here\r\n                },\r\n                 function (response, status, headers, config) {\r\n                    // perform error handling here\r\n                });\r\n     **/\r\n    UserClient.prototype.get = function (id, options) {\r\n        return this.apiClient.get(this.userRoute.get(id, options));\r\n    };\r\n    /**\r\n     * Returns a promise that is resolved once the create user action has been performed; this action creates a new user.\r\n     * @method\r\n     * @param data An user object that needs to be inserted into the system.\r\n     * @returns A promise that is resolved once the create user action has been performed.\r\n     * @example userClient.create({\r\n                    confirmPassword : '<password>',\r\n                    email : '<email>',\r\n                    password : '<password>',\r\n                    sendEmailNotification : true,\r\n                    username : '<username>',\r\n                    roles: ['<role-name>'],\r\n                    additionalProperty: '<additional-property>'\r\n                })\r\n                .then(function (data) {\r\n                    // perform success action here\r\n                },\r\n                 function (response, status, headers, config) {\r\n                    // perform error handling here\r\n                });\r\n     **/\r\n    UserClient.prototype.create = function (data) {\r\n        return this.apiClient.post(this.routeDefinition.create(), this.routeDefinition.createParams(data));\r\n    };\r\n    /**\r\n     * Returns a promise that is resolved once the update user action has been performed; this action updates a user. This route uses HAL enabled objects to obtain routes and therefore it doesn't apply `userRoute` route template. Here is an example of how a route can be obtained from HAL enabled objects:\r\n     * ```\r\n     * let params = modelMapper.removeParams(user);\r\n     * let uri = params['model'].links('put').href;\r\n     * ```\r\n     * @param data A user object used to update specified user resource.\r\n     * @returns A promise that is resolved once the update user action has been performed.\r\n     * @method\r\n     * @example // user is a resource previously fetched using get action.\r\n                    user.roles = ['<role-name>', '<new-role-name>'];\r\n                    user.email = '<new-email>';\r\n                    userClient.update(user)\r\n                        .then(function (data) {\r\n                            // perform success action here\r\n                        },\r\n                         function (response, status, headers, config) {\r\n                            // perform error handling here\r\n                        });\r\n     **/\r\n    UserClient.prototype.update = function (data) {\r\n        return this.apiClient.put(this.routeDefinition.update(data), this.routeDefinition.updateParams(data));\r\n    };\r\n    /**\r\n     * Returns a promise that is resolved once the remove user action has been performed. This action will remove a user from the system if successfully completed. This route uses HAL enabled objects to obtain routes and therefore it doesn't apply `userRoute` route template. Here is an example of how a route can be obtained from HAL enabled objects:\r\n     * ```\r\n     * let params = modelMapper.removeParams(user);\r\n     * let uri = params['model'].links('delete').href;\r\n     * ```\r\n     * @method\r\n     * @param data  A user object used to delete specified user resource.\r\n     * @returns A promise that is resolved once the remove user action has been performed.\r\n     * @example // user is a resource previously fetched using get action.\r\n                    userClient.remove(user)\r\n                        .then(function (data) {\r\n                            // perform success action here\r\n                        },\r\n                         function (response, status, headers, config) {\r\n                            // perform error handling here\r\n                        });\r\n     **/\r\n    UserClient.prototype.remove = function (data) {\r\n        return this.apiClient.delete(this.routeDefinition.delete(data));\r\n    };\r\n    /**\r\n     * Returns a promise that is resolved once the unlock user action has been performed. This action will unlock the user resource which was previously locked either manually or automatically by the system. This route uses HAL enabled objects to obtain routes and therefore it doesn't apply `userRoute` route template. Here is an example of how a route can be obtained from HAL enabled objects:\r\n     * ```\r\n     * let params = modelMapper.removeParams(user);\r\n     * let uri = params['model'].links('unlock').href;\r\n     * ```\r\n     * @method\r\n     * @param data A user object used to unlock specified user resource.\r\n     * @returns A promise that is resolved once the unlock user action has been performed.\r\n     * @example //  user is a resource previously fetched using get action.\r\n                        userClient.unlock(user)\r\n                            .then(function (data) {\r\n                                // perform success action here\r\n                            },\r\n                             function (response, status, headers, config) {\r\n                                // perform error handling here\r\n                            });\r\n     **/\r\n    UserClient.prototype.unlock = function (data) {\r\n        return this.apiClient.put(this.userRoute.unlock(data), data);\r\n    };\r\n    /**\r\n     * Returns a promise that is resolved once the lock user action has been performed. This action will lock the user resource out of the system. This route uses HAL enabled objects to obtain routes and therefore it doesn't apply `userRoute` route template. Here is an example of how a route can be obtained from HAL enabled objects:\r\n     * ```\r\n     * let params = modelMapper.removeParams(user);\r\n     * let uri = params['model'].links('lock').href;\r\n     * ```\r\n     * @method\r\n     * @param data A user object used to lock specified user resource.\r\n     * @returns A promise that is resolved once the lock user action has been performed.\r\n     * @example // user is a resource previously fetched using get action.\r\n                    userClient.lock(user)\r\n                        .then(function (data) {\r\n                            // perform success action here\r\n                        },\r\n                         function (response, status, headers, config) {\r\n                            // perform error handling here\r\n                        });\r\n     **/\r\n    UserClient.prototype.lock = function (data) {\r\n        return this.apiClient.put(this.userRoute.lock(data), data);\r\n    };\r\n    /**\r\n     * Returns a promise that is resolved once the approve user action has been performed. This action will mark the user resource as 'approved' in the system. This route uses HAL enabled objects to obtain routes and therefore it doesn't apply `userRoute` route template. Here is an example of how a route can be obtained from HAL enabled objects:\r\n     * ```\r\n     * let params = modelMapper.removeParams(user);\r\n     * let uri = params['model'].links('approve').href;\r\n     * ```\r\n     * @method\r\n     * @param data A user object used to approve specified user resource.\r\n     * @returns A promise that is resolved once the approve user action has been performed.\r\n     * @example // user is a resource previously fetched using get action.\r\n                    userClient.approve(user)\r\n                        .then(function (data) {\r\n                            // perform success action here\r\n                        })\r\n                         function (response, status, headers, config) {\r\n                            // perform error handling here\r\n                        });\r\n     **/\r\n    UserClient.prototype.approve = function (data) {\r\n        return this.apiClient.put(this.userRoute.approve(data), data);\r\n    };\r\n    /**\r\n     * Returns a promise that is resolved once the disapprove user action has been performed. This action will mark the user resource as 'not approved' in the system. This route uses HAL enabled objects to obtain routes and therefore it doesn't apply `userRoute` route template. Here is an example of how a route can be obtained from HAL enabled objects:\r\n     * ```\r\n     * let params = modelMapper.removeParams(user);\r\n     * let uri = params['model'].links('disapprove').href;\r\n     * ```\r\n     * @method\r\n     * @example // user is a resource previously fetched using get action.\r\n                    userClient.disapprove(user).then(function (data) {\r\n                        // perform success action here\r\n                    },\r\n                     function (response, status, headers, config) {\r\n                        // perform error handling here\r\n                    });\r\n     **/\r\n    UserClient.prototype.disapprove = function (data) {\r\n        return this.apiClient.put(this.userRoute.disapprove(data), data);\r\n    };\r\n    /**\r\n     * Returns a promise that is resolved once the changePassword action has been performed. This action will update user's password selection.\r\n     * @method\r\n     * @param username A username or id which uniquely identifies user resource.\r\n     * @param data A new password object used to update specified user password resource.\r\n     * @returns A promise that is resolved once the changedPassword action has been performed.\r\n     * @example userClient.changePassword('<username>', {\r\n                    newPassword : '<new-password>',\r\n                    sendMailNotification : false\r\n                })\r\n                .then(function () {\r\n                    // perform success action here\r\n                },\r\n                 function (data, status, headers, config) {\r\n                    // perform error handling here\r\n                })\r\n                .finally (function () {});\r\n     **/\r\n    UserClient.prototype.changePassword = function (username, data) {\r\n        return this.apiClient.put(this.userRoute.changePassword(username), data);\r\n    };\r\n    return UserClient;\r\n}());\r\nUserClient = tslib_1.__decorate([\r\n    inversify_1.injectable(),\r\n    tslib_1.__param(0, inversify_1.inject(_1.TYPES.UserRoute)),\r\n    tslib_1.__param(1, inversify_1.inject(_1.TYPES.UserSocialLoginClient)),\r\n    tslib_1.__param(2, inversify_1.inject(httpApi_1.httpTYPES.ApiClient)),\r\n    tslib_1.__metadata(\"design:paramtypes\", [typeof (_a = typeof _1.UserRoute !== \"undefined\" && _1.UserRoute) === \"function\" && _a || Object, typeof (_b = typeof _1.UserSocialLoginClient !== \"undefined\" && _1.UserSocialLoginClient) === \"function\" && _b || Object, typeof (_c = typeof httpApi_1.ApiClient !== \"undefined\" && httpApi_1.ApiClient) === \"function\" && _c || Object])\r\n], UserClient);\r\nexports.UserClient = UserClient;\r\nvar _a, _b, _c;\r\n/**\r\n * @overview\r\n ***Notes:**\r\n - Refer to the [Baasic REST API](http://dev.baasic.com/api/reference/home) for detailed information about available Baasic REST API end-points.\r\n - All end-point objects are transformed by the associated route definition.\r\n */ \r\n\n\n\n//////////////////\n// WEBPACK FOOTER\n// ./src/modules/membership/userClient.ts\n// module id = 272\n// module chunks = 0","/* globals module */\r\n/**\r\n * @module userRoute\r\n * @description Baasic User Route Definition provides Baasic route templates which can be expanded to Baasic REST URIs. Various services can use Baasic User Route Service to obtain needed routes while other routes will be obtained through HAL. By convention, all route services use the same function names as their corresponding services.\r\n */\r\n\"use strict\";\r\nObject.defineProperty(exports, \"__esModule\", { value: true });\r\nvar tslib_1 = require(\"tslib\");\r\nvar inversify_1 = require(\"inversify\");\r\nvar common_1 = require(\"../../common\");\r\n;\r\nvar _1 = require(\"./\");\r\nvar contracts_1 = require(\"../../core/contracts\");\r\nvar UserRoute = (function (_super) {\r\n    tslib_1.__extends(UserRoute, _super);\r\n    function UserRoute(appOptions, userSocialLoginRoute) {\r\n        var _this = _super.call(this, appOptions) || this;\r\n        _this.appOptions = appOptions;\r\n        _this.userSocialLoginRoute = userSocialLoginRoute;\r\n        /**\r\n        * Find route with route and query parameters.\r\n        **/\r\n        _this.findRoute = 'users/{?searchQuery,page,rpp,sort,embed,fields}';\r\n        /**\r\n        * Get route with route and query parameters.\r\n        **/\r\n        _this.getRoute = 'users/{username}/{?embed,fields}';\r\n        /**\r\n        * Create route with route and query parameters.\r\n        **/\r\n        _this.createRoute = 'users';\r\n        /**\r\n        * Update route with route and query parameters.\r\n        **/\r\n        _this.updateRoute = 'users/{id}';\r\n        /**\r\n        * Delete route with route and query parameters.\r\n        **/\r\n        _this.deleteRoute = 'users/{id}';\r\n        /**\r\n        * Exists route with route and query parameters.\r\n        **/\r\n        _this.existsRoute = 'users/{username}/exists/';\r\n        /**\r\n        * Change password route with route and query parameters.\r\n        **/\r\n        _this.changePasswordRoute = 'users/{username}/change-password';\r\n        /**\r\n        * Unlock route with route and query parameters.\r\n        **/\r\n        _this.unlockRoute = 'users/{id}/unlock';\r\n        /**\r\n        * Lock route with route and query parameters.\r\n        **/\r\n        _this.lockRoute = 'users/{id}/lock';\r\n        /**\r\n        * Approve route with route and query parameters.\r\n        **/\r\n        _this.approveRoute = 'users/{id}/approve';\r\n        /**\r\n        * Disapprove route with route and query parameters.\r\n        **/\r\n        _this.disapproveRoute = 'users/{id}/disapprove';\r\n        return _this;\r\n    }\r\n    Object.defineProperty(UserRoute.prototype, \"socialLogin\", {\r\n        get: function () {\r\n            return this.userSocialLoginRoute;\r\n        },\r\n        enumerable: true,\r\n        configurable: true\r\n    });\r\n    /**\r\n     * Parses find user route which can be expanded with additional options. Supported items are:\r\n     * - `searchQuery` - A string referencing user properties using the phrase or BQL (Baasic Query Language) search.\r\n     * - `page` - A value used to set the page number, i.e. to retrieve certain user subset from the storage.\r\n     * - `rpp` - A value used to limit the size of result set per page.\r\n     * - `sort` - A string used to set the user property to sort the result collection by.\r\n     * - `embed` - Comma separated list of resources to be contained within the current representation.\r\n     * @method\r\n     * @example userRoute.find({searchQuery: '<search-phrase>'});\r\n     **/\r\n    UserRoute.prototype.find = function (options) {\r\n        return _super.prototype.baseFind.call(this, this.findRoute, options);\r\n    };\r\n    /**\r\n     * Parses get user route which must be expanded with the username of the previously created user resource in the system. Additional expand supported items are:\r\n     * - `embed` - Comma separated list of resources to be contained within the current representation.\r\n     * @method\r\n     * @example userRoute.get({username: '<username>'})\r\n     **/\r\n    UserRoute.prototype.get = function (id, options) {\r\n        return _super.prototype.baseGet.call(this, this.getRoute, id, options, 'username');\r\n    };\r\n    /**\r\n     * Parses create user route, this URI template does not expose any additional options.\r\n     * @method\r\n     * @example userRoute.create();\r\n     **/\r\n    UserRoute.prototype.create = function () {\r\n        return _super.prototype.baseCreate.call(this, this.createRoute, {});\r\n    };\r\n    UserRoute.prototype.update = function (data) {\r\n        return _super.prototype.baseUpdate.call(this, this.updateRoute, data);\r\n    };\r\n    UserRoute.prototype.delete = function (data) {\r\n        return _super.prototype.baseDelete.call(this, this.deleteRoute, data);\r\n    };\r\n    /**\r\n     * Parses user exists route; URI template should be expanded with the username whose availability you'd like to check.\r\n     * @method\r\n     * @param username A username which uniquely identifies an application user.\r\n     * @example userRoute.exists({username: '<username>'});\r\n     **/\r\n    UserRoute.prototype.exists = function (username, options) {\r\n        return _super.prototype.baseGet.call(this, this.existsRoute, username, options, 'username');\r\n    };\r\n    /**\r\n     * Parses change password route, URI template should be expanded with the username of the user resource whose password should be updated.\r\n     * @method\r\n     * @param username A username or id which uniquely identifies user resource.\r\n     * @example userRoute.changePassword({username: '<username>'});\r\n     **/\r\n    UserRoute.prototype.changePassword = function (username) {\r\n        return _super.prototype.baseUpdate.call(this, this.changePasswordRoute, { username: username });\r\n    };\r\n    UserRoute.prototype.unlock = function (data) {\r\n        return _super.prototype.baseUpdate.call(this, this.unlockRoute, data, null, 'unlock');\r\n    };\r\n    UserRoute.prototype.lock = function (data) {\r\n        return _super.prototype.baseUpdate.call(this, 'users/{id}/lock', data, null, 'lock');\r\n    };\r\n    UserRoute.prototype.approve = function (data) {\r\n        return _super.prototype.baseUpdate.call(this, this.approveRoute, data, null, 'approve');\r\n    };\r\n    UserRoute.prototype.disapprove = function (data) {\r\n        return _super.prototype.baseUpdate.call(this, this.disapproveRoute, data, null, 'disapprove');\r\n    };\r\n    return UserRoute;\r\n}(common_1.BaseRoute));\r\nUserRoute = tslib_1.__decorate([\r\n    inversify_1.injectable(),\r\n    tslib_1.__param(0, inversify_1.inject(contracts_1.TYPES.IAppOptions)),\r\n    tslib_1.__param(1, inversify_1.inject(_1.TYPES.UserSocialLoginRoute)),\r\n    tslib_1.__metadata(\"design:paramtypes\", [typeof (_a = typeof contracts_1.IAppOptions !== \"undefined\" && contracts_1.IAppOptions) === \"function\" && _a || Object, typeof (_b = typeof _1.UserSocialLoginRoute !== \"undefined\" && _1.UserSocialLoginRoute) === \"function\" && _b || Object])\r\n], UserRoute);\r\nexports.UserRoute = UserRoute;\r\nvar _a, _b;\r\n/**\r\n * @overview\r\n ***Notes:**\r\n - Refer to the [Baasic REST API](http://dev.baasic.com/api/reference/home) for detailed information about available Baasic REST API end-points.\r\n - [URI Template](https://github.com/Baasic/uritemplate-js) syntax enables expanding the Baasic route templates to Baasic REST URIs providing it with an object that contains URI parameters.\r\n - All end-point objects are transformed by the associated route definition.\r\n */ \r\n\n\n\n//////////////////\n// WEBPACK FOOTER\n// ./src/modules/membership/userRoute.ts\n// module id = 273\n// module chunks = 0","/* globals module */\r\n/**\r\n * @module userSocialLoginClient\r\n * @description  User Social Login Client provides an easy way to consume  User REST API end-points. In order to obtain needed routes `userSocialLoginClient` uses `userSocialLoginRoute`.\r\n */\r\n\"use strict\";\r\nObject.defineProperty(exports, \"__esModule\", { value: true });\r\nvar tslib_1 = require(\"tslib\");\r\nvar inversify_1 = require(\"inversify\");\r\n;\r\nvar httpApi_1 = require(\"../../httpApi\");\r\nvar _1 = require(\"./\");\r\nvar UserSocialLoginClient = (function () {\r\n    function UserSocialLoginClient(userSocialLoginRoute, apiClient) {\r\n        this.userSocialLoginRoute = userSocialLoginRoute;\r\n        this.apiClient = apiClient;\r\n    }\r\n    Object.defineProperty(UserSocialLoginClient.prototype, \"routeDefinition\", {\r\n        /**\r\n          * Provides direct access to `userSocialLoginRoute`.\r\n          * @method\r\n          * @example userSocialLoginClient.routeDefinition.get().expand(expandObject);\r\n          **/\r\n        get: function () {\r\n            return this.userSocialLoginRoute;\r\n        },\r\n        enumerable: true,\r\n        configurable: true\r\n    });\r\n    /**\r\n     * Returns a promise that is resolved once the get action has been performed. Success response returns a list user resource connected social login providers.\r\n     * @param username A username or id which uniquely identifies user resource whose social login connections need to be retrieved.\r\n     * @returns A promise that is resolved once the get action has been performed.\r\n     * @method\r\n     * @example userSocialLoginClient.get('<username>')\r\n                    .then(function (collection) {\r\n                        // perform success action here\r\n                    },\r\n                     function (response, status, headers, config) {\r\n                        // perform error handling here\r\n                    });\r\n     **/\r\n    UserSocialLoginClient.prototype.get = function (username) {\r\n        return this.apiClient.get(this.routeDefinition.get(username));\r\n    };\r\n    /**\r\n     * Returns a promise that is resolved once the remove action has been performed. This action removes the user resource social login connection from the specified provider.\r\n     * @param username A username or id which uniquely identifies user resource whose social login connection needs to be removed.\r\n     * @param provider A value which uniquely identifies provider from which the user resource needs to be disconnected.\r\n     * @returns A promise that is resolved once the remove action has been performed.\r\n     * @method\r\n     * @example userSocialLoginClient.remove('<username>', '<provider>')\r\n                    .then(function (collection) {\r\n                        // perform success action here\r\n                    },\r\n                     function (response, status, headers, config) {\r\n                        // perform error handling here\r\n                    });\r\n     **/\r\n    UserSocialLoginClient.prototype.remove = function (username, provider) {\r\n        return this.apiClient.delete(this.userSocialLoginRoute.remove(username, provider));\r\n    };\r\n    return UserSocialLoginClient;\r\n}());\r\nUserSocialLoginClient = tslib_1.__decorate([\r\n    inversify_1.injectable(),\r\n    tslib_1.__param(0, inversify_1.inject(_1.TYPES.UserSocialLoginRoute)),\r\n    tslib_1.__param(1, inversify_1.inject(httpApi_1.httpTYPES.ApiClient)),\r\n    tslib_1.__metadata(\"design:paramtypes\", [typeof (_a = typeof _1.UserSocialLoginRoute !== \"undefined\" && _1.UserSocialLoginRoute) === \"function\" && _a || Object, typeof (_b = typeof httpApi_1.ApiClient !== \"undefined\" && httpApi_1.ApiClient) === \"function\" && _b || Object])\r\n], UserSocialLoginClient);\r\nexports.UserSocialLoginClient = UserSocialLoginClient;\r\nvar _a, _b;\r\n/**\r\n * @overview\r\n ***Notes:**\r\n - Refer to the [Baasic REST API](http://dev.baasic.com/api/reference/home) for detailed information about available Baasic REST API end-points.\r\n - All end-point objects are transformed by the associated route definition.\r\n */ \r\n\n\n\n//////////////////\n// WEBPACK FOOTER\n// ./src/modules/membership/userSocialLoginClient.ts\n// module id = 274\n// module chunks = 0","/* globals module */\r\n/**\r\n * @module userSocialLoginRoute\r\n * @description Baasic User Social Login Route Definition provides Baasic route templates which can be expanded to Baasic REST URIs. Various services can use Baasic User Route Service to obtain needed routes while other routes will be obtained through HAL. By convention, all route services use the same function names as their corresponding services.\r\n */\r\n\"use strict\";\r\nObject.defineProperty(exports, \"__esModule\", { value: true });\r\nvar tslib_1 = require(\"tslib\");\r\nvar inversify_1 = require(\"inversify\");\r\nvar common_1 = require(\"../../common\");\r\nvar contracts_1 = require(\"../../core/contracts\");\r\nvar UserSocialLoginRoute = (function (_super) {\r\n    tslib_1.__extends(UserSocialLoginRoute, _super);\r\n    function UserSocialLoginRoute(appOptions) {\r\n        var _this = _super.call(this, appOptions) || this;\r\n        _this.appOptions = appOptions;\r\n        /**\r\n        * Get route with route and query parameters.\r\n        **/\r\n        _this.getRoute = 'users/{username}/social-login';\r\n        /**\r\n        * Remove route with route and query parameters.\r\n        **/\r\n        _this.removeRoute = 'users/{username}/social-login/{provider}';\r\n        return _this;\r\n    }\r\n    /**\r\n     * Parses get social login route, URI template should be expanded with the username of the user resource whose social login connections should be retrieved.\r\n     * @method\r\n     * @param username A username or id which uniquely identifies user resource whose social login connections need to be retrieved.\r\n     * @example userSocialLoginRoute.get('<username>');\r\n     **/\r\n    UserSocialLoginRoute.prototype.get = function (username) {\r\n        return _super.prototype.baseGet.call(this, this.getRoute, username, { username: username });\r\n    };\r\n    /**\r\n     * Parses remove social login route which can be expanded with additional items. Supported items are:\r\n     * - `username` - A username which uniquely identifies an application user whose social login connection needs to be removed.\r\n     * - `provider` - Provider from which to disconnect the login resource from.\r\n     * @method\r\n     * @param username A username which uniquely identifies an application user whose social login connection needs to be removed.\r\n     * @param provider Provider from which to disconnect the login resource from.\r\n     * @example userSocialLoginRoute.remove('<username>', '<provider>');\r\n     **/\r\n    UserSocialLoginRoute.prototype.remove = function (username, provider) {\r\n        var params;\r\n        if (provider.hasOwnProperty('abrv')) {\r\n            params = {\r\n                provider: provider.abrv\r\n            };\r\n        }\r\n        else if (provider.hasOwnProperty('id')) {\r\n            params = {\r\n                provider: provider.id\r\n            };\r\n        }\r\n        else {\r\n            params = this.utility.extend({}, provider);\r\n        }\r\n        params.username = username;\r\n        return _super.prototype.baseFind.call(this, this.removeRoute, params);\r\n    };\r\n    return UserSocialLoginRoute;\r\n}(common_1.BaseRoute));\r\nUserSocialLoginRoute = tslib_1.__decorate([\r\n    inversify_1.injectable(),\r\n    tslib_1.__param(0, inversify_1.inject(contracts_1.TYPES.IAppOptions)),\r\n    tslib_1.__metadata(\"design:paramtypes\", [typeof (_a = typeof contracts_1.IAppOptions !== \"undefined\" && contracts_1.IAppOptions) === \"function\" && _a || Object])\r\n], UserSocialLoginRoute);\r\nexports.UserSocialLoginRoute = UserSocialLoginRoute;\r\nvar _a;\r\n/**\r\n * @overview\r\n ***Notes:**\r\n - Refer to the [Baasic REST API](http://dev.baasic.com/api/reference/home) for detailed information about available Baasic REST API end-points.\r\n - [URI Template](https://github.com/Baasic/uritemplate-js) syntax enables expanding the Baasic route templates to Baasic REST URIs providing it with an object that contains URI parameters.\r\n - All end-point objects are transformed by the associated route definition.\r\n */ \r\n\n\n\n//////////////////\n// WEBPACK FOOTER\n// ./src/modules/membership/userSocialLoginRoute.ts\n// module id = 275\n// module chunks = 0","\"use strict\";\r\nObject.defineProperty(exports, \"__esModule\", { value: true });\r\nvar inversify_1 = require(\"inversify\");\r\nvar _1 = require(\"./\");\r\nvar TYPES = {\r\n    MeteringACLClient: Symbol(\"MeteringACLClient\"),\r\n    MeteringACLRoute: Symbol(\"MeteringACLRoute\"),\r\n    MeteringBatchClient: Symbol(\"MeteringBatchClient\"),\r\n    MeteringBatchRoute: Symbol(\"MeteringBatchRoute\"),\r\n    MeteringCategoryBatchClient: Symbol(\"MeteringCategoryBatchClient\"),\r\n    MeteringCategoryBatchRoute: Symbol(\"MeteringCategoryBatchRoute\"),\r\n    MeteringCategoryRoute: Symbol(\"MeteringCategoryRoute\"),\r\n    MeteringCategoryClient: Symbol(\"MeteringCategoryClient\"),\r\n    MeteringRoute: Symbol(\"MeteringRoute\"),\r\n    MeteringClient: Symbol(\"MeteringClient\"),\r\n    MeteringSettingsRoute: Symbol(\"MeteringSettingsRoute\"),\r\n    MeteringSettingsClient: Symbol(\"MeteringSettingsClient\"),\r\n    MeteringStatisticsClient: Symbol(\"MeteringStatisticsClient\"),\r\n    MeteringStatisticsRoute: Symbol(\"MeteringStatisticsRoute\")\r\n};\r\nexports.TYPES = TYPES;\r\nvar diModule = new inversify_1.ContainerModule(function (bind) {\r\n    bind(TYPES.MeteringCategoryBatchRoute).to(_1.MeteringCategoryBatchRoute);\r\n    bind(TYPES.MeteringCategoryBatchClient).to(_1.MeteringCategoryBatchClient);\r\n    bind(TYPES.MeteringCategoryRoute).to(_1.MeteringCategoryRoute);\r\n    bind(TYPES.MeteringCategoryClient).to(_1.MeteringCategoryClient);\r\n    bind(TYPES.MeteringBatchRoute).to(_1.MeteringBatchRoute);\r\n    bind(TYPES.MeteringBatchClient).to(_1.MeteringBatchClient);\r\n    bind(TYPES.MeteringStatisticsRoute).to(_1.MeteringStatisticsRoute);\r\n    bind(TYPES.MeteringStatisticsClient).to(_1.MeteringStatisticsClient);\r\n    bind(TYPES.MeteringACLRoute).to(_1.MeteringACLRoute);\r\n    bind(TYPES.MeteringACLClient).to(_1.MeteringACLClient);\r\n    bind(TYPES.MeteringRoute).to(_1.MeteringRoute);\r\n    bind(TYPES.MeteringClient).to(_1.MeteringClient);\r\n    bind(TYPES.MeteringSettingsRoute).to(_1.MeteringSettingsRoute);\r\n    bind(TYPES.MeteringSettingsClient).to(_1.MeteringSettingsClient);\r\n});\r\nexports.diModule = diModule;\r\n\n\n\n//////////////////\n// WEBPACK FOOTER\n// ./src/modules/metering/diModule.ts\n// module id = 276\n// module chunks = 0","/* globals module */\r\n/**\r\n * @module meteringACLClient\r\n * @description  Metering ACL Client provides an easy way to consume  Metering REST API end-points. In order to obtain a needed routes `meteringACLClient` uses `meteringACLRoute`.\r\n */\r\n\"use strict\";\r\nObject.defineProperty(exports, \"__esModule\", { value: true });\r\nvar tslib_1 = require(\"tslib\");\r\nvar inversify_1 = require(\"inversify\");\r\n;\r\nvar httpApi_1 = require(\"../../httpApi\");\r\nvar _1 = require(\"./\");\r\nvar MeteringACLClient = (function () {\r\n    function MeteringACLClient(meteringACLRoute, apiClient) {\r\n        this.meteringACLRoute = meteringACLRoute;\r\n        this.apiClient = apiClient;\r\n    }\r\n    Object.defineProperty(MeteringACLClient.prototype, \"routeDefinition\", {\r\n        get: function () {\r\n            return this.meteringACLRoute;\r\n        },\r\n        enumerable: true,\r\n        configurable: true\r\n    });\r\n    /**\r\n     * Returns a promise that is resolved once the get action has been performed. Success response returns a list of ACL policies established for the specified metering resource.\r\n     * @method\r\n     * @param options Query resource options object.\r\n     * @returns A promise that is resolved once the get action has been performed.\r\n     * @example meteringClient.get({id: '<id>'})\r\n                   .then(function (data) {\r\n                       // perform success action here\r\n                   },\r\n                    function (response, status, headers, config) {\r\n                        // perform error handling here\r\n                   });\r\n    **/\r\n    MeteringACLClient.prototype.get = function (options) {\r\n        return this.apiClient.get(this.routeDefinition.get(options));\r\n    };\r\n    /**\r\n     * Returns a promise that is resolved once the update acl action has been performed, this action creates new ACL policy for the specified metering resource.\r\n     * @method\r\n     * @param options ACL options object.\r\n     * @example let options = {id : '<id>'};\r\n                let aclObj =  {  actionId: '<action-id'>,  roleId: '<roleId>',  userId: '<userId>' };\r\n                options[baasicConstants.modelPropertyName] = aclObj;\r\n                meteringACLClient.update(options)\r\n                    .then(function (data) {\r\n                        // perform success action here\r\n                    },\r\n                      function (response, status, headers, config) {\r\n                          // perform error handling here\r\n                    });\r\n     **/\r\n    MeteringACLClient.prototype.update = function (options) {\r\n        return this.apiClient.put(this.routeDefinition.update(options), this.routeDefinition.updateParams(options));\r\n    };\r\n    /**\r\n     * Returns a promise that is resolved once the removeByUser action has been performed. This action deletes ACL policy assigned to the specified user and metering resource.\r\n     * @method\r\n     * @param id User metering data id which uniquely identifies user metering data resource whose security privileges need to be retrieved and updated.\r\n     * @param action Action abbreviation which identifies ACL policy assigned to the specified user and user metering data resource.\r\n     *               Supported Values:\r\n     *               \"Create\"\r\n     *               \"Delete\"\r\n     *               \"Read\"\r\n     *               \"Update\"\r\n     * @param user A value that uniquely identifies user for which ACL policy needs to be removed.\r\n     * @param data ACL Policy object used to delete specified item in the system.\r\n     * @returns A promise that is resolved once the removeByUser action has been performed.\r\n     * @example meteringACLClient.removeByUser('<id>', '<access-action>', '<username>')\r\n                    .then(function (data) {\r\n                        // perform success action here\r\n                    },\r\n                     function (response, status, headers, config) {\r\n                         // perform error handling here\r\n                    });\r\n     **/\r\n    MeteringACLClient.prototype.removeByUser = function (id, action, user, data) {\r\n        return this.apiClient.delete(this.meteringACLRoute.deleteByUser(id, action, user, data));\r\n    };\r\n    /**\r\n     * Returns a promise that is resolved once the removeByRole action has been performed. This action deletes ACL policy assigned to the specified role and metering resource.\r\n     * @method\r\n     * @param id User metering data id which uniquely identifies user metering data resource whose security privileges need to be retrieved and updated.\r\n     * @param action Action abbreviation which identifies ACL policy assigned to the specified user and user metering data resource.\r\n     *               Supported Values:\r\n     *               \"Create\"\r\n     *               \"Delete\"\r\n     *               \"Read\"\r\n     *               \"Update\"\r\n     * @param role A value that uniquely identifies role for which ACL policy needs to be removed.\r\n     * @param data ACL Policy object used to delete specified item in the system.\r\n     * @returns A promise that is resolved once the removeByRole action has been performed.\r\n     * @example meteringACLClient.removeByRole('<id>', '<access-action>', '<role-name>')\r\n                    .then(function (data) {\r\n                        // perform success action here\r\n                    },\r\n                     function (response, status, headers, config) {\r\n                         // perform error handling here\r\n                    });\r\n     **/\r\n    MeteringACLClient.prototype.removeByRole = function (id, action, role, data) {\r\n        return this.apiClient.delete(this.meteringACLRoute.deleteByRole(id, action, role, data));\r\n    };\r\n    return MeteringACLClient;\r\n}());\r\nMeteringACLClient = tslib_1.__decorate([\r\n    inversify_1.injectable(),\r\n    tslib_1.__param(0, inversify_1.inject(_1.TYPES.MeteringACLRoute)),\r\n    tslib_1.__param(1, inversify_1.inject(httpApi_1.httpTYPES.ApiClient)),\r\n    tslib_1.__metadata(\"design:paramtypes\", [typeof (_a = typeof _1.MeteringACLRoute !== \"undefined\" && _1.MeteringACLRoute) === \"function\" && _a || Object, typeof (_b = typeof httpApi_1.ApiClient !== \"undefined\" && httpApi_1.ApiClient) === \"function\" && _b || Object])\r\n], MeteringACLClient);\r\nexports.MeteringACLClient = MeteringACLClient;\r\nvar _a, _b;\r\n/**\r\n * @copyright (c) 2017 Mono Ltd\r\n * @license MIT\r\n * @author Mono Ltd\r\n * @overview\r\n ***Notes:**\r\n - Refer to the [Baasic REST API](http://dev.baasic.com/api/reference/home) for detailed information about available Baasic REST API end-points.\r\n - All end-point objects are transformed by the associated route service.\r\n */ \r\n\n\n\n//////////////////\n// WEBPACK FOOTER\n// ./src/modules/metering/meteringACLClient.ts\n// module id = 277\n// module chunks = 0","/* globals module */\r\n/**\r\n * @module meteringACLRoute\r\n * @description Baasic Metering ACL Route Definition provides Baasic route templates which can be expanded to Baasic REST URIs. Various services can use Baasic Metering ACL Route Definition to obtain a needed routes while other routes will be obtained through HAL. By convention, all route services  use the same function names as their corresponding services.\r\n */\r\n\"use strict\";\r\nObject.defineProperty(exports, \"__esModule\", { value: true });\r\nvar tslib_1 = require(\"tslib\");\r\nvar inversify_1 = require(\"inversify\");\r\nvar common_1 = require(\"../../common\");\r\n;\r\nvar contracts_1 = require(\"../../core/contracts\");\r\nvar MeteringACLRoute = (function (_super) {\r\n    tslib_1.__extends(MeteringACLRoute, _super);\r\n    function MeteringACLRoute(appOptions) {\r\n        var _this = _super.call(this, appOptions) || this;\r\n        _this.appOptions = appOptions;\r\n        _this.getRoute = 'metering/data/{id}/acl/{?fields}';\r\n        _this.updateRoute = 'metering/data/{id}/acl/{?fields}';\r\n        _this.deleteByUserRoute = 'metering/data/{id}/acl/actions/{accessAction}/users/{user}/';\r\n        _this.deleteByRoleRoute = 'metering/data/{id}/acl/actions/{accessAction}/roles/{role}/';\r\n        return _this;\r\n    }\r\n    /**\r\n     * Parses get metering acl route; this URI template should be expanded with the Id of the metering.\r\n     * @method\r\n     * @param options ACL options object.\r\n     * @example meteringACLRoute.get({id: '<id>'});\r\n     **/\r\n    MeteringACLRoute.prototype.get = function (options) {\r\n        var params = this.utility.extend({}, options);\r\n        return _super.prototype.baseCreate.call(this, this.getRoute, params);\r\n    };\r\n    /**\r\n     * Parses update metering acl route; this URI template should be expanded with the Id of the metering.\r\n     * @method\r\n     * @param options ACL options object.\r\n     * @example meteringACLRoute.update({id: '<id>'});\r\n     **/\r\n    MeteringACLRoute.prototype.update = function (options) {\r\n        var params = this.utility.extend({}, options);\r\n        return _super.prototype.baseCreate.call(this, this.updateRoute, params);\r\n    };\r\n    /**\r\n     * Parses deleteByUser metering acl route which can be expanded with additional options. Supported items are:\r\n     * - `id` - Id of the metering.\r\n     * - `accessAction` - Action abbreviation which identifies ACL policy assigned to the specified user and metering resource.\r\n     * - `user` - A value which uniquely identifies user for which ACL policy needs to be removed.\r\n     * @method\r\n     * @param id User metering data id which uniquely identifies user metering data resource whose security privileges need to be retrieved and updated.\r\n     * @param action Action abbreviation which identifies ACL policy assigned to the specified user and user metering data resource.\r\n     *               Supported Values:\r\n     *               \"Create\"\r\n     *               \"Delete\"\r\n     *               \"Read\"\r\n     *               \"Update\"\r\n     * @param user A value that uniquely identifies user for which ACL policy needs to be removed.\r\n     * @param data ACL Policy object used to delete specified item in the system.\r\n     * @example meteringACLRoute.deleteByUser({\r\n                    id: '<id>',\r\n                    accessAction: '<access-action>',\r\n                    user: '<username>'\r\n                });\r\n     **/\r\n    MeteringACLRoute.prototype.deleteByUser = function (id, action, user, data) {\r\n        var params = this.modelMapper.removeParams(data);\r\n        params.id = id;\r\n        params.user = user;\r\n        params.accessAction = action;\r\n        return _super.prototype.baseCreate.call(this, this.deleteByUserRoute, params);\r\n    };\r\n    /**\r\n     * Parses deleteByUser metering acl route which can be expanded with additional options. Supported items are:\r\n     * - `id` - Id of the metering.\r\n     * - `accessAction` - Action abbreviation which identifies ACL policy assigned to the specified role and metering resource.\r\n     * - `role` - A value which uniquely identifies role for which ACL policy needs to be removed.\r\n     * @method\r\n     * @param id User metering data id which uniquely identifies user metering data resource whose security privileges need to be retrieved and updated.\r\n     * @param action Action abbreviation which identifies ACL policy assigned to the specified user and user metering data resource.\r\n     *               Supported Values:\r\n     *               \"Create\"\r\n     *               \"Delete\"\r\n     *               \"Read\"\r\n     *               \"Update\"\r\n     * @param role A value that uniquely identifies role for which ACL policy needs to be removed.\r\n     * @param data ACL Policy object used to delete specified item in the system.\r\n     * @example meteringACLRoute.deleteByRole({ id: '<id>', accessAction: '<access-action>', role: '<role-name>'});\r\n     **/\r\n    MeteringACLRoute.prototype.deleteByRole = function (id, action, role, data) {\r\n        var params = this.modelMapper.removeParams(data);\r\n        params.id = id;\r\n        params.role = role;\r\n        params.accessAction = action;\r\n        return _super.prototype.baseCreate.call(this, this.deleteByRoleRoute, params);\r\n    };\r\n    MeteringACLRoute.prototype.updateParams = function (options) {\r\n        var params = this.utility.extend({}, options);\r\n        return params[this.modelMapper.modelPropertyName];\r\n    };\r\n    return MeteringACLRoute;\r\n}(common_1.BaseRoute));\r\nMeteringACLRoute = tslib_1.__decorate([\r\n    inversify_1.injectable(),\r\n    tslib_1.__param(0, inversify_1.inject(contracts_1.TYPES.IAppOptions)),\r\n    tslib_1.__metadata(\"design:paramtypes\", [typeof (_a = typeof contracts_1.IAppOptions !== \"undefined\" && contracts_1.IAppOptions) === \"function\" && _a || Object])\r\n], MeteringACLRoute);\r\nexports.MeteringACLRoute = MeteringACLRoute;\r\nvar _a;\r\n/**\r\n * @copyright (c) 2017 Mono Ltd\r\n * @license MIT\r\n * @author Mono Ltd\r\n * @overview\r\n ***Notes:**\r\n  - Refer to the [Baasic REST API](http://dev.baasic.com/api/reference/home) for detailed information about available Baasic REST API end-points.\r\n  - [URI Template](https://github.com/Baasic/uritemplate-js) syntax enables expanding the Baasic route templates to Baasic REST URIs providing it with an object that contains URI parameters.\r\n  - All end-point objects are transformed by the associated route service.\r\n */ \r\n\n\n\n//////////////////\n// WEBPACK FOOTER\n// ./src/modules/metering/meteringACLRoute.ts\n// module id = 278\n// module chunks = 0","/* globals module */\r\n/**\r\n * @module meteringBatchClient\r\n * @description  Metering Batch Client provides an easy way to consume  Metering REST API end-points. In order to obtain a needed routes `meteringBatchClient` uses `meteringBatchRoute`.\r\n */\r\n\"use strict\";\r\nObject.defineProperty(exports, \"__esModule\", { value: true });\r\nvar tslib_1 = require(\"tslib\");\r\nvar inversify_1 = require(\"inversify\");\r\n;\r\nvar httpApi_1 = require(\"../../httpApi\");\r\nvar _1 = require(\"./\");\r\nvar MeteringBatchClient = (function () {\r\n    function MeteringBatchClient(meteringBatchRoute, apiClient) {\r\n        this.meteringBatchRoute = meteringBatchRoute;\r\n        this.apiClient = apiClient;\r\n    }\r\n    Object.defineProperty(MeteringBatchClient.prototype, \"routeDefinition\", {\r\n        get: function () {\r\n            return this.meteringBatchRoute;\r\n        },\r\n        enumerable: true,\r\n        configurable: true\r\n    });\r\n    /**\r\n     * Returns a promise that is resolved once the create data action has been performed; this action creates new data resources.\r\n     * @method\r\n     * @param data An MeteringData objects that need to be inserted into the system.\r\n     * @returns A promise that is resolved once the create data action has been performed.\r\n     * @example  meteringBatchClient.create([{\r\n                    applicationId : '<applicationId>',\r\n                    category : '<category>',\r\n                    name: '<name>',\r\n                    value: '<value>'\r\n                }])\r\n                .then(function (data) {\r\n                    // perform success action here\r\n                },\r\n                 function (response, status, headers, config) {\r\n                     // perform error handling here\r\n                });\r\n     **/\r\n    MeteringBatchClient.prototype.create = function (data) {\r\n        return this.apiClient.post(this.routeDefinition.create(), this.routeDefinition.createParams(data));\r\n    };\r\n    /**\r\n     * Returns a promise that is resolved once the update data action has been performed; this action updates specified data resources.\r\n     * @method\r\n     * @param data An MeteringData objects used to update specified MeteringData resources.\r\n     * @returns A promise that is resolved once the update data action has been performed.\r\n     * @example   meteringBatchClient.update(companies)\r\n                        .then(function (data) {\r\n                            // perform success action here\r\n                        },\r\n                         function (response, status, headers, config) {\r\n                             // perform error handling here\r\n                        });\r\n     **/\r\n    MeteringBatchClient.prototype.update = function (data) {\r\n        return this.apiClient.put(this.routeDefinition.update(), this.routeDefinition.updateParams(data));\r\n    };\r\n    /**\r\n     * Returns a promise that is resolved once the remove action has been performed. This action will remove data resources from the system if successfully completed.\r\n     * @method\r\n     * @param ids MeteringData ids which uniquely identify MeteringData resources that need to be deleted.\r\n     * @returns A promise that is resolved once the remove action has been performed.\r\n     * @example meteringClient.remove(companyIds)\r\n                    .then(function (data) {\r\n                        // perform success action here\r\n                    },\r\n                     function (response, status, headers, config) {\r\n                         // perform error handling here\r\n                    });\r\n     **/\r\n    MeteringBatchClient.prototype.remove = function (ids) {\r\n        return this.apiClient.delete(this.meteringBatchRoute.delete(), undefined, ids);\r\n    };\r\n    return MeteringBatchClient;\r\n}());\r\nMeteringBatchClient = tslib_1.__decorate([\r\n    inversify_1.injectable(),\r\n    tslib_1.__param(0, inversify_1.inject(_1.TYPES.MeteringBatchRoute)),\r\n    tslib_1.__param(1, inversify_1.inject(httpApi_1.httpTYPES.ApiClient)),\r\n    tslib_1.__metadata(\"design:paramtypes\", [typeof (_a = typeof _1.MeteringBatchRoute !== \"undefined\" && _1.MeteringBatchRoute) === \"function\" && _a || Object, typeof (_b = typeof httpApi_1.ApiClient !== \"undefined\" && httpApi_1.ApiClient) === \"function\" && _b || Object])\r\n], MeteringBatchClient);\r\nexports.MeteringBatchClient = MeteringBatchClient;\r\nvar _a, _b;\r\n/**\r\n * @copyright (c) 2017 Mono Ltd\r\n * @license MIT\r\n * @author Mono Ltd\r\n * @overview\r\n ***Notes:**\r\n - Refer to the [Baasic REST API](http://dev.baasic.com/api/reference/home) for detailed information about available Baasic REST API end-points.\r\n - All end-point objects are transformed by the associated route service.\r\n */ \r\n\n\n\n//////////////////\n// WEBPACK FOOTER\n// ./src/modules/metering/meteringBatchClient.ts\n// module id = 279\n// module chunks = 0","/* globals module */\r\n/**\r\n * @module meteringBatchRoute\r\n * @description Baasic Metering Batch Route Definition provides Baasic route templates which can be expanded to Baasic REST URIs. Various services can use Baasic Metering Route Definition Service to obtain a needed routes while other routes will be obtained through HAL. By convention, all route services  use the same function names as their corresponding services.\r\n */\r\n\"use strict\";\r\nObject.defineProperty(exports, \"__esModule\", { value: true });\r\nvar tslib_1 = require(\"tslib\");\r\nvar inversify_1 = require(\"inversify\");\r\nvar common_1 = require(\"../../common\");\r\n;\r\nvar contracts_1 = require(\"../../core/contracts\");\r\nvar MeteringBatchRoute = (function (_super) {\r\n    tslib_1.__extends(MeteringBatchRoute, _super);\r\n    function MeteringBatchRoute(appOptions) {\r\n        var _this = _super.call(this, appOptions) || this;\r\n        _this.appOptions = appOptions;\r\n        _this.createRoute = 'metering/data/batch';\r\n        _this.updateRoute = 'metering/data/batch';\r\n        _this.deleteRoute = 'metering/data/batch';\r\n        return _this;\r\n    }\r\n    /**\r\n     * Parses create route; this URI template does not expose any additional options.\r\n     * @method\r\n     * @example meteringBatchRoute.create();\r\n     **/\r\n    MeteringBatchRoute.prototype.create = function () {\r\n        return _super.prototype.baseCreate.call(this, this.createRoute, {});\r\n    };\r\n    /**\r\n     * Parses update route; this URI template does not expose any additional options.\r\n     * @method\r\n     * @example meteringBatchRoute.update();\r\n     **/\r\n    MeteringBatchRoute.prototype.update = function () {\r\n        return _super.prototype.baseUpdate.call(this, this.updateRoute, {});\r\n    };\r\n    /**\r\n     * Parses remove route; this URI template does not expose any additional options.\r\n     * @method\r\n     * @example meteringBatchRoute.delete();\r\n     **/\r\n    MeteringBatchRoute.prototype.delete = function () {\r\n        return _super.prototype.baseDelete.call(this, this.deleteRoute, {});\r\n    };\r\n    return MeteringBatchRoute;\r\n}(common_1.BaseRoute));\r\nMeteringBatchRoute = tslib_1.__decorate([\r\n    inversify_1.injectable(),\r\n    tslib_1.__param(0, inversify_1.inject(contracts_1.TYPES.IAppOptions)),\r\n    tslib_1.__metadata(\"design:paramtypes\", [typeof (_a = typeof contracts_1.IAppOptions !== \"undefined\" && contracts_1.IAppOptions) === \"function\" && _a || Object])\r\n], MeteringBatchRoute);\r\nexports.MeteringBatchRoute = MeteringBatchRoute;\r\nvar _a;\r\n/**\r\n * @copyright (c) 2017 Mono Ltd\r\n * @license MIT\r\n * @author Mono Ltd\r\n * @overview\r\n ***Notes:**\r\n - Refer to the [Baasic REST API](http://dev.baasic.com/api/reference/home) for detailed information about available Baasic REST API end-points.\r\n - [URI Template](https://github.com/Baasic/uritemplate-js) syntax enables expanding the Baasic route templates to Baasic REST URIs providing it with an object that contains URI parameters.\r\n - All end-point objects are transformed by the associated route service.\r\n */ \r\n\n\n\n//////////////////\n// WEBPACK FOOTER\n// ./src/modules/metering/meteringBatchRoute.ts\n// module id = 280\n// module chunks = 0","/* globals module */\r\n/**\r\n * @module meteringCategoryBatchClient\r\n * @description  Metering Category Batch Client provides an easy way to consume  Metering REST API end-points. In order to obtain a needed routes `meteringCategoryBatchClient` uses `meteringCategoryBatchRoute`.\r\n */\r\n\"use strict\";\r\nObject.defineProperty(exports, \"__esModule\", { value: true });\r\nvar tslib_1 = require(\"tslib\");\r\nvar inversify_1 = require(\"inversify\");\r\nvar httpApi_1 = require(\"../../httpApi\");\r\nvar _1 = require(\"./\");\r\nvar MeteringCategoryBatchClient = (function () {\r\n    function MeteringCategoryBatchClient(meteringCategoryBatchRoute, apiClient) {\r\n        this.meteringCategoryBatchRoute = meteringCategoryBatchRoute;\r\n        this.apiClient = apiClient;\r\n    }\r\n    Object.defineProperty(MeteringCategoryBatchClient.prototype, \"routeDefinition\", {\r\n        get: function () {\r\n            return this.meteringCategoryBatchRoute;\r\n        },\r\n        enumerable: true,\r\n        configurable: true\r\n    });\r\n    /**\r\n     * Returns a promise that is resolved once the create category action has been performed; this action creates new category resources.\r\n     * @method\r\n     * @param data An MeteringCategory objects that need to be inserted into the system.\r\n     * @returns A promise that is resolved once the create category action has been performed.\r\n     * @example  meteringCategoryBatchClient.create([{\r\n                    aggregateFunction : '<aggregateFunction>',\r\n                    category : '<name>',\r\n                     defaultSamplingRate: '<defaultSamplingRate>',\r\n                     slug: '<slug>',\r\n                     unitFactor: '<unitFactor>',\r\n                     unitName: '<unitName>'\r\n                }])\r\n                .then(function (data) {\r\n                    // perform success action here\r\n                },\r\n                 function (response, status, headers, config) {\r\n                     // perform error handling here\r\n                });\r\n     **/\r\n    MeteringCategoryBatchClient.prototype.create = function (data) {\r\n        return this.apiClient.post(this.routeDefinition.create(), this.routeDefinition.createParams(data));\r\n    };\r\n    /**\r\n     * Returns a promise that is resolved once the update category action has been performed; this action updates specified category resources.\r\n     * @method\r\n     * @param data An MeteringCategory objects used to update specified MeteringCategory resources.\r\n     * @returns A promise that is resolved once the update category action has been performed.\r\n     * @example   meteringCategoryClient.update(companies)\r\n                    .then(function (data) {\r\n                        // perform success action here\r\n                    },\r\n                     function (response, status, headers, config) {\r\n                         // perform error handling here\r\n                    });\r\n     **/\r\n    MeteringCategoryBatchClient.prototype.update = function (data) {\r\n        return this.apiClient.put(this.routeDefinition.update(), this.routeDefinition.updateParams(data));\r\n    };\r\n    /**\r\n     * Returns a promise that is resolved once the remove action has been performed. This action will remove category resources from the system if successfully completed.\r\n     * @method\r\n     * @param ids MeteringCategory ids which uniquely identify MeteringCategory resources that need to be deleted.\r\n     * @returns A promise that is resolved once the remove action has been performed.\r\n     * @example companyClient.remove(companyIds)\r\n                    .then(function (data) {\r\n                        // perform success action here\r\n                    },\r\n                     function (response, status, headers, config) {\r\n                         // perform error handling here\r\n                    });\r\n     **/\r\n    MeteringCategoryBatchClient.prototype.delete = function (ids) {\r\n        return this.apiClient.delete(this.routeDefinition.delete(), this.routeDefinition.deleteParams(ids));\r\n    };\r\n    return MeteringCategoryBatchClient;\r\n}());\r\nMeteringCategoryBatchClient = tslib_1.__decorate([\r\n    inversify_1.injectable(),\r\n    tslib_1.__param(0, inversify_1.inject(_1.TYPES.MeteringCategoryBatchRoute)),\r\n    tslib_1.__param(1, inversify_1.inject(httpApi_1.httpTYPES.ApiClient)),\r\n    tslib_1.__metadata(\"design:paramtypes\", [typeof (_a = typeof _1.MeteringCategoryBatchRoute !== \"undefined\" && _1.MeteringCategoryBatchRoute) === \"function\" && _a || Object, typeof (_b = typeof httpApi_1.ApiClient !== \"undefined\" && httpApi_1.ApiClient) === \"function\" && _b || Object])\r\n], MeteringCategoryBatchClient);\r\nexports.MeteringCategoryBatchClient = MeteringCategoryBatchClient;\r\nvar _a, _b;\r\n/**\r\n * @copyright (c) 2017 Mono Ltd\r\n * @license MIT\r\n * @author Mono Ltd\r\n * @overview\r\n ***Notes:**\r\n - Refer to the [Baasic REST API](http://dev.baasic.com/api/reference/home) for detailed information about available Baasic REST API end-points.\r\n - All end-point objects are transformed by the associated route service.\r\n */ \r\n\n\n\n//////////////////\n// WEBPACK FOOTER\n// ./src/modules/metering/meteringCategoryBatchClient.ts\n// module id = 281\n// module chunks = 0","/* globals module */\r\n/**\r\n * @module meteringCategoryBatchRoute  * @description Baasic Metering Category Batch Route Definition provides Baasic route templates which can be expanded to Baasic REST URIs. Various services can use Baasic Metering Category Batch Route Definition to obtain a needed routes while other routes will be obtained through HAL. By convention, all route services  use the same function names as their corresponding services.\r\n */\r\n\"use strict\";\r\nObject.defineProperty(exports, \"__esModule\", { value: true });\r\nvar tslib_1 = require(\"tslib\");\r\nvar inversify_1 = require(\"inversify\");\r\nvar common_1 = require(\"../../common\");\r\n;\r\nvar contracts_1 = require(\"../../core/contracts\");\r\nvar MeteringCategoryBatchRoute = (function (_super) {\r\n    tslib_1.__extends(MeteringCategoryBatchRoute, _super);\r\n    function MeteringCategoryBatchRoute(appOptions) {\r\n        var _this = _super.call(this, appOptions) || this;\r\n        _this.appOptions = appOptions;\r\n        _this.createRoute = 'metering/categories/batch';\r\n        _this.updateRoute = 'metering/categories/batch';\r\n        _this.deleteRoute = 'metering/categories/batch';\r\n        return _this;\r\n    }\r\n    /**\r\n     * Parses create route; this URI template does not expose any additional options.\r\n     * @method\r\n     * @example meteringCategoryBatchRoute.create();\r\n     **/\r\n    MeteringCategoryBatchRoute.prototype.create = function () {\r\n        return _super.prototype.baseCreate.call(this, this.createRoute, {});\r\n    };\r\n    /**\r\n     * Parses create route; this URI template does not expose any additional options.\r\n     * @method\r\n     * @example meteringCategoryBatchRoute.update();\r\n     **/\r\n    MeteringCategoryBatchRoute.prototype.update = function () {\r\n        return _super.prototype.baseUpdate.call(this, this.updateRoute, {});\r\n    };\r\n    /**\r\n     * Parses remove route; this URI template does not expose any additional options.\r\n     * @method\r\n     * @example meteringCategoryBatchRoute.delete();\r\n     **/\r\n    MeteringCategoryBatchRoute.prototype.delete = function () {\r\n        return _super.prototype.baseDelete.call(this, this.deleteRoute, {});\r\n    };\r\n    return MeteringCategoryBatchRoute;\r\n}(common_1.BaseRoute));\r\nMeteringCategoryBatchRoute = tslib_1.__decorate([\r\n    inversify_1.injectable(),\r\n    tslib_1.__param(0, inversify_1.inject(contracts_1.TYPES.IAppOptions)),\r\n    tslib_1.__metadata(\"design:paramtypes\", [typeof (_a = typeof contracts_1.IAppOptions !== \"undefined\" && contracts_1.IAppOptions) === \"function\" && _a || Object])\r\n], MeteringCategoryBatchRoute);\r\nexports.MeteringCategoryBatchRoute = MeteringCategoryBatchRoute;\r\nvar _a;\r\n/**\r\n * @copyright (c) 2017 Mono Ltd\r\n * @license MIT\r\n * @author Mono Ltd\r\n * @overview\r\n ***Notes:**\r\n - Refer to the [REST API documentation](http://github.com/Baasic/baasic-rest-api/wiki) for detailed information about available Baasic REST API end-points.\r\n - [URI Template](https://github.com/Baasic/uritemplate-js) syntax enables expanding the Baasic route templates to Baasic REST URIs providing it with an object that contains URI parameters.\r\n - All end-point objects are transformed by the associated route service.\r\n */ \r\n\n\n\n//////////////////\n// WEBPACK FOOTER\n// ./src/modules/metering/meteringCategoryBatchRoute.ts\n// module id = 282\n// module chunks = 0","/* globals module */\r\n/**\r\n * @module meteringCategoryClient\r\n * @description  Metering Category Client provides an easy way to consume  Metering REST API end-points. In order to obtain a needed routes `meteringCategoryClient` uses `meteringCategoryRoute`.\r\n */\r\n\"use strict\";\r\nObject.defineProperty(exports, \"__esModule\", { value: true });\r\nvar tslib_1 = require(\"tslib\");\r\nvar inversify_1 = require(\"inversify\");\r\n;\r\nvar httpApi_1 = require(\"../../httpApi\");\r\nvar _1 = require(\"./\");\r\nvar MeteringCategoryClient = (function () {\r\n    function MeteringCategoryClient(meteringCategoryRoute, apiClient, meteringCategoryBatchClient) {\r\n        this.meteringCategoryRoute = meteringCategoryRoute;\r\n        this.apiClient = apiClient;\r\n        this.meteringCategoryBatchClient = meteringCategoryBatchClient;\r\n    }\r\n    Object.defineProperty(MeteringCategoryClient.prototype, \"routeDefinition\", {\r\n        get: function () {\r\n            return this.meteringCategoryRoute;\r\n        },\r\n        enumerable: true,\r\n        configurable: true\r\n    });\r\n    Object.defineProperty(MeteringCategoryClient.prototype, \"batch\", {\r\n        get: function () {\r\n            return this.meteringCategoryBatchClient;\r\n        },\r\n        enumerable: true,\r\n        configurable: true\r\n    });\r\n    /**\r\n     * Returns a promise that is resolved once the find action has been performed. Success response returns a list of metering resources matching the given criteria.\r\n     * @method\r\n     * @param options Query resource options object.\r\n     * @returns A promise that is resolved once the find action has been performed.\r\n     * @example meteringCategoryClient.find({\r\n                    pageNumber : 1,\r\n                    pageSize : 10,\r\n                    orderBy : '<field>',\r\n                    orderDirection : '<asc|desc>',\r\n                    search : '<search-phrase>'\r\n                })\r\n                .then(function (collection) {\r\n                    // perform success action here\r\n                },\r\n                 function (response, status, headers, config) {\r\n                     // perform error handling here\r\n                });\r\n     **/\r\n    MeteringCategoryClient.prototype.find = function (options) {\r\n        return this.apiClient.get(this.routeDefinition.find(options));\r\n    };\r\n    /**\r\n     * Returns a promise that is resolved once the get action has been performed. Success response returns the metering resource.\r\n     * @method\r\n     * @param id MeteringCategory id which uniquely identifies MeteringCategory resource that needs to be retrieved.\r\n     * @param options Query resource options object.\r\n     * @returns A promise that is resolved once the get action has been performed.\r\n     * @example meteringCategoryClient.get(id)\r\n                    .then(function (data) {\r\n                        // perform success action here\r\n                    },\r\n                     function (response, status, headers, config) {\r\n                         // perform error handling here\r\n                    });\r\n     **/\r\n    MeteringCategoryClient.prototype.get = function (id, options) {\r\n        return this.apiClient.get(this.meteringCategoryRoute.get(id, options));\r\n    };\r\n    /**\r\n     * Returns a promise that is resolved once the create metering action has been performed; this action creates a new metering resource.\r\n     * @method\r\n     * @param data An MeteringCategory object that needs to be inserted into the system.\r\n     * @returns A promise that is resolved once the create metering action has been performed.\r\n     * @example meteringCategoryClient.create({\r\n                    category : '<category-name>',\r\n                    unitName : 'Kb',\r\n                    unitFactor: 1,\r\n                    defaultSamplingRate: '<value>', - Defaults: Minute = 1,Hour = 2,Day = 3,Week = 4,Month = 5,Year = 6\r\n                    aggregateFunction: '<value>' - Defaults: None = 0,Count = 1,Avg = 2,Max = 3,Min = 4,Sum = 5\r\n                })\r\n                .then(function (data) {\r\n                    // perform success action here\r\n                },\r\n                 function (response, status, headers, config) {\r\n                     // perform error handling here\r\n                });\r\n     **/\r\n    MeteringCategoryClient.prototype.create = function (data) {\r\n        return this.apiClient.post(this.routeDefinition.create(), this.routeDefinition.createParams(data));\r\n    };\r\n    /**\r\n     * Returns a promise that is resolved once the update metering action has been performed; this action updates a metering resource. This route uses HAL enabled objects to obtain routes and therefore it doesn't apply `meteringCategoryRoute` route template. Here is an example of how a route can be obtained from HAL enabled objects:\r\n     * ```\r\n     * let params = modelMapepr.updateParams(meteringCategory);\r\n     * let uri = params['model'].links('put').href;\r\n     * ```\r\n     * @method\r\n     * @param data An meteringCategory object used to update specified MeteringCategory resource.\r\n     * @returns A promise that is resolved once the remove action has been performed.\r\n     * @example // meteringCategory is a resource previously fetched using get action.\r\n                    meteringCategory.defaultSamplingRate = 'Day';\r\n                    meteringCategoryClient.update(meteringCategory)\r\n                        .then(function (data) {\r\n                            // perform success action here\r\n                        },\r\n                         function (response, status, headers, config) {\r\n                             // perform error handling here\r\n                        });\r\n     **/\r\n    MeteringCategoryClient.prototype.update = function (data) {\r\n        return this.apiClient.put(this.routeDefinition.update(data), this.routeDefinition.updateParams(data));\r\n    };\r\n    /**\r\n     * Returns a promise that is resolved once the remove action has been performed. This action will remove a metering resource from the system if successfully completed. This route uses HAL enabled objects to obtain routes and therefore it doesn't apply `meteringCategoryRoute` route template. Here is an example of how a route can be obtained from HAL enabled objects:\r\n     * ```\r\n     * let params = modelMapper.removeParams(meteringCategory);\r\n     * let uri = params['model'].links('delete').href;\r\n     * ```\r\n     * @method\r\n     * @param data An meteringCategory object used to update specified MeteringCategory resource.\r\n     * @returns A promise that is resolved once the remove action has been performed.\r\n     * @example // meteringCategory is a resource previously fetched using get action.\r\n                    meteringCategoryClient.remove(meteringCategory)\r\n                        .then(function (data) {\r\n                            // perform success action here\r\n                        },\r\n                         function (response, status, headers, config) {\r\n                             // perform error handling here\r\n                        });\r\n     **/\r\n    MeteringCategoryClient.prototype.remove = function (data) {\r\n        return this.apiClient.delete(this.routeDefinition.delete(data));\r\n    };\r\n    return MeteringCategoryClient;\r\n}());\r\nMeteringCategoryClient = tslib_1.__decorate([\r\n    inversify_1.injectable(),\r\n    tslib_1.__param(0, inversify_1.inject(_1.TYPES.MeteringCategoryRoute)),\r\n    tslib_1.__param(1, inversify_1.inject(httpApi_1.httpTYPES.ApiClient)),\r\n    tslib_1.__param(2, inversify_1.inject(_1.TYPES.MeteringCategoryBatchClient)),\r\n    tslib_1.__metadata(\"design:paramtypes\", [typeof (_a = typeof _1.MeteringCategoryRoute !== \"undefined\" && _1.MeteringCategoryRoute) === \"function\" && _a || Object, typeof (_b = typeof httpApi_1.ApiClient !== \"undefined\" && httpApi_1.ApiClient) === \"function\" && _b || Object, typeof (_c = typeof _1.MeteringCategoryBatchClient !== \"undefined\" && _1.MeteringCategoryBatchClient) === \"function\" && _c || Object])\r\n], MeteringCategoryClient);\r\nexports.MeteringCategoryClient = MeteringCategoryClient;\r\nvar _a, _b, _c;\r\n/**\r\n * @copyright (c) 2017 Mono Ltd\r\n * @license MIT\r\n * @author Mono Ltd\r\n * @overview\r\n ***Notes:**\r\n - Refer to the [Baasic REST API](http://dev.baasic.com/api/reference/home) for detailed information about available Baasic REST API end-points.\r\n - All end-point objects are transformed by the associated route service.\r\n */ \r\n\n\n\n//////////////////\n// WEBPACK FOOTER\n// ./src/modules/metering/meteringCategoryClient.ts\n// module id = 283\n// module chunks = 0","/* globals module */\r\n/**\r\n * @module meteringCategoryRoute  * @description Baasic Metering Category Route Definition provides Baasic route templates which can be expanded to Baasic REST URIs. Various services can use Baasic Metering Category Route Definition to obtain a needed routes while other routes will be obtained through HAL. By convention, all route services  use the same function names as their corresponding services.\r\n */\r\n\"use strict\";\r\nObject.defineProperty(exports, \"__esModule\", { value: true });\r\nvar tslib_1 = require(\"tslib\");\r\nvar inversify_1 = require(\"inversify\");\r\nvar common_1 = require(\"../../common\");\r\n;\r\nvar _1 = require(\"./\");\r\nvar contracts_1 = require(\"../../core/contracts\");\r\nvar MeteringCategoryRoute = (function (_super) {\r\n    tslib_1.__extends(MeteringCategoryRoute, _super);\r\n    function MeteringCategoryRoute(appOptions, meteringCategoryBatchRoute) {\r\n        var _this = _super.call(this, appOptions) || this;\r\n        _this.appOptions = appOptions;\r\n        _this.meteringCategoryBatchRoute = meteringCategoryBatchRoute;\r\n        _this.findRoute = 'metering/categories/{?searchQuery,page,rpp,sort,embed,fields}';\r\n        _this.getRoute = 'metering/categories/{id}/{?embed,fields}';\r\n        _this.createRoute = 'metering/categories';\r\n        _this.updateRoute = 'metering/categories/{id}';\r\n        _this.deleteRoute = 'metering/categories/{id}';\r\n        return _this;\r\n    }\r\n    Object.defineProperty(MeteringCategoryRoute.prototype, \"batch\", {\r\n        get: function () {\r\n            return this.meteringCategoryBatchRoute;\r\n        },\r\n        enumerable: true,\r\n        configurable: true\r\n    });\r\n    /**\r\n     * Parses find metering category route which can be expanded with additional options. Supported items are:\r\n     * - `searchQuery` - A string value used to identify metering resources using the phrase search.\r\n     * - `page` - A value used to set the page number, i.e. to retrieve certain metering subset from the storage.\r\n     * - `rpp` - A value used to limit the size of result set per page.\r\n     * - `sort` - A string used to set the metering property to sort the result collection by.\r\n     * - `embed` - Comma separated list of resources to be contained within the current representation.\r\n     * @method\r\n     * @param options Query resource options object.\r\n     * @example meteringCategoryRoute.find({searchQuery: '<search-phrase>'});\r\n     **/\r\n    MeteringCategoryRoute.prototype.find = function (options) {\r\n        return _super.prototype.baseFind.call(this, this.findRoute, options);\r\n    };\r\n    /**\r\n     * Parses get route; this route doesn't expose any properties.\r\n     * @method\r\n     * @param id MeteringCategory id which uniquely identifies MeteringCategory resource that needs to be retrieved.\r\n     * @param options Query resource options object.\r\n     * @example meteringCategoryRoute.get(id);\r\n     **/\r\n    MeteringCategoryRoute.prototype.get = function (id, options) {\r\n        return _super.prototype.baseGet.call(this, this.getRoute, id, options);\r\n    };\r\n    /**\r\n     * Parses create metering category route; this URI template does not expose any additional options.\r\n     * @method\r\n     * @example meteringCategoryRoute.create();\r\n     **/\r\n    MeteringCategoryRoute.prototype.create = function () {\r\n        return _super.prototype.baseCreate.call(this, this.createRoute, {});\r\n    };\r\n    /**\r\n     * Parses update metering category route; this URI template does not expose any additional options.\r\n     * @method\r\n     * @param data An meteringCategory object used to update specified MeteringCategory resource.\r\n     * @example meteringCategoryRoute.update();\r\n     **/\r\n    MeteringCategoryRoute.prototype.update = function (data) {\r\n        return _super.prototype.baseUpdate.call(this, this.updateRoute, data);\r\n    };\r\n    /**\r\n     * Parses delete metering category route; this URI template does not expose any additional options.\r\n     * @method\r\n     * @param data An meteringCategory object used to delete specified MeteringCategory resource.\r\n     * @example meteringCategoryRoute.delete();\r\n     **/\r\n    MeteringCategoryRoute.prototype.delete = function (data) {\r\n        return _super.prototype.baseDelete.call(this, this.deleteRoute, data);\r\n    };\r\n    return MeteringCategoryRoute;\r\n}(common_1.BaseRoute));\r\nMeteringCategoryRoute = tslib_1.__decorate([\r\n    inversify_1.injectable(),\r\n    tslib_1.__param(0, inversify_1.inject(contracts_1.TYPES.IAppOptions)),\r\n    tslib_1.__param(1, inversify_1.inject(_1.TYPES.MeteringCategoryBatchRoute)),\r\n    tslib_1.__metadata(\"design:paramtypes\", [typeof (_a = typeof contracts_1.IAppOptions !== \"undefined\" && contracts_1.IAppOptions) === \"function\" && _a || Object, typeof (_b = typeof _1.MeteringCategoryBatchRoute !== \"undefined\" && _1.MeteringCategoryBatchRoute) === \"function\" && _b || Object])\r\n], MeteringCategoryRoute);\r\nexports.MeteringCategoryRoute = MeteringCategoryRoute;\r\nvar _a, _b;\r\n/**\r\n * @copyright (c) 2017 Mono Ltd\r\n * @license MIT\r\n * @author Mono Ltd\r\n * @overview\r\n ***Notes:**\r\n - Refer to the [REST API documentation](http://github.com/Baasic/baasic-rest-api/wiki) for detailed information about available Baasic REST API end-points.\r\n - [URI Template](https://github.com/Baasic/uritemplate-js) syntax enables expanding the Baasic route templates to Baasic REST URIs providing it with an object that contains URI parameters.\r\n - All end-point objects are transformed by the associated route service.\r\n */ \r\n\n\n\n//////////////////\n// WEBPACK FOOTER\n// ./src/modules/metering/meteringCategoryRoute.ts\n// module id = 284\n// module chunks = 0","/* globals module */\r\n/**\r\n * @module meteringClient\r\n * @description  Metering Client provides an easy way to consume  Metering REST API end-points. In order to obtain a needed routes `meteringClient` uses `meteringRoute`.\r\n */\r\n\"use strict\";\r\nObject.defineProperty(exports, \"__esModule\", { value: true });\r\nvar tslib_1 = require(\"tslib\");\r\nvar inversify_1 = require(\"inversify\");\r\n;\r\nvar httpApi_1 = require(\"../../httpApi\");\r\nvar _1 = require(\"./\");\r\nvar MeteringClient = (function () {\r\n    function MeteringClient(meteringRoute, apiClient, meteringBatchClient, meteringStatisticsClient, meteringACLClient, meteringCategoryClient, meteringSettingsClient) {\r\n        this.meteringRoute = meteringRoute;\r\n        this.apiClient = apiClient;\r\n        this.meteringBatchClient = meteringBatchClient;\r\n        this.meteringStatisticsClient = meteringStatisticsClient;\r\n        this.meteringACLClient = meteringACLClient;\r\n        this.meteringCategoryClient = meteringCategoryClient;\r\n        this.meteringSettingsClient = meteringSettingsClient;\r\n    }\r\n    Object.defineProperty(MeteringClient.prototype, \"routeDefinition\", {\r\n        get: function () {\r\n            return this.meteringRoute;\r\n        },\r\n        enumerable: true,\r\n        configurable: true\r\n    });\r\n    Object.defineProperty(MeteringClient.prototype, \"batch\", {\r\n        get: function () {\r\n            return this.meteringBatchClient;\r\n        },\r\n        enumerable: true,\r\n        configurable: true\r\n    });\r\n    Object.defineProperty(MeteringClient.prototype, \"statistics\", {\r\n        get: function () {\r\n            return this.meteringStatisticsClient;\r\n        },\r\n        enumerable: true,\r\n        configurable: true\r\n    });\r\n    Object.defineProperty(MeteringClient.prototype, \"acl\", {\r\n        get: function () {\r\n            return this.meteringACLClient;\r\n        },\r\n        enumerable: true,\r\n        configurable: true\r\n    });\r\n    Object.defineProperty(MeteringClient.prototype, \"settings\", {\r\n        get: function () {\r\n            return this.meteringSettingsClient;\r\n        },\r\n        enumerable: true,\r\n        configurable: true\r\n    });\r\n    Object.defineProperty(MeteringClient.prototype, \"category\", {\r\n        get: function () {\r\n            return this.meteringCategoryClient;\r\n        },\r\n        enumerable: true,\r\n        configurable: true\r\n    });\r\n    /**\r\n     * Returns a promise that is resolved once the find action has been performed. Success response returns a list of metering resources matching the given criteria.\r\n     * @method\r\n     * @param options Query resource options object.\r\n     * @returns A promise that is resolved once the find action has been performed.\r\n     * @example meteringClient.find({\r\n                    pageNumber : 1,\r\n                    pageSize : 10,\r\n                    orderBy : '<field>',\r\n                    orderDirection : '<asc|desc>',\r\n                    categories: 'Storage,Requests,Bandwidth'\r\n                })\r\n                .then(function (collection) {\r\n                    // perform success action here\r\n                },\r\n                 function (response, status, headers, config) {\r\n                     // perform error handling here\r\n                });\r\n     **/\r\n    MeteringClient.prototype.find = function (options) {\r\n        return this.apiClient.get(this.routeDefinition.find(options));\r\n    };\r\n    /**\r\n     * Returns a promise that is resolved once the get action has been performed. Success response returns the metering resource.\r\n     * @method\r\n     * @param id MeteringData id which uniquely identifies MeteringData resource that needs to be retrieved.\r\n     * @param options Query resource options object.\r\n     * @returns A promise that is resolved once the get action has been performed.\r\n     * @example meteringClient.get()\r\n                    .then(function (data) {\r\n                        // perform success action here\r\n                    },\r\n                     function (response, status, headers, config) {\r\n                         // perform error handling here\r\n                    });\r\n     **/\r\n    MeteringClient.prototype.get = function (id, options) {\r\n        return this.apiClient.get(this.meteringRoute.get(id, options));\r\n    };\r\n    /**\r\n     * Returns a promise that is resolved once the create metering action has been performed; this action creates a new metering resource.\r\n     * @method\r\n     * @param data An MeteringData object that needs to be inserted into the system.\r\n     * @returns A promise that is resolved once the create metering action has been performed\r\n     * @example meteringClient.create({\r\n                    category : '<category-name>',\r\n                    name : '<sub-category-name>',\r\n                    value: '<value>'\r\n                })\r\n                .then(function (data) {\r\n                    // perform success action here\r\n                },\r\n                 function (response, status, headers, config) {\r\n                     // perform error handling here\r\n                });\r\n      **/\r\n    MeteringClient.prototype.create = function (data) {\r\n        return this.apiClient.post(this.routeDefinition.create(), this.routeDefinition.createParams(data));\r\n    };\r\n    /**\r\n     * Returns a promise that is resolved once the update metering action has been performed; this action updates a metering resource. This route uses HAL enabled objects to obtain routes and therefore it doesn't apply `meteringRoute` route template. Here is an example of how a route can be obtained from HAL enabled objects:\r\n     * ```\r\n     * let params = modelMapper.updateParams(meteringData);\r\n     * let uri = params['model'].links('put').href;\r\n     * ```\r\n     * @method\r\n     * @param data An metering data object used to update specified MeteringData resource.\r\n     * @returns A promise that is resolved once the update metering action has been performed.\r\n     * @example // meteringData is a resource previously fetched using get action.\r\n                    meteringData.value = '<some-new-value>';\r\n                    meteringClient.update(meteringData)\r\n                        .then(function (data) {\r\n                            // perform success action here\r\n                        },\r\n                         function (response, status, headers, config) {\r\n                             // perform error handling here\r\n                        });\r\n     **/\r\n    MeteringClient.prototype.update = function (data) {\r\n        return this.apiClient.put(this.routeDefinition.update(data), this.routeDefinition.updateParams(data));\r\n    };\r\n    /**\r\n     * Returns a promise that is resolved once the remove action has been performed. This action will remove a metering resource from the system if successfully completed. This route uses HAL enabled objects to obtain routes and therefore it doesn't apply `meteringRoute` route template. Here is an example of how a route can be obtained from HAL enabled objects:\r\n     * ```\r\n     * let params = modelMapper.removeParams(meteringData);\r\n     * let uri = params['model'].links('delete').href;\r\n     * ```\r\n     * @method\r\n     * @param data An metering data object used to remove specified MeteringData resource.\r\n     * @returns A promise that is resolved once the remove action has been performed.\r\n     * @example // meteringData is a resource previously fetched using get action.\r\n                        meteringClient.remove(meteringData)\r\n                            .then(function (data) {\r\n                                // perform success action here\r\n                            },\r\n                             function (response, status, headers, config) {\r\n                                 // perform error handling here\r\n                            });\r\n     **/\r\n    MeteringClient.prototype.remove = function (data) {\r\n        return this.apiClient.delete(this.routeDefinition.delete(data));\r\n    };\r\n    /**\r\n     * Returns a promise that is resolved once the purge action has been performed. This action will remove all metering resources from the system if successfully completed.\r\n     * @method\r\n     * @returns A promise that is resolved once the purge action has been performed.\r\n     * @example meteringClient.purge()\r\n                    .then(function (data) {\r\n                        // perform success action here\r\n                    },\r\n                     function (response, status, headers, config) {\r\n                         // perform error handling here\r\n                    });\r\n     **/\r\n    MeteringClient.prototype.purge = function () {\r\n        return this.apiClient.delete(this.routeDefinition.purge());\r\n    };\r\n    return MeteringClient;\r\n}());\r\nMeteringClient = tslib_1.__decorate([\r\n    inversify_1.injectable(),\r\n    tslib_1.__param(0, inversify_1.inject(_1.TYPES.MeteringRoute)),\r\n    tslib_1.__param(1, inversify_1.inject(httpApi_1.httpTYPES.ApiClient)),\r\n    tslib_1.__param(2, inversify_1.inject(_1.TYPES.MeteringBatchClient)),\r\n    tslib_1.__param(3, inversify_1.inject(_1.TYPES.MeteringStatisticsClient)),\r\n    tslib_1.__param(4, inversify_1.inject(_1.TYPES.MeteringACLClient)),\r\n    tslib_1.__param(5, inversify_1.inject(_1.TYPES.MeteringCategoryClient)),\r\n    tslib_1.__param(6, inversify_1.inject(_1.TYPES.MeteringSettingsClient)),\r\n    tslib_1.__metadata(\"design:paramtypes\", [typeof (_a = typeof _1.MeteringRoute !== \"undefined\" && _1.MeteringRoute) === \"function\" && _a || Object, typeof (_b = typeof httpApi_1.ApiClient !== \"undefined\" && httpApi_1.ApiClient) === \"function\" && _b || Object, typeof (_c = typeof _1.MeteringBatchClient !== \"undefined\" && _1.MeteringBatchClient) === \"function\" && _c || Object, typeof (_d = typeof _1.MeteringStatisticsClient !== \"undefined\" && _1.MeteringStatisticsClient) === \"function\" && _d || Object, typeof (_e = typeof _1.MeteringACLClient !== \"undefined\" && _1.MeteringACLClient) === \"function\" && _e || Object, typeof (_f = typeof _1.MeteringCategoryClient !== \"undefined\" && _1.MeteringCategoryClient) === \"function\" && _f || Object, typeof (_g = typeof _1.MeteringSettingsClient !== \"undefined\" && _1.MeteringSettingsClient) === \"function\" && _g || Object])\r\n], MeteringClient);\r\nexports.MeteringClient = MeteringClient;\r\nvar _a, _b, _c, _d, _e, _f, _g;\r\n/**\r\n * @copyright (c) 2017 Mono Ltd\r\n * @license MIT\r\n * @author Mono Ltd\r\n * @overview\r\n ***Notes:**\r\n - Refer to the [Baasic REST API](http://dev.baasic.com/api/reference/home) for detailed information about available Baasic REST API end-points.\r\n - All end-point objects are transformed by the associated route service.\r\n */ \r\n\n\n\n//////////////////\n// WEBPACK FOOTER\n// ./src/modules/metering/meteringClient.ts\n// module id = 285\n// module chunks = 0","\"use strict\";\r\nObject.defineProperty(exports, \"__esModule\", { value: true });\r\nvar tslib_1 = require(\"tslib\");\r\n/* globals module */\r\n/**\r\n * @module meteringRoute\r\n * @description Baasic Metering Route Definition provides Baasic route templates which can be expanded to Baasic REST URIs. Various services can use Baasic Metering Route Definition to obtain a needed routes while other routes will be obtained through HAL. By convention, all route services  use the same function names as their corresponding services.\r\n */\r\nvar inversify_1 = require(\"inversify\");\r\nvar common_1 = require(\"../../common\");\r\n;\r\nvar _1 = require(\"./\");\r\nvar contracts_1 = require(\"../../core/contracts\");\r\nvar MeteringRoute = (function (_super) {\r\n    tslib_1.__extends(MeteringRoute, _super);\r\n    function MeteringRoute(appOptions, meteringBatchRoute, meteringStatisticsRoute, meteringACLRoute) {\r\n        var _this = _super.call(this, appOptions) || this;\r\n        _this.appOptions = appOptions;\r\n        _this.meteringBatchRoute = meteringBatchRoute;\r\n        _this.meteringStatisticsRoute = meteringStatisticsRoute;\r\n        _this.meteringACLRoute = meteringACLRoute;\r\n        _this.findRoute = 'metering/data/{?applicationId,searchQuery,categories,from,to,names,moduleNames,statuses,endpoints,sources,page,rpp,sort,embed,fields}';\r\n        _this.getRoute = 'metering/data/{id}/{?embed,fields}';\r\n        _this.createRoute = 'metering/data';\r\n        _this.updateRoute = 'metering/data/{id}';\r\n        _this.deleteRoute = '/metering/data/{id}';\r\n        _this.purgeRoute = 'metering/data/purge';\r\n        return _this;\r\n    }\r\n    Object.defineProperty(MeteringRoute.prototype, \"batch\", {\r\n        get: function () {\r\n            return this.meteringBatchRoute;\r\n        },\r\n        enumerable: true,\r\n        configurable: true\r\n    });\r\n    Object.defineProperty(MeteringRoute.prototype, \"statistics\", {\r\n        get: function () {\r\n            return this.meteringStatisticsRoute;\r\n        },\r\n        enumerable: true,\r\n        configurable: true\r\n    });\r\n    Object.defineProperty(MeteringRoute.prototype, \"acl\", {\r\n        get: function () {\r\n            return this.meteringACLRoute;\r\n        },\r\n        enumerable: true,\r\n        configurable: true\r\n    });\r\n    /**\r\n     * Parses find metering route which can be expanded with additional options. Supported items are:\r\n     * - `applicationId` - The application identifier.\r\n     * - `categories` - The metering categories  in CSV format.\r\n     * - `from` - The from date.\r\n     * - `to` - The to date.\r\n     * - `names` - The name of the resource inside the category in CSV format.\r\n     * - `moduleNames` - The name of the resource inside the category in CSV format.\r\n     * - `statuses` - The operation status in CSV format.\r\n     * - `endpoints` - The back-end endpoint in CSV format.\r\n     * - `sources` - The metering collector source in CSV format.\r\n     * - `searchQuery` - A string value used to identify metering resources using the phrase search.\r\n     * - `page` - A value used to set the page number, i.e. to retrieve certain metering subset from the storage.\r\n     * - `rpp` - A value used to limit the size of result set per page.\r\n     * - `sort` - A string used to set the metering property to sort the result collection by.\r\n     * - `embed` - Comma separated list of resources to be contained within the current representation.\r\n     * @method\r\n     * @param options Query resource options object.\r\n     * @example meteringRoute.find({searchQuery: '<search-phrase>'});\r\n     **/\r\n    MeteringRoute.prototype.find = function (options) {\r\n        return _super.prototype.baseFind.call(this, this.findRoute, options);\r\n    };\r\n    /**\r\n     * Parses get route; this route doesn't expose any properties.\r\n     * @method\r\n     * @param id MeteringData id which uniquely identifies MeteringData resource that needs to be retrieved.\r\n     * @param options Query resource options object.\r\n     * @example meteringRoute.get();\r\n     **/\r\n    MeteringRoute.prototype.get = function (id, options) {\r\n        return _super.prototype.baseGet.call(this, this.getRoute, id, options);\r\n    };\r\n    /**\r\n     * Parses create metering route; this URI template does not expose any additional options.\r\n     * @method\r\n     * @example meteringRoute.create();\r\n     **/\r\n    MeteringRoute.prototype.create = function () {\r\n        return _super.prototype.baseCreate.call(this, this.createRoute, {});\r\n    };\r\n    /**\r\n     * Parses update metering route; this URI template does not expose any additional options.\r\n     * @method\r\n     * @param data An metering data object used to update specified MeteringData resource.\r\n     * @example meteringRoute.update(data);\r\n     **/\r\n    MeteringRoute.prototype.update = function (data) {\r\n        return _super.prototype.baseUpdate.call(this, this.updateRoute, data);\r\n    };\r\n    /**\r\n     * Parses delete metering route; this URI template does not expose any additional options.\r\n     * @method\r\n     * @param data An metering data object used to delete specified MeteringData resource.\r\n     * @example meteringRoute.delete(data);\r\n     **/\r\n    MeteringRoute.prototype.delete = function (data) {\r\n        return _super.prototype.baseDelete.call(this, this.deleteRoute, data);\r\n    };\r\n    /**\r\n     * Parses purge metering data route: this URI template does not expose any additional options.\r\n     * @method\r\n     * @example meteringRoute.purge();\r\n     **/\r\n    MeteringRoute.prototype.purge = function () {\r\n        return _super.prototype.baseDelete.call(this, this.purgeRoute, {});\r\n    };\r\n    return MeteringRoute;\r\n}(common_1.BaseRoute));\r\nMeteringRoute = tslib_1.__decorate([\r\n    inversify_1.injectable(),\r\n    tslib_1.__param(0, inversify_1.inject(contracts_1.TYPES.IAppOptions)),\r\n    tslib_1.__param(1, inversify_1.inject(_1.TYPES.MeteringBatchRoute)),\r\n    tslib_1.__param(2, inversify_1.inject(_1.TYPES.MeteringStatisticsRoute)),\r\n    tslib_1.__param(3, inversify_1.inject(_1.TYPES.MeteringACLRoute)),\r\n    tslib_1.__metadata(\"design:paramtypes\", [typeof (_a = typeof contracts_1.IAppOptions !== \"undefined\" && contracts_1.IAppOptions) === \"function\" && _a || Object, typeof (_b = typeof _1.MeteringBatchRoute !== \"undefined\" && _1.MeteringBatchRoute) === \"function\" && _b || Object, typeof (_c = typeof _1.MeteringStatisticsRoute !== \"undefined\" && _1.MeteringStatisticsRoute) === \"function\" && _c || Object, typeof (_d = typeof _1.MeteringACLRoute !== \"undefined\" && _1.MeteringACLRoute) === \"function\" && _d || Object])\r\n], MeteringRoute);\r\nexports.MeteringRoute = MeteringRoute;\r\nvar _a, _b, _c, _d;\r\n/**\r\n * @copyright (c) 2017 Mono Ltd\r\n * @license MIT\r\n * @author Mono Ltd\r\n * @overview\r\n ***Notes:**\r\n - Refer to the [Baasic REST API](http://dev.baasic.com/api/reference/home) for detailed information about available Baasic REST API end-points.\r\n - [URI Template](https://github.com/Baasic/uritemplate-js) syntax enables expanding the Baasic route templates to Baasic REST URIs providing it with an object that contains URI parameters.\r\n - All end-point objects are transformed by the associated route service.\r\n */ \r\n\n\n\n//////////////////\n// WEBPACK FOOTER\n// ./src/modules/metering/meteringRoute.ts\n// module id = 286\n// module chunks = 0","/* globals module */\r\n/**\r\n * @module meteringSettingsClient\r\n * @description  Metering Settings Client provides an easy way to consume  Metering REST API end-points. In order to obtain a needed routes `meteringSettingsClient` uses `meteringSettingsRoute`.\r\n */\r\n\"use strict\";\r\nObject.defineProperty(exports, \"__esModule\", { value: true });\r\nvar tslib_1 = require(\"tslib\");\r\nvar inversify_1 = require(\"inversify\");\r\n;\r\nvar httpApi_1 = require(\"../../httpApi\");\r\nvar _1 = require(\"./\");\r\nvar MeteringSettingsClient = (function () {\r\n    function MeteringSettingsClient(meteringSettingsRoute, apiClient) {\r\n        this.meteringSettingsRoute = meteringSettingsRoute;\r\n        this.apiClient = apiClient;\r\n    }\r\n    Object.defineProperty(MeteringSettingsClient.prototype, \"routeDefinition\", {\r\n        get: function () {\r\n            return this.meteringSettingsRoute;\r\n        },\r\n        enumerable: true,\r\n        configurable: true\r\n    });\r\n    /**\r\n     * Returns a promise that is resolved once the get action has been performed. Success response returns the metering resource.\r\n     * @method\r\n     * @example meteringSettingsClient.get()\r\n                    .then(function (data) {\r\n                        // perform success action here\r\n                    },\r\n                      function (response, status, headers, config) {\r\n                          // perform error handling here\r\n                    });\r\n     **/\r\n    MeteringSettingsClient.prototype.get = function (options) {\r\n        return this.apiClient.get(this.routeDefinition.get(options));\r\n    };\r\n    /**\r\n     * Returns a promise that is resolved once the update metering action has been performed; this action updates a metering resource. This route uses HAL enabled objects to obtain routes and therefore it doesn't apply `meteringSettingsRoute` route template. Here is an example of how a route can be obtained from HAL enabled objects:\r\n     * ```\r\n     * let params = modelMapper.updateParams(meteringSettings);\r\n     * let uri = params['model'].links('put').href;\r\n     * ```\r\n     * @method\r\n     * @param data An meteringSetting object used to update specified MeteringSetting resource.\r\n     * @returns A promise that is resolved once the update metering action has been performed.\r\n     * @example // meteringSettings is a resource previously fetched using get action.\r\n                    meteringSettings.dataRetentionPeriod = 60;\r\n                    meteringSettingsClient.update(meteringSettings)\r\n                        .then(function (data) {\r\n                            // perform success action here\r\n                        },\r\n                         function (response, status, headers, config) {\r\n                             // perform error handling here\r\n                        });\r\n     **/\r\n    MeteringSettingsClient.prototype.update = function (data) {\r\n        return this.apiClient.put(this.routeDefinition.update(data), this.routeDefinition.updateParams(data));\r\n    };\r\n    return MeteringSettingsClient;\r\n}());\r\nMeteringSettingsClient = tslib_1.__decorate([\r\n    inversify_1.injectable(),\r\n    tslib_1.__param(0, inversify_1.inject(_1.TYPES.MeteringSettingsRoute)),\r\n    tslib_1.__param(1, inversify_1.inject(httpApi_1.httpTYPES.ApiClient)),\r\n    tslib_1.__metadata(\"design:paramtypes\", [typeof (_a = typeof _1.MeteringSettingsRoute !== \"undefined\" && _1.MeteringSettingsRoute) === \"function\" && _a || Object, typeof (_b = typeof httpApi_1.ApiClient !== \"undefined\" && httpApi_1.ApiClient) === \"function\" && _b || Object])\r\n], MeteringSettingsClient);\r\nexports.MeteringSettingsClient = MeteringSettingsClient;\r\nvar _a, _b;\r\n/**\r\n * @copyright (c) 2017 Mono Ltd\r\n * @license MIT\r\n * @author Mono Ltd\r\n * @overview\r\n ***Notes:**\r\n - Refer to the [Baasic REST API](http://dev.baasic.com/api/reference/home) for detailed information about available Baasic REST API end-points.\r\n - All end-point objects are transformed by the associated route service.\r\n */ \r\n\n\n\n//////////////////\n// WEBPACK FOOTER\n// ./src/modules/metering/meteringSettingsClient.ts\n// module id = 287\n// module chunks = 0","/* globals module */\r\n/**\r\n * @module meteringSettingsRoute\r\n * @description Baasic Metering Settings Route Definition provides Baasic route templates which can be expanded to Baasic REST URIs. Various services can use Baasic Metering Settings Route Definition to obtain a needed routes while other routes will be obtained through HAL. By convention, all route services  use the same function names as their corresponding services.\r\n */\r\n\"use strict\";\r\nObject.defineProperty(exports, \"__esModule\", { value: true });\r\nvar tslib_1 = require(\"tslib\");\r\nvar inversify_1 = require(\"inversify\");\r\nvar common_1 = require(\"../../common\");\r\n;\r\nvar contracts_1 = require(\"../../core/contracts\");\r\nvar MeteringSettingsRoute = (function (_super) {\r\n    tslib_1.__extends(MeteringSettingsRoute, _super);\r\n    function MeteringSettingsRoute(appOptions) {\r\n        var _this = _super.call(this, appOptions) || this;\r\n        _this.appOptions = appOptions;\r\n        _this.getRoute = 'metering/settings/{id}/{?embed,fields}';\r\n        _this.updateRoute = 'metering/settings/{id}';\r\n        return _this;\r\n    }\r\n    /**\r\n     * Parses get route; this route doesn't expose any properties.\r\n     * @method\r\n     * @example meteringSettingsRoute.get();\r\n     **/\r\n    MeteringSettingsRoute.prototype.get = function (options) {\r\n        return _super.prototype.baseGet.call(this, this.getRoute, undefined, options);\r\n    };\r\n    /**\r\n    * Parses updatea route; this route doesn't expose any properties.\r\n    * @method\r\n    * @param data An meteringSetting object used to update specified MeteringSetting resource.\r\n    * @example meteringSettingsRoute.update(data);\r\n    **/\r\n    MeteringSettingsRoute.prototype.update = function (data) {\r\n        return _super.prototype.baseUpdate.call(this, this.updateRoute, data);\r\n    };\r\n    return MeteringSettingsRoute;\r\n}(common_1.BaseRoute));\r\nMeteringSettingsRoute = tslib_1.__decorate([\r\n    inversify_1.injectable(),\r\n    tslib_1.__param(0, inversify_1.inject(contracts_1.TYPES.IAppOptions)),\r\n    tslib_1.__metadata(\"design:paramtypes\", [typeof (_a = typeof contracts_1.IAppOptions !== \"undefined\" && contracts_1.IAppOptions) === \"function\" && _a || Object])\r\n], MeteringSettingsRoute);\r\nexports.MeteringSettingsRoute = MeteringSettingsRoute;\r\nvar _a;\r\n/**\r\n * @copyright (c) 2017 Mono Ltd\r\n * @license MIT\r\n * @author Mono Ltd\r\n * @overview\r\n ***Notes:**\r\n - Refer to the [Baasic REST API](http://dev.baasic.com/api/reference/home) for detailed information about available Baasic REST API end-points.\r\n - [URI Template](https://github.com/Baasic/uritemplate-js) syntax enables expanding the Baasic route templates to Baasic REST URIs providing it with an object that contains URI parameters.\r\n - All end-point objects are transformed by the associated route service.\r\n */ \r\n\n\n\n//////////////////\n// WEBPACK FOOTER\n// ./src/modules/metering/meteringSettingsRoute.ts\n// module id = 288\n// module chunks = 0","/* globals module */\r\n/**\r\n * @module meteringStatisticsClient\r\n * @description  Metering Statistics Client provides an easy way to consume  Metering REST API end-points. In order to obtain a needed routes `meteringStatisticsClient` uses `meteringStatisticsRoute`.\r\n */\r\n\"use strict\";\r\nObject.defineProperty(exports, \"__esModule\", { value: true });\r\nvar tslib_1 = require(\"tslib\");\r\nvar inversify_1 = require(\"inversify\");\r\n;\r\nvar httpApi_1 = require(\"../../httpApi\");\r\nvar _1 = require(\"./\");\r\nvar MeteringStatisticsClient = (function () {\r\n    function MeteringStatisticsClient(meteringStatisticsRoute, apiClient) {\r\n        this.meteringStatisticsRoute = meteringStatisticsRoute;\r\n        this.apiClient = apiClient;\r\n    }\r\n    Object.defineProperty(MeteringStatisticsClient.prototype, \"routeDefinition\", {\r\n        /**\r\n          * Provides direct access to `meteringStatisticsRoute`.\r\n          * @method\r\n          * @example meteringStatisticsClient.routeDefinition.get(expandObject);\r\n          **/\r\n        get: function () {\r\n            return this.meteringStatisticsRoute;\r\n        },\r\n        enumerable: true,\r\n        configurable: true\r\n    });\r\n    /**\r\n     * Returns a promise that is resolved once the find action has been performed. Success response returns a list of metering resources matching the given criteria.\r\n     * @method\r\n     * @param options Query resource options object.\r\n     * @returns A promise that is resolved once the find action has been performed.\r\n     * @example meteringClient.find({\r\n                    pageNumber : 1,\r\n                    pageSize : 10,\r\n                    orderBy : '<field>',\r\n                    orderDirection : '<asc|desc>',\r\n                    category: 'Requests',\r\n                    rateBy : '<minute,hour,day,week,month,year>',\r\n                    from: '2 days ago',\r\n                    to: 'now'\r\n                })\r\n                .then(function (collection) {\r\n                    // perform success action here\r\n                },\r\n                 function (response, status, headers, config) {\r\n                     // perform error handling here\r\n                });\r\n     **/\r\n    MeteringStatisticsClient.prototype.find = function (options) {\r\n        return this.apiClient.get(this.routeDefinition.find(options));\r\n    };\r\n    return MeteringStatisticsClient;\r\n}());\r\nMeteringStatisticsClient = tslib_1.__decorate([\r\n    inversify_1.injectable(),\r\n    tslib_1.__param(0, inversify_1.inject(_1.TYPES.MeteringStatisticsRoute)),\r\n    tslib_1.__param(1, inversify_1.inject(httpApi_1.httpTYPES.ApiClient)),\r\n    tslib_1.__metadata(\"design:paramtypes\", [typeof (_a = typeof _1.MeteringStatisticsRoute !== \"undefined\" && _1.MeteringStatisticsRoute) === \"function\" && _a || Object, typeof (_b = typeof httpApi_1.ApiClient !== \"undefined\" && httpApi_1.ApiClient) === \"function\" && _b || Object])\r\n], MeteringStatisticsClient);\r\nexports.MeteringStatisticsClient = MeteringStatisticsClient;\r\nvar _a, _b;\r\n/**\r\n * @copyright (c) 2017 Mono Ltd\r\n * @license MIT\r\n * @author Mono Ltd\r\n * @overview\r\n ***Notes:**\r\n - Refer to the [Baasic REST API](http://dev.baasic.com/api/reference/home) for detailed information about available Baasic REST API end-points.\r\n - All end-point objects are transformed by the associated route service.\r\n */ \r\n\n\n\n//////////////////\n// WEBPACK FOOTER\n// ./src/modules/metering/meteringStatisticsClient.ts\n// module id = 289\n// module chunks = 0","/* globals module */\r\n/**\r\n * @module meteringStatisticsRoute\r\n * @description Baasic Metering Statistics Route Definition provides Baasic route templates which can be expanded to Baasic REST URIs. Various services can use Baasic Metering Statistics Route Definition Service to obtain a needed routes while other routes will be obtained through HAL. By convention, all route services  use the same function names as their corresponding services.\r\n */\r\n\"use strict\";\r\nObject.defineProperty(exports, \"__esModule\", { value: true });\r\nvar tslib_1 = require(\"tslib\");\r\nvar inversify_1 = require(\"inversify\");\r\nvar common_1 = require(\"../../common\");\r\n;\r\nvar contracts_1 = require(\"../../core/contracts\");\r\nvar MeteringStatisticsRoute = (function (_super) {\r\n    tslib_1.__extends(MeteringStatisticsRoute, _super);\r\n    function MeteringStatisticsRoute(appOptions) {\r\n        var _this = _super.call(this, appOptions) || this;\r\n        _this.appOptions = appOptions;\r\n        _this.findRoute = 'metering/statistics/{category}/{?applicationIds,rateBy,from,to,names,moduleNames,statuses,endpoints,sources,page,rpp,sort,embed,fields}';\r\n        return _this;\r\n    }\r\n    /**\r\n     * Parses find metering route which can be expanded with additional options. Supported items are:\r\n     * - `category` - The metering category.\r\n     * - `applicationId` - The application identifier.\r\n     * - `rateBy` - The sampling rate by minute,hour,day,week, month or year.\r\n     * - `from` - The from date.\r\n     * - `to` - The to date.\r\n     * - `names` - The name of the resource inside the category in CSV format.\r\n     * - `moduleNames` - The name of the resource inside the category in CSV format.\r\n     * - `statuses` - The operation status in CSV format.\r\n     * - `endpoints` - The back-end endpoint in CSV format.\r\n     * - `sources` - The metering collector source in CSV format.\r\n     * - `page` - A value used to set the page number, i.e. to retrieve certain metering subset from the storage.\r\n     * - `rpp` - A value used to limit the size of result set per page.\r\n     * - `sort` - A string used to set the metering property to sort the result collection by.\r\n     * - `embed` - Comma separated list of resources to be contained within the current representation.\r\n     * @method\r\n     * @param options Query resource options object.\r\n     * @example meteringStatisticsRoute.find({category: '<category-name-or-id>'});\r\n     **/\r\n    MeteringStatisticsRoute.prototype.find = function (options) {\r\n        return _super.prototype.baseFind.call(this, this.findRoute, options);\r\n    };\r\n    return MeteringStatisticsRoute;\r\n}(common_1.BaseRoute));\r\nMeteringStatisticsRoute = tslib_1.__decorate([\r\n    inversify_1.injectable(),\r\n    tslib_1.__param(0, inversify_1.inject(contracts_1.TYPES.IAppOptions)),\r\n    tslib_1.__metadata(\"design:paramtypes\", [typeof (_a = typeof contracts_1.IAppOptions !== \"undefined\" && contracts_1.IAppOptions) === \"function\" && _a || Object])\r\n], MeteringStatisticsRoute);\r\nexports.MeteringStatisticsRoute = MeteringStatisticsRoute;\r\nvar _a;\r\n/**\r\n * @copyright (c) 2017 Mono Ltd\r\n * @license MIT\r\n * @author Mono Ltd\r\n * @overview\r\n ***Notes:**\r\n - Refer to the [Baasic REST API](http://dev.baasic.com/api/reference/home) for detailed information about available Baasic REST API end-points.\r\n - [URI Template](https://github.com/Baasic/uritemplate-js) syntax enables expanding the Baasic route templates to Baasic REST URIs providing it with an object that contains URI parameters.\r\n - All end-point objects are transformed by the associated route service.\r\n */ \r\n\n\n\n//////////////////\n// WEBPACK FOOTER\n// ./src/modules/metering/meteringStatisticsRoute.ts\n// module id = 290\n// module chunks = 0","\"use strict\";\r\nObject.defineProperty(exports, \"__esModule\", { value: true });\r\nvar inversify_1 = require(\"inversify\");\r\nvar _1 = require(\"./\");\r\nvar TYPES = {\r\n    NotificationsClient: Symbol(\"NotificationsClient\"),\r\n    NotificationsPublishBatchClient: Symbol(\"NotificationsPublishBatchClient\"),\r\n    NotificationsPublishBatchRoute: Symbol(\"NotificationsPublishBatchRoute\"),\r\n    NotificationsPublishRoute: Symbol(\"NotificationsPublishRoute\"),\r\n    NotificationsPublishClient: Symbol(\"NotificationsPublishClient\"),\r\n    NotificationsRegistrationsAnonymousBatchClient: Symbol(\"NotificationsRegistrationsAnonymousBatchClient\"),\r\n    NotificationsRegistrationsAnonymousBatchRoute: Symbol(\"NotificationsRegistrationsAnonymousBatchRoute\"),\r\n    NotificationsRegistrationsAnonymousClient: Symbol(\"BasicNotificationsRegistrationsAnonymousClient\"),\r\n    NotificationsRegistrationsAnonymousRoute: Symbol(\"NotificationsRegistrationsAnonymousRoute\"),\r\n    NotificationsRegistrationsRoute: Symbol(\"NotificationsRegistrationsRoute\"),\r\n    NotificationsRegistrationsUsersBatchRoute: Symbol(\"NotificationsRegistrationsUsersBatchRoute\"),\r\n    NotificationsRegistrationsUsersBatchClient: Symbol(\"NotificationsRegistrationsUsersBatchClient\"),\r\n    NotificationsRegistrationsUsersClient: Symbol(\"NotificationsRegistrationsUsersClient\"),\r\n    NotificationsRegistrationsUsersRoute: Symbol(\"NotificationsRegistrationsUsersRoute\"),\r\n    NotificationsRoute: Symbol(\"NotificationsRoute\"),\r\n    NotificationsRegistrationsClient: Symbol(\"NotificationsRegistrationsClient\"),\r\n    NotificationsSubscriptionsClient: Symbol(\"NotificationsSubscriptionsClient\"),\r\n    NotificationsSubscriptionsRoute: Symbol(\"NotificationsSubscriptionsRoute\"),\r\n    NotificationsSubscriptionsAnonymousBatchClient: Symbol(\"NotificationsSubscriptionsAnonymousBatchClient\"),\r\n    NotificationsSubscriptionsAnonymousBatchRoute: Symbol(\"NotificationsSubscriptionsAnonymousBatchRoute\"),\r\n    NotificationsSubscriptionsAnonymousRoute: Symbol(\"NotificationsSubscriptionsAnonymousRoute\"),\r\n    NotificationsSubscriptionsAnonymousClient: Symbol(\"NotificationsSubscriptionsAnonymousClient\"),\r\n    NotificationsSubscriptionsUsersRoute: Symbol(\"BasicNotificationsSubscriptionsRoute\"),\r\n    NotificationsSubscriptionsUsersBatchClient: Symbol(\"NotificationsSubscriptionsUsersBatchClient\"),\r\n    NotificationsSubscriptionsUsersBatchRoute: Symbol(\"NotificationsSubscriptionsUsersBatchRoute\"),\r\n    NotificationsSubscriptionsUsersClient: Symbol(\"NotificationsSubscriptionsUsersClient\"),\r\n    NotificationsSettingsRoute: Symbol(\"NotificationsSettingsRoute\"),\r\n    NotificationsSettingsClient: Symbol(\"NotificationsSettingsClient\")\r\n};\r\nexports.TYPES = TYPES;\r\nvar diModule = new inversify_1.ContainerModule(function (bind) {\r\n    bind(TYPES.NotificationsPublishBatchRoute).to(_1.NotificationsPublishBatchRoute);\r\n    bind(TYPES.NotificationsPublishBatchClient).to(_1.NotificationsPublishBatchClient);\r\n    bind(TYPES.NotificationsPublishRoute).to(_1.NotificationsPublishRoute);\r\n    bind(TYPES.NotificationsPublishClient).to(_1.NotificationsPublishClient);\r\n    bind(TYPES.NotificationsSubscriptionsUsersBatchRoute).to(_1.NotificationsSubscriptionsUsersBatchRoute);\r\n    bind(TYPES.NotificationsSubscriptionsUsersBatchClient).to(_1.NotificationsSubscriptionsUsersBatchClient);\r\n    bind(TYPES.NotificationsSubscriptionsUsersRoute).to(_1.NotificationsSubscriptionsUsersRoute);\r\n    bind(TYPES.NotificationsSubscriptionsUsersClient).to(_1.NotificationsSubscriptionsUsersClient);\r\n    bind(TYPES.NotificationsSubscriptionsAnonymousRoute).to(_1.NotificationsSubscriptionsAnonymousRoute);\r\n    bind(TYPES.NotificationsSubscriptionsAnonymousBatchRoute).to(_1.NotificationsSubscriptionsAnonymousBatchRoute);\r\n    bind(TYPES.NotificationsSubscriptionsAnonymousBatchClient).to(_1.NotificationsSubscriptionsAnonymousBatchClient);\r\n    bind(TYPES.NotificationsSubscriptionsAnonymousClient).to(_1.NotificationsSubscriptionsAnonymousClient);\r\n    bind(TYPES.NotificationsSubscriptionsRoute).to(_1.NotificationsSubscriptionsRoute);\r\n    bind(TYPES.NotificationsSubscriptionsClient).to(_1.NotificationsSubscriptionsClient);\r\n    bind(TYPES.NotificationsRegistrationsUsersBatchRoute).to(_1.NotificationsRegistrationsUsersBatchRoute);\r\n    bind(TYPES.NotificationsRegistrationsUsersBatchClient).to(_1.NotificationsRegistrationsUsersBatchClient);\r\n    bind(TYPES.NotificationsRegistrationsUsersRoute).to(_1.NotificationsRegistrationsUsersRoute);\r\n    bind(TYPES.NotificationsRegistrationsUsersClient).to(_1.NotificationsRegistrationsUsersClient);\r\n    bind(TYPES.NotificationsRegistrationsAnonymousBatchRoute).to(_1.NotificationsRegistrationsAnonymousBatchRoute);\r\n    bind(TYPES.NotificationsRegistrationsAnonymousBatchClient).to(_1.NotificationsRegistrationsAnonymousBatchClient);\r\n    bind(TYPES.NotificationsRegistrationsAnonymousRoute).to(_1.NotificationsRegistrationsAnonymousRoute);\r\n    bind(TYPES.NotificationsRegistrationsAnonymousClient).to(_1.NotificationsRegistrationsAnonymousClient);\r\n    bind(TYPES.NotificationsRegistrationsRoute).to(_1.NotificationsRegistrationsRoute);\r\n    bind(TYPES.NotificationsRegistrationsClient).to(_1.NotificationsRegistrationsClient);\r\n    bind(TYPES.NotificationsSettingsRoute).to(_1.NotificationsSettingsRoute);\r\n    bind(TYPES.NotificationsSettingsClient).to(_1.NotificationsSettingsClient);\r\n    bind(TYPES.NotificationsRoute).to(_1.NotificationsRoute);\r\n    bind(TYPES.NotificationsClient).to(_1.NotificationsClient);\r\n});\r\nexports.diModule = diModule;\r\n\n\n\n//////////////////\n// WEBPACK FOOTER\n// ./src/modules/notifications/diModule.ts\n// module id = 291\n// module chunks = 0","/* globals module */\r\n/**\r\n * @module notificationsClient\r\n * @description  Notifications Client provides an easy way to consume  Notifications REST API end-points. In order to obtain needed routes `notificationsClient` uses `notificationsRoute`.\r\n */\r\n\"use strict\";\r\nObject.defineProperty(exports, \"__esModule\", { value: true });\r\nvar tslib_1 = require(\"tslib\");\r\nvar inversify_1 = require(\"inversify\");\r\nvar _1 = require(\"./\");\r\nvar NotificationsClient = (function () {\r\n    function NotificationsClient(notificationsPublishClient, basicNotificationsSubscriptionsClient, notificationsRegistrationsClient, notificationsSettingsClient, notificationsRoute) {\r\n        this.notificationsPublishClient = notificationsPublishClient;\r\n        this.basicNotificationsSubscriptionsClient = basicNotificationsSubscriptionsClient;\r\n        this.notificationsRegistrationsClient = notificationsRegistrationsClient;\r\n        this.notificationsSettingsClient = notificationsSettingsClient;\r\n        this.notificationsRoute = notificationsRoute;\r\n    }\r\n    Object.defineProperty(NotificationsClient.prototype, \"routeDefinition\", {\r\n        get: function () {\r\n            return this.notificationsRoute;\r\n        },\r\n        enumerable: true,\r\n        configurable: true\r\n    });\r\n    Object.defineProperty(NotificationsClient.prototype, \"publish\", {\r\n        get: function () {\r\n            return this.notificationsPublishClient;\r\n        },\r\n        enumerable: true,\r\n        configurable: true\r\n    });\r\n    Object.defineProperty(NotificationsClient.prototype, \"subscriptions\", {\r\n        get: function () {\r\n            return this.basicNotificationsSubscriptionsClient;\r\n        },\r\n        enumerable: true,\r\n        configurable: true\r\n    });\r\n    Object.defineProperty(NotificationsClient.prototype, \"registrations\", {\r\n        get: function () {\r\n            return this.notificationsRegistrationsClient;\r\n        },\r\n        enumerable: true,\r\n        configurable: true\r\n    });\r\n    Object.defineProperty(NotificationsClient.prototype, \"settings\", {\r\n        get: function () {\r\n            return this.notificationsSettingsClient;\r\n        },\r\n        enumerable: true,\r\n        configurable: true\r\n    });\r\n    return NotificationsClient;\r\n}());\r\nNotificationsClient = tslib_1.__decorate([\r\n    inversify_1.injectable(),\r\n    tslib_1.__param(0, inversify_1.inject(_1.TYPES.NotificationsPublishClient)),\r\n    tslib_1.__param(1, inversify_1.inject(_1.TYPES.NotificationsSubscriptionsClient)),\r\n    tslib_1.__param(2, inversify_1.inject(_1.TYPES.NotificationsRegistrationsClient)),\r\n    tslib_1.__param(3, inversify_1.inject(_1.TYPES.NotificationsSettingsClient)),\r\n    tslib_1.__param(4, inversify_1.inject(_1.TYPES.NotificationsRoute)),\r\n    tslib_1.__metadata(\"design:paramtypes\", [typeof (_a = typeof _1.NotificationsPublishClient !== \"undefined\" && _1.NotificationsPublishClient) === \"function\" && _a || Object, typeof (_b = typeof _1.NotificationsSubscriptionsClient !== \"undefined\" && _1.NotificationsSubscriptionsClient) === \"function\" && _b || Object, typeof (_c = typeof _1.NotificationsRegistrationsClient !== \"undefined\" && _1.NotificationsRegistrationsClient) === \"function\" && _c || Object, typeof (_d = typeof _1.NotificationsSettingsClient !== \"undefined\" && _1.NotificationsSettingsClient) === \"function\" && _d || Object, typeof (_e = typeof _1.NotificationsRoute !== \"undefined\" && _1.NotificationsRoute) === \"function\" && _e || Object])\r\n], NotificationsClient);\r\nexports.NotificationsClient = NotificationsClient;\r\nvar _a, _b, _c, _d, _e;\r\n/**\r\n * @overview\r\n ***Notes:**\r\n - Refer to the [REST API documentation](https://github.com/Baasic/baasic-rest-api/wiki) for detailed information about available Baasic REST API end-points.\r\n - All end-point objects are transformed by the associated route service.\r\n */ \r\n\n\n\n//////////////////\n// WEBPACK FOOTER\n// ./src/modules/notifications/notificationsClient.ts\n// module id = 292\n// module chunks = 0","/* globals module */\r\n/**\r\n * @module notificationsPublishBatchClient\r\n * @description  Notifications Publish Batch Client provides an easy way to consume  Notifications REST API end-points. In order to obtain needed routes `notificationsPublishBatchClient` uses `notificationsPublishBatchRoute`.\r\n */\r\n\"use strict\";\r\nObject.defineProperty(exports, \"__esModule\", { value: true });\r\nvar tslib_1 = require(\"tslib\");\r\nvar inversify_1 = require(\"inversify\");\r\nvar httpApi_1 = require(\"../../httpApi\");\r\nvar _1 = require(\"./\");\r\nvar NotificationsPublishBatchClient = (function () {\r\n    function NotificationsPublishBatchClient(notificationsPublishBatchRoute, apiClient) {\r\n        this.notificationsPublishBatchRoute = notificationsPublishBatchRoute;\r\n        this.apiClient = apiClient;\r\n    }\r\n    Object.defineProperty(NotificationsPublishBatchClient.prototype, \"routeDefinition\", {\r\n        get: function () {\r\n            return this.notificationsPublishBatchRoute;\r\n        },\r\n        enumerable: true,\r\n        configurable: true\r\n    });\r\n    /**\r\n     * Returns a promise that is resolved once the create notification action has been performed; this action creates new notification resources.\r\n     * @method\r\n     * @param data The notification collection.\r\n     * @returns A promise that is resolved once the create notification action has been performed.\r\n     * @example notificationsPublishBatchClient.create([{\r\n                    channels: ['<channel-name', '<channel-name>'],\r\n                    moduleName: '<module-name>',\r\n                    templateName: '<template-name>',\r\n                    templateContext: {\r\n                        prop1: '<prop1-value>',\r\n                        prop2: '<prop2-value>'\r\n                    }\r\n                }])\r\n                .then(function (data) {\r\n                    // perform success action here\r\n                },\r\n                 function (response, status, headers, config) {\r\n                     // perform error handling here\r\n                });\r\n     */\r\n    NotificationsPublishBatchClient.prototype.create = function (data) {\r\n        return this.apiClient.post(this.routeDefinition.create(), this.routeDefinition.createParams(data));\r\n    };\r\n    return NotificationsPublishBatchClient;\r\n}());\r\nNotificationsPublishBatchClient = tslib_1.__decorate([\r\n    inversify_1.injectable(),\r\n    tslib_1.__param(0, inversify_1.inject(_1.TYPES.NotificationsPublishBatchRoute)),\r\n    tslib_1.__param(1, inversify_1.inject(httpApi_1.httpTYPES.ApiClient)),\r\n    tslib_1.__metadata(\"design:paramtypes\", [typeof (_a = typeof _1.NotificationsPublishBatchRoute !== \"undefined\" && _1.NotificationsPublishBatchRoute) === \"function\" && _a || Object, typeof (_b = typeof httpApi_1.ApiClient !== \"undefined\" && httpApi_1.ApiClient) === \"function\" && _b || Object])\r\n], NotificationsPublishBatchClient);\r\nexports.NotificationsPublishBatchClient = NotificationsPublishBatchClient;\r\nvar _a, _b;\r\n/**\r\n * @overview\r\n ***Notes:**\r\n - Refer to the [REST API documentation](https://github.com/Baasic/baasic-rest-api/wiki) for detailed information about available Baasic REST API end-points.\r\n - All end-point objects are transformed by the associated route service.\r\n */ \r\n\n\n\n//////////////////\n// WEBPACK FOOTER\n// ./src/modules/notifications/notificationsPublishBatchClient.ts\n// module id = 293\n// module chunks = 0","/* globals module */\r\n/**\r\n * @module notificationsPublishBatchRoute\r\n * @description Baasic Notifications Publish Batch Route Definition provides Baasic route templates which can be expanded to Baasic REST URIs. Various services can use Baasic Notifications Publish Batch Route Definition to obtain needed routes while other routes will be obtained through HAL. By convention, all route services use the same function names as their corresponding services.\r\n */\r\n\"use strict\";\r\nObject.defineProperty(exports, \"__esModule\", { value: true });\r\nvar tslib_1 = require(\"tslib\");\r\nvar inversify_1 = require(\"inversify\");\r\nvar common_1 = require(\"../../common\");\r\nvar contracts_1 = require(\"../../core/contracts\");\r\nvar NotificationsPublishBatchRoute = (function (_super) {\r\n    tslib_1.__extends(NotificationsPublishBatchRoute, _super);\r\n    function NotificationsPublishBatchRoute(appOptions) {\r\n        var _this = _super.call(this, appOptions) || this;\r\n        _this.appOptions = appOptions;\r\n        _this.createRoute = 'notifications/publish/batch';\r\n        return _this;\r\n    }\r\n    /**\r\n     * Parses create publish batch route; this route does not expose any additional options.\r\n     * @method\r\n     * @example notificationsPublishBatchRoute.create();\r\n     */\r\n    NotificationsPublishBatchRoute.prototype.create = function () {\r\n        return _super.prototype.baseCreate.call(this, this.createRoute, {});\r\n    };\r\n    return NotificationsPublishBatchRoute;\r\n}(common_1.BaseRoute));\r\nNotificationsPublishBatchRoute = tslib_1.__decorate([\r\n    inversify_1.injectable(),\r\n    tslib_1.__param(0, inversify_1.inject(contracts_1.TYPES.IAppOptions)),\r\n    tslib_1.__metadata(\"design:paramtypes\", [typeof (_a = typeof contracts_1.IAppOptions !== \"undefined\" && contracts_1.IAppOptions) === \"function\" && _a || Object])\r\n], NotificationsPublishBatchRoute);\r\nexports.NotificationsPublishBatchRoute = NotificationsPublishBatchRoute;\r\nvar _a;\r\n/**\r\n * @overview\r\n ***Notes:**\r\n - Refer to the [REST API documentation](https://github.com/Baasic/baasic-rest-api/wiki) for detailed information about available Baasic REST API end-points.\r\n - [URI Template](https://github.com/Baasic/uritemplate-js) syntax enables expanding the Baasic route templates to Baasic REST URIs providing it with an object that contains URI parameters.\r\n - All end-point objects are transformed by the associated route service.\r\n */ \r\n\n\n\n//////////////////\n// WEBPACK FOOTER\n// ./src/modules/notifications/notificationsPublishBatchRoute.ts\n// module id = 294\n// module chunks = 0","/* globals module */\r\n/**\r\n * @module notificationsPublishClient\r\n * @description  Notifications Publish Client provides an easy way to consume  Notifications REST API end-points. In order to obtain needed routes `notificationsPublishClient` uses `notificationsPublishRoute`.\r\n */\r\n\"use strict\";\r\nObject.defineProperty(exports, \"__esModule\", { value: true });\r\nvar tslib_1 = require(\"tslib\");\r\nvar inversify_1 = require(\"inversify\");\r\nvar httpApi_1 = require(\"../../httpApi\");\r\nvar _1 = require(\"./\");\r\nvar NotificationsPublishClient = (function () {\r\n    function NotificationsPublishClient(notificationsPublishRoute, notificationsPublishBatchClient, apiClient) {\r\n        this.notificationsPublishRoute = notificationsPublishRoute;\r\n        this.notificationsPublishBatchClient = notificationsPublishBatchClient;\r\n        this.apiClient = apiClient;\r\n    }\r\n    Object.defineProperty(NotificationsPublishClient.prototype, \"routeDefinition\", {\r\n        get: function () {\r\n            return this.notificationsPublishRoute;\r\n        },\r\n        enumerable: true,\r\n        configurable: true\r\n    });\r\n    Object.defineProperty(NotificationsPublishClient.prototype, \"batch\", {\r\n        get: function () {\r\n            return this.notificationsPublishBatchClient;\r\n        },\r\n        enumerable: true,\r\n        configurable: true\r\n    });\r\n    /**\r\n     * Returns a promise that is resolved once the create notification action has been performed; this action creates a new notification resource.\r\n     * @method\r\n     * @param data The notification.\r\n     * @returns A promise that is resolved once the create notification action has been performed.\r\n     * @example notificationsPublishClient.create({\r\n                    channels: ['<channel-name', '<channel-name>'],\r\n                    moduleName: '<module-name>',\r\n                    templateName: '<template-name>',\r\n                    templateContext: {\r\n                        prop1: '<prop1-value>',\r\n                        prop2: '<prop2-value>'\r\n                    }\r\n                })\r\n                .then(function (data) {\r\n                    // perform success action here\r\n                },\r\n                 function (response, status, headers, config) {\r\n                     // perform error handling here\r\n                });\r\n     */\r\n    NotificationsPublishClient.prototype.create = function (data) {\r\n        return this.apiClient.post(this.routeDefinition.create(), this.routeDefinition.createParams(data));\r\n    };\r\n    return NotificationsPublishClient;\r\n}());\r\nNotificationsPublishClient = tslib_1.__decorate([\r\n    inversify_1.injectable(),\r\n    tslib_1.__param(0, inversify_1.inject(_1.TYPES.NotificationsPublishRoute)),\r\n    tslib_1.__param(1, inversify_1.inject(_1.TYPES.NotificationsPublishBatchClient)),\r\n    tslib_1.__param(2, inversify_1.inject(httpApi_1.httpTYPES.ApiClient)),\r\n    tslib_1.__metadata(\"design:paramtypes\", [typeof (_a = typeof _1.NotificationsPublishRoute !== \"undefined\" && _1.NotificationsPublishRoute) === \"function\" && _a || Object, typeof (_b = typeof _1.NotificationsPublishBatchClient !== \"undefined\" && _1.NotificationsPublishBatchClient) === \"function\" && _b || Object, typeof (_c = typeof httpApi_1.ApiClient !== \"undefined\" && httpApi_1.ApiClient) === \"function\" && _c || Object])\r\n], NotificationsPublishClient);\r\nexports.NotificationsPublishClient = NotificationsPublishClient;\r\nvar _a, _b, _c;\r\n/**\r\n * @overview\r\n ***Notes:**\r\n - Refer to the [REST API documentation](https://github.com/Baasic/baasic-rest-api/wiki) for detailed information about available Baasic REST API end-points.\r\n - All end-point objects are transformed by the associated route service.\r\n */ \r\n\n\n\n//////////////////\n// WEBPACK FOOTER\n// ./src/modules/notifications/notificationsPublishClient.ts\n// module id = 295\n// module chunks = 0","/* globals module */\r\n/**\r\n * @module notificationsPublishRoute\r\n * @description Baasic Notifications Publish Route Definition provides Baasic route templates which can be expanded to Baasic REST URIs. Various services can use Baasic Notifications Route Definition to obtain needed routes while other routes will be obtained through HAL. By convention, all route services use the same function names as their corresponding services.\r\n */\r\n\"use strict\";\r\nObject.defineProperty(exports, \"__esModule\", { value: true });\r\nvar tslib_1 = require(\"tslib\");\r\nvar inversify_1 = require(\"inversify\");\r\nvar common_1 = require(\"../../common\");\r\nvar contracts_1 = require(\"../../core/contracts\");\r\nvar _1 = require(\"./\");\r\nvar NotificationsPublishRoute = (function (_super) {\r\n    tslib_1.__extends(NotificationsPublishRoute, _super);\r\n    function NotificationsPublishRoute(appOptions, notificationsPublishBatchRoute) {\r\n        var _this = _super.call(this, appOptions) || this;\r\n        _this.appOptions = appOptions;\r\n        _this.notificationsPublishBatchRoute = notificationsPublishBatchRoute;\r\n        _this.createRoute = 'notifications/publish';\r\n        return _this;\r\n    }\r\n    NotificationsPublishRoute.prototype.batch = function () {\r\n        return this.notificationsPublishBatchRoute;\r\n    };\r\n    /**\r\n     * Parses create publish route; this route does not expose any additional options.\r\n     * @method\r\n     * @example notificationsPublishRoute.create();\r\n     */\r\n    NotificationsPublishRoute.prototype.create = function () {\r\n        return _super.prototype.baseCreate.call(this, this.createRoute, {});\r\n    };\r\n    return NotificationsPublishRoute;\r\n}(common_1.BaseRoute));\r\nNotificationsPublishRoute = tslib_1.__decorate([\r\n    inversify_1.injectable(),\r\n    tslib_1.__param(0, inversify_1.inject(contracts_1.TYPES.IAppOptions)),\r\n    tslib_1.__param(1, inversify_1.inject(_1.TYPES.NotificationsPublishBatchRoute)),\r\n    tslib_1.__metadata(\"design:paramtypes\", [typeof (_a = typeof contracts_1.IAppOptions !== \"undefined\" && contracts_1.IAppOptions) === \"function\" && _a || Object, typeof (_b = typeof _1.NotificationsPublishBatchRoute !== \"undefined\" && _1.NotificationsPublishBatchRoute) === \"function\" && _b || Object])\r\n], NotificationsPublishRoute);\r\nexports.NotificationsPublishRoute = NotificationsPublishRoute;\r\nvar _a, _b;\r\n/**\r\n * @overview\r\n ***Notes:**\r\n - Refer to the [REST API documentation](https://github.com/Baasic/baasic-rest-api/wiki) for detailed information about available Baasic REST API end-points.\r\n - [URI Template](https://github.com/Baasic/uritemplate-js) syntax enables expanding the Baasic route templates to Baasic REST URIs providing it with an object that contains URI parameters.\r\n - All end-point objects are transformed by the associated route service.\r\n */ \r\n\n\n\n//////////////////\n// WEBPACK FOOTER\n// ./src/modules/notifications/notificationsPublishRoute.ts\n// module id = 296\n// module chunks = 0","/* globals module */\r\n/**\r\n * @module notificationsRegistrationsAnonymousBatchClient\r\n * @description  Notifications Registrations Anonymous Batch Client provides an easy way to consume  Notifications REST API end-points. In order to obtain needed routes `notificationsRegistrationsAnonymousBatchClient` uses `notificationsRegistrationsAnonymousBatchRoute`.\r\n */\r\n\"use strict\";\r\nObject.defineProperty(exports, \"__esModule\", { value: true });\r\nvar tslib_1 = require(\"tslib\");\r\nvar inversify_1 = require(\"inversify\");\r\nvar httpApi_1 = require(\"../../httpApi\");\r\n;\r\nvar _1 = require(\"./\");\r\nvar NotificationsRegistrationsAnonymousBatchClient = (function () {\r\n    function NotificationsRegistrationsAnonymousBatchClient(notificationsRegistrationsAnonymousBatchRoute, apiClient) {\r\n        this.notificationsRegistrationsAnonymousBatchRoute = notificationsRegistrationsAnonymousBatchRoute;\r\n        this.apiClient = apiClient;\r\n    }\r\n    Object.defineProperty(NotificationsRegistrationsAnonymousBatchClient.prototype, \"routeDefinition\", {\r\n        get: function () {\r\n            return this.notificationsRegistrationsAnonymousBatchRoute;\r\n        },\r\n        enumerable: true,\r\n        configurable: true\r\n    });\r\n    /**\r\n     * Returns a promise that is resolved once the create anonymous registration action has been performed; this action creates new anonymous registration resources.\r\n     * @method\r\n     * @param data AnonymousRegistration objects that need to be inserted into the system.\r\n     * @returns A promise that is resolved once the create anonymous registration action has been performed.\r\n     * @example notificationsRegistrationsAnonymousBatchClient.create([{\r\n                    provider: '<provider-name>',\r\n                    providerData: <provider-data>,\r\n                    expirationDate: <expiration-date>\r\n                }])\r\n                .then(function (data) {\r\n                    // perform success action here\r\n                },\r\n                 function (response, status, headers, config) {\r\n                     // perform error handling here\r\n                });\r\n     */\r\n    NotificationsRegistrationsAnonymousBatchClient.prototype.create = function (data) {\r\n        return this.apiClient.post(this.routeDefinition.create(), this.routeDefinition.createParams(data));\r\n    };\r\n    /**\r\n     * Returns a promise that is resolved once the remove action has been performed. This action will remove anonymous registration resources from the system if successfully completed.\r\n     * @method\r\n     * @param ids The registration ids which uniquely identify AnonymousRegistration resources that need to be deleted.\r\n     * @returns A promise that is resolved once the remove action has been performed.\r\n     * @example notificationsRegistrationsAnonymousBatchClient.remove(subscriptionIds)\r\n                   .then(function (data) {\r\n                       // perform success action here\r\n                   },\r\n                    function (response, status, headers, config) {\r\n                        // perform error handling here\r\n                   });\r\n    */\r\n    NotificationsRegistrationsAnonymousBatchClient.prototype.remove = function (ids) {\r\n        return this.apiClient.delete(this.notificationsRegistrationsAnonymousBatchRoute.delete(), undefined, ids);\r\n    };\r\n    /**\r\n     * Returns a promise that is resolved once the update anonymous registration action has been performed; this action updates specified anonymous registration  resources.\r\n     * @method\r\n     * @param data AnonymousRegistration objects used to update specified AnonymousRegistration resources.\r\n     * @returns A promise that is resolved once the update anonymous registration action has been performed.\r\n     * @example notificationsRegistrationsAnonymousBatchClient.update(registrations)\r\n                    .then(function (data) {\r\n                        // perform success action here\r\n                    },\r\n                     function (response, status, headers, config) {\r\n                         // perform error handling here\r\n                    });\r\n     */\r\n    NotificationsRegistrationsAnonymousBatchClient.prototype.update = function (data) {\r\n        return this.apiClient.put(this.routeDefinition.update(), this.routeDefinition.updateParams(data));\r\n    };\r\n    return NotificationsRegistrationsAnonymousBatchClient;\r\n}());\r\nNotificationsRegistrationsAnonymousBatchClient = tslib_1.__decorate([\r\n    inversify_1.injectable(),\r\n    tslib_1.__param(0, inversify_1.inject(_1.TYPES.NotificationsRegistrationsAnonymousBatchRoute)),\r\n    tslib_1.__param(1, inversify_1.inject(httpApi_1.httpTYPES.ApiClient)),\r\n    tslib_1.__metadata(\"design:paramtypes\", [typeof (_a = typeof _1.NotificationsRegistrationsAnonymousBatchRoute !== \"undefined\" && _1.NotificationsRegistrationsAnonymousBatchRoute) === \"function\" && _a || Object, typeof (_b = typeof httpApi_1.ApiClient !== \"undefined\" && httpApi_1.ApiClient) === \"function\" && _b || Object])\r\n], NotificationsRegistrationsAnonymousBatchClient);\r\nexports.NotificationsRegistrationsAnonymousBatchClient = NotificationsRegistrationsAnonymousBatchClient;\r\nvar _a, _b;\r\n/**\r\n * @overview\r\n ***Notes:**\r\n - Refer to the [REST API documentation](https://github.com/Baasic/baasic-rest-api/wiki) for detailed information about available Baasic REST API end-points.\r\n - All end-point objects are transformed by the associated route service.\r\n */ \r\n\n\n\n//////////////////\n// WEBPACK FOOTER\n// ./src/modules/notifications/notificationsRegistrationsAnonymousBatchClient.ts\n// module id = 297\n// module chunks = 0","/* globals module */\r\n/**\r\n * @module notificationsRegistrationsAnonymousBatchRoute\r\n * @description Baasic Notifications Registrations Anonymous Batch Route Definition provides Baasic route templates which can be expanded to Baasic REST URIs. Various services can use Baasic Notifications Registrations Anonymous Batch Route Definition to obtain needed routes while other routes will be obtained through HAL. By convention, all route services use the same function names as their corresponding services.\r\n */\r\n\"use strict\";\r\nObject.defineProperty(exports, \"__esModule\", { value: true });\r\nvar tslib_1 = require(\"tslib\");\r\nvar inversify_1 = require(\"inversify\");\r\nvar common_1 = require(\"../../common\");\r\n;\r\nvar contracts_1 = require(\"../../core/contracts\");\r\nvar NotificationsRegistrationsAnonymousBatchRoute = (function (_super) {\r\n    tslib_1.__extends(NotificationsRegistrationsAnonymousBatchRoute, _super);\r\n    function NotificationsRegistrationsAnonymousBatchRoute(appOptions) {\r\n        var _this = _super.call(this, appOptions) || this;\r\n        _this.appOptions = appOptions;\r\n        _this.createRoute = 'notifications/registrations/anonymous/batch';\r\n        _this.deleteRoute = 'notifications/registrations/anonymous/batch';\r\n        return _this;\r\n    }\r\n    /**\r\n     * Parses create anonymous registrations batch route; this route does not expose any additional options\r\n     * @method\r\n     * @example notificationsRegistrationsAnonymousBatchRoute.create();\r\n     */\r\n    NotificationsRegistrationsAnonymousBatchRoute.prototype.create = function () {\r\n        return this.baseCreate(this.createRoute, {});\r\n    };\r\n    /**\r\n     * Parses delete anonymous registrations batch route; this route does not expose any additional options\r\n     * @method\r\n     * @example notificationsRegistrationsAnonymousBatchRoute.delete();\r\n     */\r\n    NotificationsRegistrationsAnonymousBatchRoute.prototype.delete = function () {\r\n        return this.baseDelete(this.deleteRoute, {});\r\n    };\r\n    /**\r\n     * Parses update anonymous registrations batch route; this route does not expose any additional options\r\n     * @method\r\n     * @example notificationsRegistrationsAnonymousBatchRoute.update();\r\n     */\r\n    NotificationsRegistrationsAnonymousBatchRoute.prototype.update = function () {\r\n        return this.baseUpdate('notifications/registrations/anonymous/batch', {});\r\n    };\r\n    return NotificationsRegistrationsAnonymousBatchRoute;\r\n}(common_1.BaseRoute));\r\nNotificationsRegistrationsAnonymousBatchRoute = tslib_1.__decorate([\r\n    tslib_1.__param(0, inversify_1.inject(contracts_1.TYPES.IAppOptions)),\r\n    tslib_1.__metadata(\"design:paramtypes\", [typeof (_a = typeof contracts_1.IAppOptions !== \"undefined\" && contracts_1.IAppOptions) === \"function\" && _a || Object])\r\n], NotificationsRegistrationsAnonymousBatchRoute);\r\nexports.NotificationsRegistrationsAnonymousBatchRoute = NotificationsRegistrationsAnonymousBatchRoute;\r\nvar _a;\r\n/**\r\n * @overview\r\n ***Notes:**\r\n - Refer to the [REST API documentation](https://github.com/Baasic/baasic-rest-api/wiki) for detailed information about available Baasic REST API end-points.\r\n - [URI Template](https://github.com/Baasic/uritemplate-js) syntax enables expanding the Baasic route templates to Baasic REST URIs providing it with an object that contains URI parameters.\r\n - All end-point objects are transformed by the associated route service.\r\n */ \r\n\n\n\n//////////////////\n// WEBPACK FOOTER\n// ./src/modules/notifications/notificationsRegistrationsAnonymousBatchRoute.ts\n// module id = 298\n// module chunks = 0","/* globals module */\r\n/**\r\n * @module notificationsRegistrationsAnonymousClient\r\n * @description  Notifications Registrations Anonymous Client provides an easy way to consume  Notifications REST API end-points. In order to obtain needed routes `notificationsRegistrationsAnonymousClient` uses `notificationsRegistrationsAnonymousRoute`.\r\n */\r\n\"use strict\";\r\nObject.defineProperty(exports, \"__esModule\", { value: true });\r\nvar tslib_1 = require(\"tslib\");\r\nvar inversify_1 = require(\"inversify\");\r\nvar httpApi_1 = require(\"../../httpApi\");\r\n;\r\nvar _1 = require(\"./\");\r\nvar NotificationsRegistrationsAnonymousClient = (function () {\r\n    function NotificationsRegistrationsAnonymousClient(notificationsRegistrationsAnonymousRoute, notificationsRegistrationsAnonymousBatchClient, apiClient) {\r\n        this.notificationsRegistrationsAnonymousRoute = notificationsRegistrationsAnonymousRoute;\r\n        this.notificationsRegistrationsAnonymousBatchClient = notificationsRegistrationsAnonymousBatchClient;\r\n        this.apiClient = apiClient;\r\n    }\r\n    Object.defineProperty(NotificationsRegistrationsAnonymousClient.prototype, \"routeDefinition\", {\r\n        get: function () {\r\n            return this.notificationsRegistrationsAnonymousRoute;\r\n        },\r\n        enumerable: true,\r\n        configurable: true\r\n    });\r\n    Object.defineProperty(NotificationsRegistrationsAnonymousClient.prototype, \"batch\", {\r\n        get: function () {\r\n            return this.notificationsRegistrationsAnonymousBatchClient;\r\n        },\r\n        enumerable: true,\r\n        configurable: true\r\n    });\r\n    /**\r\n     * Returns a promise that is resolved once the create anonymous registration action has been performed; this action creates a new anonymous registration resource.\r\n     * @method\r\n     * @param data An AnonymousRegistration object that needs to be inserted into the system.\r\n     * @returns A promise that is resolved once the create anonymous registration action has been performed.\r\n     * @example notificationsRegistrationsAnonymousClient.create({\r\n                    provider: '<provider-name>',\r\n                    providerdata: <provider-data>,\r\n                    expirationData: '<expiration-date>'\r\n                })\r\n                .then(function (data) {\r\n                    // perform success action here\r\n                },\r\n                 function (response, status, headers, config) {\r\n                     // perform error handling here\r\n                });\r\n     */\r\n    NotificationsRegistrationsAnonymousClient.prototype.create = function (data) {\r\n        return this.apiClient.post(this.routeDefinition.create(), this.routeDefinition.createParams(data));\r\n    };\r\n    /**\r\n     * Returns a promise that is resolved once the find action has been performed. Success response returns a list of anonymous registration resources matching the given criteria.\r\n     * @method\r\n     * @param options Query resource options object.\r\n     * @returns A promise that is resolved once the find action has been performed.\r\n     * @example notificationsRegistrationsAnonymousClient.find({\r\n                   pageNumber : 1,\r\n                   pageSize : 10,\r\n                   orderBy : '<field>',\r\n                   orderDirection : '<asc|desc>',\r\n                   search : '<search-phrase>',\r\n                   providers: '<provider-name1>,<provider-name2>',\r\n                   embed: '<embed>'\r\n               })\r\n               .then(function (collection) {\r\n                   // perform success action here\r\n               },\r\n                function (response, status, headers, config) {\r\n                    // perform error handling here\r\n               });\r\n    */\r\n    NotificationsRegistrationsAnonymousClient.prototype.find = function (options) {\r\n        return this.apiClient.get(this.routeDefinition.find(options));\r\n    };\r\n    /**\r\n     * Returns a promise that is resolved once the get action has been performed. Success response returns the specified anonymous registration resource.\r\n     * @method\r\n     * @param id The registration identifier which uniquely identifies AnonymousRegistration resource that needs to be retrieved.\r\n     * @param options Query resource options object.\r\n     * @returns A promise that is resolved once the get action has been performed.\r\n     * @example notificationsRegistrationsAnonymousClient.get('<registration-id>')\r\n                    .then(function (data) {\r\n                        // perform success action here\r\n                    },\r\n                     function (response, status, headers, config) {\r\n                         // perform error handling here\r\n                    });\r\n     */\r\n    NotificationsRegistrationsAnonymousClient.prototype.get = function (id, options) {\r\n        return this.apiClient.get(this.notificationsRegistrationsAnonymousRoute.get(id, options));\r\n    };\r\n    /**\r\n     * Returns a promise that is resolved once the remove anonymous registration action has been performed. This action will remove a anonymous registration resource from the system if successfully completed. This route uses HAL enabled objects to obtain routes and therefore it doesn't apply `notificationsRegistrationsAnonymousRoute` route template. Here is an example of how a route can be obtained from HAL enabled objects:\r\n     * ```\r\n     * let params = modelMapper.removeParams(registration);\r\n     * var uri = params['model'].links('delete').href;\r\n     * ```\r\n     * @method\r\n     * @param data An object used to delete specified AnonymousRegistration resource.\r\n     * @returns A promise that is resolved once the remove anonymous registration action has been performed.\r\n     * @example // registration is a resource previously fetched using get action.\r\n                    notificationsRegistrationsAnonymousClient.remove(registration)\r\n                        .then(function (data) {\r\n                            // perform success action here\r\n                        },\r\n                         function (response, status, headers, config) {\r\n                             // perform error handling here\r\n                        });\r\n     */\r\n    NotificationsRegistrationsAnonymousClient.prototype.remove = function (data) {\r\n        return this.apiClient.delete(this.routeDefinition.delete(data));\r\n    };\r\n    /**\r\n     * Returns a promise that is resolved once the update anonymous registration action has been performed; this action updates a anonymous registration resource. This route uses HAL enabled objects to obtain routes and therefore it doesn't apply `notificationsRegistrationsAnonymousRoute` route template. Here is an example of how a route can be obtained from HAL enabled objects:\r\n     * ```\r\n     * let params = modelMapper.updateParams(registration);\r\n     * var uri = params['model'].links('put').href;\r\n     * ```\r\n     * @method\r\n     * @param data An object used to update specified AnonymousRegistration resource.\r\n     * @returns A promise that is resolved once the update anonymous registration action has been performed\r\n     * @example // registration is a resource previously fetched using get action.\r\n                        subscription.provider = '<provider-name>';\r\n                        notificationsRegistrationsAnonymousClient.update(registration)\r\n                            .then(function (data) {\r\n                                // perform success action here\r\n                            },\r\n                             function (response, status, headers, config) {\r\n                                 // perform error handling here\r\n                            });\r\n     */\r\n    NotificationsRegistrationsAnonymousClient.prototype.update = function (data) {\r\n        return this.apiClient.put(this.routeDefinition.update(data), this.routeDefinition.updateParams(data));\r\n    };\r\n    return NotificationsRegistrationsAnonymousClient;\r\n}());\r\nNotificationsRegistrationsAnonymousClient = tslib_1.__decorate([\r\n    inversify_1.injectable(),\r\n    tslib_1.__param(0, inversify_1.inject(_1.TYPES.NotificationsRegistrationsAnonymousRoute)),\r\n    tslib_1.__param(1, inversify_1.inject(_1.TYPES.NotificationsRegistrationsAnonymousBatchClient)),\r\n    tslib_1.__param(2, inversify_1.inject(httpApi_1.httpTYPES.ApiClient)),\r\n    tslib_1.__metadata(\"design:paramtypes\", [typeof (_a = typeof _1.NotificationsRegistrationsAnonymousRoute !== \"undefined\" && _1.NotificationsRegistrationsAnonymousRoute) === \"function\" && _a || Object, typeof (_b = typeof _1.NotificationsRegistrationsAnonymousBatchClient !== \"undefined\" && _1.NotificationsRegistrationsAnonymousBatchClient) === \"function\" && _b || Object, typeof (_c = typeof httpApi_1.ApiClient !== \"undefined\" && httpApi_1.ApiClient) === \"function\" && _c || Object])\r\n], NotificationsRegistrationsAnonymousClient);\r\nexports.NotificationsRegistrationsAnonymousClient = NotificationsRegistrationsAnonymousClient;\r\nvar _a, _b, _c;\r\n/**\r\n * @overview\r\n ***Notes:**\r\n - Refer to the [REST API documentation](https://github.com/Baasic/baasic-rest-api/wiki) for detailed information about available Baasic REST API end-points.\r\n - All end-point objects are transformed by the associated route service.\r\n */ \r\n\n\n\n//////////////////\n// WEBPACK FOOTER\n// ./src/modules/notifications/notificationsRegistrationsAnonymousClient.ts\n// module id = 299\n// module chunks = 0","/* globals module */\r\n/**\r\n * @module notificationsRegistrationsAnonymousRoute\r\n * @description Baasic Notifications Registrations Anonymous Route Definition provides Baasic route templates which can be expanded to Baasic REST URIs. Various services can use Baasic Notifications Registrations Anonymous Route Definition to obtain needed routes while other routes will be obtained through HAL. By convention, all route services use the same function names as their corresponding services.\r\n */\r\n\"use strict\";\r\nObject.defineProperty(exports, \"__esModule\", { value: true });\r\nvar tslib_1 = require(\"tslib\");\r\nvar inversify_1 = require(\"inversify\");\r\nvar common_1 = require(\"../../common\");\r\n;\r\nvar contracts_1 = require(\"../../core/contracts\");\r\nvar _1 = require(\"./\");\r\nvar NotificationsRegistrationsAnonymousRoute = (function (_super) {\r\n    tslib_1.__extends(NotificationsRegistrationsAnonymousRoute, _super);\r\n    function NotificationsRegistrationsAnonymousRoute(appOptions, notificationsRegistrationsAnonymousBatchRoute) {\r\n        var _this = _super.call(this, appOptions) || this;\r\n        _this.appOptions = appOptions;\r\n        _this.notificationsRegistrationsAnonymousBatchRoute = notificationsRegistrationsAnonymousBatchRoute;\r\n        _this.createRoute = 'notifications/registrations/anonymous';\r\n        _this.findRoute = 'notifications/registrations/anonymous/{?searchQuery,providers,page,rpp,sort,embed,fields}';\r\n        _this.getRoute = 'notifications/registrations/anonymous/{id}/{?embed}';\r\n        _this.updateRoute = 'notifications/registrations/anonymous/{id}';\r\n        _this.deleteRoute = 'notifications/registrations/anonymous/{id}';\r\n        return _this;\r\n    }\r\n    Object.defineProperty(NotificationsRegistrationsAnonymousRoute.prototype, \"batch\", {\r\n        get: function () {\r\n            return this.notificationsRegistrationsAnonymousBatchRoute;\r\n        },\r\n        enumerable: true,\r\n        configurable: true\r\n    });\r\n    /**\r\n     * Parses create anonymous registrations route; this route does not expose any additional options\r\n     * @method\r\n     * @example notificationsRegistrationsAnonymousRoute.create();\r\n     */\r\n    NotificationsRegistrationsAnonymousRoute.prototype.create = function () {\r\n        return _super.prototype.baseCreate.call(this, this.createRoute, {});\r\n    };\r\n    /**\r\n     * Parses find anonymous registrations route which can be expanded with additional options. Supported items are:\r\n     * - `searchQuery` - A string referencing user subscription properties using the phrase search.\r\n     * - `providers` - Comma separated list of notification providers.\r\n     * - `page` - A value used to set the page number, i.e. to retrieve certain user subscription subset from the storage.\r\n     * - `rpp` - A value used to limit the size of result set per page.\r\n     * - `sort` - A string used to set the user subscription property to sort the result collection by.\r\n     * - `embed` - Comma separated list of resources to be contained within the current representation.\r\n     * @method\r\n     * @param options Query resource options object.\r\n     * @example notificationsRegistrationsAnonymousRoute.find({\r\n                   searchQuery: '<search-phrase>',\r\n                   providers: '<provider-name>,<provider-name>'\r\n               });\r\n    */\r\n    NotificationsRegistrationsAnonymousRoute.prototype.find = function (options) {\r\n        return _super.prototype.baseFind.call(this, this.findRoute, options);\r\n    };\r\n    /**\r\n     * Parses get anonymous registrations route; this route should be expanded with the Id of anonymous registrations resource.\r\n     * @method\r\n     * @param id The registration identifier which uniquely identifies AnonymousRegistration resource that needs to be retrieved.\r\n     * @param options Query resource options object.\r\n     * @example notificationsRegistrationsAnonymousRoute.get({ id: '<registration-id>' });\r\n     */\r\n    NotificationsRegistrationsAnonymousRoute.prototype.get = function (id, options) {\r\n        return _super.prototype.baseGet.call(this, this.getRoute, id, options);\r\n    };\r\n    /**\r\n     * Parses update anonymous registrations route; this route should be expanded with the Id of anonymous registrations resource.\r\n     * @method\r\n     * @param data An object used to update specified AnonymousRegistration resource.\r\n     * @example notificationsRegistrationsAnonymousRoute.update(data);\r\n     */\r\n    NotificationsRegistrationsAnonymousRoute.prototype.update = function (data) {\r\n        return _super.prototype.baseUpdate.call(this, this.updateRoute, data);\r\n    };\r\n    /**\r\n     * Parses delete anonymous registrations route; this route should be expanded with the Id of anonymous registrations resource.\r\n     * @method\r\n     * @param data An object used to delete specified AnonymousRegistration resource.\r\n     * @example notificationsRegistrationsAnonymousRoute.delete(data);\r\n     */\r\n    NotificationsRegistrationsAnonymousRoute.prototype.delete = function (data) {\r\n        return _super.prototype.baseDelete.call(this, this.deleteRoute, data);\r\n    };\r\n    return NotificationsRegistrationsAnonymousRoute;\r\n}(common_1.BaseRoute));\r\nNotificationsRegistrationsAnonymousRoute = tslib_1.__decorate([\r\n    inversify_1.injectable(),\r\n    tslib_1.__param(0, inversify_1.inject(contracts_1.TYPES.IAppOptions)),\r\n    tslib_1.__param(1, inversify_1.inject(_1.TYPES.NotificationsRegistrationsAnonymousBatchRoute)),\r\n    tslib_1.__metadata(\"design:paramtypes\", [typeof (_a = typeof contracts_1.IAppOptions !== \"undefined\" && contracts_1.IAppOptions) === \"function\" && _a || Object, typeof (_b = typeof _1.NotificationsRegistrationsAnonymousBatchRoute !== \"undefined\" && _1.NotificationsRegistrationsAnonymousBatchRoute) === \"function\" && _b || Object])\r\n], NotificationsRegistrationsAnonymousRoute);\r\nexports.NotificationsRegistrationsAnonymousRoute = NotificationsRegistrationsAnonymousRoute;\r\nvar _a, _b;\r\n/**\r\n * @overview\r\n ***Notes:**\r\n - Refer to the [REST API documentation](https://github.com/Baasic/baasic-rest-api/wiki) for detailed information about available Baasic REST API end-points.\r\n - [URI Template](https://github.com/Baasic/uritemplate-js) syntax enables expanding the Baasic route templates to Baasic REST URIs providing it with an object that contains URI parameters.\r\n - All end-point objects are transformed by the associated route service.\r\n */ \r\n\n\n\n//////////////////\n// WEBPACK FOOTER\n// ./src/modules/notifications/notificationsRegistrationsAnonymousRoute.ts\n// module id = 300\n// module chunks = 0","/* globals module */\r\n/**\r\n * @module notificationsRegistrationsClient\r\n * @description  Notifications Registrations Client provides an easy way to consume  Notifications REST API end-points. In order to obtain needed routes `notificationsRegistrationsClient` uses `notificationsRegistrationsRoute`.\r\n */\r\n\"use strict\";\r\nObject.defineProperty(exports, \"__esModule\", { value: true });\r\nvar tslib_1 = require(\"tslib\");\r\nvar inversify_1 = require(\"inversify\");\r\nvar _1 = require(\"./\");\r\nvar NotificationsRegistrationsClient = (function () {\r\n    function NotificationsRegistrationsClient(notificationsRegistrationsRoute, notificationsRegistrationsAnonymousClient, notificationsRegistrationsUsersClient) {\r\n        this.notificationsRegistrationsRoute = notificationsRegistrationsRoute;\r\n        this.notificationsRegistrationsAnonymousClient = notificationsRegistrationsAnonymousClient;\r\n        this.notificationsRegistrationsUsersClient = notificationsRegistrationsUsersClient;\r\n    }\r\n    Object.defineProperty(NotificationsRegistrationsClient.prototype, \"routeDefinition\", {\r\n        get: function () {\r\n            return this.notificationsRegistrationsRoute;\r\n        },\r\n        enumerable: true,\r\n        configurable: true\r\n    });\r\n    Object.defineProperty(NotificationsRegistrationsClient.prototype, \"anonymous\", {\r\n        get: function () {\r\n            return this.notificationsRegistrationsAnonymousClient;\r\n        },\r\n        enumerable: true,\r\n        configurable: true\r\n    });\r\n    Object.defineProperty(NotificationsRegistrationsClient.prototype, \"users\", {\r\n        get: function () {\r\n            return this.notificationsRegistrationsUsersClient;\r\n        },\r\n        enumerable: true,\r\n        configurable: true\r\n    });\r\n    return NotificationsRegistrationsClient;\r\n}());\r\nNotificationsRegistrationsClient = tslib_1.__decorate([\r\n    inversify_1.injectable(),\r\n    tslib_1.__param(0, inversify_1.inject(_1.TYPES.NotificationsRegistrationsRoute)),\r\n    tslib_1.__param(1, inversify_1.inject(_1.TYPES.NotificationsRegistrationsAnonymousClient)),\r\n    tslib_1.__param(2, inversify_1.inject(_1.TYPES.NotificationsRegistrationsUsersClient)),\r\n    tslib_1.__metadata(\"design:paramtypes\", [typeof (_a = typeof _1.NotificationsRegistrationsRoute !== \"undefined\" && _1.NotificationsRegistrationsRoute) === \"function\" && _a || Object, typeof (_b = typeof _1.NotificationsRegistrationsAnonymousClient !== \"undefined\" && _1.NotificationsRegistrationsAnonymousClient) === \"function\" && _b || Object, typeof (_c = typeof _1.NotificationsRegistrationsUsersClient !== \"undefined\" && _1.NotificationsRegistrationsUsersClient) === \"function\" && _c || Object])\r\n], NotificationsRegistrationsClient);\r\nexports.NotificationsRegistrationsClient = NotificationsRegistrationsClient;\r\nvar _a, _b, _c;\r\n/**\r\n * @overview\r\n ***Notes:**\r\n - Refer to the [REST API documentation](https://github.com/Baasic/baasic-rest-api/wiki) for detailed information about available Baasic REST API end-points.\r\n - All end-point objects are transformed by the associated route service.\r\n */ \r\n\n\n\n//////////////////\n// WEBPACK FOOTER\n// ./src/modules/notifications/notificationsRegistrationsClient.ts\n// module id = 301\n// module chunks = 0","/* globals module */\r\n/**\r\n * @module notificationsRegistrationsRoute\r\n * @description Baasic Notifications Registrations Route Definition provides Baasic route templates which can be expanded to Baasic REST URIs. Various services can use Baasic Notifications Registrations Route Definition to obtain needed routes while other routes will be obtained through HAL. By convention, all route services use the same function names as their corresponding services.\r\n */\r\n\"use strict\";\r\nObject.defineProperty(exports, \"__esModule\", { value: true });\r\nvar tslib_1 = require(\"tslib\");\r\nvar inversify_1 = require(\"inversify\");\r\nvar common_1 = require(\"../../common\");\r\nvar contracts_1 = require(\"../../core/contracts\");\r\nvar _1 = require(\"./\");\r\nvar NotificationsRegistrationsRoute = (function (_super) {\r\n    tslib_1.__extends(NotificationsRegistrationsRoute, _super);\r\n    function NotificationsRegistrationsRoute(appOptions, notificationsRegistrationsUsersRoute, notificationsRegistrationsAnonymousRoute) {\r\n        var _this = _super.call(this, appOptions) || this;\r\n        _this.appOptions = appOptions;\r\n        _this.notificationsRegistrationsUsersRoute = notificationsRegistrationsUsersRoute;\r\n        _this.notificationsRegistrationsAnonymousRoute = notificationsRegistrationsAnonymousRoute;\r\n        return _this;\r\n    }\r\n    Object.defineProperty(NotificationsRegistrationsRoute.prototype, \"users\", {\r\n        get: function () {\r\n            return this.notificationsRegistrationsUsersRoute;\r\n        },\r\n        enumerable: true,\r\n        configurable: true\r\n    });\r\n    Object.defineProperty(NotificationsRegistrationsRoute.prototype, \"anonymous\", {\r\n        get: function () {\r\n            return this.notificationsRegistrationsAnonymousRoute;\r\n        },\r\n        enumerable: true,\r\n        configurable: true\r\n    });\r\n    return NotificationsRegistrationsRoute;\r\n}(common_1.BaseRoute));\r\nNotificationsRegistrationsRoute = tslib_1.__decorate([\r\n    inversify_1.injectable(),\r\n    tslib_1.__param(0, inversify_1.inject(contracts_1.TYPES.IAppOptions)),\r\n    tslib_1.__param(1, inversify_1.inject(_1.TYPES.NotificationsRegistrationsUsersRoute)),\r\n    tslib_1.__param(2, inversify_1.inject(_1.TYPES.NotificationsRegistrationsAnonymousRoute)),\r\n    tslib_1.__metadata(\"design:paramtypes\", [typeof (_a = typeof contracts_1.IAppOptions !== \"undefined\" && contracts_1.IAppOptions) === \"function\" && _a || Object, typeof (_b = typeof _1.NotificationsRegistrationsUsersRoute !== \"undefined\" && _1.NotificationsRegistrationsUsersRoute) === \"function\" && _b || Object, typeof (_c = typeof _1.NotificationsRegistrationsAnonymousRoute !== \"undefined\" && _1.NotificationsRegistrationsAnonymousRoute) === \"function\" && _c || Object])\r\n], NotificationsRegistrationsRoute);\r\nexports.NotificationsRegistrationsRoute = NotificationsRegistrationsRoute;\r\nvar _a, _b, _c;\r\n/**\r\n * @overview\r\n ***Notes:**\r\n - Refer to the [REST API documentation](https://github.com/Baasic/baasic-rest-api/wiki) for detailed information about available Baasic REST API end-points.\r\n - [URI Template](https://github.com/Baasic/uritemplate-js) syntax enables expanding the Baasic route templates to Baasic REST URIs providing it with an object that contains URI parameters.\r\n - All end-point objects are transformed by the associated route service.\r\n */ \r\n\n\n\n//////////////////\n// WEBPACK FOOTER\n// ./src/modules/notifications/notificationsRegistrationsRoute.ts\n// module id = 302\n// module chunks = 0","/* globals module */\r\n/**\r\n * @module notificationsRegistrationsUsersBatchClient\r\n * @description  Notifications Registrations Users Batch Client provides an easy way to consume  Notifications REST API end-points. In order to obtain needed routes `notificationsRegistrationsUsersBatchClient` uses `notificationsRegistrationsUsersBatchRoute`.\r\n */\r\n\"use strict\";\r\nObject.defineProperty(exports, \"__esModule\", { value: true });\r\nvar tslib_1 = require(\"tslib\");\r\nvar inversify_1 = require(\"inversify\");\r\nvar httpApi_1 = require(\"../../httpApi\");\r\n;\r\nvar _1 = require(\"./\");\r\nvar NotificationsRegistrationsUsersBatchClient = (function () {\r\n    function NotificationsRegistrationsUsersBatchClient(notificationsRegistrationsUsersBatchRoute, apiClient) {\r\n        this.notificationsRegistrationsUsersBatchRoute = notificationsRegistrationsUsersBatchRoute;\r\n        this.apiClient = apiClient;\r\n    }\r\n    Object.defineProperty(NotificationsRegistrationsUsersBatchClient.prototype, \"routeDefinition\", {\r\n        get: function () {\r\n            return this.notificationsRegistrationsUsersBatchRoute;\r\n        },\r\n        enumerable: true,\r\n        configurable: true\r\n    });\r\n    /**\r\n     * Returns a promise that is resolved once the create user registration action has been performed; this action creates new user registration resources.\r\n     * @method\r\n     * @param data UserRegistration collection that need to be inserted into the system.\r\n     * @returns A promise that is resolved once the create user registration action has been performed.\r\n     * @example notificationsRegistrationsUsersBatchClient.create([{\r\n                    provider: '<provider-name>',\r\n                    providerData: <provider-data>,\r\n                    userId: '<user-id>'\r\n                }])\r\n                .then(function (data) {\r\n                    // perform success action here\r\n                },\r\n                 function (response, status, headers, config) {\r\n                     // perform error handling here\r\n                });\r\n     */\r\n    NotificationsRegistrationsUsersBatchClient.prototype.create = function (data) {\r\n        return this.apiClient.post(this.routeDefinition.create(), this.routeDefinition.createParams(data));\r\n    };\r\n    /**\r\n     * Returns a promise that is resolved once the remove action has been performed. This action will remove user registration resources from the system if successfully completed.\r\n     * @method\r\n     * @param ids The subscription ids which uniquely identify UserRegistration resources that need to be deleted.\r\n     * @returns A promise that is resolved once the remove action has been performed.\r\n     * @example notificationsRegistrationsUsersBatchClient.remove(subscriptionIds)\r\n                    .then(function (data) {\r\n                        // perform success action here\r\n                    },\r\n                     function (response, status, headers, config) {\r\n                         // perform error handling here\r\n                    });\r\n     */\r\n    NotificationsRegistrationsUsersBatchClient.prototype.remove = function (ids) {\r\n        return this.apiClient.delete(this.notificationsRegistrationsUsersBatchRoute.delete(), undefined, ids);\r\n    };\r\n    /**\r\n     * Returns a promise that is resolved once the update user registration action has been performed; this action updates specified user registration resources.\r\n     * @method\r\n     * @param data UserRegistration objects used to update specified UserRegistration resources.\r\n     * @returns A promise that is resolved once the update user registration action has been performed.\r\n     * @example notificationsRegistrationsUsersBatchClient.update(registrations)\r\n                    .then(function (data) {\r\n                        // perform success action here\r\n                    },\r\n                     function (response, status, headers, config) {\r\n                         // perform error handling here\r\n                    });\r\n     */\r\n    NotificationsRegistrationsUsersBatchClient.prototype.update = function (data) {\r\n        return this.apiClient.put(this.routeDefinition.update(), this.routeDefinition.updateParams(data));\r\n    };\r\n    return NotificationsRegistrationsUsersBatchClient;\r\n}());\r\nNotificationsRegistrationsUsersBatchClient = tslib_1.__decorate([\r\n    inversify_1.injectable(),\r\n    tslib_1.__param(0, inversify_1.inject(_1.TYPES.NotificationsRegistrationsUsersBatchRoute)),\r\n    tslib_1.__param(1, inversify_1.inject(httpApi_1.httpTYPES.ApiClient)),\r\n    tslib_1.__metadata(\"design:paramtypes\", [typeof (_a = typeof _1.NotificationsRegistrationsUsersBatchRoute !== \"undefined\" && _1.NotificationsRegistrationsUsersBatchRoute) === \"function\" && _a || Object, typeof (_b = typeof httpApi_1.ApiClient !== \"undefined\" && httpApi_1.ApiClient) === \"function\" && _b || Object])\r\n], NotificationsRegistrationsUsersBatchClient);\r\nexports.NotificationsRegistrationsUsersBatchClient = NotificationsRegistrationsUsersBatchClient;\r\nvar _a, _b;\r\n/**\r\n * @overview\r\n ***Notes:**\r\n - Refer to the [REST API documentation](https://github.com/Baasic/baasic-rest-api/wiki) for detailed information about available Baasic REST API end-points.\r\n - All end-point objects are transformed by the associated route service.\r\n */ \r\n\n\n\n//////////////////\n// WEBPACK FOOTER\n// ./src/modules/notifications/notificationsRegistrationsUsersBatchClient.ts\n// module id = 303\n// module chunks = 0","/* globals module */\r\n/**\r\n * @module notificationsRegistrationsUsersBatchRoute\r\n * @description Baasic Notifications Registrations Users Batch Route Definition provides Baasic route templates which can be expanded to Baasic REST URIs. Various services can use Baasic Notifications Registrations Users Batch Route Definition to obtain needed routes while other routes will be obtained through HAL. By convention, all route services use the same function names as their corresponding services.\r\n */\r\n\"use strict\";\r\nObject.defineProperty(exports, \"__esModule\", { value: true });\r\nvar tslib_1 = require(\"tslib\");\r\nvar inversify_1 = require(\"inversify\");\r\nvar common_1 = require(\"../../common\");\r\n;\r\nvar contracts_1 = require(\"../../core/contracts\");\r\nvar NotificationsRegistrationsUsersBatchRoute = (function (_super) {\r\n    tslib_1.__extends(NotificationsRegistrationsUsersBatchRoute, _super);\r\n    function NotificationsRegistrationsUsersBatchRoute(appOptions) {\r\n        var _this = _super.call(this, appOptions) || this;\r\n        _this.appOptions = appOptions;\r\n        _this.createRoute = 'notifications/registrations/batch';\r\n        _this.deleteRoute = 'notifications/registrations/batch';\r\n        _this.updateRoute = 'notifications/registrations/batch';\r\n        return _this;\r\n    }\r\n    /**\r\n     * Parses create users registrations batch route; this route does not expose any additional options\r\n     * @method\r\n     * @example notificationsRegistrationsUsersBatchRoute.create();\r\n     */\r\n    NotificationsRegistrationsUsersBatchRoute.prototype.create = function () {\r\n        return this.baseCreate(this.createRoute, {});\r\n    };\r\n    /**\r\n     * Parses remove users registrations batch route; this route does not expose any additional options\r\n     * @method\r\n     * @example notificationsRegistrationsUsersBatchRoute.delete();\r\n     */\r\n    NotificationsRegistrationsUsersBatchRoute.prototype.delete = function () {\r\n        return this.baseDelete(this.deleteRoute, {});\r\n    };\r\n    /**\r\n     * Parses update users registrations batch route; this route does not expose any additional options\r\n     * @method\r\n     * @example notificationsRegistrationsUsersBatchRoute.update();\r\n     */\r\n    NotificationsRegistrationsUsersBatchRoute.prototype.update = function () {\r\n        return this.baseUpdate(this.updateRoute, {});\r\n    };\r\n    return NotificationsRegistrationsUsersBatchRoute;\r\n}(common_1.BaseRoute));\r\nNotificationsRegistrationsUsersBatchRoute = tslib_1.__decorate([\r\n    inversify_1.injectable(),\r\n    tslib_1.__param(0, inversify_1.inject(contracts_1.TYPES.IAppOptions)),\r\n    tslib_1.__metadata(\"design:paramtypes\", [typeof (_a = typeof contracts_1.IAppOptions !== \"undefined\" && contracts_1.IAppOptions) === \"function\" && _a || Object])\r\n], NotificationsRegistrationsUsersBatchRoute);\r\nexports.NotificationsRegistrationsUsersBatchRoute = NotificationsRegistrationsUsersBatchRoute;\r\nvar _a;\r\n/**\r\n * @overview\r\n ***Notes:**\r\n - Refer to the [REST API documentation](https://github.com/Baasic/baasic-rest-api/wiki) for detailed information about available Baasic REST API end-points.\r\n - [URI Template](https://github.com/Baasic/uritemplate-js) syntax enables expanding the Baasic route templates to Baasic REST URIs providing it with an object that contains URI parameters.\r\n - All end-point objects are transformed by the associated route service.\r\n */ \r\n\n\n\n//////////////////\n// WEBPACK FOOTER\n// ./src/modules/notifications/notificationsRegistrationsUsersBatchRoute.ts\n// module id = 304\n// module chunks = 0","/* globals module */\r\n/**\r\n * @module notificationsRegistrationsUsersClient\r\n * @description  Notifications Registrations Users Client provides an easy way to consume  Notifications REST API end-points. In order to obtain needed routes `notificationsRegistrationsUsersClient` uses `notificationsRegistrationsUsersRoute`.\r\n */\r\n\"use strict\";\r\nObject.defineProperty(exports, \"__esModule\", { value: true });\r\nvar tslib_1 = require(\"tslib\");\r\nvar inversify_1 = require(\"inversify\");\r\nvar httpApi_1 = require(\"../../httpApi\");\r\n;\r\nvar _1 = require(\"./\");\r\nvar NotificationsRegistrationsUsersClient = (function () {\r\n    function NotificationsRegistrationsUsersClient(notificationsRegistrationsUsersRoute, notificationsRegistrationsUsersBatchClient, apiClient) {\r\n        this.notificationsRegistrationsUsersRoute = notificationsRegistrationsUsersRoute;\r\n        this.notificationsRegistrationsUsersBatchClient = notificationsRegistrationsUsersBatchClient;\r\n        this.apiClient = apiClient;\r\n    }\r\n    Object.defineProperty(NotificationsRegistrationsUsersClient.prototype, \"routeDefinition\", {\r\n        get: function () {\r\n            return this.notificationsRegistrationsUsersRoute;\r\n        },\r\n        enumerable: true,\r\n        configurable: true\r\n    });\r\n    Object.defineProperty(NotificationsRegistrationsUsersClient.prototype, \"batch\", {\r\n        get: function () {\r\n            return this.notificationsRegistrationsUsersBatchClient;\r\n        },\r\n        enumerable: true,\r\n        configurable: true\r\n    });\r\n    /**\r\n     * Returns a promise that is resolved once the create user registration action has been performed; this action creates a new user registration resource.\r\n     * @method\r\n     * @param data An UserRegistration object that needs to be inserted into the system.\r\n     * @returns A promise that is resolved once the create user registration action has been performed.\r\n     * @example notificationsRegistrationsUsersClient.create({\r\n                    provider: '<provider-name>',\r\n                    providerData: <provider-data>,\r\n                    userId: '<user-id>'\r\n                })\r\n                .then(function (data) {\r\n                    // perform success action here\r\n                },\r\n                 function (response, status, headers, config) {\r\n                     // perform error handling here\r\n                });\r\n     */\r\n    NotificationsRegistrationsUsersClient.prototype.create = function (data) {\r\n        return this.apiClient.post(this.routeDefinition.create(), this.routeDefinition.createParams(data));\r\n    };\r\n    /**\r\n     * Returns a promise that is resolved once the find action has been performed. Success response returns a list of user registrations resources matching the given criteria.\r\n     * @method\r\n     * @param options Query resource options object.\r\n     * @returns A promise that is resolved once the find action has been performed.\r\n     * @example notificationsRegistrationsUsersClient.find({\r\n                   pageNumber : 1,\r\n                   pageSize : 10,\r\n                   orderBy : '<field>',\r\n                   orderDirection : '<asc|desc>',\r\n                   search : '<search-phrase>',\r\n                   providers: '<provider-name1>,<provider-name2>',\r\n                   userIds: '<user-id1>,<user-id2>',\r\n                   embed: '<embed>'\r\n               })\r\n               .then(function (collection) {\r\n                   // perform success action here\r\n               },\r\n                function (response, status, headers, config) {\r\n                    // perform error handling here\r\n               });\r\n    */\r\n    NotificationsRegistrationsUsersClient.prototype.find = function (options) {\r\n        return this.apiClient.get(this.routeDefinition.find(options));\r\n    };\r\n    /**\r\n     * Returns a promise that is resolved once the get action has been performed. Success response returns the specified user registrations resource.\r\n     * @method\r\n     * @param id The registration identifier which uniquely identifies UserRegistration resource that needs to be retrieved.\r\n     * @param options Query resource options object.\r\n     * @example notificationsRegistrationsUsersClient.get('<registration-id>')\r\n                   .then(function (data) {\r\n                       // perform success action here\r\n                   },\r\n                    function (response, status, headers, config) {\r\n                        // perform error handling here\r\n                   });\r\n    */\r\n    NotificationsRegistrationsUsersClient.prototype.get = function (id, options) {\r\n        return this.apiClient.get(this.notificationsRegistrationsUsersRoute.get(id, options));\r\n    };\r\n    /**\r\n     * Returns a promise that is resolved once the remove user registrations action has been performed. This action will remove a user registrations resource from the system if successfully completed. This route uses HAL enabled objects to obtain routes and therefore it doesn't apply `notificationsRegistrationsUsersRoute` route template. Here is an example of how a route can be obtained from HAL enabled objects:\r\n     * ```\r\n     * let params = modelMapper.removeParams(registration);\r\n     * let uri = params['model'].links('delete').href;\r\n     * ```\r\n     * @method\r\n     * @param data An object used to delete specified UserRegistration resource.\r\n     * @example // registration is a resource previously fetched using get action.\r\n                    notificationsRegistrationsUsersClient.remove(registration)\r\n                        .then(function (data) {\r\n                            // perform success action here\r\n                        },\r\n                         function (response, status, headers, config) {\r\n                             // perform error handling here\r\n                        });\r\n     */\r\n    NotificationsRegistrationsUsersClient.prototype.remove = function (data) {\r\n        return this.apiClient.delete(this.routeDefinition.delete(data));\r\n    };\r\n    /**\r\n     * Returns a promise that is resolved once the update user registration action has been performed; this action updates a user registration resource. This route uses HAL enabled objects to obtain routes and therefore it doesn't apply `notificationsRegistrationsUsersRoute` route template. Here is an example of how a route can be obtained from HAL enabled objects:\r\n     * ```\r\n     * let params = modelMapper.updateParams(subsregistrationcription);\r\n     * let uri = params['model'].links('put').href;\r\n     * ```\r\n     * @method\r\n     * @param data An object used to update specified UserRegistration resource.\r\n     * @returns A promise that is resolved once the update user registration action has been performed.\r\n     * @example // registration is a resource previously fetched using get action.\r\n                    registration.provider = '<provider-name>';\r\n                    notificationsRegistrationsUsersClient.update(registration)\r\n                        .then(function (data) {\r\n                            // perform success action here\r\n                        },\r\n                         function (response, status, headers, config) {\r\n                             // perform error handling here\r\n                        });\r\n     */\r\n    NotificationsRegistrationsUsersClient.prototype.update = function (data) {\r\n        return this.apiClient.put(this.routeDefinition.update(data), this.routeDefinition.updateParams(data));\r\n    };\r\n    return NotificationsRegistrationsUsersClient;\r\n}());\r\nNotificationsRegistrationsUsersClient = tslib_1.__decorate([\r\n    inversify_1.injectable(),\r\n    tslib_1.__param(0, inversify_1.inject(_1.TYPES.NotificationsRegistrationsUsersRoute)),\r\n    tslib_1.__param(1, inversify_1.inject(_1.TYPES.NotificationsRegistrationsUsersBatchClient)),\r\n    tslib_1.__param(2, inversify_1.inject(httpApi_1.httpTYPES.ApiClient)),\r\n    tslib_1.__metadata(\"design:paramtypes\", [typeof (_a = typeof _1.NotificationsRegistrationsUsersRoute !== \"undefined\" && _1.NotificationsRegistrationsUsersRoute) === \"function\" && _a || Object, typeof (_b = typeof _1.NotificationsRegistrationsUsersBatchClient !== \"undefined\" && _1.NotificationsRegistrationsUsersBatchClient) === \"function\" && _b || Object, typeof (_c = typeof httpApi_1.ApiClient !== \"undefined\" && httpApi_1.ApiClient) === \"function\" && _c || Object])\r\n], NotificationsRegistrationsUsersClient);\r\nexports.NotificationsRegistrationsUsersClient = NotificationsRegistrationsUsersClient;\r\nvar _a, _b, _c;\r\n/**\r\n * @overview\r\n ***Notes:**\r\n - Refer to the [REST API documentation](https://github.com/Baasic/baasic-rest-api/wiki) for detailed information about available Baasic REST API end-points.\r\n - All end-point objects are transformed by the associated route service.\r\n */ \r\n\n\n\n//////////////////\n// WEBPACK FOOTER\n// ./src/modules/notifications/notificationsRegistrationsUsersClient.ts\n// module id = 305\n// module chunks = 0","/* globals module */\r\n/**\r\n * @module notificationsRegistrationsUsersRoute\r\n * @description Baasic Notifications Registrations Users Route Definition provides Baasic route templates which can be expanded to Baasic REST URIs. Various services can use Baasic Notifications Registrations Users Route Definition to obtain needed routes while other routes will be obtained through HAL. By convention, all route services use the same function names as their corresponding services.\r\n */\r\n\"use strict\";\r\nObject.defineProperty(exports, \"__esModule\", { value: true });\r\nvar tslib_1 = require(\"tslib\");\r\nvar inversify_1 = require(\"inversify\");\r\nvar common_1 = require(\"../../common\");\r\n;\r\nvar contracts_1 = require(\"../../core/contracts\");\r\nvar _1 = require(\"./\");\r\nvar NotificationsRegistrationsUsersRoute = (function (_super) {\r\n    tslib_1.__extends(NotificationsRegistrationsUsersRoute, _super);\r\n    function NotificationsRegistrationsUsersRoute(appOptions, notificationsRegistrationsUsersBatchRoute) {\r\n        var _this = _super.call(this, appOptions) || this;\r\n        _this.appOptions = appOptions;\r\n        _this.notificationsRegistrationsUsersBatchRoute = notificationsRegistrationsUsersBatchRoute;\r\n        _this.createRoute = 'notifications/registrations';\r\n        _this.findRoute = 'notifications/registrations/{?searchQuery,userIds,providers,page,rpp,sort,embed,fields}';\r\n        _this.getRoute = 'notifications/registrations/{id}/{?embed}';\r\n        _this.deleteRoute = 'notifications/registrations/{id}';\r\n        _this.updateRoute = 'notifications/registrations/{id}';\r\n        return _this;\r\n    }\r\n    Object.defineProperty(NotificationsRegistrationsUsersRoute.prototype, \"batch\", {\r\n        get: function () {\r\n            return this.notificationsRegistrationsUsersBatchRoute;\r\n        },\r\n        enumerable: true,\r\n        configurable: true\r\n    });\r\n    /**\r\n     * Parses create users registrations route; this route does not expose any additional options\r\n     * @method\r\n     * @example notificationsRegistrationsUsersRoute.create();\r\n     */\r\n    NotificationsRegistrationsUsersRoute.prototype.create = function () {\r\n        return _super.prototype.baseCreate.call(this, this.createRoute, {});\r\n    };\r\n    /**\r\n     * Parses find users registrations route which can be expanded with additional options. Supported items are:\r\n     * - `searchQuery` - A string referencing user subscription properties using the phrase search.\r\n     * - `userIds` - Comma separated list of user identifiers.\r\n     * - `providers` - Comma separated list of notification providers.\r\n     * - `page` - A value used to set the page number, i.e. to retrieve certain user subscription subset from the storage.\r\n     * - `rpp` - A value used to limit the size of result set per page.\r\n     * - `sort` - A string used to set the user subscription property to sort the result collection by.\r\n     * - `embed` - Comma separated list of resources to be contained within the current representation.\r\n     * @method\r\n     * @param options Query resource options object.\r\n     * @example notificationsRegistrationsUsersRoute.find({ searchQuery: '<search-phrase>', providers: '<provider-name>,<provider-name>' });\r\n     */\r\n    NotificationsRegistrationsUsersRoute.prototype.find = function (options) {\r\n        return _super.prototype.baseFind.call(this, this.findRoute, options);\r\n    };\r\n    /**\r\n     * Parses get users registrations route; this route should be expanded with the Id of users registrations resource.\r\n     * @method\r\n     * @param id The registration identifier which uniquely identifies UserRegistration resource that needs to be retrieved.\r\n     * @param options Query resource options object.\r\n     * @example notificationsRegistrationsUsersRoute.get({ id: '<registration-id>' });\r\n     */\r\n    NotificationsRegistrationsUsersRoute.prototype.get = function (id, options) {\r\n        return _super.prototype.baseGet.call(this, this.getRoute, id, options);\r\n    };\r\n    /**\r\n     * Parses delete users registrations route; this route should be expanded with the Id of users registrations resource.\r\n     * @method\r\n     * @param data An object used to delete specified UserRegistration resource.\r\n     * @example notificationsRegistrationsUsersRoute.delete(data);\r\n     */\r\n    NotificationsRegistrationsUsersRoute.prototype.delete = function (data) {\r\n        return _super.prototype.baseDelete.call(this, this.deleteRoute, data);\r\n    };\r\n    /**\r\n     * Parses update users registrations route; this route should be expanded with the Id of users registrations resource.\r\n     * @method\r\n     * @param data An object used to update specified UserRegistration resource.\r\n     * @example notificationsRegistrationsUsersRoute.update(data);\r\n     */\r\n    NotificationsRegistrationsUsersRoute.prototype.update = function (data) {\r\n        return _super.prototype.baseUpdate.call(this, this.updateRoute, data);\r\n    };\r\n    return NotificationsRegistrationsUsersRoute;\r\n}(common_1.BaseRoute));\r\nNotificationsRegistrationsUsersRoute = tslib_1.__decorate([\r\n    inversify_1.injectable(),\r\n    tslib_1.__param(0, inversify_1.inject(contracts_1.TYPES.IAppOptions)),\r\n    tslib_1.__param(1, inversify_1.inject(_1.TYPES.NotificationsRegistrationsUsersBatchRoute)),\r\n    tslib_1.__metadata(\"design:paramtypes\", [typeof (_a = typeof contracts_1.IAppOptions !== \"undefined\" && contracts_1.IAppOptions) === \"function\" && _a || Object, typeof (_b = typeof _1.NotificationsRegistrationsUsersBatchRoute !== \"undefined\" && _1.NotificationsRegistrationsUsersBatchRoute) === \"function\" && _b || Object])\r\n], NotificationsRegistrationsUsersRoute);\r\nexports.NotificationsRegistrationsUsersRoute = NotificationsRegistrationsUsersRoute;\r\nvar _a, _b;\r\n/**\r\n * @overview\r\n ***Notes:**\r\n - Refer to the [REST API documentation](https://github.com/Baasic/baasic-rest-api/wiki) for detailed information about available Baasic REST API end-points.\r\n - [URI Template](https://github.com/Baasic/uritemplate-js) syntax enables expanding the Baasic route templates to Baasic REST URIs providing it with an object that contains URI parameters.\r\n - All end-point objects are transformed by the associated route service.\r\n */ \r\n\n\n\n//////////////////\n// WEBPACK FOOTER\n// ./src/modules/notifications/notificationsRegistrationsUsersRoute.ts\n// module id = 306\n// module chunks = 0","/* globals module */\r\n/**\r\n * @module notificationsRoute\r\n * @description Baasic Notifications Route Definition provides Baasic route templates which can be expanded to Baasic REST URIs. Various services can use Baasic Notifications Route Definition to obtain needed routes while other routes will be obtained through HAL. By convention, all route services use the same function names as their corresponding services.\r\n */\r\n\"use strict\";\r\nObject.defineProperty(exports, \"__esModule\", { value: true });\r\nvar tslib_1 = require(\"tslib\");\r\nvar inversify_1 = require(\"inversify\");\r\nvar common_1 = require(\"../../common\");\r\nvar contracts_1 = require(\"../../core/contracts\");\r\nvar _1 = require(\"./\");\r\nvar NotificationsRoute = (function (_super) {\r\n    tslib_1.__extends(NotificationsRoute, _super);\r\n    function NotificationsRoute(appOptions, notificationsPublishRoute, basicNotificationsSubscriptionsRoute, notificationsRegistrationsRoute, notificationsSettingsRoute) {\r\n        var _this = _super.call(this, appOptions) || this;\r\n        _this.appOptions = appOptions;\r\n        _this.notificationsPublishRoute = notificationsPublishRoute;\r\n        _this.basicNotificationsSubscriptionsRoute = basicNotificationsSubscriptionsRoute;\r\n        _this.notificationsRegistrationsRoute = notificationsRegistrationsRoute;\r\n        _this.notificationsSettingsRoute = notificationsSettingsRoute;\r\n        return _this;\r\n    }\r\n    Object.defineProperty(NotificationsRoute.prototype, \"publish\", {\r\n        get: function () {\r\n            return this.notificationsPublishRoute;\r\n        },\r\n        enumerable: true,\r\n        configurable: true\r\n    });\r\n    Object.defineProperty(NotificationsRoute.prototype, \"subscriptions\", {\r\n        get: function () {\r\n            return this.basicNotificationsSubscriptionsRoute;\r\n        },\r\n        enumerable: true,\r\n        configurable: true\r\n    });\r\n    Object.defineProperty(NotificationsRoute.prototype, \"registrations\", {\r\n        get: function () {\r\n            return this.notificationsRegistrationsRoute;\r\n        },\r\n        enumerable: true,\r\n        configurable: true\r\n    });\r\n    Object.defineProperty(NotificationsRoute.prototype, \"settings\", {\r\n        get: function () {\r\n            return this.notificationsSettingsRoute;\r\n        },\r\n        enumerable: true,\r\n        configurable: true\r\n    });\r\n    return NotificationsRoute;\r\n}(common_1.BaseRoute));\r\nNotificationsRoute = tslib_1.__decorate([\r\n    inversify_1.injectable(),\r\n    tslib_1.__param(0, inversify_1.inject(contracts_1.TYPES.IAppOptions)),\r\n    tslib_1.__param(1, inversify_1.inject(_1.TYPES.NotificationsPublishRoute)),\r\n    tslib_1.__param(2, inversify_1.inject(_1.TYPES.NotificationsSubscriptionsRoute)),\r\n    tslib_1.__param(3, inversify_1.inject(_1.TYPES.NotificationsRegistrationsRoute)),\r\n    tslib_1.__param(4, inversify_1.inject(_1.TYPES.NotificationsSettingsRoute)),\r\n    tslib_1.__metadata(\"design:paramtypes\", [typeof (_a = typeof contracts_1.IAppOptions !== \"undefined\" && contracts_1.IAppOptions) === \"function\" && _a || Object, typeof (_b = typeof _1.NotificationsPublishRoute !== \"undefined\" && _1.NotificationsPublishRoute) === \"function\" && _b || Object, typeof (_c = typeof _1.NotificationsSubscriptionsRoute !== \"undefined\" && _1.NotificationsSubscriptionsRoute) === \"function\" && _c || Object, typeof (_d = typeof _1.NotificationsRegistrationsRoute !== \"undefined\" && _1.NotificationsRegistrationsRoute) === \"function\" && _d || Object, typeof (_e = typeof _1.NotificationsSettingsRoute !== \"undefined\" && _1.NotificationsSettingsRoute) === \"function\" && _e || Object])\r\n], NotificationsRoute);\r\nexports.NotificationsRoute = NotificationsRoute;\r\nvar _a, _b, _c, _d, _e;\r\n/**\r\n * @overview\r\n ***Notes:**\r\n - Refer to the [REST API documentation](https://github.com/Baasic/baasic-rest-api/wiki) for detailed information about available Baasic REST API end-points.\r\n - [URI Template](https://github.com/Baasic/uritemplate-js) syntax enables expanding the Baasic route templates to Baasic REST URIs providing it with an object that contains URI parameters.\r\n - All end-point objects are transformed by the associated route service.\r\n */ \r\n\n\n\n//////////////////\n// WEBPACK FOOTER\n// ./src/modules/notifications/notificationsRoute.ts\n// module id = 307\n// module chunks = 0","/* globals module */\r\n/**\r\n * @module notificationsSettingsClient\r\n * @description  Notifications Settings Client provides an easy way to consume  Notifications REST API end-points. In order to obtain needed routes `notificationsSettingsClient` uses `notificationsSettingsRoute`.\r\n */\r\n\"use strict\";\r\nObject.defineProperty(exports, \"__esModule\", { value: true });\r\nvar tslib_1 = require(\"tslib\");\r\nvar inversify_1 = require(\"inversify\");\r\nvar httpApi_1 = require(\"../../httpApi\");\r\nvar _1 = require(\"./\");\r\nvar NotificationsSettingsClient = (function () {\r\n    function NotificationsSettingsClient(notificationsSettingsRoute, apiClient) {\r\n        this.notificationsSettingsRoute = notificationsSettingsRoute;\r\n        this.apiClient = apiClient;\r\n    }\r\n    Object.defineProperty(NotificationsSettingsClient.prototype, \"routeDefinition\", {\r\n        get: function () {\r\n            return this.notificationsSettingsRoute;\r\n        },\r\n        enumerable: true,\r\n        configurable: true\r\n    });\r\n    /**\r\n     * Returns a promise that is resolved once the get action has been performed. Success response returns the specified setting resource.\r\n     * @method\r\n     * @param provider The notification provider name.\r\n     * @returns A promise that is resolved once the get action has been performed.\r\n     * @example notificationsSettingsClient.get('<provider-name>')\r\n                    .then(function (data) {\r\n                        // perform success action here\r\n                    },\r\n                     function (response, status, headers, config) {\r\n                         // perform error handling here\r\n                    });\r\n     */\r\n    NotificationsSettingsClient.prototype.get = function (provider) {\r\n        return this.apiClient.get(this.routeDefinition.get(provider));\r\n    };\r\n    /**\r\n     * Returns a promise that is resolved once the update settings action has been performed; this action updates a settings resource. This route uses HAL enabled objects to obtain routes and therefore it doesn't apply `notificationsSettingsRoute` route template. Here is an example of how a route can be obtained from HAL enabled objects:\r\n     * ```\r\n     * let params = modelMapper.updateParams(settings);\r\n     * let uri = params['model'].links('put').href;\r\n     * ```\r\n     * @method\r\n     * @param data The notification settings.\r\n     * @returns A promise that is resolved once the update settings action has been performed.\r\n     * @example // settings is a resource previously fetched using get action.\r\n                    notificationsSettingsClient.update(settings)\r\n                        .then(function (data) {\r\n                            // perform success action here\r\n                        },\r\n                         function (response, status, headers, config) {\r\n                             // perform error handling here\r\n                        });\r\n     */\r\n    NotificationsSettingsClient.prototype.update = function (data) {\r\n        return this.apiClient.put(this.routeDefinition.update(data), this.routeDefinition.updateParams(data));\r\n    };\r\n    return NotificationsSettingsClient;\r\n}());\r\nNotificationsSettingsClient = tslib_1.__decorate([\r\n    inversify_1.injectable(),\r\n    tslib_1.__param(0, inversify_1.inject(_1.TYPES.NotificationsSettingsRoute)),\r\n    tslib_1.__param(1, inversify_1.inject(httpApi_1.httpTYPES.ApiClient)),\r\n    tslib_1.__metadata(\"design:paramtypes\", [typeof (_a = typeof _1.NotificationsSettingsRoute !== \"undefined\" && _1.NotificationsSettingsRoute) === \"function\" && _a || Object, typeof (_b = typeof httpApi_1.ApiClient !== \"undefined\" && httpApi_1.ApiClient) === \"function\" && _b || Object])\r\n], NotificationsSettingsClient);\r\nexports.NotificationsSettingsClient = NotificationsSettingsClient;\r\nvar _a, _b;\r\n/**\r\n * @overview\r\n ***Notes:**\r\n - Refer to the [REST API documentation](https://github.com/Baasic/baasic-rest-api/wiki) for detailed information about available Baasic REST API end-points.\r\n - All end-point objects are transformed by the associated route service.\r\n */ \r\n\n\n\n//////////////////\n// WEBPACK FOOTER\n// ./src/modules/notifications/notificationsSettingsClient.ts\n// module id = 308\n// module chunks = 0","/* globals module */\r\n/**\r\n * @module notificationsSettingsRoute\r\n * @description Baasic Notifications Settings Route Definition provides Baasic route templates which can be expanded to Baasic REST URIs. Various services can use Baasic Notifications Settings Route Definition to obtain needed routes while other routes will be obtained through HAL. By convention, all route services use the same function names as their corresponding services.\r\n */\r\n\"use strict\";\r\nObject.defineProperty(exports, \"__esModule\", { value: true });\r\nvar tslib_1 = require(\"tslib\");\r\nvar inversify_1 = require(\"inversify\");\r\nvar common_1 = require(\"../../common\");\r\nvar contracts_1 = require(\"../../core/contracts\");\r\nvar NotificationsSettingsRoute = (function (_super) {\r\n    tslib_1.__extends(NotificationsSettingsRoute, _super);\r\n    function NotificationsSettingsRoute(appOptions) {\r\n        var _this = _super.call(this, appOptions) || this;\r\n        _this.appOptions = appOptions;\r\n        _this.getRoute = 'notifications/settings/{id}';\r\n        _this.updateRoute = 'notifications/settings/{id}';\r\n        return _this;\r\n    }\r\n    /**\r\n     * Parses get notification settings route; this route should be expanded with the notification provider name.\r\n     * @method\r\n     * @param provider The notification provider name.\r\n     * @example notificationsSettingsRoute.get({ id: '<provider-name>' });\r\n     */\r\n    NotificationsSettingsRoute.prototype.get = function (provider) {\r\n        return _super.prototype.baseGet.call(this, this.getRoute, provider);\r\n    };\r\n    /**\r\n     * Parses update notification settings route; this route should be expanded with the notification provider name.\r\n     * @method\r\n     * @param data The notification settings.\r\n     * @example notificationsSettingsRoute.update({ id: '<provider-name>' });\r\n     */\r\n    NotificationsSettingsRoute.prototype.update = function (data) {\r\n        return _super.prototype.baseUpdate.call(this, this.updateRoute, data);\r\n    };\r\n    return NotificationsSettingsRoute;\r\n}(common_1.BaseRoute));\r\nNotificationsSettingsRoute = tslib_1.__decorate([\r\n    inversify_1.injectable(),\r\n    tslib_1.__param(0, inversify_1.inject(contracts_1.TYPES.IAppOptions)),\r\n    tslib_1.__metadata(\"design:paramtypes\", [typeof (_a = typeof contracts_1.IAppOptions !== \"undefined\" && contracts_1.IAppOptions) === \"function\" && _a || Object])\r\n], NotificationsSettingsRoute);\r\nexports.NotificationsSettingsRoute = NotificationsSettingsRoute;\r\nvar _a;\r\n/**\r\n * @overview\r\n ***Notes:**\r\n - Refer to the [REST API documentation](https://github.com/Baasic/baasic-rest-api/wiki) for detailed information about available Baasic REST API end-points.\r\n - [URI Template](https://github.com/Baasic/uritemplate-js) syntax enables expanding the Baasic route templates to Baasic REST URIs providing it with an object that contains URI parameters.\r\n - All end-point objects are transformed by the associated route service.\r\n */ \r\n\n\n\n//////////////////\n// WEBPACK FOOTER\n// ./src/modules/notifications/notificationsSettingsRoute.ts\n// module id = 309\n// module chunks = 0","/* globals module */\r\n/**\r\n * @module notificationsSubscriptionsAnonymousBatchClient\r\n * @description  Notifications Subscriptions Anonymous Batch Client provides an easy way to consume  Notifications REST API end-points. In order to obtain needed routes `notificationsSubscriptionsAnonymousBatchClient` uses `notificationsSubscriptionsAnonymousBatchRoute`.\r\n */\r\n\"use strict\";\r\nObject.defineProperty(exports, \"__esModule\", { value: true });\r\nvar tslib_1 = require(\"tslib\");\r\nvar inversify_1 = require(\"inversify\");\r\n;\r\nvar httpApi_1 = require(\"../../httpApi\");\r\nvar _1 = require(\"./\");\r\nvar NotificationsSubscriptionsAnonymousBatchClient = (function () {\r\n    function NotificationsSubscriptionsAnonymousBatchClient(notificationsSubscriptionsAnonymousBatchRoute, apiClient) {\r\n        this.notificationsSubscriptionsAnonymousBatchRoute = notificationsSubscriptionsAnonymousBatchRoute;\r\n        this.apiClient = apiClient;\r\n    }\r\n    Object.defineProperty(NotificationsSubscriptionsAnonymousBatchClient.prototype, \"routeDefinition\", {\r\n        get: function () {\r\n            return this.notificationsSubscriptionsAnonymousBatchRoute;\r\n        },\r\n        enumerable: true,\r\n        configurable: true\r\n    });\r\n    /**\r\n     * Returns a promise that is resolved once the create anonymous subscription action has been performed; this action creates new anonymous subscription resources.\r\n     * @method\r\n     * @param data AnonymousSubscription objects that need to be inserted into the system.\r\n     * @returns A promise that is resolved once the create anonymous subscription action has been performed.\r\n     * @example notificationsSubscriptionsAnonymousBatchClient.create([{\r\n                    channel: '<channel-name>',\r\n                    registrationId: '<registration-id>' ž\r\n                }])\r\n                .then(function (data) {\r\n                    // perform success action here\r\n                },\r\n                 function (response, status, headers, config) {\r\n                     // perform error handling here\r\n                });\r\n     */\r\n    NotificationsSubscriptionsAnonymousBatchClient.prototype.create = function (data) {\r\n        return this.apiClient.post(this.routeDefinition.create(), this.routeDefinition.createParams(data));\r\n    };\r\n    /**\r\n     * Returns a promise that is resolved once the remove action has been performed. This action will remove anonymous subscription resources from the system if successfully completed.\r\n     * @method\r\n     * @param ids The subscription ids which uniquely identify AnonymousSubscription resources that need to be deleted.\r\n     * @returns a promise that is resolved once the remove action has been performed.\r\n     * @example notificationsSubscriptionsAnonymousBatchClient.remove(subscriptionIds)\r\n                   .then(function (data) {\r\n                       // perform success action here\r\n                   },\r\n                    function (response, status, headers, config) {\r\n                        // perform error handling here\r\n                   });\r\n    */\r\n    NotificationsSubscriptionsAnonymousBatchClient.prototype.remove = function (ids) {\r\n        return this.apiClient.delete(this.notificationsSubscriptionsAnonymousBatchRoute.delete(), undefined, ids);\r\n    };\r\n    /**\r\n     * Returns a promise that is resolved once the update anonymous subscriptions action has been performed; this action updates specified anonymous subscription resources.\r\n     * @method\r\n     * @param data AnonymousSubscription objects used to update specified AnonymousSubscription resources.\r\n     * @returns A promise that is resolved once the update anonymous subscriptions action has been performed.\r\n     * @example notificationsSubscriptionsAnonymousBatchClient.update(subscriptions)\r\n                    .then(function (data) {\r\n                        // perform success action here\r\n                    },\r\n                     function (response, status, headers, config) {\r\n                         // perform error handling here\r\n                    });\r\n     */\r\n    NotificationsSubscriptionsAnonymousBatchClient.prototype.update = function (data) {\r\n        return this.apiClient.put(this.routeDefinition.update(), this.routeDefinition.updateParams(data));\r\n    };\r\n    return NotificationsSubscriptionsAnonymousBatchClient;\r\n}());\r\nNotificationsSubscriptionsAnonymousBatchClient = tslib_1.__decorate([\r\n    inversify_1.injectable(),\r\n    tslib_1.__param(0, inversify_1.inject(_1.TYPES.NotificationsSubscriptionsAnonymousBatchRoute)),\r\n    tslib_1.__param(1, inversify_1.inject(httpApi_1.httpTYPES.ApiClient)),\r\n    tslib_1.__metadata(\"design:paramtypes\", [typeof (_a = typeof _1.NotificationsSubscriptionsAnonymousBatchRoute !== \"undefined\" && _1.NotificationsSubscriptionsAnonymousBatchRoute) === \"function\" && _a || Object, typeof (_b = typeof httpApi_1.ApiClient !== \"undefined\" && httpApi_1.ApiClient) === \"function\" && _b || Object])\r\n], NotificationsSubscriptionsAnonymousBatchClient);\r\nexports.NotificationsSubscriptionsAnonymousBatchClient = NotificationsSubscriptionsAnonymousBatchClient;\r\nvar _a, _b;\r\n/**\r\n * @overview\r\n ***Notes:**\r\n - Refer to the [REST API documentation](https://github.com/Baasic/baasic-rest-api/wiki) for detailed information about available Baasic REST API end-points.\r\n - All end-point objects are transformed by the associated route service.\r\n */ \r\n\n\n\n//////////////////\n// WEBPACK FOOTER\n// ./src/modules/notifications/notificationsSubscriptionsAnonymousBatchClient.ts\n// module id = 310\n// module chunks = 0","/* globals module */\r\n/**\r\n * @module notificationsSubscriptionsAnonymousBatchRoute\r\n * @description Baasic Notifications Subscriptions Anonymous Batch Route Definition provides Baasic route templates which can be expanded to Baasic REST URIs. Various services can use Baasic Notifications Subscriptions Anonymous Batch Route Definition to obtain needed routes while other routes will be obtained through HAL. By convention, all route services use the same function names as their corresponding services.\r\n */\r\n\"use strict\";\r\nObject.defineProperty(exports, \"__esModule\", { value: true });\r\nvar tslib_1 = require(\"tslib\");\r\nvar inversify_1 = require(\"inversify\");\r\nvar common_1 = require(\"../../common\");\r\n;\r\nvar contracts_1 = require(\"../../core/contracts\");\r\nvar NotificationsSubscriptionsAnonymousBatchRoute = (function (_super) {\r\n    tslib_1.__extends(NotificationsSubscriptionsAnonymousBatchRoute, _super);\r\n    function NotificationsSubscriptionsAnonymousBatchRoute(appOptions) {\r\n        var _this = _super.call(this, appOptions) || this;\r\n        _this.appOptions = appOptions;\r\n        _this.createRoute = 'notifications/subscriptions/anonymous/batch';\r\n        _this.deleteRoute = 'notifications/subscriptions/anonymous/batch';\r\n        _this.updateRoute = 'notifications/subscriptions/anonymous/batch';\r\n        return _this;\r\n    }\r\n    /**\r\n     * Parses create anonymous subscription batch route; this route does not expose any additional options\r\n     * @method\r\n     * @example notificationsSubscriptionsAnonymousBatchRoute.create();\r\n     */\r\n    NotificationsSubscriptionsAnonymousBatchRoute.prototype.create = function () {\r\n        return this.baseCreate(this.createRoute, {});\r\n    };\r\n    /**\r\n     * Parses remove anonymous subscription batch route; this route does not expose any additional options\r\n     * @method\r\n     * @example baasicNotificationsSubscriptionsAnonymousBatchRouteDefinitio.delete();\r\n     */\r\n    NotificationsSubscriptionsAnonymousBatchRoute.prototype.delete = function () {\r\n        return this.baseDelete(this.deleteRoute, {});\r\n    };\r\n    /**\r\n     * Parses update anonymous subscription batch route; this route does not expose any additional options\r\n     * @method\r\n     * @example notificationsSubscriptionsAnonymousBatchRoute.update();\r\n     */\r\n    NotificationsSubscriptionsAnonymousBatchRoute.prototype.update = function () {\r\n        return this.baseUpdate(this.updateRoute, {});\r\n    };\r\n    return NotificationsSubscriptionsAnonymousBatchRoute;\r\n}(common_1.BaseRoute));\r\nNotificationsSubscriptionsAnonymousBatchRoute = tslib_1.__decorate([\r\n    inversify_1.injectable(),\r\n    tslib_1.__param(0, inversify_1.inject(contracts_1.TYPES.IAppOptions)),\r\n    tslib_1.__metadata(\"design:paramtypes\", [typeof (_a = typeof contracts_1.IAppOptions !== \"undefined\" && contracts_1.IAppOptions) === \"function\" && _a || Object])\r\n], NotificationsSubscriptionsAnonymousBatchRoute);\r\nexports.NotificationsSubscriptionsAnonymousBatchRoute = NotificationsSubscriptionsAnonymousBatchRoute;\r\nvar _a;\r\n/**\r\n * @overview\r\n ***Notes:**\r\n - Refer to the [REST API documentation](https://github.com/Baasic/baasic-rest-api/wiki) for detailed information about available Baasic REST API end-points.\r\n - [URI Template](https://github.com/Baasic/uritemplate-js) syntax enables expanding the Baasic route templates to Baasic REST URIs providing it with an object that contains URI parameters.\r\n - All end-point objects are transformed by the associated route service.\r\n */ \r\n\n\n\n//////////////////\n// WEBPACK FOOTER\n// ./src/modules/notifications/notificationsSubscriptionsAnonymousBatchRoute.ts\n// module id = 311\n// module chunks = 0","/* globals module */\r\n/**\r\n * @module notificationsSubscriptionsAnonymousClient\r\n * @description  Notifications Subscriptions Anonymous Client provides an easy way to consume  Notifications REST API end-points. In order to obtain needed routes `notificationsSubscriptionsAnonymousClient` uses `notificationsSubscriptionsAnonymousRoute`.\r\n */\r\n\"use strict\";\r\nObject.defineProperty(exports, \"__esModule\", { value: true });\r\nvar tslib_1 = require(\"tslib\");\r\nvar inversify_1 = require(\"inversify\");\r\n;\r\nvar httpApi_1 = require(\"../../httpApi\");\r\nvar _1 = require(\"./\");\r\nvar NotificationsSubscriptionsAnonymousClient = (function () {\r\n    function NotificationsSubscriptionsAnonymousClient(notificationsSubscriptionsAnonymousRoute, notificationsSubscriptionsAnonymousBatchClient, apiClient) {\r\n        this.notificationsSubscriptionsAnonymousRoute = notificationsSubscriptionsAnonymousRoute;\r\n        this.notificationsSubscriptionsAnonymousBatchClient = notificationsSubscriptionsAnonymousBatchClient;\r\n        this.apiClient = apiClient;\r\n    }\r\n    Object.defineProperty(NotificationsSubscriptionsAnonymousClient.prototype, \"routeDefinition\", {\r\n        get: function () {\r\n            return this.notificationsSubscriptionsAnonymousRoute;\r\n        },\r\n        enumerable: true,\r\n        configurable: true\r\n    });\r\n    Object.defineProperty(NotificationsSubscriptionsAnonymousClient.prototype, \"batch\", {\r\n        get: function () {\r\n            return this.notificationsSubscriptionsAnonymousBatchClient;\r\n        },\r\n        enumerable: true,\r\n        configurable: true\r\n    });\r\n    /**\r\n     * Returns a promise that is resolved once the create anonymous subscription action has been performed; this action creates a new anonymous subscription resource.\r\n     * @method\r\n     * @param data An AnonymousSubscription object that needs to be inserted into the system.\r\n     * @returns A promise that is resolved once the create anonymous subscription action has been performed.\r\n     * @example notificationsSubscriptionsAnonymousClient.create({\r\n                    channel: '<channel-name>',\r\n                    registrationId: '<registration-id>'\r\n                })\r\n                .then(function (data) {\r\n                    // perform success action here\r\n                },\r\n                 function (response, status, headers, config) {\r\n                     // perform error handling here\r\n                });\r\n     */\r\n    NotificationsSubscriptionsAnonymousClient.prototype.create = function (data) {\r\n        return this.apiClient.post(this.routeDefinition.create(), this.routeDefinition.createParams(data));\r\n    };\r\n    /**\r\n     * Returns a promise that is resolved once the find action has been performed. Success response returns a list of anonymous subscription resources matching the given criteria.\r\n     * @method\r\n     * @param options Query resource options object.\r\n     * @returns A promise that is resolved once the find action has been performed.\r\n     * @example notificationsSubscriptionsAnonymousClient.find({\r\n                    pageNumber : 1,\r\n                    pageSize : 10,\r\n                    orderBy : '<field>',\r\n                    orderDirection : '<asc|desc>',\r\n                    search : '<search-phrase>',\r\n                    channels: '<channel-name1>,<channel-name2>',\r\n                    registrationIds: '<registration-id1>,<registration-id2>',\r\n                    embed: '<embed>'\r\n                })\r\n                .then(function (collection) {\r\n                    // perform success action here\r\n                },\r\n                 function (response, status, headers, config) {\r\n                     // perform error handling here\r\n                });\r\n     */\r\n    NotificationsSubscriptionsAnonymousClient.prototype.find = function (options) {\r\n        return this.apiClient.get(this.notificationsSubscriptionsAnonymousRoute.find());\r\n    };\r\n    /**\r\n     * Returns a promise that is resolved once the get action has been performed. Success response returns the specified anonymous subscription resource.\r\n     * @method\r\n     * @param id The subscription identifier which uniquely identifies AnonymousSubscription resource that needs to be retrieved.\r\n     * @param options Query resource options object.\r\n     * @returns A promise that is resolved once the get action has been performed.\r\n     * @example notificationsSubscriptionsAnonymousClient.get('<subscription-id>')\r\n                    .then(function (data) {\r\n                        // perform success action here\r\n                    },\r\n                     function (response, status, headers, config) {\r\n                         // perform error handling here\r\n                    });\r\n     */\r\n    NotificationsSubscriptionsAnonymousClient.prototype.get = function (id, options) {\r\n        return this.apiClient.get(this.notificationsSubscriptionsAnonymousRoute.get(id, options));\r\n    };\r\n    /**\r\n     * Returns a promise that is resolved once the remove anonymous subscription action has been performed. This action will remove a anonymous subscription resource from the system if successfully completed. This route uses HAL enabled objects to obtain routes and therefore it doesn't apply `notificationsSubscriptionsAnonymousRoute` route template. Here is an example of how a route can be obtained from HAL enabled objects:\r\n     * ```\r\n     * let params = modelMapper.removeParams(subscription);\r\n     * var uri = params['model'].links('delete').href;\r\n     * ```\r\n     * @method\r\n     * @param data The subscription identifier used to delete specific subscription resource in the system.\r\n     * @returns A promise that is resolved once the remove anonymous subscription action has been performed.\r\n     * @example // subscription is a resource previously fetched using get action.\r\n                        notificationsSubscriptionsAnonymousClient.remove(subscription)\r\n                            .then(function (data) {\r\n                                // perform success action here\r\n                            },\r\n                             function (response, status, headers, config) {\r\n                                 // perform error handling here\r\n                            });\r\n     */\r\n    NotificationsSubscriptionsAnonymousClient.prototype.remove = function (data) {\r\n        return this.apiClient.delete(this.routeDefinition.delete(data));\r\n    };\r\n    /**\r\n     * Returns a promise that is resolved once the update anonymous subscription action has been performed; this action updates a anonymous subscription resource. This route uses HAL enabled objects to obtain routes and therefore it doesn't apply `notificationsSubscriptionsAnonymousRoute` route template. Here is an example of how a route can be obtained from HAL enabled objects:\r\n     * ```\r\n     * let params = modelMapper.updateParams(subscription);\r\n     * let uri = params['model'].links('put').href;\r\n     * ```\r\n     * @method\r\n     * @param data An object used to update specified AnonymousSubscription resource.\r\n     * @returns A promise that is resolved once the update anonymous subscription action has been performed.\r\n     * @example // subscription is a resource previously fetched using get action.\r\n                    subscription.channel = '<channel-name>';\r\n                    notificationsSubscriptionsAnonymousClient.update(subscription)\r\n                        .then(function (data) {\r\n                            // perform success action here\r\n                        },\r\n                         function (response, status, headers, config) {\r\n                             // perform error handling here\r\n                        });\r\n     */\r\n    NotificationsSubscriptionsAnonymousClient.prototype.update = function (data) {\r\n        return this.apiClient.put(this.routeDefinition.update(data), this.routeDefinition.updateParams(data));\r\n    };\r\n    return NotificationsSubscriptionsAnonymousClient;\r\n}());\r\nNotificationsSubscriptionsAnonymousClient = tslib_1.__decorate([\r\n    inversify_1.injectable(),\r\n    tslib_1.__param(0, inversify_1.inject(_1.TYPES.NotificationsSubscriptionsAnonymousRoute)),\r\n    tslib_1.__param(1, inversify_1.inject(_1.TYPES.NotificationsSubscriptionsAnonymousBatchClient)),\r\n    tslib_1.__param(2, inversify_1.inject(httpApi_1.httpTYPES.ApiClient)),\r\n    tslib_1.__metadata(\"design:paramtypes\", [typeof (_a = typeof _1.NotificationsSubscriptionsAnonymousRoute !== \"undefined\" && _1.NotificationsSubscriptionsAnonymousRoute) === \"function\" && _a || Object, typeof (_b = typeof _1.NotificationsSubscriptionsAnonymousBatchClient !== \"undefined\" && _1.NotificationsSubscriptionsAnonymousBatchClient) === \"function\" && _b || Object, typeof (_c = typeof httpApi_1.ApiClient !== \"undefined\" && httpApi_1.ApiClient) === \"function\" && _c || Object])\r\n], NotificationsSubscriptionsAnonymousClient);\r\nexports.NotificationsSubscriptionsAnonymousClient = NotificationsSubscriptionsAnonymousClient;\r\nvar _a, _b, _c;\r\n/**\r\n * @overview\r\n ***Notes:**\r\n - Refer to the [REST API documentation](https://github.com/Baasic/baasic-rest-api/wiki) for detailed information about available Baasic REST API end-points.\r\n - All end-point objects are transformed by the associated route service.\r\n */ \r\n\n\n\n//////////////////\n// WEBPACK FOOTER\n// ./src/modules/notifications/notificationsSubscriptionsAnonymousClient.ts\n// module id = 312\n// module chunks = 0","/* globals module */\r\n/**\r\n * @module notificationsSubscriptionsAnonymousRoute\r\n * @description Baasic Notifications Subscriptions Anonymous Route Definition provides Baasic route templates which can be expanded to Baasic REST URIs. Various services can use Baasic Notifications Subscriptions Anonymous Route Definition to obtain needed routes while other routes will be obtained through HAL. By convention, all route services use the same function names as their corresponding services.\r\n */\r\n\"use strict\";\r\nObject.defineProperty(exports, \"__esModule\", { value: true });\r\nvar tslib_1 = require(\"tslib\");\r\nvar inversify_1 = require(\"inversify\");\r\nvar common_1 = require(\"../../common\");\r\n;\r\nvar contracts_1 = require(\"../../core/contracts\");\r\nvar _1 = require(\"./\");\r\nvar NotificationsSubscriptionsAnonymousRoute = (function (_super) {\r\n    tslib_1.__extends(NotificationsSubscriptionsAnonymousRoute, _super);\r\n    function NotificationsSubscriptionsAnonymousRoute(notificationsSubscriptionsAnonymousBatchRoute, appOptions) {\r\n        var _this = _super.call(this, appOptions) || this;\r\n        _this.notificationsSubscriptionsAnonymousBatchRoute = notificationsSubscriptionsAnonymousBatchRoute;\r\n        _this.appOptions = appOptions;\r\n        _this.createRoute = 'notifications/subscriptions/batch';\r\n        _this.findRoute = 'notifications/subscriptions/anonymous/{?searchQuery,registrationIds,channels,page,rpp,sort,embed,fields}';\r\n        _this.getRoute = 'notifications/subscriptions/anonymous/{id}/{?embed,fields}';\r\n        _this.deleteRoute = 'notifications/subscriptions/anonymous/{id}';\r\n        _this.updateRoute = 'notifications/subscriptions/anonymous/{id}';\r\n        return _this;\r\n    }\r\n    Object.defineProperty(NotificationsSubscriptionsAnonymousRoute.prototype, \"batch\", {\r\n        get: function () {\r\n            return this.notificationsSubscriptionsAnonymousBatchRoute;\r\n        },\r\n        enumerable: true,\r\n        configurable: true\r\n    });\r\n    /**\r\n     * Parses create anonymous subscription route; this route does not expose any additional options\r\n     * @method\r\n     * @example notificationsSubscriptionsAnonymousRoute.create();\r\n     */\r\n    NotificationsSubscriptionsAnonymousRoute.prototype.create = function () {\r\n        return _super.prototype.baseCreate.call(this, this.createRoute, {});\r\n    };\r\n    /**\r\n     * Parses find anonymous subscriptions route which can be expanded with additional options. Supported items are:\r\n     * - `searchQuery` - A string referencing user subscription properties using the phrase search.\r\n     * - `registrationIds` - Comma separated list of anonymous registration identifiers.\r\n     * - `channels` - Comma separated list of channels.\r\n     * - `page` - A value used to set the page number, i.e. to retrieve certain user subscription subset from the storage.\r\n     * - `rpp` - A value used to limit the size of result set per page.\r\n     * - `sort` - A string used to set the user subscription property to sort the result collection by.\r\n     * - `embed` - Comma separated list of resources to be contained within the current representation.\r\n     * @method\r\n     * @param options Query resource options object.\r\n     * @example notificationsSubscriptionsAnonymousRoute.find({\r\n                   searchQuery: '<search-phrase>',\r\n                   channels: '<channel-name>,<channel-name>'\r\n               });\r\n    */\r\n    NotificationsSubscriptionsAnonymousRoute.prototype.find = function (options) {\r\n        return _super.prototype.baseFind.call(this, this.findRoute, options);\r\n    };\r\n    /**\r\n     * Parses get anonymous subscription route; this route should be expanded with the Id of anonymous subscription resource.\r\n     * @method\r\n     * @param id The subscription identifier which uniquely identifies AnonymousSubscription resource that needs to be retrieved.\r\n     * @param options Query resource options object.\r\n     * @example notificationsSubscriptionsAnonymousRoute.get({id: '<subscription-id>'});\r\n     */\r\n    NotificationsSubscriptionsAnonymousRoute.prototype.get = function (id, options) {\r\n        return _super.prototype.baseGet.call(this, this.getRoute, id, options);\r\n    };\r\n    /**\r\n     * Parses delete anonymous subscription route; this route should be expanded with the Id of anonymous subscription resource.\r\n     * @method\r\n     * @param data The subscription identifier used to delete specific subscription resource in the system.\r\n     * @example notificationsSubscriptionsAnonymousRoute.delete(data);\r\n     */\r\n    NotificationsSubscriptionsAnonymousRoute.prototype.delete = function (data) {\r\n        return _super.prototype.baseDelete.call(this, this.deleteRoute, data);\r\n    };\r\n    /**\r\n     * Parses update anonymous subscription route; this route should be expanded with the Id of anonymous subscription resource.\r\n     * @method\r\n     * @param data The subscription identifier used to update specific subscription resource in the system.\r\n     * @example notificationsSubscriptionsAnonymousRoute.update(data);\r\n     */\r\n    NotificationsSubscriptionsAnonymousRoute.prototype.update = function (data) {\r\n        return _super.prototype.baseUpdate.call(this, this.updateRoute, data);\r\n    };\r\n    return NotificationsSubscriptionsAnonymousRoute;\r\n}(common_1.BaseRoute));\r\nNotificationsSubscriptionsAnonymousRoute = tslib_1.__decorate([\r\n    inversify_1.injectable(),\r\n    tslib_1.__param(0, inversify_1.inject(_1.TYPES.NotificationsSubscriptionsAnonymousBatchRoute)),\r\n    tslib_1.__param(1, inversify_1.inject(contracts_1.TYPES.IAppOptions)),\r\n    tslib_1.__metadata(\"design:paramtypes\", [typeof (_a = typeof _1.NotificationsSubscriptionsAnonymousBatchRoute !== \"undefined\" && _1.NotificationsSubscriptionsAnonymousBatchRoute) === \"function\" && _a || Object, typeof (_b = typeof contracts_1.IAppOptions !== \"undefined\" && contracts_1.IAppOptions) === \"function\" && _b || Object])\r\n], NotificationsSubscriptionsAnonymousRoute);\r\nexports.NotificationsSubscriptionsAnonymousRoute = NotificationsSubscriptionsAnonymousRoute;\r\nvar _a, _b;\r\n/**\r\n * @overview\r\n ***Notes:**\r\n - Refer to the [REST API documentation](https://github.com/Baasic/baasic-rest-api/wiki) for detailed information about available Baasic REST API end-points.\r\n - [URI Template](https://github.com/Baasic/uritemplate-js) syntax enables expanding the Baasic route templates to Baasic REST URIs providing it with an object that contains URI parameters.\r\n - All end-point objects are transformed by the associated route service.\r\n */ \r\n\n\n\n//////////////////\n// WEBPACK FOOTER\n// ./src/modules/notifications/notificationsSubscriptionsAnonymousRoute.ts\n// module id = 313\n// module chunks = 0","/* globals module */\r\n/**\r\n * @module notificationsSubscriptionsClient\r\n * @description  Notifications Subscriptions Client provides an easy way to consume  Notifications REST API end-points. In order to obtain needed routes `notificationsSubscriptionsClient` uses `notificationsSubscriptionsRoute`.\r\n */\r\n\"use strict\";\r\nObject.defineProperty(exports, \"__esModule\", { value: true });\r\nvar tslib_1 = require(\"tslib\");\r\nvar inversify_1 = require(\"inversify\");\r\nvar _1 = require(\"./\");\r\nvar NotificationsSubscriptionsClient = (function () {\r\n    function NotificationsSubscriptionsClient(notificationsSubscriptionsRoute, notificationsSubscriptionsAnonymousClient, notificationsSubscriptionsUsersClient) {\r\n        this.notificationsSubscriptionsRoute = notificationsSubscriptionsRoute;\r\n        this.notificationsSubscriptionsAnonymousClient = notificationsSubscriptionsAnonymousClient;\r\n        this.notificationsSubscriptionsUsersClient = notificationsSubscriptionsUsersClient;\r\n    }\r\n    Object.defineProperty(NotificationsSubscriptionsClient.prototype, \"routeDefinition\", {\r\n        get: function () {\r\n            return this.notificationsSubscriptionsRoute;\r\n        },\r\n        enumerable: true,\r\n        configurable: true\r\n    });\r\n    Object.defineProperty(NotificationsSubscriptionsClient.prototype, \"anonymous\", {\r\n        get: function () {\r\n            return this.notificationsSubscriptionsAnonymousClient;\r\n        },\r\n        enumerable: true,\r\n        configurable: true\r\n    });\r\n    Object.defineProperty(NotificationsSubscriptionsClient.prototype, \"users\", {\r\n        get: function () {\r\n            return this.notificationsSubscriptionsUsersClient;\r\n        },\r\n        enumerable: true,\r\n        configurable: true\r\n    });\r\n    return NotificationsSubscriptionsClient;\r\n}());\r\nNotificationsSubscriptionsClient = tslib_1.__decorate([\r\n    inversify_1.injectable(),\r\n    tslib_1.__param(0, inversify_1.inject(_1.TYPES.NotificationsSubscriptionsRoute)),\r\n    tslib_1.__param(1, inversify_1.inject(_1.TYPES.NotificationsSubscriptionsAnonymousClient)),\r\n    tslib_1.__param(2, inversify_1.inject(_1.TYPES.NotificationsSubscriptionsUsersClient)),\r\n    tslib_1.__metadata(\"design:paramtypes\", [typeof (_a = typeof _1.NotificationsSubscriptionsRoute !== \"undefined\" && _1.NotificationsSubscriptionsRoute) === \"function\" && _a || Object, typeof (_b = typeof _1.NotificationsSubscriptionsAnonymousClient !== \"undefined\" && _1.NotificationsSubscriptionsAnonymousClient) === \"function\" && _b || Object, typeof (_c = typeof _1.NotificationsSubscriptionsUsersClient !== \"undefined\" && _1.NotificationsSubscriptionsUsersClient) === \"function\" && _c || Object])\r\n], NotificationsSubscriptionsClient);\r\nexports.NotificationsSubscriptionsClient = NotificationsSubscriptionsClient;\r\nvar _a, _b, _c;\r\n/**\r\n * @overview\r\n ***Notes:**\r\n - Refer to the [REST API documentation](https://github.com/Baasic/baasic-rest-api/wiki) for detailed information about available Baasic REST API end-points.\r\n - All end-point objects are transformed by the associated route service.\r\n */ \r\n\n\n\n//////////////////\n// WEBPACK FOOTER\n// ./src/modules/notifications/notificationsSubscriptionsClient.ts\n// module id = 314\n// module chunks = 0","/* globals module */\r\n/**\r\n * @module notificationsSubscriptionsRoute\r\n * @description Baasic Notifications Subscriptions Route Definition provides Baasic route templates which can be expanded to Baasic REST URIs. Various services can use Baasic Notifications Route Definition to obtain needed routes while other routes will be obtained through HAL. By convention, all route services use the same function names as their corresponding services.\r\n */\r\n\"use strict\";\r\nObject.defineProperty(exports, \"__esModule\", { value: true });\r\nvar tslib_1 = require(\"tslib\");\r\nvar inversify_1 = require(\"inversify\");\r\nvar common_1 = require(\"../../common\");\r\nvar contracts_1 = require(\"../../core/contracts\");\r\nvar _1 = require(\"./\");\r\nvar NotificationsSubscriptionsRoute = (function (_super) {\r\n    tslib_1.__extends(NotificationsSubscriptionsRoute, _super);\r\n    function NotificationsSubscriptionsRoute(notificationsSubscriptionsAnonymousRoute, notificationsSubscriptionsUsersRoute, appOptions) {\r\n        var _this = _super.call(this, appOptions) || this;\r\n        _this.notificationsSubscriptionsAnonymousRoute = notificationsSubscriptionsAnonymousRoute;\r\n        _this.notificationsSubscriptionsUsersRoute = notificationsSubscriptionsUsersRoute;\r\n        _this.appOptions = appOptions;\r\n        return _this;\r\n    }\r\n    Object.defineProperty(NotificationsSubscriptionsRoute.prototype, \"users\", {\r\n        get: function () {\r\n            return this.notificationsSubscriptionsUsersRoute;\r\n        },\r\n        enumerable: true,\r\n        configurable: true\r\n    });\r\n    Object.defineProperty(NotificationsSubscriptionsRoute.prototype, \"anonymous\", {\r\n        get: function () {\r\n            return this.notificationsSubscriptionsAnonymousRoute;\r\n        },\r\n        enumerable: true,\r\n        configurable: true\r\n    });\r\n    return NotificationsSubscriptionsRoute;\r\n}(common_1.BaseRoute));\r\nNotificationsSubscriptionsRoute = tslib_1.__decorate([\r\n    inversify_1.injectable(),\r\n    tslib_1.__param(0, inversify_1.inject(_1.TYPES.NotificationsSubscriptionsAnonymousRoute)),\r\n    tslib_1.__param(1, inversify_1.inject(_1.TYPES.NotificationsSubscriptionsUsersRoute)),\r\n    tslib_1.__param(2, inversify_1.inject(contracts_1.TYPES.IAppOptions)),\r\n    tslib_1.__metadata(\"design:paramtypes\", [typeof (_a = typeof _1.NotificationsSubscriptionsAnonymousRoute !== \"undefined\" && _1.NotificationsSubscriptionsAnonymousRoute) === \"function\" && _a || Object, typeof (_b = typeof _1.NotificationsSubscriptionsUsersRoute !== \"undefined\" && _1.NotificationsSubscriptionsUsersRoute) === \"function\" && _b || Object, typeof (_c = typeof contracts_1.IAppOptions !== \"undefined\" && contracts_1.IAppOptions) === \"function\" && _c || Object])\r\n], NotificationsSubscriptionsRoute);\r\nexports.NotificationsSubscriptionsRoute = NotificationsSubscriptionsRoute;\r\nvar _a, _b, _c;\r\n/**\r\n * @overview\r\n ***Notes:**\r\n - Refer to the [REST API documentation](https://github.com/Baasic/baasic-rest-api/wiki) for detailed information about available Baasic REST API end-points.\r\n - [URI Template](https://github.com/Baasic/uritemplate-js) syntax enables expanding the Baasic route templates to Baasic REST URIs providing it with an object that contains URI parameters.\r\n - All end-point objects are transformed by the associated route service.\r\n */ \r\n\n\n\n//////////////////\n// WEBPACK FOOTER\n// ./src/modules/notifications/notificationsSubscriptionsRoute.ts\n// module id = 315\n// module chunks = 0","/* globals module */\r\n/**\r\n * @module notificationsSubscriptionsUsersBatchClient\r\n * @description  Notifications Subscriptions Users Batch Client provides an easy way to consume  Notifications REST API end-points. In order to obtain needed routes `notificationsSubscriptionsUsersBatchUsersClient` uses `notificationsSubscriptionsUsersBatchRoute`.\r\n */\r\n\"use strict\";\r\nObject.defineProperty(exports, \"__esModule\", { value: true });\r\nvar tslib_1 = require(\"tslib\");\r\nvar inversify_1 = require(\"inversify\");\r\n;\r\nvar httpApi_1 = require(\"../../httpApi\");\r\nvar _1 = require(\"./\");\r\nvar NotificationsSubscriptionsUsersBatchClient = (function () {\r\n    function NotificationsSubscriptionsUsersBatchClient(notificationsSubscriptionsUsersBatchRoute, apiClient) {\r\n        this.notificationsSubscriptionsUsersBatchRoute = notificationsSubscriptionsUsersBatchRoute;\r\n        this.apiClient = apiClient;\r\n    }\r\n    Object.defineProperty(NotificationsSubscriptionsUsersBatchClient.prototype, \"routeDefinition\", {\r\n        get: function () {\r\n            return this.notificationsSubscriptionsUsersBatchRoute;\r\n        },\r\n        enumerable: true,\r\n        configurable: true\r\n    });\r\n    /**\r\n     * Returns a promise that is resolved once the create user subscription action has been performed; this action creates new user subscription resources.\r\n     * @method\r\n     * @param data UserSubscription collection that need to be inserted into the system.\r\n     * @returns A promise that is resolved once the create user subscription action has been performed.\r\n     * @example notificationsSubscriptionsUsersBatchClient.create([{\r\n                    channel: '<channel-name>',\r\n                    userId: '<user-id>'\r\n                }])\r\n                .then(function (data) {\r\n                    // perform success action here\r\n                },\r\n                 function (response, status, headers, config) {\r\n                     // perform error handling here\r\n                });\r\n     */\r\n    NotificationsSubscriptionsUsersBatchClient.prototype.create = function (data) {\r\n        return this.apiClient.post(this.routeDefinition.create(), this.routeDefinition.createParams(data));\r\n    };\r\n    /**\r\n     * Returns a promise that is resolved once the remove action has been performed. This action will remove user subscription resources from the system if successfully completed.\r\n     * @method\r\n     * @param ids The subscription ids which uniquely identify UserSubscription resources that need to be deleted.\r\n     * @returns A promise that is resolved once the remove action has been performed.\r\n     * @example notificationsSubscriptionsUsersBatchClient.remove(subscriptionIds)\r\n                    .then(function (data) {\r\n                        // perform success action here\r\n                    },\r\n                     function (response, status, headers, config) {\r\n                         // perform error handling here\r\n                    });\r\n     */\r\n    NotificationsSubscriptionsUsersBatchClient.prototype.remove = function (ids) {\r\n        return this.apiClient.delete(this.notificationsSubscriptionsUsersBatchRoute.delete(), undefined, ids);\r\n    };\r\n    /**\r\n     * Returns a promise that is resolved once the update user subscriptions action has been performed; this action updates specified user subscription resources.\r\n     * @method\r\n     * @param data UserSubscription objects used to update specified UserSubscription resources.\r\n     * @returns A promise that is resolved once the update user subscriptions action has been performed.\r\n     * @example notificationsSubscriptionsUsersBatchClient.update(subscriptions)\r\n                    .then(function (data) {\r\n                        // perform success action here\r\n                    },\r\n                     function (response, status, headers, config) {\r\n                         // perform error handling here\r\n                    });\r\n     */\r\n    NotificationsSubscriptionsUsersBatchClient.prototype.update = function (data) {\r\n        return this.apiClient.put(this.routeDefinition.update(), this.routeDefinition.updateParams(data));\r\n    };\r\n    return NotificationsSubscriptionsUsersBatchClient;\r\n}());\r\nNotificationsSubscriptionsUsersBatchClient = tslib_1.__decorate([\r\n    inversify_1.injectable(),\r\n    tslib_1.__param(0, inversify_1.inject(_1.TYPES.NotificationsSubscriptionsUsersBatchRoute)),\r\n    tslib_1.__param(1, inversify_1.inject(httpApi_1.httpTYPES.ApiClient)),\r\n    tslib_1.__metadata(\"design:paramtypes\", [typeof (_a = typeof _1.NotificationsSubscriptionsUsersBatchRoute !== \"undefined\" && _1.NotificationsSubscriptionsUsersBatchRoute) === \"function\" && _a || Object, typeof (_b = typeof httpApi_1.ApiClient !== \"undefined\" && httpApi_1.ApiClient) === \"function\" && _b || Object])\r\n], NotificationsSubscriptionsUsersBatchClient);\r\nexports.NotificationsSubscriptionsUsersBatchClient = NotificationsSubscriptionsUsersBatchClient;\r\nvar _a, _b;\r\n/**\r\n * @overview\r\n ***Notes:**\r\n - Refer to the [REST API documentation](https://github.com/Baasic/baasic-rest-api/wiki) for detailed information about available Baasic REST API end-points.\r\n - All end-point objects are transformed by the associated route service.\r\n */ \r\n\n\n\n//////////////////\n// WEBPACK FOOTER\n// ./src/modules/notifications/notificationsSubscriptionsUsersBatchClient.ts\n// module id = 316\n// module chunks = 0","/* globals module */\r\n/**\r\n * @module notificationsSubscriptionsUsersBatchRoute\r\n * @description Baasic Notifications Subscriptions Users Batch Route Definition provides Baasic route templates which can be expanded to Baasic REST URIs. Various services can use Baasic Notifications Subscriptions Users Batch Route Definition to obtain needed routes while other routes will be obtained through HAL. By convention, all route services use the same function names as their corresponding services.\r\n */\r\n\"use strict\";\r\nObject.defineProperty(exports, \"__esModule\", { value: true });\r\nvar tslib_1 = require(\"tslib\");\r\nvar inversify_1 = require(\"inversify\");\r\nvar common_1 = require(\"../../common\");\r\n;\r\nvar contracts_1 = require(\"../../core/contracts\");\r\nvar NotificationsSubscriptionsUsersBatchRoute = (function (_super) {\r\n    tslib_1.__extends(NotificationsSubscriptionsUsersBatchRoute, _super);\r\n    function NotificationsSubscriptionsUsersBatchRoute(appOptions) {\r\n        var _this = _super.call(this, appOptions) || this;\r\n        _this.appOptions = appOptions;\r\n        _this.createRoute = 'notifications/subscriptions/batch';\r\n        _this.deleteRoute = 'notifications/subscriptions/batch';\r\n        _this.updateRoute = 'notifications/subscriptions/batch';\r\n        return _this;\r\n    }\r\n    /**\r\n     * Parses create user subscriptions batch route; this route does not expose any additional options\r\n     * @method\r\n     * @example notificationsSubscriptionsUsersBatchRoute.create();\r\n     */\r\n    NotificationsSubscriptionsUsersBatchRoute.prototype.create = function () {\r\n        return _super.prototype.baseCreate.call(this, this.createRoute, {});\r\n    };\r\n    /**\r\n     * Parses remove user subscriptions batch route; this route does not expose any additional options\r\n     * @method\r\n     * @example notificationsSubscriptionsUsersBatchRoute.delete(ids);\r\n     */\r\n    NotificationsSubscriptionsUsersBatchRoute.prototype.delete = function () {\r\n        return _super.prototype.baseDelete.call(this, this.deleteRoute, {});\r\n    };\r\n    /**\r\n     * Parses update user subscriptions batch route; this route does not expose any additional options\r\n     * @method\r\n     * @example notificationsSubscriptionsUsersBatchRoute.update();\r\n     */\r\n    NotificationsSubscriptionsUsersBatchRoute.prototype.update = function () {\r\n        return _super.prototype.baseUpdate.call(this, this.updateRoute, {});\r\n    };\r\n    return NotificationsSubscriptionsUsersBatchRoute;\r\n}(common_1.BaseRoute));\r\nNotificationsSubscriptionsUsersBatchRoute = tslib_1.__decorate([\r\n    inversify_1.injectable(),\r\n    tslib_1.__param(0, inversify_1.inject(contracts_1.TYPES.IAppOptions)),\r\n    tslib_1.__metadata(\"design:paramtypes\", [typeof (_a = typeof contracts_1.IAppOptions !== \"undefined\" && contracts_1.IAppOptions) === \"function\" && _a || Object])\r\n], NotificationsSubscriptionsUsersBatchRoute);\r\nexports.NotificationsSubscriptionsUsersBatchRoute = NotificationsSubscriptionsUsersBatchRoute;\r\nvar _a;\r\n/**\r\n * @overview\r\n ***Notes:**\r\n - Refer to the [REST API documentation](https://github.com/Baasic/baasic-rest-api/wiki) for detailed information about available Baasic REST API end-points.\r\n - [URI Template](https://github.com/Baasic/uritemplate-js) syntax enables expanding the Baasic route templates to Baasic REST URIs providing it with an object that contains URI parameters.\r\n - All end-point objects are transformed by the associated route service.\r\n */ \r\n\n\n\n//////////////////\n// WEBPACK FOOTER\n// ./src/modules/notifications/notificationsSubscriptionsUsersBatchRoute.ts\n// module id = 317\n// module chunks = 0","/* globals module */\r\n/**\r\n * @module notificationsSubscriptionsUsersClient\r\n * @description  Notifications Subscriptions Users Client provides an easy way to consume  Notifications REST API end-points. In order to obtain needed routes `notificationsSubscriptionsUsersClient` uses `notificationsSubscriptionsUsersRoute`.\r\n */\r\n\"use strict\";\r\nObject.defineProperty(exports, \"__esModule\", { value: true });\r\nvar tslib_1 = require(\"tslib\");\r\nvar inversify_1 = require(\"inversify\");\r\n;\r\nvar httpApi_1 = require(\"../../httpApi\");\r\nvar _1 = require(\"./\");\r\nvar NotificationsSubscriptionsUsersClient = (function () {\r\n    function NotificationsSubscriptionsUsersClient(notificationsSubscriptionsUsersRoute, NotificationsSubscriptionsUsersBatchClient, apiClient) {\r\n        this.notificationsSubscriptionsUsersRoute = notificationsSubscriptionsUsersRoute;\r\n        this.NotificationsSubscriptionsUsersBatchClient = NotificationsSubscriptionsUsersBatchClient;\r\n        this.apiClient = apiClient;\r\n    }\r\n    Object.defineProperty(NotificationsSubscriptionsUsersClient.prototype, \"routeDefinition\", {\r\n        get: function () {\r\n            return this.notificationsSubscriptionsUsersRoute;\r\n        },\r\n        enumerable: true,\r\n        configurable: true\r\n    });\r\n    Object.defineProperty(NotificationsSubscriptionsUsersClient.prototype, \"batch\", {\r\n        get: function () {\r\n            return this.NotificationsSubscriptionsUsersBatchClient;\r\n        },\r\n        enumerable: true,\r\n        configurable: true\r\n    });\r\n    /**\r\n     * Returns a promise that is resolved once the create user subscription action has been performed; this action creates a new user subscription resource.\r\n     * @method\r\n     * @param data An UserSubscription object that needs to be inserted into the system.\r\n     * @returns A promise that is resolved once the create user subscription action has been performed.\r\n     * @example notificationsSubscriptionsUsersClient.create({\r\n                    channel: '<channel-name>',\r\n                    userId: '<user-id>'\r\n                })\r\n                .then(function (data) {\r\n                    // perform success action here\r\n                },\r\n                 function (response, status, headers, config) {\r\n                     // perform error handling here\r\n                });\r\n     */\r\n    NotificationsSubscriptionsUsersClient.prototype.create = function (data) {\r\n        return this.apiClient.post(this.routeDefinition.create(), this.routeDefinition.createParams(data));\r\n    };\r\n    /**\r\n     * Returns a promise that is resolved once the find action has been performed. Success response returns a list of user subscription resources matching the given criteria.\r\n     * @method\r\n     * @param options Query resource options object.\r\n     * @returns A promise that is resolved once the find action has been performed.\r\n     * @example notificationsSubscriptionsUsersClient.find({\r\n                    pageNumber : 1,\r\n                    pageSize : 10,\r\n                    orderBy : '<field>',\r\n                    orderDirection : '<asc|desc>',\r\n                    search : '<search-phrase>',\r\n                    channels: '<channel-name1>,<channel-name2>',\r\n                    userIds: '<user-id1>,<user-id2>',\r\n                    embed: '<embed>'\r\n                })\r\n                .then(function (collection) {\r\n                    // perform success action here\r\n                },\r\n                 function (response, status, headers, config) {\r\n                     // perform error handling here\r\n                });\r\n     */\r\n    NotificationsSubscriptionsUsersClient.prototype.find = function (options) {\r\n        return this.apiClient.get(this.routeDefinition.find(options));\r\n    };\r\n    /**\r\n     * Returns a promise that is resolved once the get action has been performed. Success response returns the specified user subscription resource.\r\n     * @method\r\n     * @param id The subscription identifier which uniquely identifies UserSubscription resource that needs to be retrieved.\r\n     * @param options Query resource options object.\r\n     * @returns A promise that is resolved once the get action has been performed.\r\n     * @example notificationsSubscriptionsUsersClient.get('<subscription-id>')\r\n                   .then(function (data) {\r\n                       // perform success action here\r\n                   },\r\n                    function (response, status, headers, config) {\r\n                        // perform error handling here\r\n                   });\r\n    */\r\n    NotificationsSubscriptionsUsersClient.prototype.get = function (id, options) {\r\n        return this.apiClient.get(this.notificationsSubscriptionsUsersRoute.get(id, options));\r\n    };\r\n    /**\r\n     * Returns a promise that is resolved once the remove user subscription action has been performed. This action will remove a user subscription resource from the system if successfully completed. This route uses HAL enabled objects to obtain routes and therefore it doesn't apply `notificationsSubscriptionsUsersRoute` route template. Here is an example of how a route can be obtained from HAL enabled objects:\r\n     * ```\r\n     * let params = modelMapper.removeParams(subscription);\r\n     * let uri = params['model'].links('delete').href;\r\n     * ```\r\n     * @method\r\n     * @param data An object used to delete specified UserSubscription resource.\r\n     * @returns A promise that is resolved once the remove user subscription action has been performed.\r\n     * @example // subscription is a resource previously fetched using get action.\r\n                    notificationsSubscriptionsUsersClient.remove(subscription)\r\n                        .then(function (data) {\r\n                            // perform success action here\r\n                        },\r\n                         function (response, status, headers, config) {\r\n                             // perform error handling here\r\n                        });\r\n     */\r\n    NotificationsSubscriptionsUsersClient.prototype.remove = function (data) {\r\n        return this.apiClient.delete(this.routeDefinition.delete(data));\r\n    };\r\n    /**\r\n     * Returns a promise that is resolved once the update user subscription action has been performed; this action updates a user subscription resource. This route uses HAL enabled objects to obtain routes and therefore it doesn't apply `notificationsSubscriptionsUsersRoute` route template. Here is an example of how a route can be obtained from HAL enabled objects:\r\n     * ```\r\n     * let params = modelMapper.updateParams(subscription);\r\n     * let uri = params['model'].links('put').href;\r\n     * ```\r\n     * @method\r\n     * @param data An object used to update specified UserSubscription resource.\r\n     * @example // subscription is a resource previously fetched using get action.\r\n                       subscription.channel = '<channel-name>';\r\n                       notificationsSubscriptionsUsersClient.update(subscription)\r\n                           .then(function (data) {\r\n                               // perform success action here\r\n                           },\r\n                            function (response, status, headers, config) {\r\n                                // perform error handling here\r\n                           });\r\n    */\r\n    NotificationsSubscriptionsUsersClient.prototype.update = function (data) {\r\n        return this.apiClient.put(this.routeDefinition.update(data), this.routeDefinition.updateParams(data));\r\n    };\r\n    return NotificationsSubscriptionsUsersClient;\r\n}());\r\nNotificationsSubscriptionsUsersClient = tslib_1.__decorate([\r\n    inversify_1.injectable(),\r\n    tslib_1.__param(0, inversify_1.inject(_1.TYPES.NotificationsSubscriptionsUsersRoute)),\r\n    tslib_1.__param(1, inversify_1.inject(_1.TYPES.NotificationsSubscriptionsUsersBatchClient)),\r\n    tslib_1.__param(2, inversify_1.inject(httpApi_1.httpTYPES.ApiClient)),\r\n    tslib_1.__metadata(\"design:paramtypes\", [typeof (_a = typeof _1.NotificationsSubscriptionsUsersRoute !== \"undefined\" && _1.NotificationsSubscriptionsUsersRoute) === \"function\" && _a || Object, typeof (_b = typeof _1.NotificationsSubscriptionsUsersBatchClient !== \"undefined\" && _1.NotificationsSubscriptionsUsersBatchClient) === \"function\" && _b || Object, typeof (_c = typeof httpApi_1.ApiClient !== \"undefined\" && httpApi_1.ApiClient) === \"function\" && _c || Object])\r\n], NotificationsSubscriptionsUsersClient);\r\nexports.NotificationsSubscriptionsUsersClient = NotificationsSubscriptionsUsersClient;\r\nvar _a, _b, _c;\r\n/**\r\n * @overview\r\n ***Notes:**\r\n - Refer to the [REST API documentation](https://github.com/Baasic/baasic-rest-api/wiki) for detailed information about available Baasic REST API end-points.\r\n - All end-point objects are transformed by the associated route service.\r\n */ \r\n\n\n\n//////////////////\n// WEBPACK FOOTER\n// ./src/modules/notifications/notificationsSubscriptionsUsersClient.ts\n// module id = 318\n// module chunks = 0","/* globals module */\r\n/**\r\n * @module notificationsSubscriptionsUsersRoute\r\n * @description Baasic Notifications Subscriptions Users Route Definition provides Baasic route templates which can be expanded to Baasic REST URIs. Various services can use Baasic Notifications Route Definition to obtain needed routes while other routes will be obtained through HAL. By convention, all route services use the same function names as their corresponding services.\r\n */\r\n\"use strict\";\r\nObject.defineProperty(exports, \"__esModule\", { value: true });\r\nvar tslib_1 = require(\"tslib\");\r\nvar inversify_1 = require(\"inversify\");\r\nvar common_1 = require(\"../../common\");\r\n;\r\nvar contracts_1 = require(\"../../core/contracts\");\r\nvar _1 = require(\"./\");\r\nvar NotificationsSubscriptionsUsersRoute = (function (_super) {\r\n    tslib_1.__extends(NotificationsSubscriptionsUsersRoute, _super);\r\n    function NotificationsSubscriptionsUsersRoute(appOptions, notificationsSubscriptionsUsersBatchRoute) {\r\n        var _this = _super.call(this, appOptions) || this;\r\n        _this.appOptions = appOptions;\r\n        _this.notificationsSubscriptionsUsersBatchRoute = notificationsSubscriptionsUsersBatchRoute;\r\n        _this.createRoute = 'notifications/subscriptions';\r\n        _this.findRoute = 'notifications/subscriptions/{?searchQuery,userIds,channels,page,rpp,sort,embed,fields}';\r\n        _this.getRoute = 'notifications/subscriptions/{id}/{?embed,fields}';\r\n        _this.deleteRoute = 'notifications/subscriptions/{id}';\r\n        _this.updateRoute = 'notifications/subscriptions/{id}';\r\n        return _this;\r\n    }\r\n    NotificationsSubscriptionsUsersRoute.prototype.batch = function () {\r\n        return this.notificationsSubscriptionsUsersBatchRoute;\r\n    };\r\n    /**\r\n     * Parses create user subscription route; this route does not expose any additional options\r\n     * @method\r\n     * @example notificationsSubscriptionsUsersRoute.create();\r\n     */\r\n    NotificationsSubscriptionsUsersRoute.prototype.create = function () {\r\n        return _super.prototype.baseCreate.call(this, this.createRoute, {});\r\n    };\r\n    /**\r\n     * Parses find user subscriptions route which can be expanded with additional options. Supported items are:\r\n     * - `searchQuery` - A string referencing user subscription properties using the phrase search.\r\n     * - `userIds` - Comma separated list of user identifiers.\r\n     * - `channels` - Comma separated list of channels.\r\n     * - `page` - A value used to set the page number, i.e. to retrieve certain user subscriptions subset from the storage.\r\n     * - `rpp` - A value used to limit the size of result set per page.\r\n     * - `sort` - A string used to set the user subscription property to sort the result collection by.\r\n     * - `embed` - Comma separated list of resources to be contained within the current representation.\r\n     * @method\r\n     * @example notificationsSubscriptionsUsersRoute.find({ searchQuery: '<search-phrase>', channels: '<channel-name>,<channel-name>' });\r\n     */\r\n    NotificationsSubscriptionsUsersRoute.prototype.find = function (options) {\r\n        return _super.prototype.baseFind.call(this, this.findRoute, options);\r\n    };\r\n    /**\r\n     * Parses get user subscription route; this route should be expanded with the Id of user subscription resource.\r\n     * @method\r\n     * @param id The subscription identifier which uniquely identifies UserSubscription resource that needs to be retrieved.\r\n     * @param options Query resource options object.\r\n     * @example notificationsSubscriptionsUsersRoute.get({ id: '<subscription-id>' });\r\n     */\r\n    NotificationsSubscriptionsUsersRoute.prototype.get = function (id, options) {\r\n        return _super.prototype.baseGet.call(this, this.getRoute, id, options);\r\n    };\r\n    /**\r\n     * Parses delete user subscription route; this route should be expanded with the Id of user subscription resource.\r\n     * @method\r\n     * @param data An object used to delete specified UserSubscription resource.\r\n     * @example notificationsSubscriptionsUsersRoute.delete(data);\r\n     */\r\n    NotificationsSubscriptionsUsersRoute.prototype.delete = function (data) {\r\n        return _super.prototype.baseDelete.call(this, this.deleteRoute, data);\r\n    };\r\n    /**\r\n     * Parses update user subscription route; this route should be expanded with the Id of user subscription resource.\r\n     * @method\r\n     * @param data An object used to update specified UserSubscription resource.\r\n     * @example notificationsSubscriptionsUsersRoute.update(data);\r\n     */\r\n    NotificationsSubscriptionsUsersRoute.prototype.update = function (data) {\r\n        return _super.prototype.baseUpdate.call(this, this.updateRoute, data);\r\n    };\r\n    return NotificationsSubscriptionsUsersRoute;\r\n}(common_1.BaseRoute));\r\nNotificationsSubscriptionsUsersRoute = tslib_1.__decorate([\r\n    inversify_1.injectable(),\r\n    tslib_1.__param(0, inversify_1.inject(contracts_1.TYPES.IAppOptions)),\r\n    tslib_1.__param(1, inversify_1.inject(_1.TYPES.NotificationsSubscriptionsUsersBatchRoute)),\r\n    tslib_1.__metadata(\"design:paramtypes\", [typeof (_a = typeof contracts_1.IAppOptions !== \"undefined\" && contracts_1.IAppOptions) === \"function\" && _a || Object, typeof (_b = typeof _1.NotificationsSubscriptionsUsersBatchRoute !== \"undefined\" && _1.NotificationsSubscriptionsUsersBatchRoute) === \"function\" && _b || Object])\r\n], NotificationsSubscriptionsUsersRoute);\r\nexports.NotificationsSubscriptionsUsersRoute = NotificationsSubscriptionsUsersRoute;\r\nvar _a, _b;\r\n/**\r\n * @overview\r\n ***Notes:**\r\n - Refer to the [REST API documentation](https://github.com/Baasic/baasic-rest-api/wiki) for detailed information about available Baasic REST API end-points.\r\n - [URI Template](https://github.com/Baasic/uritemplate-js) syntax enables expanding the Baasic route templates to Baasic REST URIs providing it with an object that contains URI parameters.\r\n - All end-point objects are transformed by the associated route service.\r\n */ \r\n\n\n\n//////////////////\n// WEBPACK FOOTER\n// ./src/modules/notifications/notificationsSubscriptionsUsersRoute.ts\n// module id = 319\n// module chunks = 0","\"use strict\";\r\nObject.defineProperty(exports, \"__esModule\", { value: true });\r\nvar inversify_1 = require(\"inversify\");\r\nvar _1 = require(\"./\");\r\nvar TYPES = {\r\n    TemplatingBatchClient: Symbol(\"TemplatingBatchClient\"),\r\n    TemplatingBatchRoute: Symbol(\"TemplatingBatchRoute\"),\r\n    TemplatingClient: Symbol(\"TemplatingClient\"),\r\n    TemplatingRoute: Symbol(\"TemplatingRoute\")\r\n};\r\nexports.TYPES = TYPES;\r\nvar diModule = new inversify_1.ContainerModule(function (bind) {\r\n    bind(TYPES.TemplatingBatchRoute).to(_1.TemplatingBatchRoute);\r\n    bind(TYPES.TemplatingBatchClient).to(_1.TemplatingBatchClient);\r\n    bind(TYPES.TemplatingRoute).to(_1.TemplatingRoute);\r\n    bind(TYPES.TemplatingClient).to(_1.TemplatingClient);\r\n});\r\nexports.diModule = diModule;\r\n\n\n\n//////////////////\n// WEBPACK FOOTER\n// ./src/modules/templating/diModule.ts\n// module id = 320\n// module chunks = 0","/* globals module */\r\n/**\r\n * @module templatingBatchClient\r\n * @description  Templating Batch Client provides an easy way to consume  Templating REST API end-points. In order to obtain a needed routes `templatingBatchClient` uses `templatingBatchRoute`.\r\n */\r\n\"use strict\";\r\nObject.defineProperty(exports, \"__esModule\", { value: true });\r\nvar tslib_1 = require(\"tslib\");\r\nvar inversify_1 = require(\"inversify\");\r\n;\r\nvar httpApi_1 = require(\"../../httpApi\");\r\nvar _1 = require(\"./\");\r\nvar TemplatingBatchClient = (function () {\r\n    function TemplatingBatchClient(templatingBatchRoute, apiClient) {\r\n        this.templatingBatchRoute = templatingBatchRoute;\r\n        this.apiClient = apiClient;\r\n    }\r\n    Object.defineProperty(TemplatingBatchClient.prototype, \"routeDefinition\", {\r\n        get: function () {\r\n            return this.templatingBatchRoute;\r\n        },\r\n        enumerable: true,\r\n        configurable: true\r\n    });\r\n    /**\r\n     * Returns a promise that is resolved once the create action has been performed; this action creates new template resources.\r\n     * @method\r\n     * @param data An Template objects that need to be inserted into the system.\r\n     * @returns A promise that is resolved once the create action has been performed.\r\n     * @example templatingBatchClient.create([{ content : '<content>', templateId : '<template-id>' }])\r\n                    .then(function (data) {\r\n                        // perform success action here\r\n                    },\r\n                     function (response, status, headers, config) {\r\n                        // perform error handling here\r\n                    });\r\n    **/\r\n    TemplatingBatchClient.prototype.create = function (data) {\r\n        return this.apiClient.post(this.routeDefinition.create(), this.routeDefinition.createParams(data));\r\n    };\r\n    /**\r\n     * Returns a promise that is resolved once the update action has been performed; this action updates specified template resources.\r\n     * @method\r\n     * @param data An Template objects that need to be inserted into the system.\r\n     * @returns A promise that is resolved once the update action has been performed.\r\n     * @example templatingBatchClient.update(templates)\r\n                    .then(function (data) {\r\n                        // perform success action here\r\n                    },\r\n                     function (response, status, headers, config) {\r\n                         // perform error handling here\r\n                    });\r\n     **/\r\n    TemplatingBatchClient.prototype.update = function (data) {\r\n        return this.apiClient.put(this.routeDefinition.update(), this.routeDefinition.updateParams(data));\r\n    };\r\n    /**\r\n     * Returns a promise that is resolved once the remove action has been performed. This action will remove template resources from the system if successfully completed.\r\n     * @method\r\n     * @param ids Template ids which uniquely identify Template resources that need to be deleted.\r\n     * @returns A promise that is resolved once the update action has been performed.\r\n     * @example templatingBatchClient.remove(companyIds)\r\n                    .then(function (data) {\r\n                        // perform success action here\r\n                    },\r\n                     function (response, status, headers, config) {\r\n                         // perform error handling here\r\n                    });\r\n     **/\r\n    TemplatingBatchClient.prototype.remove = function (ids) {\r\n        return this.apiClient.delete(this.templatingBatchRoute.delete(), undefined, ids);\r\n    };\r\n    return TemplatingBatchClient;\r\n}());\r\nTemplatingBatchClient = tslib_1.__decorate([\r\n    inversify_1.injectable(),\r\n    tslib_1.__param(0, inversify_1.inject(_1.TYPES.TemplatingBatchRoute)),\r\n    tslib_1.__param(1, inversify_1.inject(httpApi_1.httpTYPES.ApiClient)),\r\n    tslib_1.__metadata(\"design:paramtypes\", [typeof (_a = typeof _1.TemplatingBatchRoute !== \"undefined\" && _1.TemplatingBatchRoute) === \"function\" && _a || Object, typeof (_b = typeof httpApi_1.ApiClient !== \"undefined\" && httpApi_1.ApiClient) === \"function\" && _b || Object])\r\n], TemplatingBatchClient);\r\nexports.TemplatingBatchClient = TemplatingBatchClient;\r\nvar _a, _b;\r\n/**\r\n * @overview\r\n ***Notes:**\r\n - Refer to the [REST API documentation](https://github.com/Baasic/baasic-rest-api/wiki) for detailed information about available Baasic REST API end-points.\r\n - All end-point objects are transformed by the associated route definition.\r\n */ \r\n\n\n\n//////////////////\n// WEBPACK FOOTER\n// ./src/modules/templating/templatingBatchClient.ts\n// module id = 321\n// module chunks = 0","/*global module */\r\n/**\r\n * @module templatingBatchRoute\r\n * @description Baasic Templating Batch Route Definition provides Baasic route templates which can be expanded to Baasic REST URIs. Various services can use Baasic Templating Batch Route Definition to obtain a needed routes while other routes will be obtained through HAL. By convention, all route services use the same function names as their corresponding services.\r\n */\r\n\"use strict\";\r\nObject.defineProperty(exports, \"__esModule\", { value: true });\r\nvar tslib_1 = require(\"tslib\");\r\nvar inversify_1 = require(\"inversify\");\r\nvar common_1 = require(\"../../common\");\r\nvar contracts_1 = require(\"../../core/contracts\");\r\nvar TemplatingBatchRoute = (function (_super) {\r\n    tslib_1.__extends(TemplatingBatchRoute, _super);\r\n    function TemplatingBatchRoute(appOptions) {\r\n        var _this = _super.call(this, appOptions) || this;\r\n        _this.appOptions = appOptions;\r\n        _this.createRoute = 'templates/batch';\r\n        _this.updateRoute = 'templates/batch';\r\n        _this.deleteRoute = 'templates/batch';\r\n        return _this;\r\n    }\r\n    /**\r\n     * Parses create route; this URI template does not expose any additional options.\r\n     * @method\r\n     * @example templatingBatchRoute.create();\r\n     **/\r\n    TemplatingBatchRoute.prototype.create = function () {\r\n        return _super.prototype.baseCreate.call(this, this.createRoute, {});\r\n    };\r\n    /**\r\n     * Parses update route; this URI template does not expose any additional options.\r\n     * @method\r\n     * @example templatingBatchRoute.update();\r\n     **/\r\n    TemplatingBatchRoute.prototype.update = function () {\r\n        return _super.prototype.baseUpdate.call(this, this.updateRoute, {});\r\n    };\r\n    /**\r\n     * Parses remove route; this URI template does not expose any additional options.\r\n     * @method\r\n     * @example templatingBatchRoute.delete();\r\n     **/\r\n    TemplatingBatchRoute.prototype.delete = function () {\r\n        return _super.prototype.baseDelete.call(this, this.deleteRoute, {});\r\n    };\r\n    return TemplatingBatchRoute;\r\n}(common_1.BaseRoute));\r\nTemplatingBatchRoute = tslib_1.__decorate([\r\n    inversify_1.injectable(),\r\n    tslib_1.__param(0, inversify_1.inject(contracts_1.TYPES.IAppOptions)),\r\n    tslib_1.__metadata(\"design:paramtypes\", [typeof (_a = typeof contracts_1.IAppOptions !== \"undefined\" && contracts_1.IAppOptions) === \"function\" && _a || Object])\r\n], TemplatingBatchRoute);\r\nexports.TemplatingBatchRoute = TemplatingBatchRoute;\r\nvar _a;\r\n/**\r\n * @overview\r\n ***Notes:**\r\n - Refer to the [REST API documentation](https://github.com/Baasic/baasic-rest-api/wiki) for detailed information about available Baasic REST API end-points.\r\n - [URI Template](https://github.com/Baasic/uritemplate-js) syntax enables expanding the Baasic route templates to Baasic REST URIs providing it with an object that contains URI parameters.\r\n - All end-point objects are transformed by the associated route definition.\r\n */ \r\n\n\n\n//////////////////\n// WEBPACK FOOTER\n// ./src/modules/templating/templatingBatchRoute.ts\n// module id = 322\n// module chunks = 0","/* globals module */\r\n/**\r\n * @module templatingClient\r\n * @description  Templating Client provides an easy way to consume  Templating REST API end-points. In order to obtain a needed routes `templatingClient` uses `templatingRoute`.\r\n */\r\n\"use strict\";\r\nObject.defineProperty(exports, \"__esModule\", { value: true });\r\nvar tslib_1 = require(\"tslib\");\r\nvar inversify_1 = require(\"inversify\");\r\n;\r\nvar httpApi_1 = require(\"../../httpApi\");\r\nvar _1 = require(\"./\");\r\nvar TemplatingClient = (function () {\r\n    function TemplatingClient(templatingRoute, templatingBatchClient, apiClient) {\r\n        this.templatingRoute = templatingRoute;\r\n        this.templatingBatchClient = templatingBatchClient;\r\n        this.apiClient = apiClient;\r\n    }\r\n    Object.defineProperty(TemplatingClient.prototype, \"routeDefinition\", {\r\n        get: function () {\r\n            return this.templatingRoute;\r\n        },\r\n        enumerable: true,\r\n        configurable: true\r\n    });\r\n    Object.defineProperty(TemplatingClient.prototype, \"batch\", {\r\n        get: function () {\r\n            return this.templatingBatchClient;\r\n        },\r\n        enumerable: true,\r\n        configurable: true\r\n    });\r\n    /**\r\n     * Returns a promise that is resolved once the find action has been performed. Success response returns a list of template resources matching the given criteria.\r\n     * @method\r\n     * @param options Query resource options.\r\n     * @returns A promise that is resolved once the find action has been performed.\r\n     * @example templatingClient.find({\r\n                    pageNumber : 1,\r\n                    pageSize : 10,\r\n                    orderBy : '<field>',\r\n                    orderDirection : '<asc|desc>',\r\n                    search : '<search-phrase>'\r\n                })\r\n                .then(function (collection) {\r\n                    // perform success action here\r\n                },\r\n                 function (response, status, headers, config) {\r\n                     // perform error handling here\r\n                });\r\n     **/\r\n    TemplatingClient.prototype.find = function (options) {\r\n        return this.apiClient.get(this.routeDefinition.find(options));\r\n    };\r\n    /**\r\n     * Returns a promise that is resolved once the get action has been performed. Success response returns the specified template resource.\r\n     * @method\r\n     * @param id Template id which uniquely identifies Template resource that needs to be retrieved.\r\n     * @param options Query resource options object.\r\n     * @example templatingClient.get('<template-id>')\r\n                   .then(function (data) {\r\n                       // perform success action here\r\n                   },\r\n                    function (response, status, headers, config) {\r\n                        // perform error handling here\r\n                   });\r\n    **/\r\n    TemplatingClient.prototype.get = function (id, options) {\r\n        return this.apiClient.get(this.templatingRoute.get(id, options));\r\n    };\r\n    /**\r\n     * Returns a promise that is resolved once the create template action has been performed; this action creates a new template resource.\r\n     * @method\r\n     * @param data An Template object that needs to be inserted into the system.\r\n     * @returns A promise that is resolved once the create template action has been performed.\r\n     * @example templatingClient.create({  content : '<content>',  templateId : '<template-id>' })\r\n                    .then(function (data) {\r\n                        // perform success action here\r\n                    },\r\n                     function (response, status, headers, config) {\r\n                         // perform error handling here\r\n                    });\r\n     **/\r\n    TemplatingClient.prototype.create = function (data) {\r\n        return this.apiClient.post(this.routeDefinition.create(), this.routeDefinition.createParams(data));\r\n    };\r\n    /**\r\n     * Returns a promise that is resolved once the update template action has been performed; this action updates a template resource. This route uses HAL enabled objects to obtain routes and therefore it doesn't apply `baasicTemplatingRouteService` route template. Here is an example of how a route can be obtained from HAL enabled objects:\r\n     * ```\r\n     * let params = modelMapper.removeParams(template);\r\n     * let uri = params['model'].links('put').href;\r\n     * ```\r\n     * @method\r\n     * @param data An template object used to update specified Template resource.\r\n     * @returns A promise that is resolved once the update template action has been performed.\r\n     * @example // template is a resource previously fetched using get action.\r\n                    template.content = '<new-content>';\r\n                    templatingClient.update(template)\r\n                        .then(function (data) {\r\n                            // perform success action here\r\n                        },\r\n                         function (response, status, headers, config) {\r\n                             // perform error handling here\r\n                        });\r\n     **/\r\n    TemplatingClient.prototype.update = function (data) {\r\n        return this.apiClient.put(this.routeDefinition.update(data), this.routeDefinition.updateParams(data));\r\n    };\r\n    /**\r\n     * Returns a promise that is resolved once the remove action has been performed. This action will remove a template resource from the system if successfully completed. This route uses HAL enabled objects to obtain routes and therefore it doesn't apply `baasicTemplatingRouteDefiniton` route template. Here is an example of how a route can be obtained from HAL enabled objects:\r\n     * ```\r\n     * let params = modelMapper.removeParams(template);\r\n     * let uri = params['model'].links('delete').href;\r\n     * ```\r\n     * @method\r\n     * @param data An template object used to delete specified Template resource.\r\n     * @returns A promise that is resolved once the remove action has been performed.\r\n     * @example // template is a resource previously fetched using get action.\r\n                    templatingClient.remove(template)\r\n                        .then(function (data) {\r\n                            // perform success action here\r\n                        },\r\n                         function (response, status, headers, config) {\r\n                             // perform error handling here\r\n                        });\r\n     **/\r\n    TemplatingClient.prototype.remove = function (data) {\r\n        return this.apiClient.delete(this.routeDefinition.delete(data));\r\n    };\r\n    return TemplatingClient;\r\n}());\r\nTemplatingClient = tslib_1.__decorate([\r\n    inversify_1.injectable(),\r\n    tslib_1.__param(0, inversify_1.inject(_1.TYPES.TemplatingRoute)),\r\n    tslib_1.__param(1, inversify_1.inject(_1.TYPES.TemplatingBatchClient)),\r\n    tslib_1.__param(2, inversify_1.inject(httpApi_1.httpTYPES.ApiClient)),\r\n    tslib_1.__metadata(\"design:paramtypes\", [typeof (_a = typeof _1.TemplatingRoute !== \"undefined\" && _1.TemplatingRoute) === \"function\" && _a || Object, typeof (_b = typeof _1.TemplatingBatchClient !== \"undefined\" && _1.TemplatingBatchClient) === \"function\" && _b || Object, typeof (_c = typeof httpApi_1.ApiClient !== \"undefined\" && httpApi_1.ApiClient) === \"function\" && _c || Object])\r\n], TemplatingClient);\r\nexports.TemplatingClient = TemplatingClient;\r\nvar _a, _b, _c;\r\n/**\r\n * @overview\r\n ***Notes:**\r\n - Refer to the [REST API documentation](https://github.com/Baasic/baasic-rest-api/wiki) for detailed information about available Baasic REST API end-points.\r\n - All end-point objects are transformed by the associated route definition.\r\n */ \r\n\n\n\n//////////////////\n// WEBPACK FOOTER\n// ./src/modules/templating/templatingClient.ts\n// module id = 323\n// module chunks = 0","/*global module */\r\n/**\r\n * @module templatingRoute\r\n * @description Baasic Templating Route Definition provides Baasic route templates which can be expanded to Baasic REST URIs. Various services can use Baasic Templating Route Definition to obtain a needed routes while other routes will be obtained through HAL. By convention, all route services use the same function names as their corresponding services.\r\n */\r\n\"use strict\";\r\nObject.defineProperty(exports, \"__esModule\", { value: true });\r\nvar tslib_1 = require(\"tslib\");\r\nvar inversify_1 = require(\"inversify\");\r\nvar common_1 = require(\"../../common\");\r\n;\r\nvar _1 = require(\"./\");\r\nvar contracts_1 = require(\"../../core/contracts\");\r\nvar TemplatingRoute = (function (_super) {\r\n    tslib_1.__extends(TemplatingRoute, _super);\r\n    function TemplatingRoute(appOptions, templatingBatchRoute) {\r\n        var _this = _super.call(this, appOptions) || this;\r\n        _this.appOptions = appOptions;\r\n        _this.templatingBatchRoute = templatingBatchRoute;\r\n        _this.findRoute = 'templates/{?searchQuery,page,rpp,sort,embed,fields,moduleNames}';\r\n        _this.getRoute = 'templates/{id}/{?embed,fields}';\r\n        _this.createRoute = 'templates';\r\n        _this.updateRoute = 'templates/{id}';\r\n        _this.deleteRoute = 'templates/{id}';\r\n        return _this;\r\n    }\r\n    Object.defineProperty(TemplatingRoute.prototype, \"batch\", {\r\n        get: function () {\r\n            return this.templatingBatchRoute;\r\n        },\r\n        enumerable: true,\r\n        configurable: true\r\n    });\r\n    /**\r\n     * Parses find route which can be expanded with additional options. Supported items are:\r\n     * - `searchQuery` - A string value used to identify template resources using the phrase search.\r\n     * - `page` - A value used to set the page number, i.e. to retrieve certain template subset from the storage.\r\n     * - `rpp` - A value used to limit the size of result set per page.\r\n     * - `sort` - A string used to set the template property to sort the result collection by.\r\n     * - `embed` - Comma separated list of resources to be contained within the current representation.\r\n     * @method\r\n     * @param options Query resource options.\r\n     * @example templatingRoute.find({searchQuery: '<search-phrase>'});\r\n     **/\r\n    TemplatingRoute.prototype.find = function (options) {\r\n        return _super.prototype.baseFind.call(this, this.findRoute, options);\r\n    };\r\n    /**\r\n     * Parses get route which must be expanded with the Id of the previously created template resource in the system.\r\n     * @method\r\n     * @param id Template id which uniquely identifies Template resource that needs to be retrieved.\r\n     * @param options Query resource options object.\r\n     * @example templatingRoute.get({id: '<template-id>'});\r\n     **/\r\n    TemplatingRoute.prototype.get = function (id, options) {\r\n        return _super.prototype.baseGet.call(this, this.getRoute, id, options);\r\n    };\r\n    /**\r\n     * Parses create route; this URI template does not expose any additional options.\r\n     * @method\r\n     * @example templatingRoute.create();\r\n     **/\r\n    TemplatingRoute.prototype.create = function () {\r\n        return _super.prototype.baseCreate.call(this, this.createRoute, {});\r\n    };\r\n    /**\r\n     * Parses update route; this URI template does not expose any additional options.\r\n     * @method\r\n     * @param data An template object used to update specified Template resource.\r\n     * @example templatingRoute.update(data);\r\n     **/\r\n    TemplatingRoute.prototype.update = function (data) {\r\n        return _super.prototype.baseUpdate.call(this, this.updateRoute, data);\r\n    };\r\n    /**\r\n     * Parses delete route; this URI template does not expose any additional options.\r\n     * @method\r\n     * @param data An template object used to delete specified Template resource.\r\n     * @example templatingRoute.update(data);\r\n     **/\r\n    TemplatingRoute.prototype.delete = function (data) {\r\n        return _super.prototype.baseDelete.call(this, this.deleteRoute, data);\r\n    };\r\n    return TemplatingRoute;\r\n}(common_1.BaseRoute));\r\nTemplatingRoute = tslib_1.__decorate([\r\n    inversify_1.injectable(),\r\n    tslib_1.__param(0, inversify_1.inject(contracts_1.TYPES.IAppOptions)),\r\n    tslib_1.__param(1, inversify_1.inject(_1.TYPES.TemplatingBatchRoute)),\r\n    tslib_1.__metadata(\"design:paramtypes\", [typeof (_a = typeof contracts_1.IAppOptions !== \"undefined\" && contracts_1.IAppOptions) === \"function\" && _a || Object, typeof (_b = typeof _1.TemplatingBatchRoute !== \"undefined\" && _1.TemplatingBatchRoute) === \"function\" && _b || Object])\r\n], TemplatingRoute);\r\nexports.TemplatingRoute = TemplatingRoute;\r\nvar _a, _b;\r\n/**\r\n * @overview\r\n ***Notes:**\r\n - Refer to the [REST API documentation](https://github.com/Baasic/baasic-rest-api/wiki) for detailed information about available Baasic REST API end-points.\r\n - [URI Template](https://github.com/Baasic/uritemplate-js) syntax enables expanding the Baasic route templates to Baasic REST URIs providing it with an object that contains URI parameters.\r\n - All end-point objects are transformed by the associated route definition.\r\n */ \r\n\n\n\n//////////////////\n// WEBPACK FOOTER\n// ./src/modules/templating/templatingRoute.ts\n// module id = 324\n// module chunks = 0","/* globals module */\r\n/**\r\n * @module companyBatchClient\r\n * @description  Company Batch Client provides Baasic route templates which can be expanded to Baasic REST URIs. Various services can use Baasic Company Route Service to obtain needed routes while other routes will be obtained through HAL. By convention, all route services use the same function names as their corresponding services.\r\n */\r\n\"use strict\";\r\nObject.defineProperty(exports, \"__esModule\", { value: true });\r\nvar tslib_1 = require(\"tslib\");\r\nvar inversify_1 = require(\"inversify\");\r\nvar httpApi_1 = require(\"../../httpApi\");\r\nvar _1 = require(\"./\");\r\nvar CompanyBatchClient = (function () {\r\n    function CompanyBatchClient(companyBatchRoute, apiClient) {\r\n        this.companyBatchRoute = companyBatchRoute;\r\n        this.apiClient = apiClient;\r\n    }\r\n    Object.defineProperty(CompanyBatchClient.prototype, \"routeDefinition\", {\r\n        get: function () {\r\n            return this.companyBatchRoute;\r\n        },\r\n        enumerable: true,\r\n        configurable: true\r\n    });\r\n    /**\r\n     * Returns a promise that is resolved once the create company action has been performed; this action creates new company resources.\r\n     * @method\r\n     * @param data A collection of company objects that need to be inserted into the system.\r\n     * @returns A promise that is resolved once the create company action has been performed.\r\n     * @example  companyBatchClient.create([{\r\n                    description : '<description>',\r\n                    name : '<name>',\r\n                    slug: '<slug>'\r\n                 }])\r\n                 .then(function (data) {\r\n                     // perform success action here\r\n                  },\r\n                   function (response, status, headers, config) {\r\n                       // perform error handling here\r\n                 });\r\n     **/\r\n    CompanyBatchClient.prototype.create = function (data) {\r\n        return this.apiClient.post(this.routeDefinition.create(), this.routeDefinition.createParams(data));\r\n    };\r\n    /**\r\n     * Returns a promise that is resolved once the update company action has been performed; this action updates specified company resources.\r\n     * @method\r\n     * @param data A collection of company objects used to update specified company resources.\r\n     * @returns A promise that is resolved once the update company action has been performed.\r\n     * @example   companyBatchClient.update(companies)\r\n                    .then(function (data) {\r\n                        // perform success action here\r\n                    },\r\n                     function (response, status, headers, config) {\r\n                         // perform error handling here\r\n                    });\r\n     **/\r\n    CompanyBatchClient.prototype.update = function (data) {\r\n        return this.apiClient.put(this.routeDefinition.update(), this.routeDefinition.updateParams(data));\r\n    };\r\n    /**\r\n     * Returns a promise that is resolved once the remove action has been performed. This action will remove company resources from the system if successfully completed.\r\n     * @method\r\n     * @param ids Collection of company ids which uniquely identifies company resources that need to be deleted.\r\n     * @returns A promise that is resolved once the remove action has been performed.\r\n     * @example companyBatchClient.remove(companyIds)\r\n                   .then(function (data) {\r\n                       // perform success action here\r\n                   },\r\n                    function (response, status, headers, config) {\r\n                        // perform error handling here\r\n                   });\r\n    **/\r\n    CompanyBatchClient.prototype.remove = function (ids) {\r\n        return this.apiClient.delete(this.companyBatchRoute.delete(), undefined, ids);\r\n    };\r\n    return CompanyBatchClient;\r\n}());\r\nCompanyBatchClient = tslib_1.__decorate([\r\n    inversify_1.injectable(),\r\n    tslib_1.__param(0, inversify_1.inject(_1.TYPES.CompanyBatchRoute)),\r\n    tslib_1.__param(1, inversify_1.inject(httpApi_1.httpTYPES.ApiClient)),\r\n    tslib_1.__metadata(\"design:paramtypes\", [typeof (_a = typeof _1.CompanyBatchRoute !== \"undefined\" && _1.CompanyBatchRoute) === \"function\" && _a || Object, typeof (_b = typeof httpApi_1.ApiClient !== \"undefined\" && httpApi_1.ApiClient) === \"function\" && _b || Object])\r\n], CompanyBatchClient);\r\nexports.CompanyBatchClient = CompanyBatchClient;\r\nvar _a, _b;\r\n/**\r\n * @overview\r\n ***Notes:**\r\n - Refer to the [REST API documentation](https://github.com/Baasic/baasic-rest-api/wiki) for detailed information about available Baasic REST API end-points.\r\n - All end-point objects are transformed by the associated route service.\r\n */ \r\n\n\n\n//////////////////\n// WEBPACK FOOTER\n// ./src/modules/userProfile/companyBatchClient.ts\n// module id = 325\n// module chunks = 0","/* globals module */\r\n/**\r\n * @module companyBatchRoute\r\n * @description Baasic Company Batch Route Definition provides Baasic route templates which can be expanded to Baasic REST URIs. Various services can use Baasic Company Route Service to obtain needed routes while other routes will be obtained through HAL. By convention, all route services  use the same function names as their corresponding services.\r\n */\r\n\"use strict\";\r\nObject.defineProperty(exports, \"__esModule\", { value: true });\r\nvar tslib_1 = require(\"tslib\");\r\nvar inversify_1 = require(\"inversify\");\r\nvar common_1 = require(\"../../common\");\r\nvar contracts_1 = require(\"../../core/contracts\");\r\nvar CompanyBatchRoute = (function (_super) {\r\n    tslib_1.__extends(CompanyBatchRoute, _super);\r\n    function CompanyBatchRoute(appOptions) {\r\n        var _this = _super.call(this, appOptions) || this;\r\n        _this.appOptions = appOptions;\r\n        _this.createRoute = 'lookups/companies/batch';\r\n        _this.updateRoute = 'lookups/companies/batch';\r\n        _this.deleteRoute = 'lookups/companies/batch';\r\n        return _this;\r\n    }\r\n    /**\r\n     * Parses create route; this URI template does not expose any additional options.\r\n     * @method\r\n     * @example companyRoute.create();\r\n     **/\r\n    CompanyBatchRoute.prototype.create = function () {\r\n        return _super.prototype.baseCreate.call(this, this.createRoute, {});\r\n    };\r\n    /**\r\n     * Parses update route; this URI template does not expose any additional options.\r\n     * @method\r\n     * @example companyRoute.update();\r\n     **/\r\n    CompanyBatchRoute.prototype.update = function () {\r\n        return _super.prototype.baseUpdate.call(this, this.updateRoute, {});\r\n    };\r\n    /**\r\n     * Parses remove route; this URI template does not expose any additional options.\r\n     * @method\r\n     * @example companyRoute.remove();\r\n     **/\r\n    CompanyBatchRoute.prototype.delete = function () {\r\n        return _super.prototype.baseDelete.call(this, this.deleteRoute, {});\r\n    };\r\n    return CompanyBatchRoute;\r\n}(common_1.BaseRoute));\r\nCompanyBatchRoute = tslib_1.__decorate([\r\n    tslib_1.__param(0, inversify_1.inject(contracts_1.TYPES.IAppOptions)),\r\n    tslib_1.__metadata(\"design:paramtypes\", [typeof (_a = typeof contracts_1.IAppOptions !== \"undefined\" && contracts_1.IAppOptions) === \"function\" && _a || Object])\r\n], CompanyBatchRoute);\r\nexports.CompanyBatchRoute = CompanyBatchRoute;\r\nvar _a;\r\n/**\r\n * @overview\r\n ***Notes:**\r\n - Refer to the [REST API documentation](https://github.com/Baasic/baasic-rest-api/wiki) for detailed information about available Baasic REST API end-points.\r\n - [URI Template](https://github.com/Baasic/uritemplate-js) syntax enables expanding the Baasic route templates to Baasic REST URIs providing it with an object that contains URI parameters.\r\n - All end-point objects are transformed by the associated route service.\r\n */ \r\n\n\n\n//////////////////\n// WEBPACK FOOTER\n// ./src/modules/userProfile/companyBatchRoute.ts\n// module id = 326\n// module chunks = 0","/* globals module */\r\n/**\r\n * @module companyClient\r\n * @description  Company Client provides Baasic route templates which can be expanded to Baasic REST URIs. Various services can use Baasic Company Route Service to obtain needed routes while other routes will be obtained through HAL. By convention, all route services use the same function names as their corresponding services.\r\n */\r\n\"use strict\";\r\nObject.defineProperty(exports, \"__esModule\", { value: true });\r\nvar tslib_1 = require(\"tslib\");\r\nvar inversify_1 = require(\"inversify\");\r\n;\r\nvar httpApi_1 = require(\"../../httpApi\");\r\nvar _1 = require(\"./\");\r\nvar CompanyClient = (function () {\r\n    function CompanyClient(companyBatchClient, companyRoute, apiClient) {\r\n        this.companyBatchClient = companyBatchClient;\r\n        this.companyRoute = companyRoute;\r\n        this.apiClient = apiClient;\r\n    }\r\n    Object.defineProperty(CompanyClient.prototype, \"routeDefinition\", {\r\n        get: function () {\r\n            return this.companyRoute;\r\n        },\r\n        enumerable: true,\r\n        configurable: true\r\n    });\r\n    Object.defineProperty(CompanyClient.prototype, \"batch\", {\r\n        get: function () {\r\n            return this.companyBatchClient;\r\n        },\r\n        enumerable: true,\r\n        configurable: true\r\n    });\r\n    /**\r\n     * Returns a promise that is resolved once the find action has been performed. Success response returns a list of company resources matching the given criteria.\r\n     * @method\r\n     * @param options Query resource options object.\r\n     * @returns A promise that is resolved once the find action has been performed.\r\n     * @example companyClient.find({\r\n                    pageNumber : 1,\r\n                    pageSize : 10,\r\n                    orderBy : '<field>',\r\n                    orderDirection : '<asc|desc>',\r\n                    search : '<search-phrase>'\r\n                })\r\n                .then(function (collection) {\r\n                    // perform success action here\r\n                },\r\n                 function (response, status, headers, config) {\r\n                     // perform error handling here\r\n                });\r\n     **/\r\n    CompanyClient.prototype.find = function (options) {\r\n        return this.apiClient.get(this.routeDefinition.find(options));\r\n    };\r\n    /**\r\n     * Returns a promise that is resolved once the get action has been performed. Success response returns the company resource.\r\n     * @method\r\n     * @param id Company id which uniquely identifies resource that needs to be retrieved.\r\n     * @returns A promise that is resolved once the get action has been performed.\r\n     * @param options Query resource options object.\r\n     * @example companyClient.get()\r\n                    .then(function (data) {\r\n                        // perform success action here\r\n                    },\r\n                     function (response, status, headers, config) {\r\n                         // perform error handling here\r\n                    });\r\n     **/\r\n    CompanyClient.prototype.get = function (id, options) {\r\n        return this.apiClient.get(this.companyRoute.get(id, options));\r\n    };\r\n    /**\r\n     * Returns a promise that is resolved once the create company action has been performed; this action creates a new company resource.\r\n     * @method\r\n     * @param data A company object that needs to be inserted into the system.\r\n     * @returns A promise that is resolved once the create company action has been performed.\r\n     * @example companyClient.create({\r\n                    description : '<description>',\r\n                    name : '<name>',\r\n                    slug: '<slug>'\r\n                })\r\n                .then(function (data) {\r\n                    // perform success action here\r\n                },\r\n                 function (response, status, headers, config) {\r\n                     // perform error handling here\r\n                });\r\n     **/\r\n    CompanyClient.prototype.create = function (data) {\r\n        return this.apiClient.post(this.routeDefinition.create(), this.routeDefinition.createParams(data));\r\n    };\r\n    /**\r\n     * Returns a promise that is resolved once the update company action has been performed; this action updates a company resource. This route uses HAL enabled objects to obtain routes and therefore it doesn't apply `companyRoute` route template. Here is an example of how a route can be obtained from HAL enabled objects:\r\n     * ```\r\n     * let params = modelMapper.removeParams(company);\r\n     * let uri = params['model'].links('put').href;\r\n     * ```\r\n     * @method\r\n     * @param data A company object used to update specified company resource.\r\n     * @returns A promise that is resolved once the update company action has been performed.\r\n     * @example // company is a resource previously fetched using get action.\r\n                    company.description = '<description>';\r\n                    baasicCompanyService.update(company)\r\n                        .then(function (data) {\r\n                            // perform success action here\r\n                        },\r\n                         function (response, status, headers, config) {\r\n                             // perform error handling here\r\n                        });\r\n     **/\r\n    CompanyClient.prototype.update = function (data) {\r\n        return this.apiClient.put(this.routeDefinition.update(data), this.routeDefinition.updateParams(data));\r\n    };\r\n    /**\r\n     * Returns a promise that is resolved once the remove action has been performed. This action will remove a company resource from the system if successfully completed. This route uses HAL enabled objects to obtain routes and therefore it doesn't apply `companyRoute` route template. Here is an example of how a route can be obtained from HAL enabled objects:\r\n     * ```\r\n     * let params = modelMapper.removeParams(company);\r\n     * let uri = params['model'].links('delete').href;\r\n     * ```\r\n     * @method\r\n     * @param data A company object used to delete specified company resource.\r\n     * @returns A promise that is resolved once the remove action has been performed.\r\n     * @example // company is a resource previously fetched using get action.\r\n                    companyClient.remove(company)\r\n                        .then(function (data) {\r\n                            // perform success action here\r\n                        },\r\n                         function (response, status, headers, config) {\r\n                             // perform error handling here\r\n                    });\r\n     **/\r\n    CompanyClient.prototype.remove = function (data) {\r\n        return this.apiClient.delete(this.routeDefinition.delete(data));\r\n    };\r\n    return CompanyClient;\r\n}());\r\nCompanyClient = tslib_1.__decorate([\r\n    inversify_1.injectable(),\r\n    tslib_1.__param(0, inversify_1.inject(_1.TYPES.CompanyBatchClient)),\r\n    tslib_1.__param(1, inversify_1.inject(_1.TYPES.CompanyRoute)),\r\n    tslib_1.__param(2, inversify_1.inject(httpApi_1.httpTYPES.ApiClient)),\r\n    tslib_1.__metadata(\"design:paramtypes\", [typeof (_a = typeof _1.CompanyBatchClient !== \"undefined\" && _1.CompanyBatchClient) === \"function\" && _a || Object, typeof (_b = typeof _1.CompanyRoute !== \"undefined\" && _1.CompanyRoute) === \"function\" && _b || Object, typeof (_c = typeof httpApi_1.ApiClient !== \"undefined\" && httpApi_1.ApiClient) === \"function\" && _c || Object])\r\n], CompanyClient);\r\nexports.CompanyClient = CompanyClient;\r\nvar _a, _b, _c;\r\n/**\r\n * @overview\r\n ***Notes:**\r\n - Refer to the [REST API documentation](https://github.com/Baasic/baasic-rest-api/wiki) for detailed information about available Baasic REST API end-points.\r\n - All end-point objects are transformed by the associated route service.\r\n */ \r\n\n\n\n//////////////////\n// WEBPACK FOOTER\n// ./src/modules/userProfile/companyClient.ts\n// module id = 327\n// module chunks = 0","/* globals module */\r\n/**\r\n * @module companyRoute\r\n * @description Baasic Company Route Definition provides Baasic route templates which can be expanded to Baasic REST URIs. Various services can use Baasic Company Route Service to obtain needed routes while other routes will be obtained through HAL. By convention, all route services  use the same function names as their corresponding services.\r\n */\r\n\"use strict\";\r\nObject.defineProperty(exports, \"__esModule\", { value: true });\r\nvar tslib_1 = require(\"tslib\");\r\nvar inversify_1 = require(\"inversify\");\r\nvar common_1 = require(\"../../common\");\r\n;\r\nvar _1 = require(\"./\");\r\nvar contracts_1 = require(\"../../core/contracts\");\r\nvar CompanyRoute = (function (_super) {\r\n    tslib_1.__extends(CompanyRoute, _super);\r\n    function CompanyRoute(appOptions, companyBatchRoute) {\r\n        var _this = _super.call(this, appOptions) || this;\r\n        _this.appOptions = appOptions;\r\n        _this.companyBatchRoute = companyBatchRoute;\r\n        _this.findRoute = 'lookups/companies/{?searchQuery,page,rpp,sort,embed,fields}';\r\n        _this.createRoute = 'lookups/companies';\r\n        _this.getRoute = 'lookups/companies/{id}/{?embed,fields}';\r\n        _this.updateRoute = 'lookups/companies/{id}';\r\n        _this.deleteRoute = 'lookups/companies/{id}';\r\n        return _this;\r\n    }\r\n    Object.defineProperty(CompanyRoute.prototype, \"batch\", {\r\n        get: function () {\r\n            return this.companyBatchRoute;\r\n        },\r\n        enumerable: true,\r\n        configurable: true\r\n    });\r\n    /**\r\n     * Parses find route which can be expanded with additional options. Supported items are:\r\n     * - `searchQuery` - A string referencing company properties using the phrase or BQL (Baasic Query Language) search.\r\n     * - `page` - A value used to set the page number, i.e. to retrieve certain company subset from the storage.\r\n     * - `rpp` - A value used to limit the size of result set per page.\r\n     * - `sort` - A string used to set the company property to sort the result collection by.\r\n     * - `embed` - Comma separated list of resources to be contained within the current representation.\r\n     * @method\r\n     * @param options Query resource options object.\r\n     * @example companyRoute.find({searchQuery: '<search-phrase>'});\r\n     **/\r\n    CompanyRoute.prototype.find = function (options) {\r\n        return _super.prototype.baseFind.call(this, this.findRoute, options);\r\n    };\r\n    /**\r\n     * Parses create route; this URI template does not expose any additional options.\r\n     * @method\r\n     * @example companyRoute.create();\r\n     **/\r\n    CompanyRoute.prototype.create = function () {\r\n        return _super.prototype.baseCreate.call(this, this.createRoute, {});\r\n    };\r\n    /**\r\n     * Parses get route; this route doesn't expose any properties.\r\n     * @method\r\n     * @param id Company id which uniquely identifies resource that needs to be retrieved.\r\n     * @param options Query resource options object.\r\n     * @example companyRoute.get();\r\n     **/\r\n    CompanyRoute.prototype.get = function (id, options) {\r\n        return _super.prototype.baseGet.call(this, this.getRoute, id, options);\r\n    };\r\n    CompanyRoute.prototype.update = function (data) {\r\n        return _super.prototype.baseUpdate.call(this, this.updateRoute, data);\r\n    };\r\n    CompanyRoute.prototype.delete = function (data) {\r\n        return _super.prototype.baseDelete.call(this, this.deleteRoute, data);\r\n    };\r\n    return CompanyRoute;\r\n}(common_1.BaseRoute));\r\nCompanyRoute = tslib_1.__decorate([\r\n    tslib_1.__param(0, inversify_1.inject(contracts_1.TYPES.IAppOptions)),\r\n    tslib_1.__param(1, inversify_1.inject(_1.TYPES.CompanyBatchRoute)),\r\n    tslib_1.__metadata(\"design:paramtypes\", [typeof (_a = typeof contracts_1.IAppOptions !== \"undefined\" && contracts_1.IAppOptions) === \"function\" && _a || Object, typeof (_b = typeof _1.CompanyBatchRoute !== \"undefined\" && _1.CompanyBatchRoute) === \"function\" && _b || Object])\r\n], CompanyRoute);\r\nexports.CompanyRoute = CompanyRoute;\r\nvar _a, _b;\r\n/**\r\n * @overview\r\n ***Notes:**\r\n - Refer to the [REST API documentation](https://github.com/Baasic/baasic-rest-api/wiki) for detailed information about available Baasic REST API end-points.\r\n - [URI Template](https://github.com/Baasic/uritemplate-js) syntax enables expanding the Baasic route templates to Baasic REST URIs providing it with an object that contains URI parameters.\r\n - All end-point objects are transformed by the associated route service.\r\n */ \r\n\n\n\n//////////////////\n// WEBPACK FOOTER\n// ./src/modules/userProfile/companyRoute.ts\n// module id = 328\n// module chunks = 0","\"use strict\";\r\nObject.defineProperty(exports, \"__esModule\", { value: true });\r\nvar inversify_1 = require(\"inversify\");\r\nvar _1 = require(\"./\");\r\nvar TYPES = {\r\n    CompanyBatchClient: Symbol(\"CompanyBatchClient\"),\r\n    CompanyBatchRoute: Symbol(\"CompanyBatchRoute\"),\r\n    CompanyClient: Symbol(\"CompanyClient\"),\r\n    CompanyRoute: Symbol(\"CompanyRoute\"),\r\n    OrganizationBatchClient: Symbol(\"OrganizationBatchClient\"),\r\n    OrganizationBatchRoute: Symbol(\"OrganizationBatchRoute\"),\r\n    OrganizationClient: Symbol(\"OrganizationClient\"),\r\n    OrganizationRoute: Symbol(\"OrganizationRoute\"),\r\n    SkillBatchClient: Symbol(\"SkillBatchClient\"),\r\n    SkillBatchRoute: Symbol(\"SkillBatchRoute\"),\r\n    SkillClient: Symbol(\"SkillClient\"),\r\n    SkillRoute: Symbol(\"SkillRoute\"),\r\n    UserEducationClient: Symbol(\"UserEducationClient\"),\r\n    UserEducationRoute: Symbol(\"UserEducationRoute\"),\r\n    UserProfileACLClient: Symbol(\"UserProfileACLClient\"),\r\n    UserProfileACLRoute: Symbol(\"UserProfileACLRoute\"),\r\n    UserProfileAvatarClient: Symbol(\"UserProfileAvatarClient\"),\r\n    UserProfileAvatarRoute: Symbol(\"UserProfileAvatarRoute\"),\r\n    UserProfileAvatarStreamsClient: Symbol(\"UserProfileAvatarStreamsClient\"),\r\n    UserProfileAvatarStreamsRoute: Symbol(\"UserProfileAvatarStreamsClient\"),\r\n    UserProfileClient: Symbol(\"UserProfileClient\"),\r\n    UserProfileRoute: Symbol(\"UserProfileRoute\"),\r\n    UserSkillClient: Symbol(\"UserSkillClient\"),\r\n    UserSkillRoute: Symbol(\"UserSkillRoute\"),\r\n    UserWorkClient: Symbol(\"UserWorkClient\"),\r\n    UserWorkRoute: Symbol(\"UserWorkRoute\"),\r\n    Root: Symbol(\"UserProfile-Root\")\r\n};\r\nexports.TYPES = TYPES;\r\nvar diModule = new inversify_1.ContainerModule(function (bind) {\r\n    bind(TYPES.CompanyBatchRoute).to(_1.CompanyBatchRoute);\r\n    bind(TYPES.CompanyBatchClient).to(_1.CompanyBatchClient);\r\n    bind(TYPES.CompanyRoute).to(_1.CompanyRoute);\r\n    bind(TYPES.CompanyClient).to(_1.CompanyClient);\r\n    bind(TYPES.OrganizationBatchRoute).to(_1.OrganizationBatchRoute);\r\n    bind(TYPES.OrganizationBatchClient).to(_1.OrganizationBatchClient);\r\n    bind(TYPES.OrganizationRoute).to(_1.OrganizationRoute);\r\n    bind(TYPES.OrganizationClient).to(_1.OrganizationClient);\r\n    bind(TYPES.SkillBatchRoute).to(_1.SkillBatchRoute);\r\n    bind(TYPES.SkillBatchClient).to(_1.SkillBatchClient);\r\n    bind(TYPES.SkillRoute).to(_1.SkillRoute);\r\n    bind(TYPES.SkillClient).to(_1.SkillClient);\r\n    bind(TYPES.UserEducationRoute).to(_1.UserEducationRoute);\r\n    bind(TYPES.UserEducationClient).to(_1.UserEducationClient);\r\n    bind(TYPES.UserProfileACLRoute).to(_1.UserProfileACLRoute);\r\n    bind(TYPES.UserProfileACLClient).to(_1.UserProfileACLClient);\r\n    bind(TYPES.UserProfileAvatarStreamsRoute).to(_1.UserProfileAvatarStreamsRoute);\r\n    bind(TYPES.UserProfileAvatarStreamsClient).to(_1.UserProfileAvatarStreamsClient);\r\n    bind(TYPES.UserProfileAvatarRoute).to(_1.UserProfileAvatarRoute);\r\n    bind(TYPES.UserProfileAvatarClient).to(_1.UserProfileAvatarClient);\r\n    bind(TYPES.UserProfileRoute).to(_1.UserProfileRoute);\r\n    bind(TYPES.UserProfileClient).to(_1.UserProfileClient);\r\n    bind(TYPES.UserSkillRoute).to(_1.UserSkillRoute);\r\n    bind(TYPES.UserSkillClient).to(_1.UserSkillClient);\r\n    bind(TYPES.UserWorkRoute).to(_1.UserWorkRoute);\r\n    bind(TYPES.UserWorkClient).to(_1.UserWorkClient);\r\n    bind(TYPES.Root).to(_1.Root);\r\n});\r\nexports.diModule = diModule;\r\n\n\n\n//////////////////\n// WEBPACK FOOTER\n// ./src/modules/userProfile/diModule.ts\n// module id = 329\n// module chunks = 0","/* globals module */\r\n/**\r\n * @module organizationBatchClient\r\n * @description  Organization Batch Client provides Baasic route templates which can be expanded to Baasic REST URIs. Various services can use Baasic Organization Batch Route Definition to obtain needed routes while other routes will be obtained through HAL. By convention, all route services use the same function names as their corresponding services.\r\n */\r\n\"use strict\";\r\nObject.defineProperty(exports, \"__esModule\", { value: true });\r\nvar tslib_1 = require(\"tslib\");\r\nvar inversify_1 = require(\"inversify\");\r\nvar httpApi_1 = require(\"../../httpApi\");\r\nvar _1 = require(\"./\");\r\nvar OrganizationBatchClient = (function () {\r\n    function OrganizationBatchClient(organizationBatchRoute, apiClient) {\r\n        this.organizationBatchRoute = organizationBatchRoute;\r\n        this.apiClient = apiClient;\r\n    }\r\n    Object.defineProperty(OrganizationBatchClient.prototype, \"routeDefinition\", {\r\n        get: function () {\r\n            return this.organizationBatchRoute;\r\n        },\r\n        enumerable: true,\r\n        configurable: true\r\n    });\r\n    /**\r\n     * Returns a promise that is resolved once the create organization action has been performed; this action creates new organization resources.\r\n     * @method\r\n     * @param data A collection of organization objects that need to be inserted into the system.\r\n     * @returns A promise that is resolved once the create organization action has been performed.\r\n     * @example   organizationBatchClient.create([{\r\n                    description : '<description>',\r\n                    name : '<name>',\r\n                    slug: '<slug>'\r\n                  }])\r\n                  .then(function (data) {\r\n                      // perform success action here\r\n                   },\r\n                    function (response, status, headers, config) {\r\n                        // perform error handling here\r\n                   });\r\n     **/\r\n    OrganizationBatchClient.prototype.create = function (data) {\r\n        return this.apiClient.post(this.routeDefinition.create(), this.routeDefinition.createParams(data));\r\n    };\r\n    /**\r\n     * Returns a promise that is resolved once the update organization action has been performed; this action updates specified organization resources.\r\n     * @method\r\n     * @param data A collection of organization objects used to update specified organization resources.\r\n     * @returns A promise that is resolved once the update organization action has been performed.\r\n     * @example   organizationBatchClient.update(organizations)\r\n                    .then(function (data) {\r\n                        // perform success action here\r\n                    },\r\n                     function (response, status, headers, config) {\r\n                         // perform error handling here\r\n                    });\r\n     **/\r\n    OrganizationBatchClient.prototype.update = function (data) {\r\n        return this.apiClient.put(this.routeDefinition.update(), this.routeDefinition.updateParams(data));\r\n    };\r\n    /**\r\n     * Returns a promise that is resolved once the remove action has been performed. This action will remove organization resources from the system if successfully completed.\r\n     * @method\r\n     * @example organizationBatchClient.remove(organizationIds)\r\n                    .then(function (data) {\r\n                        // perform success action here\r\n                    },\r\n                     function (response, status, headers, config) {\r\n                         // perform error handling here\r\n                    });\r\n     **/\r\n    OrganizationBatchClient.prototype.remove = function (ids) {\r\n        return this.apiClient.delete(this.organizationBatchRoute.delete(), undefined, ids);\r\n    };\r\n    return OrganizationBatchClient;\r\n}());\r\nOrganizationBatchClient = tslib_1.__decorate([\r\n    inversify_1.injectable(),\r\n    tslib_1.__param(0, inversify_1.inject(_1.TYPES.OrganizationBatchRoute)),\r\n    tslib_1.__param(1, inversify_1.inject(httpApi_1.httpTYPES.ApiClient)),\r\n    tslib_1.__metadata(\"design:paramtypes\", [typeof (_a = typeof _1.OrganizationBatchRoute !== \"undefined\" && _1.OrganizationBatchRoute) === \"function\" && _a || Object, typeof (_b = typeof httpApi_1.ApiClient !== \"undefined\" && httpApi_1.ApiClient) === \"function\" && _b || Object])\r\n], OrganizationBatchClient);\r\nexports.OrganizationBatchClient = OrganizationBatchClient;\r\nvar _a, _b;\r\n/**\r\n * @overview\r\n ***Notes:**\r\n - Refer to the [REST API documentation](https://github.com/Baasic/baasic-rest-api/wiki) for detailed information about available Baasic REST API end-points.\r\n - All end-point objects are transformed by the associated route service.\r\n */ \r\n\n\n\n//////////////////\n// WEBPACK FOOTER\n// ./src/modules/userProfile/organizationBatchClient.ts\n// module id = 330\n// module chunks = 0","/* globals module */\r\n/**\r\n * @module organizationBatchRoute\r\n * @description Baasic Organization Batch Route Definition provides Baasic route templates which can be expanded to Baasic REST URIs. Various services can use Baasic Organization Route Service to obtain needed routes while other routes will be obtained through HAL. By convention, all route services  use the same function names as their corresponding services.\r\n */\r\n\"use strict\";\r\nObject.defineProperty(exports, \"__esModule\", { value: true });\r\nvar tslib_1 = require(\"tslib\");\r\nvar inversify_1 = require(\"inversify\");\r\nvar common_1 = require(\"../../common\");\r\nvar contracts_1 = require(\"../../core/contracts\");\r\nvar OrganizationBatchRoute = (function (_super) {\r\n    tslib_1.__extends(OrganizationBatchRoute, _super);\r\n    function OrganizationBatchRoute(appOptions) {\r\n        var _this = _super.call(this, appOptions) || this;\r\n        _this.appOptions = appOptions;\r\n        _this.createRoute = 'lookups/organizations/batch';\r\n        _this.updateRoute = 'lookups/organizations/batch';\r\n        _this.deleteRoute = 'lookups/organizations/batch';\r\n        return _this;\r\n    }\r\n    /**\r\n     * Parses create route; this URI template does not expose any additional options.\r\n     * @method\r\n     * @example organizationBatchRoute.create();\r\n     **/\r\n    OrganizationBatchRoute.prototype.create = function () {\r\n        return _super.prototype.baseCreate.call(this, this.createRoute, {});\r\n    };\r\n    /**\r\n     * Parses update route; this URI template does not expose any additional options.\r\n     * @method\r\n     * @example organizationBatchRoute.update();\r\n     **/\r\n    OrganizationBatchRoute.prototype.update = function () {\r\n        return _super.prototype.baseUpdate.call(this, this.updateRoute, {});\r\n    };\r\n    /**\r\n     * Parses remove route; this URI template does not expose any additional options.\r\n     * @method\r\n     * @example organizationBatchRoute.delete();\r\n     **/\r\n    OrganizationBatchRoute.prototype.delete = function () {\r\n        return _super.prototype.baseDelete.call(this, this.deleteRoute, {});\r\n    };\r\n    return OrganizationBatchRoute;\r\n}(common_1.BaseRoute));\r\nOrganizationBatchRoute = tslib_1.__decorate([\r\n    tslib_1.__param(0, inversify_1.inject(contracts_1.TYPES.IAppOptions)),\r\n    tslib_1.__metadata(\"design:paramtypes\", [typeof (_a = typeof contracts_1.IAppOptions !== \"undefined\" && contracts_1.IAppOptions) === \"function\" && _a || Object])\r\n], OrganizationBatchRoute);\r\nexports.OrganizationBatchRoute = OrganizationBatchRoute;\r\nvar _a;\r\n/**\r\n * @overview\r\n ***Notes:**\r\n - Refer to the [REST API documentation](https://github.com/Baasic/baasic-rest-api/wiki) for detailed information about available Baasic REST API end-points.\r\n - [URI Template](https://github.com/Baasic/uritemplate-js) syntax enables expanding the Baasic route templates to Baasic REST URIs providing it with an object that contains URI parameters.\r\n - All end-point objects are transformed by the associated route service.\r\n */ \r\n\n\n\n//////////////////\n// WEBPACK FOOTER\n// ./src/modules/userProfile/organizationBatchRoute.ts\n// module id = 331\n// module chunks = 0","/* globals module */\r\n/**\r\n * @module organizationClient\r\n * @description  Organization Client provides Baasic route templates which can be expanded to Baasic REST URIs. Various services can use Baasic Organization Route Service to obtain needed routes while other routes will be obtained through HAL. By convention, all route services use the same function names as their corresponding services.\r\n */\r\n\"use strict\";\r\nObject.defineProperty(exports, \"__esModule\", { value: true });\r\nvar tslib_1 = require(\"tslib\");\r\nvar inversify_1 = require(\"inversify\");\r\n;\r\nvar httpApi_1 = require(\"../../httpApi\");\r\nvar _1 = require(\"./\");\r\nvar OrganizationClient = (function () {\r\n    function OrganizationClient(organizationRoute, organizationBatchClient, apiClient) {\r\n        this.organizationRoute = organizationRoute;\r\n        this.organizationBatchClient = organizationBatchClient;\r\n        this.apiClient = apiClient;\r\n    }\r\n    Object.defineProperty(OrganizationClient.prototype, \"routeDefinition\", {\r\n        get: function () {\r\n            return this.organizationRoute;\r\n        },\r\n        enumerable: true,\r\n        configurable: true\r\n    });\r\n    Object.defineProperty(OrganizationClient.prototype, \"batch\", {\r\n        get: function () {\r\n            return this.organizationBatchClient;\r\n        },\r\n        enumerable: true,\r\n        configurable: true\r\n    });\r\n    /**\r\n     * Returns a promise that is resolved once the find action has been performed. Success response returns a list of organization resources matching the given criteria.\r\n     * @method\r\n     * @param options Query resource options object.\r\n     * @returns A promise that is resolved once the find action has been performed.\r\n     * @example organizationClient.find({\r\n                    pageNumber : 1,\r\n                    pageSize : 10,\r\n                    orderBy : '<field>',\r\n                    orderDirection : '<asc|desc>',\r\n                    search : '<search-phrase>'\r\n                })\r\n                .then(function (collection) {\r\n                    // perform success action here\r\n                },\r\n                 function (response, status, headers, config) {\r\n                     // perform error handling here\r\n                });\r\n     **/\r\n    OrganizationClient.prototype.find = function (options) {\r\n        return this.apiClient.get(this.routeDefinition.find(options));\r\n    };\r\n    /**\r\n     * Returns a promise that is resolved once the get action has been performed. Success response returns the organization resource.\r\n     * @method\r\n     * @param id Organization id which uniquely identifies resource that needs to be retrieved.\r\n     * @param options Query resource options object.\r\n     * @returns A promise that is resolved once the get action has been performed.\r\n     * @example organizationClient.get(id, options)\r\n                    .then(function (data) {\r\n                        // perform success action here\r\n                    },\r\n                     function (response, status, headers, config) {\r\n                         // perform error handling here\r\n                    });\r\n     **/\r\n    OrganizationClient.prototype.get = function (id, options) {\r\n        return this.apiClient.get(this.organizationRoute.get(id, options));\r\n    };\r\n    /**\r\n     * Returns a promise that is resolved once the create organization action has been performed; this action creates a new organization resource.\r\n     * @method\r\n     * @param data An organization object that needs to be inserted into the system.\r\n     * @returns A promise that is resolved once the create organization action has been performed.\r\n     * @example organizationClient.create({\r\n                    description : '<description>',\r\n                    name : '<name>',\r\n                    slug: '<slug>'\r\n                })\r\n                .then(function (data) {\r\n                    // perform success action here\r\n                },\r\n                 function (response, status, headers, config) {\r\n                     // perform error handling here\r\n                });\r\n     **/\r\n    OrganizationClient.prototype.create = function (data) {\r\n        return this.apiClient.post(this.routeDefinition.create(), this.routeDefinition.createParams(data));\r\n    };\r\n    /**\r\n     * Returns a promise that is resolved once the update organization action has been performed; this action updates an organization resource. This route uses HAL enabled objects to obtain routes and therefore it doesn't apply `organizationRoute` route template. Here is an example of how a route can be obtained from HAL enabled objects:\r\n     * ```\r\n     * let params = modelMapper.removeParams(organization);\r\n     * let uri = params['model'].links('put').href;\r\n     * ```\r\n     * @method\r\n     * @param data An organization object used to update specified organization resource.\r\n     * @returns A promise that is resolved once the update organization action has been performed.\r\n     * @example // organization is a resource previously fetched using get action.\r\n                    organization.description = '<description>';\r\n                    organizationClient.update(organization)\r\n                        .then(function (data) {\r\n                            // perform success action here\r\n                        },\r\n                         function (response, status, headers, config) {\r\n                             // perform error handling here\r\n                        });\r\n     **/\r\n    OrganizationClient.prototype.update = function (data) {\r\n        return this.apiClient.put(this.routeDefinition.update(data), this.routeDefinition.updateParams(data));\r\n    };\r\n    /**\r\n     * Returns a promise that is resolved once the remove action has been performed. This action will remove an organization resource from the system if successfully completed. This route uses HAL enabled objects to obtain routes and therefore it doesn't apply `organizationRoute` route template. Here is an example of how a route can be obtained from HAL enabled objects:\r\n     * ```\r\n     * let params = modelMapper.removeParams(organization);\r\n     * let uri = params['model'].links('delete').href;\r\n     * ```\r\n     * @method\r\n     * @param data An organization object used to delete specified organization resource.\r\n     * @returns A promise that is resolved once the remove action has been performed.\r\n     * @example // organization is a resource previously fetched using get action.\r\n                       organizationClient.remove(organization)\r\n                           .then(function (data) {\r\n                               // perform success action here\r\n                           },\r\n                            function (response, status, headers, config) {\r\n                                // perform error handling here\r\n                           });\r\n    **/\r\n    OrganizationClient.prototype.remove = function (data) {\r\n        return this.apiClient.delete(this.routeDefinition.delete(data));\r\n    };\r\n    return OrganizationClient;\r\n}());\r\nOrganizationClient = tslib_1.__decorate([\r\n    inversify_1.injectable(),\r\n    tslib_1.__param(0, inversify_1.inject(_1.TYPES.OrganizationRoute)),\r\n    tslib_1.__param(1, inversify_1.inject(_1.TYPES.OrganizationBatchClient)),\r\n    tslib_1.__param(2, inversify_1.inject(httpApi_1.httpTYPES.ApiClient)),\r\n    tslib_1.__metadata(\"design:paramtypes\", [typeof (_a = typeof _1.OrganizationRoute !== \"undefined\" && _1.OrganizationRoute) === \"function\" && _a || Object, typeof (_b = typeof _1.OrganizationBatchClient !== \"undefined\" && _1.OrganizationBatchClient) === \"function\" && _b || Object, typeof (_c = typeof httpApi_1.ApiClient !== \"undefined\" && httpApi_1.ApiClient) === \"function\" && _c || Object])\r\n], OrganizationClient);\r\nexports.OrganizationClient = OrganizationClient;\r\nvar _a, _b, _c;\r\n\n\n\n//////////////////\n// WEBPACK FOOTER\n// ./src/modules/userProfile/organizationClient.ts\n// module id = 332\n// module chunks = 0","/* globals module */\r\n/**\r\n * @module organizationRoute\r\n * @description Baasic Organization Route Definition provides Baasic route templates which can be expanded to Baasic REST URIs. Various services can use Baasic Organization Route Service to obtain needed routes while other routes will be obtained through HAL. By convention, all route services  use the same function names as their corresponding services.\r\n */\r\n\"use strict\";\r\nObject.defineProperty(exports, \"__esModule\", { value: true });\r\nvar tslib_1 = require(\"tslib\");\r\nvar inversify_1 = require(\"inversify\");\r\nvar common_1 = require(\"../../common\");\r\n;\r\nvar _1 = require(\"./\");\r\nvar contracts_1 = require(\"../../core/contracts\");\r\nvar OrganizationRoute = (function (_super) {\r\n    tslib_1.__extends(OrganizationRoute, _super);\r\n    function OrganizationRoute(appOptions, organizationBatchRoute) {\r\n        var _this = _super.call(this, appOptions) || this;\r\n        _this.appOptions = appOptions;\r\n        _this.organizationBatchRoute = organizationBatchRoute;\r\n        _this.findRoute = 'lookups/organizations/{?searchQuery,page,rpp,sort,embed,fields}';\r\n        _this.getRoute = 'lookups/organizations/{id}/{?embed,fields}';\r\n        _this.createRoute = 'lookups/organizations';\r\n        _this.updateRoute = 'lookups/organizations/{id}';\r\n        _this.deleteRoute = 'lookups/organizations/{id}';\r\n        return _this;\r\n    }\r\n    Object.defineProperty(OrganizationRoute.prototype, \"batch\", {\r\n        get: function () {\r\n            return this.organizationBatchRoute;\r\n        },\r\n        enumerable: true,\r\n        configurable: true\r\n    });\r\n    /**\r\n     * Parses find route which can be expanded with additional options. Supported items are:\r\n     * - `searchQuery` - A string referencing organization properties using the phrase or BQL (Baasic Query Language) search.\r\n     * - `page` - A value used to set the page number, i.e. to retrieve certain organization subset from the storage.\r\n     * - `rpp` - A value used to limit the size of result set per page.\r\n     * - `sort` - A string used to set the organization property to sort the result collection by.\r\n     * - `embed` - Comma separated list of resources to be contained within the current representation.\r\n     * @method\r\n     * @param options Query resource options object.\r\n     * @example organizationRoute.find({searchQuery: '<search-phrase>'});\r\n     **/\r\n    OrganizationRoute.prototype.find = function (options) {\r\n        return _super.prototype.baseFind.call(this, this.findRoute, options);\r\n    };\r\n    /**\r\n     * Parses get route; this route doesn't expose any properties.\r\n     * @method\r\n     * @param id Organization id which uniquely identifies resource that needs to be retrieved.\r\n     * @param options Query resource options object.\r\n     * @example organizationRoute.get(id, options);\r\n     **/\r\n    OrganizationRoute.prototype.get = function (id, options) {\r\n        return _super.prototype.baseGet.call(this, this.getRoute, id, options);\r\n    };\r\n    /**\r\n     * Parses create route; this URI template does not expose any additional options.\r\n     * @method\r\n     * @example organizationRoute.create();\r\n     **/\r\n    OrganizationRoute.prototype.create = function () {\r\n        return _super.prototype.baseCreate.call(this, this.createRoute, {});\r\n    };\r\n    /**\r\n     * Parses update route; this URI template does not expose any additional options.\r\n     * @method\r\n     * @param data An organization object used to update specified organization resource.\r\n     * @example organizationRoute.updata(data);\r\n     **/\r\n    OrganizationRoute.prototype.update = function (data) {\r\n        return _super.prototype.baseUpdate.call(this, this.updateRoute, data);\r\n    };\r\n    /**\r\n     * Parses delete route; this URI template does not expose any additional options.\r\n     * @method\r\n     * @param data An organization object used to delete specified organization resource.\r\n     * @example organizationRoute.delete(data);\r\n     **/\r\n    OrganizationRoute.prototype.delete = function (data) {\r\n        return _super.prototype.baseDelete.call(this, this.deleteRoute, data);\r\n    };\r\n    return OrganizationRoute;\r\n}(common_1.BaseRoute));\r\nOrganizationRoute = tslib_1.__decorate([\r\n    tslib_1.__param(0, inversify_1.inject(contracts_1.TYPES.IAppOptions)),\r\n    tslib_1.__param(1, inversify_1.inject(_1.TYPES.OrganizationBatchRoute)),\r\n    tslib_1.__metadata(\"design:paramtypes\", [typeof (_a = typeof contracts_1.IAppOptions !== \"undefined\" && contracts_1.IAppOptions) === \"function\" && _a || Object, typeof (_b = typeof _1.OrganizationBatchRoute !== \"undefined\" && _1.OrganizationBatchRoute) === \"function\" && _b || Object])\r\n], OrganizationRoute);\r\nexports.OrganizationRoute = OrganizationRoute;\r\nvar _a, _b;\r\n/**\r\n * @overview\r\n ***Notes:**\r\n - Refer to the [REST API documentation](https://github.com/Baasic/baasic-rest-api/wiki) for detailed information about available Baasic REST API end-points.\r\n - [URI Template](https://github.com/Baasic/uritemplate-js) syntax enables expanding the Baasic route templates to Baasic REST URIs providing it with an object that contains URI parameters.\r\n - All end-point objects are transformed by the associated route service.\r\n */ \r\n\n\n\n//////////////////\n// WEBPACK FOOTER\n// ./src/modules/userProfile/organizationRoute.ts\n// module id = 333\n// module chunks = 0","\"use strict\";\r\nObject.defineProperty(exports, \"__esModule\", { value: true });\r\nvar tslib_1 = require(\"tslib\");\r\nvar _1 = require(\"./\");\r\nvar inversify_1 = require(\"inversify\");\r\nvar Root = (function () {\r\n    function Root(profile, company, organization, skill) {\r\n        this.profile = profile;\r\n        this.company = company;\r\n        this.organization = organization;\r\n        this.skill = skill;\r\n    }\r\n    return Root;\r\n}());\r\nRoot = tslib_1.__decorate([\r\n    inversify_1.injectable(),\r\n    tslib_1.__param(0, inversify_1.inject(_1.TYPES.UserProfileClient)),\r\n    tslib_1.__param(1, inversify_1.inject(_1.TYPES.CompanyClient)),\r\n    tslib_1.__param(2, inversify_1.inject(_1.TYPES.OrganizationClient)),\r\n    tslib_1.__param(3, inversify_1.inject(_1.TYPES.SkillClient)),\r\n    tslib_1.__metadata(\"design:paramtypes\", [typeof (_a = typeof _1.UserProfileClient !== \"undefined\" && _1.UserProfileClient) === \"function\" && _a || Object, typeof (_b = typeof _1.CompanyClient !== \"undefined\" && _1.CompanyClient) === \"function\" && _b || Object, typeof (_c = typeof _1.OrganizationClient !== \"undefined\" && _1.OrganizationClient) === \"function\" && _c || Object, typeof (_d = typeof _1.SkillClient !== \"undefined\" && _1.SkillClient) === \"function\" && _d || Object])\r\n], Root);\r\nexports.Root = Root;\r\nvar _a, _b, _c, _d;\r\n\n\n\n//////////////////\n// WEBPACK FOOTER\n// ./src/modules/userProfile/root.ts\n// module id = 334\n// module chunks = 0","/* globals module */\r\n/**\r\n * @module skillBatchClient\r\n * @description Baasic Skill Batch Service provides Baasic route templates which can be expanded to Baasic REST URIs. Various services can use Baasic Skill Route Service to obtain needed routes while other routes will be obtained through HAL. By convention, all route services use the same function names as their corresponding services.\r\n */\r\n\"use strict\";\r\nObject.defineProperty(exports, \"__esModule\", { value: true });\r\nvar tslib_1 = require(\"tslib\");\r\nvar inversify_1 = require(\"inversify\");\r\nvar httpApi_1 = require(\"../../httpApi\");\r\nvar _1 = require(\"./\");\r\nvar SkillBatchClient = (function () {\r\n    function SkillBatchClient(skillBatchRoute, apiClient) {\r\n        this.skillBatchRoute = skillBatchRoute;\r\n        this.apiClient = apiClient;\r\n    }\r\n    Object.defineProperty(SkillBatchClient.prototype, \"routeDefinition\", {\r\n        get: function () {\r\n            return this.skillBatchRoute;\r\n        },\r\n        enumerable: true,\r\n        configurable: true\r\n    });\r\n    /**\r\n     * Returns a promise that is resolved once the create skill action has been performed; this action creates new skill resources.\r\n     * @method\r\n     * @param data A collection of skill objects that need to be inserted into the system.\r\n     * @returns A promise that is resolved once the create skill action has been performed.\r\n     * @example   skillClient.create([{\r\n                    description : '<description>',\r\n                    name : '<name>',\r\n                    slug: '<slug>'\r\n                  }])\r\n                  .then(function (data) {\r\n                      // perform success action here\r\n                  },\r\n                    function (response, status, headers, config) {\r\n                        // perform error handling here\r\n                  });\r\n     **/\r\n    SkillBatchClient.prototype.create = function (data) {\r\n        return this.apiClient.post(this.routeDefinition.create(), this.routeDefinition.createParams(data));\r\n    };\r\n    /**\r\n     * Returns a promise that is resolved once the update skill action has been performed; this action updates specified skill resources.\r\n     * @method\r\n     * @param data A collection of skill objects used to update specified skill resources.\r\n     * @returns A promise that is resolved once the update skill action has been performed.\r\n     * @example   skillBatchClient.update(companies)\r\n                    .then(function (data) {\r\n                        // perform success action here\r\n                    },\r\n                     function (response, status, headers, config) {\r\n                         // perform error handling here\r\n                    });\r\n     **/\r\n    SkillBatchClient.prototype.update = function (data) {\r\n        return this.apiClient.put(this.routeDefinition.update(), this.routeDefinition.updateParams(data));\r\n    };\r\n    /**\r\n     * Returns a promise that is resolved once the remove action has been performed. This action will remove skill resources from the system if successfully completed.\r\n     * @method\r\n     * @param ids Collection of skill ids which uniquely identifies skill resources that need to be deleted.\r\n     * @returns A promise that is resolved once the remove action has been performed.\r\n     * @example skillBatchClient.remove(skillIds)\r\n                    .then(function (data) {\r\n                        // perform success action here\r\n                    },\r\n                     function (response, status, headers, config) {\r\n                         // perform error handling here\r\n                    });\r\n     **/\r\n    SkillBatchClient.prototype.remove = function (ids) {\r\n        return this.apiClient.delete(this.skillBatchRoute.delete(), undefined, ids);\r\n    };\r\n    return SkillBatchClient;\r\n}());\r\nSkillBatchClient = tslib_1.__decorate([\r\n    inversify_1.injectable(),\r\n    tslib_1.__param(0, inversify_1.inject(_1.TYPES.SkillBatchRoute)),\r\n    tslib_1.__param(1, inversify_1.inject(httpApi_1.httpTYPES.ApiClient)),\r\n    tslib_1.__metadata(\"design:paramtypes\", [typeof (_a = typeof _1.SkillBatchRoute !== \"undefined\" && _1.SkillBatchRoute) === \"function\" && _a || Object, typeof (_b = typeof httpApi_1.ApiClient !== \"undefined\" && httpApi_1.ApiClient) === \"function\" && _b || Object])\r\n], SkillBatchClient);\r\nexports.SkillBatchClient = SkillBatchClient;\r\nvar _a, _b;\r\n/**\r\n * @overview\r\n ***Notes:**\r\n - Refer to the [REST API documentation](https://github.com/Baasic/baasic-rest-api/wiki) for detailed information about available Baasic REST API end-points.\r\n - All end-point objects are transformed by the associated route service.\r\n */ \r\n\n\n\n//////////////////\n// WEBPACK FOOTER\n// ./src/modules/userProfile/skillBatchClient.ts\n// module id = 335\n// module chunks = 0","/* globals module */\r\n/**\r\n * @module skillBatchRoute\r\n * @description Baasic Skill Batch Route Definition provides Baasic route templates which can be expanded to Baasic REST URIs. Various services can use Baasic Skill Route Service to obtain needed routes while other routes will be obtained through HAL. By convention, all route services  use the same function names as their corresponding services.\r\n */\r\n\"use strict\";\r\nObject.defineProperty(exports, \"__esModule\", { value: true });\r\nvar tslib_1 = require(\"tslib\");\r\nvar inversify_1 = require(\"inversify\");\r\nvar common_1 = require(\"../../common\");\r\nvar contracts_1 = require(\"../../core/contracts\");\r\nvar SkillBatchRoute = (function (_super) {\r\n    tslib_1.__extends(SkillBatchRoute, _super);\r\n    function SkillBatchRoute(appOptions) {\r\n        var _this = _super.call(this, appOptions) || this;\r\n        _this.appOptions = appOptions;\r\n        _this.createRoute = 'profile/lookups/skills/batch';\r\n        _this.updateRoute = 'profile/lookups/skills/batch';\r\n        _this.deleteRoute = 'profile/lookups/skills/batch';\r\n        return _this;\r\n    }\r\n    /**\r\n     * Parses create route; this URI template does not expose any additional options.\r\n     * @method\r\n     * @example skillBatchRoute.create();\r\n     **/\r\n    SkillBatchRoute.prototype.create = function () {\r\n        return _super.prototype.baseCreate.call(this, this.createRoute, {});\r\n    };\r\n    /**\r\n      * Parses update route; this URI template does not expose any additional options.\r\n      * @method\r\n      * @example skillBatchRoute.update();\r\n      **/\r\n    SkillBatchRoute.prototype.update = function () {\r\n        return _super.prototype.baseUpdate.call(this, this.updateRoute, {});\r\n    };\r\n    /**\r\n      * Parses delete route; this URI template does not expose any additional options.\r\n      * @method\r\n      * @example skillBatchRoute.delete();\r\n      **/\r\n    SkillBatchRoute.prototype.delete = function () {\r\n        return _super.prototype.baseDelete.call(this, this.deleteRoute, {});\r\n    };\r\n    return SkillBatchRoute;\r\n}(common_1.BaseRoute));\r\nSkillBatchRoute = tslib_1.__decorate([\r\n    tslib_1.__param(0, inversify_1.inject(contracts_1.TYPES.IAppOptions)),\r\n    tslib_1.__metadata(\"design:paramtypes\", [typeof (_a = typeof contracts_1.IAppOptions !== \"undefined\" && contracts_1.IAppOptions) === \"function\" && _a || Object])\r\n], SkillBatchRoute);\r\nexports.SkillBatchRoute = SkillBatchRoute;\r\nvar _a;\r\n/**\r\n * @overview\r\n ***Notes:**\r\n - Refer to the [REST API documentation](https://github.com/Baasic/baasic-rest-api/wiki) for detailed information about available Baasic REST API end-points.\r\n - [URI Template](https://github.com/Baasic/uritemplate-js) syntax enables expanding the Baasic route templates to Baasic REST URIs providing it with an object that contains URI parameters.\r\n - All end-point objects are transformed by the associated route service.\r\n */ \r\n\n\n\n//////////////////\n// WEBPACK FOOTER\n// ./src/modules/userProfile/skillBatchRoute.ts\n// module id = 336\n// module chunks = 0","/* globals module */\r\n/**\r\n * @module skillClient\r\n * @description  Skill Client provides Baasic route templates which can be expanded to Baasic REST URIs. Various services can use Baasic Skill Route Service to obtain needed routes while other routes will be obtained through HAL. By convention, all route services use the same function names as their corresponding services.\r\n */\r\n\"use strict\";\r\nObject.defineProperty(exports, \"__esModule\", { value: true });\r\nvar tslib_1 = require(\"tslib\");\r\nvar inversify_1 = require(\"inversify\");\r\n;\r\nvar httpApi_1 = require(\"../../httpApi\");\r\nvar _1 = require(\"./\");\r\nvar SkillClient = (function () {\r\n    function SkillClient(skillRoute, skillBatchClient, apiClient) {\r\n        this.skillRoute = skillRoute;\r\n        this.skillBatchClient = skillBatchClient;\r\n        this.apiClient = apiClient;\r\n    }\r\n    Object.defineProperty(SkillClient.prototype, \"routeDefinition\", {\r\n        get: function () {\r\n            return this.skillRoute;\r\n        },\r\n        enumerable: true,\r\n        configurable: true\r\n    });\r\n    Object.defineProperty(SkillClient.prototype, \"batch\", {\r\n        get: function () {\r\n            return this.skillBatchClient;\r\n        },\r\n        enumerable: true,\r\n        configurable: true\r\n    });\r\n    /**\r\n     * Returns a promise that is resolved once the find action has been performed. Success response returns a list of skill resources matching the given criteria.\r\n     * @method\r\n     * @param options Query resource options object.\r\n     * @returns A promise that is resolved once the find action has been performed.\r\n     * @example skillClient.find({\r\n                    pageNumber : 1,\r\n                    pageSize : 10,\r\n                    orderBy : '<field>',\r\n                    orderDirection : '<asc|desc>',\r\n                    search : '<search-phrase>'\r\n                })\r\n                .then(function (collection) {\r\n                    // perform success action here\r\n                },\r\n                 function (response, status, headers, config) {\r\n                     // perform error handling here\r\n                });\r\n     **/\r\n    SkillClient.prototype.find = function (options) {\r\n        return this.apiClient.get(this.routeDefinition.find(options));\r\n    };\r\n    /**\r\n     * Returns a promise that is resolved once the get action has been performed. Success response returns the skill resource.\r\n     * @method\r\n     * @param id Skill id which uniquely identifies skill resource that needs to be retrieved.\r\n     * @param options Query resource options object.\r\n     * @example skillClient.get(id, options)\r\n                    .then(function (data) {\r\n                        // perform success action here\r\n                    },\r\n                     function (response, status, headers, config) {\r\n                         // perform error handling here\r\n                    });\r\n     **/\r\n    SkillClient.prototype.get = function (id, options) {\r\n        return this.apiClient.get(this.skillRoute.get(id, options));\r\n    };\r\n    /**\r\n     * Returns a promise that is resolved once the create skill action has been performed; this action creates a new skill resource.\r\n     * @method\r\n     * @param data A skill object that needs to be inserted into the system.\r\n     * @returns A promise that is resolved once the create skill action has been performed.\r\n     * @example skillClient.create({\r\n                    description : '<description>',\r\n                    name : '<name>',\r\n                    slug: '<slug>'\r\n                })\r\n                .then(function (data) {\r\n                    // perform success action here\r\n                },\r\n                 function (response, status, headers, config) {\r\n                     // perform error handling here\r\n                });\r\n     **/\r\n    SkillClient.prototype.create = function (data) {\r\n        return this.apiClient.post(this.routeDefinition.create(), this.routeDefinition.createParams(data));\r\n    };\r\n    /**\r\n     * Returns a promise that is resolved once the update skill action has been performed; this action updates a skill resource. This route uses HAL enabled objects to obtain routes and therefore it doesn't apply `skillRoute` route template. Here is an example of how a route can be obtained from HAL enabled objects:\r\n     * ```\r\n     * let params = modelMapper.removeParams(skill);\r\n     * let uri = params['model'].links('put').href;\r\n     * ```\r\n     * @method\r\n     * @param data A skill object used to update specified skill resource.\r\n     * @returns A promise that is resolved once the update skill action has been performed.\r\n     * @example // skill is a resource previously fetched using get action.\r\n                    skill.description = '<description>';\r\n                    skillClient.update(skill)\r\n                        .then(function (data) {\r\n                            // perform success action here\r\n                        },\r\n                         function (response, status, headers, config) {\r\n                             // perform error handling here\r\n                        });\r\n     **/\r\n    SkillClient.prototype.update = function (data) {\r\n        return this.apiClient.put(this.routeDefinition.update(data), this.routeDefinition.updateParams(data));\r\n    };\r\n    /**\r\n     * Returns a promise that is resolved once the remove action has been performed. This action will remove a skill resource from the system if successfully completed. This route uses HAL enabled objects to obtain routes and therefore it doesn't apply `skillRoute` route template. Here is an example of how a route can be obtained from HAL enabled objects:\r\n     * ```\r\n     * let params = modelMapper.removeParams(skill);\r\n     * let uri = params['model'].links('delete').href;\r\n     * ```\r\n     * @method\r\n     * @param A skill object used to delete specified skill resource.\r\n     * @returns A promise that is resolved once the remove action has been performed.\r\n     * @example // skill is a resource previously fetched using get action.\r\n                       skillClient.remove(skill)\r\n                           .then(function (data) {\r\n                               // perform success action here\r\n                           },\r\n                            function (response, status, headers, config) {\r\n                                // perform error handling here\r\n                           });\r\n    **/\r\n    SkillClient.prototype.remove = function (data) {\r\n        return this.apiClient.delete(this.routeDefinition.delete(data));\r\n    };\r\n    return SkillClient;\r\n}());\r\nSkillClient = tslib_1.__decorate([\r\n    inversify_1.injectable(),\r\n    tslib_1.__param(0, inversify_1.inject(_1.TYPES.SkillRoute)),\r\n    tslib_1.__param(1, inversify_1.inject(_1.TYPES.SkillBatchClient)),\r\n    tslib_1.__param(2, inversify_1.inject(httpApi_1.httpTYPES.ApiClient)),\r\n    tslib_1.__metadata(\"design:paramtypes\", [typeof (_a = typeof _1.SkillRoute !== \"undefined\" && _1.SkillRoute) === \"function\" && _a || Object, typeof (_b = typeof _1.SkillBatchClient !== \"undefined\" && _1.SkillBatchClient) === \"function\" && _b || Object, typeof (_c = typeof httpApi_1.ApiClient !== \"undefined\" && httpApi_1.ApiClient) === \"function\" && _c || Object])\r\n], SkillClient);\r\nexports.SkillClient = SkillClient;\r\nvar _a, _b, _c;\r\n\n\n\n//////////////////\n// WEBPACK FOOTER\n// ./src/modules/userProfile/skillClient.ts\n// module id = 337\n// module chunks = 0","/* globals module */\r\n/**\r\n * @module skillRoute\r\n * @description Baasic Skill Route Definition provides Baasic route templates which can be expanded to Baasic REST URIs. Various services can use Baasic Skill Route Service to obtain needed routes while other routes will be obtained through HAL. By convention, all route services  use the same function names as their corresponding services.\r\n */\r\n\"use strict\";\r\nObject.defineProperty(exports, \"__esModule\", { value: true });\r\nvar tslib_1 = require(\"tslib\");\r\nvar inversify_1 = require(\"inversify\");\r\nvar common_1 = require(\"../../common\");\r\n;\r\nvar _1 = require(\"./\");\r\nvar contracts_1 = require(\"../../core/contracts\");\r\nvar SkillRoute = (function (_super) {\r\n    tslib_1.__extends(SkillRoute, _super);\r\n    function SkillRoute(appOptions, skillBatchRoute) {\r\n        var _this = _super.call(this, appOptions) || this;\r\n        _this.appOptions = appOptions;\r\n        _this.skillBatchRoute = skillBatchRoute;\r\n        _this.findRoute = 'profile/lookups/skills/{?searchQuery,page,rpp,sort,embed,fields}';\r\n        _this.getRoute = 'profile/lookups/skills';\r\n        _this.createRoute = 'profile/lookups/skills';\r\n        _this.updateRoute = 'profile/lookups/skills/{id}';\r\n        _this.deleteRoute = 'lookups/skills/{id}';\r\n        return _this;\r\n    }\r\n    Object.defineProperty(SkillRoute.prototype, \"batch\", {\r\n        get: function () {\r\n            return this.skillBatchRoute;\r\n        },\r\n        enumerable: true,\r\n        configurable: true\r\n    });\r\n    /**\r\n     * Parses find route which can be expanded with additional options. Supported items are:\r\n     * - `searchQuery` - A string referencing skill properties using the phrase or BQL (Baasic Query Language) search.\r\n     * - `page` - A value used to set the page number, i.e. to retrieve certain skill subset from the storage.\r\n     * - `rpp` - A value used to limit the size of result set per page.\r\n     * - `sort` - A string used to set the skill property to sort the result collection by.\r\n     * - `embed` - Comma separated list of resources to be contained within the current representation.\r\n     * @method\r\n     * @param options Query resource options object.\r\n     * @example skillRoute.find({searchQuery: '<search-phrase>'});\r\n     **/\r\n    SkillRoute.prototype.find = function (options) {\r\n        return _super.prototype.baseFind.call(this, this.findRoute, options);\r\n    };\r\n    /**\r\n     * Parses get route; this route doesn't expose any properties.\r\n     * @method\r\n     * @param id Skill id which uniquely identifies skill resource that needs to be retrieved.\r\n     * @param options Query resource options object.\r\n     * @example skillRoute.get(id, options);\r\n     **/\r\n    SkillRoute.prototype.get = function (id, options) {\r\n        return _super.prototype.baseGet.call(this, this.getRoute, id, options);\r\n    };\r\n    /**\r\n     * Parses create route; this URI template does not expose any additional options.\r\n     * @method\r\n     * @example skillRoute.create();\r\n     **/\r\n    SkillRoute.prototype.create = function () {\r\n        return _super.prototype.baseCreate.call(this, this.createRoute, {});\r\n    };\r\n    /**\r\n     * Parses update route; this URI template does not expose any additional options.\r\n     * @method\r\n     * @param data A skill object used to update specified skill resource.\r\n     * @example skillRoute.update(data);\r\n     **/\r\n    SkillRoute.prototype.update = function (data) {\r\n        return _super.prototype.baseUpdate.call(this, this.updateRoute, data);\r\n    };\r\n    /**\r\n     * Parses delete route; this URI template does not expose any additional options.\r\n     * @method\r\n     * @param data A skill object used to delete specified skill resource.\r\n     * @example skillRoute.delete(data);\r\n     **/\r\n    SkillRoute.prototype.delete = function (data) {\r\n        return _super.prototype.baseDelete.call(this, this.deleteRoute, data);\r\n    };\r\n    return SkillRoute;\r\n}(common_1.BaseRoute));\r\nSkillRoute = tslib_1.__decorate([\r\n    tslib_1.__param(0, inversify_1.inject(contracts_1.TYPES.IAppOptions)),\r\n    tslib_1.__param(1, inversify_1.inject(_1.TYPES.SkillBatchRoute)),\r\n    tslib_1.__metadata(\"design:paramtypes\", [typeof (_a = typeof contracts_1.IAppOptions !== \"undefined\" && contracts_1.IAppOptions) === \"function\" && _a || Object, typeof (_b = typeof _1.SkillBatchRoute !== \"undefined\" && _1.SkillBatchRoute) === \"function\" && _b || Object])\r\n], SkillRoute);\r\nexports.SkillRoute = SkillRoute;\r\nvar _a, _b;\r\n\n\n\n//////////////////\n// WEBPACK FOOTER\n// ./src/modules/userProfile/skillRoute.ts\n// module id = 338\n// module chunks = 0","/* globals module */\r\n/**\r\n * @module userEducationClient  * @description  User Education Client provides Baasic route templates which can be expanded to Baasic REST URIs. Various services can use Baasic User Education Route Definition to obtain needed routes while other routes will be obtained through HAL. By convention, all route services use the same function names as their corresponding services.\r\n */\r\n\"use strict\";\r\nObject.defineProperty(exports, \"__esModule\", { value: true });\r\nvar tslib_1 = require(\"tslib\");\r\nvar inversify_1 = require(\"inversify\");\r\n;\r\nvar httpApi_1 = require(\"../../httpApi\");\r\nvar _1 = require(\"./\");\r\nvar UserEducationClient = (function () {\r\n    function UserEducationClient(userEducationRoute, apiClient) {\r\n        this.userEducationRoute = userEducationRoute;\r\n        this.apiClient = apiClient;\r\n    }\r\n    Object.defineProperty(UserEducationClient.prototype, \"routeDefinition\", {\r\n        get: function () {\r\n            return this.userEducationRoute;\r\n        },\r\n        enumerable: true,\r\n        configurable: true\r\n    });\r\n    /**\r\n     * Returns a promise that is resolved once the find action has been performed. Success response returns a list of user education resources matching the given criteria.\r\n     * @method\r\n     * @param options Query resource options object.\r\n     * @returns A promise that is resolved once the find action has been performed.\r\n     * @example userEducationClient.find({\r\n                    pageNumber : 1,\r\n                    pageSize : 10,\r\n                    orderBy : '<field>',\r\n                    orderDirection : '<asc|desc>',\r\n                    search : '<search-phrase>'\r\n                })\r\n                .then(function (collection) {\r\n                    // perform success action here\r\n                },\r\n                 function (response, status, headers, config) {\r\n                     // perform error handling here\r\n                });\r\n     **/\r\n    UserEducationClient.prototype.find = function (options) {\r\n        return this.apiClient.get(this.routeDefinition.find(options));\r\n    };\r\n    /**\r\n     * Returns a promise that is resolved once the get action has been performed. Success response returns the user education resource.\r\n     * @method\r\n     * @example userEducationClient.get(id)\r\n                    .then(function (data) {\r\n                        // perform success action here\r\n                    },\r\n                     function (response, status, headers, config) {\r\n                         // perform error handling here\r\n                    });\r\n     **/\r\n    UserEducationClient.prototype.get = function (id, options) {\r\n        return this.apiClient.get(this.userEducationRoute.get(id, options));\r\n    };\r\n    /**\r\n     * Returns a promise that is resolved once the create user education action has been performed; this action creates a new user education resource.\r\n     * @method\r\n     * @param data An user education object that needs to be inserted into the system.\r\n     * @returns A promise that is resolved once the create user education action has been performed.\r\n     * @example userEducationClient.create({\r\n                    organizationName : '<organization-name>',\r\n                    summary: '<summary>',\r\n                    userId: '<user-id>'\r\n                })\r\n                .then(function (data) {\r\n                    // perform success action here\r\n                },\r\n                 function (response, status, headers, config) {\r\n                     // perform error handling here\r\n                });\r\n     **/\r\n    UserEducationClient.prototype.create = function (data) {\r\n        return this.apiClient.post(this.routeDefinition.create(data), this.routeDefinition.createParams(data));\r\n    };\r\n    /**\r\n     * Returns a promise that is resolved once the update user education action has been performed; this action updates a user education resource. This route uses HAL enabled objects to obtain routes and therefore it doesn't apply `userEducationRoute` route template. Here is an example of how a route can be obtained from HAL enabled objects:\r\n     * ```\r\n     * let params = modelMapper.removeParams(education);\r\n     * let uri = params['model'].links('put').href;\r\n     * ```\r\n     * @method\r\n     * @param data An user education object used to update specified user education resource.\r\n     * @returns A promise that is resolved once the update user education action has been performed.\r\n     * @example // education is a resource previously fetched using get action.\r\n                    education.degree = '<degree>';\r\n                    userEducationClient.update(education)\r\n                        .then(function (data) {\r\n                            // perform success action here\r\n                        },\r\n                         function (response, status, headers, config) {\r\n                             // perform error handling here\r\n                        });\r\n     **/\r\n    UserEducationClient.prototype.update = function (data) {\r\n        return this.apiClient.put(this.routeDefinition.update(data), this.routeDefinition.updateParams(data));\r\n    };\r\n    /**\r\n     * Returns a promise that is resolved once the remove action has been performed. This action will remove a user education resource from the system if successfully completed. This route uses HAL enabled objects to obtain routes and therefore it doesn't apply `baasicUserEducationRoutDefinition` route template. Here is an example of how a route can be obtained from HAL enabled objects:\r\n     * ```\r\n     * let params = modelMapper.removeParams(education);\r\n     * let uri = params['model'].links('delete').href;\r\n     * ```\r\n     * @method\r\n     * @example // education is a resource previously fetched using get action.\r\n                    userEducationClient.remove(education)\r\n                        .then(function (data) {\r\n                            // perform success action here\r\n                        },\r\n                         function (response, status, headers, config) {\r\n                             // perform error handling here\r\n                        });\r\n     **/\r\n    UserEducationClient.prototype.remove = function (data) {\r\n        return this.apiClient.delete(this.routeDefinition.delete(data));\r\n    };\r\n    return UserEducationClient;\r\n}());\r\nUserEducationClient = tslib_1.__decorate([\r\n    inversify_1.injectable(),\r\n    tslib_1.__param(0, inversify_1.inject(_1.TYPES.UserEducationRoute)),\r\n    tslib_1.__param(1, inversify_1.inject(httpApi_1.httpTYPES.ApiClient)),\r\n    tslib_1.__metadata(\"design:paramtypes\", [typeof (_a = typeof _1.UserEducationRoute !== \"undefined\" && _1.UserEducationRoute) === \"function\" && _a || Object, typeof (_b = typeof httpApi_1.ApiClient !== \"undefined\" && httpApi_1.ApiClient) === \"function\" && _b || Object])\r\n], UserEducationClient);\r\nexports.UserEducationClient = UserEducationClient;\r\nvar _a, _b;\r\n/**\r\n * @overview\r\n ***Notes:**\r\n - Refer to the [REST API documentation](https://github.com/Baasic/baasic-rest-api/wiki) for detailed information about available Baasic REST API end-points.\r\n - All end-point objects are transformed by the associated route service.\r\n */ \r\n\n\n\n//////////////////\n// WEBPACK FOOTER\n// ./src/modules/userProfile/userEducationClient.ts\n// module id = 339\n// module chunks = 0","/* globals module */\r\n/**\r\n * @module userEducationRoute\r\n * @description Baasic User Education Route Definition provides Baasic route templates which can be expanded to Baasic REST URIs. Various services can use Baasic User Education Route Definition to obtain needed routes while other routes will be obtained through HAL. By convention, all route services use the same function names as their corresponding services.\r\n */\r\n\"use strict\";\r\nObject.defineProperty(exports, \"__esModule\", { value: true });\r\nvar tslib_1 = require(\"tslib\");\r\nvar inversify_1 = require(\"inversify\");\r\nvar common_1 = require(\"../../common\");\r\n;\r\nvar contracts_1 = require(\"../../core/contracts\");\r\nvar UserEducationRoute = (function (_super) {\r\n    tslib_1.__extends(UserEducationRoute, _super);\r\n    function UserEducationRoute(appOptions) {\r\n        var _this = _super.call(this, appOptions) || this;\r\n        _this.appOptions = appOptions;\r\n        _this.findRoute = 'profiles/{userId}/educations/{?searchQuery,page,rpp,sort,embed,fields}';\r\n        _this.getRoute = 'profiles/{userId}/educations/{id}/{?embed,fields}';\r\n        _this.createRoute = 'profiles/{userId}/educations';\r\n        _this.updateRoute = 'profiles/{userId}/educations/{id}';\r\n        _this.deleteRoute = 'profiles/{userId}/educations/{id}';\r\n        return _this;\r\n    }\r\n    /**\r\n     * Parses find route which can be expanded with additional options. Supported items are:\r\n     * - `searchQuery` - A string referencing user education properties using the phrase or BQL (Baasic Query Language) search.\r\n     * - `page` - A value used to set the page number, i.e. to retrieve certain user education subset from the storage.\r\n     * - `rpp` - A value used to limit the size of result set per page.\r\n     * - `sort` - A string used to set the user education property to sort the result collection by.\r\n     * - `embed` - Comma separated list of resources to be contained within the current representation.\r\n     * @method\r\n     * @param options Query resource options object.\r\n     * @example userEducationRoute.find({searchQuery: '<search-phrase>'});\r\n     **/\r\n    UserEducationRoute.prototype.find = function (options) {\r\n        return _super.prototype.baseFind.call(this, this.findRoute, options);\r\n    };\r\n    /**\r\n     * Parses get route; this route doesn't expose any properties.\r\n     * @method\r\n     * @param id User education id which uniquely identifies user education resource that needs to be retrieved.\r\n     * @param options Query resource options object.\r\n     * @example userEducationRoute.get(id);\r\n     **/\r\n    UserEducationRoute.prototype.get = function (id, options) {\r\n        return _super.prototype.baseGet.call(this, this.getRoute, id, options);\r\n    };\r\n    /**\r\n     * Parses create route; this URI template does not expose any additional options.\r\n     * @method\r\n     * @param data An user education object that needs to be inserted into the system.\r\n     * @example userEducationRoute.create(data);\r\n     **/\r\n    UserEducationRoute.prototype.create = function (data) {\r\n        return _super.prototype.baseCreate.call(this, this.createRoute, data);\r\n    };\r\n    /**\r\n     * Parses update route; this URI template does not expose any additional options.\r\n     * @method\r\n     * @param data An user education object used to update specified skill resource.\r\n     * @example userEducationRoute.update(data);\r\n     **/\r\n    UserEducationRoute.prototype.update = function (data) {\r\n        return _super.prototype.baseUpdate.call(this, this.updateRoute, data);\r\n    };\r\n    /**\r\n     * Parses delte route; this URI template does not expose any additional options.\r\n     * @method\r\n     * @param data An user education object used to delete specified skill resource.\r\n     * @example userEducationRoute.delete(data);\r\n     **/\r\n    UserEducationRoute.prototype.delete = function (data) {\r\n        return _super.prototype.baseDelete.call(this, this.deleteRoute, data);\r\n    };\r\n    return UserEducationRoute;\r\n}(common_1.BaseRoute));\r\nUserEducationRoute = tslib_1.__decorate([\r\n    tslib_1.__param(0, inversify_1.inject(contracts_1.TYPES.IAppOptions)),\r\n    tslib_1.__metadata(\"design:paramtypes\", [typeof (_a = typeof contracts_1.IAppOptions !== \"undefined\" && contracts_1.IAppOptions) === \"function\" && _a || Object])\r\n], UserEducationRoute);\r\nexports.UserEducationRoute = UserEducationRoute;\r\nvar _a;\r\n/**\r\n * @overview\r\n ***Notes:**\r\n - Refer to the [REST API documentation](https://github.com/Baasic/baasic-rest-api/wiki) for detailed information about available Baasic REST API end-points.\r\n - [URI Template](https://github.com/Baasic/uritemplate-js) syntax enables expanding the Baasic route templates to Baasic REST URIs providing it with an object that contains URI parameters.\r\n - All end-point objects are transformed by the associated route service.\r\n */ \r\n\n\n\n//////////////////\n// WEBPACK FOOTER\n// ./src/modules/userProfile/userEducationRoute.ts\n// module id = 340\n// module chunks = 0","/* globals module */\r\n/**\r\n * @module userProfileACLClient\r\n * @description  User Profile ACL Client provides an easy way to consume  User Profile REST API end-points. In order to obtain needed routes `userProfileACLClient` uses `userProfileACLRoute`.\r\n */\r\n\"use strict\";\r\nObject.defineProperty(exports, \"__esModule\", { value: true });\r\nvar tslib_1 = require(\"tslib\");\r\nvar inversify_1 = require(\"inversify\");\r\n;\r\nvar httpApi_1 = require(\"../../httpApi\");\r\nvar _1 = require(\"./\");\r\nvar UserProfileACLClient = (function () {\r\n    function UserProfileACLClient(userProfileACLRoute, apiClient) {\r\n        this.userProfileACLRoute = userProfileACLRoute;\r\n        this.apiClient = apiClient;\r\n    }\r\n    Object.defineProperty(UserProfileACLClient.prototype, \"routeDefinition\", {\r\n        get: function () {\r\n            return this.userProfileACLRoute;\r\n        },\r\n        enumerable: true,\r\n        configurable: true\r\n    });\r\n    /**\r\n     * Returns a promise that is resolved once the get action has been performed. Success response returns a list of ACL policies established for the specified user profile resource.\r\n     * @method\r\n     * @param options Query resource options object.\r\n     * @returns A promise that is resolved once the get action has been performed.\r\n     * @example userProfileACLClient.get({id: '<profile-id>'})\r\n                    .then(function (data) {\r\n                        // perform success action here\r\n                    },\r\n                     function (response, status, headers, config) {\r\n                         // perform error handling here\r\n                    });\r\n     **/\r\n    UserProfileACLClient.prototype.get = function (options) {\r\n        return this.apiClient.get(this.routeDefinition.get(options));\r\n    };\r\n    /**\r\n     * Returns a promise that is resolved once the update acl action has been performed, this action creates new ACL policy for the specified user profile resource.\r\n     * @method\r\n     * @param options ACL options object.\r\n     * @returns A promise that is resolved once the update acl action has been performed.\r\n     * @example let options = {id : '<profile-id>'};\r\n                let aclObj =  {  actionId: '<action-id'>,  roleId: '<roleId>',  userId: '<userId>' };\r\n                options[baasicConstants.modelPropertyName] = aclObj;\r\n                userProfileACLClient.update(options)\r\n                    .then(function (data) {\r\n                        // perform success action here\r\n                    },\r\n                     function (response, status, headers, config) {\r\n                         // perform error handling here\r\n                    });\r\n     **/\r\n    UserProfileACLClient.prototype.update = function (options) {\r\n        return this.apiClient.put(this.routeDefinition.update(options), this.routeDefinition.updateParams(options));\r\n    };\r\n    /**\r\n     * Returns a promise that is resolved once the removeByUser action has been performed. This action deletes ACL policy assigned to the specified user and user profile resource.\r\n     * @method\r\n     * @param profileId User profile id which uniquely identifies user profile resource whose security privileges need to be retrieved and updated.\r\n     * @param action Action abbreviation which identifies ACL policy assigned to the specified user and user profile resource.\r\n     *               Supported Values:\r\n     *               \"Create\"\r\n     *               \"Delete\"\r\n     *               \"Read\"\r\n     *               \"Update\"\r\n     * @param user A value that uniquely identifies user for which ACL policy needs to be removed.\r\n     * @param data ACL policy object used to delete specified ACL policy resource.\r\n     * @returns A promise that is resolved once the removeByUser action has been performed.\r\n     * @example userProfileACLClient.removeByUser('<profile-id>', '<access-action>', '<username>')\r\n                    .then(function (data) {\r\n                        // perform success action here\r\n                    },\r\n                     function (response, status, headers, config) {\r\n                         // perform error handling here\r\n                    });\r\n     **/\r\n    UserProfileACLClient.prototype.removeByUser = function (profileId, action, user, data) {\r\n        return this.apiClient.delete(this.userProfileACLRoute.deleteByUser(profileId, action, user, data));\r\n    };\r\n    /**\r\n     * Returns a promise that is resolved once the removeByRole action has been performed. This action deletes ACL policy assigned to the specified role and user profile resource.\r\n     * @method\r\n     * @param profileId User profile id which uniquely identifies user profile resource whose security privileges need to be retrieved and updated.\r\n     * @param action Action abbreviation which identifies ACL policy assigned to the specified user and user profile resource.\r\n     *               Supported Values:\r\n     *               \"Create\"\r\n     *               \"Delete\"\r\n     *               \"Read\"\r\n     *               \"Update\"\r\n     * @param role A value that uniquely identifies role for which ACL policy needs to be removed.\r\n     * @param data  ACL policy object used to delete specified ACL policy resource.\r\n     * @returns A promise that is resolved once the removeByRole action has been performed.\r\n     * @example userProfileACLClient.removeByRole('<profile-id>', '<access-action>', '<role-name>')\r\n                    .then(function (data) {\r\n                        // perform success action here\r\n                    },\r\n                     function (response, status, headers, config) {\r\n                         // perform error handling here\r\n                    });\r\n     **/\r\n    UserProfileACLClient.prototype.removeByRole = function (profileId, action, role, data) {\r\n        return this.apiClient.delete(this.userProfileACLRoute.deleteByRole(profileId, action, role, data));\r\n    };\r\n    return UserProfileACLClient;\r\n}());\r\nUserProfileACLClient = tslib_1.__decorate([\r\n    inversify_1.injectable(),\r\n    tslib_1.__param(0, inversify_1.inject(_1.TYPES.UserProfileACLRoute)),\r\n    tslib_1.__param(1, inversify_1.inject(httpApi_1.httpTYPES.ApiClient)),\r\n    tslib_1.__metadata(\"design:paramtypes\", [typeof (_a = typeof _1.UserProfileACLRoute !== \"undefined\" && _1.UserProfileACLRoute) === \"function\" && _a || Object, typeof (_b = typeof httpApi_1.ApiClient !== \"undefined\" && httpApi_1.ApiClient) === \"function\" && _b || Object])\r\n], UserProfileACLClient);\r\nexports.UserProfileACLClient = UserProfileACLClient;\r\nvar _a, _b;\r\n/**\r\n * @copyright (c) 2017 Mono Ltd\r\n * @license MIT\r\n * @author Mono Ltd\r\n * @overview\r\n ***Notes:**\r\n - Refer to the [Baasic REST API](http://dev.baasic.com/api/reference/home) for detailed information about available Baasic REST API end-points.\r\n - All end-point objects are transformed by the associated route service.\r\n */ \r\n\n\n\n//////////////////\n// WEBPACK FOOTER\n// ./src/modules/userProfile/userProfileACLClient.ts\n// module id = 341\n// module chunks = 0","/* globals module */\r\n/**\r\n * @module userProfileACLRoute\r\n * @description Baasic User ACL Profile Route Definition provides Baasic route templates which can be expanded to Baasic REST URIs. Various services can use Baasic User Profile ACL Route Definition to obtain needed routes while other routes will be obtained through HAL. By convention, all route services  use the same function names as their corresponding services.\r\n */\r\n\"use strict\";\r\nObject.defineProperty(exports, \"__esModule\", { value: true });\r\nvar tslib_1 = require(\"tslib\");\r\nvar inversify_1 = require(\"inversify\");\r\nvar common_1 = require(\"../../common\");\r\n;\r\nvar contracts_1 = require(\"../../core/contracts\");\r\nvar UserProfileACLRoute = (function (_super) {\r\n    tslib_1.__extends(UserProfileACLRoute, _super);\r\n    function UserProfileACLRoute(appOptions) {\r\n        var _this = _super.call(this, appOptions) || this;\r\n        _this.appOptions = appOptions;\r\n        _this.getRoute = 'profiles/{id}/acl/{?fields}';\r\n        _this.updateRoute = 'profiles/{id}/acl/{?fields}';\r\n        _this.deleteByUserRoute = 'profiles/{id}/acl/actions/{accessAction}/users/{user}/';\r\n        _this.deleteByRoleRoute = 'profiles/{id}/acl/actions/{accessAction}/roles/{role}/';\r\n        return _this;\r\n    }\r\n    /**\r\n     * Parses get user profile acl route; this URI template should be expanded with the Id of the user profile resource.\r\n     * @method\r\n     * @param options Query resource options object.\r\n     * @example userProfileACLRoute.get({id: '<profile-id>'});\r\n     **/\r\n    UserProfileACLRoute.prototype.get = function (options) {\r\n        var params = this.utility.extend({}, options);\r\n        return _super.prototype.baseCreate.call(this, this.getRoute, params);\r\n    };\r\n    /**\r\n     * Parses update user profile acl route; this URI template should be expanded with the Id of the user profile.\r\n     * @method\r\n     * @param options ACL options object.\r\n     * @example userProfileACLRoute.update({id: '<profile-id>'});\r\n     **/\r\n    UserProfileACLRoute.prototype.update = function (options) {\r\n        var params = this.utility.extend({}, options);\r\n        return _super.prototype.baseCreate.call(this, this.updateRoute, params);\r\n    };\r\n    UserProfileACLRoute.prototype.updateParams = function (options) {\r\n        var params = this.utility.extend({}, options);\r\n        return params[this.modelMapper.modelPropertyName];\r\n    };\r\n    /**\r\n     * Parses deleteByUser user profile acl route which can be expanded with additional options. Supported items are:\r\n     * - `id` - Id of the user profile resource.\r\n     * - `accessAction` - Action abbreviation which identifies ACL policy assigned to the specified user and user profile resource.\r\n     * - `user` - A value which uniquely identifies user for which ACL policy needs to be removed.\r\n     * @method\r\n     * @param profileId User profile id which uniquely identifies user profile resource whose security privileges need to be retrieved and updated.\r\n     * @param action Action abbreviation which identifies ACL policy assigned to the specified user and user profile resource.\r\n     *               Supported Values:\r\n     *               \"Create\"\r\n     *               \"Delete\"\r\n     *               \"Read\"\r\n     *               \"Update\"\r\n     * @param user A value that uniquely identifies user for which ACL policy needs to be removed.\r\n     * @param data ACL policy object used to delete specified ACL policy resource.\r\n     * @example userProfileACLRoute.deleteByUser({ id: '<profile-id>', accessAction: '<access-action>', user: '<username>' });\r\n     **/\r\n    UserProfileACLRoute.prototype.deleteByUser = function (profileId, action, user, data) {\r\n        var params = this.modelMapper.removeParams(data);\r\n        params.profileId = profileId;\r\n        params.user = user;\r\n        params.accessAction = action;\r\n        return _super.prototype.baseCreate.call(this, this.deleteByUserRoute, params);\r\n    };\r\n    /**\r\n     * Parses deleteByUser user profile acl route which can be expanded with additional options. Supported items are:\r\n     * - `id` - Id of the user profile.\r\n     * - `accessAction` - Action abbreviation which identifies ACL policy assigned to the specified role and user profile resource.\r\n     * - `role` - A value which uniquely identifies role for which ACL policy needs to be removed.\r\n     * @method\r\n     * @param profileId User profile id which uniquely identifies user profile resource whose security privileges need to be retrieved and updated.\r\n     * @param action Action abbreviation which identifies ACL policy assigned to the specified user and user profile resource.\r\n     *               Supported Values:\r\n     *               \"Create\"\r\n     *               \"Delete\"\r\n     *               \"Read\"\r\n     *               \"Update\"\r\n     * @param role A value that uniquely identifies role for which ACL policy needs to be removed.\r\n     * @param data  ACL policy object used to delete specified ACL policy resource.\r\n     * @example userProfileACLRoute.deleteByRole.expand({ id: '<profile-id>', accessAction: '<access-action>', role: '<role-name>' });\r\n     **/\r\n    UserProfileACLRoute.prototype.deleteByRole = function (profileId, action, role, data) {\r\n        var params = this.modelMapper.removeParams(data);\r\n        params.profileId = profileId;\r\n        params.role = role;\r\n        params.accessAction = action;\r\n        return _super.prototype.baseCreate.call(this, this.deleteByRoleRoute, params);\r\n    };\r\n    return UserProfileACLRoute;\r\n}(common_1.BaseRoute));\r\nUserProfileACLRoute = tslib_1.__decorate([\r\n    tslib_1.__param(0, inversify_1.inject(contracts_1.TYPES.IAppOptions)),\r\n    tslib_1.__metadata(\"design:paramtypes\", [typeof (_a = typeof contracts_1.IAppOptions !== \"undefined\" && contracts_1.IAppOptions) === \"function\" && _a || Object])\r\n], UserProfileACLRoute);\r\nexports.UserProfileACLRoute = UserProfileACLRoute;\r\nvar _a;\r\n/**\r\n * @copyright (c) 2017 Mono Ltd\r\n * @license MIT\r\n * @author Mono Ltd\r\n * @overview\r\n ***Notes:**\r\n - Refer to the [Baasic REST API](http://dev.baasic.com/api/reference/home) for detailed information about available Baasic REST API end-points.\r\n - [URI Template](https://github.com/Baasic/uritemplate-js) syntax enables expanding the Baasic route templates to Baasic REST URIs providing it with an object that contains URI parameters.\r\n - All end-point objects are transformed by the associated route service.\r\n */ \r\n\n\n\n//////////////////\n// WEBPACK FOOTER\n// ./src/modules/userProfile/userProfileACLRoute.ts\n// module id = 342\n// module chunks = 0","/* globals module */\r\n/**\r\n * @module userProfileAvatarClient\r\n * @description  User Profile Avatar Client provides Baasic route templates which can be expanded to Baasic REST URIs. Various services can use Baasic User Profile Avatar Route Definition to obtain needed routes while other routes will be obtained through HAL. By convention, all route services use the same function names as their corresponding services.\r\n */\r\n\"use strict\";\r\nObject.defineProperty(exports, \"__esModule\", { value: true });\r\nvar tslib_1 = require(\"tslib\");\r\nvar inversify_1 = require(\"inversify\");\r\n;\r\nvar httpApi_1 = require(\"../../httpApi\");\r\nvar _1 = require(\"./\");\r\nvar UserProfileAvatarClient = (function () {\r\n    function UserProfileAvatarClient(userProfileAvatarRoute, userProfileAvatarStreamsClient, apiClient) {\r\n        this.userProfileAvatarRoute = userProfileAvatarRoute;\r\n        this.userProfileAvatarStreamsClient = userProfileAvatarStreamsClient;\r\n        this.apiClient = apiClient;\r\n    }\r\n    Object.defineProperty(UserProfileAvatarClient.prototype, \"routeDefinition\", {\r\n        get: function () {\r\n            return this.userProfileAvatarRoute;\r\n        },\r\n        enumerable: true,\r\n        configurable: true\r\n    });\r\n    Object.defineProperty(UserProfileAvatarClient.prototype, \"streams\", {\r\n        get: function () {\r\n            return this.userProfileAvatarStreamsClient;\r\n        },\r\n        enumerable: true,\r\n        configurable: true\r\n    });\r\n    /**\r\n     * Returns a promise that is resolved once the get action has been performed. Success response returns requested file resource.\r\n     * @method\r\n     * @param id User Profile id which uniquely identifies user avatar resource that needs to be retrieved.\r\n     * @param options Query resource options object.\r\n     * @returns A promise that is resolved once the get action has been performed.\r\n     * @example userProfileAvatarClient.get('<file-id>')\r\n                   .then(function (data) {\r\n                       // perform success action here\r\n                   },\r\n                    function (response, status, headers, config) {\r\n                        // perform error handling here\r\n                   });\r\n    **/\r\n    UserProfileAvatarClient.prototype.get = function (id, options) {\r\n        return this.apiClient.get(this.userProfileAvatarRoute.get(id, options));\r\n    };\r\n    /**\r\n     * Returns a promise that is resolved once the update file action has been performed; this action will update a file resource if successfully completed. This route uses HAL enabled objects to obtain routes and therefore it doesn't apply `userProfileAvatarRoute` route template. Here is an example of how a route can be obtained from HAL enabled objects:\r\n     * ```\r\n     * let params = modelMapper.updateParams(fileEntry);\r\n     * let uri = params['model'].links('put').href;\r\n     * ```\r\n     * @method\r\n     * @param data Avatar file object that need to be updated in the system.\r\n     * @returns A promise that is resolved once the update file action has been performed.\r\n     * @example // fileEntry is a file resource previously fetched using get action.\r\n                       fileEntry.description = '<description>';\r\n                       userProfileAvatarClient.update(fileEntry)\r\n                           .then(function (data) {\r\n                               // perform success action here\r\n                           },\r\n                            function (response, status, headers, config) {\r\n                           });\r\n                                // perform error handling here\r\n    **/\r\n    UserProfileAvatarClient.prototype.update = function (data) {\r\n        return this.apiClient.put(this.userProfileAvatarRoute.update(data), data);\r\n    };\r\n    /**\r\n     * Returns a promise that is resolved once the link action has been performed; this action links file resource from other modules into the Profile Files module (For example: file resources from the Media Vault module can be linked directly into the Profile Files module).\r\n     * @method\r\n     * @param id User Profile id which uniquely identifies user avatar resource that needs to be retrieved.\r\n     * @param data A profile avatar file object that need to be inserted into the system.\r\n     * @returns A promise that is resolved once the link action has been performed.\r\n     * @example userProfileAvatarClient.link(fileObject)\r\n                    .then(function (data) {\r\n                        // perform success action here\r\n                    },\r\n                     function (response, status, headers, config) {\r\n                         // perform error handling here\r\n                    });\r\n     **/\r\n    UserProfileAvatarClient.prototype.link = function (id, data) {\r\n        return this.apiClient.post(this.routeDefinition.link(id, data), this.routeDefinition.createParams(data, id));\r\n    };\r\n    /**\r\n     * Returns a promise that is resolved once the unlink action has been performed. This action will remove one or many file resources from the system if successfully completed. This route uses HAL enabled objects to obtain routes and therefore it doesn't apply userProfileAvatarRoute route template. Here is an example of how a route can be obtained from HAL enabled objects:\r\n     * ```\r\n     * let params = modelMapper.removeParams(fileEntry);\r\n     * let uri = params['model'].links('unlink').href;\r\n     * ```\r\n     * @method\r\n     * @param data A profile avatar file object used to remove specific profile avatar from the system.\r\n     * @param options Query resource options object.\r\n     * @returns A promise that is resolved once the unlink action has been performed.\r\n     * @example // fileEntry is a file resource previously fetched using get action. The following action will remove the original file resource and all accompanying derived file resources.\r\n                    userProfileAvatarRoute.remove(fileEntry)\r\n                        .then(function (data) {\r\n                            // perform success action here\r\n                        },\r\n                         function (response, status, headers, config) {\r\n                             // perform error handling here\r\n                        });\r\n     **/\r\n    UserProfileAvatarClient.prototype.unlink = function (data, options) {\r\n        return this.apiClient.delete(this.userProfileAvatarRoute.unlink(data, options));\r\n    };\r\n    return UserProfileAvatarClient;\r\n}());\r\nUserProfileAvatarClient = tslib_1.__decorate([\r\n    inversify_1.injectable(),\r\n    tslib_1.__param(0, inversify_1.inject(_1.TYPES.UserProfileAvatarRoute)),\r\n    tslib_1.__param(1, inversify_1.inject(_1.TYPES.UserProfileAvatarStreamsClient)),\r\n    tslib_1.__param(2, inversify_1.inject(httpApi_1.httpTYPES.ApiClient)),\r\n    tslib_1.__metadata(\"design:paramtypes\", [typeof (_a = typeof _1.UserProfileAvatarRoute !== \"undefined\" && _1.UserProfileAvatarRoute) === \"function\" && _a || Object, typeof (_b = typeof _1.UserProfileAvatarStreamsClient !== \"undefined\" && _1.UserProfileAvatarStreamsClient) === \"function\" && _b || Object, typeof (_c = typeof httpApi_1.ApiClient !== \"undefined\" && httpApi_1.ApiClient) === \"function\" && _c || Object])\r\n], UserProfileAvatarClient);\r\nexports.UserProfileAvatarClient = UserProfileAvatarClient;\r\nvar _a, _b, _c;\r\n/**\r\n * @overview\r\n ***Notes:**\r\n - Refer to the [REST API documentation](https://github.com/Baasic/baasic-rest-api/wiki) for detailed information about available Baasic REST API end-points.\r\n - All end-point objects are transformed by the associated route service.\r\n */ \r\n\n\n\n//////////////////\n// WEBPACK FOOTER\n// ./src/modules/userProfile/userProfileAvatarClient.ts\n// module id = 343\n// module chunks = 0","/* globals module */\r\n/**\r\n * @module userProfileAvatarRoute\r\n * @description Baasic User Profile Avatar Route Definition provides Baasic route templates which can be expanded to Baasic REST URIs. Various services can use Baasic User Profile Avatar Route Definition to obtain needed routes while other routes will be obtained through HAL. By convention, all route services use the same function names as their corresponding services.\r\n */\r\n\"use strict\";\r\nObject.defineProperty(exports, \"__esModule\", { value: true });\r\nvar tslib_1 = require(\"tslib\");\r\nvar inversify_1 = require(\"inversify\");\r\nvar common_1 = require(\"../../common\");\r\n;\r\nvar _1 = require(\"./\");\r\nvar contracts_1 = require(\"../../core/contracts\");\r\nvar UserProfileAvatarRoute = (function (_super) {\r\n    tslib_1.__extends(UserProfileAvatarRoute, _super);\r\n    function UserProfileAvatarRoute(appOptions, userProfileAvatarStreamsRoute) {\r\n        var _this = _super.call(this, appOptions) || this;\r\n        _this.appOptions = appOptions;\r\n        _this.userProfileAvatarStreamsRoute = userProfileAvatarStreamsRoute;\r\n        _this.getRoute = 'profiles/{id}/avatars/{?embed,fields}';\r\n        _this.updateRoute = 'profiles/{userId}/avatars';\r\n        _this.linkRoute = 'profiles/{id}/avatars/link';\r\n        _this.unlinkRoute = 'profiles/{userId}/avatars/unlink';\r\n        return _this;\r\n    }\r\n    Object.defineProperty(UserProfileAvatarRoute.prototype, \"streams\", {\r\n        get: function () {\r\n            return this.userProfileAvatarStreamsRoute;\r\n        },\r\n        enumerable: true,\r\n        configurable: true\r\n    });\r\n    /**\r\n     * Parses get route; this route should be expanded with the Id of the profile.\r\n     * @method\r\n     * @param id User Profile id which uniquely identifies user avatar resource that needs to be retrieved.\r\n     * @param options Query resource options object.\r\n     * @example userProfileAvatarRoute.get({id: '<file-id>'});\r\n     **/\r\n    UserProfileAvatarRoute.prototype.get = function (id, options) {\r\n        return _super.prototype.baseGet.call(this, this.getRoute, id, options);\r\n    };\r\n    /**\r\n     * Parses update route; this URI template does not expose any additional options.\r\n     * @method\r\n     * @param data A Profile Avatar object used to update specified Profile Avatar resource.\r\n     * @example userProfileAvatarRoute.update(data);\r\n     **/\r\n    UserProfileAvatarRoute.prototype.update = function (data) {\r\n        return _super.prototype.baseUpdate.call(this, this.updateRoute, data);\r\n    };\r\n    /**\r\n     * Parses link route; this route should be expanded with the Id of the profile.\r\n     * @method\r\n     * @param id User Profile id which uniquely identifies user avatar resource that needs to be retrieved.\r\n     * @param data A Profile Avatar object used to link specified Profile Avatar resource.\r\n     * @example userProfileAvatarRoute.link({id: '<file-id>'});\r\n     **/\r\n    UserProfileAvatarRoute.prototype.link = function (id, data) {\r\n        var params = this.utility.extend({}, data);\r\n        params.id = id;\r\n        return _super.prototype.baseCreate.call(this, this.linkRoute, params);\r\n    };\r\n    /**\r\n     * Parses link route; this route should be expanded with the Id of the profile.\r\n     * @method\r\n     * @param data A Profile Avatar object used to unlink specified Profile Avatar resource.\r\n     * @param options Query resource options object.\r\n     * @example userProfileAvatarRoute.unlink(data);\r\n     **/\r\n    UserProfileAvatarRoute.prototype.unlink = function (data, options) {\r\n        if (!options) {\r\n            options = {};\r\n        }\r\n        return _super.prototype.baseDelete.call(this, this.unlinkRoute, data, options);\r\n    };\r\n    UserProfileAvatarRoute.prototype.createParams = function (data, id) {\r\n        var params = this.utility.extend(data);\r\n        params.id = id;\r\n        return _super.prototype.createParams.call(this, params);\r\n    };\r\n    return UserProfileAvatarRoute;\r\n}(common_1.BaseRoute));\r\nUserProfileAvatarRoute = tslib_1.__decorate([\r\n    tslib_1.__param(0, inversify_1.inject(contracts_1.TYPES.IAppOptions)),\r\n    tslib_1.__param(1, inversify_1.inject(_1.TYPES.UserProfileAvatarStreamsRoute)),\r\n    tslib_1.__metadata(\"design:paramtypes\", [typeof (_a = typeof contracts_1.IAppOptions !== \"undefined\" && contracts_1.IAppOptions) === \"function\" && _a || Object, typeof (_b = typeof _1.UserProfileAvatarStreamsRoute !== \"undefined\" && _1.UserProfileAvatarStreamsRoute) === \"function\" && _b || Object])\r\n], UserProfileAvatarRoute);\r\nexports.UserProfileAvatarRoute = UserProfileAvatarRoute;\r\nvar _a, _b;\r\n/**\r\n * @overview\r\n ***Notes:**\r\n - Refer to the [REST API documentation](https://github.com/Baasic/baasic-rest-api/wiki) for detailed information about available Baasic REST API end-points.\r\n - [URI Template](https://github.com/Baasic/uritemplate-js) syntax enables expanding the Baasic route templates to Baasic REST URIs providing it with an object that contains URI parameters.\r\n - All end-point objects are transformed by the associated route service.\r\n */ \r\n\n\n\n//////////////////\n// WEBPACK FOOTER\n// ./src/modules/userProfile/userProfileAvatarRoute.ts\n// module id = 344\n// module chunks = 0","/* globals module */\r\n/**\r\n * @module userProfileAvatarStreamsClient\r\n * @description  User Profile Avatar Streams Client provides Baasic route templates which can be expanded to Baasic REST URIs. Various services can use Baasic User Profile Avatar Streams Route Definition to obtain needed routes while other routes will be obtained through HAL. By convention, all route services use the same function names as their corresponding services.\r\n */\r\n\"use strict\";\r\nObject.defineProperty(exports, \"__esModule\", { value: true });\r\nvar tslib_1 = require(\"tslib\");\r\nvar inversify_1 = require(\"inversify\");\r\nvar httpApi_1 = require(\"../../httpApi\");\r\nvar _1 = require(\"./\");\r\nvar UserProfileAvatarStreamsClient = (function () {\r\n    function UserProfileAvatarStreamsClient(userProfileAvatarStreamsRoute, apiClient) {\r\n        this.userProfileAvatarStreamsRoute = userProfileAvatarStreamsRoute;\r\n        this.apiClient = apiClient;\r\n    }\r\n    Object.defineProperty(UserProfileAvatarStreamsClient.prototype, \"routeDefinition\", {\r\n        get: function () {\r\n            return this.userProfileAvatarStreamsRoute;\r\n        },\r\n        enumerable: true,\r\n        configurable: true\r\n    });\r\n    /**\r\n     * Returns a promise that is resolved once the get action has been performed. Success response returns the file stream if successfully completed. If derived resource's format is passed, such as `width` and `height` for the image type of file resource, the operation will return a stream of the derived resource. Otherwise, stream of the original file resource will be retrieved.\r\n     * @method\r\n     * @param data User unique identifier.\r\n     * @returns A promise that is resolved once the get action has been performed.\r\n     * @example // Request the original file stream\r\n                    userProfileAvatarStreamsClient.get({id: '<file-id>'})\r\n                        .then(function (data) {\r\n                            // perform success action here\r\n                        },\r\n                         function (response, status, headers, config) {\r\n                             // perform error handling here\r\n                        });\r\n                    // Request derived file stream\r\n                    userProfileAvatarStreamsClient.get({id: '<file-id>', width: <width>, height: <height>})\r\n                        .then(function (data) {\r\n                            // perform success action here\r\n                        },\r\n                         function (response, status, headers, config) {\r\n                             // perform error handling here\r\n                        });\r\n     **/\r\n    UserProfileAvatarStreamsClient.prototype.get = function (data) {\r\n        return this.apiClient.get(this.routeDefinition.get(data));\r\n    };\r\n    /**\r\n     * Returns a promise that is resolved once the get action has been performed. Success response returns the file stream as a blob. If derived resource's format is passed, such as `width` and `height` for the image type of file resource, the operation will return a blob of the derived file resource. Otherwise, blob of the original file resource will be retrieved. For more information on Blob objects please see [Blob Documentation](https://developer.mozilla.org/en-US/docs/Web/API/Blob).\r\n     * @method\r\n     * @example // Request the original blob\r\n                    userProfileAvatarStreamsClient.getBlob('<file-id>')\r\n                        .then(function (data) {\r\n                            // perform success action here\r\n                        },\r\n                         function (response, status, headers, config) {\r\n                             // perform error handling here\r\n                        });\r\n                        // Request derived blob\r\n                        userProfileAvatarStreamsClient.getBlob({id: '<file-id>', width: <width>, height: <height>})\r\n                            .then(function (data) {\r\n                                // perform success action here\r\n                            },\r\n                             function (response, status, headers, config) {\r\n                                 // perform error handling here\r\n                            });\r\n     **/\r\n    UserProfileAvatarStreamsClient.prototype.getBlob = function (data) {\r\n        return this.apiClient.get(this.userProfileAvatarStreamsRoute.get(data), { 'Accept': 'application/octet-stream' });\r\n    };\r\n    /**\r\n     * Returns a promise that is resolved once the create file stream action has been performed; this action will upload the specified blob. For more information on Blob objects please see [Blob Documentation](https://developer.mozilla.org/en-US/docs/Web/API/Blob).\r\n     * @method\r\n     * @param id\r\n     * @param data\r\n     * @param stream\r\n     * @returns A promise that is resolved once the create file stream action has been performed.\r\n     * @example userProfileAvatarStreamsClient.create('<file-id>', '<filename'>, <blob>)\r\n                    .then(function (data) {\r\n                        // perform success action here\r\n                    },\r\n                     function (response, status, headers, config) {\r\n                         // perform error handling here\r\n                    });\r\n     **/\r\n    UserProfileAvatarStreamsClient.prototype.create = function (id, data, stream) {\r\n        var formData = new FormData();\r\n        formData.append('file', stream);\r\n        return this.apiClient.post(this.userProfileAvatarStreamsRoute.create(id, data), data, { 'Content-Type': undefined });\r\n    };\r\n    /**\r\n     * Returns a promise that is resolved once the update file stream action has been performed; this action will replace the existing stream with a new one. Alternatively, if a derived stream is being updated it will either create a new derived stream or replace the existing one. In order to update a derived stream, format needs to be passed (For example: `width` and `height` for the image type of file stream data type).\r\n     * @method\r\n     * @param data\r\n     * @param stream\r\n     * @returns A promise that is resolved once the update file stream action has been performed.\r\n     * @example // Update original file stream\r\n                    userProfileAvatarStreamsClient.update('<file-id>', <file-stream>)\r\n                        .then(function (data) {\r\n                            // perform success action here\r\n                        },\r\n                         function (response, status, headers, config) {\r\n                             // perform error handling here\r\n                        });\r\n                        // Update derived file stream\r\n                        userProfileAvatarStreamsClient.update({id: '<file-id>', width: <width>, height: <height>}, <file-stream>)\r\n                            .then(function (data) {\r\n                                // perform success action here\r\n                            },\r\n                             function (response, status, headers, config) {\r\n                                 // perform error handling here\r\n                            });\r\n     **/\r\n    UserProfileAvatarStreamsClient.prototype.update = function (data, stream) {\r\n        var formData = new FormData();\r\n        formData.append('file', stream);\r\n        return this.apiClient.put(this.userProfileAvatarStreamsRoute.update(data), data, { 'Content-Type': undefined });\r\n    };\r\n    return UserProfileAvatarStreamsClient;\r\n}());\r\nUserProfileAvatarStreamsClient = tslib_1.__decorate([\r\n    inversify_1.injectable(),\r\n    tslib_1.__param(0, inversify_1.inject(_1.TYPES.UserProfileAvatarStreamsRoute)),\r\n    tslib_1.__param(1, inversify_1.inject(httpApi_1.httpTYPES.ApiClient)),\r\n    tslib_1.__metadata(\"design:paramtypes\", [typeof (_a = typeof _1.UserProfileAvatarStreamsRoute !== \"undefined\" && _1.UserProfileAvatarStreamsRoute) === \"function\" && _a || Object, typeof (_b = typeof httpApi_1.ApiClient !== \"undefined\" && httpApi_1.ApiClient) === \"function\" && _b || Object])\r\n], UserProfileAvatarStreamsClient);\r\nexports.UserProfileAvatarStreamsClient = UserProfileAvatarStreamsClient;\r\nvar _a, _b;\r\n/**\r\n * @overview\r\n ***Notes:**\r\n - Refer to the [REST API documentation](https://github.com/Baasic/baasic-rest-api/wiki) for detailed information about available Baasic REST API end-points.\r\n - All end-point objects are transformed by the associated route service.\r\n */ \r\n\n\n\n//////////////////\n// WEBPACK FOOTER\n// ./src/modules/userProfile/userProfileAvatarStreamsClient.ts\n// module id = 345\n// module chunks = 0","/* globals module */\r\n/**\r\n * @module userProfileAvatarStreamsRoute\r\n * @description Baasic User Profile Avatar Streams Route Definition provides Baasic route templates which can be expanded to Baasic REST URIs. Various services can use Baasic User Profile Avatar Streams Route Definition to obtain needed routes while other routes will be obtained through HAL. By convention, all route services use the same function names as their corresponding services.\r\n */\r\n\"use strict\";\r\nObject.defineProperty(exports, \"__esModule\", { value: true });\r\nvar tslib_1 = require(\"tslib\");\r\nvar inversify_1 = require(\"inversify\");\r\nvar common_1 = require(\"../../common\");\r\nvar contracts_1 = require(\"../../core/contracts\");\r\nvar UserProfileAvatarStreamsRoute = (function (_super) {\r\n    tslib_1.__extends(UserProfileAvatarStreamsRoute, _super);\r\n    function UserProfileAvatarStreamsRoute(appOptions) {\r\n        var _this = _super.call(this, appOptions) || this;\r\n        _this.appOptions = appOptions;\r\n        _this.getRoute = 'profiles/{id}/avatar-streams/{?width,height}';\r\n        _this.createRoute = 'profiles/{id}/avatar-streams/{filename}';\r\n        _this.updateRoute = 'profiles/{id}/avatar-streams/{?width,height}';\r\n        return _this;\r\n    }\r\n    /**\r\n     * Parses get route; this route should be expanded with id of profile. Additional supported items are:\r\n     * - `width` - width of desired derived image.\r\n     * - `height` - height of desired derived image.\r\n     * @method\r\n     * @example userProfileAvatarStreamsRoute.get({id: '<file-id>'});\r\n     **/\r\n    UserProfileAvatarStreamsRoute.prototype.get = function (data) {\r\n        if (!this.utility.isObject(data)) {\r\n            data = {\r\n                id: data\r\n            };\r\n        }\r\n        return _super.prototype.baseCreate.call(this, this.getRoute, data);\r\n    };\r\n    /**\r\n     * Parses create route; this route should be expanded with the filename which indicates where the stream will be saved as well with id of the profile.\r\n     * @method\r\n     * @example userProfileAvatarStreamRoute.create({ filename: '<filename>', id: '<file-id>' });\r\n     **/\r\n    UserProfileAvatarStreamsRoute.prototype.create = function (id, data) {\r\n        if (!this.utility.isObject(data)) {\r\n            data = {\r\n                filename: data\r\n            };\r\n        }\r\n        var params = this.utility.extend({}, data);\r\n        params.id = id;\r\n        return _super.prototype.baseCreate.call(this, this.createRoute, params);\r\n    };\r\n    /**\r\n     * Parses update route; this route should be expanded with the id of the profile. Additional supported items are:\r\n     * - `width` - width of derived image to update.\r\n     * - `height` - height of derived image to update.\r\n     * @method\r\n     * @param data\r\n     * @example userProfileAvatarStreamsRoute.update({id: '<file-id>'});\r\n     **/\r\n    UserProfileAvatarStreamsRoute.prototype.update = function (data) {\r\n        if (!this.utility.isObject(data)) {\r\n            data = {\r\n                id: data\r\n            };\r\n        }\r\n        return _super.prototype.baseCreate.call(this, this.updateRoute, data);\r\n    };\r\n    return UserProfileAvatarStreamsRoute;\r\n}(common_1.BaseRoute));\r\nUserProfileAvatarStreamsRoute = tslib_1.__decorate([\r\n    tslib_1.__param(0, inversify_1.inject(contracts_1.TYPES.IAppOptions)),\r\n    tslib_1.__metadata(\"design:paramtypes\", [typeof (_a = typeof contracts_1.IAppOptions !== \"undefined\" && contracts_1.IAppOptions) === \"function\" && _a || Object])\r\n], UserProfileAvatarStreamsRoute);\r\nexports.UserProfileAvatarStreamsRoute = UserProfileAvatarStreamsRoute;\r\nvar _a;\r\n/**\r\n * @overview\r\n ***Notes:**\r\n - Refer to the [REST API documentation](https://github.com/Baasic/baasic-rest-api/wiki) for detailed information about available Baasic REST API end-points.\r\n - [URI Template](https://github.com/Baasic/uritemplate-js) syntax enables expanding the Baasic route templates to Baasic REST URIs providing it with an object that contains URI parameters.\r\n - All end-point objects are transformed by the associated route service.\r\n */ \r\n\n\n\n//////////////////\n// WEBPACK FOOTER\n// ./src/modules/userProfile/userProfileAvatarStreamsRoute.ts\n// module id = 346\n// module chunks = 0","/* globals module */\r\n/**\r\n * @module userProfileClient\r\n * @description  User Profile Client provides an easy way to consume  User Profile REST API end-points. In order to obtain needed routes `userProfileClient` uses `userProfileRoute`.\r\n */\r\n\"use strict\";\r\nObject.defineProperty(exports, \"__esModule\", { value: true });\r\nvar tslib_1 = require(\"tslib\");\r\nvar inversify_1 = require(\"inversify\");\r\n;\r\nvar httpApi_1 = require(\"../../httpApi\");\r\nvar _1 = require(\"./\");\r\nvar UserProfileClient = (function () {\r\n    function UserProfileClient(userProfileACLClient, userProfileRoute, apiClient, userEducationClient, userProfileAvatarClient, userSkillClient, userWorkClient) {\r\n        this.userProfileACLClient = userProfileACLClient;\r\n        this.userProfileRoute = userProfileRoute;\r\n        this.apiClient = apiClient;\r\n        this.userEducationClient = userEducationClient;\r\n        this.userProfileAvatarClient = userProfileAvatarClient;\r\n        this.userSkillClient = userSkillClient;\r\n        this.userWorkClient = userWorkClient;\r\n    }\r\n    Object.defineProperty(UserProfileClient.prototype, \"acl\", {\r\n        get: function () {\r\n            return this.userProfileACLClient;\r\n        },\r\n        enumerable: true,\r\n        configurable: true\r\n    });\r\n    Object.defineProperty(UserProfileClient.prototype, \"routeDefinition\", {\r\n        get: function () {\r\n            return this.userProfileRoute;\r\n        },\r\n        enumerable: true,\r\n        configurable: true\r\n    });\r\n    Object.defineProperty(UserProfileClient.prototype, \"education\", {\r\n        get: function () {\r\n            return this.userEducationClient;\r\n        },\r\n        enumerable: true,\r\n        configurable: true\r\n    });\r\n    Object.defineProperty(UserProfileClient.prototype, \"avatar\", {\r\n        get: function () {\r\n            return this.userProfileAvatarClient;\r\n        },\r\n        enumerable: true,\r\n        configurable: true\r\n    });\r\n    Object.defineProperty(UserProfileClient.prototype, \"skill\", {\r\n        get: function () {\r\n            return this.userSkillClient;\r\n        },\r\n        enumerable: true,\r\n        configurable: true\r\n    });\r\n    Object.defineProperty(UserProfileClient.prototype, \"work\", {\r\n        get: function () {\r\n            return this.userWorkClient;\r\n        },\r\n        enumerable: true,\r\n        configurable: true\r\n    });\r\n    /**\r\n     * Returns a promise that is resolved once the find action has been performed. Success response returns a list of user profile resources matching the given criteria.\r\n     * @method\r\n     * @param options Query resource options object.\r\n     * @returns A promise that is resolved once the find action has been performed.\r\n     * @example userProfileClient.find({\r\n                    pageNumber : 1,\r\n                    pageSize : 10,\r\n                    orderBy : '<field>',\r\n                    orderDirection : '<asc|desc>',\r\n                    search : '<search-phrase>'\r\n                })\r\n                .then(function (collection) {\r\n                    // perform success action here\r\n                },\r\n                 function (response, status, headers, config) {\r\n                     // perform error handling here\r\n                });\r\n     **/\r\n    UserProfileClient.prototype.find = function (options) {\r\n        return this.apiClient.get(this.routeDefinition.find(options));\r\n    };\r\n    /**\r\n     * Returns a promise that is resolved once the get action has been performed. Success response returns the user profile resource.\r\n     * @method\r\n     * @param id User profile id which uniquely identifies user profile resource that needs to be retrieved.\r\n     * @param options Query resource options object.\r\n     * @returns A promise that is resolved once the get action has been performed.\r\n     * @example userProfileClient.get()\r\n                    .then(function (data) {\r\n                        // perform success action here\r\n                    },\r\n                     function (response, status, headers, config) {\r\n                         // perform error handling here\r\n                    });\r\n     **/\r\n    UserProfileClient.prototype.get = function (id, options) {\r\n        return this.apiClient.get(this.userProfileRoute.get(id, options));\r\n    };\r\n    /**\r\n     * Returns a promise that is resolved once the create user profile action has been performed; this action creates a new user profile resource.\r\n     * @method\r\n     * @param data An user profile object that needs to be inserted into the system.\r\n     * @returns A promise that is resolved once the create user profile action has been performed.\r\n     * @example userProfileClient.create({\r\n                    firstName : '<first-name>',\r\n                    lastName : '<last-name>',\r\n                    displayName: '<nick-name>'\r\n                }.then(function (data) {\r\n                    // perform success action here\r\n                },\r\n                 function (response, status, headers, config) {\r\n                     // perform error handling here\r\n                });\r\n     **/\r\n    UserProfileClient.prototype.create = function (data) {\r\n        return this.apiClient.post(this.routeDefinition.create(), this.routeDefinition.createParams(data));\r\n    };\r\n    /**\r\n     * Returns a promise that is resolved once the update user profile action has been performed; this action updates a user profile resource. This route uses HAL enabled objects to obtain routes and therefore it doesn't apply `userProfileRoute` route template. Here is an example of how a route can be obtained from HAL enabled objects:\r\n     * ```\r\n     * let params = modelMapper.removeParams(userProfile);\r\n     * let uri = params['model'].links('put').href;\r\n     * ```\r\n     * @method\r\n     * @param data An user profile object used to update specified user profile resource.\r\n     * @returns A promise that is resolved once the update user profile action has been performed.\r\n     * @example // userProfile is a resource previously fetched using get action.\r\n                       userProfile.displayName = '<nick-name>';\r\n                       userProfileClient.update(userProfile)\r\n                           .then(function (data) {\r\n                               // perform success action here\r\n                           },\r\n                            function (response, status, headers, config) {\r\n                                // perform error handling here\r\n                           });\r\n    **/\r\n    UserProfileClient.prototype.update = function (data) {\r\n        return this.apiClient.put(this.routeDefinition.update(data), this.routeDefinition.updateParams(data));\r\n    };\r\n    /**\r\n     * Returns a promise that is resolved once the remove action has been performed. This action will remove a user profile resource from the system if successfully completed. This route uses HAL enabled objects to obtain routes and therefore it doesn't apply `userProfileRoute` route template. Here is an example of how a route can be obtained from HAL enabled objects:\r\n     * ```\r\n     * let params = modelMapper.removeParams(userProfile);\r\n     * let uri = params['model'].links('delete').href;\r\n     * ```\r\n     * @method\r\n     * @param data An user profile object used to delete specified user profile resource.\r\n     * @returns A promise that is resolved once the remove action has been performed.\r\n     * @example // userProfile is a resource previously fetched using get action.\r\n                    userProfileClient.remove(userProfile)\r\n                        .then(function (data) {\r\n                            // perform success action here\r\n                        },\r\n                         function (response, status, headers, config) {\r\n                             // perform error handling here\r\n                        });\r\n     **/\r\n    UserProfileClient.prototype.remove = function (data) {\r\n        return this.apiClient.delete(this.routeDefinition.delete(data));\r\n    };\r\n    return UserProfileClient;\r\n}());\r\nUserProfileClient = tslib_1.__decorate([\r\n    inversify_1.injectable(),\r\n    tslib_1.__param(0, inversify_1.inject(_1.TYPES.UserProfileACLClient)),\r\n    tslib_1.__param(1, inversify_1.inject(_1.TYPES.UserProfileRoute)),\r\n    tslib_1.__param(2, inversify_1.inject(httpApi_1.httpTYPES.ApiClient)),\r\n    tslib_1.__param(3, inversify_1.inject(_1.TYPES.UserEducationClient)),\r\n    tslib_1.__param(4, inversify_1.inject(_1.TYPES.UserProfileAvatarClient)),\r\n    tslib_1.__param(5, inversify_1.inject(_1.TYPES.UserSkillClient)),\r\n    tslib_1.__param(6, inversify_1.inject(_1.TYPES.UserWorkClient)),\r\n    tslib_1.__metadata(\"design:paramtypes\", [typeof (_a = typeof _1.UserProfileACLClient !== \"undefined\" && _1.UserProfileACLClient) === \"function\" && _a || Object, typeof (_b = typeof _1.UserProfileRoute !== \"undefined\" && _1.UserProfileRoute) === \"function\" && _b || Object, typeof (_c = typeof httpApi_1.ApiClient !== \"undefined\" && httpApi_1.ApiClient) === \"function\" && _c || Object, typeof (_d = typeof _1.UserEducationClient !== \"undefined\" && _1.UserEducationClient) === \"function\" && _d || Object, typeof (_e = typeof _1.UserProfileAvatarClient !== \"undefined\" && _1.UserProfileAvatarClient) === \"function\" && _e || Object, typeof (_f = typeof _1.UserSkillClient !== \"undefined\" && _1.UserSkillClient) === \"function\" && _f || Object, typeof (_g = typeof _1.UserWorkClient !== \"undefined\" && _1.UserWorkClient) === \"function\" && _g || Object])\r\n], UserProfileClient);\r\nexports.UserProfileClient = UserProfileClient;\r\nvar _a, _b, _c, _d, _e, _f, _g;\r\n/**\r\n * @copyright (c) 2017 Mono Ltd\r\n * @license MIT\r\n * @author Mono Ltd\r\n * @overview\r\n ***Notes:**\r\n - Refer to the [Baasic REST API](http://dev.baasic.com/api/reference/home) for detailed information about available Baasic REST API end-points.\r\n - All end-point objects are transformed by the associated route definition.\r\n */ \r\n\n\n\n//////////////////\n// WEBPACK FOOTER\n// ./src/modules/userProfile/userProfileClient.ts\n// module id = 347\n// module chunks = 0","/* globals module */\r\n/**\r\n * @module userProfileRoute\r\n * @description Baasic User Profile Route Definition provides Baasic route templates which can be expanded to Baasic REST URIs. Various services can use Baasic User Profile Route Definition to obtain needed routes while other routes will be obtained through HAL. By convention, all route services  use the same function names as their corresponding services.\r\n */\r\n\"use strict\";\r\nObject.defineProperty(exports, \"__esModule\", { value: true });\r\nvar tslib_1 = require(\"tslib\");\r\nvar inversify_1 = require(\"inversify\");\r\nvar common_1 = require(\"../../common\");\r\n;\r\nvar _1 = require(\"./\");\r\nvar contracts_1 = require(\"../../core/contracts\");\r\nvar UserProfileRoute = (function (_super) {\r\n    tslib_1.__extends(UserProfileRoute, _super);\r\n    function UserProfileRoute(appOptions, userProfileACLRoute) {\r\n        var _this = _super.call(this, appOptions) || this;\r\n        _this.appOptions = appOptions;\r\n        _this.userProfileACLRoute = userProfileACLRoute;\r\n        _this.findRoute = 'profiles/{?searchQuery,page,rpp,sort,embed,fields}';\r\n        _this.getRoute = 'profiles/{id}/{?embed,fields}';\r\n        _this.createRoute = 'profiles';\r\n        _this.updateRoute = 'profiles/{id}';\r\n        _this.deleteRoute = 'profiles/{id}';\r\n        return _this;\r\n    }\r\n    Object.defineProperty(UserProfileRoute.prototype, \"acl\", {\r\n        get: function () {\r\n            return this.userProfileACLRoute;\r\n        },\r\n        enumerable: true,\r\n        configurable: true\r\n    });\r\n    /**\r\n     * Parses find user profile route which can be expanded with additional options. Supported items are:\r\n     * - `searchQuery` - A string value used to identify user profile resources using the phrase search.\r\n     * - `page` - A value used to set the page number, i.e. to retrieve certain user profile subset from the storage.\r\n     * - `rpp` - A value used to limit the size of result set per page.\r\n     * - `sort` - A string used to set the user profile property to sort the result collection by.\r\n     * - `embed` - Comma separated list of resources to be contained within the current representation.\r\n     * @method\r\n     * @param options Query resource options object.\r\n     * @example userProfileRoute.find.({searchQuery: '<search-phrase>'});\r\n     **/\r\n    UserProfileRoute.prototype.find = function (options) {\r\n        return _super.prototype.baseFind.call(this, this.findRoute, options);\r\n    };\r\n    /**\r\n     * Parses get route; this route doesn't expose any properties.\r\n     * @method\r\n     * @param id User profile id which uniquely identifies user profile resource that needs to be retrieved.\r\n     * @param options Query resource options object.\r\n     * @example userProfileRoute.get(id, options);\r\n     **/\r\n    UserProfileRoute.prototype.get = function (id, options) {\r\n        return _super.prototype.baseGet.call(this, this.getRoute, id, options);\r\n    };\r\n    /**\r\n     * Parses create user profile route; this URI template does not expose any additional options.\r\n     * @method\r\n     * @example baasicUserProfileRouteService.create();\r\n     **/\r\n    UserProfileRoute.prototype.create = function () {\r\n        return _super.prototype.baseCreate.call(this, this.createRoute, {});\r\n    };\r\n    /**\r\n     * Parses update user profile route; this URI template does not expose any additional options.\r\n     * @method\r\n     * @param data An user profile object used to update specified user profile resource.\r\n     * @example baasicUserProfileRouteService.update(data);\r\n     **/\r\n    UserProfileRoute.prototype.update = function (data) {\r\n        return _super.prototype.baseUpdate.call(this, this.updateRoute, data);\r\n    };\r\n    /**\r\n     * Parses update user profile route; this URI template does not expose any additional options.\r\n     * @method\r\n     * @param data An user profile object used to delete specified user profile resource.\r\n     * @example baasicUserProfileRouteService.delete(data);\r\n     **/\r\n    UserProfileRoute.prototype.delete = function (data) {\r\n        return _super.prototype.baseDelete.call(this, this.deleteRoute, data);\r\n    };\r\n    return UserProfileRoute;\r\n}(common_1.BaseRoute));\r\nUserProfileRoute = tslib_1.__decorate([\r\n    tslib_1.__param(0, inversify_1.inject(contracts_1.TYPES.IAppOptions)),\r\n    tslib_1.__param(1, inversify_1.inject(_1.TYPES.UserProfileACLRoute)),\r\n    tslib_1.__metadata(\"design:paramtypes\", [typeof (_a = typeof contracts_1.IAppOptions !== \"undefined\" && contracts_1.IAppOptions) === \"function\" && _a || Object, typeof (_b = typeof _1.UserProfileACLRoute !== \"undefined\" && _1.UserProfileACLRoute) === \"function\" && _b || Object])\r\n], UserProfileRoute);\r\nexports.UserProfileRoute = UserProfileRoute;\r\nvar _a, _b;\r\n/**\r\n * @copyright (c) 2017 Mono Ltd\r\n * @license MIT\r\n * @author Mono Ltd\r\n * @overview\r\n ***Notes:**\r\n - Refer to the [Baasic REST API](http://dev.baasic.com/api/reference/home) for detailed information about available Baasic REST API end-points.\r\n - [URI Template](https://github.com/Baasic/uritemplate-js) syntax enables expanding the Baasic route templates to Baasic REST URIs providing it with an object that contains URI parameters.\r\n - All end-point objects are transformed by the associated route definition.\r\n */ \r\n\n\n\n//////////////////\n// WEBPACK FOOTER\n// ./src/modules/userProfile/userProfileRoute.ts\n// module id = 348\n// module chunks = 0","/* globals module */\r\n/**\r\n * @module userSkillClient\r\n * @description  User Skill Client provides Baasic route templates which can be expanded to Baasic REST URIs. Various services can use Baasic User Skill Route Definition to obtain needed routes while other routes will be obtained through HAL. By convention, all route services use the same function names as their corresponding services.\r\n */\r\n\"use strict\";\r\nObject.defineProperty(exports, \"__esModule\", { value: true });\r\nvar tslib_1 = require(\"tslib\");\r\nvar inversify_1 = require(\"inversify\");\r\n;\r\nvar httpApi_1 = require(\"../../httpApi\");\r\nvar _1 = require(\"./\");\r\nvar UserSkillClient = (function () {\r\n    function UserSkillClient(userSkillRoute, apiClient) {\r\n        this.userSkillRoute = userSkillRoute;\r\n        this.apiClient = apiClient;\r\n    }\r\n    Object.defineProperty(UserSkillClient.prototype, \"routeDefinition\", {\r\n        get: function () {\r\n            return this.userSkillRoute;\r\n        },\r\n        enumerable: true,\r\n        configurable: true\r\n    });\r\n    /**\r\n     * Returns a promise that is resolved once the find action has been performed. Success response returns a list of user skill resources matching the given criteria.\r\n     * @method\r\n     * @param options Query resource options object.\r\n     * @returns A promise that is resolved once the find action has been performed.\r\n     * @example userSkillClient.find({\r\n                    pageNumber : 1,\r\n                    pageSize : 10,\r\n                    orderBy : '<field>',\r\n                    orderDirection : '<asc|desc>',\r\n                    search : '<search-phrase>'\r\n                })\r\n                .then(function (collection) {\r\n                    // perform success action here\r\n                },\r\n                 function (response, status, headers, config) {\r\n                     // perform error handling here\r\n                });\r\n     **/\r\n    UserSkillClient.prototype.find = function (options) {\r\n        return this.apiClient.get(this.routeDefinition.find(options));\r\n    };\r\n    /**\r\n     * Returns a promise that is resolved once the get action has been performed. Success response returns the user skill resource.\r\n     * @method\r\n     * @param id User profile id or display name which uniquely identifies user profile whose skill resources need to be retrieved.\r\n     * @param options Query resource options object.\r\n     * @returns A promise that is resolved once the get action has been performed.\r\n     * @example userSkillClient.get()\r\n                    .then(function (data) {\r\n                        // perform success action here\r\n                    },\r\n                     function (response, status, headers, config) {\r\n                         // perform error handling here\r\n                    });\r\n     **/\r\n    UserSkillClient.prototype.get = function (id, options) {\r\n        return this.apiClient.get(this.userSkillRoute.get(id, options));\r\n    };\r\n    /**\r\n     * Returns a promise that is resolved once the create user skill action has been performed; this action creates a new user skill resource.\r\n     * @method\r\n     * @param data An user skill object that needs to be inserted into the system.\r\n     * @returns A promise that is resolved once the create user skill action has been performed.\r\n     * @example userSkillClient.create({ skillName : '<skill-name>', userId: '<user-id>' })\r\n                    .then(function (data) {\r\n                        // perform success action here\r\n                    },\r\n                     function (response, status, headers, config) {\r\n                         // perform error handling here\r\n                    });\r\n     **/\r\n    UserSkillClient.prototype.create = function (data) {\r\n        return this.apiClient.post(this.routeDefinition.create(data), this.routeDefinition.createParams(data));\r\n    };\r\n    /**\r\n     * Returns a promise that is resolved once the update user skill action has been performed; this action updates a user skill resource. This route uses HAL enabled objects to obtain routes and therefore it doesn't apply `userSkillRoute` route template. Here is an example of how a route can be obtained from HAL enabled objects:\r\n     * ```\r\n     * let params = modelMapper.removeParams(skill);\r\n     * let uri = params['model'].links('put').href;\r\n     * ```\r\n     * @method\r\n     * @param data An user skill object used to update specified user skill resource.\r\n     * @returns A promise that is resolved once the update user skill action has been performed.\r\n     * @example // skill is a resource previously fetched using get action.\r\n                       skill.description = '<description>';\r\n                       userSkillClient.update(skill)\r\n                           .then(function (data) {\r\n                               // perform success action here\r\n                           },\r\n                            function (response, status, headers, config) {\r\n                                // perform error handling here\r\n                           });\r\n    **/\r\n    UserSkillClient.prototype.update = function (data) {\r\n        return this.apiClient.put(this.routeDefinition.update(data), this.routeDefinition.updateParams(data));\r\n    };\r\n    /**\r\n     * Returns a promise that is resolved once the remove action has been performed. This action will remove a user skill resource from the system if successfully completed. This route uses HAL enabled objects to obtain routes and therefore it doesn't apply `userSkillRoute` route template. Here is an example of how a route can be obtained from HAL enabled objects:\r\n     * ```\r\n     * let params = modelMapper.removeParams(skill);\r\n     * let uri = params['model'].links('delete').href;\r\n     * ```\r\n     * @method\r\n     * @param data An user skill object used to delete specific user skill resource in the system.\r\n     * @returns A promise that is resolved once the remove action has been performed.\r\n     * @example // skill is a resource previously fetched using get action.\r\n                    userSkillClient.remove(skill)\r\n                        .then(function (data) {\r\n                            // perform success action here\r\n                        },\r\n                         function (response, status, headers, config) {\r\n                             // perform error handling here\r\n                        });\r\n     **/\r\n    UserSkillClient.prototype.remove = function (data) {\r\n        return this.apiClient.delete(this.routeDefinition.delete(data));\r\n    };\r\n    return UserSkillClient;\r\n}());\r\nUserSkillClient = tslib_1.__decorate([\r\n    inversify_1.injectable(),\r\n    tslib_1.__param(0, inversify_1.inject(_1.TYPES.UserSkillRoute)),\r\n    tslib_1.__param(1, inversify_1.inject(httpApi_1.httpTYPES.ApiClient)),\r\n    tslib_1.__metadata(\"design:paramtypes\", [typeof (_a = typeof _1.UserSkillRoute !== \"undefined\" && _1.UserSkillRoute) === \"function\" && _a || Object, typeof (_b = typeof httpApi_1.ApiClient !== \"undefined\" && httpApi_1.ApiClient) === \"function\" && _b || Object])\r\n], UserSkillClient);\r\nexports.UserSkillClient = UserSkillClient;\r\nvar _a, _b;\r\n/**\r\n * @overview\r\n ***Notes:**\r\n - Refer to the [REST API documentation](https://github.com/Baasic/baasic-rest-api/wiki) for detailed information about available Baasic REST API end-points.\r\n - All end-point objects are transformed by the associated route definition.\r\n */ \r\n\n\n\n//////////////////\n// WEBPACK FOOTER\n// ./src/modules/userProfile/userSkillClient.ts\n// module id = 349\n// module chunks = 0","/* globals module */\r\n/**\r\n * @module userSkillRoute\r\n * @description Baasic User Skill Route Definition provides Baasic route templates which can be expanded to Baasic REST URIs. Various services can use Baasic User Skill Route Definition to obtain needed routes while other routes will be obtained through HAL. By convention, all route services use the same function names as their corresponding services.\r\n */\r\n\"use strict\";\r\nObject.defineProperty(exports, \"__esModule\", { value: true });\r\nvar tslib_1 = require(\"tslib\");\r\nvar inversify_1 = require(\"inversify\");\r\nvar common_1 = require(\"../../common\");\r\n;\r\nvar contracts_1 = require(\"../../core/contracts\");\r\nvar UserSkillRoute = (function (_super) {\r\n    tslib_1.__extends(UserSkillRoute, _super);\r\n    function UserSkillRoute(appOptions) {\r\n        var _this = _super.call(this, appOptions) || this;\r\n        _this.appOptions = appOptions;\r\n        _this.findRoute = 'profiles/{userId}/skills/{?searchQuery,page,rpp,sort,embed,fields}';\r\n        _this.getRoute = 'profiles/{userId}/skills/{id}/{?embed,fields}';\r\n        _this.createRoute = 'profiles/{userId}/skills';\r\n        _this.updateRoute = 'profiles/{userId}/skills/{id}';\r\n        _this.deleteRoute = 'profiles/{userId}/skills/{id}';\r\n        return _this;\r\n    }\r\n    /**\r\n     * Parses find route which can be expanded with additional options. Supported items are:\r\n     * - `searchQuery` - A string referencing user skill properties using the phrase or BQL (Baasic Query Language) search.\r\n     * - `page` - A value used to set the page number, i.e. to retrieve certain user skill subset from the storage.\r\n     * - `rpp` - A value used to limit the size of result set per page.\r\n     * - `sort` - A string used to set the user skill property to sort the result collection by.\r\n     * - `embed` - Comma separated list of resources to be contained within the current representation.\r\n     * @method\r\n     * @param options Query resource options object.\r\n     * @example userSkillRoute.find({searchQuery: '<search-phrase>'});\r\n     **/\r\n    UserSkillRoute.prototype.find = function (options) {\r\n        return _super.prototype.baseFind.call(this, this.findRoute, options);\r\n    };\r\n    /**\r\n     * Parses get route; this route doesn't expose any properties.\r\n     * @method\r\n     * @param id User profile id or display name which uniquely identifies user profile whose skill resources need to be retrieved.\r\n     * @param options Query resource options object.\r\n     * @example userSkillRoute.get(id, options);\r\n     **/\r\n    UserSkillRoute.prototype.get = function (id, options) {\r\n        return _super.prototype.baseGet.call(this, this.getRoute, id, options);\r\n    };\r\n    /**\r\n     * Parses create route; this URI template does not expose any additional options.\r\n     * @method\r\n     * @param data An user skill object that needs to be inserted into the system.\r\n     * @example userSkillRoute.create(data);\r\n     **/\r\n    UserSkillRoute.prototype.create = function (data) {\r\n        return _super.prototype.baseCreate.call(this, this.createRoute, data);\r\n    };\r\n    /**\r\n     * Parses update route; this URI template does not expose any additional options.\r\n     * @method\r\n     * @param data An user skill object used to update specific user skill resource in the system.\r\n     * @example userSkillRoute.update(data);\r\n     **/\r\n    UserSkillRoute.prototype.update = function (data) {\r\n        return _super.prototype.baseUpdate.call(this, this.updateRoute, data);\r\n    };\r\n    /**\r\n     * Parses delete route; this URI template does not expose any additional options.\r\n     * @method\r\n     * @param data An user skill object used to delete specific user skill resource in the system.\r\n     * @example userSkillRoute.delete(data);\r\n     **/\r\n    UserSkillRoute.prototype.delete = function (data) {\r\n        return _super.prototype.baseDelete.call(this, this.deleteRoute, data);\r\n    };\r\n    return UserSkillRoute;\r\n}(common_1.BaseRoute));\r\nUserSkillRoute = tslib_1.__decorate([\r\n    tslib_1.__param(0, inversify_1.inject(contracts_1.TYPES.IAppOptions)),\r\n    tslib_1.__metadata(\"design:paramtypes\", [typeof (_a = typeof contracts_1.IAppOptions !== \"undefined\" && contracts_1.IAppOptions) === \"function\" && _a || Object])\r\n], UserSkillRoute);\r\nexports.UserSkillRoute = UserSkillRoute;\r\nvar _a;\r\n/**\r\n * @overview\r\n ***Notes:**\r\n - Refer to the [REST API documentation](https://github.com/Baasic/baasic-rest-api/wiki) for detailed information about available Baasic REST API end-points.\r\n - [URI Template](https://github.com/Baasic/uritemplate-js) syntax enables expanding the Baasic route templates to Baasic REST URIs providing it with an object that contains URI parameters.\r\n - All end-point objects are transformed by the associated route definition.\r\n */ \r\n\n\n\n//////////////////\n// WEBPACK FOOTER\n// ./src/modules/userProfile/userSkillRoute.ts\n// module id = 350\n// module chunks = 0","/* globals module */\r\n/**\r\n * @module userWorkClient\r\n * @description  User Work Client provides  route templates which can be expanded to  REST URIs. Various services can use  User Work Route Client to obtain needed routes while other routes will be obtained through HAL. By convention, all route services use the same function names as their corresponding services.\r\n */\r\n\"use strict\";\r\nObject.defineProperty(exports, \"__esModule\", { value: true });\r\nvar tslib_1 = require(\"tslib\");\r\nvar inversify_1 = require(\"inversify\");\r\n;\r\nvar httpApi_1 = require(\"../../httpApi\");\r\nvar _1 = require(\"./\");\r\nvar UserWorkClient = (function () {\r\n    function UserWorkClient(userWorkRoute, apiClient) {\r\n        this.userWorkRoute = userWorkRoute;\r\n        this.apiClient = apiClient;\r\n    }\r\n    Object.defineProperty(UserWorkClient.prototype, \"routeDefinition\", {\r\n        get: function () {\r\n            return this.userWorkRoute;\r\n        },\r\n        enumerable: true,\r\n        configurable: true\r\n    });\r\n    /**\r\n     * Returns a promise that is resolved once the find action has been performed. Success response returns a list of user work resources matching the given criteria.\r\n     * @method\r\n     * @param options Query resource options object.\r\n     * @returns A promise that is resolved once the find action has been performed.\r\n     * @example userWorkClient.find({\r\n                    pageNumber : 1,\r\n                    pageSize : 10,\r\n                    orderBy : '<field>',\r\n                    orderDirection : '<asc|desc>',\r\n                    search : '<search-phrase>'\r\n                })\r\n                .then(function (collection) {\r\n                    // perform success action here\r\n                },\r\n                 function (response, status, headers, config) {\r\n                     // perform error handling here\r\n                });\r\n     **/\r\n    UserWorkClient.prototype.find = function (options) {\r\n        return this.apiClient.get(this.routeDefinition.find(options));\r\n    };\r\n    /**\r\n     * Returns a promise that is resolved once the get action has been performed. Success response returns the user work resource.\r\n     * @method\r\n     * @param id User work id which uniquely identifies resource that needs to be retrieved.\r\n     * @param options Query resource options object.\r\n     * @example userWorkClient.get()\r\n                    .then(function (data) {\r\n                        // perform success action here\r\n                    },\r\n                     function (response, status, headers, config) {\r\n                         // perform error handling here\r\n                    });\r\n     **/\r\n    UserWorkClient.prototype.get = function (id, options) {\r\n        return this.apiClient.get(this.routeDefinition.get(id, options));\r\n    };\r\n    /**\r\n     * Returns a promise that is resolved once the create user work action has been performed; this action creates a new user work resource.\r\n     * @method\r\n     * @param data An user work object that needs to be inserted into the system.\r\n     * @returns A promise that is resolved once the create user work action has been performed.\r\n     * @example userWorkClient.create({ companyName : '<company-name>', userId: '<user-id>' })\r\n                    .then(function (data) {\r\n                        // perform success action here\r\n                    },\r\n                     function (response, status, headers, config) {\r\n                         // perform error handling here\r\n                    });\r\n     **/\r\n    UserWorkClient.prototype.create = function (data) {\r\n        return this.apiClient.post(this.routeDefinition.create(data), this.routeDefinition.createParams(data));\r\n    };\r\n    /**\r\n     * Returns a promise that is resolved once the update user work action has been performed; this action updates a user work resource. This route uses HAL enabled objects to obtain routes and therefore it doesn't apply `userWorkRoute` route template. Here is an example of how a route can be obtained from HAL enabled objects:\r\n     * ```\r\n     * let params = modelMapper.updateParams(work);\r\n     * let uri = params['model'].links('put').href;\r\n     * ```\r\n     * @method\r\n     * @param data An user work object used to update specified user work resource.\r\n     * @returns A promise that is resolved once the update user work action has been performed.\r\n     * @example // work is a resource previously fetched using get action.\r\n                    work.companyName = '<company-name>';\r\n                    userWorkClient.update(work)\r\n                        .then(function (data) {\r\n                            // perform success action here\r\n                        },\r\n                         function (response, status, headers, config) {\r\n                             // perform error handling here\r\n                        });\r\n     **/\r\n    UserWorkClient.prototype.update = function (data) {\r\n        return this.apiClient.put(this.routeDefinition.update(data), this.routeDefinition.updateParams(data));\r\n    };\r\n    /**\r\n     * Returns a promise that is resolved once the remove action has been performed. This action will remove a user work resource from the system if successfully completed. This route uses HAL enabled objects to obtain routes and therefore it doesn't apply `userWorkRoute` route template. Here is an example of how a route can be obtained from HAL enabled objects:\r\n     * ```\r\n     * let params = modelMapper.removeParams(work);\r\n     * let uri = params['model'].links('delete').href;\r\n     * ```\r\n     * @method\r\n     * @example // work is a resource previously fetched using get action.\r\n                       userWorkClient.remove(work)\r\n                           .then(function (data) {\r\n                               // perform success action here\r\n                           },\r\n                            function (response, status, headers, config) {\r\n                                // perform error handling here\r\n                           });\r\n    **/\r\n    UserWorkClient.prototype.remove = function (data) {\r\n        return this.apiClient.delete(this.routeDefinition.delete(data));\r\n    };\r\n    return UserWorkClient;\r\n}());\r\nUserWorkClient = tslib_1.__decorate([\r\n    inversify_1.injectable(),\r\n    tslib_1.__param(0, inversify_1.inject(_1.TYPES.UserWorkRoute)),\r\n    tslib_1.__param(1, inversify_1.inject(httpApi_1.httpTYPES.ApiClient)),\r\n    tslib_1.__metadata(\"design:paramtypes\", [typeof (_a = typeof _1.UserWorkRoute !== \"undefined\" && _1.UserWorkRoute) === \"function\" && _a || Object, typeof (_b = typeof httpApi_1.ApiClient !== \"undefined\" && httpApi_1.ApiClient) === \"function\" && _b || Object])\r\n], UserWorkClient);\r\nexports.UserWorkClient = UserWorkClient;\r\nvar _a, _b;\r\n/**\r\n * @overview\r\n ***Notes:**\r\n - Refer to the [REST API documentation](https://github.com/Baasic/baasic-rest-api/wiki) for detailed information about available Baasic REST API end-points.\r\n - All end-point objects are transformed by the associated route definition.\r\n */ \r\n\n\n\n//////////////////\n// WEBPACK FOOTER\n// ./src/modules/userProfile/userWorkClient.ts\n// module id = 351\n// module chunks = 0","/* globals module */\r\n/**\r\n * @module userWorkRoute\r\n * @description Baasic User Work Route Definition provides Baasic route templates which can be expanded to Baasic REST URIs. Various services can use Baasic User Work Route Definition to obtain needed routes while other routes will be obtained through HAL. By convention, all route services use the same function names as their corresponding services.\r\n */\r\n\"use strict\";\r\nObject.defineProperty(exports, \"__esModule\", { value: true });\r\nvar tslib_1 = require(\"tslib\");\r\nvar inversify_1 = require(\"inversify\");\r\nvar common_1 = require(\"../../common\");\r\n;\r\nvar contracts_1 = require(\"../../core/contracts\");\r\nvar UserWorkRoute = (function (_super) {\r\n    tslib_1.__extends(UserWorkRoute, _super);\r\n    function UserWorkRoute(appOptions) {\r\n        var _this = _super.call(this, appOptions) || this;\r\n        _this.appOptions = appOptions;\r\n        _this.findRoute = 'profiles/{userId}/work/{?searchQuery,page,rpp,sort,embed,fields}';\r\n        _this.getRoute = 'profiles/{userId}/work/{id}/{?embed,fields}';\r\n        _this.createRoute = 'profiles/{userId}/work';\r\n        _this.updateRoute = 'profiles/{userId}/work/{id}';\r\n        _this.deleteRoute = 'profiles/{userId}/work/{id}';\r\n        return _this;\r\n    }\r\n    /**\r\n     * Parses find route which can be expanded with additional options. Supported items are:\r\n     * - `searchQuery` - A string referencing user work properties using the phrase or BQL (Baasic Query Language) search.\r\n     * - `page` - A value used to set the page number, i.e. to retrieve certain user work subset from the storage.\r\n     * - `rpp` - A value used to limit the size of result set per page.\r\n     * - `sort` - A string used to set the user work property to sort the result collection by.\r\n     * - `embed` - Comma separated list of resources to be contained within the current representation.\r\n     * @method\r\n     * @param options Query resource options object.\r\n     * @example userWorkRoute.find({searchQuery: '<search-phrase>'});\r\n     **/\r\n    UserWorkRoute.prototype.find = function (options) {\r\n        return _super.prototype.baseFind.call(this, this.findRoute, options);\r\n    };\r\n    /**\r\n     * Parses get route; this route doesn't expose any properties.\r\n     * @method\r\n     * @param id User work id which uniquely identifies resource that needs to be retrieved.\r\n     * @param options Query resource options object.\r\n     * @example userWorkRoute.get(id, options);\r\n     **/\r\n    UserWorkRoute.prototype.get = function (id, options) {\r\n        return _super.prototype.baseGet.call(this, this.getRoute, id, options);\r\n    };\r\n    /**\r\n     * Parses create route; this URI template does not expose any additional options.\r\n     * @method\r\n     * @param data An user work object that needs to be inserted into the system.\r\n     * @example userWorkRoute.create(data);\r\n     **/\r\n    UserWorkRoute.prototype.create = function (data) {\r\n        return _super.prototype.baseCreate.call(this, this.createRoute, data);\r\n    };\r\n    /**\r\n      * Parses update route; this URI template does not expose any additional options.\r\n      * @method\r\n      * @param data An user work object used to update specified user work resource.\r\n      * @example userWorkRoute.create(data);\r\n      **/\r\n    UserWorkRoute.prototype.update = function (data) {\r\n        return _super.prototype.baseUpdate.call(this, this.updateRoute, data);\r\n    };\r\n    UserWorkRoute.prototype.delete = function (data) {\r\n        return _super.prototype.baseDelete.call(this, this.deleteRoute, data);\r\n    };\r\n    return UserWorkRoute;\r\n}(common_1.BaseRoute));\r\nUserWorkRoute = tslib_1.__decorate([\r\n    tslib_1.__param(0, inversify_1.inject(contracts_1.TYPES.IAppOptions)),\r\n    tslib_1.__metadata(\"design:paramtypes\", [typeof (_a = typeof contracts_1.IAppOptions !== \"undefined\" && contracts_1.IAppOptions) === \"function\" && _a || Object])\r\n], UserWorkRoute);\r\nexports.UserWorkRoute = UserWorkRoute;\r\nvar _a;\r\n/**\r\n * @overview\r\n ***Notes:**\r\n - Refer to the [REST API documentation](https://github.com/Baasic/baasic-rest-api/wiki) for detailed information about available Baasic REST API end-points.\r\n - [URI Template](https://github.com/Baasic/uritemplate-js) syntax enables expanding the Baasic route templates to Baasic REST URIs providing it with an object that contains URI parameters.\r\n - All end-point objects are transformed by the associated route definition.\r\n */ \r\n\n\n\n//////////////////\n// WEBPACK FOOTER\n// ./src/modules/userProfile/userWorkRoute.ts\n// module id = 352\n// module chunks = 0","\"use strict\";\r\nObject.defineProperty(exports, \"__esModule\", { value: true });\r\nvar inversify_1 = require(\"inversify\");\r\nvar _1 = require(\"./\");\r\nvar TYPES = {\r\n    ValueSetClient: Symbol(\"ValueSetClient\"),\r\n    ValueSetItemClient: Symbol(\"ValueSetItemClient\"),\r\n    ValueSetItemRoute: Symbol(\"ValueSetItemRoute\"),\r\n    ValueSetRoute: Symbol(\"ValueSetRoute\")\r\n};\r\nexports.TYPES = TYPES;\r\nvar diModule = new inversify_1.ContainerModule(function (bind) {\r\n    bind(TYPES.ValueSetItemRoute).to(_1.ValueSetItemRoute);\r\n    bind(TYPES.ValueSetItemClient).to(_1.ValueSetItemClient);\r\n    bind(TYPES.ValueSetRoute).to(_1.ValueSetRoute);\r\n    bind(TYPES.ValueSetClient).to(_1.ValueSetClient);\r\n});\r\nexports.diModule = diModule;\r\n\n\n\n//////////////////\n// WEBPACK FOOTER\n// ./src/modules/valueSet/diModule.ts\n// module id = 353\n// module chunks = 0","/**\r\n * @module valueSetClient\r\n * @description  Value Set Client provides an easy way to consume Baasic Value Set REST end-points. In order to obtain needed routes `baasicValueSetService` uses `baasicValueSetRouteService`.\r\n */\r\n\"use strict\";\r\nObject.defineProperty(exports, \"__esModule\", { value: true });\r\nvar tslib_1 = require(\"tslib\");\r\nvar inversify_1 = require(\"inversify\");\r\n;\r\nvar httpApi_1 = require(\"../../httpApi\");\r\nvar _1 = require(\"./\");\r\nvar ValueSetClient = (function () {\r\n    function ValueSetClient(valueSetRoute, valueSetItemClient, apiClient) {\r\n        this.valueSetRoute = valueSetRoute;\r\n        this.valueSetItemClient = valueSetItemClient;\r\n        this.apiClient = apiClient;\r\n    }\r\n    Object.defineProperty(ValueSetClient.prototype, \"items\", {\r\n        get: function () {\r\n            return this.valueSetItemClient;\r\n        },\r\n        enumerable: true,\r\n        configurable: true\r\n    });\r\n    Object.defineProperty(ValueSetClient.prototype, \"routeDefinition\", {\r\n        /**\r\n         * Provides direct access to `valueSetRoute`.\r\n         * @method\r\n         * @example valueSetClient.routeDefinition.get().expand(expandObject);\r\n        **/\r\n        get: function () {\r\n            return this.valueSetRoute;\r\n        },\r\n        enumerable: true,\r\n        configurable: true\r\n    });\r\n    /**\r\n     * Returns a promise that is resolved once the find action has been performed. Success response returns a list of value set resources matching given criteria.\r\n     * @param options query resource options object\r\n     * @returns A promise that is resolved once the find action has beend performed.\r\n     * @method\r\n     * @example valueSetClient.find({\r\n                    pageNumber: 1,\r\n                    pageSize : 10,\r\n                    orderBy : '<field>',\r\n                    orderDirection : '<asc|desc>',\r\n                    search : '<search-phrase>'\r\n                })\r\n                .then(function (collection) {\r\n                    // perform success action here\r\n                },\r\n                 function (response, status, headers, config) {\r\n                    // perform error handling here\r\n                });\r\n     **/\r\n    ValueSetClient.prototype.find = function (options) {\r\n        return this.apiClient.get(this.routeDefinition.find(options));\r\n    };\r\n    /**\r\n     * Returns a promise that is resolved once the get action has been performed. Success response returns the specified value set resource.\r\n     * @param setName value set name\r\n     * @param options query resource options object\r\n     * @returns A promise that is resolved once the get action has been performed.\r\n     * @method\r\n     * @example valueSetClient.get('<value-set-name>')\r\n                   .success(function (data) {\r\n                       // perform success action here\r\n                   })\r\n                   .error(function (response, status, headers, config) {\r\n                       // perform error handling here\r\n                   });\r\n    **/\r\n    ValueSetClient.prototype.get = function (setName, options) {\r\n        return this.apiClient.get(this.valueSetRoute.get(setName, options));\r\n    };\r\n    /**\r\n     * Returns a promise that is resolved once the create value set action has been performed; this action creates a new value set resource.\r\n     * @param data A key value object that needs to be inserted into the system.\r\n     * @returns A promise that is resolved once the create value set action has beend performed.\r\n     * @method\r\n     * @example valueSetClient.create({\r\n                    name: '<value-set-name>',\r\n                    description: '<description>',\r\n                    values: [{value: '<value>'}]\r\n                })\r\n                .then(function (data) {\r\n                    // perform success action here\r\n                },\r\n                 function (response, status, headers, config) {\r\n                    // perform error handling here\r\n                });\r\n     **/\r\n    ValueSetClient.prototype.create = function (data) {\r\n        return this.apiClient.post(this.routeDefinition.create(), this.routeDefinition.createParams(data));\r\n    };\r\n    /**\r\n     * Returns a promise that is resolved once the update value set action has been performed; this action updates a value set resource. This route uses HAL enabled objects to obtain routes and therefore it doesn't apply `baasicValueSetService` route template. Here is an example of how a route can be obtained from HAL enabled objects:\r\n     * ```\r\n     * let params = modelMapper.removeParams(valueSet);\r\n     * let uri = params['model'].links('put').href;\r\n     * ```\r\n     * @param data Value set object used to update specified value set resource.\r\n     * @returns A promise that is resolved once the update value set action has been performed.\r\n     * @method\r\n     * @example // valueSet is a resource previously fetched using get action.\r\n                    valueSet.name = '<new-name>';\r\n                    valueSetClient.update(valueSet)\r\n                        .then(function (data) {\r\n                            // perform success action here\r\n                        },\r\n                         function (response, status, headers, config) {\r\n                            // perform error handling here\r\n                        });\r\n     **/\r\n    ValueSetClient.prototype.update = function (data) {\r\n        return this.apiClient.put(this.routeDefinition.update(data), this.routeDefinition.updateParams(data));\r\n    };\r\n    /**\r\n     * Returns a promise that is resolved once the remove action has been performed. This action will delete a value set resource if the action is completed successfully. This route uses HAL enabled objects to obtain routes and therefore it doesn't apply `valueSetClient` route template. Here is an example of how a route can be obtained from HAL enabled objects:\r\n     * ```\r\n     * let params = modelMapper.removeParams(valueSet);\r\n     * let uri = params['model'].links('delete').href;\r\n     * ```\r\n     * @param data A value set object used to delete specified value set resource.\r\n     * @method\r\n     * @example // valueSet is a resource previously fetched using get action.\r\n                    valueSetClient.remove(valueSet)\r\n                        .then(function (data) {\r\n                            // perform success action here\r\n                        },\r\n                         function (response, status, headers, config) {\r\n                            // perform error handling here\r\n                        });\r\n     **/\r\n    ValueSetClient.prototype.remove = function (data) {\r\n        return this.apiClient.delete(this.routeDefinition.delete(data));\r\n    };\r\n    return ValueSetClient;\r\n}());\r\nValueSetClient = tslib_1.__decorate([\r\n    inversify_1.injectable(),\r\n    tslib_1.__param(0, inversify_1.inject(_1.TYPES.ValueSetRoute)),\r\n    tslib_1.__param(1, inversify_1.inject(_1.TYPES.ValueSetItemClient)),\r\n    tslib_1.__param(2, inversify_1.inject(httpApi_1.httpTYPES.ApiClient)),\r\n    tslib_1.__metadata(\"design:paramtypes\", [typeof (_a = typeof _1.ValueSetRoute !== \"undefined\" && _1.ValueSetRoute) === \"function\" && _a || Object, typeof (_b = typeof _1.ValueSetItemClient !== \"undefined\" && _1.ValueSetItemClient) === \"function\" && _b || Object, typeof (_c = typeof httpApi_1.ApiClient !== \"undefined\" && httpApi_1.ApiClient) === \"function\" && _c || Object])\r\n], ValueSetClient);\r\nexports.ValueSetClient = ValueSetClient;\r\nvar _a, _b, _c;\r\n/**\r\n * @copyright (c) 2017 Mono Ltd\r\n * @license MIT\r\n * @author Mono Ltd\r\n * @overview\r\n ***Notes:**\r\n - Refer to the [Baasic REST API](http://dev.baasic.com/api/reference/home) for detailed information about available Baasic REST API end-points.\r\n - All end-point objects are transformed by the associated route service.\r\n*/ \r\n\n\n\n//////////////////\n// WEBPACK FOOTER\n// ./src/modules/valueSet/valueSetClient.ts\n// module id = 354\n// module chunks = 0","\"use strict\";\r\nObject.defineProperty(exports, \"__esModule\", { value: true });\r\nvar tslib_1 = require(\"tslib\");\r\n/**\r\n * @module valueSetItemClient\r\n * @description  Value Set Item Client provides an easy way to consume  Value Set Item REST end-points. In order to obtain needed routes `valueSetItemClient` uses `valueSetItemRoute`.\r\n */\r\nvar inversify_1 = require(\"inversify\");\r\n;\r\nvar httpApi_1 = require(\"../../httpApi\");\r\nvar _1 = require(\"./\");\r\nvar ValueSetItemClient = (function () {\r\n    function ValueSetItemClient(valueSetItemRoute, apiClient) {\r\n        this.valueSetItemRoute = valueSetItemRoute;\r\n        this.apiClient = apiClient;\r\n    }\r\n    Object.defineProperty(ValueSetItemClient.prototype, \"routeDefinition\", {\r\n        get: function () {\r\n            return this.valueSetItemRoute;\r\n        },\r\n        enumerable: true,\r\n        configurable: true\r\n    });\r\n    /**\r\n     * Returns a promise that is resolved once the find action has been performed. Success response returns a list of value set item resources matching given criteria.\r\n     * @param options Query resource options object.\r\n     * @returns A promise that is resolved once the find action has been performed.\r\n     * @method items.find\r\n     * @example valueSetItemClient.find({\r\n                    setName: '<value-set-name>',\r\n                    pageNumber : 1,\r\n                    pageSize : 10,\r\n                    orderBy : '<field>',\r\n                    orderDirection : '<asc|desc>',\r\n                    search : '<search-phrase>' })\r\n                .then(function (collection) {\r\n                    // perform success action here\r\n                },\r\n                 function (response, status, headers, config) {\r\n                    // perform error handling here\r\n                });\r\n     **/\r\n    ValueSetItemClient.prototype.find = function (options) {\r\n        return this.apiClient.get(this.routeDefinition.find(options));\r\n    };\r\n    /**\r\n     * Returns a promise that is resolved once the get action has been performed. Success response returns the specified value set item resource.\r\n     * @param setName value set name\r\n     * @param id unique identifier of value set resource\r\n     * @param options query resource options object\r\n     * @returns A promise that is resolved once the get action has been performed.\r\n     * @method items.get\r\n     * @example valueSetItemClient.get('<value-set-name>', '<set-item-id>')\r\n                   .then(function (data) {\r\n                        // perform success action here\r\n                },\r\n                 function (response, status, headers, config) {\r\n                    // perform error handling here\r\n                });\r\n     **/\r\n    ValueSetItemClient.prototype.get = function (setName, id, options) {\r\n        return this.apiClient.get(this.valueSetItemRoute.get(setName, id, options));\r\n    };\r\n    /**\r\n     * Returns a promise that is resolved once the create value set item action has been performed; this action creates a new value set item resource.\r\n     * @method\r\n     * @param data A value set item object that needs to be inserted into the system.\r\n     * @returns A promise that is resolved once the create value set item action has been performed.\r\n     * @example valueSetItemClient.create({\r\n                    setId: '<value-set-id>',\r\n                    value: '<value>'\r\n                })\r\n                .then(function (data) {\r\n                    // perform success action here\r\n                },\r\n                 function (response, status, headers, config) {\r\n                    // perform error handling here\r\n                });\r\n     **/\r\n    ValueSetItemClient.prototype.create = function (data) {\r\n        return this.apiClient.post(this.routeDefinition.create(data), this.routeDefinition.createParams(data));\r\n    };\r\n    /**\r\n     * Returns a promise that is resolved once the update value set item action has been performed; this action updates a value set item resource. This route uses HAL enabled objects to obtain routes and therefore it doesn't apply `valueSetClient` route template. Here is an example of how a route can be obtained from HAL enabled objects:\r\n     * ```\r\n     * let params = modelMapper.removeParams(valueSetItem);\r\n     * let uri = params['model'].links('put').href;\r\n     * ```\r\n     * @method\r\n     * @param data A value set item object used to update specified value set resource.\r\n     * @returns A promise that is resolved once the update value set item action has been performed.\r\n     * @example // valueSetItem is a resource previously fetched using get action.\r\n                valueSetItem.value = '<new-value>';\r\n                valueSetItemClient.update(valueSetItem)\r\n                    .then(function (data) {\r\n                        // perform success action here\r\n                    },\r\n                     function (response, status, headers, config) {\r\n                         // perform error handling here\r\n                    });\r\n     **/\r\n    ValueSetItemClient.prototype.update = function (data) {\r\n        return this.apiClient.put(this.routeDefinition.update(data), this.routeDefinition.updateParams(data));\r\n    };\r\n    /**\r\n     * Returns a promise that is resolved once the remove action has been performed. This action will delete a value set item if the action is completed successfully. This route uses HAL enabled objects to obtain routes and therefore it doesn't apply `valueSetClient` route template. Here is an example of how a route can be obtained from HAL enabled objects:\r\n     * ```\r\n     * let params = modelMapper.removeParams(valueSetItem);\r\n     * let uri = params['model'].links('delete').href;\r\n     * ```\r\n     * @param data A value set item object used to delete specified value set resource.\r\n     * @returns A promise that is resolved once the remove action has been performed.\r\n     * @method\r\n     * @example // valueSetItem is a resource previously fetched using get action.\r\n                valueSetItemClient.remove(valueSetItem)\r\n                    .then(function (data) {\r\n                        // perform success action here\r\n                    },\r\n                     function (response, status, headers, config) {\r\n                        // perform error handling here\r\n                    });\r\n     **/\r\n    ValueSetItemClient.prototype.remove = function (data) {\r\n        return this.apiClient.delete(this.routeDefinition.delete(data));\r\n    };\r\n    return ValueSetItemClient;\r\n}());\r\nValueSetItemClient = tslib_1.__decorate([\r\n    inversify_1.injectable(),\r\n    tslib_1.__param(0, inversify_1.inject(_1.TYPES.ValueSetItemRoute)),\r\n    tslib_1.__param(1, inversify_1.inject(httpApi_1.httpTYPES.ApiClient)),\r\n    tslib_1.__metadata(\"design:paramtypes\", [typeof (_a = typeof _1.ValueSetItemRoute !== \"undefined\" && _1.ValueSetItemRoute) === \"function\" && _a || Object, typeof (_b = typeof httpApi_1.ApiClient !== \"undefined\" && httpApi_1.ApiClient) === \"function\" && _b || Object])\r\n], ValueSetItemClient);\r\nexports.ValueSetItemClient = ValueSetItemClient;\r\nvar _a, _b;\r\n/**\r\n * @copyright (c) 2017 Mono Ltd\r\n * @license MIT\r\n * @author Mono Ltd\r\n * @overview\r\n ***Notes:**\r\n - Refer to the [Baasic REST API](http://dev.baasic.com/api/reference/home) for detailed information about available Baasic REST API end-points.\r\n - All end-point objects are transformed by the associated route service.\r\n*/ \r\n\n\n\n//////////////////\n// WEBPACK FOOTER\n// ./src/modules/valueSet/valueSetItemClient.ts\n// module id = 355\n// module chunks = 0","\"use strict\";\r\nObject.defineProperty(exports, \"__esModule\", { value: true });\r\nvar tslib_1 = require(\"tslib\");\r\n/**\r\n * @module valueSetItemRoute\r\n * @description Baasic Value Set Item Route Definition provides Baasic route templates which can be expanded to Baasic REST URIs. Various services can use Baasic Value Set Item Route Service to obtain needed routes while other routes will be obtained through HAL. By convention, all route services  use the same function names as their corresponding services.\r\n */\r\nvar inversify_1 = require(\"inversify\");\r\nvar common_1 = require(\"../../common\");\r\n;\r\nvar contracts_1 = require(\"../../core/contracts\");\r\nvar ValueSetItemRoute = (function (_super) {\r\n    tslib_1.__extends(ValueSetItemRoute, _super);\r\n    function ValueSetItemRoute(appOptions) {\r\n        var _this = _super.call(this, appOptions) || this;\r\n        _this.appOptions = appOptions;\r\n        _this.findRoute = 'value-sets/{setName}/items/{?searchQuery,page,rpp,sort,embed,fields}';\r\n        _this.getRoute = 'value-sets/{setName}/items/{id}/{?embed,fields}';\r\n        _this.createRoute = 'value-sets/{setName}/items/';\r\n        _this.updateRoute = 'value-sets/{setId}/items/{id}';\r\n        _this.deleteRoute = 'value-sets/{setId}/items/{id}';\r\n        return _this;\r\n    }\r\n    /**\r\n     * Parses find value set items route which can be expanded with additional options. Supported items are:\r\n     * - `setName` - Value set name.\r\n     * - `searchQuery` - A string value used to identify value set items using the phrase search.\r\n     * - `page` - A value used to set the page number, i.e. to retrieve certain value set item subset from the storage.\r\n     * - `rpp` - A value used to limit the size of result set per page.\r\n     * - `sort` - A string used to set the value set item property to sort the result collection by.\r\n     * - `embed` - Comma separated list of resources to be contained within the current representation.\r\n     * @method items.find\r\n     * @param options Options object.\r\n     * @example valueSetItemRoute.find(options);\r\n     **/\r\n    ValueSetItemRoute.prototype.find = function (options) {\r\n        return _super.prototype.baseFind.call(this, this.findRoute, options);\r\n    };\r\n    /**\r\n     * Parses get route which must be expanded with the following items:\r\n     * - `setName` - Value set name.\r\n     * - `id` - Value set item id.\r\n     * @method\r\n     * @param setName Value set name.\r\n     * @param id Value set id.\r\n     * @param options Query resource options object.\r\n     * @example valueSetItemRoute.get(setName, id, options);\r\n     **/\r\n    ValueSetItemRoute.prototype.get = function (setName, id, options) {\r\n        var params = this.utility.extend({}, options);\r\n        params.setName = setName;\r\n        return _super.prototype.baseGet.call(this, this.getRoute, id, options);\r\n    };\r\n    /**\r\n     * Parses create value set item route; the URI template should be expanded with the value set name.\r\n     * @method\r\n     * @param data A value set item object that needs to be inserted into the system.\r\n     * @example valueSetItemRoute.create(data);\r\n     **/\r\n    ValueSetItemRoute.prototype.create = function (data) {\r\n        return _super.prototype.baseCreate.call(this, this.createRoute, data);\r\n    };\r\n    /**\r\n     * Parses update value set item route.\r\n     * @method\r\n     * @param data A value set item object used to update specified value set resource.\r\n     * @example valueSetItemRoute.update(data);\r\n     */\r\n    ValueSetItemRoute.prototype.update = function (data) {\r\n        return _super.prototype.baseUpdate.call(this, this.updateRoute, data);\r\n    };\r\n    /**\r\n     * Parses delete value set item route.\r\n     * @method\r\n     * @param data A value set item object used to delete specified value set resource.\r\n     * @example valueSetItemRoute.delete(data);\r\n     */\r\n    ValueSetItemRoute.prototype.delete = function (data) {\r\n        return _super.prototype.baseDelete.call(this, this.deleteRoute, data);\r\n    };\r\n    return ValueSetItemRoute;\r\n}(common_1.BaseRoute));\r\nValueSetItemRoute = tslib_1.__decorate([\r\n    inversify_1.injectable(),\r\n    tslib_1.__param(0, inversify_1.inject(contracts_1.TYPES.IAppOptions)),\r\n    tslib_1.__metadata(\"design:paramtypes\", [typeof (_a = typeof contracts_1.IAppOptions !== \"undefined\" && contracts_1.IAppOptions) === \"function\" && _a || Object])\r\n], ValueSetItemRoute);\r\nexports.ValueSetItemRoute = ValueSetItemRoute;\r\nvar _a;\r\n/**\r\n * @copyright (c) 2017 Mono Ltd\r\n * @license MIT\r\n * @author Mono Ltd\r\n * @overview\r\n ***Notes:**\r\n - Refer to the [Baasic REST API](http://dev.baasic.com/api/reference/home) for detailed information about available Baasic REST API end-points.\r\n - [URI Template](https://github.com/Baasic/uritemplate-js) syntax enables expanding the Baasic route templates to Baasic REST URIs providing it with an object that contains URI parameters.\r\n - All end-point objects are transformed by the associated route service.\r\n*/ \r\n\n\n\n//////////////////\n// WEBPACK FOOTER\n// ./src/modules/valueSet/valueSetItemRoute.ts\n// module id = 356\n// module chunks = 0","/**\r\n * @module valueSetRoute\r\n * @description Baasic Value Set Route Definition provides Baasic route templates which can be expanded to Baasic REST URIs. Various services can use Baasic Value Set Route Service to obtain needed routes while other routes will be obtained through HAL. By convention, all route services  use the same function names as their corresponding services.\r\n */\r\n\"use strict\";\r\nObject.defineProperty(exports, \"__esModule\", { value: true });\r\nvar tslib_1 = require(\"tslib\");\r\nvar inversify_1 = require(\"inversify\");\r\nvar common_1 = require(\"../../common\");\r\n;\r\nvar _1 = require(\"./\");\r\nvar contracts_1 = require(\"../../core/contracts\");\r\nvar ValueSetRoute = (function (_super) {\r\n    tslib_1.__extends(ValueSetRoute, _super);\r\n    function ValueSetRoute(appOptions, valueSetItemRoute) {\r\n        var _this = _super.call(this, appOptions) || this;\r\n        _this.appOptions = appOptions;\r\n        _this.valueSetItemRoute = valueSetItemRoute;\r\n        _this.findRoute = 'value-sets/{?searchQuery,page,rpp,sort,embed,fields}';\r\n        _this.getRoute = 'value-sets/{setName}/{?embed,fields}';\r\n        _this.createRoute = 'value-sets';\r\n        _this.updateRoute = 'value-sets/{id}';\r\n        _this.deleteRoute = 'value-sets/{id}';\r\n        return _this;\r\n    }\r\n    Object.defineProperty(ValueSetRoute.prototype, \"items\", {\r\n        get: function () {\r\n            return this.valueSetItemRoute;\r\n        },\r\n        enumerable: true,\r\n        configurable: true\r\n    });\r\n    /**\r\n     * Parses find value set route which can be expanded with additional options. Supported items are:\r\n     * - `searchQuery` - A string value used to identify value set resources using the phrase search.\r\n     * - `page` - A value used to set the page number, i.e. to retrieve certain value set subset from the storage.\r\n     * - `rpp` - A value used to limit the size of result set per page.\r\n     * - `sort` - A string used to set the value set property to sort the result collection by.\r\n     * - `embed` - Comma separated list of resources to be contained within the current representation.\r\n     * @method\r\n     * @param options Query resource options object.\r\n     * @example valueSetRoute.find(options);\r\n     **/\r\n    ValueSetRoute.prototype.find = function (options) {\r\n        return _super.prototype.baseFind.call(this, this.findRoute, options);\r\n    };\r\n    /**\r\n     * Parses get value set route which must be expanded with the name of the previously created value set resource in the system.\r\n     * @method\r\n     * @param setName Value Set name.\r\n     * @param options Query resource options object.\r\n     * @example valueSetRoute.get(setName, options);\r\n     **/\r\n    ValueSetRoute.prototype.get = function (setName, options) {\r\n        return _super.prototype.baseGet.call(this, this.getRoute, setName, options, 'setName');\r\n    };\r\n    /**\r\n     * Parses create value set route; this URI template does not expose any additional options.\r\n     * @method\r\n     * @example valueSetRoute.create();\r\n     **/\r\n    ValueSetRoute.prototype.create = function () {\r\n        return _super.prototype.baseCreate.call(this, this.createRoute, {});\r\n    };\r\n    /**\r\n     * Parses update value set route.\r\n     * @method\r\n     * @param data Value set object used to update specified value set resource.\r\n     * @example valueSetRoute.update(data);\r\n     */\r\n    ValueSetRoute.prototype.update = function (data) {\r\n        return _super.prototype.baseUpdate.call(this, this.updateRoute, data);\r\n    };\r\n    /**\r\n     * Parses delete value set route.\r\n     * @method\r\n     * @param data A value set object used to delete specified value set resource.\r\n     * @example valueSetRoute.delete(data);\r\n     */\r\n    ValueSetRoute.prototype.delete = function (data) {\r\n        return _super.prototype.baseDelete.call(this, this.deleteRoute, data);\r\n    };\r\n    return ValueSetRoute;\r\n}(common_1.BaseRoute));\r\nValueSetRoute = tslib_1.__decorate([\r\n    tslib_1.__param(0, inversify_1.inject(contracts_1.TYPES.IAppOptions)),\r\n    tslib_1.__param(1, inversify_1.inject(_1.TYPES.ValueSetItemRoute)),\r\n    tslib_1.__metadata(\"design:paramtypes\", [typeof (_a = typeof contracts_1.IAppOptions !== \"undefined\" && contracts_1.IAppOptions) === \"function\" && _a || Object, typeof (_b = typeof _1.ValueSetItemRoute !== \"undefined\" && _1.ValueSetItemRoute) === \"function\" && _b || Object])\r\n], ValueSetRoute);\r\nexports.ValueSetRoute = ValueSetRoute;\r\nvar _a, _b;\r\n/**\r\n * @copyright (c) 2017 Mono Ltd\r\n * @license MIT\r\n * @author Mono Ltd\r\n * @overview\r\n ***Notes:**\r\n - Refer to the [Baasic REST API](http://dev.baasic.com/api/reference/home) for detailed information about available Baasic REST API end-points.\r\n - [URI Template](https://github.com/Baasic/uritemplate-js) syntax enables expanding the Baasic route templates to Baasic REST URIs providing it with an object that contains URI parameters.\r\n - All end-point objects are transformed by the associated route service.\r\n*/ \r\n\n\n\n//////////////////\n// WEBPACK FOOTER\n// ./src/modules/valueSet/valueSetRoute.ts\n// module id = 357\n// module chunks = 0","/*global unescape, module, define, window, global*/\r\n\r\n/*\r\n UriTemplate Copyright (c) 2012-2013 Franz Antesberger. All Rights Reserved.\r\n Available via the MIT license.\r\n*/\r\n\r\n(function (exportCallback) {\r\n    \"use strict\";\r\n\r\nvar UriTemplateError = (function () {\r\n\r\n    function UriTemplateError (options) {\r\n        this.options = options;\r\n    }\r\n\r\n    UriTemplateError.prototype.toString = function () {\r\n        if (JSON && JSON.stringify) {\r\n            return JSON.stringify(this.options);\r\n        }\r\n        else {\r\n            return this.options;\r\n        }\r\n    };\r\n\r\n    return UriTemplateError;\r\n}());\r\n\r\nvar objectHelper = (function () {\r\n    function isArray (value) {\r\n        return Object.prototype.toString.apply(value) === '[object Array]';\r\n    }\r\n\r\n    function isString (value) {\r\n        return Object.prototype.toString.apply(value) === '[object String]';\r\n    }\r\n    \r\n    function isNumber (value) {\r\n        return Object.prototype.toString.apply(value) === '[object Number]';\r\n    }\r\n    \r\n    function isBoolean (value) {\r\n        return Object.prototype.toString.apply(value) === '[object Boolean]';\r\n    }\r\n    \r\n    function join (arr, separator) {\r\n        var\r\n            result = '',\r\n            first = true,\r\n            index;\r\n        for (index = 0; index < arr.length; index += 1) {\r\n            if (first) {\r\n                first = false;\r\n            }\r\n            else {\r\n                result += separator;\r\n            }\r\n            result += arr[index];\r\n        }\r\n        return result;\r\n    }\r\n\r\n    function map (arr, mapper) {\r\n        var\r\n            result = [],\r\n            index = 0;\r\n        for (; index < arr.length; index += 1) {\r\n            result.push(mapper(arr[index]));\r\n        }\r\n        return result;\r\n    }\r\n\r\n    function filter (arr, predicate) {\r\n        var\r\n            result = [],\r\n            index = 0;\r\n        for (; index < arr.length; index += 1) {\r\n            if (predicate(arr[index])) {\r\n                result.push(arr[index]);\r\n            }\r\n        }\r\n        return result;\r\n    }\r\n\r\n    function deepFreezeUsingObjectFreeze (object) {\r\n        if (typeof object !== \"object\" || object === null) {\r\n            return object;\r\n        }\r\n        Object.freeze(object);\r\n        var property, propertyName;\r\n        for (propertyName in object) {\r\n            if (object.hasOwnProperty(propertyName)) {\r\n                property = object[propertyName];\r\n                // be aware, arrays are 'object', too\r\n                if (typeof property === \"object\") {\r\n                    deepFreeze(property);\r\n                }\r\n            }\r\n        }\r\n        return object;\r\n    }\r\n\r\n    function deepFreeze (object) {\r\n        if (typeof Object.freeze === 'function') {\r\n            return deepFreezeUsingObjectFreeze(object);\r\n        }\r\n        return object;\r\n    }\r\n\r\n\r\n    return {\r\n        isArray: isArray,\r\n        isString: isString,\r\n        isNumber: isNumber,\r\n        isBoolean: isBoolean,\r\n        join: join,\r\n        map: map,\r\n        filter: filter,\r\n        deepFreeze: deepFreeze\r\n    };\r\n}());\r\n\r\nvar charHelper = (function () {\r\n\r\n    function isAlpha (chr) {\r\n        return (chr >= 'a' && chr <= 'z') || ((chr >= 'A' && chr <= 'Z'));\r\n    }\r\n\r\n    function isDigit (chr) {\r\n        return chr >= '0' && chr <= '9';\r\n    }\r\n\r\n    function isHexDigit (chr) {\r\n        return isDigit(chr) || (chr >= 'a' && chr <= 'f') || (chr >= 'A' && chr <= 'F');\r\n    }\r\n\r\n    return {\r\n        isAlpha: isAlpha,\r\n        isDigit: isDigit,\r\n        isHexDigit: isHexDigit\r\n    };\r\n}());\r\n\r\nvar pctEncoder = (function () {\r\n    var utf8 = {\r\n        encode: function (chr) {\r\n            // see http://ecmanaut.blogspot.de/2006/07/encoding-decoding-utf8-in-javascript.html\r\n            return unescape(encodeURIComponent(chr));\r\n        },\r\n        numBytes: function (firstCharCode) {\r\n            if (firstCharCode <= 0x7F) {\r\n                return 1;\r\n            }\r\n            else if (0xC2 <= firstCharCode && firstCharCode <= 0xDF) {\r\n                return 2;\r\n            }\r\n            else if (0xE0 <= firstCharCode && firstCharCode <= 0xEF) {\r\n                return 3;\r\n            }\r\n            else if (0xF0 <= firstCharCode && firstCharCode <= 0xF4) {\r\n                return 4;\r\n            }\r\n            // no valid first octet\r\n            return 0;\r\n        },\r\n        isValidFollowingCharCode: function (charCode) {\r\n            return 0x80 <= charCode && charCode <= 0xBF;\r\n        }\r\n    };\r\n\r\n    /**\r\n     * encodes a character, if needed or not.\r\n     * @param chr\r\n     * @return pct-encoded character\r\n     */\r\n    function encodeCharacter (chr) {\r\n        var\r\n            result = '',\r\n            octets = utf8.encode(chr),\r\n            octet,\r\n            index;\r\n        for (index = 0; index < octets.length; index += 1) {\r\n            octet = octets.charCodeAt(index);\r\n            result += '%' + (octet < 0x10 ? '0' : '') + octet.toString(16).toUpperCase();\r\n        }\r\n        return result;\r\n    }\r\n\r\n    /**\r\n     * Returns, whether the given text at start is in the form 'percent hex-digit hex-digit', like '%3F'\r\n     * @param text\r\n     * @param start\r\n     * @return {boolean|*|*}\r\n     */\r\n    function isPercentDigitDigit (text, start) {\r\n        return text.charAt(start) === '%' && charHelper.isHexDigit(text.charAt(start + 1)) && charHelper.isHexDigit(text.charAt(start + 2));\r\n    }\r\n\r\n    /**\r\n     * Parses a hex number from start with length 2.\r\n     * @param text a string\r\n     * @param start the start index of the 2-digit hex number\r\n     * @return {Number}\r\n     */\r\n    function parseHex2 (text, start) {\r\n        return parseInt(text.substr(start, 2), 16);\r\n    }\r\n\r\n    /**\r\n     * Returns whether or not the given char sequence is a correctly pct-encoded sequence.\r\n     * @param chr\r\n     * @return {boolean}\r\n     */\r\n    function isPctEncoded (chr) {\r\n        if (!isPercentDigitDigit(chr, 0)) {\r\n            return false;\r\n        }\r\n        var firstCharCode = parseHex2(chr, 1);\r\n        var numBytes = utf8.numBytes(firstCharCode);\r\n        if (numBytes === 0) {\r\n            return false;\r\n        }\r\n        for (var byteNumber = 1; byteNumber < numBytes; byteNumber += 1) {\r\n            if (!isPercentDigitDigit(chr, 3*byteNumber) || !utf8.isValidFollowingCharCode(parseHex2(chr, 3*byteNumber + 1))) {\r\n                return false;\r\n            }\r\n        }\r\n        return true;\r\n    }\r\n\r\n    /**\r\n     * Reads as much as needed from the text, e.g. '%20' or '%C3%B6'. It does not decode!\r\n     * @param text\r\n     * @param startIndex\r\n     * @return the character or pct-string of the text at startIndex\r\n     */\r\n    function pctCharAt(text, startIndex) {\r\n        var chr = text.charAt(startIndex);\r\n        if (!isPercentDigitDigit(text, startIndex)) {\r\n            return chr;\r\n        }\r\n        var utf8CharCode = parseHex2(text, startIndex + 1);\r\n        var numBytes = utf8.numBytes(utf8CharCode);\r\n        if (numBytes === 0) {\r\n            return chr;\r\n        }\r\n        for (var byteNumber = 1; byteNumber < numBytes; byteNumber += 1) {\r\n            if (!isPercentDigitDigit(text, startIndex + 3 * byteNumber) || !utf8.isValidFollowingCharCode(parseHex2(text, startIndex + 3 * byteNumber + 1))) {\r\n                return chr;\r\n            }\r\n        }\r\n        return text.substr(startIndex, 3 * numBytes);\r\n    }\r\n\r\n    return {\r\n        encodeCharacter: encodeCharacter,\r\n        isPctEncoded: isPctEncoded,\r\n        pctCharAt: pctCharAt\r\n    };\r\n}());\r\n\r\nvar rfcCharHelper = (function () {\r\n\r\n    /**\r\n     * Returns if an character is an varchar character according 2.3 of rfc 6570\r\n     * @param chr\r\n     * @return (Boolean)\r\n     */\r\n    function isVarchar (chr) {\r\n        return charHelper.isAlpha(chr) || charHelper.isDigit(chr) || chr === '_' || pctEncoder.isPctEncoded(chr);\r\n    }\r\n\r\n    /**\r\n     * Returns if chr is an unreserved character according 1.5 of rfc 6570\r\n     * @param chr\r\n     * @return {Boolean}\r\n     */\r\n    function isUnreserved (chr) {\r\n        return charHelper.isAlpha(chr) || charHelper.isDigit(chr) || chr === '-' || chr === '.' || chr === '_' || chr === '~';\r\n    }\r\n\r\n    /**\r\n     * Returns if chr is an reserved character according 1.5 of rfc 6570\r\n     * or the percent character mentioned in 3.2.1.\r\n     * @param chr\r\n     * @return {Boolean}\r\n     */\r\n    function isReserved (chr) {\r\n        return chr === ':' || chr === '/' || chr === '?' || chr === '#' || chr === '[' || chr === ']' || chr === '@' || chr === '!' || chr === '$' || chr === '&' || chr === '(' ||\r\n            chr === ')' || chr === '*' || chr === '+' || chr === ',' || chr === ';' || chr === '=' || chr === \"'\";\r\n    }\r\n\r\n    return {\r\n        isVarchar: isVarchar,\r\n        isUnreserved: isUnreserved,\r\n        isReserved: isReserved\r\n    };\r\n\r\n}());\r\n\r\n/**\r\n * encoding of rfc 6570\r\n */\r\nvar encodingHelper = (function () {\r\n\r\n    function encode (text, passReserved) {\r\n        var\r\n            result = '',\r\n            index,\r\n            chr = '';\r\n        if (typeof text === \"number\" || typeof text === \"boolean\") {\r\n            text = text.toString();\r\n        }\r\n        for (index = 0; index < text.length; index += chr.length) {\r\n            chr = text.charAt(index);\r\n            result += rfcCharHelper.isUnreserved(chr) || (passReserved && rfcCharHelper.isReserved(chr)) ? chr : pctEncoder.encodeCharacter(chr);\r\n        }\r\n        return result;\r\n    }\r\n\r\n    function encodePassReserved (text) {\r\n        return encode(text, true);\r\n    }\r\n\r\n    function encodeLiteralCharacter (literal, index) {\r\n        var chr = pctEncoder.pctCharAt(literal, index);\r\n        if (chr.length > 1) {\r\n            return chr;\r\n        }\r\n        else {\r\n            return rfcCharHelper.isReserved(chr) || rfcCharHelper.isUnreserved(chr) ? chr : pctEncoder.encodeCharacter(chr);\r\n        }\r\n    }\r\n\r\n    function encodeLiteral (literal) {\r\n        var\r\n            result = '',\r\n            index,\r\n            chr = '';\r\n        for (index = 0; index < literal.length; index += chr.length) {\r\n            chr = pctEncoder.pctCharAt(literal, index);\r\n            if (chr.length > 1) {\r\n                result += chr;\r\n            }\r\n            else {\r\n                result += rfcCharHelper.isReserved(chr) || rfcCharHelper.isUnreserved(chr) ? chr : pctEncoder.encodeCharacter(chr);\r\n            }\r\n        }\r\n        return result;\r\n    }\r\n\r\n    return {\r\n        encode: encode,\r\n        encodePassReserved: encodePassReserved,\r\n        encodeLiteral: encodeLiteral,\r\n        encodeLiteralCharacter: encodeLiteralCharacter\r\n    };\r\n\r\n}());\r\n\r\n\r\n// the operators defined by rfc 6570\r\nvar operators = (function () {\r\n\r\n    var\r\n        bySymbol = {};\r\n\r\n    function create (symbol) {\r\n        bySymbol[symbol] = {\r\n            symbol: symbol,\r\n            separator: (symbol === '?') ? '&' : (symbol === '' || symbol === '+' || symbol === '#') ? ',' : symbol,\r\n            named: symbol === ';' || symbol === '&' || symbol === '?',\r\n            ifEmpty: (symbol === '&' || symbol === '?') ? '=' : '',\r\n            first: (symbol === '+' ) ? '' : symbol,\r\n            encode: (symbol === '+' || symbol === '#') ? encodingHelper.encodePassReserved : encodingHelper.encode,\r\n            toString: function () {\r\n                return this.symbol;\r\n            }\r\n        };\r\n    }\r\n\r\n    create('');\r\n    create('+');\r\n    create('#');\r\n    create('.');\r\n    create('/');\r\n    create(';');\r\n    create('?');\r\n    create('&');\r\n    return {\r\n        valueOf: function (chr) {\r\n            if (bySymbol[chr]) {\r\n                return bySymbol[chr];\r\n            }\r\n            if (\"=,!@|\".indexOf(chr) >= 0) {\r\n                return null;\r\n            }\r\n            return bySymbol[''];\r\n        }\r\n    };\r\n}());\r\n\r\n\r\n/**\r\n * Detects, whether a given element is defined in the sense of rfc 6570\r\n * Section 2.3 of the RFC makes clear defintions:\r\n * * undefined and null are not defined.\r\n * * the empty string is defined\r\n * * an array (\"list\") is defined, if it is not empty (even if all elements are not defined)\r\n * * an object (\"map\") is defined, if it contains at least one property with defined value\r\n * @param object\r\n * @return {Boolean}\r\n */\r\nfunction isDefined (object) {\r\n    var\r\n        propertyName;\r\n    if (object === null || object === undefined) {\r\n        return false;\r\n    }\r\n    if (objectHelper.isArray(object)) {\r\n        // Section 2.3: A variable defined as a list value is considered undefined if the list contains zero members\r\n        return object.length > 0;\r\n    }\r\n    if (typeof object === \"string\" || typeof object === \"number\" || typeof object === \"boolean\") {\r\n        // falsy values like empty strings, false or 0 are \"defined\"\r\n        return true;\r\n    }\r\n    // else Object\r\n    for (propertyName in object) {\r\n        if (object.hasOwnProperty(propertyName) && isDefined(object[propertyName])) {\r\n            return true;\r\n        }\r\n    }\r\n    return false;\r\n}\r\n\r\nvar LiteralExpression = (function () {\r\n    function LiteralExpression (literal) {\r\n        this.literal = encodingHelper.encodeLiteral(literal);\r\n    }\r\n\r\n    LiteralExpression.prototype.expand = function () {\r\n        return this.literal;\r\n    };\r\n\r\n    LiteralExpression.prototype.toString = LiteralExpression.prototype.expand;\r\n\r\n    return LiteralExpression;\r\n}());\r\n\r\nvar parse = (function () {\r\n\r\n    function parseExpression (expressionText) {\r\n        var\r\n            operator,\r\n            varspecs = [],\r\n            varspec = null,\r\n            varnameStart = null,\r\n            maxLengthStart = null,\r\n            index,\r\n            chr = '';\r\n\r\n        function closeVarname () {\r\n            var varname = expressionText.substring(varnameStart, index);\r\n            if (varname.length === 0) {\r\n                throw new UriTemplateError({expressionText: expressionText, message: \"a varname must be specified\", position: index});\r\n            }\r\n            varspec = {varname: varname, exploded: false, maxLength: null};\r\n            varnameStart = null;\r\n        }\r\n\r\n        function closeMaxLength () {\r\n            if (maxLengthStart === index) {\r\n                throw new UriTemplateError({expressionText: expressionText, message: \"after a ':' you have to specify the length\", position: index});\r\n            }\r\n            varspec.maxLength = parseInt(expressionText.substring(maxLengthStart, index), 10);\r\n            maxLengthStart = null;\r\n        }\r\n\r\n        operator = (function (operatorText) {\r\n            var op = operators.valueOf(operatorText);\r\n            if (op === null) {\r\n                throw new UriTemplateError({expressionText: expressionText, message: \"illegal use of reserved operator\", position: index, operator: operatorText});\r\n            }\r\n            return op;\r\n        }(expressionText.charAt(0)));\r\n        index = operator.symbol.length;\r\n\r\n        varnameStart = index;\r\n\r\n        for (; index < expressionText.length; index += chr.length) {\r\n            chr = pctEncoder.pctCharAt(expressionText, index);\r\n\r\n            if (varnameStart !== null) {\r\n                // the spec says: varname =  varchar *( [\".\"] varchar )\r\n                // so a dot is allowed except for the first char\r\n                if (chr === '.') {\r\n                    if (varnameStart === index) {\r\n                        throw new UriTemplateError({expressionText: expressionText, message: \"a varname MUST NOT start with a dot\", position: index});\r\n                    }\r\n                    continue;\r\n                }\r\n                if (rfcCharHelper.isVarchar(chr)) {\r\n                    continue;\r\n                }\r\n                closeVarname();\r\n            }\r\n            if (maxLengthStart !== null) {\r\n                if (index === maxLengthStart && chr === '0') {\r\n                    throw new UriTemplateError({expressionText: expressionText, message: \"A :prefix must not start with digit 0\", position: index});\r\n                }\r\n                if (charHelper.isDigit(chr)) {\r\n                    if (index - maxLengthStart >= 4) {\r\n                        throw new UriTemplateError({expressionText: expressionText, message: \"A :prefix must have max 4 digits\", position: index});\r\n                    }\r\n                    continue;\r\n                }\r\n                closeMaxLength();\r\n            }\r\n            if (chr === ':') {\r\n                if (varspec.maxLength !== null) {\r\n                    throw new UriTemplateError({expressionText: expressionText, message: \"only one :maxLength is allowed per varspec\", position: index});\r\n                }\r\n                if (varspec.exploded) {\r\n                    throw new UriTemplateError({expressionText: expressionText, message: \"an exploeded varspec MUST NOT be varspeced\", position: index});\r\n                }\r\n                maxLengthStart = index + 1;\r\n                continue;\r\n            }\r\n            if (chr === '*') {\r\n                if (varspec === null) {\r\n                    throw new UriTemplateError({expressionText: expressionText, message: \"exploded without varspec\", position: index});\r\n                }\r\n                if (varspec.exploded) {\r\n                    throw new UriTemplateError({expressionText: expressionText, message: \"exploded twice\", position: index});\r\n                }\r\n                if (varspec.maxLength) {\r\n                    throw new UriTemplateError({expressionText: expressionText, message: \"an explode (*) MUST NOT follow to a prefix\", position: index});\r\n                }\r\n                varspec.exploded = true;\r\n                continue;\r\n            }\r\n            // the only legal character now is the comma\r\n            if (chr === ',') {\r\n                varspecs.push(varspec);\r\n                varspec = null;\r\n                varnameStart = index + 1;\r\n                continue;\r\n            }\r\n            throw new UriTemplateError({expressionText: expressionText, message: \"illegal character\", character: chr, position: index});\r\n        } // for chr\r\n        if (varnameStart !== null) {\r\n            closeVarname();\r\n        }\r\n        if (maxLengthStart !== null) {\r\n            closeMaxLength();\r\n        }\r\n        varspecs.push(varspec);\r\n        return new VariableExpression(expressionText, operator, varspecs);\r\n    }\r\n\r\n    function parse (uriTemplateText) {\r\n        // assert filled string\r\n        var\r\n            index,\r\n            chr,\r\n            expressions = [],\r\n            braceOpenIndex = null,\r\n            literalStart = 0;\r\n        for (index = 0; index < uriTemplateText.length; index += 1) {\r\n            chr = uriTemplateText.charAt(index);\r\n            if (literalStart !== null) {\r\n                if (chr === '}') {\r\n                    throw new UriTemplateError({templateText: uriTemplateText, message: \"unopened brace closed\", position: index});\r\n                }\r\n                if (chr === '{') {\r\n                    if (literalStart < index) {\r\n                        expressions.push(new LiteralExpression(uriTemplateText.substring(literalStart, index)));\r\n                    }\r\n                    literalStart = null;\r\n                    braceOpenIndex = index;\r\n                }\r\n                continue;\r\n            }\r\n\r\n            if (braceOpenIndex !== null) {\r\n                // here just { is forbidden\r\n                if (chr === '{') {\r\n                    throw new UriTemplateError({templateText: uriTemplateText, message: \"brace already opened\", position: index});\r\n                }\r\n                if (chr === '}') {\r\n                    if (braceOpenIndex + 1 === index) {\r\n                        throw new UriTemplateError({templateText: uriTemplateText, message: \"empty braces\", position: braceOpenIndex});\r\n                    }\r\n                    try {\r\n                        expressions.push(parseExpression(uriTemplateText.substring(braceOpenIndex + 1, index)));\r\n                    }\r\n                    catch (error) {\r\n                        if (error.prototype === UriTemplateError.prototype) {\r\n                            throw new UriTemplateError({templateText: uriTemplateText, message: error.options.message, position: braceOpenIndex + error.options.position, details: error.options});\r\n                        }\r\n                        throw error;\r\n                    }\r\n                    braceOpenIndex = null;\r\n                    literalStart = index + 1;\r\n                }\r\n                continue;\r\n            }\r\n            throw new Error('reached unreachable code');\r\n        }\r\n        if (braceOpenIndex !== null) {\r\n            throw new UriTemplateError({templateText: uriTemplateText, message: \"unclosed brace\", position: braceOpenIndex});\r\n        }\r\n        if (literalStart < uriTemplateText.length) {\r\n            expressions.push(new LiteralExpression(uriTemplateText.substr(literalStart)));\r\n        }\r\n        return new UriTemplate(uriTemplateText, expressions);\r\n    }\r\n\r\n    return parse;\r\n}());\r\n\r\nvar VariableExpression = (function () {\r\n    // helper function if JSON is not available\r\n    function prettyPrint (value) {\r\n        return (JSON && JSON.stringify) ? JSON.stringify(value) : value;\r\n    }\r\n\r\n    function isEmpty (value) {\r\n        if (!isDefined(value)) {\r\n            return true;\r\n        }\r\n        if (objectHelper.isString(value)) {\r\n            return value === '';\r\n        }\r\n        if (objectHelper.isNumber(value) || objectHelper.isBoolean(value)) {\r\n            return false;\r\n        }\r\n        if (objectHelper.isArray(value)) {\r\n            return value.length === 0;\r\n        }\r\n        for (var propertyName in value) {\r\n            if (value.hasOwnProperty(propertyName)) {\r\n                return false;\r\n            }\r\n        }\r\n        return true;\r\n    }\r\n\r\n    function propertyArray (object) {\r\n        var\r\n            result = [],\r\n            propertyName;\r\n        for (propertyName in object) {\r\n            if (object.hasOwnProperty(propertyName)) {\r\n                result.push({name: propertyName, value: object[propertyName]});\r\n            }\r\n        }\r\n        return result;\r\n    }\r\n\r\n    function VariableExpression (templateText, operator, varspecs) {\r\n        this.templateText = templateText;\r\n        this.operator = operator;\r\n        this.varspecs = varspecs;\r\n    }\r\n\r\n    VariableExpression.prototype.toString = function () {\r\n        return this.templateText;\r\n    };\r\n\r\n    function expandSimpleValue(varspec, operator, value) {\r\n        var result = '';\r\n        value = value.toString();\r\n        if (operator.named) {\r\n            result += encodingHelper.encodeLiteral(varspec.varname);\r\n            if (value === '') {\r\n                result += operator.ifEmpty;\r\n                return result;\r\n            }\r\n            result += '=';\r\n        }\r\n        if (varspec.maxLength !== null) {\r\n            value = value.substr(0, varspec.maxLength);\r\n        }\r\n        result += operator.encode(value);\r\n        return result;\r\n    }\r\n\r\n    function valueDefined (nameValue) {\r\n        return isDefined(nameValue.value);\r\n    }\r\n\r\n    function expandNotExploded(varspec, operator, value) {\r\n        var\r\n            arr = [],\r\n            result = '';\r\n        if (operator.named) {\r\n            result += encodingHelper.encodeLiteral(varspec.varname);\r\n            if (isEmpty(value)) {\r\n                result += operator.ifEmpty;\r\n                return result;\r\n            }\r\n            result += '=';\r\n        }\r\n        if (objectHelper.isArray(value)) {\r\n            arr = value;\r\n            arr = objectHelper.filter(arr, isDefined);\r\n            arr = objectHelper.map(arr, operator.encode);\r\n            result += objectHelper.join(arr, ',');\r\n        }\r\n        else {\r\n            arr = propertyArray(value);\r\n            arr = objectHelper.filter(arr, valueDefined);\r\n            arr = objectHelper.map(arr, function (nameValue) {\r\n                return operator.encode(nameValue.name) + ',' + operator.encode(nameValue.value);\r\n            });\r\n            result += objectHelper.join(arr, ',');\r\n        }\r\n        return result;\r\n    }\r\n\r\n    function expandExplodedNamed (varspec, operator, value) {\r\n        var\r\n            isArray = objectHelper.isArray(value),\r\n            arr = [];\r\n        if (isArray) {\r\n            arr = value;\r\n            arr = objectHelper.filter(arr, isDefined);\r\n            arr = objectHelper.map(arr, function (listElement) {\r\n                var tmp = encodingHelper.encodeLiteral(varspec.varname);\r\n                if (isEmpty(listElement)) {\r\n                    tmp += operator.ifEmpty;\r\n                }\r\n                else {\r\n                    tmp += '=' + operator.encode(listElement);\r\n                }\r\n                return tmp;\r\n            });\r\n        }\r\n        else {\r\n            arr = propertyArray(value);\r\n            arr = objectHelper.filter(arr, valueDefined);\r\n            arr = objectHelper.map(arr, function (nameValue) {\r\n                var tmp = encodingHelper.encodeLiteral(nameValue.name);\r\n                if (isEmpty(nameValue.value)) {\r\n                    tmp += operator.ifEmpty;\r\n                }\r\n                else {\r\n                    tmp += '=' + operator.encode(nameValue.value);\r\n                }\r\n                return tmp;\r\n            });\r\n        }\r\n        return objectHelper.join(arr, operator.separator);\r\n    }\r\n\r\n    function expandExplodedUnnamed (operator, value) {\r\n        var\r\n            arr = [],\r\n            result = '';\r\n        if (objectHelper.isArray(value)) {\r\n            arr = value;\r\n            arr = objectHelper.filter(arr, isDefined);\r\n            arr = objectHelper.map(arr, operator.encode);\r\n            result += objectHelper.join(arr, operator.separator);\r\n        }\r\n        else {\r\n            arr = propertyArray(value);\r\n            arr = objectHelper.filter(arr, function (nameValue) {\r\n                return isDefined(nameValue.value);\r\n            });\r\n            arr = objectHelper.map(arr, function (nameValue) {\r\n                return operator.encode(nameValue.name) + '=' + operator.encode(nameValue.value);\r\n            });\r\n            result += objectHelper.join(arr, operator.separator);\r\n        }\r\n        return result;\r\n    }\r\n\r\n\r\n    VariableExpression.prototype.expand = function (variables) {\r\n        var\r\n            expanded = [],\r\n            index,\r\n            varspec,\r\n            value,\r\n            valueIsArr,\r\n            oneExploded = false,\r\n            operator = this.operator;\r\n\r\n        // expand each varspec and join with operator's separator\r\n        for (index = 0; index < this.varspecs.length; index += 1) {\r\n            varspec = this.varspecs[index];\r\n            value = variables[varspec.varname];\r\n            // if (!isDefined(value)) {\r\n            // if (variables.hasOwnProperty(varspec.name)) {\r\n            if (value === null || value === undefined) {\r\n                continue;\r\n            }\r\n            if (varspec.exploded) {\r\n                oneExploded = true;\r\n            }\r\n            valueIsArr = objectHelper.isArray(value);\r\n            if (typeof value === \"string\" || typeof value === \"number\" || typeof value === \"boolean\") {\r\n                expanded.push(expandSimpleValue(varspec, operator, value));\r\n            }\r\n            else if (varspec.maxLength && isDefined(value)) {\r\n                // 2.4.1 of the spec says: \"Prefix modifiers are not applicable to variables that have composite values.\"\r\n                throw new Error('Prefix modifiers are not applicable to variables that have composite values. You tried to expand ' + this + \" with \" + prettyPrint(value));\r\n            }\r\n            else if (!varspec.exploded) {\r\n                if (operator.named || !isEmpty(value)) {\r\n                    expanded.push(expandNotExploded(varspec, operator, value));\r\n                }\r\n            }\r\n            else if (isDefined(value)) {\r\n                if (operator.named) {\r\n                    expanded.push(expandExplodedNamed(varspec, operator, value));\r\n                }\r\n                else {\r\n                    expanded.push(expandExplodedUnnamed(operator, value));\r\n                }\r\n            }\r\n        }\r\n\r\n        if (expanded.length === 0) {\r\n            return \"\";\r\n        }\r\n        else {\r\n            return operator.first + objectHelper.join(expanded, operator.separator);\r\n        }\r\n    };\r\n\r\n    return VariableExpression;\r\n}());\r\n\r\nvar UriTemplate = (function () {\r\n    function UriTemplate (templateText, expressions) {\r\n        this.templateText = templateText;\r\n        this.expressions = expressions;\r\n        objectHelper.deepFreeze(this);\r\n    }\r\n\r\n    UriTemplate.prototype.toString = function () {\r\n        return this.templateText;\r\n    };\r\n\r\n    UriTemplate.prototype.expand = function (variables) {\r\n        // this.expressions.map(function (expression) {return expression.expand(variables);}).join('');\r\n        var\r\n            index,\r\n            result = '';\r\n        for (index = 0; index < this.expressions.length; index += 1) {\r\n            result += this.expressions[index].expand(variables);\r\n        }\r\n        return result;\r\n    };\r\n\r\n    UriTemplate.parse = parse;\r\n    UriTemplate.UriTemplateError = UriTemplateError;\r\n    return UriTemplate;\r\n}());\r\n\r\n    exportCallback(UriTemplate);\r\n\r\n}(function (UriTemplate) {\r\n        \"use strict\";\r\n        // export UriTemplate, when module is present, or pass it to window or global\r\n        if (typeof module !== \"undefined\") {\r\n            module.exports = UriTemplate;\r\n        }\r\n        else if (typeof define === \"function\") {\r\n            define([],function() {\r\n                return UriTemplate;\r\n            });\r\n        }\r\n        else if (typeof window !== \"undefined\") {\r\n            window.UriTemplate = UriTemplate;\r\n        }\r\n        else {\r\n            global.UriTemplate = UriTemplate;\r\n        }\r\n    }\r\n));\r\n\n\n\n//////////////////\n// WEBPACK FOOTER\n// ./~/uritemplate/bin/uritemplate.js\n// module id = 358\n// module chunks = 0"],"sourceRoot":""}